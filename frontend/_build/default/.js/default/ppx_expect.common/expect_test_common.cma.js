// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Expect_test_common__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Expect_test_common = [0];
   runtime.caml_register_global(0, Expect_test_common, "Expect_test_common__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Expect_test_common__Import
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Expect_test_common_Import = [0];
   runtime.caml_register_global
    (0, Expect_test_common_Import, "Expect_test_common__Import");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Expect_test_common__File
//# unitInfo: Requires: Base, Base__Comparable, Base__String, Sexplib0__Sexp_conv_record, Stdlib__Filename, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_end_pos$0 = "end_pos",
    cst_filename$0 = "filename",
    cst_line_number$0 = "line_number",
    cst_line_start$0 = "line_start",
    cst_start_pos$0 = "start_pos",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_002 = "file.ml.Location.T.t",
    Base = global_data.Base,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Base_String = global_data.Base__String,
    Base_Comparable = global_data.Base__Comparable,
    hash_fold_t = Base_String[40],
    t_of_sexp = Base_String[41],
    sexp_of_t = Base_String[42],
    of_string = Base_String[43],
    to_string = Base_String[44],
    symbol = Base_String[45],
    symbol$0 = Base_String[46],
    symbol$1 = Base_String[47],
    symbol$2 = Base_String[48],
    symbol$3 = Base_String[49],
    symbol$4 = Base_String[50],
    compare = Base_String[51],
    min = Base_String[52],
    max = Base_String[53],
    ascending = Base_String[54],
    descending = Base_String[55],
    between = Base_String[56],
    clamp_exn = Base_String[57],
    clamp = Base_String[58],
    comparator = Base_String[59],
    pp = Base_String[60],
    hashable = Base_String[61],
    equal = Base_String[131];
   function relative_to(dir, t){
    return caml_call1(Stdlib_Filename[5], t)
            ? caml_call2(Stdlib_Filename[4], dir, t)
            : t;
   }
   var
    Name =
      [0,
       relative_to,
       hash_fold_t,
       function(_o_){return runtime.Base_hash_string(_o_);},
       t_of_sexp,
       sexp_of_t,
       of_string,
       to_string,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       pp,
       hashable];
   a:
   {
    var
     cst_Expect_test_collector_File =
       "Expect_test_collector.File.Digest.of_string, unexpected length",
     cst_Expect_test_collector_File$0 =
       "Expect_test_collector.File.Digest.of_string",
     _a_ = [0, cst_end_pos$0],
     _b_ = [0, cst_start_pos$0],
     _c_ = [0, cst_line_start$0],
     _d_ = [0, cst_line_number$0],
     _e_ = [0, cst_filename$0],
     cst_end_pos = cst_end_pos$0,
     cst_start_pos = cst_start_pos$0,
     cst_line_start = cst_line_start$0,
     cst_line_number = cst_line_number$0,
     cst_filename = cst_filename$0;
    try{var v = runtime.caml_sys_getcwd(0);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), dir_or_error = [0, 3458171, exn];
     break a;
    }
    var dir_or_error = [0, 17724, v];
   }
   function initial_dir(param){
    if(3458171 <= dir_or_error[1]){
     var exn = dir_or_error[2];
     throw caml_maybe_attach_backtrace(exn, 1);
    }
    var v = dir_or_error[2];
    return v;
   }
   function t_of_sexp$0(x_003){
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_002,
             [0,
              cst_filename,
              1,
              Name[4],
              [0,
               cst_line_number,
               1,
               Base[124],
               [0,
                cst_line_start,
                1,
                Base[124],
                [0,
                 cst_start_pos,
                 1,
                 Base[124],
                 [0, cst_end_pos, 1, Base[124], 0]]]]],
             function(param){
              return param !== cst_end_pos$0
                      ? param
                        !== cst_filename$0
                        ? param
                          !== cst_line_number$0
                          ? param
                            !== cst_line_start$0
                            ? param !== cst_start_pos$0 ? -1 : 3
                            : 2
                          : 1
                        : 0
                      : 4;
             },
             0,
             function(param){
              var
               _l_ = param[2],
               _m_ = _l_[2],
               _n_ = _m_[2],
               end_pos = _n_[2][1],
               start_pos = _n_[1],
               line_start = _m_[1],
               line_number = _l_[1],
               filename = param[1];
              return [0,
                      filename,
                      line_number,
                      line_start,
                      start_pos,
                      end_pos];
             },
             x_003);
   }
   function sexp_of_t$0(param){
    var
     end_pos_013 = param[5],
     start_pos_011 = param[4],
     line_start_009 = param[3],
     line_number_007 = param[2],
     filename_005 = param[1],
     arg_014 = caml_call1(Base[125], end_pos_013),
     bnds_004 = [0, [1, [0, _a_, [0, arg_014, 0]]], 0],
     arg_012 = caml_call1(Base[125], start_pos_011),
     bnds_004$0 = [0, [1, [0, _b_, [0, arg_012, 0]]], bnds_004],
     arg_010 = caml_call1(Base[125], line_start_009),
     bnds_004$1 = [0, [1, [0, _c_, [0, arg_010, 0]]], bnds_004$0],
     arg_008 = caml_call1(Base[125], line_number_007),
     bnds_004$2 = [0, [1, [0, _d_, [0, arg_008, 0]]], bnds_004$1],
     arg_006 = caml_call1(Name[5], filename_005),
     bnds_004$3 = [0, [1, [0, _e_, [0, arg_006, 0]]], bnds_004$2];
    return [1, bnds_004$3];
   }
   function compare$0(a_015, b_016){
    if(a_015 === b_016) return 0;
    var n = caml_call2(Name[15], a_015[1], b_016[1]);
    if(0 !== n) return n;
    var n$0 = caml_call2(Base[119], a_015[2], b_016[2]);
    if(0 !== n$0) return n$0;
    var n$1 = caml_call2(Base[119], a_015[3], b_016[3]);
    if(0 !== n$1) return n$1;
    var n$2 = caml_call2(Base[119], a_015[4], b_016[4]);
    return 0 === n$2 ? caml_call2(Base[119], a_015[5], b_016[5]) : n$2;
   }
   var
    include = caml_call1(Base_Comparable[11], [0, compare$0, sexp_of_t$0]),
    symbol$5 = include[1],
    symbol$6 = include[2],
    symbol$7 = include[3],
    symbol$8 = include[4],
    symbol$9 = include[5],
    symbol$10 = include[6],
    equal$0 = include[7],
    compare$1 = include[8],
    min$0 = include[9],
    max$0 = include[10],
    ascending$0 = include[11],
    descending$0 = include[12],
    between$0 = include[13],
    clamp_exn$0 = include[14],
    clamp$0 = include[15],
    comparator$0 = include[16];
   function beginning_of_file(filename){return [0, filename, 1, 0, 0, 0];}
   function of_source_code_position(pos){
    var
     _g_ = pos[4],
     _h_ = pos[4],
     _i_ = pos[3],
     _j_ = pos[2],
     _k_ = caml_call1(Stdlib_Filename[13], pos[1]);
    return [0, caml_call1(Name[6], _k_), _j_, _i_, _h_, _g_];
   }
   var sexp_of_t$1 = Base[177], compare$2 = Base[171];
   function to_string$0(t){return t;}
   function of_string$0(s){
    if(runtime.caml_ml_string_length(s) !== 32)
     caml_call1(Base[216], cst_Expect_test_collector_File);
    var i = 0;
    for(;;){
     var match = runtime.caml_string_get(s, i);
     a:
     {
      b:
      {
       if(58 <= match){
        if(5 < match - 97 >>> 0) break b;
       }
       else if(48 > match) break b;
       break a;
      }
      caml_call1(Base[216], cst_Expect_test_collector_File$0);
     }
     var _f_ = i + 1 | 0;
     if(31 === i) return s;
     i = _f_;
    }
   }
   var
    Expect_test_common_File =
      [0,
       Name,
       initial_dir,
       [0,
        t_of_sexp$0,
        sexp_of_t$0,
        beginning_of_file,
        of_source_code_position,
        symbol$5,
        symbol$6,
        symbol$7,
        symbol$8,
        symbol$9,
        symbol$10,
        equal$0,
        compare$1,
        min$0,
        max$0,
        ascending$0,
        descending$0,
        between$0,
        clamp_exn$0,
        clamp$0,
        comparator$0],
       [0, sexp_of_t$1, compare$2, of_string$0, to_string$0]];
   runtime.caml_register_global
    (23, Expect_test_common_File, "Expect_test_common__File");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Expect_test_common__Expectation
//# unitInfo: Requires: Base__Ppx_compare_lib, Expect_test_common__File, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Ppx_compare_lib = global_data.Base__Ppx_compare_lib,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Expect_test_common_File = global_data.Expect_test_common__File,
    _a_ = [0, "Output"],
    _b_ = [0, "Unreachable"],
    _c_ = [0, "Exact"],
    _d_ = [0, "Pretty"];
   function sexp_of_t(of_a_001, param){
    if(typeof param === "number") return 0 === param ? _a_ : _b_;
    if(0 === param[0]){
     var
      arg0_002 = param[1],
      res0_003 = caml_call1(Sexplib0_Sexp_conv[7], arg0_002);
     return [1, [0, _c_, [0, res0_003, 0]]];
    }
    var arg0_004 = param[1], res0_005 = caml_call1(of_a_001, arg0_004);
    return [1, [0, _d_, [0, res0_005, 0]]];
   }
   function compare(cmp_a, a_007, b_008){
    if(a_007 === b_008) return 0;
    a:
    {
     if(typeof a_007 === "number"){
      if(0 === a_007){
       if(typeof b_008 === "number"){if(0 === b_008) return 0;}
       else if(0 === b_008[0]) break a;
       return -1;
      }
      if(typeof b_008 !== "number"){if(1 === b_008[0]) return 1; break a;}
      if(1 === b_008) return 0;
     }
     else{
      if(0 === a_007[0]){
       var a_009 = a_007[1];
       if(typeof b_008 !== "number" && 0 === b_008[0]){
        var b_010 = b_008[1];
        return caml_call2(Base_Ppx_compare_lib[5][8], a_009, b_010);
       }
       return -1;
      }
      var a_011 = a_007[1];
      if(typeof b_008 !== "number"){
       if(0 === b_008[0]) break a;
       var b_012 = b_008[1];
       return caml_call2(cmp_a, a_011, b_012);
      }
      if(0 !== b_008) return -1;
     }
     return 1;
    }
    return 1;
   }
   function equal(cmp_a, a_013, b_014){
    if(a_013 === b_014) return 1;
    a:
    {
     if(typeof a_013 === "number"){
      if(0 === a_013){
       if(typeof b_014 === "number"){if(0 === b_014) return 1;}
       else if(0 === b_014[0]) break a;
       return 0;
      }
      if(typeof b_014 !== "number"){if(1 === b_014[0]) return 0; break a;}
      if(1 === b_014) return 1;
     }
     else{
      if(0 === a_013[0]){
       var a_015 = a_013[1];
       if(typeof b_014 !== "number" && 0 === b_014[0]){
        var b_016 = b_014[1];
        return caml_call2(Base_Ppx_compare_lib[5][21], a_015, b_016);
       }
       return 0;
      }
      var a_017 = a_013[1];
      if(typeof b_014 !== "number"){
       if(0 === b_014[0]) break a;
       var b_018 = b_014[1];
       return caml_call2(cmp_a, a_017, b_018);
      }
      if(0 !== b_014) return 0;
     }
     return 0;
    }
    return 0;
   }
   function map_pretty(t, f){
    if(typeof t !== "number" && 1 === t[0]){
     var x = t[1];
     return [1, caml_call1(f, x)];
    }
    return t;
   }
   var
    Body = [0, sexp_of_t, compare, equal, map_pretty],
    _e_ = [0, "body_location"],
    _f_ = [0, "extid_location"],
    _g_ = [0, "body"],
    _h_ = [0, "tag"];
   function sexp_of_t$0(of_a_019, param){
    var
     body_location_027 = param[4],
     extid_location_025 = param[3],
     body_023 = param[2],
     tag_021 = param[1],
     arg_028 = caml_call1(Expect_test_common_File[3][2], body_location_027),
     bnds_020 = [0, [1, [0, _e_, [0, arg_028, 0]]], 0],
     arg_026 = caml_call1(Expect_test_common_File[3][2], extid_location_025),
     bnds_020$0 = [0, [1, [0, _f_, [0, arg_026, 0]]], bnds_020],
     arg_024 = caml_call2(Body[1], of_a_019, body_023),
     bnds_020$1 = [0, [1, [0, _g_, [0, arg_024, 0]]], bnds_020$0],
     arg_022 =
       caml_call2(Sexplib0_Sexp_conv[17], Sexplib0_Sexp_conv[7], tag_021),
     bnds_020$2 = [0, [1, [0, _h_, [0, arg_022, 0]]], bnds_020$1];
    return [1, bnds_020$2];
   }
   function compare$0(cmp_a, a_029, b_030){
    if(a_029 === b_030) return 0;
    var
     n =
       caml_call3
        (Base_Ppx_compare_lib[5][12],
         Base_Ppx_compare_lib[5][8],
         a_029[1],
         b_030[1]);
    if(0 !== n) return n;
    var n$0 = caml_call3(Body[2], cmp_a, a_029[2], b_030[2]);
    if(0 !== n$0) return n$0;
    var n$1 = caml_call2(Expect_test_common_File[3][12], a_029[3], b_030[3]);
    return 0 === n$1
            ? caml_call2(Expect_test_common_File[3][12], a_029[4], b_030[4])
            : n$1;
   }
   function equal$0(cmp_a, a_035, b_036){
    if(a_035 === b_036) return 1;
    var
     _l_ =
       caml_call3
        (Base_Ppx_compare_lib[5][25],
         Base_Ppx_compare_lib[5][21],
         a_035[1],
         b_036[1]);
    if(_l_){
     var _m_ = caml_call3(Body[3], cmp_a, a_035[2], b_036[2]);
     if(_m_){
      var
       _n_ = caml_call2(Expect_test_common_File[3][11], a_035[3], b_036[3]);
      if(_n_)
       return caml_call2(Expect_test_common_File[3][11], a_035[4], b_036[4]);
      var _o_ = _n_;
     }
     else
      var _o_ = _m_;
    }
    else
     var _o_ = _l_;
    return _o_;
   }
   function sexp_of_t$1(x_041){
    return sexp_of_t$0(Sexplib0_Sexp_conv[7], x_041);
   }
   function compare$1(a_042, b_043){
    return compare$0(Base_Ppx_compare_lib[5][8], a_042, b_043);
   }
   var Raw = [0, sexp_of_t$1, compare$1];
   function map_pretty$0(t, f){
    var _i_ = t[4], _j_ = t[3], _k_ = caml_call2(Body[4], t[2], f);
    return [0, t[1], _k_, _j_, _i_];
   }
   var
    Expect_test_common_Expectation =
      [0, Body, sexp_of_t$0, compare$0, equal$0, Raw, map_pretty$0];
   runtime.caml_register_global
    (11, Expect_test_common_Expectation, "Expect_test_common__Expectation");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Expect_test_common
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Std = [0],
    Expect_test_common = [0, Std];
   runtime.caml_register_global(0, Expect_test_common, "Expect_test_common");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
