// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Ppx_inline_test_lib
//# unitInfo: Requires: Base, Base__Int63, Base__List, Base__Random, Base__String, CamlinternalLazy, Sexplib0__Sexp_conv, Stdlib, Stdlib__Arg, Stdlib__Array, Stdlib__Filename, Stdlib__Hashtbl, Stdlib__List, Stdlib__Printexc, Stdlib__Printf, Stdlib__Random, Stdlib__Result, Stdlib__Scanf, Stdlib__String, Stdlib__Sys, Time_now
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$13 = "",
    cst$14 = "\n",
    cst$15 = " ",
    cst_line = " , line ",
    cst_File = " File ",
    cst_threw = " threw",
    cst_s$0 = "%s",
    cst_s = "%s%!",
    cst$12 = ".\n",
    cst_Ppx_inline_test_lib$0 = "Ppx_inline_test_lib",
    cst_TES = "TES",
    cst_TESTING_FRAMEWORK = "TESTING_FRAMEWORK",
    cst_T_MODULE_at$0 = "T_MODULE at ",
    cst_T_MODULES = "T_MODULES",
    cst_inline_test_runner$0 = "inline-test-runner",
    cst_inline_tests_log$0 = "inline_tests.log",
    cst_ppx_inline_test_error_the_ =
      "ppx_inline_test error: the following -only-test flags matched nothing:",
    caml_equal = runtime.caml_equal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_sys_argv = runtime.caml_sys_argv,
    caml_sys_getenv = runtime.caml_sys_getenv,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$11 = cst$13,
    cst$9 = cst$14,
    cst$10 = cst$15,
    cst$7 = cst$14,
    cst$8 = cst$15,
    cst$5 = cst$14,
    cst$6 = "  ",
    cst$3 = cst$14,
    cst$4 = cst$13,
    cst$2 = ".",
    cst$0 = cst$13,
    cst$1 = ": ",
    initial = [0, 0, [0, "disabled", 0]],
    cst = cst$13,
    am_running_env_var = cst_TESTING_FRAMEWORK,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Stdlib_String = global_data.Stdlib__String,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Result = global_data.Stdlib__Result,
    Base = global_data.Base,
    Base_String = global_data.Base__String,
    Base_List = global_data.Base__List,
    Stdlib_Random = global_data.Stdlib__Random,
    Base_Random = global_data.Base__Random,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Base_Int63 = global_data.Base__Int63,
    Time_now = global_data.Time_now,
    Stdlib_Scanf = global_data.Stdlib__Scanf,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_Arg = global_data.Stdlib__Arg,
    Stdlib_Array = global_data.Stdlib__Array,
    cst_success = "success",
    cst_failure = "failure",
    cst_error = "error";
   function to_string(param){
    switch(param){
      case 0:
       return cst_success;
      case 1:
       return cst_failure;
      default: return cst_error;
    }
   }
   function combine(t1, t2){
    a:
    {
     switch(t1){
       case 0:
        if(! t2) return 0; break;
       case 1: break;
       default: break a;
     }
     if(2 !== t2) return 1;
    }
    return 2;
   }
   function combine_all(ts){
    return caml_call3(Stdlib_List[26], combine, 0, ts);
   }
   var
    test_modules_ran = [0, 0],
    test_modules_failed = [0, 0],
    tests_ran = [0, 0],
    tests_failed = [0, 0],
    dynamic_lib = [0, 0],
    action = [0, -950194894],
    dummy = 0,
    _E_ = [0, [12, 32, [2, 0, [12, 58, [4, 0, 0, 0, 0]]]], " %s:%d"],
    _F_ = [0, [12, 32, [2, 0, 0]], " %s"],
    _z_ =
      [0,
       [11,
        "inline_tests_runner.exe is not supposed to be run by hand, you \nshould run the inline_tests_runner script instead.\n",
        [10, 0]],
       "inline_tests_runner.exe is not supposed to be run by hand, you \nshould run the inline_tests_runner script instead.\n%!"],
    _A_ =
      [0,
       [11,
        "You are doing something unexpected with the tests. No tests have \nbeen run. You should use the inline_tests_runner script to run \ntests.\n",
        [10, 0]],
       "You are doing something unexpected with the tests. No tests have \nbeen run. You should use the inline_tests_runner script to run \ntests.\n%!"],
    _B_ = [0, [2, 0, [12, 10, 0]], "%s\n"],
    _C_ =
      [0,
       [4,
        0,
        0,
        0,
        [11,
         " tests ran, ",
         [4, 0, 0, 0, [11, " test_modules ran\n", [10, 0]]]]],
       "%d tests ran, %d test_modules ran\n%!"],
    _D_ =
      [0,
       [11, cst_ppx_inline_test_error_the_, 0],
       cst_ppx_inline_test_error_the_],
    _G_ = [0, [11, cst$12, [10, 0]], ".\n%!"],
    _H_ =
      [0,
       [11, "ppx_inline_test error: no tests have been run.\n", [10, 0]],
       "ppx_inline_test error: no tests have been run.\n%!"],
    _J_ = [0, [11, cst_T_MODULES, 0], cst_T_MODULES],
    _K_ = [0, [11, ", ", [4, 0, 0, 0, [11, " TES", 0]]], ", %d TES"],
    _I_ =
      [0,
       [11,
        "FAILED ",
        [4,
         0,
         0,
         0,
         [11, " / ", [4, 0, 0, 0, [11, " tests", [2, 0, [12, 10, [10, 0]]]]]]]],
       "FAILED %d / %d tests%s\n%!"],
    _x_ =
      [0,
       [11,
        cst_T_MODULE_at$0,
        [2,
         0,
         [11,
          cst_threw,
          [2, 0, [2, 0, [11, cst$12, [2, 0, [2, 0, [12, 10, [10, 0]]]]]]]]]],
       "T_MODULE at %s threw%s%s.\n%s%s\n%!"],
    _y_ = [0, [11, cst_TES, 0], cst_TES],
    cst_ppx_inline_test_cannot_use =
      "ppx_inline_test: cannot use -list-partition or -partition without specifying a partition at preprocessing time",
    _r_ = [0, [2, 0, [12, 10, [2, 0, 0]]], "%s\n%s"],
    _s_ = [0, [2, 0, [10, 0]], cst_s],
    _t_ = [0, 1],
    _u_ =
      [0,
       [11, " (", [8, [0, 0, 0], 0, [0, 3], [11, " sec)\n", [10, 0]]]],
       " (%.3f sec)\n%!"],
    _v_ =
      [0,
       [2, 0, [11, " is false.\n", [2, 0, [12, 10, [10, 0]]]]],
       "%s is false.\n%s\n%!"],
    _w_ =
      [0,
       [2,
        0,
        [11,
         cst_threw,
         [2, 0, [2, 0, [11, cst$12, [2, 0, [2, 0, [12, 10, [10, 0]]]]]]]]],
       "%s threw%s%s.\n%s%s\n%!"],
    _q_ = [0, [2, 0, [10, 0]], cst_s],
    _p_ = [0, [2, 0, [10, 0]], cst_s],
    _o_ = [0, [12, 10, [2, 0, [12, 10, [10, 0]]]], "\n%s\n%!"],
    cst_T_MODULE_at = cst_T_MODULE_at$0,
    cst_in_TES = "  in TES",
    cst_time_without_resetting_ran = "time_without_resetting_random_seeds",
    cst_Ppx_inline_test_lib = cst_Ppx_inline_test_lib$0,
    cst_inline_tests_log = cst_inline_tests_log$0,
    _P_ =
      [0,
       [11,
        "Argument ",
        [2,
         0,
         [11, " doesn't fit the format filename[:line_number]\n", [10, 0]]]],
       "Argument %s doesn't fit the format filename[:line_number]\n%!"],
    _O_ =
      [0,
       [2,
        0,
        [11, ": unexpected anonymous argument ", [2, 0, [12, 10, [10, 0]]]]],
       "%s: unexpected anonymous argument %s\n%!"],
    _h_ =
      [0,
       [11,
        cst_File,
        [3,
         0,
         [11,
          cst_line,
          [4,
           0,
           0,
           0,
           [11,
            " , characters ",
            [4, 0, 0, 0, [11, " - ", [4, 0, 0, 0, [12, 32, [10, 0]]]]]]]]]],
       " File %S , line %d , characters %d - %d %!"],
    _g_ =
      [0,
       [11, cst_File, [3, 0, [11, cst_line, [4, 0, 0, 0, [12, 32, [10, 0]]]]]],
       " File %S , line %d %!"],
    _f_ = [0, [11, cst_File, [3, 0, [12, 32, [10, 0]]]], " File %S %!"],
    _e_ =
      [0,
       [11,
        "File ",
        [3,
         0,
         [11,
          ", line ",
          [4,
           0,
           0,
           0,
           [11,
            ", characters ",
            [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [2, 0, 0]]]]]]]]],
       "File %S, line %d, characters %d-%d%s"],
    _a_ = [0, [2, 0, 0], cst_s$0],
    _b_ = [0, [2, 0, 0], cst_s$0],
    cst_inline_test_runner = cst_inline_test_runner$0,
    _N_ =
      [0,
       [2, 0, [12, 32, [2, 0, [12, 32, [2, 0, [11, " [args]", 0]]]]]],
       "%s %s %s [args]"],
    cst_Prefix_to_prepend_to_filep =
      " Prefix to prepend to filepaths in test output",
    cst_diff_path_prefix = "-diff-path-prefix",
    cst_Path_to_the_root_of_the_so = " Path to the root of the source tree",
    cst_source_tree_root = "-source-tree-root",
    cst_Diff_command_for_tests_tha =
      " Diff command for tests that require diffing (use - to disable diffing)",
    cst_diff_cmd = "-diff-cmd",
    cst_Update_expect_tests_in_pla = " Update expect tests in place",
    cst_in_place = "-in-place",
    cst_Summarize_tests_without_us = " Summarize tests without using color",
    cst_no_color = "-no-color",
    cst_location_Run_only_the_test =
      'location Run only the tests specified by all the -only-test options.\n                      Locations can be one of these forms:\n                      - file.ml\n                      - file.ml:line_number\n                      - File "file.ml"\n                      - File "file.ml", line 23\n                      - File "file.ml", line 23, characters 2-3',
    cst_only_test = "-only-test",
    cst_substring_Only_run_tests_w =
      "substring Only run tests whose names contain the given substring",
    cst_matching = "-matching",
    cst_tag_Only_run_tests_tagged_ =
      "tag Only run tests tagged with [tag] (overrides previous -drop-tag)",
    cst_require_tag = "-require-tag",
    cst_tag_Only_run_tests_not_tag =
      "tag Only run tests not tagged with [tag] (overrides previous -require-tag)",
    cst_drop_tag = "-drop-tag",
    cst_Log_the_tests_run_in_inlin = " Log the tests run in inline_tests.log",
    cst_log = "-log",
    cst_Show_the_number_of_tests_r = " Show the number of tests ran",
    cst_show_counts = "-show-counts",
    cst_End_with_an_error_if_no_te = " End with an error if no tests were run",
    cst_strict = "-strict",
    cst_Run_tests_only_up_to_the_f =
      " Run tests only up to the first error (doesn't work for expect tests)",
    cst_stop_on_error = "-stop-on-error",
    cst_Show_the_tests_as_they_run = " Show the tests as they run",
    cst_verbose = "-verbose",
    cst_Only_run_the_tests_in_the_ =
      " Only run the tests in the given partition",
    cst_partition = "-partition",
    cst_Lists_all_the_partitions_t =
      " Lists all the partitions that contain at least one test or test_module",
    cst_list_partitions = "-list-partitions",
    cst_Do_not_run_tests_but_show_ =
      " Do not run tests but show what would have been run",
    cst_list_test_names = "-list-test-names",
    _n_ = [0, 187165616, 545942154],
    _L_ = [0, 187165616, -863538453];
   try{
    caml_sys_getenv("FORCE_DROP_INLINE_TEST");
    var _R_ = 1, force_drop = _R_;
   }
   catch(_bn_){
    var _c_ = caml_wrap_exception(_bn_);
    if(_c_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_c_, 0);
    var force_drop = 0;
   }
   function get(param){return force_drop ? -950194894 : action[1];}
   var _d_ = caml_call2(Stdlib_Hashtbl[1], 0, 23), current = [0, cst];
   function found_test(param){
    var
     _bl_ = current[1] !== cst$13 ? 1 : 0,
     _bm_ = _bl_ ? 1 - caml_call2(Stdlib_Hashtbl[9], _d_, current[1]) : _bl_;
    return _bm_ ? caml_call3(Stdlib_Hashtbl[5], _d_, current[1], 0) : _bm_;
   }
   function is_current(param){
    if(! param) return 1;
    var p = param[1];
    return p === current[1] ? 1 : 0;
   }
   var current$0 = [0, 0];
   function current_tags(param){
    var
     t = current$0[1],
     _bk_ = caml_call2(Stdlib_List[20], function(m){return m[2];}, t);
    return caml_call1(Stdlib_List[14], _bk_);
   }
   var
    verbose = [0, 0],
    strict = [0, 0],
    show_counts = [0, 0],
    list_test_names = [0, 0],
    delayed_errors = [0, 0],
    stop_on_error = [0, 0],
    log = [0, 0],
    time_sec = [0, 0.],
    use_color = [0, 1],
    in_place = [0, 0],
    diff_command = [0, 0],
    source_tree_root = [0, 0],
    diff_path_prefix = [0, 0];
   function displayed_descr(descr, filename, line, start_pos, end_pos){
    var _bi_ = caml_obj_tag(descr);
    a:
    if(250 === _bi_)
     var descr$0 = descr[1];
    else{
     if(246 !== _bi_ && 244 !== _bi_){var descr$0 = descr; break a;}
     var descr$0 = caml_call1(CamlinternalLazy[2], descr);
    }
    var
     _bj_ =
       descr$0 === cst$13 ? cst$0 : caml_call2(Stdlib[28], cst$1, descr$0);
    return caml_call6
            (Stdlib_Printf[4], _e_, filename, line, start_pos, end_pos, _bj_);
   }
   if(Base[86][1]){
    var _i_ = caml_sys_argv(0), match = caml_call1(Stdlib_Array[10], _i_);
    a:
    if(match){
     var _j_ = match[2];
     if(_j_){
      var name = match[1];
      if(_j_[1] === cst_inline_test_runner$0){
       var match$0 = _j_[2];
       if(match$0){
        var
         rest = match$0[2],
         lib = match$0[1],
         tests = [0, 0],
         list_partitions = [0, 0],
         partition = [0, 0],
         tag_predicate = [0, initial],
         name_filter = [0, 0],
         msg$1 =
           caml_call4
            (Stdlib_Printf[4], _N_, name, cst_inline_test_runner, lib),
         f =
           function(anon){
            caml_call3(Stdlib_Printf[3], _O_, name, anon);
            return caml_call1(Stdlib[99], 1);
           },
         l =
           caml_call2
            (Stdlib_Arg[11],
             0,
             [0,
              [0,
               cst_list_test_names,
               [0,
                function(param){
                 list_test_names[1] = 1;
                 verbose[1] = 1;
                 return 0;
                }],
               cst_Do_not_run_tests_but_show_],
              [0,
               [0,
                cst_list_partitions,
                [0, function(param){list_partitions[1] = 1; return 0;}],
                cst_Lists_all_the_partitions_t],
               [0,
                [0,
                 cst_partition,
                 [4, function(i){partition[1] = [0, i]; return 0;}],
                 cst_Only_run_the_tests_in_the_],
                [0,
                 [0,
                  cst_verbose,
                  [2, verbose],
                  cst_Show_the_tests_as_they_run],
                 [0,
                  [0,
                   cst_stop_on_error,
                   [2, stop_on_error],
                   cst_Run_tests_only_up_to_the_f],
                  [0,
                   [0, cst_strict, [2, strict], cst_End_with_an_error_if_no_te],
                   [0,
                    [0,
                     cst_show_counts,
                     [2, show_counts],
                     cst_Show_the_number_of_tests_r],
                    [0,
                     [0,
                      cst_log,
                      [0,
                       function(param){
                        try{runtime.caml_sys_remove(cst_inline_tests_log$0);}
                        catch(_bh_){}
                        log[1] = [0, caml_call1(Stdlib[60], cst_inline_tests_log)];
                        return 0;
                       }],
                      cst_Log_the_tests_run_in_inlin],
                     [0,
                      [0,
                       cst_drop_tag,
                       [4,
                        function(tag){
                         var t = tag_predicate[1], _bf_ = [0, tag, t[2]];
                         tag_predicate[1] =
                          [0,
                           caml_call2
                            (Stdlib_List[44],
                             function(_bg_){return tag !== _bg_ ? 1 : 0;},
                             t[1]),
                           _bf_];
                         return 0;
                        }],
                       cst_tag_Only_run_tests_not_tag],
                      [0,
                       [0,
                        cst_require_tag,
                        [4,
                         function(tag){
                          var
                           t = tag_predicate[1],
                           _bd_ =
                             caml_call2
                              (Stdlib_List[44],
                               function(_be_){return tag !== _be_ ? 1 : 0;},
                               t[2]);
                          tag_predicate[1] = [0, [0, tag, t[1]], _bd_];
                          return 0;
                         }],
                        cst_tag_Only_run_tests_tagged_],
                       [0,
                        [0,
                         cst_matching,
                         [4,
                          function(s){
                           name_filter[1] = [0, s, name_filter[1]];
                           return 0;
                          }],
                         cst_substring_Only_run_tests_w],
                        [0,
                         [0,
                          cst_only_test,
                          [4,
                           function(str){
                            try{
                             var
                              _a8_ =
                                [0,
                                 caml_call3
                                  (Stdlib_Scanf[5],
                                   str,
                                   _h_,
                                   function(file, line, start_pos, end_pos){return [0, file, [0, line]];
                                   })],
                              match = _a8_;
                            }
                            catch(_ba_){
                             try{
                              var
                               _a7_ =
                                 [0,
                                  caml_call3
                                   (Stdlib_Scanf[5],
                                    str,
                                    _g_,
                                    function(file, line){return [0, file, [0, line]];})],
                               match = _a7_;
                             }
                             catch(_bb_){
                              try{
                               var
                                _a6_ =
                                  [0,
                                   caml_call3
                                    (Stdlib_Scanf[5],
                                     str,
                                     _f_,
                                     function(file){return [0, file, 0];})],
                                match = _a6_;
                              }
                              catch(_bc_){var match = 0;}
                             }
                            }
                            if(match)
                             var
                              match$0 = match[1],
                              index = match$0[2],
                              file = match$0[1],
                              index$0 = index,
                              filename = file;
                            else if(caml_call2(Stdlib_String[15], str, 58)){
                             var
                              i = caml_call2(Stdlib_String[36], str, 58),
                              filename$0 = caml_call3(Stdlib_String[16], str, 0, i),
                              index_string =
                                caml_call3
                                 (Stdlib_String[16],
                                  str,
                                  i + 1 | 0,
                                  (caml_ml_string_length(str) - i | 0) - 1 | 0);
                             try{
                              var
                               _a__ = runtime.caml_int_of_string(index_string),
                               index$1 = _a__;
                             }
                             catch(_a$_){
                              var _a9_ = caml_wrap_exception(_a$_);
                              if(_a9_[1] !== Stdlib[7])
                               throw caml_maybe_attach_backtrace(_a9_, 0);
                              caml_call2(Stdlib_Printf[3], _P_, str);
                              var index$1 = caml_call1(Stdlib[99], 1);
                             }
                             var index$0 = [0, index$1], filename = filename$0;
                            }
                            else
                             var index$0 = 0, filename = str;
                            tests[1] = [0, [0, filename, index$0, [0, 0]], tests[1]];
                            return 0;
                           }],
                          cst_location_Run_only_the_test],
                         [0,
                          [0,
                           cst_no_color,
                           [3, use_color],
                           cst_Summarize_tests_without_us],
                          [0,
                           [0,
                            cst_in_place,
                            [2, in_place],
                            cst_Update_expect_tests_in_pla],
                           [0,
                            [0,
                             cst_diff_cmd,
                             [4, function(s){diff_command[1] = [0, s]; return 0;}],
                             cst_Diff_command_for_tests_tha],
                            [0,
                             [0,
                              cst_source_tree_root,
                              [4, function(s){source_tree_root[1] = [0, s]; return 0;}],
                              cst_Path_to_the_root_of_the_so],
                             [0,
                              [0,
                               cst_diff_path_prefix,
                               [4, function(s){diff_path_prefix[1] = [0, s]; return 0;}],
                               cst_Prefix_to_prepend_to_filep],
                              0]]]]]]]]]]]]]]]]]),
         argv = caml_call1(Stdlib_Array[11], [0, name, rest]);
        try{caml_call5(Stdlib_Arg[3], 0, argv, l, f, msg$1);}
        catch(exn$0){
         var exn = caml_wrap_exception(exn$0);
         if(exn[1] === Stdlib_Arg[8]){
          var msg = exn[2];
          caml_call2(Stdlib_Printf[3], _a_, msg);
          caml_call1(Stdlib[99], 1);
         }
         else{
          if(exn[1] !== Stdlib_Arg[7])
           throw caml_maybe_attach_backtrace(exn, 0);
          var msg$0 = exn[2];
          caml_call2(Stdlib_Printf[2], _b_, msg$0);
          caml_call1(Stdlib[99], 0);
         }
        }
        var
         _Q_ = list_partitions[1] ? -260537174 : [0, 1025081494, partition[1]],
         v =
           [0,
            -753295984,
            [0, [0, lib, tests[1], name_filter[1], tag_predicate[1]], _Q_]];
        action[1] = v;
        break a;
       }
      }
     }
    }
   }
   var am_test_runner = typeof get(0) === "number" ? 0 : 1;
   a:
   {
    try{caml_sys_getenv("PPX_INLINE_TEST_LIB_AM_RUNNING_INLINE_TEST");}
    catch(_a4_){
     var _k_ = caml_wrap_exception(_a4_);
     if(_k_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_k_, 0);
     b:
     {
      try{var val = caml_sys_getenv(cst_TESTING_FRAMEWORK);}
      catch(_a5_){
       var _l_ = caml_wrap_exception(_a5_);
       if(_l_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_l_, 0);
       var _m_ = 0;
       break b;
      }
      var _M_ = val !== "inline-test" ? 0 : 1, _m_ = _M_;
     }
     var am_running = _m_;
     break a;
    }
    var am_running = 1;
   }
   var testing = am_test_runner ? _n_ : am_running ? _L_ : 822171972;
   function wall_time_clock_ns(param){return caml_call1(Time_now[1], 0);}
   var
    where_to_cut_backtrace =
      [246,
       function(param){
        var
         _a2_ = caml_call2(Stdlib[28], cst$2, cst_time_without_resetting_ran),
         _a3_ = caml_call2(Stdlib[28], cst_Ppx_inline_test_lib, _a2_);
        return caml_call2(Base_String[83][2], 0, _a3_);
       }];
   function time_without_resetting_random_(f){
    var before_ns = wall_time_clock_ns(0);
    try{var _a1_ = [0, caml_call1(f, 0)], res = _a1_;}
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      res = [1, [0, exn, caml_call1(Stdlib_Printexc[6], 0)]];
    }
    var
     _aZ_ = wall_time_clock_ns(0),
     _a0_ = caml_call2(Base_Int63[43], _aZ_, before_ns);
    time_sec[1] = caml_call1(Base_Int63[3], _a0_) / 1000000000.;
    return res;
   }
   var
    saved_caml_random_state =
      [246,
       function(_aY_){
        return caml_call1(Stdlib_Random[19][1], [0, 100, 200, 300]);
       }],
    saved_base_random_state =
      [246,
       function(_aX_){
        return caml_call1(Base_Random[18][2], [0, 111, 222, 333]);
       }];
   function string_of_module_descr(param){
    var
     t = current$0[1],
     _aS_ = caml_call2(Stdlib_List[20], function(m){return m[1];}, t),
     _aT_ =
       caml_call2
        (Stdlib_List[20],
         function(s){
          var
           _aU_ = caml_call1(Stdlib_String[29], s),
           _aV_ = caml_call2(Stdlib[28], _aU_, cst$3),
           _aW_ = caml_call2(Stdlib[28], cst_T_MODULE_at, _aV_);
          return caml_call2(Stdlib[28], cst_in_TES, _aW_);
         },
         _aS_);
    return caml_call2(Stdlib_String[7], cst$4, _aT_);
   }
   function print_delayed_errors(param){
    var delayed_errors$0 = caml_call1(Stdlib_List[10], delayed_errors[1]);
    if(! delayed_errors$0) return;
    var _aR_ = caml_call2(Stdlib_String[1], 70, 61);
    caml_call2(Stdlib_Printf[3], _o_, _aR_);
    return caml_call2
            (Stdlib_List[18],
             function(message){
              return caml_call2(Stdlib_Printf[3], _p_, message);
             },
             delayed_errors$0);
   }
   function eprintf_or_delay(fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(s){
              if(verbose[1])
               delayed_errors[1] = [0, s, delayed_errors[1]];
              else
               caml_call2(Stdlib_Printf[3], _q_, s);
              var _aQ_ = stop_on_error[1];
              return _aQ_
                      ? (print_delayed_errors(0), caml_call1(Stdlib[99], 2))
                      : _aQ_;
             },
             fmt);
   }
   function add_hooks(C, f, param){
    caml_call1(C[1], 0);
    return caml_call1(f, 0);
   }
   function hum_backtrace(backtrace){
    var
     _aK_ = caml_call1(Base_String[101], backtrace),
     _aL_ =
       caml_call2
        (Base_List[138],
         _aK_,
         function(str){
          var _aO_ = caml_obj_tag(where_to_cut_backtrace);
          a:
          if(250 === _aO_)
           var _aP_ = where_to_cut_backtrace[1];
          else{
           if(246 !== _aO_ && 244 !== _aO_){
            var _aP_ = where_to_cut_backtrace;
            break a;
           }
           var _aP_ = caml_call1(CamlinternalLazy[2], where_to_cut_backtrace);
          }
          return 1 - caml_call2(Base_String[83][5], _aP_, str);
         }),
     _aM_ =
       caml_call2
        (Base_List[52],
         _aL_,
         function(str){
          var _aN_ = caml_call2(Base[212], str, cst$5);
          return caml_call2(Base[212], cst$6, _aN_);
         });
    return caml_call2(Base_String[67], 0, _aM_);
   }
   function test_inner
   (config,
    descr,
    tags,
    def_filename,
    def_line_number,
    start_pos,
    end_pos,
    f,
    bool_of_f){
    var match = get(0);
    if(typeof match === "number") return 0;
    var
     _ap_ = match[2],
     what_to_do = _ap_[2],
     match$0 = _ap_[1],
     which_tags = match$0[4],
     name_filter = match$0[3],
     only_test_location = match$0[2],
     libname = match$0[1];
    function f$0(_aJ_){return add_hooks(config, f, _aJ_);}
    var
     descr$0 =
       [246,
        function(_aI_){
         return displayed_descr
                 (descr, def_filename, def_line_number, start_pos, end_pos);
        }],
     _aq_ = current_tags(0),
     complete_tags = caml_call2(Stdlib[37], tags, _aq_),
     _ar_ = caml_equal([0, libname], dynamic_lib[1]);
    if(_ar_){
     var
      _as_ =
        only_test_location
         ? caml_call2
           (Stdlib_List[34],
            function(param){
             var
              used = param[3],
              line_number_opt = param[2],
              filename = param[1],
              position_start =
                caml_ml_string_length(def_filename)
                - caml_ml_string_length(filename)
                | 0,
              _aD_ = 0 <= position_start ? 1 : 0;
             if(_aD_){
              var
               end_of_def_filename =
                 caml_call3
                  (Stdlib_String[16],
                   def_filename,
                   position_start,
                   caml_ml_string_length(filename)),
               _aE_ = end_of_def_filename === filename ? 1 : 0;
              if(_aE_){
               var
                _aF_ = 0 === position_start ? 1 : 0,
                _aG_ =
                  _aF_
                  ||
                   (47
                     ===
                      runtime.caml_string_get
                       (def_filename, position_start - 1 | 0)
                     ? 1
                     : 0);
               if(_aG_)
                if(line_number_opt)
                 var
                  line_number = line_number_opt[1],
                  _aH_ = caml_equal(def_line_number, line_number);
                else
                 var _aH_ = 1;
               else
                var _aH_ = _aG_;
              }
              else
               var _aH_ = _aE_;
              var found = _aH_;
             }
             else
              var found = _aD_;
             if(found) used[1] = 1;
             return found;
            },
            only_test_location)
         : 1;
     if(_as_){
      var
       _ak_ =
         caml_call2
          (Stdlib_List[34],
           function(req){
            return 1 - caml_call2(Stdlib_List[37], req, complete_tags);
           },
           which_tags[1]),
       _at_ =
         _ak_
         ||
          caml_call2
           (Stdlib_List[34],
            function(dropped){
             return caml_call2(Stdlib_List[37], dropped, complete_tags);
            },
            which_tags[2]),
       _au_ = 1 - _at_;
      if(_au_){
       var _av_ = caml_obj_tag(descr$0);
       a:
       if(250 === _av_)
        var descr$1 = descr$0[1];
       else{
        if(246 !== _av_ && 244 !== _av_){var descr$1 = descr$0; break a;}
        var descr$1 = caml_call1(CamlinternalLazy[2], descr$0);
       }
       var
        _aw_ =
          name_filter
           ? caml_call2
             (Stdlib_List[34],
              function(substring){
               return caml_call2(Base_String[89], descr$1, substring);
              },
              name_filter)
           : 1,
        should_run = _aw_;
      }
      else
       var should_run = _au_;
     }
     else
      var should_run = _as_;
    }
    else
     var should_run = _ar_;
    if(should_run){
     if(typeof what_to_do === "number") return found_test(0);
     var partition = what_to_do[2], _ax_ = is_current(partition);
     if(_ax_){
      var _ay_ = caml_obj_tag(descr$0);
      a:
      if(250 === _ay_)
       var descr$2 = descr$0[1];
      else{
       if(246 !== _ay_ && 244 !== _ay_){var descr$2 = descr$0; break a;}
       var descr$2 = caml_call1(CamlinternalLazy[2], descr$0);
      }
      tests_ran[1]++;
      var match$1 = log[1];
      if(match$1){
       var ch = match$1[1], _az_ = string_of_module_descr(0);
       caml_call4(Stdlib_Printf[1], ch, _r_, descr$2, _az_);
      }
      if(verbose[1]) caml_call2(Stdlib_Printf[2], _s_, descr$2);
      if(list_test_names[1])
       var result$0 = _t_;
      else{
       var
        caml_random_state = caml_call1(Stdlib_Random[20], 0),
        base_random_state = caml_call1(Base_Random[18][4], Base_Random[18][1]),
        _al_ = caml_obj_tag(saved_caml_random_state);
       a:
       if(250 === _al_)
        var _am_ = saved_caml_random_state[1];
       else{
        if(246 !== _al_ && 244 !== _al_){
         var _am_ = saved_caml_random_state;
         break a;
        }
        var _am_ = caml_call1(CamlinternalLazy[2], saved_caml_random_state);
       }
       caml_call1(Stdlib_Random[21], _am_);
       var _an_ = caml_obj_tag(saved_base_random_state);
       a:
       if(250 === _an_)
        var _ao_ = saved_base_random_state[1];
       else{
        if(246 !== _an_ && 244 !== _an_){
         var _ao_ = saved_base_random_state;
         break a;
        }
        var _ao_ = caml_call1(CamlinternalLazy[2], saved_base_random_state);
       }
       caml_call1(Base_Random[19], _ao_);
       var result = time_without_resetting_random_(f$0);
       caml_call1(Stdlib_Random[21], caml_random_state);
       caml_call1(Base_Random[19], base_random_state);
       var result$0 = caml_call2(Stdlib_Result[8], bool_of_f, result);
      }
      if(verbose[1]) caml_call2(Stdlib_Printf[2], _u_, time_sec[1]);
      if(0 !== result$0[0]){
       var match$2 = result$0[1], backtrace = match$2[2], exn = match$2[1];
       tests_failed[1]++;
       var
        backtrace$0 = hum_backtrace(backtrace),
        exn_str = caml_call1(Sexplib0_Sexp_conv[70], exn),
        sep = caml_call2(Stdlib_String[15], exn_str, 10) ? cst$7 : cst$8,
        _aB_ = string_of_module_descr(0);
       return caml_call5
               (eprintf_or_delay(_w_),
                descr$2,
                sep,
                exn_str,
                backtrace$0,
                _aB_);
      }
      if(result$0[1]) return 0;
      tests_failed[1]++;
      var _aA_ = string_of_module_descr(0);
      return caml_call2(eprintf_or_delay(_v_), descr$2, _aA_);
     }
     var _aC_ = _ax_;
    }
    else
     var _aC_ = should_run;
    return _aC_;
   }
   function set_lib_and_partition(static_lib, partition){
    if(dynamic_lib[1]) return 0;
    dynamic_lib[1] = [0, static_lib];
    var match = get(0);
    if(typeof match === "number") return 0;
    var
     match$0 = match[2],
     what_to_do = match$0[2],
     which_tests = match$0[1],
     _aj_ = which_tests[1] === static_lib ? 1 : 0;
    if(! _aj_) return _aj_;
    a:
    {
     if(typeof what_to_do !== "number" && ! what_to_do[2]){var requires_partition = 0; break a;}
     var requires_partition = 1;
    }
    if(partition === cst$13 && requires_partition)
     return caml_call1(Stdlib[2], cst_ppx_inline_test_cannot_use);
    current[1] = partition;
    return 0;
   }
   function unset_lib(static_lib){
    var match = dynamic_lib[1];
    if(! match) return 0;
    var
     lib = match[1],
     _ah_ = lib === static_lib ? 1 : 0,
     _ai_ = _ah_ ? (dynamic_lib[1] = 0, 0) : _ah_;
    return _ai_;
   }
   function test
   (config, descr, tags, filename, line_number, start_pos, end_pos, f){
    return test_inner
            (config,
             descr,
             tags,
             filename,
             line_number,
             start_pos,
             end_pos,
             f,
             function(b){return b;});
   }
   function test_unit
   (config, descr, tags, filename, line_number, start_pos, end_pos, f){
    return test_inner
            (config,
             descr,
             tags,
             filename,
             line_number,
             start_pos,
             end_pos,
             f,
             function(param){return 1;});
   }
   function test_module
   (config, descr, tags, def_filename, def_line_number, start_pos, end_pos, f){
    var match = get(0);
    if(typeof match === "number") return 0;
    var
     _$_ = match[2],
     what_to_do = _$_[2],
     match$0 = _$_[1],
     which_tags = match$0[4],
     libname = match$0[1];
    function f$0(_ag_){return add_hooks(config, f, _ag_);}
    var
     _aa_ = current_tags(0),
     partial_tags = caml_call2(Stdlib[37], tags, _aa_),
     _ab_ = caml_equal([0, libname], dynamic_lib[1]),
     should_run =
       _ab_
        ? 1
         -
          caml_call2
           (Stdlib_List[34],
            function(dropped){
             return caml_call2(Stdlib_List[37], dropped, partial_tags);
            },
            which_tags[2])
        : _ab_;
    if(should_run){
     if(typeof what_to_do === "number") return found_test(0);
     var partition = what_to_do[2], _ac_ = is_current(partition);
     if(_ac_){
      test_modules_ran[1]++;
      var
       descr$0 =
         displayed_descr
          (descr, def_filename, def_line_number, start_pos, end_pos),
       prev = current$0[1];
      current$0[1] = [0, [0, descr$0, tags], prev];
      try{var x = time_without_resetting_random_(f$0); current$0[1] = prev;}
      catch(e$0){
       var e = caml_wrap_exception(e$0);
       current$0[1] = prev;
       throw caml_maybe_attach_backtrace(e, 0);
      }
      if(0 === x[0]) return 0;
      var match$1 = x[1], backtrace = match$1[2], exn = match$1[1];
      test_modules_failed[1]++;
      var
       backtrace$0 = hum_backtrace(backtrace),
       exn_str = caml_call1(Sexplib0_Sexp_conv[70], exn),
       sep = caml_call2(Stdlib_String[15], exn_str, 10) ? cst$9 : cst$10,
       _ad_ = string_of_module_descr(0),
       _ae_ = caml_call1(Stdlib_String[29], descr$0);
      return caml_call5
              (eprintf_or_delay(caml_call2(Stdlib[98], _y_, _x_)),
               _ae_,
               sep,
               exn_str,
               backtrace$0,
               _ad_);
     }
     var _af_ = _ac_;
    }
    else
     var _af_ = should_run;
    return _af_;
   }
   function summarize(param){
    var match = get(0);
    if(typeof match !== "number"){
     var _X_ = match[2], which_tests = _X_[1];
     if(typeof _X_[2] === "number"){
      var
       _U_ =
         caml_call3
          (Stdlib_Hashtbl[14],
           function(k, param, acc){return [0, k, acc];},
           _d_,
           0),
       _V_ = caml_call2(Stdlib_List[59], Stdlib_String[10], _U_),
       _Y_ = caml_call1(Stdlib_Printf[2], _B_);
      caml_call2(Stdlib_List[18], _Y_, _V_);
      return 0;
     }
     var match$0 = log[1];
     if(match$0){var ch = match$0[1]; caml_call1(Stdlib[76], ch);}
     print_delayed_errors(0);
     var count = tests_failed[1], count_test_modules = test_modules_failed[1];
     if(0 === count && 0 === count_test_modules){
      if(show_counts[1])
       caml_call3(Stdlib_Printf[3], _C_, tests_ran[1], test_modules_ran[1]);
      var
       unused_tests =
         caml_call2
          (Stdlib_List[44],
           function(param){var used = param[3]; return 1 - used[1];},
           which_tests[2]),
       errors = unused_tests ? [0, unused_tests] : 0;
      if(errors){
       var tests = errors[1];
       caml_call1(Stdlib_Printf[3], _D_);
       caml_call2
        (Stdlib_List[18],
         function(param){
          var line_number_opt = param[2], filename = param[1];
          if(! line_number_opt)
           return caml_call2(Stdlib_Printf[3], _F_, filename);
          var line_number = line_number_opt[1];
          return caml_call3(Stdlib_Printf[3], _E_, filename, line_number);
         },
         tests);
       caml_call1(Stdlib_Printf[3], _G_);
       return 2;
      }
      if(0 === tests_ran[1] && strict[1]){
       caml_call1(Stdlib_Printf[3], _H_);
       return 2;
      }
      return 0;
     }
     if(0 === count_test_modules)
      var _Z_ = cst$11;
     else
      var
       ___ = caml_call2(Stdlib[98], _K_, _J_),
       _Z_ = caml_call2(Stdlib_Printf[4], ___, count_test_modules);
     caml_call4(Stdlib_Printf[3], _I_, count, tests_ran[1], _Z_);
     return 1;
    }
    a:
    {
     if(runtime.caml_notequal(caml_sys_argv(0), [0])){
      var _W_ = runtime.caml_check_bound(caml_sys_argv(0), 0)[1];
      if(caml_call1(Stdlib_Filename[13], _W_) === "inline_tests_runner.exe"){caml_call1(Stdlib_Printf[3], _z_); break a;}
     }
     caml_call1(Stdlib_Printf[3], _A_);
    }
    return 2;
   }
   var
    use_color$0 = use_color[1],
    in_place$0 = in_place[1],
    diff_command$0 = diff_command[1],
    diff_path_prefix$0 = diff_path_prefix[1],
    source_tree_root$0 = source_tree_root[1],
    evaluators = [0, [0, summarize, 0]];
   function add_evaluator(f){evaluators[1] = [0, f, evaluators[1]]; return 0;}
   function exit(param){
    var _S_ = caml_call1(Stdlib_List[10], evaluators[1]);
    switch
     (combine_all
       (caml_call2
         (Stdlib_List[20], function(f){return caml_call1(f, 0);}, _S_))){
      case 0:
       var _T_ = 0; break;
      case 1:
       var _T_ = 2; break;
      default: var _T_ = 1;
    }
    return caml_call1(Stdlib[99], _T_);
   }
   var
    Ppx_inline_test_lib =
      [0,
       am_running,
       am_running_env_var,
       testing,
       [0, combine, combine_all, to_string],
       set_lib_and_partition,
       unset_lib,
       test,
       test_unit,
       test_module,
       use_color$0,
       in_place$0,
       diff_command$0,
       diff_path_prefix$0,
       source_tree_root$0,
       add_evaluator,
       exit];
   runtime.caml_register_global
    (124, Ppx_inline_test_lib, cst_Ppx_inline_test_lib$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
