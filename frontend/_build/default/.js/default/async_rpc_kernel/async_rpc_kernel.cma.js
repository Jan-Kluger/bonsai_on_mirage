// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Async_rpc_kernel__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Async_rpc_kernel = [0];
   runtime.caml_register_global(0, Async_rpc_kernel, "Async_rpc_kernel__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Nat0
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Nat0, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Size, Bin_prot__Type_class, Bin_prot__Write, Bin_shape, Expect_test_collector, Expect_test_common__File, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Nat0 = "Async_rpc_kernel__Nat0",
    cst_async_rpc_kernel = "async_rpc_kernel",
    cst_src_nat0_ml$0 = "src/nat0.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Stdlib = global_data.Stdlib,
    Expect_test_common_File = global_data.Expect_test_common__File,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Inline_test_config = global_data.Inline_test_config,
    Bin_prot_Type_class = global_data.Bin_prot__Type_class,
    Bin_prot_Size = global_data.Bin_prot__Size,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Nat0 = global_data.Bin_prot__Nat0;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Nat0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][1], cst_src_nat0_ml$0);
   caml_call2(Ppx_inline_test_lib[5], cst_async_rpc_kernel, "nat0.ml");
   var
    _a_ = caml_call1(Bin_shape[5][1], "899e2f4a-490a-11e6-b68f-bbd62472516c"),
    bin_shape_t = caml_call1(caml_call1(Bin_prot_Shape[12], _a_), 0),
    Expect_test_collector$0 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_nat0_ml = cst_src_nat0_ml$0,
    _b_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_nat0_ml$0),
       6,
       152,
       163,
       201],
    _c_ =
      [0,
       [0,
        [0, ""],
        [1, " 595f2a60f11816b29a72ddab17002b56 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_nat0_ml$0),
         6,
         152,
         156,
         162],
        _b_],
       0],
    _d_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_nat0_ml$0),
       4,
       98,
       98,
       202],
    _e_ =
      caml_call1
       (Expect_test_common_File[4][3], "9552aa187e3a6d41dbe1f9a318caf7d6");
   caml_call9
    (Expect_test_collector$0[3],
     _e_,
     _d_,
     cst_src_nat0_ml$0,
     0,
     0,
     _c_,
     0,
     Inline_test_config,
     function(param){
      var
       _f_ = caml_call1(Bin_prot_Shape[15], bin_shape_t),
       _g_ = caml_call1(Bin_shape[19][4], _f_);
      caml_call1(Stdlib[46], _g_);
      var
       _h_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_nat0_ml),
          6,
          152,
          156,
          162];
      return caml_call1(Expect_test_collector$0[1], _h_);
     });
   var
    bin_t = Bin_prot_Type_class[47],
    bin_size_t = Bin_prot_Size[11],
    bin_writer_t = Bin_prot_Type_class[44],
    bin_write_t = Bin_prot_Write[7],
    bin_reader_t = Bin_prot_Type_class[45],
    bin_read_t = Bin_prot_Read[7],
    cst_t = "t";
   function bin_read_t$0(buf, pos_ref, vnat0){
    return caml_call2(Bin_prot_Common[19], cst_t, pos_ref[1]);
   }
   var of_int_exn = Bin_prot_Nat0[1];
   caml_call1(Ppx_inline_test_lib[6], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Nat0);
   var
    Async_rpc_kernel_Nat0 =
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       of_int_exn];
   runtime.caml_register_global
    (33, Async_rpc_kernel_Nat0, cst_Async_rpc_kernel_Nat0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Writer_with_length
//# unitInfo: Requires: Async_rpc_kernel__Nat0, Bin_prot__Utils, Core, Core__Bigstring, Core__Bytes, Core__Int, Expect_test_collector, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Writer_wi = "Async_rpc_kernel__Writer_with_length",
    cst_async_rpc_kernel = "async_rpc_kernel",
    cst_src_writer_with_length_ml$0 = "src/writer_with_length.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core_Int = global_data.Core__Int,
    Core_Bytes = global_data.Core__Bytes,
    Core_Bigstring = global_data.Core__Bigstring,
    Core = global_data.Core,
    Bin_prot_Utils = global_data.Bin_prot__Utils,
    Inline_test_config = global_data.Inline_test_config,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_rpc_kernel_Nat0 = global_data.Async_rpc_kernel__Nat0,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Writer_wi);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][1], cst_src_writer_with_length_ml$0);
   caml_call2
    (Ppx_inline_test_lib[5], cst_async_rpc_kernel, "writer_with_length.ml");
   var
    _a_ =
      [0,
       [11, "mismatch for length ", [4, 0, 0, 0, 0]],
       "mismatch for length %d"],
    cst_src_writer_with_length_ml = cst_src_writer_with_length_ml$0,
    cst_for_len_0_to_Int_pow_2_10_ =
      "<<for len = 0 to Int.pow 2 10 do test len done;[...]>>";
   function of_writer(param){
    var write = param[2], size = param[1];
    function write$0(buf, pos, a){
     var
      _i_ = caml_call1(size, a),
      len = caml_call1(Async_rpc_kernel_Nat0[9], _i_),
      pos$0 = caml_call3(Async_rpc_kernel_Nat0[2], buf, pos, len);
     return caml_call3(write, buf, pos$0, a);
    }
    function size$0(a){
     var
      _h_ = caml_call1(size, a),
      len = caml_call1(Async_rpc_kernel_Nat0[9], _h_);
     return caml_call1(Async_rpc_kernel_Nat0[1], len) + len | 0;
    }
    return [0, size$0, write$0];
   }
   function of_type_class(bin_a){return of_writer(bin_a[2]);}
   caml_call8
    (Ppx_inline_test_lib[9],
     Inline_test_config,
     cst,
     0,
     cst_src_writer_with_length_ml$0,
     19,
     0,
     921,
     function(param){
      function test(len){
       var
        s = caml_call1(Core_Bytes[40], len),
        bigstring = caml_call3(Bin_prot_Utils[4], 0, Core_Bytes[6], s),
        bigstring_version =
          caml_call3
           (Bin_prot_Utils[4], 0, Core_Bigstring[130][1][6], bigstring),
        writer_with_length = of_writer(Core_Bytes[6]),
        with_length_version =
          caml_call3(Bin_prot_Utils[4], 0, writer_with_length, s),
        _f_ = caml_call3(Core_Bigstring[16], 0, 0, with_length_version),
        _g_ =
          caml_call3(Core_Bigstring[16], 0, 0, bigstring_version) !== _f_
           ? 1
           : 0;
       return _g_ ? caml_call3(Core[240], _a_, len, 0) : _g_;
      }
      caml_call8
       (Ppx_inline_test_lib[8],
        Inline_test_config,
        cst_for_len_0_to_Int_pow_2_10_,
        0,
        cst_src_writer_with_length_ml,
        39,
        4,
        218,
        function(param){
         var _c_ = caml_call2(Core_Int[25], 2, 10), _b_ = 0;
         if(_c_ >= 0){
          var len = _b_;
          for(;;){
           test(len);
           var _e_ = len + 1 | 0;
           if(_c_ === len) break;
           len = _e_;
          }
         }
         var pow = 10;
         for(;;){
          var x = caml_call2(Core_Int[25], 2, pow);
          test(x - 1 | 0);
          test(x);
          test(x + 1 | 0);
          var _d_ = pow + 1 | 0;
          if(20 === pow) return 0;
          pow = _d_;
         }
        });
      return 0;
     });
   caml_call1(Ppx_inline_test_lib[6], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Writer_wi);
   var Async_rpc_kernel_Writer_with_l = [0, of_writer, of_type_class];
   runtime.caml_register_global
    (23, Async_rpc_kernel_Writer_with_l, cst_Async_rpc_kernel_Writer_wi);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Description
//# unitInfo: Requires: Base__Hash, Bin_prot__Common, Bin_prot__Shape, Bin_shape, Core, Core__Comparable, Core__Hashable, Core__Int, Core__List, Core__Set, Core__String, Expect_test_collector, Expect_test_common__File, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_record
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_9de3279e32de7c4c771f9a0df6 = "9de3279e32de7c4c771f9a0df6b6c6d4",
    cst_Async_rpc_kernel_Descripti = "Async_rpc_kernel__Description",
    cst_async_rpc_kernel = "async_rpc_kernel",
    cst_foo = "foo",
    cst_name$0 = "name",
    cst_src_description_ml$1 = "src/description.ml",
    cst_src_description_ml_Stable_$0 = "src/description.ml.Stable.V1.t",
    cst_t = "t",
    cst_version$0 = "version";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    descriptions =
      [0, [0, cst_foo, 1], [0, [0, cst_foo, 2], [0, [0, "bar", 5], 0]]],
    error_source_006 = cst_src_description_ml_Stable_$0,
    Core_Int = global_data.Core__Int,
    Core_String = global_data.Core__String,
    Core = global_data.Core,
    Expect_test_common_File = global_data.Expect_test_common__File,
    Core_Set = global_data.Core__Set,
    Core_List = global_data.Core__List,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Base_Hash = global_data.Base__Hash,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Inline_test_config = global_data.Inline_test_config,
    Core_Comparable = global_data.Core__Comparable,
    Core_Hashable = global_data.Core__Hashable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Descripti);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][1], cst_src_description_ml$1);
   caml_call2(Ppx_inline_test_lib[5], cst_async_rpc_kernel, "description.ml");
   var
    _a_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0, [0, cst_name$0, Core[471]], [0, [0, cst_version$0, Core[350]], 0]]),
    _b_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _a_], 0],
    _c_ = caml_call1(Bin_shape[4][1], "src/description.ml:5:4"),
    group = caml_call2(Bin_prot_Shape[2], _c_, _b_),
    _d_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _d_), 0);
   function bin_size_t(param){
    var
     v2 = param[2],
     v1 = param[1],
     _z_ = caml_call1(Core[472], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _z_),
     _A_ = caml_call1(Core[351], v2);
    return caml_call2(Bin_prot_Common[23], size, _A_);
   }
   function bin_write_t(buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core[473], buf, pos, v1);
    return caml_call3(Core[352], buf, pos$0, v2);
   }
   var
    bin_writer_t = [0, bin_size_t, bin_write_t],
    cst_src_description_ml_Stable_ = cst_src_description_ml_Stable_$0;
   function bin_read_t(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_description_ml_Stable_, pos_ref[1]);
   }
   function bin_read_t$0(buf, pos_ref){
    var
     v_name = caml_call2(Core[475], buf, pos_ref),
     v_version = caml_call2(Core[354], buf, pos_ref);
    return [0, v_name, v_version];
   }
   var
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
    cst_version = cst_version$0,
    cst_name = cst_name$0,
    _e_ = [0, cst_version$0],
    _f_ = [0, cst_name$0];
   function equal(a_001, b_002){
    if(a_001 === b_002) return 1;
    var _y_ = caml_call2(Core[480], a_001[1], b_002[1]);
    return _y_ ? caml_call2(Core[359], a_001[2], b_002[2]) : _y_;
   }
   function compare(a_003, b_004){
    if(a_003 === b_004) return 0;
    var n = caml_call2(Core[479], a_003[1], b_004[1]);
    return 0 === n ? caml_call2(Core[358], a_003[2], b_004[2]) : n;
   }
   function hash_fold_t(hsv, arg){
    var hsv$0 = caml_call2(Core[482], hsv, arg[1]);
    return caml_call2(Core[361], hsv$0, arg[2]);
   }
   function hash(arg){
    var hsv = caml_call2(Base_Hash[11], 0, 0), _x_ = hash_fold_t(hsv, arg);
    return caml_call1(Base_Hash[9], _x_);
   }
   function t_of_sexp(x_007){
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_006,
             [0, cst_name, 1, Core[485], [0, cst_version, 1, Core[364], 0]],
             function(param){
              return param !== cst_name$0
                      ? param !== cst_version$0 ? -1 : 1
                      : 0;
             },
             0,
             function(param){
              var version = param[2][1], name = param[1];
              return [0, name, version];
             },
             x_007);
   }
   function sexp_of_t(param){
    var
     version_011 = param[2],
     name_009 = param[1],
     arg_012 = caml_call1(Core[363], version_011),
     bnds_008 = [0, [1, [0, _e_, [0, arg_012, 0]]], 0],
     arg_010 = caml_call1(Core[484], name_009),
     bnds_008$0 = [0, [1, [0, _f_, [0, arg_010, 0]]], bnds_008];
    return [1, bnds_008$0];
   }
   var
    Expect_test_collector$0 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_description_ml = cst_src_description_ml$1,
    _g_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_description_ml$1),
       13,
       235,
       250,
       288],
    _h_ =
      [0,
       [0,
        [0, cst],
        [1, " 4521f44dbc6098c0afc2770cc84552b1 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_description_ml$1),
         13,
         235,
         243,
         249],
        _g_],
       0],
    _i_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_description_ml$1),
       11,
       173,
       177,
       289],
    _j_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_9de3279e32de7c4c771f9a0df6);
   caml_call9
    (Expect_test_collector$0[3],
     _j_,
     _i_,
     cst_src_description_ml$1,
     0,
     0,
     _h_,
     0,
     Inline_test_config,
     function(param){
      var
       _u_ = caml_call1(Bin_prot_Shape[15], bin_shape_t),
       _v_ = caml_call1(Bin_shape[19][4], _u_);
      caml_call1(Core[31], _v_);
      var
       _w_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_description_ml),
          13,
          235,
          243,
          249];
      return caml_call1(Expect_test_collector$0[1], _w_);
     });
   var
    _k_ = caml_call1(Core_Comparable[12], [0, compare, t_of_sexp, sexp_of_t]),
    symbol = _k_[1],
    symbol$0 = _k_[2],
    symbol$1 = _k_[3],
    symbol$2 = _k_[4],
    symbol$3 = _k_[5],
    symbol$4 = _k_[6],
    equal$0 = _k_[7],
    min = _k_[9],
    max = _k_[10],
    ascending = _k_[11],
    descending = _k_[12],
    between = _k_[13],
    clamp_exn = _k_[14],
    clamp = _k_[15],
    comparator = _k_[16],
    validate_lbound = _k_[17],
    validate_ubound = _k_[18],
    validate_bound = _k_[19],
    Replace_polymorphic_compare = _k_[20],
    Map = _k_[21],
    Set = _k_[22],
    include =
      caml_call1
       (Core_Hashable[3],
        [0, hash_fold_t, t_of_sexp, compare, sexp_of_t, hash]),
    compare$0 = include[1],
    hash_fold_t$0 = include[2],
    hash$0 = include[3],
    hashable = include[4],
    Table = include[5],
    Hash_set = include[6],
    Hash_queue = include[7];
   function summarize(ts){
    var
     _r_ = Core_Set[12],
     _s_ = Core_Int[104][4],
     _t_ =
       caml_call2
        (Core_List[50],
         ts,
         function(param){
          var version = param[2], name = param[1];
          return [0, name, version];
         });
    return caml_call3(Core_String[152][16], _t_, _s_, _r_);
   }
   var
    Expect_test_collector$1 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_description_ml$0 = cst_src_description_ml$1,
    _l_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_description_ml$1),
       36,
       800,
       811,
       840],
    _m_ =
      [0,
       [0,
        [0, cst],
        [1, " ((bar (5)) (foo (1 2))) "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_description_ml$1),
         36,
         800,
         804,
         810],
        _l_],
       0],
    _n_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_description_ml$1),
       27,
       544,
       544,
       841],
    _o_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_9de3279e32de7c4c771f9a0df6);
   caml_call9
    (Expect_test_collector$1[3],
     _o_,
     _n_,
     cst_src_description_ml$1,
     0,
     0,
     _m_,
     0,
     Inline_test_config,
     function(param){
      var
       summary = summarize(descriptions),
       _p_ = caml_call2(Core_String[152][42], Core_Int[104][27], summary);
      caml_call2(Core[250], 0, _p_);
      var
       _q_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_description_ml$0),
          36,
          800,
          804,
          810];
      return caml_call1(Expect_test_collector$1[1], _q_);
     });
   caml_call1(Ppx_inline_test_lib[6], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Descripti);
   var
    Async_rpc_kernel_Description =
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t$0,
       bin_read_t,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       sexp_of_t,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal$0,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       Map,
       Set,
       compare$0,
       hash_fold_t$0,
       hash$0,
       hashable,
       Table,
       Hash_set,
       Hash_queue,
       summarize,
       [0,
        [0,
         compare,
         equal,
         t_of_sexp,
         sexp_of_t,
         bin_size_t,
         bin_write_t,
         bin_read_t$0,
         bin_read_t,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         hash_fold_t,
         hash]]];
   runtime.caml_register_global
    (56, Async_rpc_kernel_Description, cst_Async_rpc_kernel_Descripti);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Or_not_authorized
//# unitInfo: Requires: Eager_deferred, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Or_not_au = "Async_rpc_kernel__Or_not_authorized",
    cst_async_rpc_kernel = "async_rpc_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Eager_deferred = global_data.Eager_deferred,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Or_not_au);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][1], "src/or_not_authorized.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_async_rpc_kernel, "or_not_authorized.ml");
   function bind(t, f){
    if(0 !== t[0]) return t;
    var a = t[1];
    return caml_call1(f, a);
   }
   function bind_deferred(t, f){
    if(0 !== t[0]) return caml_call1(Eager_deferred[6], t);
    var a = t[1];
    return caml_call1(f, a);
   }
   function map_deferred(t, f){
    if(1 === t[0]) return caml_call1(Eager_deferred[6], t);
    var a = t[1], _d_ = caml_call1(f, a);
    return caml_call2(Eager_deferred[7], _d_, function(a){return [0, a];});
   }
   function _a_(_c_){return _c_;}
   function lift_deferred(_b_){return map_deferred(_b_, _a_);}
   caml_call1(Ppx_inline_test_lib[6], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Or_not_au);
   var
    Async_rpc_kernel_Or_not_author =
      [0, bind, bind_deferred, map_deferred, lift_deferred];
   runtime.caml_register_global
    (12, Async_rpc_kernel_Or_not_author, cst_Async_rpc_kernel_Or_not_au);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Protocol
//# unitInfo: Requires: Async_rpc_kernel__Nat0, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Std, Bin_prot__Write, Bin_shape, Core__Comparable, Core__Core_bin_prot, Core__Int, Core__Result, Core__Sexp, Core__String, Core__Unique_id, Expect_test_collector, Expect_test_common__File, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Sexplib__Std, Stdlib, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_7ab56c19bd8e1a900a2e992a59$0 = "7ab56c19bd8e1a900a2e992a591c8cdb",
    cst_Async_rpc_kernel_Protocol = "Async_rpc_kernel__Protocol",
    cst_Bin_io_exn = "Bin_io_exn",
    cst_Connection_closed = "Connection_closed",
    cst_Heartbeat = "Heartbeat",
    cst_Query$0 = "Query",
    cst_Query_v1 = "Query_v1",
    cst_Response$0 = "Response",
    cst_Uncaught_exn = "Uncaught_exn",
    cst_Unimplemented_rpc = "Unimplemented_rpc",
    cst_Unknown_query_id = "Unknown_query_id",
    cst_Version = "Version",
    cst_Write_error = "Write_error",
    cst_a$2 = "a",
    cst_async_rpc_kernel = "async_rpc_kernel",
    cst_bin_io_exn = "bin_io_exn",
    cst_connection_closed = "connection_closed",
    cst_data = "data",
    cst_error = "error",
    cst_id = "id",
    cst_initial = "initial",
    cst_metadata = "metadata",
    cst_needs_length$7 = "needs_length",
    cst_response = "response",
    cst_src_protocol_ml$14 = "src/protocol.ml",
    cst_src_protocol_ml_Message_ne$0 = "src/protocol.ml.Message.needs_length",
    cst_src_protocol_ml_Rpc_error_$1 = "src/protocol.ml.Rpc_error.T.t",
    cst_t$1 = "t",
    cst_tag = "tag",
    cst_uncaught_exn = "uncaught_exn",
    cst_unimplemented_rpc = "unimplemented_rpc",
    cst_unknown_query_id = "unknown_query_id",
    cst_unused_query_id = "unused_query_id",
    cst_version = "version",
    cst_write_error = "write_error",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    err$0 = [2, "src/protocol.ml.Stream_response_data.needs_length"],
    err = [2, "src/protocol.ml.Stream_query.needs_length"],
    error_source_003 = cst_src_protocol_ml_Rpc_error_$1,
    Bin_prot_Std = global_data.Bin_prot__Std,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Stdlib = global_data.Stdlib,
    Expect_test_common_File = global_data.Expect_test_common__File,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Expect_test_config = global_data.Expect_test_config,
    Expect_test_collector = global_data.Expect_test_collector,
    Inline_test_config = global_data.Inline_test_config,
    Core_Core_bin_prot = global_data.Core__Core_bin_prot,
    Stdlib_String = global_data.Stdlib__String,
    Async_rpc_kernel_Nat0 = global_data.Async_rpc_kernel__Nat0,
    Core_Result = global_data.Core__Result,
    Sexplib_Std = global_data.Sexplib__Std,
    Core_Sexp = global_data.Core__Sexp,
    Core_Int = global_data.Core__Int,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_String = global_data.Core__String,
    Core_Unique_id = global_data.Core__Unique_id,
    Core_Comparable = global_data.Core__Comparable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Protocol);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][1], cst_src_protocol_ml$14);
   caml_call2(Ppx_inline_test_lib[5], cst_async_rpc_kernel, "protocol.ml");
   var
    Rpc_tag =
      [0,
       Core_String[119],
       Core_String[120],
       Core_String[121],
       Core_String[122],
       Core_String[123],
       Core_String[124],
       Core_String[125],
       Core_String[126],
       Core_String[127],
       Core_String[128],
       Core_String[129],
       Core_String[130],
       Core_String[131],
       Core_String[132],
       Core_String[133],
       Core_String[134],
       Core_String[135],
       Core_String[136],
       Core_String[137],
       Core_String[138],
       Core_String[139],
       Core_String[140],
       Core_String[141],
       Core_String[142],
       Core_String[143],
       Core_String[144],
       Core_String[145],
       Core_String[146],
       Core_String[147],
       Core_String[148],
       Core_String[149],
       Core_String[150],
       Core_String[151],
       Core_String[152],
       Core_String[153],
       Core_String[154],
       Core_String[155],
       Core_String[156],
       Core_String[157],
       Core_String[158],
       Core_String[159]],
    Query_id = caml_call1(Core_Unique_id[2], 0),
    _a_ = Query_id[5],
    _b_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _a_], 0],
    _c_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:16:2"),
    group = caml_call2(Bin_prot_Shape[2], _c_, _b_),
    _d_ = caml_call1(Bin_shape[2][1], cst_t$1),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _d_), 0),
    bin_size_t = Query_id[1],
    bin_write_t = Query_id[2],
    bin_writer_t = [0, bin_size_t, bin_write_t],
    bin_read_t = Query_id[4],
    bin_read_t$0 = Query_id[3],
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
    sexp_of_t = Query_id[10],
    Expect_test_collector$0 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_protocol_ml = cst_src_protocol_ml$14,
    _e_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
       20,
       496,
       509,
       547],
    _f_ =
      [0,
       [0,
        [0, cst],
        [1, " 2b528f4b22f08e28876ffe0239315ac2 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
         20,
         496,
         502,
         508],
        _e_],
       0],
    _g_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
       18,
       438,
       440,
       548],
    _h_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_7ab56c19bd8e1a900a2e992a59$0);
   caml_call9
    (Expect_test_collector$0[3],
     _h_,
     _g_,
     cst_src_protocol_ml$14,
     0,
     0,
     _f_,
     0,
     Inline_test_config,
     function(param){
      var
       _eg_ = caml_call1(Bin_prot_Shape[15], bin_shape_t),
       _eh_ = caml_call1(Bin_shape[19][4], _eg_);
      caml_call1(Stdlib[46], _eh_);
      var
       _ei_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml),
          20,
          496,
          502,
          508];
      return caml_call1(Expect_test_collector$0[1], _ei_);
     });
   var
    t = caml_call1(Query_id[45], 0),
    Unused_query_id =
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t$0,
       bin_read_t,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       sexp_of_t,
       t],
    _i_ = [0, [0, cst_Unknown_query_id, [0, Query_id[5], 0]], 0],
    _j_ =
      [0,
       caml_call2(Bin_prot_Shape[6], cst_Version, [0, Core_Int[125][1][7]]),
       0],
    _k_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:46:41"),
    _l_ = [0, caml_call2(Bin_prot_Shape[8], _k_, _j_), 0],
    _m_ =
      caml_call1
       (Bin_prot_Shape[5],
        [0,
         [0, cst_Bin_io_exn, [0, Core_Sexp[5], 0]],
         [0,
          [0, cst_Connection_closed, 0],
          [0,
           [0, cst_Write_error, [0, Core_Sexp[5], 0]],
           [0,
            [0, cst_Uncaught_exn, [0, Core_Sexp[5], 0]],
            [0, [0, cst_Unimplemented_rpc, [0, Rpc_tag[5], _l_]], _i_]]]]]),
    _n_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _m_], 0],
    _o_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:41:4"),
    group$0 = caml_call2(Bin_prot_Shape[2], _o_, _n_),
    _p_ = caml_call1(Bin_shape[2][1], cst_t$1),
    bin_shape_t$0 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _p_), 0);
   function bin_size_t$0(param){
    if(typeof param === "number") return 1;
    switch(param[0]){
      case 0:
       var v1 = param[1], _ea_ = caml_call1(Core_Sexp[1], v1);
       return caml_call2(Bin_prot_Common[23], 1, _ea_);
      case 1:
       var v1$0 = param[1], _eb_ = caml_call1(Core_Sexp[1], v1$0);
       return caml_call2(Bin_prot_Common[23], 1, _eb_);
      case 2:
       var v1$1 = param[1], _ec_ = caml_call1(Core_Sexp[1], v1$1);
       return caml_call2(Bin_prot_Common[23], 1, _ec_);
      case 3:
       var
        v2 = param[2],
        v1$2 = param[1],
        _ed_ = caml_call1(Rpc_tag[1], v1$2),
        size = caml_call2(Bin_prot_Common[23], 1, _ed_),
        args = v2[2],
        size_args = caml_call1(Core_Int[125][1][3], args),
        _ee_ = caml_call2(Bin_prot_Common[23], size_args, 4);
       return caml_call2(Bin_prot_Common[23], size, _ee_);
      default:
       var v1$3 = param[1], _ef_ = caml_call1(Query_id[1], v1$3);
       return caml_call2(Bin_prot_Common[23], 1, _ef_);
    }
   }
   function bin_write_t$0(buf, pos, param){
    if(typeof param === "number")
     return caml_call3(Bin_prot_Write[30], buf, pos, 1);
    switch(param[0]){
      case 0:
       var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
       return caml_call3(Core_Sexp[2], buf, pos$0, v1);
      case 1:
       var
        v1$0 = param[1],
        pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
       return caml_call3(Core_Sexp[2], buf, pos$1, v1$0);
      case 2:
       var
        v1$1 = param[1],
        pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
       return caml_call3(Core_Sexp[2], buf, pos$2, v1$1);
      case 3:
       var
        v2 = param[2],
        v1$2 = param[1],
        pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 4),
        pos$4 = caml_call3(Rpc_tag[2], buf, pos$3, v1$2),
        args = v2[2],
        pos$5 = caml_call3(Bin_prot_Write[29], buf, pos$4, -901574920);
       return caml_call3(Core_Int[125][1][4], buf, pos$5, args);
      default:
       var
        v1$3 = param[1],
        pos$6 = caml_call3(Bin_prot_Write[30], buf, pos, 5);
       return caml_call3(Query_id[2], buf, pos$6, v1$3);
    }
   }
   var
    bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0],
    cst_src_protocol_ml_Rpc_error_ = cst_src_protocol_ml_Rpc_error_$1,
    _q_ = [1, cst_src_protocol_ml_Rpc_error_$1],
    cst_src_protocol_ml_Rpc_error_$0 = cst_src_protocol_ml_Rpc_error_$1;
   function bin_read_t$1(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_protocol_ml_Rpc_error_, pos_ref[1]);
   }
   function bin_read_t$2(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(5 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _q_, pos_ref[1]);
    switch(match){
      case 0:
       var arg_1 = caml_call2(Core_Sexp[3], buf, pos_ref); return [0, arg_1];
      case 1:
       return 0;
      case 2:
       var arg_1$0 = caml_call2(Core_Sexp[3], buf, pos_ref);
       return [1, arg_1$0];
      case 3:
       var arg_1$1 = caml_call2(Core_Sexp[3], buf, pos_ref);
       return [2, arg_1$1];
      case 4:
       var
        arg_1$2 = caml_call2(Rpc_tag[3], buf, pos_ref),
        vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
       try{
        if(-901574920 !== vint)
         throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 1);
        var
         arg_1$3 = caml_call2(Core_Int[125][1][5], buf, pos_ref),
         _d__ = [0, -901574920, arg_1$3],
         arg_2 = _d__;
       }
       catch(_d$_){
        var _d9_ = caml_wrap_exception(_d$_);
        if(_d9_ !== Bin_prot_Common[13])
         throw caml_maybe_attach_backtrace(_d9_, 0);
        var
         arg_2 =
           caml_call2
            (Bin_prot_Common[19],
             cst_src_protocol_ml_Rpc_error_$0,
             pos_ref[1]);
       }
       return [3, arg_1$2, arg_2];
      default:
       var arg_1$4 = caml_call2(Query_id[3], buf, pos_ref);
       return [4, arg_1$4];
    }
   }
   var
    bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
    bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0],
    _r_ = [0, cst_Connection_closed],
    _s_ = [0, cst_Bin_io_exn],
    _t_ = [0, cst_Write_error],
    _u_ = [0, cst_Uncaught_exn],
    _v_ = [0, cst_Version],
    _w_ = [0, cst_Unimplemented_rpc],
    _x_ = [0, cst_Unknown_query_id];
   function t_of_sexp(sexp_005){
    a:
    {
     if(0 === sexp_005[0]){
      var
       _dU_ = sexp_005[1],
       _dV_ = caml_string_compare(_dU_, cst_bin_io_exn);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           if(0 <= _dV_){
            if(0 < _dV_){
             if(_dU_ === cst_connection_closed) break f;
             if(_dU_ === cst_uncaught_exn) break e;
             if(_dU_ === cst_unimplemented_rpc) break d;
             if(_dU_ === cst_unknown_query_id) break c;
             if(_dU_ !== cst_write_error) break a;
             break b;
            }
           }
           else if(_dU_ !== cst_Bin_io_exn){
            if(_dU_ === cst_Connection_closed) break f;
            if(_dU_ === cst_Uncaught_exn) break e;
            if(_dU_ === cst_Unimplemented_rpc) break d;
            if(_dU_ === cst_Unknown_query_id) break c;
            if(_dU_ !== cst_Write_error) break a;
            break b;
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5], error_source_003, sexp_005);
          }
          return 0;
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5], error_source_003, sexp_005);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_003, sexp_005);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_003, sexp_005);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5], error_source_003, sexp_005);
     }
     var _dW_ = sexp_005[1];
     if(! _dW_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
     var _dX_ = _dW_[1];
     if(0 !== _dX_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_003, sexp_005);
     var
      tag_006 = _dX_[1],
      _dY_ = caml_string_compare(tag_006, cst_bin_io_exn);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          if(0 <= _dY_){
           if(0 < _dY_){
            if(tag_006 === cst_connection_closed) break f;
            if(tag_006 === cst_uncaught_exn) break e;
            if(tag_006 === cst_unimplemented_rpc) break d;
            if(tag_006 === cst_unknown_query_id) break c;
            if(tag_006 !== cst_write_error) break a;
            break b;
           }
          }
          else if(tag_006 !== cst_Bin_io_exn){
           if(tag_006 === cst_Connection_closed) break f;
           if(tag_006 === cst_Uncaught_exn) break e;
           if(tag_006 === cst_Unimplemented_rpc) break d;
           if(tag_006 === cst_Unknown_query_id) break c;
           if(tag_006 !== cst_Write_error) break a;
           break b;
          }
          var sexp_args_007 = _dW_[2];
          if(sexp_args_007 && ! sexp_args_007[2]){
           var
            arg0_008 = sexp_args_007[1],
            res0_009 = caml_call1(Core_Sexp[91], arg0_008);
           return [0, res0_009];
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4],
                   error_source_003,
                   tag_006,
                   sexp_005);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
        }
        var sexp_args_017 = _dW_[2];
        if(sexp_args_017 && ! sexp_args_017[2]){
         var
          arg0_018 = sexp_args_017[1],
          res0_019 = caml_call1(Core_Sexp[91], arg0_018);
         return [2, res0_019];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[4],
                 error_source_003,
                 tag_006,
                 sexp_005);
       }
       var sexp_args_022 = _dW_[2];
       if(sexp_args_022){
        var _dZ_ = sexp_args_022[2];
        if(_dZ_ && ! _dZ_[2]){
         var
          arg1_033 = _dZ_[1],
          arg0_032 = sexp_args_022[1],
          res0_034 = caml_call1(Rpc_tag[9], arg0_032);
         try{
          if(0 === arg1_033[0])
           var
            atom_024 = arg1_033[1],
            _d1_ =
              atom_024 !== cst_Version
               ? caml_call1(Sexplib0_Sexp_conv_error[19], 0)
               : caml_call2
                 (Sexplib0_Sexp_conv_error[23], error_source_003, arg1_033),
            _d2_ = _d1_;
          else{
           var _d3_ = arg1_033[1];
           if(_d3_){
            var match = _d3_[1];
            if(0 === match[0]){
             var sexp_args_027 = _d3_[2], atom_024$0 = match[1];
             if(atom_024$0 !== cst_Version)
              var _d4_ = caml_call1(Sexplib0_Sexp_conv_error[19], 0);
             else{
              d:
              {
               if(sexp_args_027 && ! sexp_args_027[2]){
                var
                 arg0_029 = sexp_args_027[1],
                 res0_030 = caml_call1(Core_Int[125][1][12], arg0_029),
                 _d7_ = [0, -901574920, res0_030];
                break d;
               }
               var
                _d7_ =
                  caml_call3
                   (Sexplib0_Sexp_conv_error[22],
                    error_source_003,
                    atom_024$0,
                    arg1_033);
              }
              var _d4_ = _d7_;
             }
             var _d5_ = _d4_;
            }
            else
             var
              _d5_ =
                caml_call2
                 (Sexplib0_Sexp_conv_error[24], error_source_003, arg1_033);
            var _d6_ = _d5_;
           }
           else
            var
             _d6_ =
               caml_call2
                (Sexplib0_Sexp_conv_error[25], error_source_003, arg1_033);
           var _d2_ = _d6_;
          }
          var res1_035 = _d2_;
         }
         catch(_d8_){
          var _d0_ = caml_wrap_exception(_d8_);
          if(_d0_ !== Sexplib0_Sexp_conv_error[18])
           throw caml_maybe_attach_backtrace(_d0_, 0);
          var
           res1_035 =
             caml_call2
              (Sexplib0_Sexp_conv_error[20], error_source_003, arg1_033);
         }
         return [3, res0_034, res1_035];
        }
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_003,
                tag_006,
                sexp_005);
      }
      var sexp_args_038 = _dW_[2];
      if(sexp_args_038 && ! sexp_args_038[2]){
       var
        arg0_039 = sexp_args_038[1],
        res0_040 = caml_call1(Query_id[9], arg0_039);
       return [4, res0_040];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_003,
               tag_006,
               sexp_005);
     }
     var sexp_args_012 = _dW_[2];
     if(sexp_args_012 && ! sexp_args_012[2]){
      var
       arg0_013 = sexp_args_012[1],
       res0_014 = caml_call1(Core_Sexp[91], arg0_013);
      return [1, res0_014];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4],
              error_source_003,
              tag_006,
              sexp_005);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_003, sexp_005);
   }
   function sexp_of_t$0(param){
    if(typeof param === "number") return _r_;
    switch(param[0]){
      case 0:
       var
        arg0_041 = param[1],
        res0_042 = caml_call1(Core_Sexp[90], arg0_041);
       return [1, [0, _s_, [0, res0_042, 0]]];
      case 1:
       var
        arg0_043 = param[1],
        res0_044 = caml_call1(Core_Sexp[90], arg0_043);
       return [1, [0, _t_, [0, res0_044, 0]]];
      case 2:
       var
        arg0_045 = param[1],
        res0_046 = caml_call1(Core_Sexp[90], arg0_045);
       return [1, [0, _u_, [0, res0_046, 0]]];
      case 3:
       var
        arg1_049 = param[2],
        arg0_048 = param[1],
        res0_050 = caml_call1(Rpc_tag[10], arg0_048),
        v_047 = arg1_049[2],
        res1_051 =
          [1, [0, _v_, [0, caml_call1(Core_Int[125][1][13], v_047), 0]]];
       return [1, [0, _w_, [0, res0_050, [0, res1_051, 0]]]];
      default:
       var arg0_052 = param[1], res0_053 = caml_call1(Query_id[10], arg0_052);
       return [1, [0, _x_, [0, res0_053, 0]]];
    }
   }
   function compare(a_054, b_055){
    if(a_054 === b_055) return 0;
    a:
    {
     if(typeof a_054 !== "number"){
      b:
      {
       c:
       {
        switch(a_054[0]){
          case 0:
           var a_056 = a_054[1];
           if(typeof b_055 !== "number" && 0 === b_055[0]){
            var b_057 = b_055[1];
            return caml_call2(Core_Sexp[35], a_056, b_057);
           }
           return -1;
          case 1:
           var a_058 = a_054[1];
           if(typeof b_055 === "number") break b;
           switch(b_055[0]){
             case 0:
              break a;
             case 1:
              var b_059 = b_055[1];
              return caml_call2(Core_Sexp[35], a_058, b_059);
             default: return -1;
           }
          case 2:
           var a_060 = a_054[1];
           if(typeof b_055 === "number") break b;
           switch(b_055[0]){
             case 0:
              break a;
             case 1:
              break c;
             case 2:
              var b_061 = b_055[1];
              return caml_call2(Core_Sexp[35], a_060, b_061);
             default: return -1;
           }
          case 3:
           var a_064 = a_054[2], a_062 = a_054[1];
           if(typeof b_055 === "number") break b;
           switch(b_055[0]){
             case 0:
              break a;
             case 1:
              break c;
             case 2: break;
             case 3:
              var
               b_065 = b_055[2],
               b_063 = b_055[1],
               n = caml_call2(Rpc_tag[21], a_062, b_063);
              if(0 !== n) return n;
              if(a_064 === b_065) return 0;
              var right_067 = b_065[2], left_066 = a_064[2];
              return caml_call2(Core_Int[125][1][11], left_066, right_067);
             default: return -1;
           }
           break;
          default:
           var a_068 = a_054[1];
           if(typeof b_055 === "number") break b;
           switch(b_055[0]){
             case 0:
              break a;
             case 1:
              break c;
             case 2: break;
             case 3:
              return 1;
             default:
              var b_069 = b_055[1];
              return caml_call2(Query_id[20], a_068, b_069);
           }
        }
        return 1;
       }
       return 1;
      }
      return 1;
     }
     if(typeof b_055 === "number") return 0;
     if(0 !== b_055[0]) return -1;
    }
    return 1;
   }
   var
    Expect_test_collector$1 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_protocol_ml$0 = cst_src_protocol_ml$14,
    _y_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
       52,
       1321,
       1336,
       1374],
    _z_ =
      [0,
       [0,
        [0, cst],
        [1, " 8cc766befa2cf565ea147d9fcd5eaaab "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
         52,
         1321,
         1329,
         1335],
        _y_],
       0],
    _A_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
       50,
       1252,
       1256,
       1375],
    _B_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_7ab56c19bd8e1a900a2e992a59$0);
   caml_call9
    (Expect_test_collector$1[3],
     _B_,
     _A_,
     cst_src_protocol_ml$14,
     [0, "stable"],
     0,
     _z_,
     0,
     Inline_test_config,
     function(param){
      var
       _dR_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$0),
       _dS_ = caml_call1(Bin_shape[19][4], _dR_);
      caml_call1(Stdlib[46], _dS_);
      var
       _dT_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$0),
          52,
          1321,
          1329,
          1335];
      return caml_call1(Expect_test_collector$1[1], _dT_);
     });
   var
    include =
      caml_call1(Core_Comparable[12], [0, compare, t_of_sexp, sexp_of_t$0]),
    symbol = include[1],
    symbol$0 = include[2],
    symbol$1 = include[3],
    symbol$2 = include[4],
    symbol$3 = include[5],
    symbol$4 = include[6],
    equal = include[7],
    compare$0 = include[8],
    min = include[9],
    max = include[10],
    ascending = include[11],
    descending = include[12],
    between = include[13],
    clamp_exn = include[14],
    clamp = include[15],
    comparator = include[16],
    validate_lbound = include[17],
    validate_ubound = include[18],
    validate_bound = include[19],
    Replace_polymorphic_compare = include[20],
    Map = include[21],
    Set = include[22],
    Rpc_error =
      [0,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$2,
       bin_read_t$1,
       bin_shape_t$0,
       bin_writer_t$0,
       bin_reader_t$0,
       bin_t$0,
       t_of_sexp,
       sexp_of_t$0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare$0,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       Map,
       Set],
    _C_ = Rpc_error[5],
    _D_ = caml_call1(Bin_shape[3][1], cst_a$2),
    _E_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:61:15"),
    _F_ = caml_call2(Bin_prot_Shape[11], _E_, _D_),
    _G_ = caml_call1(caml_call1(Core_Result[1], _F_), _C_),
    _H_ = [0, caml_call1(Bin_shape[3][1], cst_a$2), 0],
    _I_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), _H_, _G_], 0],
    _J_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:61:2"),
    group$1 = caml_call2(Bin_prot_Shape[2], _J_, _I_),
    cst_t = cst_t$1;
   function bin_shape_t$1(a){
    var _dQ_ = caml_call1(Bin_shape[2][1], cst_t);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$1, _dQ_), [0, a, 0]);
   }
   function bin_size_t$1(size_of_a, v){
    return caml_call3(Core_Result[2], size_of_a, Rpc_error[1], v);
   }
   function bin_write_t$1(write_a, buf, pos, v){
    return caml_call5(Core_Result[3], write_a, Rpc_error[2], buf, pos, v);
   }
   function bin_writer_t$1(bin_writer_a){
    return [0,
            function(v){return bin_size_t$1(bin_writer_a[1], v);},
            function(v){
             var _dN_ = bin_writer_a[2];
             return function(_dO_, _dP_){
              return bin_write_t$1(_dN_, v, _dO_, _dP_);};
            }];
   }
   function bin_read_t$3(of_a, buf, pos_ref, vint){
    return caml_call3
            (caml_call2(Core_Result[5], of_a, Rpc_error[3]),
             buf,
             pos_ref,
             vint);
   }
   function bin_read_t$4(of_a, buf, pos_ref){
    return caml_call2
            (caml_call2(Core_Result[4], of_a, Rpc_error[3]), buf, pos_ref);
   }
   function bin_reader_t$1(bin_reader_a){
    return [0,
            function(buf, pos_ref){
             return bin_read_t$4(bin_reader_a[1], buf, pos_ref);
            },
            function(buf, pos_ref, vtag){
             return bin_read_t$3(bin_reader_a[1], buf, pos_ref, vtag);
            }];
   }
   function bin_t$1(bin_a){
    var _dL_ = bin_reader_t$1(bin_a[3]), _dM_ = bin_writer_t$1(bin_a[2]);
    return [0, bin_shape_t$1(bin_a[1]), _dM_, _dL_];
   }
   function sexp_of_t$1(of_a_070, x_071){
    return caml_call3(Core_Result[10], of_a_070, Rpc_error[10], x_071);
   }
   var
    Expect_test_collector$2 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_protocol_ml$1 = cst_src_protocol_ml$14,
    _K_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
       65,
       1608,
       1621,
       1659],
    _L_ =
      [0,
       [0,
        [0, cst],
        [1, " 58734a63a5c83c1b7cbfc3fedfa3ae82 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
         65,
         1608,
         1614,
         1620],
        _K_],
       0],
    _M_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
       63,
       1545,
       1547,
       1660],
    _N_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_7ab56c19bd8e1a900a2e992a59$0);
   caml_call9
    (Expect_test_collector$2[3],
     _N_,
     _M_,
     cst_src_protocol_ml$14,
     0,
     0,
     _L_,
     0,
     Inline_test_config,
     function(param){
      var
       _dH_ = bin_shape_t$1(Bin_prot_Std[44]),
       _dI_ = caml_call1(Bin_prot_Shape[15], _dH_),
       _dJ_ = caml_call1(Bin_shape[19][4], _dI_);
      caml_call1(Stdlib[46], _dJ_);
      var
       _dK_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$1),
          65,
          1608,
          1614,
          1620];
      return caml_call1(Expect_test_collector$2[1], _dK_);
     });
   var
    Rpc_result =
      [0,
       bin_shape_t$1,
       bin_size_t$1,
       bin_write_t$1,
       bin_writer_t$1,
       bin_read_t$3,
       bin_read_t$4,
       bin_reader_t$1,
       bin_t$1,
       sexp_of_t$1],
    _O_ = caml_call1(Bin_shape[3][1], cst_a$2),
    _P_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:76:13"),
    _Q_ = [0, [0, cst_data, caml_call2(Bin_prot_Shape[11], _P_, _O_)], 0],
    _R_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0,
         [0, cst_tag, Rpc_tag[5]],
         [0,
          [0, cst_version, Bin_prot_Std[79]],
          [0, [0, cst_id, Query_id[5]], _Q_]]]),
    _S_ = [0, caml_call1(Bin_shape[3][1], cst_a$2), 0],
    _T_ =
      [0, [0, caml_call1(Bin_shape[2][1], cst_needs_length$7), _S_, _R_], 0],
    _U_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:72:2"),
    group$2 = caml_call2(Bin_prot_Shape[2], _U_, _T_),
    cst_needs_length = cst_needs_length$7,
    cst_src_protocol_ml_Query_v1_n = "src/protocol.ml.Query_v1.needs_length",
    _V_ = [0, cst_data],
    _W_ = [0, cst_id],
    _X_ = [0, cst_version],
    _Y_ = [0, cst_tag];
   function bin_shape_needs_length(a){
    var _dG_ = caml_call1(Bin_shape[2][1], cst_needs_length);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$2, _dG_), [0, a, 0]);
   }
   function bin_size_needs_length(size_of_a, param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _dC_ = caml_call1(Rpc_tag[1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _dC_),
     _dD_ = caml_call1(Bin_prot_Std[6], v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _dD_),
     _dE_ = caml_call1(Query_id[1], v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _dE_),
     _dF_ = caml_call1(size_of_a, v4);
    return caml_call2(Bin_prot_Common[23], size$1, _dF_);
   }
   function bin_write_needs_length(write_a, buf, pos, param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Rpc_tag[2], buf, pos, v1),
     pos$1 = caml_call3(Bin_prot_Std[81], buf, pos$0, v2),
     pos$2 = caml_call3(Query_id[2], buf, pos$1, v3);
    return caml_call3(write_a, buf, pos$2, v4);
   }
   function bin_writer_needs_length(bin_writer_a){
    return [0,
            function(v){return bin_size_needs_length(bin_writer_a[1], v);},
            function(v){
             var _dz_ = bin_writer_a[2];
             return function(_dA_, _dB_){
              return bin_write_needs_length(_dz_, v, _dA_, _dB_);};
            }];
   }
   function bin_read_needs_length(of_a, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_protocol_ml_Query_v1_n, pos_ref[1]);
   }
   function bin_read_needs_length$0(of_a, buf, pos_ref){
    var
     v_tag = caml_call2(Rpc_tag[3], buf, pos_ref),
     v_version = caml_call2(Bin_prot_Std[83], buf, pos_ref),
     v_id = caml_call2(Query_id[3], buf, pos_ref),
     v_data = caml_call2(of_a, buf, pos_ref);
    return [0, v_tag, v_version, v_id, v_data];
   }
   function bin_reader_needs_length(bin_reader_a){
    return [0,
            function(buf, pos_ref){
             return bin_read_needs_length$0(bin_reader_a[1], buf, pos_ref);
            },
            function(buf, pos_ref, vtag){
             return bin_read_needs_length(bin_reader_a[1], buf, pos_ref, vtag);
            }];
   }
   function bin_needs_length(bin_a){
    var
     _dx_ = bin_reader_needs_length(bin_a[3]),
     _dy_ = bin_writer_needs_length(bin_a[2]);
    return [0, bin_shape_needs_length(bin_a[1]), _dy_, _dx_];
   }
   function sexp_of_needs_length(of_a_072, param){
    var
     data_080 = param[4],
     id_078 = param[3],
     version_076 = param[2],
     tag_074 = param[1],
     arg_081 = caml_call1(of_a_072, data_080),
     bnds_073 = [0, [1, [0, _V_, [0, arg_081, 0]]], 0],
     arg_079 = caml_call1(Query_id[10], id_078),
     bnds_073$0 = [0, [1, [0, _W_, [0, arg_079, 0]]], bnds_073],
     arg_077 = caml_call1(Sexplib_Std[15], version_076),
     bnds_073$1 = [0, [1, [0, _X_, [0, arg_077, 0]]], bnds_073$0],
     arg_075 = caml_call1(Rpc_tag[10], tag_074),
     bnds_073$2 = [0, [1, [0, _Y_, [0, arg_075, 0]]], bnds_073$1];
    return [1, bnds_073$2];
   }
   var
    Expect_test_collector$3 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_protocol_ml$2 = cst_src_protocol_ml$14,
    _Z_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
       82,
       1954,
       1967,
       2005],
    ___ =
      [0,
       [0,
        [0, cst],
        [1, " be5888691d73427b3ac8ea300c169422 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
         82,
         1954,
         1960,
         1966],
        _Z_],
       0],
    _$_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
       80,
       1880,
       1882,
       2006],
    _aa_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_7ab56c19bd8e1a900a2e992a59$0);
   caml_call9
    (Expect_test_collector$3[3],
     _aa_,
     _$_,
     cst_src_protocol_ml$14,
     0,
     0,
     ___,
     0,
     Inline_test_config,
     function(param){
      var
       _dt_ = bin_shape_needs_length(Bin_prot_Std[44]),
       _du_ = caml_call1(Bin_prot_Shape[15], _dt_),
       _dv_ = caml_call1(Bin_shape[19][4], _du_);
      caml_call1(Stdlib[46], _dv_);
      var
       _dw_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$2),
          82,
          1954,
          1960,
          1966];
      return caml_call1(Expect_test_collector$3[1], _dw_);
     });
   function bin_read_t$5(of_a, buf, pos_ref, vint){
    return bin_read_needs_length(of_a, buf, pos_ref, vint);
   }
   function bin_read_t$6(of_a, buf, pos_ref){
    return bin_read_needs_length$0(of_a, buf, pos_ref);
   }
   function bin_reader_t$2(bin_reader_a){
    return [0,
            function(buf, pos_ref){
             var of_a = bin_reader_a[1];
             return bin_read_needs_length$0(of_a, buf, pos_ref);
            },
            function(buf, pos_ref, vtag){
             var of_a = bin_reader_a[1];
             return bin_read_needs_length(of_a, buf, pos_ref, vtag);
            }];
   }
   var
    Query_v1 =
      [0,
       bin_shape_needs_length,
       bin_size_needs_length,
       bin_write_needs_length,
       bin_writer_needs_length,
       bin_read_needs_length,
       bin_read_needs_length$0,
       bin_reader_needs_length,
       bin_needs_length,
       sexp_of_needs_length,
       bin_read_t$5,
       bin_read_t$6,
       bin_reader_t$2],
    _ab_ = caml_call1(Bin_shape[3][1], cst_a$2),
    _ac_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:94:13"),
    _ad_ = [0, [0, cst_data, caml_call2(Bin_prot_Shape[11], _ac_, _ab_)], 0],
    _ae_ =
      [0,
       [0, cst_metadata, caml_call1(Bin_prot_Std[142], Bin_prot_Std[58])],
       _ad_],
    _af_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0,
         [0, cst_tag, Rpc_tag[5]],
         [0,
          [0, cst_version, Bin_prot_Std[79]],
          [0, [0, cst_id, Query_id[5]], _ae_]]]),
    _ag_ = [0, caml_call1(Bin_shape[3][1], cst_a$2), 0],
    _ah_ =
      [0, [0, caml_call1(Bin_shape[2][1], cst_needs_length$7), _ag_, _af_], 0],
    _ai_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:89:2"),
    group$3 = caml_call2(Bin_prot_Shape[2], _ai_, _ah_),
    cst_needs_length$0 = cst_needs_length$7,
    cst_src_protocol_ml_Query_need = "src/protocol.ml.Query.needs_length",
    _aj_ = [0, cst_data],
    _ak_ = [0, cst_metadata],
    _al_ = [0, cst_id],
    _am_ = [0, cst_version],
    _an_ = [0, cst_tag];
   function bin_shape_needs_length$0(a){
    var _ds_ = caml_call1(Bin_shape[2][1], cst_needs_length$0);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$3, _ds_), [0, a, 0]);
   }
   function bin_size_needs_length$0(size_of_a, param){
    var
     v5 = param[5],
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _dn_ = caml_call1(Rpc_tag[1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _dn_),
     _do_ = caml_call1(Bin_prot_Std[6], v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _do_),
     _dp_ = caml_call1(Query_id[1], v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _dp_),
     _dq_ = caml_call2(Bin_prot_Std[15], Bin_prot_Std[3], v4),
     size$2 = caml_call2(Bin_prot_Common[23], size$1, _dq_),
     _dr_ = caml_call1(size_of_a, v5);
    return caml_call2(Bin_prot_Common[23], size$2, _dr_);
   }
   function bin_write_needs_length$0(write_a, buf, pos, param){
    var
     v5 = param[5],
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Rpc_tag[2], buf, pos, v1),
     pos$1 = caml_call3(Bin_prot_Std[81], buf, pos$0, v2),
     pos$2 = caml_call3(Query_id[2], buf, pos$1, v3),
     pos$3 = caml_call4(Bin_prot_Std[144], Bin_prot_Std[60], buf, pos$2, v4);
    return caml_call3(write_a, buf, pos$3, v5);
   }
   function bin_writer_needs_length$0(bin_writer_a){
    return [0,
            function(v){return bin_size_needs_length$0(bin_writer_a[1], v);},
            function(v){
             var _dk_ = bin_writer_a[2];
             return function(_dl_, _dm_){
              return bin_write_needs_length$0(_dk_, v, _dl_, _dm_);};
            }];
   }
   function bin_read_needs_length$1(of_a, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_protocol_ml_Query_need, pos_ref[1]);
   }
   function bin_read_needs_length$2(of_a, buf, pos_ref){
    var
     v_tag = caml_call2(Rpc_tag[3], buf, pos_ref),
     v_version = caml_call2(Bin_prot_Std[83], buf, pos_ref),
     v_id = caml_call2(Query_id[3], buf, pos_ref),
     v_metadata =
       caml_call2
        (caml_call1(Bin_prot_Std[146], Bin_prot_Std[62]), buf, pos_ref),
     v_data = caml_call2(of_a, buf, pos_ref);
    return [0, v_tag, v_version, v_id, v_metadata, v_data];
   }
   function bin_reader_needs_length$0(bin_reader_a){
    return [0,
            function(buf, pos_ref){
             return bin_read_needs_length$2(bin_reader_a[1], buf, pos_ref);
            },
            function(buf, pos_ref, vtag){
             return bin_read_needs_length$1
                     (bin_reader_a[1], buf, pos_ref, vtag);
            }];
   }
   function bin_needs_length$0(bin_a){
    var
     _di_ = bin_reader_needs_length$0(bin_a[3]),
     _dj_ = bin_writer_needs_length$0(bin_a[2]);
    return [0, bin_shape_needs_length$0(bin_a[1]), _dj_, _di_];
   }
   function sexp_of_needs_length$0(of_a_082, param){
    var
     data_092 = param[5],
     metadata_090 = param[4],
     id_088 = param[3],
     version_086 = param[2],
     tag_084 = param[1],
     arg_093 = caml_call1(of_a_082, data_092),
     bnds_083 = [0, [1, [0, _aj_, [0, arg_093, 0]]], 0],
     arg_091 = caml_call2(Sexplib_Std[36], Sexplib_Std[9], metadata_090),
     bnds_083$0 = [0, [1, [0, _ak_, [0, arg_091, 0]]], bnds_083],
     arg_089 = caml_call1(Query_id[10], id_088),
     bnds_083$1 = [0, [1, [0, _al_, [0, arg_089, 0]]], bnds_083$0],
     arg_087 = caml_call1(Sexplib_Std[15], version_086),
     bnds_083$2 = [0, [1, [0, _am_, [0, arg_087, 0]]], bnds_083$1],
     arg_085 = caml_call1(Rpc_tag[10], tag_084),
     bnds_083$3 = [0, [1, [0, _an_, [0, arg_085, 0]]], bnds_083$2];
    return [1, bnds_083$3];
   }
   var
    Expect_test_collector$4 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_protocol_ml$3 = cst_src_protocol_ml$14,
    _ao_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
       100,
       2340,
       2353,
       2391],
    _ap_ =
      [0,
       [0,
        [0, cst],
        [1, " ef70ea2dd0bb812a601d28810e6637d4 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
         100,
         2340,
         2346,
         2352],
        _ao_],
       0],
    _aq_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
       98,
       2266,
       2268,
       2392],
    _ar_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_7ab56c19bd8e1a900a2e992a59$0);
   caml_call9
    (Expect_test_collector$4[3],
     _ar_,
     _aq_,
     cst_src_protocol_ml$14,
     0,
     0,
     _ap_,
     0,
     Inline_test_config,
     function(param){
      var
       _de_ = bin_shape_needs_length$0(Bin_prot_Std[44]),
       _df_ = caml_call1(Bin_prot_Shape[15], _de_),
       _dg_ = caml_call1(Bin_shape[19][4], _df_);
      caml_call1(Stdlib[46], _dg_);
      var
       _dh_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$3),
          100,
          2340,
          2346,
          2352];
      return caml_call1(Expect_test_collector$4[1], _dh_);
     });
   function bin_read_t$7(of_a, buf, pos_ref, vint){
    return bin_read_needs_length$1(of_a, buf, pos_ref, vint);
   }
   function bin_read_t$8(of_a, buf, pos_ref){
    return bin_read_needs_length$2(of_a, buf, pos_ref);
   }
   function bin_reader_t$3(bin_reader_a){
    return [0,
            function(buf, pos_ref){
             var of_a = bin_reader_a[1];
             return bin_read_needs_length$2(of_a, buf, pos_ref);
            },
            function(buf, pos_ref, vtag){
             var of_a = bin_reader_a[1];
             return bin_read_needs_length$1(of_a, buf, pos_ref, vtag);
            }];
   }
   function to_v1(param){
    var data = param[5], id = param[3], version = param[2], tag = param[1];
    return [0, tag, version, id, data];
   }
   function of_v1(metadata, param){
    var data = param[4], id = param[3], version = param[2], tag = param[1];
    return [0, tag, version, id, metadata, data];
   }
   var
    Query =
      [0,
       bin_shape_needs_length$0,
       bin_size_needs_length$0,
       bin_write_needs_length$0,
       bin_writer_needs_length$0,
       bin_read_needs_length$1,
       bin_read_needs_length$2,
       bin_reader_needs_length$0,
       bin_needs_length$0,
       sexp_of_needs_length$0,
       bin_read_t$7,
       bin_read_t$8,
       bin_reader_t$3,
       to_v1,
       of_v1],
    _as_ = caml_call1(Bin_shape[3][1], cst_a$2),
    _at_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:117:13"),
    _au_ = caml_call2(Bin_prot_Shape[11], _at_, _as_),
    _av_ = [0, [0, cst_data, caml_call1(Rpc_result[1], _au_)], 0],
    _aw_ = caml_call1(Bin_prot_Shape[4], [0, [0, cst_id, Query_id[5]], _av_]),
    _ax_ = [0, caml_call1(Bin_shape[3][1], cst_a$2), 0],
    _ay_ =
      [0, [0, caml_call1(Bin_shape[2][1], cst_needs_length$7), _ax_, _aw_], 0],
    _az_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:115:2"),
    group$4 = caml_call2(Bin_prot_Shape[2], _az_, _ay_),
    cst_needs_length$1 = cst_needs_length$7,
    cst_src_protocol_ml_Response_n = "src/protocol.ml.Response.needs_length",
    _aA_ = [0, cst_data],
    _aB_ = [0, cst_id];
   function bin_shape_needs_length$1(a){
    var _dd_ = caml_call1(Bin_shape[2][1], cst_needs_length$1);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$4, _dd_), [0, a, 0]);
   }
   function bin_size_needs_length$1(size_of_a, param){
    var
     v2 = param[2],
     v1 = param[1],
     _db_ = caml_call1(Query_id[1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _db_),
     _dc_ = caml_call2(Rpc_result[2], size_of_a, v2);
    return caml_call2(Bin_prot_Common[23], size, _dc_);
   }
   function bin_write_needs_length$1(write_a, buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Query_id[2], buf, pos, v1);
    return caml_call4(Rpc_result[3], write_a, buf, pos$0, v2);
   }
   function bin_writer_needs_length$1(bin_writer_a){
    return [0,
            function(v){return bin_size_needs_length$1(bin_writer_a[1], v);},
            function(v){
             var _c__ = bin_writer_a[2];
             return function(_c$_, _da_){
              return bin_write_needs_length$1(_c__, v, _c$_, _da_);};
            }];
   }
   function bin_read_needs_length$3(of_a, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_protocol_ml_Response_n, pos_ref[1]);
   }
   function bin_read_needs_length$4(of_a, buf, pos_ref){
    var
     v_id = caml_call2(Query_id[3], buf, pos_ref),
     v_data = caml_call2(caml_call1(Rpc_result[6], of_a), buf, pos_ref);
    return [0, v_id, v_data];
   }
   function bin_reader_needs_length$1(bin_reader_a){
    return [0,
            function(buf, pos_ref){
             return bin_read_needs_length$4(bin_reader_a[1], buf, pos_ref);
            },
            function(buf, pos_ref, vtag){
             return bin_read_needs_length$3
                     (bin_reader_a[1], buf, pos_ref, vtag);
            }];
   }
   function bin_needs_length$1(bin_a){
    var
     _c8_ = bin_reader_needs_length$1(bin_a[3]),
     _c9_ = bin_writer_needs_length$1(bin_a[2]);
    return [0, bin_shape_needs_length$1(bin_a[1]), _c9_, _c8_];
   }
   function sexp_of_needs_length$1(of_a_094, param){
    var
     data_098 = param[2],
     id_096 = param[1],
     arg_099 = caml_call2(Rpc_result[9], of_a_094, data_098),
     bnds_095 = [0, [1, [0, _aA_, [0, arg_099, 0]]], 0],
     arg_097 = caml_call1(Query_id[10], id_096),
     bnds_095$0 = [0, [1, [0, _aB_, [0, arg_097, 0]]], bnds_095];
    return [1, bnds_095$0];
   }
   var
    Expect_test_collector$5 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_protocol_ml$4 = cst_src_protocol_ml$14,
    _aC_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
       123,
       2901,
       2914,
       2952],
    _aD_ =
      [0,
       [0,
        [0, cst],
        [1, " a22a76f192b3a4ec1c37117c6bb252f5 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
         123,
         2901,
         2907,
         2913],
        _aC_],
       0],
    _aE_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
       121,
       2827,
       2829,
       2953],
    _aF_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_7ab56c19bd8e1a900a2e992a59$0);
   caml_call9
    (Expect_test_collector$5[3],
     _aF_,
     _aE_,
     cst_src_protocol_ml$14,
     0,
     0,
     _aD_,
     0,
     Inline_test_config,
     function(param){
      var
       _c4_ = bin_shape_needs_length$1(Bin_prot_Std[44]),
       _c5_ = caml_call1(Bin_prot_Shape[15], _c4_),
       _c6_ = caml_call1(Bin_shape[19][4], _c5_);
      caml_call1(Stdlib[46], _c6_);
      var
       _c7_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$4),
          123,
          2901,
          2907,
          2913];
      return caml_call1(Expect_test_collector$5[1], _c7_);
     });
   function bin_read_t$9(of_a, buf, pos_ref, vint){
    return bin_read_needs_length$3(of_a, buf, pos_ref, vint);
   }
   function bin_read_t$10(of_a, buf, pos_ref){
    return bin_read_needs_length$4(of_a, buf, pos_ref);
   }
   function bin_reader_t$4(bin_reader_a){
    return [0,
            function(buf, pos_ref){
             var of_a = bin_reader_a[1];
             return bin_read_needs_length$4(of_a, buf, pos_ref);
            },
            function(buf, pos_ref, vtag){
             var of_a = bin_reader_a[1];
             return bin_read_needs_length$3(of_a, buf, pos_ref, vtag);
            }];
   }
   var
    Response =
      [0,
       bin_shape_needs_length$1,
       bin_size_needs_length$1,
       bin_write_needs_length$1,
       bin_writer_needs_length$1,
       bin_read_needs_length$3,
       bin_read_needs_length$4,
       bin_reader_needs_length$1,
       bin_needs_length$1,
       sexp_of_needs_length$1,
       bin_read_t$9,
       bin_read_t$10,
       bin_reader_t$4],
    _aG_ = [0, caml_call2(Bin_prot_Shape[6], "Abort", 0), 0],
    _aH_ = caml_call1(Bin_shape[3][1], cst_a$2),
    _aI_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:131:16"),
    _aJ_ = [0, caml_call2(Bin_prot_Shape[11], _aI_, _aH_)],
    _aK_ = [0, caml_call2(Bin_prot_Shape[6], cst_Query$0, _aJ_), _aG_],
    _aL_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:131:4"),
    _aM_ = caml_call2(Bin_prot_Shape[8], _aL_, _aK_),
    _aN_ = [0, caml_call1(Bin_shape[3][1], cst_a$2), 0],
    _aO_ =
      [0, [0, caml_call1(Bin_shape[2][1], cst_needs_length$7), _aN_, _aM_], 0],
    _aP_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:130:2"),
    group$5 = caml_call2(Bin_prot_Shape[2], _aP_, _aO_),
    cst_needs_length$2 = cst_needs_length$7;
   function bin_shape_needs_length$2(a){
    var _c3_ = caml_call1(Bin_shape[2][1], cst_needs_length$2);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$5, _c3_), [0, a, 0]);
   }
   function bin_size_needs_length$2(size_of_a, param){
    if(typeof param !== "number" && -250086680 === param[1]){
     var args = param[2], size_args = caml_call1(size_of_a, args);
     return caml_call2(Bin_prot_Common[23], size_args, 4);
    }
    return 4;
   }
   function bin_write_needs_length$2(write_a, buf, pos, param){
    if(typeof param === "number")
     return caml_call3(Bin_prot_Write[29], buf, pos, 774323088);
    var
     args = param[2],
     pos$0 = caml_call3(Bin_prot_Write[29], buf, pos, -250086680);
    return caml_call3(write_a, buf, pos$0, args);
   }
   function bin_writer_needs_length$2(bin_writer_a){
    return [0,
            function(v){return bin_size_needs_length$2(bin_writer_a[1], v);},
            function(v){
             var _c0_ = bin_writer_a[2];
             return function(_c1_, _c2_){
              return bin_write_needs_length$2(_c0_, v, _c1_, _c2_);};
            }];
   }
   function bin_read_needs_length$5(of_a, buf, pos_ref, vint){
    if(-250086680 === vint){
     var arg_1 = caml_call2(of_a, buf, pos_ref);
     return [0, -250086680, arg_1];
    }
    if(774323088 === vint) return 774323088;
    throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 1);
   }
   function bin_read_needs_length$6(of_a, buf, pos_ref){
    var vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
    try{
     var _cY_ = bin_read_needs_length$5(of_a, buf, pos_ref, vint);
     return _cY_;
    }
    catch(_cZ_){
     var _cX_ = caml_wrap_exception(_cZ_);
     if(_cX_ === Bin_prot_Common[13])
      return caml_call2(Bin_prot_Common[18], err, pos_ref[1]);
     throw caml_maybe_attach_backtrace(_cX_, 0);
    }
   }
   function bin_reader_needs_length$2(bin_reader_a){
    return [0,
            function(buf, pos_ref){
             return bin_read_needs_length$6(bin_reader_a[1], buf, pos_ref);
            },
            function(buf, pos_ref, vtag){
             return bin_read_needs_length$5
                     (bin_reader_a[1], buf, pos_ref, vtag);
            }];
   }
   function bin_needs_length$2(bin_a){
    var
     _cV_ = bin_reader_needs_length$2(bin_a[3]),
     _cW_ = bin_writer_needs_length$2(bin_a[2]);
    return [0, bin_shape_needs_length$2(bin_a[1]), _cW_, _cV_];
   }
   var
    Expect_test_collector$6 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_protocol_ml$5 = cst_src_protocol_ml$14,
    _aQ_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
       138,
       3206,
       3219,
       3257],
    _aR_ =
      [0,
       [0,
        [0, cst],
        [1, " 2c37868761971c78cc355d43f0854860 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
         138,
         3206,
         3212,
         3218],
        _aQ_],
       0],
    _aS_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
       136,
       3132,
       3134,
       3258],
    _aT_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_7ab56c19bd8e1a900a2e992a59$0);
   caml_call9
    (Expect_test_collector$6[3],
     _aT_,
     _aS_,
     cst_src_protocol_ml$14,
     0,
     0,
     _aR_,
     0,
     Inline_test_config,
     function(param){
      var
       _cR_ = bin_shape_needs_length$2(Bin_prot_Std[44]),
       _cS_ = caml_call1(Bin_prot_Shape[15], _cR_),
       _cT_ = caml_call1(Bin_shape[19][4], _cS_);
      caml_call1(Stdlib[46], _cT_);
      var
       _cU_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$5),
          138,
          3206,
          3212,
          3218];
      return caml_call1(Expect_test_collector$6[1], _cU_);
     });
   function bin_read_t$11(of_a, buf, pos_ref, vint){
    return bin_read_needs_length$5(of_a, buf, pos_ref, vint);
   }
   function bin_read_t$12(of_a, buf, pos_ref){
    return bin_read_needs_length$6(of_a, buf, pos_ref);
   }
   function bin_reader_t$5(bin_reader_a){
    return [0,
            function(buf, pos_ref){
             var of_a = bin_reader_a[1];
             return bin_read_needs_length$6(of_a, buf, pos_ref);
            },
            function(buf, pos_ref, vtag){
             var of_a = bin_reader_a[1];
             return bin_read_needs_length$5(of_a, buf, pos_ref, vtag);
            }];
   }
   function bin_read_nat0_t(buf, pos_ref, vint){
    return bin_read_needs_length$5
            (Async_rpc_kernel_Nat0[3], buf, pos_ref, vint);
   }
   function bin_read_nat0_t$0(buf, pos_ref){
    return bin_read_needs_length$6(Async_rpc_kernel_Nat0[3], buf, pos_ref);
   }
   var bin_reader_nat0_t = [0, bin_read_nat0_t$0, bin_read_nat0_t];
   function bin_size_nat0_t(v){
    return bin_size_needs_length$2(Async_rpc_kernel_Nat0[1], v);
   }
   function bin_write_nat0_t(buf, pos, v){
    return bin_write_needs_length$2(Async_rpc_kernel_Nat0[2], buf, pos, v);
   }
   var
    bin_writer_nat0_t = [0, bin_size_nat0_t, bin_write_nat0_t],
    Stream_query =
      [0,
       bin_shape_needs_length$2,
       bin_size_needs_length$2,
       bin_write_needs_length$2,
       bin_writer_needs_length$2,
       bin_read_needs_length$5,
       bin_read_needs_length$6,
       bin_reader_needs_length$2,
       bin_needs_length$2,
       bin_read_t$11,
       bin_read_t$12,
       bin_reader_t$5,
       bin_read_nat0_t,
       bin_read_nat0_t$0,
       bin_reader_nat0_t,
       bin_size_nat0_t,
       bin_write_nat0_t,
       bin_writer_nat0_t],
    _aU_ = caml_call1(Bin_shape[3][1], cst_error),
    _aV_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:148:28"),
    _aW_ = caml_call2(Bin_prot_Shape[11], _aV_, _aU_),
    _aX_ = caml_call1(Bin_shape[3][1], cst_response),
    _aY_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:148:17"),
    _aZ_ = caml_call2(Bin_prot_Shape[11], _aY_, _aX_),
    _a0_ =
      [0,
       [0, cst_initial, caml_call1(caml_call1(Core_Result[1], _aZ_), _aW_)],
       0],
    _a1_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0, [0, cst_unused_query_id, Unused_query_id[5]], _a0_]),
    _a2_ = [0, caml_call1(Bin_shape[3][1], cst_error), 0],
    _a3_ = [0, caml_call1(Bin_shape[3][1], cst_response), _a2_],
    _a4_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), _a3_, _a1_], 0],
    _a5_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:146:2"),
    group$6 = caml_call2(Bin_prot_Shape[2], _a5_, _a4_),
    cst_t$0 = cst_t$1,
    cst_src_protocol_ml_Stream_ini =
      "src/protocol.ml.Stream_initial_message.t",
    _a6_ = [0, cst_initial],
    _a7_ = [0, cst_unused_query_id];
   function bin_shape_t$2(response, error){
    var _cQ_ = caml_call1(Bin_shape[2][1], cst_t$0);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$6, _cQ_),
             [0, response, [0, error, 0]]);
   }
   function bin_size_t$2(size_of_response, size_of_error, param){
    var
     v2 = param[2],
     v1 = param[1],
     _cO_ = caml_call1(Unused_query_id[1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _cO_),
     _cP_ = caml_call3(Core_Result[2], size_of_response, size_of_error, v2);
    return caml_call2(Bin_prot_Common[23], size, _cP_);
   }
   function bin_write_t$2(write_response, write_error, buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Unused_query_id[2], buf, pos, v1);
    return caml_call5
            (Core_Result[3], write_response, write_error, buf, pos$0, v2);
   }
   function bin_writer_t$2(bin_writer_response, bin_writer_error){
    return [0,
            function(v){
             return bin_size_t$2
                     (bin_writer_response[1], bin_writer_error[1], v);
            },
            function(v){
             var _cK_ = bin_writer_error[2], _cL_ = bin_writer_response[2];
             return function(_cM_, _cN_){
              return bin_write_t$2(_cL_, _cK_, v, _cM_, _cN_);};
            }];
   }
   function bin_read_t$13(of_response, of_error, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_protocol_ml_Stream_ini, pos_ref[1]);
   }
   function bin_read_t$14(of_response, of_error, buf, pos_ref){
    var
     v_unused_query_id = caml_call2(Unused_query_id[3], buf, pos_ref),
     v_initial =
       caml_call2
        (caml_call2(Core_Result[4], of_response, of_error), buf, pos_ref);
    return [0, v_unused_query_id, v_initial];
   }
   function bin_reader_t$6(bin_reader_response, bin_reader_error){
    return [0,
            function(buf, pos_ref){
             return bin_read_t$14
                     (bin_reader_response[1], bin_reader_error[1], buf, pos_ref);
            },
            function(buf, pos_ref, vtag){
             return bin_read_t$13
                     (bin_reader_response[1],
                      bin_reader_error[1],
                      buf,
                      pos_ref,
                      vtag);
            }];
   }
   function bin_t$2(bin_response, bin_error){
    var
     _cI_ = bin_reader_t$6(bin_response[3], bin_error[3]),
     _cJ_ = bin_writer_t$2(bin_response[2], bin_error[2]);
    return [0, bin_shape_t$2(bin_response[1], bin_error[1]), _cJ_, _cI_];
   }
   function sexp_of_t$2(of_response_100, of_error_101, param){
    var
     initial_105 = param[2],
     unused_query_id_103 = param[1],
     arg_106 =
       caml_call3(Core_Result[10], of_response_100, of_error_101, initial_105),
     bnds_102 = [0, [1, [0, _a6_, [0, arg_106, 0]]], 0],
     arg_104 = caml_call1(Unused_query_id[9], unused_query_id_103),
     bnds_102$0 = [0, [1, [0, _a7_, [0, arg_104, 0]]], bnds_102];
    return [1, bnds_102$0];
   }
   var
    Expect_test_collector$7 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_protocol_ml$6 = cst_src_protocol_ml$14,
    _a8_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
       154,
       3662,
       3675,
       3713],
    _a9_ =
      [0,
       [0,
        [0, cst],
        [1, " 46f231ddb7fa59da9c27759d50ae01a9 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
         154,
         3662,
         3668,
         3674],
        _a8_],
       0],
    _a__ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
       152,
       3591,
       3593,
       3714],
    _a$_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_7ab56c19bd8e1a900a2e992a59$0);
   caml_call9
    (Expect_test_collector$7[3],
     _a$_,
     _a__,
     cst_src_protocol_ml$14,
     0,
     0,
     _a9_,
     0,
     Inline_test_config,
     function(param){
      var
       _cH_ = bin_shape_t$2(Bin_prot_Std[44], Bin_prot_Std[44]),
       _cE_ = caml_call1(Bin_prot_Shape[15], _cH_),
       _cF_ = caml_call1(Bin_shape[19][4], _cE_);
      caml_call1(Stdlib[46], _cF_);
      var
       _cG_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$6),
          154,
          3662,
          3668,
          3674];
      return caml_call1(Expect_test_collector$7[1], _cG_);
     });
   var
    Stream_initial_message =
      [0,
       bin_shape_t$2,
       bin_size_t$2,
       bin_write_t$2,
       bin_writer_t$2,
       bin_read_t$13,
       bin_read_t$14,
       bin_reader_t$6,
       bin_t$2,
       sexp_of_t$2],
    _ba_ = [0, caml_call2(Bin_prot_Shape[6], "Eof", 0), 0],
    _bb_ = caml_call1(Bin_shape[3][1], cst_a$2),
    _bc_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:160:13"),
    _bd_ = [0, caml_call2(Bin_prot_Shape[11], _bc_, _bb_)],
    _be_ = [0, caml_call2(Bin_prot_Shape[6], "Ok", _bd_), _ba_],
    _bf_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:160:4"),
    _bg_ = caml_call2(Bin_prot_Shape[8], _bf_, _be_),
    _bh_ = [0, caml_call1(Bin_shape[3][1], cst_a$2), 0],
    _bi_ =
      [0, [0, caml_call1(Bin_shape[2][1], cst_needs_length$7), _bh_, _bg_], 0],
    _bj_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:159:2"),
    group$7 = caml_call2(Bin_prot_Shape[2], _bj_, _bi_),
    cst_needs_length$3 = cst_needs_length$7;
   function bin_shape_needs_length$3(a){
    var _cD_ = caml_call1(Bin_shape[2][1], cst_needs_length$3);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$7, _cD_), [0, a, 0]);
   }
   function bin_size_needs_length$3(size_of_a, param){
    if(typeof param !== "number" && 17724 === param[1]){
     var args = param[2], size_args = caml_call1(size_of_a, args);
     return caml_call2(Bin_prot_Common[23], size_args, 4);
    }
    return 4;
   }
   function bin_write_needs_length$3(write_a, buf, pos, param){
    if(typeof param === "number")
     return caml_call3(Bin_prot_Write[29], buf, pos, 3456156);
    var
     args = param[2],
     pos$0 = caml_call3(Bin_prot_Write[29], buf, pos, 17724);
    return caml_call3(write_a, buf, pos$0, args);
   }
   function bin_writer_needs_length$3(bin_writer_a){
    return [0,
            function(v){return bin_size_needs_length$3(bin_writer_a[1], v);},
            function(v){
             var _cA_ = bin_writer_a[2];
             return function(_cB_, _cC_){
              return bin_write_needs_length$3(_cA_, v, _cB_, _cC_);};
            }];
   }
   function bin_read_needs_length$7(of_a, buf, pos_ref, vint){
    if(17724 === vint){
     var arg_1 = caml_call2(of_a, buf, pos_ref);
     return [0, 17724, arg_1];
    }
    if(3456156 === vint) return 3456156;
    throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 1);
   }
   function bin_read_needs_length$8(of_a, buf, pos_ref){
    var vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
    try{
     var _cy_ = bin_read_needs_length$7(of_a, buf, pos_ref, vint);
     return _cy_;
    }
    catch(_cz_){
     var _cx_ = caml_wrap_exception(_cz_);
     if(_cx_ === Bin_prot_Common[13])
      return caml_call2(Bin_prot_Common[18], err$0, pos_ref[1]);
     throw caml_maybe_attach_backtrace(_cx_, 0);
    }
   }
   function bin_reader_needs_length$3(bin_reader_a){
    return [0,
            function(buf, pos_ref){
             return bin_read_needs_length$8(bin_reader_a[1], buf, pos_ref);
            },
            function(buf, pos_ref, vtag){
             return bin_read_needs_length$7
                     (bin_reader_a[1], buf, pos_ref, vtag);
            }];
   }
   function bin_needs_length$3(bin_a){
    var
     _cv_ = bin_reader_needs_length$3(bin_a[3]),
     _cw_ = bin_writer_needs_length$3(bin_a[2]);
    return [0, bin_shape_needs_length$3(bin_a[1]), _cw_, _cv_];
   }
   var
    Expect_test_collector$8 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_protocol_ml$7 = cst_src_protocol_ml$14,
    _bk_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
       167,
       3917,
       3930,
       3968],
    _bl_ =
      [0,
       [0,
        [0, cst],
        [1, " c1dbcdcfe2b12e797ec64f0d74df1811 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
         167,
         3917,
         3923,
         3929],
        _bk_],
       0],
    _bm_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
       165,
       3843,
       3845,
       3969],
    _bn_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_7ab56c19bd8e1a900a2e992a59$0);
   caml_call9
    (Expect_test_collector$8[3],
     _bn_,
     _bm_,
     cst_src_protocol_ml$14,
     0,
     0,
     _bl_,
     0,
     Inline_test_config,
     function(param){
      var
       _cr_ = bin_shape_needs_length$3(Bin_prot_Std[44]),
       _cs_ = caml_call1(Bin_prot_Shape[15], _cr_),
       _ct_ = caml_call1(Bin_shape[19][4], _cs_);
      caml_call1(Stdlib[46], _ct_);
      var
       _cu_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$7),
          167,
          3917,
          3923,
          3929];
      return caml_call1(Expect_test_collector$8[1], _cu_);
     });
   function bin_read_t$15(of_a, buf, pos_ref, vint){
    return bin_read_needs_length$7(of_a, buf, pos_ref, vint);
   }
   function bin_read_t$16(of_a, buf, pos_ref){
    return bin_read_needs_length$8(of_a, buf, pos_ref);
   }
   function bin_reader_t$7(bin_reader_a){
    return [0,
            function(buf, pos_ref){
             var of_a = bin_reader_a[1];
             return bin_read_needs_length$8(of_a, buf, pos_ref);
            },
            function(buf, pos_ref, vtag){
             var of_a = bin_reader_a[1];
             return bin_read_needs_length$7(of_a, buf, pos_ref, vtag);
            }];
   }
   function bin_read_nat0_t$1(buf, pos_ref, vint){
    return bin_read_needs_length$7
            (Async_rpc_kernel_Nat0[3], buf, pos_ref, vint);
   }
   function bin_read_nat0_t$2(buf, pos_ref){
    return bin_read_needs_length$8(Async_rpc_kernel_Nat0[3], buf, pos_ref);
   }
   var bin_reader_nat0_t$0 = [0, bin_read_nat0_t$2, bin_read_nat0_t$1];
   function bin_size_nat0_t$0(v){
    return bin_size_needs_length$3(Async_rpc_kernel_Nat0[1], v);
   }
   function bin_write_nat0_t$0(buf, pos, v){
    return bin_write_needs_length$3(Async_rpc_kernel_Nat0[2], buf, pos, v);
   }
   var
    bin_writer_nat0_t$0 = [0, bin_size_nat0_t$0, bin_write_nat0_t$0],
    Stream_response_data =
      [0,
       bin_shape_needs_length$3,
       bin_size_needs_length$3,
       bin_write_needs_length$3,
       bin_writer_needs_length$3,
       bin_read_needs_length$7,
       bin_read_needs_length$8,
       bin_reader_needs_length$3,
       bin_needs_length$3,
       bin_read_t$15,
       bin_read_t$16,
       bin_reader_t$7,
       bin_read_nat0_t$1,
       bin_read_nat0_t$2,
       bin_reader_nat0_t$0,
       bin_size_nat0_t$0,
       bin_write_nat0_t$0,
       bin_writer_nat0_t$0],
    _bo_ = caml_call1(Bin_shape[3][1], cst_a$2),
    _bp_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:179:15"),
    _bq_ = caml_call2(Bin_prot_Shape[11], _bp_, _bo_),
    _br_ = [0, [0, cst_Query$0, [0, caml_call1(Query[1], _bq_), 0]], 0],
    _bs_ = caml_call1(Bin_shape[3][1], cst_a$2),
    _bt_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:178:18"),
    _bu_ = caml_call2(Bin_prot_Shape[11], _bt_, _bs_),
    _bv_ =
      [0, [0, cst_Response$0, [0, caml_call1(Response[1], _bu_), 0]], _br_],
    _bw_ = caml_call1(Bin_shape[3][1], cst_a$2),
    _bx_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:177:18"),
    _by_ = caml_call2(Bin_prot_Shape[11], _bx_, _bw_),
    _bz_ =
      [0,
       [0, cst_Heartbeat, 0],
       [0, [0, cst_Query_v1, [0, caml_call1(Query_v1[1], _by_), 0]], _bv_]],
    _bA_ = caml_call1(Bin_prot_Shape[5], _bz_),
    _bB_ = [0, caml_call1(Bin_shape[3][1], cst_a$2), 0],
    _bC_ =
      [0, [0, caml_call1(Bin_shape[2][1], cst_needs_length$7), _bB_, _bA_], 0],
    _bD_ = caml_call1(Bin_shape[4][1], "src/protocol.ml:175:2"),
    group$8 = caml_call2(Bin_prot_Shape[2], _bD_, _bC_),
    cst_needs_length$4 = cst_needs_length$7,
    cst_src_protocol_ml_Message_ne = cst_src_protocol_ml_Message_ne$0,
    _bE_ = [1, cst_src_protocol_ml_Message_ne$0],
    _bF_ = [0, cst_Heartbeat],
    _bG_ = [0, cst_Query_v1],
    _bH_ = [0, cst_Response$0],
    _bI_ = [0, cst_Query$0];
   function bin_shape_needs_length$4(a){
    var _cq_ = caml_call1(Bin_shape[2][1], cst_needs_length$4);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$8, _cq_), [0, a, 0]);
   }
   function bin_size_needs_length$4(size_of_a, param){
    if(typeof param === "number") return 1;
    switch(param[0]){
      case 0:
       var v1 = param[1], _cn_ = caml_call2(Query_v1[2], size_of_a, v1);
       return caml_call2(Bin_prot_Common[23], 1, _cn_);
      case 1:
       var v1$0 = param[1], _co_ = caml_call2(Response[2], size_of_a, v1$0);
       return caml_call2(Bin_prot_Common[23], 1, _co_);
      default:
       var v1$1 = param[1], _cp_ = caml_call2(Query[2], size_of_a, v1$1);
       return caml_call2(Bin_prot_Common[23], 1, _cp_);
    }
   }
   function bin_write_needs_length$4(write_a, buf, pos, param){
    if(typeof param === "number")
     return caml_call3(Bin_prot_Write[30], buf, pos, 0);
    switch(param[0]){
      case 0:
       var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
       return caml_call4(Query_v1[3], write_a, buf, pos$0, v1);
      case 1:
       var
        v1$0 = param[1],
        pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
       return caml_call4(Response[3], write_a, buf, pos$1, v1$0);
      default:
       var
        v1$1 = param[1],
        pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
       return caml_call4(Query[3], write_a, buf, pos$2, v1$1);
    }
   }
   function bin_writer_needs_length$4(bin_writer_a){
    return [0,
            function(v){return bin_size_needs_length$4(bin_writer_a[1], v);},
            function(v){
             var _ck_ = bin_writer_a[2];
             return function(_cl_, _cm_){
              return bin_write_needs_length$4(_ck_, v, _cl_, _cm_);};
            }];
   }
   function bin_read_needs_length$9(of_a, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_protocol_ml_Message_ne, pos_ref[1]);
   }
   function bin_read_needs_length$10(of_a, buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(3 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _bE_, pos_ref[1]);
    switch(match){
      case 0:
       return 0;
      case 1:
       var arg_1 = caml_call2(caml_call1(Query_v1[6], of_a), buf, pos_ref);
       return [0, arg_1];
      case 2:
       var arg_1$0 = caml_call2(caml_call1(Response[6], of_a), buf, pos_ref);
       return [1, arg_1$0];
      default:
       var arg_1$1 = caml_call2(caml_call1(Query[6], of_a), buf, pos_ref);
       return [2, arg_1$1];
    }
   }
   function bin_reader_needs_length$4(bin_reader_a){
    return [0,
            function(buf, pos_ref){
             return bin_read_needs_length$10(bin_reader_a[1], buf, pos_ref);
            },
            function(buf, pos_ref, vtag){
             return bin_read_needs_length$9
                     (bin_reader_a[1], buf, pos_ref, vtag);
            }];
   }
   function bin_needs_length$4(bin_a){
    var
     _ci_ = bin_reader_needs_length$4(bin_a[3]),
     _cj_ = bin_writer_needs_length$4(bin_a[2]);
    return [0, bin_shape_needs_length$4(bin_a[1]), _cj_, _ci_];
   }
   function sexp_of_needs_length$2(of_a_107, param){
    if(typeof param === "number") return _bF_;
    switch(param[0]){
      case 0:
       var
        arg0_108 = param[1],
        res0_109 = caml_call2(Query_v1[9], of_a_107, arg0_108);
       return [1, [0, _bG_, [0, res0_109, 0]]];
      case 1:
       var
        arg0_110 = param[1],
        res0_111 = caml_call2(Response[9], of_a_107, arg0_110);
       return [1, [0, _bH_, [0, res0_111, 0]]];
      default:
       var
        arg0_112 = param[1],
        res0_113 = caml_call2(Query[9], of_a_107, arg0_112);
       return [1, [0, _bI_, [0, res0_113, 0]]];
    }
   }
   var
    Expect_test_collector$9 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_protocol_ml$8 = cst_src_protocol_ml$14,
    _bJ_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
       184,
       4396,
       4409,
       4447],
    _bK_ =
      [0,
       [0,
        [0, cst],
        [1, " f60ce2d104e2f0d9271f622ecd97cea8 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
         184,
         4396,
         4402,
         4408],
        _bJ_],
       0],
    _bL_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$14),
       182,
       4322,
       4324,
       4448],
    _bM_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_7ab56c19bd8e1a900a2e992a59$0);
   caml_call9
    (Expect_test_collector$9[3],
     _bM_,
     _bL_,
     cst_src_protocol_ml$14,
     0,
     0,
     _bK_,
     0,
     Inline_test_config,
     function(param){
      var
       _ce_ = bin_shape_needs_length$4(Bin_prot_Std[44]),
       _cf_ = caml_call1(Bin_prot_Shape[15], _ce_),
       _cg_ = caml_call1(Bin_shape[19][4], _cf_);
      caml_call1(Stdlib[46], _cg_);
      var
       _ch_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$8),
          184,
          4396,
          4402,
          4408];
      return caml_call1(Expect_test_collector$9[1], _ch_);
     });
   function bin_read_t$17(of_a, buf, pos_ref, vint){
    return bin_read_needs_length$9(of_a, buf, pos_ref, vint);
   }
   function bin_read_t$18(of_a, buf, pos_ref){
    return bin_read_needs_length$10(of_a, buf, pos_ref);
   }
   function bin_reader_t$8(bin_reader_a){
    return [0,
            function(buf, pos_ref){
             var of_a = bin_reader_a[1];
             return bin_read_needs_length$10(of_a, buf, pos_ref);
            },
            function(buf, pos_ref, vtag){
             var of_a = bin_reader_a[1];
             return bin_read_needs_length$9(of_a, buf, pos_ref, vtag);
            }];
   }
   function bin_read_nat0_t$3(buf, pos_ref, vint){
    return bin_read_needs_length$9
            (Async_rpc_kernel_Nat0[3], buf, pos_ref, vint);
   }
   function bin_read_nat0_t$4(buf, pos_ref){
    return bin_read_needs_length$10(Async_rpc_kernel_Nat0[3], buf, pos_ref);
   }
   var bin_reader_nat0_t$1 = [0, bin_read_nat0_t$4, bin_read_nat0_t$3];
   function bin_size_nat0_t$1(v){
    return bin_size_needs_length$4(Async_rpc_kernel_Nat0[1], v);
   }
   function bin_write_nat0_t$1(buf, pos, v){
    return bin_write_needs_length$4(Async_rpc_kernel_Nat0[2], buf, pos, v);
   }
   var
    bin_writer_nat0_t$1 = [0, bin_size_nat0_t$1, bin_write_nat0_t$1],
    Message =
      [0,
       bin_shape_needs_length$4,
       bin_size_needs_length$4,
       bin_write_needs_length$4,
       bin_writer_needs_length$4,
       bin_read_needs_length$9,
       bin_read_needs_length$10,
       bin_reader_needs_length$4,
       bin_needs_length$4,
       sexp_of_needs_length$2,
       bin_read_t$17,
       bin_read_t$18,
       bin_reader_t$8,
       sexp_of_needs_length$2,
       bin_read_nat0_t$3,
       bin_read_nat0_t$4,
       bin_reader_nat0_t$1,
       bin_size_nat0_t$1,
       bin_write_nat0_t$1,
       bin_writer_nat0_t$1],
    cst_a = cst_a$2,
    cst_src_protocol_ml_196_20 = "src/protocol.ml:196:20",
    cst_Response = cst_Response$0,
    cst_a$0 = cst_a$2,
    cst_src_protocol_ml_195_17 = "src/protocol.ml:195:17",
    cst_Query = cst_Query$0,
    _bN_ = [0, cst_Heartbeat, 0],
    cst_a$1 = cst_a$2,
    cst_needs_length$5 = cst_needs_length$7,
    cst_src_protocol_ml_193_4 = "src/protocol.ml:193:4",
    cst_needs_length$6 = cst_needs_length$7,
    cst_src_protocol_ml$9 = cst_src_protocol_ml$14,
    cst_src_protocol_ml$10 = cst_src_protocol_ml$14,
    cst_src_protocol_ml$11 = cst_src_protocol_ml$14,
    _bO_ = [1, " 14965b0db9844e6b376151dd890808e8 "],
    _bP_ = [0, cst],
    cst_src_protocol_ml$12 = cst_src_protocol_ml$14,
    cst_src_protocol_ml$13 = cst_src_protocol_ml$14,
    cst_7ab56c19bd8e1a900a2e992a59 = cst_7ab56c19bd8e1a900a2e992a59$0,
    cst_rpc = "rpc",
    _bQ_ = [0, 0];
   caml_call8
    (Ppx_inline_test_lib[7],
     Inline_test_config,
     "v1 message compatibility",
     0,
     cst_src_protocol_ml$14,
     191,
     0,
     1038,
     function(param){
      var
       _bR_ = caml_call1(Bin_shape[3][1], cst_a),
       _bS_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_196_20),
       _bT_ = caml_call2(Bin_prot_Shape[11], _bS_, _bR_),
       _bU_ = [0, [0, cst_Response, [0, caml_call1(Response[1], _bT_), 0]], 0],
       _bV_ = caml_call1(Bin_shape[3][1], cst_a$0),
       _bW_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_195_17),
       _bX_ = caml_call2(Bin_prot_Shape[11], _bW_, _bV_),
       _bY_ =
         [0,
          _bN_,
          [0, [0, cst_Query, [0, caml_call1(Query_v1[1], _bX_), 0]], _bU_]],
       _bZ_ = caml_call1(Bin_prot_Shape[5], _bY_),
       _b0_ = [0, caml_call1(Bin_shape[3][1], cst_a$1), 0],
       _b1_ =
         [0,
          [0, caml_call1(Bin_shape[2][1], cst_needs_length$5), _b0_, _bZ_],
          0],
       _b2_ = caml_call1(Bin_shape[4][1], cst_src_protocol_ml_193_4),
       group = caml_call2(Bin_prot_Shape[2], _b2_, _b1_),
       Expect_test_collector$0 =
         caml_call1(Expect_test_collector[2], Expect_test_config),
       _b3_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$10),
          201,
          4905,
          4920,
          4958],
       _b4_ =
         [0,
          [0,
           _bP_,
           _bO_,
           [0,
            caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$11),
            201,
            4905,
            4913,
            4919],
           _b3_],
          0],
       _b5_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$13),
          199,
          4827,
          4831,
          4959],
       _b6_ =
         caml_call1
          (Expect_test_common_File[4][3], cst_7ab56c19bd8e1a900a2e992a59);
      caml_call9
       (Expect_test_collector$0[3],
        _b6_,
        _b5_,
        cst_src_protocol_ml$12,
        0,
        0,
        _b4_,
        0,
        Inline_test_config,
        function(param){
         var
          a = Bin_prot_Std[44],
          _b$_ = caml_call1(Bin_shape[2][1], cst_needs_length$6),
          _ca_ =
            caml_call1(caml_call2(Bin_prot_Shape[10], group, _b$_), [0, a, 0]),
          _cb_ = caml_call1(Bin_prot_Shape[15], _ca_),
          _cc_ = caml_call1(Bin_shape[19][4], _cb_);
         caml_call1(Stdlib[46], _cc_);
         var
          _cd_ =
            [0,
             caml_call1(Expect_test_common_File[1][6], cst_src_protocol_ml$9),
             201,
             4905,
             4913,
             4919];
         return caml_call1(Expect_test_collector$0[1], _cd_);
        });
      var
       tag = caml_call1(Rpc_tag[11], cst_rpc),
       query_id = caml_call1(Query_id[45], 0),
       v1_query = [0, tag, 1, query_id, 0],
       response = [0, query_id, _bQ_],
       v1 = [0, 0, [0, [0, v1_query], [0, [1, response], 0]]],
       v2 = [0, 0, [0, [0, v1_query], [0, [1, response], 0]]],
       v1_str =
         caml_call2
          (Core_Core_bin_prot[1][1],
           [0,
            function(v){
             var size_of_a = Bin_prot_Std[1];
             return caml_call2
                     (Bin_prot_Std[18],
                      function(param){
                       if(typeof param === "number") return 1;
                       if(0 === param[0]){
                        var
                         v1 = param[1],
                         _b9_ = caml_call2(Query_v1[2], size_of_a, v1);
                        return caml_call2(Bin_prot_Common[23], 1, _b9_);
                       }
                       var
                        v1$0 = param[1],
                        _b__ = caml_call2(Response[2], size_of_a, v1$0);
                       return caml_call2(Bin_prot_Common[23], 1, _b__);
                      },
                      v);
            },
            function(buf, pos, v){
             var write_a = Bin_prot_Std[46];
             return caml_call4
                     (Bin_prot_Std[151],
                      function(buf, pos$1, param){
                       if(typeof param === "number")
                        return caml_call3(Bin_prot_Write[30], buf, pos$1, 0);
                       if(0 === param[0]){
                        var
                         v1 = param[1],
                         pos = caml_call3(Bin_prot_Write[30], buf, pos$1, 1);
                        return caml_call4(Query_v1[3], write_a, buf, pos, v1);
                       }
                       var
                        v1$0 = param[1],
                        pos$0 = caml_call3(Bin_prot_Write[30], buf, pos$1, 2);
                       return caml_call4(Response[3], write_a, buf, pos$0, v1$0);
                      },
                      buf,
                      pos,
                      v);
            }],
           v1),
       v2_str =
         caml_call2
          (Core_Core_bin_prot[1][1],
           [0,
            function(v){
             var _b8_ = caml_call1(Message[2], Bin_prot_Std[1]);
             return caml_call2(Bin_prot_Std[18], _b8_, v);
            },
            function(buf, pos, v){
             var _b7_ = caml_call1(Message[3], Bin_prot_Std[46]);
             return caml_call4(Bin_prot_Std[151], _b7_, buf, pos, v);
            }],
           v2);
      return caml_call2(Stdlib_String[9], v1_str, v2_str);
     });
   caml_call1(Ppx_inline_test_lib[6], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Protocol);
   var
    Async_rpc_kernel_Protocol =
      [0,
       Rpc_tag,
       Query_id,
       Unused_query_id,
       Rpc_error,
       Rpc_result,
       Query_v1,
       Query,
       Response,
       Stream_query,
       Stream_initial_message,
       Stream_response_data,
       Message];
   runtime.caml_register_global
    (295, Async_rpc_kernel_Protocol, cst_Async_rpc_kernel_Protocol);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Rpc_shapes
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Core, Core__Binable, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Rpc_shape = "Async_rpc_kernel__Rpc_shapes",
    cst_One_way = "One_way",
    cst_Rpc = "Rpc",
    cst_Streaming_rpc = "Streaming_rpc",
    cst_Unknown = "Unknown",
    cst_async_rpc_kernel = "async_rpc_kernel",
    cst_error$0 = "error",
    cst_initial_response$0 = "initial_response",
    cst_msg$0 = "msg",
    cst_one_way = "one_way",
    cst_query$1 = "query",
    cst_response$0 = "response",
    cst_rpc = "rpc",
    cst_src_rpc_shapes_ml_Stable_V$0 = "src/rpc_shapes.ml.Stable.V1.t",
    cst_streaming_rpc = "streaming_rpc",
    cst_t = "t",
    cst_unknown = "unknown",
    cst_update_response$0 = "update_response";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_003 = cst_src_rpc_shapes_ml_Stable_V$0,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Core = global_data.Core,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bin_shape = global_data.Bin_shape,
    Core_Binable = global_data.Core__Binable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Rpc_shape);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][1], "src/rpc_shapes.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_async_rpc_kernel, "rpc_shapes.ml");
   var
    include = Bin_shape[18][1],
    t_of_sexp = include[2],
    sexp_of_t = include[3],
    caller_identity =
      caml_call1(Bin_shape[5][1], "0aa53549-ad88-4b4f-abc7-1f8453e7aa11"),
    include$0 =
      caml_call1
       (Core_Binable[16][5][2], [0, t_of_sexp, sexp_of_t, caller_identity]),
    bin_size_t = include$0[1],
    bin_write_t = include$0[2],
    bin_read_t = include$0[3],
    bin_shape_t = include$0[5],
    _a_ =
      [0,
       [0,
        cst_Streaming_rpc,
        [0,
         caml_call1
          (Bin_prot_Shape[4],
           [0,
            [0, cst_query$1, bin_shape_t],
            [0,
             [0, cst_initial_response$0, bin_shape_t],
             [0,
              [0, cst_update_response$0, bin_shape_t],
              [0, [0, cst_error$0, bin_shape_t], 0]]]]),
         0]],
       [0, [0, cst_Unknown, 0], 0]],
    _b_ =
      [0,
       [0,
        cst_One_way,
        [0,
         caml_call1(Bin_prot_Shape[4], [0, [0, cst_msg$0, bin_shape_t], 0]),
         0]],
       _a_],
    _c_ =
      [0,
       [0,
        cst_Rpc,
        [0,
         caml_call1
          (Bin_prot_Shape[4],
           [0,
            [0, cst_query$1, bin_shape_t],
            [0, [0, cst_response$0, bin_shape_t], 0]]),
         0]],
       _b_],
    _d_ = caml_call1(Bin_prot_Shape[5], _c_),
    _e_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _d_], 0],
    _f_ = caml_call1(Bin_shape[4][1], "src/rpc_shapes.ml:26:4"),
    group = caml_call2(Bin_prot_Shape[2], _f_, _e_),
    _g_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t$0 = caml_call1(caml_call2(Bin_prot_Shape[10], group, _g_), 0);
   function bin_size_t$0(param){
    if(typeof param === "number") return 1;
    switch(param[0]){
      case 0:
       var
        v2 = param[2],
        v1 = param[1],
        _L_ = caml_call1(bin_size_t, v1),
        size = caml_call2(Bin_prot_Common[23], 1, _L_),
        _M_ = caml_call1(bin_size_t, v2);
       return caml_call2(Bin_prot_Common[23], size, _M_);
      case 1:
       var v1$0 = param[1], _N_ = caml_call1(bin_size_t, v1$0);
       return caml_call2(Bin_prot_Common[23], 1, _N_);
      default:
       var
        v4 = param[4],
        v3 = param[3],
        v2$0 = param[2],
        v1$1 = param[1],
        _O_ = caml_call1(bin_size_t, v1$1),
        size$0 = caml_call2(Bin_prot_Common[23], 1, _O_),
        _P_ = caml_call1(bin_size_t, v2$0),
        size$1 = caml_call2(Bin_prot_Common[23], size$0, _P_),
        _Q_ = caml_call1(bin_size_t, v3),
        size$2 = caml_call2(Bin_prot_Common[23], size$1, _Q_),
        _R_ = caml_call1(bin_size_t, v4);
       return caml_call2(Bin_prot_Common[23], size$2, _R_);
    }
   }
   function bin_write_t$0(buf, pos, param){
    if(typeof param === "number")
     return caml_call3(Bin_prot_Write[30], buf, pos, 3);
    switch(param[0]){
      case 0:
       var
        v2 = param[2],
        v1 = param[1],
        pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0),
        pos$1 = caml_call3(bin_write_t, buf, pos$0, v1);
       return caml_call3(bin_write_t, buf, pos$1, v2);
      case 1:
       var
        v1$0 = param[1],
        pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
       return caml_call3(bin_write_t, buf, pos$2, v1$0);
      default:
       var
        v4 = param[4],
        v3 = param[3],
        v2$0 = param[2],
        v1$1 = param[1],
        pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 2),
        pos$4 = caml_call3(bin_write_t, buf, pos$3, v1$1),
        pos$5 = caml_call3(bin_write_t, buf, pos$4, v2$0),
        pos$6 = caml_call3(bin_write_t, buf, pos$5, v3);
       return caml_call3(bin_write_t, buf, pos$6, v4);
    }
   }
   var
    bin_writer_t = [0, bin_size_t$0, bin_write_t$0],
    cst_src_rpc_shapes_ml_Stable_V = cst_src_rpc_shapes_ml_Stable_V$0,
    _h_ = [1, cst_src_rpc_shapes_ml_Stable_V$0];
   function bin_read_t$0(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_rpc_shapes_ml_Stable_V, pos_ref[1]);
   }
   function bin_read_t$1(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(3 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _h_, pos_ref[1]);
    switch(match){
      case 0:
       var
        v_query = caml_call2(bin_read_t, buf, pos_ref),
        v_response = caml_call2(bin_read_t, buf, pos_ref);
       return [0, v_query, v_response];
      case 1:
       var v_msg = caml_call2(bin_read_t, buf, pos_ref); return [1, v_msg];
      case 2:
       var
        v_query$0 = caml_call2(bin_read_t, buf, pos_ref),
        v_initial_response = caml_call2(bin_read_t, buf, pos_ref),
        v_update_response = caml_call2(bin_read_t, buf, pos_ref),
        v_error = caml_call2(bin_read_t, buf, pos_ref);
       return [2, v_query$0, v_initial_response, v_update_response, v_error];
      default: return 0;
    }
   }
   var
    bin_reader_t = [0, bin_read_t$1, bin_read_t$0],
    bin_t = [0, bin_shape_t$0, bin_writer_t, bin_reader_t],
    cst_error = cst_error$0,
    cst_update_response = cst_update_response$0,
    cst_initial_response = cst_initial_response$0,
    cst_query = cst_query$1,
    cst_response = cst_response$0,
    cst_query$0 = cst_query$1,
    cst_msg = cst_msg$0,
    _i_ = [0, cst_Unknown],
    _j_ = [0, cst_response$0],
    _k_ = [0, cst_query$1],
    _l_ = [0, cst_Rpc],
    _m_ = [0, cst_msg$0],
    _n_ = [0, cst_One_way],
    _o_ = [0, cst_error$0],
    _p_ = [0, cst_update_response$0],
    _q_ = [0, cst_initial_response$0],
    _r_ = [0, cst_query$1],
    _s_ = [0, cst_Streaming_rpc],
    _t_ = [0, cst_Unknown],
    _u_ = [0, cst_response$0],
    _v_ = [0, cst_query$1],
    _w_ = [0, cst_Rpc],
    _x_ = [0, cst_msg$0],
    _y_ = [0, cst_One_way],
    _z_ = [0, cst_error$0],
    _A_ = [0, cst_update_response$0],
    _B_ = [0, cst_initial_response$0],
    _C_ = [0, cst_query$1],
    _D_ = [0, cst_Streaming_rpc];
   function t_of_sexp$0(sexp_005){
    a:
    {
     if(0 === sexp_005[0]){
      var _F_ = sexp_005[1];
      b:
      if(_F_ !== cst_One_way){
       c:
       if(_F_ !== cst_Rpc){
        d:
        if(_F_ !== cst_Streaming_rpc){
         if(_F_ !== cst_Unknown){
          if(_F_ === cst_one_way) break b;
          if(_F_ === cst_rpc) break c;
          if(_F_ === cst_streaming_rpc) break d;
          if(_F_ !== cst_unknown) break a;
         }
         return 0;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_003, sexp_005);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_003, sexp_005);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5], error_source_003, sexp_005);
     }
     var _G_ = sexp_005[1];
     if(! _G_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
     var _H_ = _G_[1];
     if(0 !== _H_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_003, sexp_005);
     var _I_ = _H_[1];
     b:
     if(_I_ !== cst_One_way){
      c:
      if(_I_ !== cst_Rpc){
       d:
       if(_I_ !== cst_Streaming_rpc){
        if(_I_ !== cst_Unknown){
         if(_I_ === cst_one_way) break b;
         if(_I_ === cst_rpc) break c;
         if(_I_ === cst_streaming_rpc) break d;
         if(_I_ !== cst_unknown) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
       }
       var sexps_010 = _G_[2];
       return caml_call7
               (Sexplib0_Sexp_conv_record[4],
                error_source_003,
                sexp_005,
                [0,
                 cst_query,
                 1,
                 t_of_sexp,
                 [0,
                  cst_initial_response,
                  1,
                  t_of_sexp,
                  [0,
                   cst_update_response,
                   1,
                   t_of_sexp,
                   [0, cst_error, 1, t_of_sexp, 0]]]],
                function(param){
                 return param !== cst_error$0
                         ? param
                           !== cst_initial_response$0
                           ? param
                             !== cst_query$1
                             ? param !== cst_update_response$0 ? -1 : 2
                             : 0
                           : 1
                         : 3;
                },
                0,
                function(param){
                 var
                  _J_ = param[2],
                  _K_ = _J_[2],
                  error = _K_[2][1],
                  update_response = _K_[1],
                  initial_response = _J_[1],
                  query = param[1];
                 return [2, query, initial_response, update_response, error];
                },
                sexps_010);
      }
      var sexps_006 = _G_[2];
      return caml_call7
              (Sexplib0_Sexp_conv_record[4],
               error_source_003,
               sexp_005,
               [0,
                cst_query$0,
                1,
                t_of_sexp,
                [0, cst_response, 1, t_of_sexp, 0]],
               function(param){
                return param !== cst_query$1
                        ? param !== cst_response$0 ? -1 : 1
                        : 0;
               },
               0,
               function(param){
                var response = param[2][1], query = param[1];
                return [0, query, response];
               },
               sexps_006);
     }
     var sexps_008 = _G_[2];
     return caml_call7
             (Sexplib0_Sexp_conv_record[4],
              error_source_003,
              sexp_005,
              [0, cst_msg, 1, t_of_sexp, 0],
              function(param){return param !== cst_msg$0 ? -1 : 0;},
              0,
              function(param){var msg = param[1]; return [1, msg];},
              sexps_008);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_003, sexp_005);
   }
   function sexp_of_t$0(param){
    if(typeof param === "number") return _i_;
    switch(param[0]){
      case 0:
       var
        response_014 = param[2],
        query_012 = param[1],
        arg_015 = caml_call1(sexp_of_t, response_014),
        bnds_011 = [0, [1, [0, _j_, [0, arg_015, 0]]], 0],
        arg_013 = caml_call1(sexp_of_t, query_012),
        bnds_011$0 = [0, [1, [0, _k_, [0, arg_013, 0]]], bnds_011];
       return [1, [0, _l_, bnds_011$0]];
      case 1:
       var
        msg_017 = param[1],
        arg_018 = caml_call1(sexp_of_t, msg_017),
        bnds_016 = [0, [1, [0, _m_, [0, arg_018, 0]]], 0];
       return [1, [0, _n_, bnds_016]];
      default:
       var
        error_026 = param[4],
        update_response_024 = param[3],
        initial_response_022 = param[2],
        query_020 = param[1],
        arg_027 = caml_call1(sexp_of_t, error_026),
        bnds_019 = [0, [1, [0, _o_, [0, arg_027, 0]]], 0],
        arg_025 = caml_call1(sexp_of_t, update_response_024),
        bnds_019$0 = [0, [1, [0, _p_, [0, arg_025, 0]]], bnds_019],
        arg_023 = caml_call1(sexp_of_t, initial_response_022),
        bnds_019$1 = [0, [1, [0, _q_, [0, arg_023, 0]]], bnds_019$0],
        arg_021 = caml_call1(sexp_of_t, query_020),
        bnds_019$2 = [0, [1, [0, _r_, [0, arg_021, 0]]], bnds_019$1];
       return [1, [0, _s_, bnds_019$2]];
    }
   }
   function sexp_of_t$1(t){
    var _E_ = caml_call1(Bin_prot_Shape[16], t);
    return caml_call1(Core[484], _E_);
   }
   function sexp_of_t$2(param){
    if(typeof param === "number") return _t_;
    switch(param[0]){
      case 0:
       var
        response_031 = param[2],
        query_029 = param[1],
        arg_032 = sexp_of_t$1(response_031),
        bnds_028 = [0, [1, [0, _u_, [0, arg_032, 0]]], 0],
        arg_030 = sexp_of_t$1(query_029),
        bnds_028$0 = [0, [1, [0, _v_, [0, arg_030, 0]]], bnds_028];
       return [1, [0, _w_, bnds_028$0]];
      case 1:
       var
        msg_034 = param[1],
        arg_035 = sexp_of_t$1(msg_034),
        bnds_033 = [0, [1, [0, _x_, [0, arg_035, 0]]], 0];
       return [1, [0, _y_, bnds_033]];
      default:
       var
        error_043 = param[4],
        update_response_041 = param[3],
        initial_response_039 = param[2],
        query_037 = param[1],
        arg_044 = sexp_of_t$1(error_043),
        bnds_036 = [0, [1, [0, _z_, [0, arg_044, 0]]], 0],
        arg_042 = sexp_of_t$1(update_response_041),
        bnds_036$0 = [0, [1, [0, _A_, [0, arg_042, 0]]], bnds_036],
        arg_040 = sexp_of_t$1(initial_response_039),
        bnds_036$1 = [0, [1, [0, _B_, [0, arg_040, 0]]], bnds_036$0],
        arg_038 = sexp_of_t$1(query_037),
        bnds_036$2 = [0, [1, [0, _C_, [0, arg_038, 0]]], bnds_036$1];
       return [1, [0, _D_, bnds_036$2]];
    }
   }
   caml_call1(Ppx_inline_test_lib[6], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Rpc_shape);
   var
    Async_rpc_kernel_Rpc_shapes =
      [0,
       sexp_of_t$2,
       [0,
        [0,
         bin_size_t$0,
         bin_write_t$0,
         bin_read_t$1,
         bin_read_t$0,
         bin_shape_t$0,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         t_of_sexp$0,
         sexp_of_t$0]]];
   runtime.caml_register_global
    (90, Async_rpc_kernel_Rpc_shapes, cst_Async_rpc_kernel_Rpc_shape);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Transport_intf
//# unitInfo: Requires: Core, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Transport = "Async_rpc_kernel__Transport_intf",
    cst_async_rpc_kernel = "async_rpc_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Transport);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][1], "src/transport_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_async_rpc_kernel, "transport_intf.ml");
   var
    Handler_result = [0],
    _a_ = [0, "max_message_size"],
    _b_ = [0, "size"],
    _c_ = [0, "Closed"],
    _d_ = [0, "Sent"],
    _e_ = [0, "Message_too_big"];
   function sexp_of_message_too_big(param){
    var
     max_message_size_004 = param[2],
     size_002 = param[1],
     arg_005 = caml_call1(Core[363], max_message_size_004),
     bnds_001 = [0, [1, [0, _a_, [0, arg_005, 0]]], 0],
     arg_003 = caml_call1(Core[363], size_002),
     bnds_001$0 = [0, [1, [0, _b_, [0, arg_003, 0]]], bnds_001];
    return [1, bnds_001$0];
   }
   function sexp_of_t(of_a_006, param){
    if(typeof param === "number") return _c_;
    if(0 === param[0]){
     var arg0_007 = param[1], res0_008 = caml_call1(of_a_006, arg0_007);
     return [1, [0, _d_, [0, res0_008, 0]]];
    }
    var arg0_009 = param[1], res0_010 = sexp_of_message_too_big(arg0_009);
    return [1, [0, _e_, [0, res0_010, 0]]];
   }
   var Send_result = [0, sexp_of_message_too_big, sexp_of_t];
   caml_call1(Ppx_inline_test_lib[6], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Transport);
   var Async_rpc_kernel_Transport_int = [0, Handler_result, Send_result];
   runtime.caml_register_global
    (17, Async_rpc_kernel_Transport_int, cst_Async_rpc_kernel_Transport);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Transport
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_kernel__Ivar, Async_kernel__Pipe, Core, Core__Bigstring, Core__Queue, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Transport = "Async_rpc_kernel__Transport",
    cst_async_rpc_kernel = "async_rpc_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_kernel = global_data.Async_kernel,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Core_Queue = global_data.Core__Queue,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Core = global_data.Core,
    Core_Bigstring = global_data.Core__Bigstring,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Transport);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][1], "src/transport.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_async_rpc_kernel, "transport.ml");
   function unsafe_get_payload_length(buf, pos){
    return caml_call2(Core_Bigstring[83], buf, pos);
   }
   function unsafe_set_payload_length(buf, pos, payload_len){
    return caml_call3(Core_Bigstring[87], buf, pos, payload_len);
   }
   var
    Header = [0, 8, unsafe_get_payload_length, unsafe_set_payload_length],
    _a_ =
      [0,
       [11,
        "message length (",
        [4,
         0,
         0,
         0,
         [11, ") did not match expected length (", [4, 0, 0, 0, [12, 41, 0]]]]],
       "message length (%d) did not match expected length (%d)"],
    _b_ = [0, "writer"],
    _c_ = [0, "reader"];
   function pack(m, t){return [0, m, t];}
   function sexp_of_t(param){
    var t = param[2], M = param[1];
    return caml_call1(M[1], t);
   }
   function close(param){
    var t = param[2], M = param[1];
    return caml_call1(M[2], t);
   }
   function is_closed(param){
    var t = param[2], M = param[1];
    return caml_call1(M[3], t);
   }
   function bytes_read(param){
    var t = param[2], M = param[1];
    return caml_call1(M[4], t);
   }
   function read_forever(param, on_message, on_end_of_batch){
    var t = param[2], M = param[1];
    return caml_call3(M[5], t, on_message, on_end_of_batch);
   }
   function read_one_message_bin_prot(t, bin_reader){
    return read_forever
            (t,
             function(buf, pos, len){
              var
               pos_ref = [0, pos],
               x = caml_call2(bin_reader[1], buf, pos_ref);
              return caml_call2(Core[92], pos_ref[1], pos + len | 0)
                      ? caml_call4(Core[240], _a_, pos_ref[1] - pos | 0, len, 0)
                      : [0, x];
             },
             function(_m_){return 0;});
   }
   function pack$0(M, t){return [0, [0, M, t, caml_call1(M[7], t)]];}
   function sexp_of_t$0(param){
    var match = param[1], t = match[2], M = match[1];
    return caml_call1(M[1], t);
   }
   function close$0(param){
    var match = param[1], t = match[2], M = match[1];
    return caml_call1(M[2], t);
   }
   function is_closed$0(param){
    var match = param[1], t = match[2], M = match[1];
    return caml_call1(M[3], t);
   }
   function monitor(param){
    var match = param[1], t = match[2], M = match[1];
    return caml_call1(M[4], t);
   }
   function bytes_to_write(param){
    var match = param[1], t = match[2], M = match[1];
    return caml_call1(M[5], t);
   }
   function bytes_written(param){
    var match = param[1], t = match[2], M = match[1];
    return caml_call1(M[6], t);
   }
   function flushed(param){
    var match = param[1], t = match[2], M = match[1];
    return caml_call1(M[8], t);
   }
   function ready_to_write(param){
    var match = param[1], t = match[2], M = match[1];
    return caml_call1(M[9], t);
   }
   function send_bin_prot(param, bin_writer, x){
    var match = param[1], t = match[2], M = match[1];
    return caml_call3(M[10], t, bin_writer, x);
   }
   function send_bin_prot_and_bigstring(param, bin_writer, x, buf, pos, len){
    var match = param[1], t = match[2], M = match[1];
    return caml_call6(M[11], t, bin_writer, x, buf, pos, len);
   }
   function send_bin_prot_and_bigstring_no
   (param, bin_writer, x, buf, pos, len){
    var match = param[1], t = match[2], M = match[1];
    return caml_call6(M[12], t, bin_writer, x, buf, pos, len);
   }
   function stopped(param){var stopped = param[1][3]; return stopped;}
   function can_send(param){
    var
     match = param[1],
     stopped = match[3],
     t = match[2],
     M = match[1],
     _k_ = caml_call1(M[3], t),
     _l_ = _k_ || caml_call1(Async_kernel_Deferred[7], stopped);
    return 1 - _l_;
   }
   function transfer(t, opt, pipe, f){
    var
     max_num_values_per_read = opt ? opt[1] : 1000,
     consumer =
       caml_call2
        (Async_kernel_Pipe[23],
         pipe,
         function(param){
          var _j_ = flushed(t);
          return caml_call2
                  (Async_kernel[22][3], _j_, function(param){return 17724;});
         }),
     end_of_pipe =
       caml_call1
        (Async_kernel_Deferred[3],
         function(ivar){
          function iter(param){
           var _g_ = can_send(t);
           if(! _g_) return _g_;
           var
            match =
              caml_call3
               (Async_kernel_Pipe[38],
                [0, consumer],
                [0, max_num_values_per_read],
                pipe);
           if(typeof match !== "number"){
            var q = match[2];
            caml_call2(Core_Queue[16], q, f);
            caml_call1(Async_kernel_Pipe[22][1], consumer);
            var _i_ = ready_to_write(t);
            return caml_call2(Async_kernel[16], _i_, iter);
           }
           if(3456156 <= match)
            return caml_call2(Async_kernel_Ivar[14], ivar, 0);
           var _h_ = caml_call1(Async_kernel_Pipe[43], pipe);
           return caml_call2
                   (Async_kernel[16], _h_, function(param){return iter(0);});
          }
          return iter(0);
         }),
     _e_ = [0, end_of_pipe, [0, stopped(t), 0]],
     _f_ = caml_call1(Async_kernel_Deferred[23], _e_);
    return caml_call2
            (Async_kernel[22][3],
             _f_,
             function(param){return caml_call1(Async_kernel_Pipe[16], pipe);});
   }
   function sexp_of_t$1(param){
    var
     writer_006 = param[2],
     reader_004 = param[1],
     arg_007 = sexp_of_t$0(writer_006),
     bnds_003 = [0, [1, [0, _b_, [0, arg_007, 0]]], 0],
     arg_005 = sexp_of_t(reader_004),
     bnds_003$0 = [0, [1, [0, _c_, [0, arg_005, 0]]], bnds_003];
    return [1, bnds_003$0];
   }
   function close$1(t){
    var _d_ = close$0(t[2]);
    return caml_call2
            (Async_kernel[22][2], _d_, function(param){return close(t[1]);});
   }
   caml_call1(Ppx_inline_test_lib[6], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Transport);
   var
    Async_rpc_kernel_Transport =
      [0,
       Header,
       [0,
        sexp_of_t,
        close,
        is_closed,
        bytes_read,
        read_forever,
        pack,
        read_one_message_bin_prot],
       [0,
        sexp_of_t$0,
        close$0,
        is_closed$0,
        monitor,
        bytes_to_write,
        bytes_written,
        stopped,
        flushed,
        ready_to_write,
        send_bin_prot,
        send_bin_prot_and_bigstring,
        send_bin_prot_and_bigstring_no,
        pack$0,
        can_send,
        transfer],
       sexp_of_t$1,
       close$1];
   runtime.caml_register_global
    (21, Async_rpc_kernel_Transport, cst_Async_rpc_kernel_Transport);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Implementation_types
//# unitInfo: Requires: CamlinternalMod, Core, Core__Unique_id, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Implement = "Async_rpc_kernel__Implementation_types",
    cst_async_rpc_kernel = "async_rpc_kernel",
    cst_src_implementation_types_m = "src/implementation_types.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Unique_id = global_data.Core__Unique_id,
    CamlinternalMod = global_data.CamlinternalMod;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Implement);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][1], cst_src_implementation_types_m);
   caml_call2
    (Ppx_inline_test_lib[5], cst_async_rpc_kernel, "implementation_types.ml");
   var
    Direct_stream_writer_id = caml_call1(Core_Unique_id[2], 0),
    _a_ = [0, "close_connection_if_no_return_value"],
    _b_ = [0, "callback"];
   function sexp_of_t(param){
    var
     close_connection_if_no_return_ = param[2],
     callback_002 = param[1],
     arg_005 = caml_call1(Core[309], close_connection_if_no_return_),
     bnds_001 = [0, [1, [0, _a_, [0, arg_005, 0]]], 0],
     arg_003 =
       caml_call2
        (Core[466],
         function(param){
          return caml_call1(Sexplib0_Sexp_conv[24], function(_c_){return 0;});
         },
         callback_002);
    a:
    {
     if(1 === arg_003[0] && ! arg_003[1]){var bnds_001$0 = bnds_001; break a;}
     var bnds_001$0 = [0, [1, [0, _b_, [0, arg_003, 0]]], bnds_001];
    }
    return [1, bnds_001$0];
   }
   var
    On_exception = [0, sexp_of_t],
    Implementation =
      caml_call2
       (CamlinternalMod[1],
        [0, cst_src_implementation_types_m, 99, 2],
        [0, [0, [0, [0, [0, [0]]]], [0, [0]]]]),
    Implementations =
      caml_call2
       (CamlinternalMod[1],
        [0, cst_src_implementation_types_m, 151, 2],
        [0, [0, [0, [0]]]]),
    Direct_stream_writer =
      caml_call2
       (CamlinternalMod[1],
        [0, cst_src_implementation_types_m, 202, 2],
        [0, [0, [0, [0]], [0, [0]], [0, [0]]]]),
    Cached_bin_writer =
      caml_call2
       (CamlinternalMod[1],
        [0, cst_src_implementation_types_m, 211, 2],
        [0, [0]]);
   caml_call3
    (CamlinternalMod[2],
     [0, [0, [0, [0, [0, [0]]]], [0, [0]]]],
     Implementation,
     Implementation);
   caml_call3
    (CamlinternalMod[2], [0, [0, [0, [0]]]], Implementations, Implementations);
   caml_call3
    (CamlinternalMod[2],
     [0, [0, [0, [0]], [0, [0]], [0, [0]]]],
     Direct_stream_writer,
     Direct_stream_writer);
   caml_call3
    (CamlinternalMod[2], [0, [0]], Cached_bin_writer, Cached_bin_writer);
   caml_call1(Ppx_inline_test_lib[6], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Implement);
   var
    Async_rpc_kernel_Implementatio =
      [0,
       Direct_stream_writer_id,
       On_exception,
       Implementation,
       Implementations,
       Direct_stream_writer,
       Cached_bin_writer];
   runtime.caml_register_global
    (29, Async_rpc_kernel_Implementatio, cst_Async_rpc_kernel_Implement);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__On_exception
//# unitInfo: Requires: Async_kernel__Monitor, Core, Core__Option, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_On_except = "Async_rpc_kernel__On_exception",
    cst_async_rpc_kernel = "async_rpc_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    close_connection = [0, 0, 1],
    continue$0 = [0, 0, 0],
    Core_Option = global_data.Core__Option,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_On_except);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][1], "src/on_exception.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_async_rpc_kernel, "on_exception.ml");
   var
    _a_ = [0, "close_connection_if_no_return_value"],
    _b_ = [0, "callback"];
   function sexp_of_t(param){
    var
     close_connection_if_no_return_ = param[2],
     callback_002 = param[1],
     arg_005 = caml_call1(Core[309], close_connection_if_no_return_),
     bnds_001 = [0, [1, [0, _a_, [0, arg_005, 0]]], 0],
     arg_003 =
       caml_call2
        (Core[466],
         function(param){
          return caml_call1(Sexplib0_Sexp_conv[24], function(_c_){return 0;});
         },
         callback_002);
    a:
    {
     if(1 === arg_003[0] && ! arg_003[1]){var bnds_001$0 = bnds_001; break a;}
     var bnds_001$0 = [0, [1, [0, _b_, [0, arg_003, 0]]], bnds_001];
    }
    return [1, bnds_001$0];
   }
   function handle_exn(param, close_connection_monitor, exn){
    var close_connection_if_no_return_ = param[2], callback = param[1];
    caml_call2
     (Core_Option[42],
      callback,
      function(callback){return caml_call1(callback, exn);});
    return close_connection_if_no_return_
            ? caml_call3
              (Async_kernel_Monitor[15], close_connection_monitor, 0, exn)
            : close_connection_if_no_return_;
   }
   caml_call1(Ppx_inline_test_lib[6], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_On_except);
   var
    Async_rpc_kernel_On_exception =
      [0, sexp_of_t, close_connection, continue$0, handle_exn];
   runtime.caml_register_global
    (19, Async_rpc_kernel_On_exception, cst_Async_rpc_kernel_On_except);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Implementation
//# unitInfo: Requires: Async_rpc_kernel__On_exception, Async_rpc_kernel__Or_not_authorized, Async_rpc_kernel__Protocol, Async_rpc_kernel__Rpc_shapes, Async_rpc_kernel__Transport, Core, Core__Lazy, Eager_deferred, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Implement = "Async_rpc_kernel__Implementation",
    cst_async_rpc_kernel = "async_rpc_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Async_rpc_kernel_Protocol = global_data.Async_rpc_kernel__Protocol,
    Async_rpc_kernel_On_exception = global_data.Async_rpc_kernel__On_exception,
    Async_rpc_kernel_Rpc_shapes = global_data.Async_rpc_kernel__Rpc_shapes,
    Core_Lazy = global_data.Core__Lazy,
    Eager_deferred = global_data.Eager_deferred,
    Async_rpc_kernel_Or_not_author =
      global_data.Async_rpc_kernel__Or_not_authorized,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Async_rpc_kernel_Transport = global_data.Async_rpc_kernel__Transport,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Implement);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][1], "src/implementation.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_async_rpc_kernel, "implementation.ml");
   var _a_ = [0, "responded"], _b_ = [0, "writer"], _c_ = [0, "query_id"];
   function sexp_of_t(param){
    var
     writer_004 = param[2],
     query_id_002 = param[1],
     responded_006 = param[3],
     arg_007 = caml_call1(Core[309], responded_006),
     bnds_001 = [0, [1, [0, _a_, [0, arg_007, 0]]], 0],
     arg_005 = caml_call1(Async_rpc_kernel_Transport[3][1], writer_004),
     bnds_001$0 = [0, [1, [0, _b_, [0, arg_005, 0]]], bnds_001],
     arg_003 = caml_call1(Async_rpc_kernel_Protocol[2][10], query_id_002),
     bnds_001$1 = [0, [1, [0, _c_, [0, arg_003, 0]]], bnds_001$0];
    return [1, bnds_001$1];
   }
   function create(query_id, writer){return [0, query_id, writer, 0];}
   var
    Responder = [0, sexp_of_t, create],
    Expert = [0, Responder],
    cst_one_way = "one-way",
    cst_rpc = "rpc",
    cst_streaming_rpc = "streaming-rpc",
    _d_ = [0, "on_exception"],
    _e_ = [0, "shapes"],
    _f_ = [0, "f"],
    _g_ = [0, "version"],
    _h_ = [0, "tag"];
   function lift(t, f){
    switch(t[0]){
      case 0:
       var
        impl = t[2],
        bin_msg = t[1],
        impl$0 =
          function(state, str){
           var _I_ = caml_call1(f, state);
           return caml_call2
                   (Async_rpc_kernel_Or_not_author[2],
                    _I_,
                    function(authorized_state){
                     return caml_call2(impl, authorized_state, str);
                    });
          };
       return [0, bin_msg, impl$0];
      case 1:
       var impl$1 = t[1];
       return [1,
               function(state, buf, pos, len){
                var _H_ = caml_call1(f, state);
                return caml_call2
                        (Async_rpc_kernel_Or_not_author[2],
                         _H_,
                         function(authorized_state){
                          return caml_call4(impl$1, authorized_state, buf, pos, len);
                         });
               }];
      case 2:
       var impl$2 = t[3], bin_response = t[2], bin_query = t[1];
       if(t[4]){
        var
         impl$3 =
           function(state, q){
            var _G_ = caml_call1(f, state);
            return caml_call2
                    (Async_rpc_kernel_Or_not_author[2],
                     _G_,
                     function(authorized_state){
                      return caml_call2(impl$2, authorized_state, q);
                     });
           };
        return [2, bin_query, bin_response, impl$3, 1];
       }
       var
        impl$4 =
          function(state, q){
           var _F_ = caml_call1(f, state);
           return caml_call2
                   (Async_rpc_kernel_Or_not_author[1],
                    _F_,
                    function(authorized_state){
                     return caml_call2(impl$2, authorized_state, q);
                    });
          };
       return [2, bin_query, bin_response, impl$4, 0];
      case 3:
       var impl$5 = t[1];
       if(t[2]){
        var
         impl$6 =
           function(state, resp, buf, pos, len){
            var _E_ = caml_call1(f, state);
            return caml_call2
                    (Async_rpc_kernel_Or_not_author[2],
                     _E_,
                     function(authorized_state){
                      return caml_call5
                              (impl$5, authorized_state, resp, buf, pos, len);
                     });
           };
        return [3, impl$6, 1];
       }
       var
        impl$7 =
          function(state, resp, buf, pos, len){
           var _D_ = caml_call1(f, state);
           return caml_call2
                   (Async_rpc_kernel_Or_not_author[1],
                    _D_,
                    function(authorized_state){
                     return caml_call5
                             (impl$5, authorized_state, resp, buf, pos, len);
                    });
          };
       return [3, impl$7, 0];
      default:
       var
        match = t[1],
        impl$8 = match[4],
        bin_update_writer = match[3],
        bin_init_writer = match[2],
        bin_query_reader = match[1];
       if(0 === impl$8[0])
        var
         impl$9 = impl$8[1],
         impl$10 =
           [0,
            function(state, q){
             var _B_ = caml_call1(f, state);
             return caml_call2
                     (Async_rpc_kernel_Or_not_author[2],
                      _B_,
                      function(authorized_state){
                       return caml_call2(impl$9, authorized_state, q);
                      });
            }];
       else
        var
         impl$11 = impl$8[1],
         impl$10 =
           [1,
            function(state, q, w){
             var _C_ = caml_call1(f, state);
             return caml_call2
                     (Async_rpc_kernel_Or_not_author[2],
                      _C_,
                      function(authorized_state){
                       return caml_call3(impl$11, authorized_state, q, w);
                      });
            }];
       return [4,
               [0,
                bin_query_reader,
                bin_init_writer,
                bin_update_writer,
                impl$10]];
    }
   }
   function lift_deferred(t, f){
    switch(t[0]){
      case 0:
       var impl = t[2], bin_msg = t[1];
       return [0,
               bin_msg,
               function(state, str){
                var _A_ = caml_call1(f, state);
                return caml_call2
                        (Eager_deferred[5],
                         _A_,
                         function(state){return caml_call2(impl, state, str);});
               }];
      case 1:
       var impl$0 = t[1];
       return [1,
               function(state, buf, pos, len){
                var _z_ = caml_call1(f, state);
                return caml_call2
                        (Eager_deferred[5],
                         _z_,
                         function(state){
                          return caml_call4(impl$0, state, buf, pos, len);
                         });
               }];
      case 2:
       var impl$1 = t[3], bin_response = t[2], bin_query = t[1];
       return t[4]
               ? [2,
                 bin_query,
                 bin_response,
                 function(state, q){
                  var _x_ = caml_call1(f, state);
                  return caml_call2
                          (Eager_deferred[12][4][2],
                           _x_,
                           function(state){return caml_call2(impl$1, state, q);});
                 },
                 1]
               : [2,
                 bin_query,
                 bin_response,
                 function(state, q){
                  var _y_ = caml_call1(f, state);
                  return caml_call2
                          (Eager_deferred[12][4][3],
                           _y_,
                           function(state){return caml_call2(impl$1, state, q);});
                 },
                 1];
      case 3:
       var impl$2 = t[1];
       return t[2]
               ? [3,
                 function(state, resp, buf, pos, len){
                  var _v_ = caml_call1(f, state);
                  return caml_call2
                          (Eager_deferred[12][4][2],
                           _v_,
                           function(state){
                            return caml_call5(impl$2, state, resp, buf, pos, len);
                           });
                 },
                 1]
               : [3,
                 function(state, resp, buf, pos, len){
                  var _w_ = caml_call1(f, state);
                  return caml_call2
                          (Eager_deferred[12][4][3],
                           _w_,
                           function(state){
                            return caml_call5(impl$2, state, resp, buf, pos, len);
                           });
                 },
                 1];
      default:
       var
        match = t[1],
        impl$3 = match[4],
        bin_update_writer = match[3],
        bin_init_writer = match[2],
        bin_query_reader = match[1];
       if(0 === impl$3[0])
        var
         impl$4 = impl$3[1],
         impl$5 =
           [0,
            function(state, q){
             var _t_ = caml_call1(f, state);
             return caml_call2
                     (Eager_deferred[12][4][2],
                      _t_,
                      function(state){return caml_call2(impl$4, state, q);});
            }];
       else
        var
         impl$6 = impl$3[1],
         impl$5 =
           [1,
            function(state, q, w){
             var _u_ = caml_call1(f, state);
             return caml_call2
                     (Eager_deferred[12][4][2],
                      _u_,
                      function(state){return caml_call3(impl$6, state, q, w);});
            }];
       return [4,
               [0,
                bin_query_reader,
                bin_init_writer,
                bin_update_writer,
                impl$5]];
    }
   }
   function sexp_of_t$0(of_connection_state_014, param){
    var
     on_exception_024 = param[5],
     shapes_022 = param[4],
     f_020 = param[3],
     version_018 = param[2],
     tag_016 = param[1],
     arg_025 = caml_call1(Async_rpc_kernel_On_exception[1], on_exception_024),
     bnds_015 = [0, [1, [0, _d_, [0, arg_025, 0]]], 0],
     arg_023 =
       caml_call2(Core_Lazy[18], Async_rpc_kernel_Rpc_shapes[1], shapes_022),
     bnds_015$0 = [0, [1, [0, _e_, [0, arg_023, 0]]], bnds_015];
    switch(f_020[0]){
      case 4:
       var arg_021 = caml_call1(Sexplib0_Sexp_conv[7], cst_streaming_rpc);
       break;
      case 0:
      case 1:
       var arg_021 = caml_call1(Sexplib0_Sexp_conv[7], cst_one_way); break;
      default: var arg_021 = caml_call1(Sexplib0_Sexp_conv[7], cst_rpc);
    }
    var
     bnds_015$1 = [0, [1, [0, _f_, [0, arg_021, 0]]], bnds_015$0],
     arg_019 = caml_call1(Core[363], version_018),
     bnds_015$2 = [0, [1, [0, _g_, [0, arg_019, 0]]], bnds_015$1],
     arg_017 = caml_call1(Async_rpc_kernel_Protocol[1][10], tag_016),
     bnds_015$3 = [0, [1, [0, _h_, [0, arg_017, 0]]], bnds_015$2];
    return [1, bnds_015$3];
   }
   function description(t){
    var _s_ = t[2];
    return [0, caml_call1(Async_rpc_kernel_Protocol[1][12], t[1]), _s_];
   }
   function shapes(t){return caml_call1(Core[242], t[4]);}
   function lift$0(t, f){
    var
     _p_ = t[5],
     _q_ = t[4],
     _r_ = lift(t[3], function(b){return [0, caml_call1(f, b)];});
    return [0, t[1], t[2], _r_, _q_, _p_];
   }
   function with_authorization(t, f){
    var _m_ = t[5], _n_ = t[4], _o_ = lift(t[3], f);
    return [0, t[1], t[2], _o_, _n_, _m_];
   }
   function lift_deferred$0(t, f){
    var _j_ = t[5], _k_ = t[4], _l_ = lift_deferred(t[3], f);
    return [0, t[1], t[2], _l_, _k_, _j_];
   }
   function update_on_exception(t, f){
    var _i_ = caml_call1(f, t[5]);
    return [0, t[1], t[2], t[3], t[4], _i_];
   }
   caml_call1(Ppx_inline_test_lib[6], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Implement);
   var
    Async_rpc_kernel_Implementatio =
      [0,
       Expert,
       [0, lift, lift_deferred],
       sexp_of_t$0,
       description,
       shapes,
       lift$0,
       lift_deferred$0,
       with_authorization,
       update_on_exception];
   runtime.caml_register_global
    (31, Async_rpc_kernel_Implementatio, cst_Async_rpc_kernel_Implement);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Rpc_error
//# unitInfo: Requires: Async_kernel__Deferred, Async_rpc_kernel__Protocol, Core, Core__Error, Core__Info, Core__Sexp, Core__Sexpable, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Rpc_error = "Async_rpc_kernel__Rpc_error",
    cst_async_rpc_kernel = "async_rpc_kernel",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Info = global_data.Core__Info,
    Core = global_data.Core,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Core_Sexp = global_data.Core__Sexp,
    Core_Error = global_data.Core__Error,
    Assert_failure = global_data.Assert_failure,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_rpc_kernel_Protocol = global_data.Async_rpc_kernel__Protocol,
    Core_Sexpable = global_data.Core__Sexpable,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Rpc_error);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][1], "src/rpc_error.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_async_rpc_kernel, "rpc_error.ml");
   var
    _a_ = Async_rpc_kernel_Protocol[4],
    bin_size_t = _a_[1],
    bin_write_t = _a_[2],
    bin_read_t = _a_[3],
    bin_read_t$0 = _a_[4],
    bin_shape_t = _a_[5],
    bin_writer_t = _a_[6],
    bin_reader_t = _a_[7],
    bin_t = _a_[8],
    t_of_sexp = _a_[9],
    sexp_of_t = _a_[10],
    symbol = _a_[11],
    symbol$0 = _a_[12],
    symbol$1 = _a_[13],
    symbol$2 = _a_[14],
    symbol$3 = _a_[15],
    symbol$4 = _a_[16],
    equal = _a_[17],
    compare = _a_[18],
    min = _a_[19],
    max = _a_[20],
    ascending = _a_[21],
    descending = _a_[22],
    between = _a_[23],
    clamp_exn = _a_[24],
    clamp = _a_[25],
    comparator = _a_[26],
    validate_lbound = _a_[27],
    validate_ubound = _a_[28],
    validate_bound = _a_[29],
    _b_ = Async_rpc_kernel_Protocol[4],
    include = caml_call1(Core_Sexpable[1], [0, _b_[9], _b_[10]]),
    of_string = include[1],
    to_string = include[2],
    Rpc =
      [248, "Async_rpc_kernel__Rpc_error.Rpc", runtime.caml_fresh_oo_id(0)],
    _c_ = [0, "src/rpc_error.ml.Rpc"],
    _d_ = [0, "_none_", 0, -1];
   caml_call4
    (Sexplib0_Sexp_conv[72][1],
     0,
     0,
     Rpc,
     function(param){
      if(param[1] !== Rpc)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
      var
       arg1_002 = param[3],
       arg0_001 = param[2],
       res0_003 = caml_call1(sexp_of_t, arg0_001),
       res1_004 = caml_call1(Core_Info[6], arg1_002);
      return [1, [0, _c_, [0, res0_003, [0, res1_004, 0]]]];
     });
   var
    _e_ = [0, "Connection_closed"],
    _f_ = [0, "rpc_version"],
    _g_ = [0, "rpc_name"],
    _h_ = [0, "connection_description"],
    _i_ = [0, "rpc_error"];
   function raise(t, connection_description){
    throw caml_maybe_attach_backtrace([0, Rpc, t, connection_description], 0);
   }
   function sexp_of_t$0(t, get_connection_close_reason){
    if(typeof t !== "number") return caml_call1(sexp_of_t, t);
    var _n_ = caml_call1(get_connection_close_reason, 0);
    return [1, [0, _e_, [0, caml_call1(Core_Sexp[90], _n_), 0]]];
   }
   function to_error
   (t, param, connection_description, connection_close_started){
    var
     rpc_version = param[2],
     rpc_name = param[1],
     rpc_error =
       sexp_of_t$0
        (t,
         function(param){
          var
           close_reason =
             caml_call1(Async_kernel_Deferred[5], connection_close_started);
          return caml_call2(Core[466], Core_Info[6], close_reason);
         }),
     _j_ = [0, [1, [0, _f_, [0, caml_call1(Core[363], rpc_version), 0]]], 0],
     _k_ = [0, [1, [0, _g_, [0, caml_call1(Core[484], rpc_name), 0]]], _j_],
     _l_ =
       [0,
        [1,
         [0, _h_, [0, caml_call1(Core_Info[6], connection_description), 0]]],
        _k_],
     _m_ =
       [1,
        [0, [1, [0, _i_, [0, caml_call1(Core_Sexp[90], rpc_error), 0]]], _l_]];
    return caml_call1(Core_Error[18], _m_);
   }
   caml_call1(Ppx_inline_test_lib[6], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Rpc_error);
   var
    Async_rpc_kernel_Rpc_error =
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       t_of_sexp,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       validate_lbound,
       validate_ubound,
       validate_bound,
       sexp_of_t$0,
       of_string,
       to_string,
       Rpc,
       raise,
       to_error];
   runtime.caml_register_global
    (28, Async_rpc_kernel_Rpc_error, cst_Async_rpc_kernel_Rpc_error);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Rpc_metadata
//# unitInfo: Requires: Async_kernel__Async_kernel_scheduler, Base__Type_equal, Core, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Rpc_metad = "Async_rpc_kernel__Rpc_metadata",
    cst_async_rpc_kernel = "async_rpc_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_kernel_Async_kernel_sche =
      global_data.Async_kernel__Async_kernel_scheduler,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core = global_data.Core,
    Base_Type_equal = global_data.Base__Type_equal;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Rpc_metad);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][1], "src/rpc_metadata.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_async_rpc_kernel, "rpc_metadata.ml");
   var
    sexp_of_t = Core[484],
    local_storage_key =
      caml_call2
       (Base_Type_equal[12][4], "async_rpc_kernel_metadata", sexp_of_t);
   function get(param){
    return caml_call1(Async_kernel_Async_kernel_sche[7], local_storage_key);
   }
   function with_metadata(metadata, f){
    return caml_call3
            (Async_kernel_Async_kernel_sche[6],
             local_storage_key,
             metadata,
             f);
   }
   var Private = [0, with_metadata];
   caml_call1(Ppx_inline_test_lib[6], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Rpc_metad);
   var Async_rpc_kernel_Rpc_metadata = [0, sexp_of_t, get, Private];
   runtime.caml_register_global
    (15, Async_rpc_kernel_Rpc_metadata, cst_Async_rpc_kernel_Rpc_metad);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Rpc_result
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_kernel__Monitor, Async_rpc_kernel__Rpc_error, Base__Exn, Bin_prot__Shape, Bin_shape, Core, Core__Option, Core__Result, Expect_test_collector, Expect_test_common__File, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Rpc_resul = "Async_rpc_kernel__Rpc_result",
    cst_a = "a",
    cst_async_rpc_kernel = "async_rpc_kernel",
    cst_src_rpc_result_ml$0 = "src/rpc_result.ml",
    cst_t$0 = "t";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_rpc_kernel_Rpc_error = global_data.Async_rpc_kernel__Rpc_error,
    Core_Result = global_data.Core__Result,
    Core_Option = global_data.Core__Option,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel = global_data.Async_kernel,
    Base_Exn = global_data.Base__Exn,
    Core = global_data.Core,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Expect_test_common_File = global_data.Expect_test_common__File,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Rpc_resul);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][1], cst_src_rpc_result_ml$0);
   caml_call2(Ppx_inline_test_lib[5], cst_async_rpc_kernel, "rpc_result.ml");
   var
    _a_ = Async_rpc_kernel_Rpc_error[5],
    _b_ = caml_call1(Bin_shape[3][1], cst_a),
    _c_ = caml_call1(Bin_shape[4][1], "src/rpc_result.ml:4:13"),
    _d_ = caml_call2(Bin_prot_Shape[11], _c_, _b_),
    _e_ = caml_call1(caml_call1(Core_Result[1], _d_), _a_),
    _f_ = [0, caml_call1(Bin_shape[3][1], cst_a), 0],
    _g_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$0), _f_, _e_], 0],
    _h_ = caml_call1(Bin_shape[4][1], "src/rpc_result.ml:4:0"),
    group = caml_call2(Bin_prot_Shape[2], _h_, _g_),
    Expect_test_collector$0 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_t = cst_t$0,
    cst_src_rpc_result_ml = cst_src_rpc_result_ml$0,
    _i_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_rpc_result_ml$0),
       8,
       148,
       159,
       197],
    _j_ =
      [0,
       [0,
        [0, ""],
        [1, " 58734a63a5c83c1b7cbfc3fedfa3ae82 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_rpc_result_ml$0),
         8,
         148,
         152,
         158],
        _i_],
       0],
    _k_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_rpc_result_ml$0),
       6,
       89,
       89,
       198],
    _l_ =
      caml_call1
       (Expect_test_common_File[4][3], "9667b25f9df3583d34788e0837d3a945");
   caml_call9
    (Expect_test_collector$0[3],
     _l_,
     _k_,
     cst_src_rpc_result_ml$0,
     0,
     0,
     _j_,
     0,
     Inline_test_config,
     function(param){
      var
       a = Core[521],
       _v_ = caml_call1(Bin_shape[2][1], cst_t),
       _w_ = caml_call1(caml_call2(Bin_prot_Shape[10], group, _v_), [0, a, 0]),
       _x_ = caml_call1(Bin_prot_Shape[15], _w_),
       _y_ = caml_call1(Bin_shape[19][4], _x_);
      caml_call1(Core[31], _y_);
      var
       _z_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_rpc_result_ml),
          8,
          148,
          152,
          158];
      return caml_call1(Expect_test_collector$0[1], _z_);
     });
   var _m_ = [0, "exn"], _n_ = [0, "location"];
   function sexp_of_located_error(param){
    var
     exn_004 = param[2],
     location_002 = param[1],
     arg_005 = caml_call1(Base_Exn[1], exn_004),
     bnds_001 = [0, [1, [0, _m_, [0, arg_005, 0]]], 0],
     arg_003 = caml_call1(Core[484], location_002),
     bnds_001$0 = [0, [1, [0, _n_, [0, arg_003, 0]]], bnds_001];
    return [1, bnds_001$0];
   }
   function uncaught_exn(location, exn){
    return [1, [2, sexp_of_located_error([0, location, exn])]];
   }
   function bin_io_exn(location, exn){
    return [1, [0, sexp_of_located_error([0, location, exn])]];
   }
   function try_with(on_background_exception, run, location, f){
    if(on_background_exception)
     var
      callback = on_background_exception[1],
      rest = [0, 747848894, callback];
    else
     var rest = 3804260;
    var
     _t_ = [0, caml_call2(Core_Option[35], run, 523273847)],
     x = caml_call7(Async_kernel_Monitor[16], 0, 0, 0, 0, _t_, [0, rest], f);
    function join(param){
     if(0 === param[0]){var x = param[1]; return x;}
     var exn = param[1];
     return uncaught_exn(location, exn);
    }
    var match = caml_call1(Async_kernel_Deferred[5], x);
    if(! match) return caml_call2(Async_kernel[21], x, join);
    var x$0 = match[1], _u_ = join(x$0);
    return caml_call1(Async_kernel[19], _u_);
   }
   function or_error
   (rpc_description, connection_description, connection_close_started){
    var _o_ = Async_rpc_kernel_Rpc_error[34];
    function _p_(_s_){
     return caml_call4
             (_o_,
              _s_,
              rpc_description,
              connection_description,
              connection_close_started);
    }
    var _q_ = Core_Result[40];
    return function(_r_){return caml_call2(_q_, _r_, _p_);};
   }
   caml_call1(Ppx_inline_test_lib[6], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Rpc_resul);
   var
    Async_rpc_kernel_Rpc_result =
      [0, uncaught_exn, bin_io_exn, try_with, or_error];
   runtime.caml_register_global
    (40, Async_rpc_kernel_Rpc_result, cst_Async_rpc_kernel_Rpc_resul);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Util
//# unitInfo: Requires: Async_rpc_kernel__Rpc_result, Core, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Util = "Async_rpc_kernel__Util",
    cst_async_rpc_kernel = "async_rpc_kernel",
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Async_rpc_kernel_Rpc_result = global_data.Async_rpc_kernel__Rpc_result,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Util);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][1], "src/util.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_async_rpc_kernel, "util.ml");
   var
    _a_ =
      [0,
       [11,
        "message length (",
        [4,
         0,
         0,
         0,
         [11, ") did not match expected length (", [4, 0, 0, 0, [12, 41, 0]]]]],
       "message length (%d) did not match expected length (%d)"];
   function bin_read_from_bigstring
   (bin_reader_t, add_len, buf, pos_ref, len, location){
    try{
     var
      init_pos = pos_ref[1],
      data = caml_call2(bin_reader_t[1], buf, pos_ref);
     if(add_len)
      var add_len$0 = add_len[1], add_len$1 = caml_call1(add_len$0, data);
     else
      var add_len$1 = 0;
     if
      (caml_call2(Core[92], (pos_ref[1] - init_pos | 0) + add_len$1 | 0, len))
      caml_call4(Core[240], _a_, pos_ref[1] - init_pos | 0, len, 0);
     var _b_ = [0, data];
     return _b_;
    }
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     return caml_call2(Async_rpc_kernel_Rpc_result[2], location, e);
    }
   }
   caml_call1(Ppx_inline_test_lib[6], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Util);
   var Async_rpc_kernel_Util = [0, bin_read_from_bigstring];
   runtime.caml_register_global
    (14, Async_rpc_kernel_Util, cst_Async_rpc_kernel_Util);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Implementations
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_kernel__Ivar, Async_kernel__Monitor, Async_kernel__Pipe, Async_kernel__Scheduler, Async_rpc_kernel__Description, Async_rpc_kernel__Implementation, Async_rpc_kernel__Implementation_types, Async_rpc_kernel__Nat0, Async_rpc_kernel__On_exception, Async_rpc_kernel__Protocol, Async_rpc_kernel__Rpc_error, Async_rpc_kernel__Rpc_metadata, Async_rpc_kernel__Rpc_result, Async_rpc_kernel__Transport, Async_rpc_kernel__Transport_intf, Async_rpc_kernel__Util, Async_rpc_kernel__Writer_with_length, Base__Backtrace, Base__Exn, Bin_prot__Common, Core, Core__Bag, Core__Bigstring, Core__Error, Core__Hash_set, Core__Hashtbl, Core__Info, Core__List, Core__Option, Core__Or_error, Core__Queue, Core__Result, Core__Sexp, Eager_deferred, Expect_test_collector, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Implement = "Async_rpc_kernel__Implementations",
    cst$0 = "_",
    cst_async_rpc_kernel = "async_rpc_kernel",
    cst_src_implementations_ml = "src/implementations.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    v = [0, 17724, 0],
    arg_018 = [0, cst$0],
    Async_rpc_kernel_Writer_with_l =
      global_data.Async_rpc_kernel__Writer_with_length,
    Async_rpc_kernel_Protocol = global_data.Async_rpc_kernel__Protocol,
    Async_rpc_kernel_Transport = global_data.Async_rpc_kernel__Transport,
    Core_Error = global_data.Core__Error,
    Async_rpc_kernel_Rpc_result = global_data.Async_rpc_kernel__Rpc_result,
    Async_rpc_kernel_Nat0 = global_data.Async_rpc_kernel__Nat0,
    Async_rpc_kernel_Implementatio$0 =
      global_data.Async_rpc_kernel__Implementation,
    Core = global_data.Core,
    Async_rpc_kernel_Transport_int =
      global_data.Async_rpc_kernel__Transport_intf,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Core_Or_error = global_data.Core__Or_error,
    Async_rpc_kernel_Description = global_data.Async_rpc_kernel__Description,
    Assert_failure = global_data.Assert_failure,
    Core_Hash_set = global_data.Core__Hash_set,
    Core_List = global_data.Core__List,
    Async_rpc_kernel_Rpc_metadata = global_data.Async_rpc_kernel__Rpc_metadata,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_rpc_kernel_Rpc_error = global_data.Async_rpc_kernel__Rpc_error,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_kernel = global_data.Async_kernel,
    Async_rpc_kernel_On_exception = global_data.Async_rpc_kernel__On_exception,
    Stdlib = global_data.Stdlib,
    Eager_deferred = global_data.Eager_deferred,
    Async_rpc_kernel_Util = global_data.Async_rpc_kernel__Util,
    Core_Result = global_data.Core__Result,
    Base_Backtrace = global_data.Base__Backtrace,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Core_Option = global_data.Core__Option,
    Base_Exn = global_data.Base__Exn,
    Core_Bag = global_data.Core__Bag,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Core_Queue = global_data.Core__Queue,
    Async_rpc_kernel_Implementatio =
      global_data.Async_rpc_kernel__Implementation_types,
    Stdlib_String = global_data.Stdlib__String,
    Core_Bigstring = global_data.Core__Bigstring,
    Async_kernel_Scheduler = global_data.Async_kernel__Scheduler,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Core_Sexp = global_data.Core__Sexp,
    Core_Info = global_data.Core__Info,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Implement);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][1], cst_src_implementations_ml);
   caml_call2
    (Ppx_inline_test_lib[5], cst_async_rpc_kernel, "implementations.ml");
   var
    symbol = Core_Result[17],
    _a_ = [0, cst$0],
    _b_ = [0, "Pipe"],
    _c_ = [0, "Direct"],
    _d_ = [0, "packed_self"],
    _e_ = [0, "last_dispatched_implementation"],
    _f_ = [0, "connection_close_started"],
    _g_ = [0, "connection_description"],
    _h_ = [0, "connection_state"],
    _i_ = [0, "stopped"],
    _j_ = [0, "open_streaming_responses"],
    _k_ = [0, "writer"],
    _l_ = [0, "implementations"],
    _m_ = [0, "reason"],
    _n_ = [0, "error"],
    cst_Failed_to_send_write_error = "Failed to send write error to client";
   function descriptions(t){return caml_call1(Core_Hashtbl[66], t[1]);}
   function sexp_of_streaming_response(param){
    if(0 === param[0]){
     var
      arg0_002 = param[1],
      res0_003 =
        caml_call2
         (Async_kernel_Pipe[4][1], function(param){return _a_;}, arg0_002);
     return [1, [0, _b_, [0, res0_003, 0]]];
    }
    var
     arg0_004 = param[1],
     res0_005 = caml_call1(Sexplib0_Sexp_conv[23], arg0_004);
    return [1, [0, _c_, [0, res0_005, 0]]];
   }
   function sexp_of_t(param){
    var
     x_033 = param[1],
     open_streaming_responses_013 = x_033[3],
     writer_011 = x_033[2],
     implementations_009 = x_033[1],
     stopped_015 = x_033[4],
     connection_close_started_021 = x_033[7],
     connection_description_019 = x_033[6],
     last_dispatched_implementation = x_033[8],
     packed_self_029 = x_033[9],
     arg_030 = caml_call1(Sexplib0_Sexp_conv[23], packed_self_029),
     bnds_008 = [0, [1, [0, _d_, [0, arg_030, 0]]], 0],
     arg_024 =
       caml_call2
        (Core[466],
         function(param){
          var
           arg1_026 = param[2],
           arg0_025 = param[1],
           res0_027 = caml_call1(Async_rpc_kernel_Description[9], arg0_025),
           res1_028 = caml_call1(Sexplib0_Sexp_conv[23], arg1_026);
          return [1, [0, res0_027, [0, res1_028, 0]]];
         },
         last_dispatched_implementation),
     bnds_008$0 = [0, [1, [0, _e_, [0, arg_024, 0]]], bnds_008],
     arg_022 =
       caml_call2
        (Async_kernel_Deferred[1], Core_Info[6], connection_close_started_021),
     bnds_008$1 = [0, [1, [0, _f_, [0, arg_022, 0]]], bnds_008$0],
     arg_020 = caml_call1(Core_Info[6], connection_description_019),
     bnds_008$2 = [0, [1, [0, _g_, [0, arg_020, 0]]], bnds_008$1],
     bnds_008$3 = [0, [1, [0, _h_, [0, arg_018, 0]]], bnds_008$2],
     arg_016 = caml_call1(Core[309], stopped_015),
     bnds_008$4 = [0, [1, [0, _i_, [0, arg_016, 0]]], bnds_008$3],
     arg_014 =
       caml_call3
        (Core_Hashtbl[3],
         Async_rpc_kernel_Protocol[2][10],
         sexp_of_streaming_response,
         open_streaming_responses_013),
     bnds_008$5 = [0, [1, [0, _j_, [0, arg_014, 0]]], bnds_008$4],
     arg_012 = caml_call1(Async_rpc_kernel_Transport[3][1], writer_011),
     bnds_008$6 = [0, [1, [0, _k_, [0, arg_012, 0]]], bnds_008$5],
     arg_010 = caml_call1(Sexplib0_Sexp_conv[23], implementations_009),
     bnds_008$7 = [0, [1, [0, _l_, [0, arg_010, 0]]], bnds_008$6];
    return [1, bnds_008$7];
   }
   function handle_send_result(t, id, result){
    if(typeof result === "number") return 0;
    if(0 === result[0]) return 0;
    var
     sexp =
       caml_call2(Async_rpc_kernel_Transport_int[2][2], Core[534], result),
     data = [1, [0, id, [1, [1, sexp]]]],
     x_034 =
       caml_call3
        (Async_rpc_kernel_Transport[3][10],
         t[2],
         Async_rpc_kernel_Protocol[12][19],
         data);
    if(typeof x_034 !== "number" && 1 === x_034[0]){
     var
      _aQ_ =
        [0,
         [1,
          [0,
           _m_,
           [0,
            caml_call2(Async_rpc_kernel_Transport_int[2][2], Core[534], x_034),
            0]]],
         0],
      _aR_ =
        [0,
         [1,
          [0, [1, [0, _n_, [0, caml_call1(Core_Sexp[90], sexp), 0]]], _aQ_]],
         0],
      _aS_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Failed_to_send_write_error),
          _aR_]];
     return caml_call1(Core[255], _aS_);
    }
    return 0;
   }
   function write_message(t, bin_writer, x, id){
    var _aP_ = 1 - t[4];
    return _aP_
            ? handle_send_result
              (t,
               id,
               caml_call3
                (Async_rpc_kernel_Transport[3][10], t[2], bin_writer, x))
            : _aP_;
   }
   function write_response(t, id, bin_writer_data, data){
    var
     _aO_ = caml_call1(Async_rpc_kernel_Writer_with_l[1], bin_writer_data),
     bin_writer = caml_call1(Async_rpc_kernel_Protocol[12][4], _aO_);
    return write_message(t, bin_writer, [1, [0, id, data]], id);
   }
   function bin_write_void(buf, pos, param){return pos;}
   var
    buffer = caml_call2(Core_Bigstring[117], 0, 32),
    stream_response_data_header_as = 35449,
    _p_ = [0, cst_src_implementations_ml, 190, 6],
    _q_ = [0, cst_src_implementations_ml, 189, 6];
   caml_call8
    (Ppx_inline_test_lib[8],
     Inline_test_config,
     "stream_response_* constants are correct",
     0,
     cst_src_implementations_ml,
     182,
     4,
     391,
     function(param){
      var
       len =
         caml_call4
          (Async_rpc_kernel_Protocol[11][3], bin_write_void, buffer, 0, v);
      if(len !== 4)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _q_], 1);
      if
       (runtime.caml_equal
         (caml_call2(Core_Bigstring[101], buffer, 0),
          stream_response_data_header_as))
       return 0;
      throw caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1);
     });
   function bin_write_string_no_length(buf, pos, str){
    var str_len = caml_ml_string_length(str);
    caml_call1(Bin_prot_Common[3], pos);
    var next = pos + str_len | 0;
    caml_call2(Bin_prot_Common[5], buf, next);
    runtime.bin_prot_blit_string_buf_stub(0, str, pos, buf, str_len);
    return next;
   }
   function bin_size_nat0_header(param){
    var
     header_prefix = param[1],
     data_len = param[2],
     stream_response_data_nat0_len =
       4 + caml_call1(Async_rpc_kernel_Nat0[1], data_len) | 0,
     stream_response_data_len = stream_response_data_nat0_len + data_len | 0,
     _aN_ = caml_call1(Async_rpc_kernel_Nat0[9], stream_response_data_len);
    return (caml_ml_string_length(header_prefix)
           + caml_call1(Async_rpc_kernel_Nat0[1], _aN_)
           | 0)
           + stream_response_data_nat0_len
           | 0;
   }
   function bin_write_nat0_header(buf, pos, param){
    var
     header_prefix = param[1],
     data_len = param[2],
     pos$0 = bin_write_string_no_length(buf, pos, header_prefix),
     stream_response_data_len =
       (4 + caml_call1(Async_rpc_kernel_Nat0[1], data_len) | 0) + data_len | 0,
     _aM_ = caml_call1(Async_rpc_kernel_Nat0[9], stream_response_data_len),
     pos$1 = caml_call3(Async_rpc_kernel_Nat0[2], buf, pos$0, _aM_),
     next = pos$1 + 4 | 0;
    caml_call2(Bin_prot_Common[5], buf, next);
    caml_call3
     (Core_Bigstring[103], buf, pos$1, stream_response_data_header_as);
    return caml_call3(Async_rpc_kernel_Nat0[2], buf, next, data_len);
   }
   var
    bin_writer_nat0_header = [0, bin_size_nat0_header, bin_write_nat0_header];
   function bin_size_message(param){
    var t = param[1], _aL_ = t[2];
    return bin_size_nat0_header(t) + _aL_ | 0;
   }
   function bin_write_message(buf, pos, param){
    var
     data = param[2],
     t = param[1],
     pos$0 = bin_write_nat0_header(buf, pos, t);
    return caml_call3(t[3][2], buf, pos$0, data);
   }
   var bin_writer_message = [0, bin_size_message, bin_write_message];
   function bin_size_message_as_string(param){
    var t = param[1], _aK_ = t[2];
    return bin_size_nat0_header(t) + _aK_ | 0;
   }
   function bin_write_message_as_string(buf, pos, param){
    var
     str = param[2],
     t = param[1],
     pos$0 = bin_write_nat0_header(buf, pos, t);
    return bin_write_string_no_length(buf, pos$0, str);
   }
   var
    bin_writer_message_as_string =
      [0, bin_size_message_as_string, bin_write_message_as_string],
    _o_ = [0, 0],
    _r_ = [0, 3456156],
    cst_attempted_to_start_writer_ =
      "attempted to start writer which was already started",
    _s_ = [0, " authorization", 0],
    cst_server_side = "server-side ",
    cst_streaming_rpc_server_side_ =
      "streaming_rpc server-side query un-bin-io'ing",
    cst_server_side_pipe_rpc_compu = "server-side pipe_rpc computation",
    cst_pipe_rpc = "pipe_rpc",
    _t_ = [0, 3456156],
    cst_server_side_one_way_rpc_me =
      "server-side one-way rpc message un-bin-io'ing",
    cst_server_side_one_way_rpc_co = "server-side one-way rpc computation",
    cst_server_side_one_way_rpc_ex =
      "server-side one-way rpc expert computation",
    cst_server_side_rpc_query_un_b = "server-side rpc query un-bin-io'ing",
    cst_rpc = "rpc",
    cst_server_side_rpc_computatio = "server-side rpc computation",
    _u_ = [0, 3903734],
    _v_ = [0, "backtrace"],
    _w_ = [0, "exn"],
    cst_server_side_blocking_rpc_c = "server-side blocking rpc computation",
    _x_ = [0, "location"],
    _y_ = [0, 3903734],
    cst_server_side_rpc_expert_com = "server-side rpc expert computation",
    _z_ = [0, 0],
    _A_ = [0, 0],
    cst_Expert_implementation_did_ = "Expert implementation did not reply",
    _B_ = [0, 0],
    cst_rpc_expert = "rpc expert",
    cst_server_side_pipe_rpc_strea =
      "server-side pipe_rpc stream_query un-bin-io'ing",
    _C_ = [0, cst_src_implementations_ml, 804, 4],
    _D_ = [0, [0, 0]],
    _E_ = [0, [0, 0]],
    _F_ = [0, [0, 0]],
    _G_ = [0, 10],
    _H_ = [0, 10],
    _I_ = [0, 10];
   function prep_write(t, data){
    var _aJ_ = caml_call1(t[3][1], data);
    t[2] = caml_call1(Async_rpc_kernel_Nat0[9], _aJ_);
    return bin_writer_message;
   }
   function is_closed(t){return caml_call1(Async_kernel_Ivar[17], t[3]);}
   function closed(t){return caml_call1(Async_kernel_Ivar[18], t[3]);}
   function flushed(t){
    var instance = t[4][1];
    return caml_call1(Async_rpc_kernel_Transport[3][8], instance[2]);
   }
   function bin_writer(t){return t[6][3];}
   function write_eof(param){
    var query_id = param[5], instance = param[4][1];
    return write_response
            (instance, query_id, Async_rpc_kernel_Protocol[11][17], _r_);
   }
   function write_message$0(t, x){
    var bin_writer_message = prep_write(t[6], x), instance = t[4][1];
    return write_message(instance, bin_writer_message, [0, t[6], x], t[5]);
   }
   function close_without_removing_from_in(t){
    var _aI_ = 1 - caml_call1(Async_kernel_Ivar[17], t[3]);
    if(! _aI_) return _aI_;
    caml_call2(Async_kernel_Ivar[14], t[3], 0);
    var groups = t[7];
    if(1 - caml_call1(Core_Bag[6], groups))
     caml_call1
      (Async_kernel_Scheduler[71][2],
       function(param){
        var match = caml_call1(Core_Bag[28], groups);
        if(! match) return 0;
        var
         match$0 = match[1],
         element_in_group = match$0[2],
         group = match$0[1];
        caml_call2(Core_Bag[26], group[1], element_in_group);
        caml_call2(Core_Hashtbl[31], group[2], t[1]);
        return 1;
       });
    return t[2] ? 0 : write_eof(t);
   }
   function close(t){
    var query_id = t[5], instance = t[4][1];
    close_without_removing_from_in(t);
    return caml_call2(Core_Hashtbl[31], instance[3], query_id);
   }
   function write_without_pushback(t, x){
    if(caml_call1(Async_kernel_Ivar[17], t[3])) return -1025106484;
    var match = t[2];
    if(match){
     var q = match[1];
     caml_call2(Core_Queue[41], q, [0, x]);
    }
    else
     write_message$0(t, x);
    return 17724;
   }
   function write(t, x){
    var instance = t[4][1];
    return 17724 <= write_without_pushback(t, x)
            ? [0,
              933108739,
              caml_call1(Async_rpc_kernel_Transport[3][8], instance[2])]
            : -1025106484;
   }
   function write_without_pushback$0(t$0, buf, pos, len){
    if(caml_call1(Async_kernel_Ivar[17], t$0[3])) return -1025106484;
    var match = t$0[2];
    if(match){
     var
      q = match[1],
      _aH_ = [1, caml_call3(Core_Bigstring[28][4], buf, pos, len)];
     caml_call2(Core_Queue[41], q, _aH_);
    }
    else{
     var t = t$0[6];
     t[2] = caml_call1(Async_rpc_kernel_Nat0[9], len);
     var instance = t$0[4][1], id = t$0[5], x = t$0[6];
     if(1 - instance[4])
      handle_send_result
       (instance,
        id,
        caml_call6
         (Async_rpc_kernel_Transport[3][11],
          instance[2],
          bin_writer_nat0_header,
          x,
          buf,
          pos,
          len));
    }
    return 17724;
   }
   function write$0(t, buf, pos, len){
    var instance = t[4][1];
    return 17724 <= write_without_pushback$0(t, buf, pos, len)
            ? [0,
              933108739,
              caml_call1(Async_rpc_kernel_Transport[3][8], instance[2])]
            : -1025106484;
   }
   function maybe_dispatch_on_exception
   (result, on_exception, close_connection_monitor){
    if(1 === result[0]){
     var match = result[1];
     if(typeof match !== "number" && 2 === match[0]){
      var sexp = match[1], _aG_ = caml_call1(Base_Exn[5], sexp);
      return caml_call3
              (Async_rpc_kernel_On_exception[4],
               on_exception,
               close_connection_monitor,
               _aG_);
     }
    }
    return 0;
   }
   function authorization_failure_result(error, rpc_kind){
    var
     exn = caml_call1(Core_Error[26], error),
     _aF_ =
       caml_call2
        (Stdlib_String[7], cst, [0, cst_server_side, [0, rpc_kind, _s_]]);
    return caml_call2(Async_rpc_kernel_Rpc_result[1], _aF_, exn);
   }
   function apply_implementation
   (t,
    implementation,
    query,
    read_buffer,
    read_buffer_pos_ref,
    close_connection_monitor,
    on_exception){
    var id = query[3];
    switch(implementation[0]){
      case 0:
       var
        f$3 = implementation[2],
        bin_query_reader$0 = implementation[1],
        query_contents =
          caml_call6
           (Async_rpc_kernel_Util[1],
            bin_query_reader$0,
            0,
            read_buffer,
            read_buffer_pos_ref,
            query[5],
            cst_server_side_one_way_rpc_me);
       if(0 !== query_contents[0]) return [0, query_contents];
       var q = query_contents[1];
       try{caml_call2(f$3, t[5], q); var _ai_ = 0; return _ai_;}
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        caml_call3
         (Async_rpc_kernel_On_exception[4],
          on_exception,
          close_connection_monitor,
          exn);
        return on_exception[2]
                ? [0,
                  caml_call2
                   (Async_rpc_kernel_Rpc_result[1],
                    cst_server_side_one_way_rpc_co,
                    exn)]
                : 0;
       }
      case 1:
       var f$4 = implementation[1];
       try{
        var len$0 = query[5];
        caml_call4(f$4, t[5], read_buffer, read_buffer_pos_ref[1], len$0);
        read_buffer_pos_ref[1] = read_buffer_pos_ref[1] + len$0 | 0;
        var _aj_ = 0;
        return _aj_;
       }
       catch(exn){
        var exn$0 = caml_wrap_exception(exn);
        caml_call3
         (Async_rpc_kernel_On_exception[4],
          on_exception,
          close_connection_monitor,
          exn$0);
        return on_exception[2]
                ? [0,
                  caml_call2
                   (Async_rpc_kernel_Rpc_result[1],
                    cst_server_side_one_way_rpc_ex,
                    exn$0)]
                : 0;
       }
      case 2:
       var
        result_mode = implementation[4],
        f$5 = implementation[3],
        bin_response_writer = implementation[2],
        bin_query_reader$1 = implementation[1],
        query_contents$0 =
          caml_call6
           (Async_rpc_kernel_Util[1],
            bin_query_reader$1,
            0,
            read_buffer,
            read_buffer_pos_ref,
            query[5],
            cst_server_side_rpc_query_un_b),
        or_not_authorized_to_rpc_resul =
          function(param){
           if(0 === param[0]){var result = param[1]; return [0, result];}
           var error = param[1];
           return authorization_failure_result(error, cst_rpc);
          };
       if(result_mode){
        var
         data$0 =
           caml_call4
            (Async_rpc_kernel_Rpc_result[3],
             on_exception[1],
             _u_,
             cst_server_side_rpc_computatio,
             function(param){
              if(0 === query_contents$0[0]){
               var
                query = query_contents$0[1],
                _aE_ = caml_call2(f$5, t[5], query);
               return caml_call2
                       (Eager_deferred[7], _aE_, or_not_authorized_to_rpc_resul);
              }
              var err = query_contents$0[1];
              return caml_call1(Async_kernel_Deferred[12], [1, err]);
             }),
         match$0 = caml_call1(Async_kernel_Deferred[5], data$0);
        if(match$0){
         var data$1 = match$0[1];
         write_response(t, id, bin_response_writer, data$1);
         maybe_dispatch_on_exception
          (data$1, on_exception, close_connection_monitor);
        }
        else
         caml_call2
          (Async_kernel[16],
           data$0,
           function(data){
            write_response(t, id, bin_response_writer, data);
            return maybe_dispatch_on_exception
                    (data, on_exception, close_connection_monitor);
           });
       }
       else
        try{
         write_response
          (t,
           id,
           bin_response_writer,
           caml_call2
            (Core_Result[20],
             query_contents$0,
             function(query){
              return or_not_authorized_to_rpc_resul
                      (caml_call2(f$5, t[5], query));
             }));
        }
        catch(exn){
         var
          exn$1 = caml_wrap_exception(exn),
          backtrace = caml_call1(Base_Backtrace[6][4], 0),
          _ak_ =
            [0,
             [1, [0, _v_, [0, caml_call1(Base_Backtrace[1], backtrace), 0]]],
             0],
          _al_ =
            [0, [1, [0, _w_, [0, caml_call1(Core[539], exn$1), 0]]], _ak_],
          sexp =
            [1,
             [0,
              [1,
               [0,
                _x_,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7], cst_server_side_blocking_rpc_c),
                 0]]],
              _al_]];
         write_response(t, id, bin_response_writer, [1, [2, sexp]]);
         caml_call3
          (Async_rpc_kernel_On_exception[4],
           on_exception,
           close_connection_monitor,
           exn$1);
        }
       return 0;
      case 3:
       var
        result_mode$0 = implementation[2],
        f$6 = implementation[1],
        responder =
          caml_call2
           (Async_rpc_kernel_Implementatio$0[1][1][2], query[3], t[2]),
        match$1 = on_exception[1];
       if(match$1)
        var callback = match$1[1], rest = [0, 747848894, callback];
       else
        var rest = 3804260;
       var
        d =
          caml_call7
           (Async_kernel_Monitor[16],
            0,
            0,
            0,
            0,
            _y_,
            [0, rest],
            function(param){
             var
              len = query[5],
              result =
                caml_call5
                 (f$6,
                  t[5],
                  responder,
                  read_buffer,
                  read_buffer_pos_ref[1],
                  len);
             return result_mode$0
                     ? result
                     : caml_call1(Async_kernel_Deferred[12], result);
            }),
        computation_failure_result =
          function(exn){
           return caml_call2
                   (Async_rpc_kernel_Rpc_result[1],
                    cst_server_side_rpc_expert_com,
                    exn);
          },
        handle_exn =
          function(result){
           var
            result$0 =
              responder[3]
               ? result
               : (write_response(t, id, Core[524], result), _z_);
           return result$0;
          },
        check_responded =
          function(param){
           return responder[3]
                   ? _A_
                   : handle_exn
                     (computation_failure_result
                       ([0, Stdlib[7], cst_Expert_implementation_did_]));
          },
        d$0 =
          caml_call2
           (Eager_deferred[12][4][3],
            d,
            function(param){
             if(0 !== param[0]){
              var
               exn = param[1],
               result$0 = handle_exn(computation_failure_result(exn));
              caml_call3
               (Async_rpc_kernel_On_exception[4],
                on_exception,
                close_connection_monitor,
                exn);
              return result$0;
             }
             var match = param[1];
             if(0 !== match[0]){
              var error = match[1];
              return handle_exn
                      (authorization_failure_result(error, cst_rpc_expert));
             }
             var result = match[1];
             if(result)
              var d = result[1], d$0 = d;
             else
              var d$0 = Async_kernel_Deferred[18];
             return caml_call1(Async_kernel_Deferred[7], d$0)
                     ? check_responded(0)
                     : (caml_call2
                        (Async_kernel[12],
                         d$0,
                         function(param){
                          var
                           _ay_ = check_responded(0),
                           _az_ = t[7],
                           _aA_ = t[6],
                           _aB_ = query[2],
                           _aC_ =
                             [0,
                              caml_call1(Async_rpc_kernel_Protocol[1][12], query[1]),
                              _aB_],
                           _aD_ =
                             caml_call4
                              (Async_rpc_kernel_Rpc_result[4], _aC_, _aA_, _az_, _ay_);
                          return caml_call1(Core[249], _aD_);
                         }),
                       _B_);
            }),
        match$2 = caml_call1(Async_kernel_Deferred[5], d$0);
       if(! match$2)
        return [1,
                caml_call2
                 (Async_kernel[22][3],
                  d$0,
                  function(r){
                   var
                    _at_ = t[7],
                    _au_ = t[6],
                    _av_ = query[2],
                    _aw_ =
                      [0,
                       caml_call1(Async_rpc_kernel_Protocol[1][12], query[1]),
                       _av_],
                    _ax_ =
                      caml_call4
                       (Async_rpc_kernel_Rpc_result[4], _aw_, _au_, _at_, r);
                   return caml_call1(Core[249], _ax_);
                  })];
       var result = match$2[1];
       return 0 === result[0] ? 0 : [0, result];
      default:
       var
        streaming_rpc = implementation[1],
        stream_query =
          caml_call6
           (Async_rpc_kernel_Util[1],
            Async_rpc_kernel_Protocol[9][14],
            [0,
             function(param){
              if(typeof param === "number") return 0;
              var len = param[2];
              return len;
             }],
            read_buffer,
            read_buffer_pos_ref,
            query[5],
            cst_server_side_pipe_rpc_strea);
       if(0 === stream_query[0]){
        var match$3 = stream_query[1];
        if(typeof match$3 === "number"){
         var _am_ = caml_call2(Core_Hashtbl[55], t[3], query[3]);
         caml_call2
          (Core_Option[42],
           _am_,
           function(param){
            if(0 === param[0]){
             var pipe = param[1];
             return caml_call1(Async_kernel_Pipe[16], pipe);
            }
            var w = param[1];
            return close(w);
           });
        }
        else{
         var
          len$1 = match$3[2],
          impl = streaming_rpc[4],
          bin_update_writer = streaming_rpc[3],
          bin_init_writer = streaming_rpc[2],
          bin_query_reader = streaming_rpc[1],
          data =
            caml_call6
             (Async_rpc_kernel_Util[1],
              bin_query_reader,
              0,
              read_buffer,
              read_buffer_pos_ref,
              len$1,
              cst_streaming_rpc_server_side_),
          instance = t[9][1],
          x = [1, [0, id, _o_]],
          len =
            caml_call4
             (Async_rpc_kernel_Protocol[12][3], bin_write_void, buffer, 0, x),
          header_prefix = caml_call3(Core_Bigstring[28][4], buffer, 0, len),
          stream_writer =
            [0,
             header_prefix,
             caml_call1(Async_rpc_kernel_Nat0[9], 0),
             bin_update_writer];
         if(0 === impl[0])
          var f = impl[1], impl_with_state = [0, 892411982, f];
         else{
          var
           f$2 = impl[1],
           _ae_ = caml_call1(Core_Bag[22], 0),
           _af_ = t[9],
           _ag_ = caml_call1(Async_kernel_Ivar[12], 0),
           _ah_ = [0, caml_call2(Core_Queue[62], 0, 0)],
           writer$0 =
             [0,
              caml_call1(Async_rpc_kernel_Implementatio[1][45], 0),
              _ah_,
              _ag_,
              _af_,
              id,
              stream_writer,
              _ae_];
          caml_call3(Core_Hashtbl[36], t[3], id, [1, writer$0]);
          var impl_with_state = [0, -251740343, [0, f$2, writer$0]];
         }
         var
          run_impl =
            function(impl, split_ok, handle_ok){
             var
              result =
                caml_call4
                 (Async_rpc_kernel_Rpc_result[3],
                  on_exception[1],
                  0,
                  cst_server_side_pipe_rpc_compu,
                  function(param){
                   var err = caml_call2(symbol, data, impl);
                   if(0 !== err[0]) return caml_call1(Async_kernel[19], err);
                   var
                    d = err[1],
                    match = caml_call1(Async_kernel_Deferred[5], d);
                   if(! match)
                    return caml_call2
                            (Async_kernel[22][3], d, function(x){return [0, x];});
                   var d$0 = match[1];
                   return caml_call1(Async_kernel[19], [0, d$0]);
                  });
             return caml_call2
                     (Eager_deferred[24],
                      result,
                      function(param){
                       if(0 === param[0]){
                        var match = param[1];
                        if(0 !== match[0]){
                         var error$0 = match[1];
                         caml_call2(Core_Hashtbl[31], t[3], id);
                         return write_response
                                 (t,
                                  id,
                                  bin_init_writer,
                                  authorization_failure_result(error$0, cst_pipe_rpc));
                        }
                        var match$0 = match[1];
                        if(0 === match$0[0]){
                         var
                          ok = match$0[1],
                          match$1 = caml_call1(split_ok, ok),
                          rest = match$1[2],
                          initial = match$1[1];
                         write_response(t, id, bin_init_writer, [0, initial]);
                         return caml_call1(handle_ok, rest);
                        }
                        var error = match$0[1];
                        caml_call2(Core_Hashtbl[31], t[3], id);
                        return write_response(t, id, bin_init_writer, [0, error]);
                       }
                       var err = param[1];
                       if(typeof err !== "number" && 2 === err[0]){
                        var sexp = err[1];
                        caml_call2(Core_Hashtbl[31], t[3], id);
                        write_response(t, id, bin_init_writer, [1, err]);
                        var _as_ = caml_call1(Base_Exn[5], sexp);
                        return caml_call3
                                (Async_rpc_kernel_On_exception[4],
                                 on_exception,
                                 close_connection_monitor,
                                 _as_);
                       }
                       caml_call2(Core_Hashtbl[31], t[3], id);
                       return write_response(t, id, bin_init_writer, [1, err]);
                      });
            };
         if(892411982 <= impl_with_state[1]){
          var f$0 = impl_with_state[2];
          run_impl
           (function(data){return caml_call2(f$0, t[5], data);},
            function(_aq_){return _aq_;},
            function(pipe_r){
             caml_call3(Core_Hashtbl[36], t[3], id, [0, pipe_r]);
             var
              _an_ =
                caml_call4
                 (Async_rpc_kernel_Transport[3][15],
                  t[2],
                  0,
                  pipe_r,
                  function(data){
                   var bin_writer_message = prep_write(stream_writer, data);
                   return write_message
                           (instance, bin_writer_message, [0, stream_writer, data], id);
                  });
             caml_call1(Async_kernel[6], _an_);
             var _ao_ = caml_call1(Async_kernel_Pipe[18], pipe_r);
             return caml_call2
                     (Async_kernel[16],
                      _ao_,
                      function(param){
                       var _ap_ = caml_call1(Async_kernel_Pipe[20], pipe_r);
                       return caml_call2
                               (Async_kernel[16],
                                _ap_,
                                function(param){
                                 write_response
                                  (t, id, Async_rpc_kernel_Protocol[11][17], _t_);
                                 return caml_call2(Core_Hashtbl[31], t[3], id);
                                });
                      });
            });
         }
         else{
          var match = impl_with_state[2], writer = match[2], f$1 = match[1];
          run_impl
           (function(data){return caml_call3(f$1, t[5], data, writer);},
            function(x){return [0, x, 0];},
            function(param){
             var match = writer[2];
             if(! match)
              return caml_call1(Core[5], cst_attempted_to_start_writer_);
             var q = match[1];
             writer[2] = 0;
             caml_call2
              (Core_Queue[16],
               q,
               function(param){
                if(0 === param[0]){
                 var x = param[1];
                 return write_message$0(writer, x);
                }
                var str = param[1], t = writer[6];
                t[2] =
                 caml_call1
                  (Async_rpc_kernel_Nat0[9], caml_ml_string_length(str));
                var instance = writer[4][1];
                return write_message
                        (instance,
                         bin_writer_message_as_string,
                         [0, writer[6], str],
                         writer[5]);
               });
             var _ar_ = caml_call1(Async_kernel_Ivar[17], writer[3]);
             return _ar_ ? write_eof(writer) : _ar_;
            });
         }
        }
       }
       return 0;
    }
   }
   function flush(param){
    var t = param[1];
    if(t[4]) throw caml_maybe_attach_backtrace([0, Assert_failure, _C_], 1);
    var
     producers_flushed =
       caml_call3
        (Core_Hashtbl[18],
         t[3],
         0,
         function(param, data, acc){
          if(0 !== data[0]) return acc;
          var pipe = data[1], _ad_ = caml_call1(Async_kernel_Pipe[20], pipe);
          return [0, caml_call1(Async_kernel_Deferred[15], _ad_), acc];
         });
    return caml_call1(Async_kernel_Deferred[22], producers_flushed);
   }
   function stop(param){
    var t = param[1];
    t[4] = 1;
    caml_call2
     (Core_Hashtbl[20],
      t[3],
      function(param){
       if(0 === param[0]) return 0;
       var writer = param[1];
       return close_without_removing_from_in(writer);
      });
    return caml_call1(Core_Hashtbl[16], t[3]);
   }
   function handle_query
   (param, query, read_buffer, read_buffer_pos_ref, close_connection_monitor){
    var t = param[1];
    if(! t[4] && ! caml_call1(Async_rpc_kernel_Transport[3][3], t[2]))
     return caml_call2
             (Async_rpc_kernel_Rpc_metadata[3][1],
              query[4],
              function(param){
               var
                match = t[1],
                on_unknown_rpc = match[2],
                implementations = match[1],
                _$_ = query[2],
                description =
                  [0,
                   caml_call1(Async_rpc_kernel_Protocol[1][12], query[1]),
                   _$_],
                _aa_ = t[8];
               if(_aa_){
                var
                 match$0 = _aa_[1],
                 implementation = match$0[2],
                 last_desc = match$0[1];
                if
                 (caml_call2
                   (Async_rpc_kernel_Description[16], last_desc, description)){
                 var
                  on_exception = implementation[5],
                  implementation$0 = implementation[3];
                 return apply_implementation
                         (t,
                          implementation$0,
                          query,
                          read_buffer,
                          read_buffer_pos_ref,
                          close_connection_monitor,
                          on_exception);
                }
               }
               var
                match$1 =
                  caml_call2(Core_Hashtbl[55], implementations, description);
               if(match$1){
                var implementation$1 = match$1[1];
                t[8] = [0, [0, description, implementation$1]];
                var
                 on_exception$0 = implementation$1[5],
                 implementation$2 = implementation$1[3];
                return apply_implementation
                        (t,
                         implementation$2,
                         query,
                         read_buffer,
                         read_buffer_pos_ref,
                         close_connection_monitor,
                         on_exception$0);
               }
               if
                (typeof on_unknown_rpc !== "number"
                 && 747848894 > on_unknown_rpc[1]){
                var
                 impl = on_unknown_rpc[2],
                 len = query[5],
                 id = query[3],
                 version = query[2],
                 tag = query[1],
                 responder =
                   caml_call2
                    (Async_rpc_kernel_Implementatio$0[1][1][2], id, t[2]),
                 _ab_ = read_buffer_pos_ref[1],
                 _ac_ = caml_call1(Async_rpc_kernel_Protocol[1][12], tag),
                 d =
                   caml_call7
                    (impl,
                     t[5],
                     _ac_,
                     version,
                     responder,
                     read_buffer,
                     _ab_,
                     len);
                return caml_call1(Async_kernel_Deferred[7], d) ? 0 : [1, d];
               }
               var error = [3, query[1], [0, -901574920, query[2]]];
               write_response
                (t, query[3], Async_rpc_kernel_Protocol[12][19], [1, error]);
               if(typeof on_unknown_rpc === "number")
                return -146189108 === on_unknown_rpc
                        ? caml_call2(Async_rpc_kernel_Rpc_error[33], error, t[6])
                        : 192584839 <= on_unknown_rpc ? 0 : _D_;
               var
                f = on_unknown_rpc[2],
                _Z_ = query[2],
                ___ = caml_call1(Async_rpc_kernel_Protocol[1][12], query[1]);
               return 192584839 <= caml_call3(f, t[5], ___, _Z_) ? 0 : _E_;
              });
    return _F_;
   }
   function create(i_s, on_unknown_rpc){
    var
     implementations =
       caml_call3(Async_rpc_kernel_Description[35][5], 0, _G_, 0),
     dups = caml_call3(Async_rpc_kernel_Description[36][3], 0, _H_, 0);
    caml_call2
     (Core_List[19],
      i_s,
      function(i){
       var
        _Y_ = i[2],
        description =
          [0, caml_call1(Async_rpc_kernel_Protocol[1][12], i[1]), _Y_];
       return 17724
               <=
                caml_call3(Core_Hashtbl[37], implementations, description, i)
               ? 0
               : caml_call2(Core_Hash_set[22], dups, description);
      });
    return caml_call1(Core_Hash_set[5], dups)
            ? [0, [0, implementations, on_unknown_rpc]]
            : [1, [0, -965860371, caml_call1(Core_Hash_set[16], dups)]];
   }
   function instantiate
   (t,
    connection_description,
    connection_close_started,
    connection_state,
    writer){
    var unpacked = [];
    runtime.caml_update_dummy
     (unpacked,
      [0,
       t,
       writer,
       caml_call3(Core_Hashtbl[87][14], 0, _I_, 0),
       0,
       connection_state,
       connection_description,
       connection_close_started,
       0,
       [0, unpacked]]);
    return unpacked[9];
   }
   var
    Duplicate_implementations =
      [248,
       "Async_rpc_kernel__Implementations.Duplicate_implementations",
       runtime.caml_fresh_oo_id(0)],
    _J_ = [0, "src/implementations.ml.Duplicate_implementations"],
    _K_ = [0, "_none_", 0, -1];
   caml_call4
    (Sexplib0_Sexp_conv[72][1],
     0,
     0,
     Duplicate_implementations,
     function(param){
      if(param[1] !== Duplicate_implementations)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _K_], 1);
      var
       arg0_037 = param[2],
       res0_038 =
         caml_call2(Core[431], Async_rpc_kernel_Description[9], arg0_037);
      return [1, [0, _J_, [0, res0_038, 0]]];
     });
   var
    _L_ = [0, cst$0],
    cst_Message_cannot_be_sent = "Message cannot be sent",
    _M_ = [0, cst_src_implementations_ml, 999, 34804, 34818],
    cst_Already_responded = "Already responded",
    _N_ = [0, cst_src_implementations_ml, 1007, 34977, 35004],
    cst_server_side_raw_rpc_comput = "server-side raw rpc computation",
    dummy = 0;
   function create_exn(implementations, on_unknown_rpc){
    var match = create(implementations, on_unknown_rpc);
    if(0 === match[0]){var x = match[1]; return x;}
    var dups = match[1][2];
    throw caml_maybe_attach_backtrace([0, Duplicate_implementations, dups], 0);
   }
   function null$0(param){return create_exn(0, -146189108);}
   function add_exn(t, implementation){
    var
     _X_ = implementation[2],
     desc =
       [0,
        caml_call1(Async_rpc_kernel_Protocol[1][12], implementation[1]),
        _X_],
     implementations = caml_call1(Core_Hashtbl[17], t[1]);
    if
     (17724
      <= caml_call3(Core_Hashtbl[37], implementations, desc, implementation))
     return [0, implementations, t[2]];
    throw caml_maybe_attach_backtrace
           ([0, Duplicate_implementations, [0, desc, 0]], 0);
   }
   function add(t, implementation){
    return caml_call2
            (Core_Or_error[33],
             0,
             function(param){return add_exn(t, implementation);});
   }
   function lift(param, f){
    var
     on_unknown_rpc = param[2],
     implementations = param[1],
     _U_ = Async_rpc_kernel_Implementatio$0[6],
     implementations$0 =
       caml_call2
        (Core_Hashtbl[42],
         implementations,
         function(_W_){return caml_call2(_U_, _W_, f);});
    if(typeof on_unknown_rpc === "number")
     var on_unknown_rpc$0 = on_unknown_rpc;
    else{
     if(747848894 <= on_unknown_rpc[1])
      var
       call = on_unknown_rpc[2],
       _V_ =
         [0,
          747848894,
          function(state){return caml_call1(call, caml_call1(f, state));}];
     else
      var
       expert = on_unknown_rpc[2],
       _V_ =
         [0,
          -116756726,
          function(state){return caml_call1(expert, caml_call1(f, state));}];
     var on_unknown_rpc$0 = _V_;
    }
    return [0, implementations$0, on_unknown_rpc$0];
   }
   function cannot_send(r){
    return caml_call5
            (Core[241],
             0,
             _M_,
             cst_Message_cannot_be_sent,
             r,
             function(x_039){
              return caml_call2
                      (Async_rpc_kernel_Transport_int[2][2],
                       function(param){return _L_;},
                       x_039);
             });
   }
   function mark_responded(t){
    if(t[3])
     caml_call5
      (Core[241],
       0,
       _N_,
       cst_Already_responded,
       t,
       Async_rpc_kernel_Implementatio$0[1][1][1]);
    t[3] = 1;
   }
   function schedule(t, buf, pos, len){
    mark_responded(t);
    var
     _T_ = [0, caml_call1(Async_rpc_kernel_Nat0[9], len)],
     header = [1, [0, t[1], _T_]],
     r =
       caml_call6
        (Async_rpc_kernel_Transport[3][12],
         t[2],
         Async_rpc_kernel_Protocol[12][19],
         header,
         buf,
         pos,
         len);
    if(typeof r === "number") return 179911373;
    if(0 !== r[0]) return cannot_send(r);
    var d = r[1];
    return [0, 933108739, d];
   }
   function handle_send_result$0(r){
    if(typeof r !== "number" && 1 === r[0]) return cannot_send(r);
    return 0;
   }
   function write_bigstring(t, buf, pos, len){
    mark_responded(t);
    var
     _S_ = [0, caml_call1(Async_rpc_kernel_Nat0[9], len)],
     header = [1, [0, t[1], _S_]];
    return handle_send_result$0
            (caml_call6
              (Async_rpc_kernel_Transport[3][11],
               t[2],
               Async_rpc_kernel_Protocol[12][19],
               header,
               buf,
               pos,
               len));
   }
   function write_error(t, error){
    mark_responded(t);
    var
     _R_ = caml_call1(Core_Error[26], error),
     data =
       caml_call2
        (Async_rpc_kernel_Rpc_result[1], cst_server_side_raw_rpc_comput, _R_);
    return handle_send_result$0
            (caml_call3
              (Async_rpc_kernel_Transport[3][10],
               t[2],
               Async_rpc_kernel_Protocol[12][19],
               [1, [0, t[1], data]]));
   }
   function write_bin_prot(t, bin_writer_a, a){
    mark_responded(t);
    var
     _O_ = [1, [0, t[1], [0, a]]],
     _P_ = caml_call1(Async_rpc_kernel_Writer_with_l[1], bin_writer_a),
     _Q_ = caml_call1(Async_rpc_kernel_Protocol[12][4], _P_);
    return handle_send_result$0
            (caml_call3(Async_rpc_kernel_Transport[3][10], t[2], _Q_, _O_));
   }
   caml_call1(Ppx_inline_test_lib[6], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Implement);
   var
    Async_rpc_kernel_Implementatio$1 =
      [0,
       create,
       null$0,
       lift,
       [0,
        close,
        closed,
        is_closed,
        write,
        write_without_pushback,
        flushed,
        bin_writer,
        [0, write$0, write_without_pushback$0]],
       [0, sexp_of_t, handle_query, flush, stop],
       instantiate,
       create_exn,
       add,
       add_exn,
       descriptions,
       [0,
        [0, schedule, write_bigstring, write_bin_prot, write_error],
        create_exn]];
   runtime.caml_register_global
    (121, Async_rpc_kernel_Implementatio$1, cst_Async_rpc_kernel_Implement);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Connection
//# unitInfo: Requires: Async_kernel, Async_kernel__Async_kernel_scheduler, Async_kernel__Async_stream, Async_kernel__Deferred, Async_kernel__Ivar, Async_kernel__Monitor, Async_kernel__Synchronous_time_source, Async_kernel__Time_source, Async_rpc_kernel__Implementations, Async_rpc_kernel__Nat0, Async_rpc_kernel__Protocol, Async_rpc_kernel__Rpc_error, Async_rpc_kernel__Transport, Async_rpc_kernel__Transport_intf, Async_rpc_kernel__Writer_with_length, Base__Exn, Base__Field, Base__Staged, Base__Type_equal, Bin_prot__Common, Bin_prot__Shape, Bin_shape, Core, Core__Array, Core__Bigstring, Core__Byte_units, Core__Error, Core__Hashtbl, Core__Info, Core__Option, Core__Set_once, Core__Sexpable, Core__String, Core__Time_ns, Core__Time_ns_alternate_sexp, Expect_test_collector, Expect_test_common__File, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_sexp_conv_lib, Protocol_version_header, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Connectio = "Async_rpc_kernel__Connection",
    cst_Eof = "Eof",
    cst_Negotiated_unexpected_vers = "Negotiated_unexpected_version",
    cst_Negotiation_failed = "Negotiation_failed",
    cst_Reading_header_failed = "Reading_header_failed",
    cst_Timeout = "Timeout",
    cst_Transport_closed = "Transport_closed",
    cst_async_rpc_kernel = "async_rpc_kernel",
    cst_description = "description",
    cst_eof = "eof",
    cst_negotiated_protocol_versio = "negotiated_protocol_version",
    cst_negotiated_unexpected_vers = "negotiated_unexpected_version",
    cst_negotiation_failed = "negotiation_failed",
    cst_reading_header_failed = "reading_header_failed",
    cst_send_every$0 = "send_every",
    cst_src_connection_ml$0 = "src/connection.ml",
    cst_src_connection_ml_Heartbea$0 = "src/connection.ml.Heartbeat_config.t",
    cst_t = "t",
    cst_timeout$0 = "timeout",
    cst_transport_closed = "transport_closed",
    cst_writer = "writer",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    msg = "Rpc message handling loop stopped",
    error_source_003 = "src/connection.ml.Handshake_error.T.t",
    error_source_038 = cst_src_connection_ml_Heartbea$0,
    Async_kernel_Async_kernel_sche =
      global_data.Async_kernel__Async_kernel_scheduler,
    Async_rpc_kernel_Implementatio =
      global_data.Async_rpc_kernel__Implementations,
    Core_Info = global_data.Core__Info,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel = global_data.Async_kernel,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Async_rpc_kernel_Transport = global_data.Async_rpc_kernel__Transport,
    Core_Byte_units = global_data.Core__Byte_units,
    Async_kernel_Synchronous_time_ =
      global_data.Async_kernel__Synchronous_time_source,
    Core_Set_once = global_data.Core__Set_once,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Core_Option = global_data.Core__Option,
    Core_Error = global_data.Core__Error,
    Async_kernel_Time_source = global_data.Async_kernel__Time_source,
    Async_rpc_kernel_Rpc_error = global_data.Async_rpc_kernel__Rpc_error,
    Base_Staged = global_data.Base__Staged,
    Core = global_data.Core,
    Base_Exn = global_data.Base__Exn,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Async_kernel_Async_stream = global_data.Async_kernel__Async_stream,
    Core_Bigstring = global_data.Core__Bigstring,
    Core_Time_ns = global_data.Core__Time_ns,
    Ppx_sexp_conv_lib = global_data.Ppx_sexp_conv_lib,
    Core_Time_ns_alternate_sexp = global_data.Core__Time_ns_alternate_sexp,
    Async_rpc_kernel_Protocol = global_data.Async_rpc_kernel__Protocol,
    Core_Array = global_data.Core__Array,
    Core_String = global_data.Core__String,
    Async_rpc_kernel_Transport_int =
      global_data.Async_rpc_kernel__Transport_intf,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Expect_test_common_File = global_data.Expect_test_common__File;
   global_data.Base__Field;
   var
    Bin_prot_Common = global_data.Bin_prot__Common,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Async_rpc_kernel_Nat0 = global_data.Async_rpc_kernel__Nat0,
    Async_rpc_kernel_Writer_with_l =
      global_data.Async_rpc_kernel__Writer_with_length,
    Protocol_version_header = global_data.Protocol_version_header,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Sexpable = global_data.Core__Sexpable,
    Expect_test_config = global_data.Expect_test_config,
    Inline_test_config = global_data.Inline_test_config,
    Base_Type_equal = global_data.Base__Type_equal;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Connectio);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][1], cst_src_connection_ml$0);
   caml_call2(Ppx_inline_test_lib[5], cst_async_rpc_kernel, "connection.ml");
   var
    _a_ = [0, cst_Eof],
    _b_ = [0, cst_Transport_closed],
    _c_ = [0, cst_Timeout],
    _d_ = [0, cst_Reading_header_failed],
    _e_ = [0, cst_Negotiation_failed],
    _f_ = [0, cst_Negotiated_unexpected_vers];
   function t_of_sexp(sexp_005){
    a:
    {
     if(0 === sexp_005[0]){
      var _b2_ = sexp_005[1], _b3_ = caml_string_compare(_b2_, cst_eof);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           if(0 <= _b3_){
            if(0 < _b3_){
             if(_b2_ === cst_negotiated_unexpected_vers) break f;
             if(_b2_ === cst_negotiation_failed) break e;
             if(_b2_ === cst_reading_header_failed) break d;
             if(_b2_ === cst_timeout$0) break c;
             if(_b2_ !== cst_transport_closed) break a;
             break b;
            }
           }
           else if(_b2_ !== cst_Eof){
            if(_b2_ === cst_Negotiated_unexpected_vers) break f;
            if(_b2_ === cst_Negotiation_failed) break e;
            if(_b2_ === cst_Reading_header_failed) break d;
            if(_b2_ === cst_Timeout) break c;
            if(_b2_ !== cst_Transport_closed) break a;
            break b;
           }
           return 0;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[5], error_source_003, sexp_005);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5], error_source_003, sexp_005);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_003, sexp_005);
       }
       return 2;
      }
      return 1;
     }
     var _b4_ = sexp_005[1];
     if(! _b4_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
     var _b5_ = _b4_[1];
     if(0 !== _b5_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_003, sexp_005);
     var tag_006 = _b5_[1], _b6_ = caml_string_compare(tag_006, cst_eof);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          if(0 <= _b6_){
           if(0 < _b6_){
            if(tag_006 === cst_negotiated_unexpected_vers) break f;
            if(tag_006 === cst_negotiation_failed) break e;
            if(tag_006 === cst_reading_header_failed) break d;
            if(tag_006 === cst_timeout$0) break c;
            if(tag_006 !== cst_transport_closed) break a;
            break b;
           }
          }
          else if(tag_006 !== cst_Eof){
           if(tag_006 === cst_Negotiated_unexpected_vers) break f;
           if(tag_006 === cst_Negotiation_failed) break e;
           if(tag_006 === cst_Reading_header_failed) break d;
           if(tag_006 === cst_Timeout) break c;
           if(tag_006 !== cst_Transport_closed) break a;
           break b;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
         }
         var sexp_args_017 = _b4_[2];
         if(sexp_args_017 && ! sexp_args_017[2]){
          var
           arg0_018 = sexp_args_017[1],
           res0_019 = caml_call1(Core[364], arg0_018);
          return [2, res0_019];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[4],
                  error_source_003,
                  tag_006,
                  sexp_005);
        }
        var sexp_args_012 = _b4_[2];
        if(sexp_args_012 && ! sexp_args_012[2]){
         var
          arg0_013 = sexp_args_012[1],
          res0_014 = caml_call1(Core_Error[5], arg0_013);
         return [1, res0_014];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[4],
                 error_source_003,
                 tag_006,
                 sexp_005);
       }
       var sexp_args_007 = _b4_[2];
       if(sexp_args_007 && ! sexp_args_007[2]){
        var
         arg0_008 = sexp_args_007[1],
         res0_009 = caml_call1(Core_Error[5], arg0_008);
        return [0, res0_009];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_003,
                tag_006,
                sexp_005);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_003, sexp_005);
   }
   function sexp_of_t(param){
    if(typeof param === "number")
     switch(param){case 0: return _a_;case 1: return _b_;default: return _c_;}
    switch(param[0]){
      case 0:
       var
        arg0_020 = param[1],
        res0_021 = caml_call1(Core_Error[6], arg0_020);
       return [1, [0, _d_, [0, res0_021, 0]]];
      case 1:
       var
        arg0_022 = param[1],
        res0_023 = caml_call1(Core_Error[6], arg0_022);
       return [1, [0, _e_, [0, res0_023, 0]]];
      default:
       var arg0_024 = param[1], res0_025 = caml_call1(Core[363], arg0_024);
       return [1, [0, _f_, [0, res0_025, 0]]];
    }
   }
   var T = [0, t_of_sexp, sexp_of_t], sexp_of_t$0 = T[2];
   caml_call1(Core_Sexpable[1], T);
   var
    Handshake_error =
      [248,
       "Async_rpc_kernel__Connection.Handshake_error.Handshake_error",
       runtime.caml_fresh_oo_id(0)],
    _g_ = [0, "src/connection.ml.Handshake_error.Handshake_error"],
    _h_ = [0, "_none_", 0, -1];
   caml_call4
    (Sexplib0_Sexp_conv[72][1],
     0,
     0,
     Handshake_error,
     function(param){
      if(param[1] !== Handshake_error)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
      var
       arg0_030 = param[2],
       arg1_027 = arg0_030[2],
       arg0_026 = arg0_030[1],
       res0_028 = caml_call1(sexp_of_t$0, arg0_026),
       res1_029 = caml_call1(Core_Info[6], arg1_027),
       res0_031 = [1, [0, res0_028, [0, res1_029, 0]]];
      return [1, [0, _g_, [0, res0_031, 0]]];
     });
   var
    bin_size_t = Protocol_version_header[1],
    bin_write_t = Protocol_version_header[2],
    bin_read_t = Protocol_version_header[3],
    bin_read_t$0 = Protocol_version_header[4],
    bin_shape_t = Protocol_version_header[5],
    bin_writer_t = Protocol_version_header[6],
    bin_reader_t = Protocol_version_header[7],
    bin_t = Protocol_version_header[8],
    sexp_of_t$1 = Protocol_version_header[10],
    negotiate = Protocol_version_header[12];
   function create(supported_versions){
    return caml_call4
            (Protocol_version_header[11], 0, 2, supported_versions, 0);
   }
   var
    default_handshake_header = create([0, 1, [0, 2, 0]]),
    v1 = create([0, 1, 0]),
    _l_ = [0, cst_src_connection_ml$0, 105, 2734, 2791];
   function query_message(t, query){
    return 1 === caml_call2(Core_Set_once[10], t[1], _l_)
            ? [0, caml_call1(Async_rpc_kernel_Protocol[7][13], query)]
            : [2, query];
   }
   function of_writer(f, t){return caml_call1(f, t[2]);}
   var
    cst_send_every = cst_send_every$0,
    cst_timeout = cst_timeout$0,
    _s_ = [0, cst_send_every$0],
    _t_ = [0, cst_timeout$0];
   function t_of_sexp$0(x_039){
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_038,
             [0,
              cst_timeout,
              1,
              Core_Time_ns[1][9],
              [0, cst_send_every, 1, Core_Time_ns[1][9], 0]],
             function(param){
              return param !== cst_send_every$0
                      ? param !== cst_timeout$0 ? -1 : 0
                      : 1;
             },
             0,
             function(param){
              var send_every = param[2][1], timeout = param[1];
              return [0, timeout, send_every];
             },
             x_039);
   }
   function sexp_of_t$2(param){
    var
     send_every_043 = param[2],
     timeout_041 = param[1],
     arg_044 = caml_call1(Core_Time_ns[1][10], send_every_043),
     bnds_040 = [0, [1, [0, _s_, [0, arg_044, 0]]], 0],
     arg_042 = caml_call1(Core_Time_ns[1][10], timeout_041),
     bnds_040$0 = [0, [1, [0, _t_, [0, arg_042, 0]]], bnds_040];
    return [1, bnds_040$0];
   }
   var
    _m_ = Async_rpc_kernel_Transport[3][14],
    _n_ = Async_rpc_kernel_Transport[3][5],
    _o_ = Async_rpc_kernel_Transport[3][6],
    _p_ = Async_rpc_kernel_Transport[3][8],
    _q_ = Async_rpc_kernel_Transport[3][7],
    _r_ = Async_rpc_kernel_Transport[3][2],
    _u_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0,
         [0, cst_timeout$0, Core_Time_ns[1][5]],
         [0, [0, cst_send_every$0, Core_Time_ns[1][5]], 0]]),
    _v_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _u_], 0],
    _w_ = caml_call1(Bin_shape[4][1], "src/connection.ml:137:2"),
    group = caml_call2(Bin_prot_Shape[2], _w_, _v_),
    _x_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t$0 = caml_call1(caml_call2(Bin_prot_Shape[10], group, _x_), 0);
   function bin_size_t$0(param){
    var
     v2 = param[2],
     v1 = param[1],
     _b0_ = caml_call1(Core_Time_ns[1][1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _b0_),
     _b1_ = caml_call1(Core_Time_ns[1][1], v2);
    return caml_call2(Bin_prot_Common[23], size, _b1_);
   }
   function bin_write_t$0(buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core_Time_ns[1][2], buf, pos, v1);
    return caml_call3(Core_Time_ns[1][2], buf, pos$0, v2);
   }
   var
    bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0],
    cst_src_connection_ml_Heartbea = cst_src_connection_ml_Heartbea$0;
   function bin_read_t$1(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_connection_ml_Heartbea, pos_ref[1]);
   }
   function bin_read_t$2(buf, pos_ref){
    var
     v_timeout = caml_call2(Core_Time_ns[1][3], buf, pos_ref),
     v_send_every = caml_call2(Core_Time_ns[1][3], buf, pos_ref);
    return [0, v_timeout, v_send_every];
   }
   var
    bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
    bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0];
   function send_every(r){return r[2];}
   function timeout(r){return r[1];}
   var
    Expect_test_collector$0 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_connection_ml = cst_src_connection_ml$0,
    _y_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_connection_ml$0),
       145,
       3987,
       4000,
       4038],
    _z_ =
      [0,
       [0,
        [0, ""],
        [1, " 74a1f475bfb2eed5a509ba71cd7891d2 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_connection_ml$0),
         145,
         3987,
         3993,
         3999],
        _y_],
       0],
    _A_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_connection_ml$0),
       143,
       3929,
       3931,
       4039],
    _B_ =
      caml_call1
       (Expect_test_common_File[4][3], "8c2492186584cfa62af1d4e6ac8782c9");
   caml_call9
    (Expect_test_collector$0[3],
     _B_,
     _A_,
     cst_src_connection_ml$0,
     0,
     0,
     _z_,
     0,
     Inline_test_config,
     function(param){
      var
       _bX_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$0),
       _bY_ = caml_call1(Bin_shape[19][4], _bX_);
      caml_call1(Core[31], _bY_);
      var
       _bZ_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_connection_ml),
          145,
          3987,
          3993,
          3999];
      return caml_call1(Expect_test_collector$0[1], _bZ_);
     });
   var
    _i_ = [0, cst_writer],
    _j_ = [0, cst_negotiated_protocol_versio],
    _C_ = [0, cst_send_every$0],
    _D_ = [0, cst_timeout$0],
    _E_ = [0, cst_negotiated_protocol_versio],
    _F_ = [0, "heartbeat_event"],
    _G_ = [0, "time_source"],
    _H_ = [0, "implementations_instance"],
    _I_ = [0, "close_finished"],
    _J_ = [0, "close_started"],
    _K_ = [0, "open_queries"],
    _L_ = [0, cst_writer],
    _M_ = [0, "reader"],
    _N_ = [0, "max_metadata_size"],
    _O_ = [0, "last_seen_alive"],
    _P_ = [0, "heartbeat_callbacks"],
    _Q_ = [0, "heartbeat_config"],
    _R_ = [0, cst_description],
    _S_ = [0, cst_writer],
    _T_ = [0, cst_description],
    _U_ = [1, -1025106484],
    cst_RPC_connection_got_closed_ = "RPC connection got closed writer",
    _V_ = [0, cst_src_connection_ml$0, 225, 6461, 6481],
    _W_ = [0, "connection"],
    _X_ = [0, "_"],
    _Y_ = [0, "reason"],
    cst_Message_cannot_be_sent = "Message cannot be sent",
    _Z_ = [0, 0],
    ___ = [1, -1025106484];
   function create$0(_bW_, opt, param){
    var
     timeout = _bW_ ? _bW_[1] : caml_call1(Core_Time_ns[1][81], 30.),
     send_every = opt ? opt[1] : caml_call1(Core_Time_ns[1][81], 10.);
    return [0, timeout, send_every];
   }
   function sexp_of_t$3(param){
    var
     heartbeat_config_053 = param[2],
     description_051 = param[1],
     heartbeat_callbacks_055 = param[3],
     last_seen_alive_057 = param[4],
     negotiated_protocol_version_07 = param[14],
     heartbeat_event_075 = param[13],
     time_source_073 = param[12],
     implementations_instance_071 = param[11],
     close_finished_069 = param[10],
     close_started_067 = param[9],
     open_queries_065 = param[8],
     writer_063 = param[7],
     reader_061 = param[6],
     max_metadata_size_059 = param[5],
     arg_078 =
       caml_call2(Core_Set_once[3], Core[363], negotiated_protocol_version_07),
     bnds_050 = [0, [1, [0, _E_, [0, arg_078, 0]]], 0],
     arg_076 =
       caml_call2
        (Core_Set_once[3],
         Async_kernel_Synchronous_time_[19][1],
         heartbeat_event_075),
     bnds_050$0 = [0, [1, [0, _F_, [0, arg_076, 0]]], bnds_050],
     arg_074 = caml_call1(Async_kernel_Synchronous_time_[4], time_source_073),
     bnds_050$1 = [0, [1, [0, _G_, [0, arg_074, 0]]], bnds_050$0],
     arg_072 =
       caml_call2
        (Core_Set_once[3],
         Async_rpc_kernel_Implementatio[5][1],
         implementations_instance_071),
     bnds_050$2 = [0, [1, [0, _H_, [0, arg_072, 0]]], bnds_050$1],
     arg_070 = caml_call2(Async_kernel_Ivar[9], Core[534], close_finished_069),
     bnds_050$3 = [0, [1, [0, _I_, [0, arg_070, 0]]], bnds_050$2],
     arg_068 =
       caml_call2(Async_kernel_Ivar[9], Core_Info[6], close_started_067),
     bnds_050$4 = [0, [1, [0, _J_, [0, arg_068, 0]]], bnds_050$3],
     arg_066 =
       caml_call3
        (Core_Hashtbl[3],
         Async_rpc_kernel_Protocol[2][10],
         Sexplib0_Sexp_conv[23],
         open_queries_065),
     bnds_050$5 = [0, [1, [0, _K_, [0, arg_066, 0]]], bnds_050$4],
     writer_035 = writer_063[2],
     negotiated_protocol_version_03 = writer_063[1],
     arg_036 = caml_call1(Async_rpc_kernel_Transport[3][1], writer_035),
     bnds_032 = [0, [1, [0, _i_, [0, arg_036, 0]]], 0],
     arg_034 =
       caml_call2(Core_Set_once[3], Core[363], negotiated_protocol_version_03),
     bnds_032$0 = [0, [1, [0, _j_, [0, arg_034, 0]]], bnds_032],
     arg_064 = [1, bnds_032$0],
     bnds_050$6 = [0, [1, [0, _L_, [0, arg_064, 0]]], bnds_050$5],
     arg_062 = caml_call1(Async_rpc_kernel_Transport[2][1], reader_061),
     bnds_050$7 = [0, [1, [0, _M_, [0, arg_062, 0]]], bnds_050$6],
     arg_060 = caml_call1(Core_Byte_units[1], max_metadata_size_059),
     bnds_050$8 = [0, [1, [0, _N_, [0, arg_060, 0]]], bnds_050$7],
     arg_058 =
       caml_call1(Core_Time_ns_alternate_sexp[92], last_seen_alive_057),
     bnds_050$9 = [0, [1, [0, _O_, [0, arg_058, 0]]], bnds_050$8],
     arg_056 =
       caml_call2
        (Core[291],
         function(param){
          return caml_call1(Sexplib0_Sexp_conv[24], function(_bV_){return 0;});
         },
         heartbeat_callbacks_055),
     bnds_050$10 = [0, [1, [0, _P_, [0, arg_056, 0]]], bnds_050$9],
     timeout_046 = heartbeat_config_053[1],
     send_every_048 = heartbeat_config_053[2],
     arg_049 = caml_call1(Core_Time_ns[1][10], send_every_048),
     bnds_045 = [0, [1, [0, _C_, [0, arg_049, 0]]], 0],
     arg_047 = caml_call1(Core_Time_ns[1][10], timeout_046),
     bnds_045$0 = [0, [1, [0, _D_, [0, arg_047, 0]]], bnds_045],
     arg_054 = [1, bnds_045$0],
     bnds_050$11 = [0, [1, [0, _Q_, [0, arg_054, 0]]], bnds_050$10],
     arg_052 = caml_call1(Core_Info[6], description_051),
     bnds_050$12 = [0, [1, [0, _R_, [0, arg_052, 0]]], bnds_050$11];
    return [1, bnds_050$12];
   }
   function sexp_of_t_hum_writer(t){
    var
     t$0 = t[7],
     _bU_ =
       [0,
        [1,
         [0,
          _S_,
          [0, caml_call1(Async_rpc_kernel_Transport[3][1], t$0[2]), 0]]],
        0];
    return [1,
            [0, [1, [0, _T_, [0, caml_call1(Core_Info[6], t[1]), 0]]], _bU_]];
   }
   function description(t){return t[1];}
   function is_closed(t){return caml_call1(Async_kernel_Ivar[17], t[9]);}
   function writer(t){
    if(! is_closed(t) && of_writer(_m_, t[7])) return [0, t[7]];
    return _U_;
   }
   function bytes_to_write(t){return of_writer(_n_, t[7]);}
   function bytes_written(t){return of_writer(_o_, t[7]);}
   function bytes_read(t){
    return caml_call1(Async_rpc_kernel_Transport[2][4], t[6]);
   }
   function flushed(t){return of_writer(_p_, t[7]);}
   function handle_send_result(t, x_079){
    if(typeof x_079 === "number")
     return caml_call5
             (Core[241],
              0,
              _V_,
              cst_RPC_connection_got_closed_,
              t,
              sexp_of_t_hum_writer);
    if(0 === x_079[0]){var x = x_079[1]; return x;}
    var
     _bR_ = [0, [1, [0, _W_, [0, sexp_of_t_hum_writer(t), 0]]], 0],
     _bS_ =
       [0,
        [1,
         [0,
          [1,
           [0,
            _Y_,
            [0,
             caml_call2
              (Async_rpc_kernel_Transport_int[2][2],
               function(param){return _X_;},
               x_079),
             0]]],
          _bR_]],
        0],
     _bT_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Message_cannot_be_sent),
         _bS_]];
    return caml_call1(Core[255], _bT_);
   }
   function dispatch(t, response_handler, bin_writer_query, query){
    var r = writer(t);
    if(0 !== r[0]) return r;
    var writer$0 = r[1], match = query[4];
    if(match)
     var
      metadata = match[1],
      _bO_ = query[5],
      _bP_ = caml_call1(Core_Byte_units[51], t[5]),
      _bQ_ = [0, caml_call2(Core_String[94], metadata, _bP_)],
      query$0 = [0, query[1], query[2], query[3], _bQ_, _bO_];
    else
     var query$0 = query;
    caml_call2
     (Core_Option[42],
      response_handler,
      function(response_handler){
       return caml_call3(Core_Hashtbl[36], t[8], query$0[3], response_handler);
      });
    var
     message = query_message(writer$0, query$0),
     _bM_ = caml_call1(Async_rpc_kernel_Writer_with_l[1], bin_writer_query),
     _bN_ = caml_call1(Async_rpc_kernel_Protocol[12][4], _bM_);
    handle_send_result
     (t,
      caml_call3
       (Async_rpc_kernel_Transport[3][10], writer$0[2], _bN_, message));
    return _Z_;
   }
   function make_dispatch_bigstring
   (send_bin_prot_and_bigstring,
    metadata,
    t,
    tag,
    version,
    buf,
    pos,
    len,
    response_handler){
    var match = writer(t);
    if(0 !== match[0]) return ___;
    var
     writer$0 = match[1],
     id = caml_call1(Async_rpc_kernel_Protocol[2][45], 0);
    caml_call2
     (Core_Option[42],
      response_handler,
      function(response_handler){
       return caml_call3(Core_Hashtbl[36], t[8], id, response_handler);
      });
    var
     header =
       query_message
        (writer$0,
         [0,
          tag,
          version,
          id,
          metadata,
          caml_call1(Async_rpc_kernel_Nat0[9], len)]),
     result =
       handle_send_result
        (t,
         caml_call6
          (send_bin_prot_and_bigstring,
           writer$0[2],
           Async_rpc_kernel_Protocol[12][19],
           header,
           buf,
           pos,
           len));
    return [0, result];
   }
   var _$_ = Async_rpc_kernel_Transport[3][11];
   function dispatch_bigstring(_bE_, _bF_, _bG_, _bH_, _bI_, _bJ_, _bK_, _bL_){
    return make_dispatch_bigstring
            (_$_, _bE_, _bF_, _bG_, _bH_, _bI_, _bJ_, _bK_, _bL_);
   }
   var _aa_ = Async_rpc_kernel_Transport[3][12];
   function schedule_dispatch_bigstring
   (_bw_, _bx_, _by_, _bz_, _bA_, _bB_, _bC_, _bD_){
    return make_dispatch_bigstring
            (_aa_, _bw_, _bx_, _by_, _bz_, _bA_, _bB_, _bC_, _bD_);
   }
   function close_reason(t, on_close){
    var reason = caml_call1(Async_kernel_Ivar[18], t[9]);
    if(890972481 <= on_close) return reason;
    var _bv_ = caml_call1(Async_kernel_Ivar[18], t[10]);
    return caml_call2
            (Async_kernel[22][2], _bv_, function(param){return reason;});
   }
   function close_finished(t){
    return caml_call1(Async_kernel_Ivar[18], t[10]);
   }
   function add_heartbeat_callback(t, f){
    t[3] = caml_call2(Core_Array[23], [0, f], t[3]);
    return 0;
   }
   function reset_heartbeat_timeout(t, timeout){
    t[2][1] = timeout;
    t[4] = caml_call1(Async_kernel_Synchronous_time_[12], t[12]);
    return 0;
   }
   function last_seen_alive(t){return t[4];}
   function close(opt, reason, t){
    var
     streaming_responses_flush_time =
       opt ? opt[1] : caml_call1(Core_Time_ns[1][92], 5);
    if(1 - is_closed(t)){
     var _bn_ = caml_call1(Core_Set_once[9], t[13]);
     caml_call2
      (Core_Option[42],
       _bn_,
       function(event){
        caml_call2(Async_kernel_Synchronous_time_[19][8], t[12], event);
        return 0;
       });
     caml_call2(Async_kernel_Ivar[14], t[9], reason);
     var
      match = caml_call1(Core_Set_once[9], t[11]),
      _bo_ =
        function(param){
         var _bt_ = of_writer(_r_, t[7]);
         return caml_call2
                 (Async_kernel[16],
                  _bt_,
                  function(param){
                   var
                    _bu_ = caml_call1(Async_rpc_kernel_Transport[2][2], t[6]);
                   return caml_call2
                           (Async_kernel[16],
                            _bu_,
                            function(param){
                             return caml_call2(Async_kernel_Ivar[14], t[10], 0);
                            });
                  });
        };
     if(match){
      var
       instance = match[1],
       flushed = caml_call1(Async_rpc_kernel_Implementatio[5][3], instance);
      if(caml_call1(Async_kernel_Deferred[7], flushed)){
       caml_call1(Async_rpc_kernel_Implementatio[5][4], instance);
       var flushed$0 = flushed;
      }
      else
       var
        _bp_ = caml_call1(Async_kernel_Time_source[39], t[12]),
        _bq_ =
          [0,
           caml_call2
            (Async_kernel_Time_source[29],
             _bp_,
             streaming_responses_flush_time),
           0],
        _br_ = [0, flushed, [0, of_writer(_q_, t[7]), _bq_]],
        _bs_ = caml_call1(Async_kernel_Deferred[24], _br_),
        flushed$0 =
          caml_call2
           (Async_kernel[22][3],
            _bs_,
            function(param){
             return caml_call1(Async_rpc_kernel_Implementatio[5][4], instance);
            });
      var flushed$1 = flushed$0;
     }
     else
      var flushed$1 = Async_kernel_Deferred[18];
     caml_call2(Async_kernel[16], flushed$1, _bo_);
    }
    return close_finished(t);
   }
   var default_handshake_timeout = caml_call1(Core_Time_ns[1][81], 30.);
   function cleanup(t, reason, exn){
    var _bk_ = close(0, reason, t);
    caml_call1(Async_kernel[6], _bk_);
    var _bl_ = 1 - caml_call1(Core_Hashtbl[29], t[8]);
    if(_bl_){
     if(exn[1] === Async_rpc_kernel_Rpc_error[32])
      var error = exn[2], error$0 = error;
     else
      var error$0 = [2, caml_call1(Base_Exn[1], exn)];
     var
      dummy_buffer = caml_call2(Core_Bigstring[117], 0, 1),
      dummy_ref = [0, 0];
     caml_call2
      (Core_Hashtbl[21],
       t[8],
       function(query_id, response_handler){
        caml_call3
         (response_handler,
          [0, query_id, [1, error$0]],
          dummy_buffer,
          dummy_ref);
        return 0;
       });
     caml_call1(Core_Hashtbl[16], t[8]);
     var _bm_ = runtime.bigstring_destroy_stub(dummy_buffer);
    }
    else
     var _bm_ = _bl_;
    return _bm_;
   }
   var
    contains_magic_prefix = caml_call1(Protocol_version_header[13], 2),
    handshake_header_override_key =
      caml_call2
       (Base_Type_equal[12][4],
        "async rpc handshake header override",
        sexp_of_t$1),
    _k_ = [0, cst_src_connection_ml$0, 101, 2595, 2646],
    _ab_ = [0, cst_src_connection_ml$0, 337, 9767, 9830],
    _ac_ = [0, cst_src_connection_ml$0, 329, 9523, 9586],
    cst_Connection_on_message_resu =
      "Connection.on_message resulted in Connection_closed error. This is weird.",
    cst_No_heartbeats_received_for =
      "No heartbeats received for %{sexp:Time_ns.Span.t}.",
    _ad_ = [12, 46, 0],
    _ae_ = [0, 0],
    cst_No_heartbeats_received_for$0 = "No heartbeats received for ",
    _af_ = [0, cst_src_connection_ml$0, 496, 14779, 14816],
    _ag_ = [0, cst_src_connection_ml$0, 516, 15335, 15381],
    _ah_ = [0, "RPC close connection monitor"],
    _ai_ = [0, "exn"],
    cst_Uncaught_exception_in_impl = "Uncaught exception in implementation",
    _aj_ = [0, "RPC connection loop"],
    cst_exn_raised_in_RPC_connecti = "exn raised in RPC connection ",
    cst_Writer_t = "Writer.t",
    cst_loop = "loop",
    cst_EOF_or_connection_closed = "EOF or connection closed",
    _ak_ = [0, 3804260],
    _al_ = [0, 3903734],
    cst_Handshake_timeout = "Handshake timeout",
    _am_ = [1, 2],
    _an_ = [1, 0],
    _ao_ = [1, 1],
    cst_Reader_read_one_message_bi =
      "[Reader.read_one_message_bin_prot] raised",
    _ap_ = [1, 1],
    _aq_ = [0, 10],
    cst_RPC_transport_stopped = "RPC transport stopped",
    cst_created_directly = "<created-directly>",
    cst_Rpc_Connection_with_close_ = "Rpc.Connection.with_close finished",
    _ar_ = [0, 3804260],
    _as_ = [0, 523273847],
    cst_Rpc_Connection_close = "Rpc.Connection.close";
   function create$1
   (implementations, connection_state, _aG_, _aF_, _aE_, _aD_, opt, param){
    var
     handshake_timeout = _aG_ ? _aG_[1] : default_handshake_timeout,
     heartbeat_config = _aF_ ? _aF_[1] : create$0(0, 0, 0),
     max_metadata_size = _aE_ ? _aE_[1] : caml_call1(Core_Byte_units[38], 1.),
     connection_description =
       _aD_ ? _aD_[1] : caml_call1(Core_Info[12], cst_created_directly),
     time_source =
       opt ? opt[1] : caml_call1(Async_kernel_Synchronous_time_[21], 0),
     writer$0 = param[2],
     reader = param[1];
    if(implementations)
     var s = implementations[1], implementations$0 = s;
    else
     var implementations$0 = caml_call1(Async_rpc_kernel_Implementatio[2], 0);
    var
     _aH_ = caml_call1(Core_Set_once[5], 0),
     _aI_ = caml_call1(Core_Set_once[5], 0),
     _aJ_ = caml_call1(Core_Set_once[5], 0),
     _aK_ = caml_call1(Async_kernel_Ivar[12], 0),
     _aL_ = caml_call1(Async_kernel_Ivar[12], 0),
     _aM_ = caml_call3(Core_Hashtbl[87][14], 0, _aq_, 0),
     _az_ = [0, caml_call1(Core_Set_once[5], 0), writer$0],
     _aN_ = caml_call1(Async_kernel_Synchronous_time_[12], time_source),
     send_every = heartbeat_config[2],
     timeout = heartbeat_config[1],
     t =
       [0,
        connection_description,
        [0, timeout, send_every],
        [0],
        _aN_,
        max_metadata_size,
        reader,
        _az_,
        _aM_,
        _aL_,
        _aK_,
        _aJ_,
        time_source,
        _aI_,
        _aH_],
     _aO_ = caml_call1(Async_rpc_kernel_Transport[3][4], writer$0),
     writer_monitor_exns = caml_call1(Async_kernel_Monitor[9], _aO_),
     _aP_ = caml_call1(Async_rpc_kernel_Transport[3][7], writer$0);
    caml_call2
     (Async_kernel[12],
      _aP_,
      function(param){
       var
        _bj_ =
          close(0, caml_call1(Core_Info[12], cst_RPC_transport_stopped), t);
       return caml_call1(Async_kernel[6], _bj_);
      });
    var
     _aC_ =
       caml_call1
        (Async_kernel_Async_kernel_sche[7], handshake_header_override_key),
     header = caml_call2(Core_Option[35], _aC_, default_handshake_header);
    function _aQ_(param){
     if(0 === param[0]){
      var negotiated_protocol_version = param[1], t$0 = t[7];
      caml_call3(Core_Set_once[7], t$0[1], _k_, negotiated_protocol_version);
      var
       _aU_ = caml_call1(connection_state, t),
       _aV_ = caml_call1(Async_kernel_Ivar[18], t[9]),
       instance =
         caml_call5
          (Async_rpc_kernel_Implementatio[6],
           implementations$0,
           t[1],
           _aV_,
           _aU_,
           writer$0);
      caml_call3(Core_Set_once[7], t[11], _ag_, instance);
      var
       close_connection_monitor =
         caml_call4(Async_kernel_Monitor[3], 0, 0, _ah_, 0);
      caml_call2
       (Async_kernel_Monitor[7],
        close_connection_monitor,
        function(exn){
         var
          _bg_ = [0, [1, [0, _ai_, [0, caml_call1(Base_Exn[1], exn), 0]]], 0],
          _bh_ =
            [1,
             [0,
              caml_call1
               (Sexplib0_Sexp_conv[7], cst_Uncaught_exception_in_impl),
              _bg_]],
          reason = caml_call1(Core_Info[18], _bh_),
          _bi_ = close(0, reason, t);
         return caml_call1(Async_kernel[6], _bi_);
        });
      var
       monitor = caml_call4(Async_kernel_Monitor[3], 0, 0, _aj_, 0),
       reason =
         function(name, exn){
          var
           _be_ = caml_call2(Core[17], cst_exn_raised_in_RPC_connecti, name),
           _bf_ = caml_call2(Core_Info[25], 0, exn);
          return [0, exn, caml_call2(Core_Info[20], _bf_, _be_)];
         },
       _aW_ =
         [0,
          caml_call2
           (Async_kernel_Async_stream[25],
            writer_monitor_exns,
            function(_bd_){return reason(cst_Writer_t, _bd_);}),
          0],
       _aX_ = caml_call1(Async_kernel_Monitor[9], monitor),
       _aY_ =
         [0,
          caml_call2
           (Async_kernel_Async_stream[25],
            _aX_,
            function(_bc_){return reason(cst_loop, _bc_);}),
          _aW_],
       _aZ_ = caml_call1(Async_kernel_Async_stream[5], _aY_),
       _a0_ = caml_call1(Async_kernel_Async_stream[31], _aZ_);
      caml_call2
       (Async_kernel_Async_stream[18],
        _a0_,
        function(param){
         var reason = param[2], exn = param[1];
         return cleanup(t, reason, exn);
        });
      caml_call3
       (Async_kernel[14],
        [0, monitor],
        0,
        function(param){
         t[4] = caml_call1(Async_kernel_Synchronous_time_[12], t[12]);
         var
          heartbeat_from_now_on =
            caml_call3
             (Async_kernel_Synchronous_time_[19][6],
              t[12],
              t[2][2],
              function(param){
               var
                _a__ = t[4],
                _a$_ = caml_call1(Async_kernel_Synchronous_time_[12], t[12]),
                since_last_heartbeat =
                  caml_call2(Core_Time_ns_alternate_sexp[57], _a$_, _a__);
               if
                (caml_call2
                  (Core_Time_ns[1][18], since_last_heartbeat, t[2][1])){
                var
                 reason =
                   function(param){
                    return caml_call2
                            (Core[259],
                             [0,
                              [11,
                               cst_No_heartbeats_received_for$0,
                               [24,
                                _ae_,
                                function(param, custom_printf_082){
                                 var
                                  _bb_ = caml_call1(Core_Time_ns[1][10], custom_printf_082);
                                 return caml_call2(Ppx_sexp_conv_lib[1][13], 0, _bb_);
                                },
                                _ad_]],
                              cst_No_heartbeats_received_for],
                             t[2][1]);
                   },
                 _ba_ = close(0, caml_call1(Core_Info[15], reason), t);
                return caml_call1(Async_kernel[6], _ba_);
               }
               var match = writer(t);
               if(0 !== match[0]) return 0;
               var writer$0 = match[1];
               return handle_send_result
                       (t,
                        caml_call3
                         (Async_rpc_kernel_Transport[3][10],
                          writer$0[2],
                          Async_rpc_kernel_Protocol[12][19],
                          0));
              });
         caml_call3(Core_Set_once[7], t[13], _af_, heartbeat_from_now_on);
         function f(read_buffer, pos, param){
          var
           read_buffer_pos_ref = [0, pos],
           nat0_msg =
             caml_call2
              (Async_rpc_kernel_Protocol[12][15],
               read_buffer,
               read_buffer_pos_ref);
          if(typeof nat0_msg === "number"){
           caml_call2
            (Core_Array[32], t[3], function(f){return caml_call1(f, 0);});
           var res = 0;
          }
          else
           switch(nat0_msg[0]){
             case 0:
              var
               query = nat0_msg[1],
               instance = caml_call2(Core_Set_once[10], t[11], _ab_),
               query$0 =
                 caml_call2(Async_rpc_kernel_Protocol[7][14], 0, query),
               res =
                 caml_call5
                  (Async_rpc_kernel_Implementatio[5][2],
                   instance,
                   query$0,
                   read_buffer,
                   read_buffer_pos_ref,
                   close_connection_monitor);
              break;
             case 1:
              var
               response = nat0_msg[1],
               match = caml_call2(Core_Hashtbl[55], t[8], response[1]);
              if(match){
               var
                response_handler = match[1],
                match$0 =
                  caml_call3
                   (response_handler,
                    response,
                    read_buffer,
                    read_buffer_pos_ref);
               if(typeof match$0 === "number")
                var res = 0;
               else{
                var _a5_ = match$0[1];
                if(-286555464 === _a5_){
                 var wait = match$0[2];
                 caml_call2(Core_Hashtbl[31], t[8], response[1]);
                 var res = [1, wait];
                }
                else if(76061764 <= _a5_){
                 var removal_circumstances = match$0[2];
                 caml_call2(Core_Hashtbl[31], t[8], response[1]);
                 if(0 === removal_circumstances[0])
                  var res = 0;
                 else{
                  var e = removal_circumstances[1];
                  if(typeof e !== "number" && 3 === e[0]){var res = 0; break;}
                  var res = [0, [1, e]];
                 }
                }
                else
                 var wait$0 = match$0[2], res = [1, wait$0];
               }
              }
              else
               var res = [0, [1, [4, response[1]]]];
              break;
             default:
              var
               query$1 = nat0_msg[1],
               instance$0 = caml_call2(Core_Set_once[10], t[11], _ac_),
               res =
                 caml_call5
                  (Async_rpc_kernel_Implementatio[5][2],
                   instance$0,
                   query$1,
                   read_buffer,
                   read_buffer_pos_ref,
                   close_connection_monitor);
           }
          if(typeof res === "number") return 0;
          if(0 !== res[0]) return res;
          var result = res[1];
          if(0 === result[0])
           var reason = caml_call1(Core_Info[12], msg);
          else
           var
            e$0 = result[1],
            _a7_ =
              function(param){
               return caml_call1
                       (Sexplib0_Sexp_conv[7], cst_Connection_on_message_resu);
              },
            _a8_ = Async_rpc_kernel_Rpc_error[29],
            reason =
              caml_call5
               (Core_Info[17],
                0,
                0,
                msg,
                e$0,
                function(_a9_){return caml_call2(_a8_, _a9_, _a7_);});
          var _a6_ = close(0, reason, t);
          caml_call1(Async_kernel[6], _a6_);
          return [0, reason];
         }
         var
          _a1_ = caml_call1(Base_Staged[1], f),
          _a2_ = caml_call1(Base_Staged[2], _a1_),
          _a3_ =
            caml_call3
             (Async_rpc_kernel_Transport[2][5],
              t[6],
              _a2_,
              function(param){
               t[4] = caml_call1(Async_kernel_Synchronous_time_[12], t[12]);
               return 0;
              });
         return caml_call2
                 (Async_kernel[16],
                  _a3_,
                  function(param){
                   if(0 === param[0]){
                    var reason = param[1];
                    return cleanup
                            (t, reason, [0, Async_rpc_kernel_Rpc_error[32], 0, t[1]]);
                   }
                   var _a4_ = [0, Async_rpc_kernel_Rpc_error[32], 0, t[1]];
                   return cleanup
                           (t,
                            caml_call1(Core_Info[12], cst_EOF_or_connection_closed),
                            _a4_);
                  });
        });
      return [0, t];
     }
     var error = param[1];
     return [1, [0, Handshake_error, [0, error, connection_description]]];
    }
    if(caml_call1(Async_rpc_kernel_Transport[3][14], writer$0)){
     handle_send_result
      (t,
       caml_call3
        (Async_rpc_kernel_Transport[3][10], writer$0, bin_t[2], header));
     var
      result =
        caml_call7
         (Async_kernel_Monitor[16],
          0,
          0,
          0,
          0,
          _al_,
          _ak_,
          function(param){
           return caml_call2(Async_rpc_kernel_Transport[2][7], t[6], bin_t[3]);
          }),
      _aA_ = caml_call1(Async_kernel_Time_source[39], t[12]),
      _aB_ =
        caml_call3
         (Async_kernel_Time_source[30], _aA_, handshake_timeout, result),
      _aR_ =
        caml_call2
         (Async_kernel[22][3],
          _aB_,
          function(param){
           if(typeof param === "number"){
            var
             _aS_ =
               close(0, caml_call1(Core_Info[12], cst_Handshake_timeout), t);
            caml_call1(Async_kernel[6], _aS_);
            return _am_;
           }
           var match$0 = param[2];
           if(0 !== match$0[0]){
            var
             exn = match$0[1],
             reason =
               caml_call1(Core_Info[12], cst_Reader_read_one_message_bi),
             _aT_ = close(0, reason, t);
            caml_call1(Async_kernel[6], _aT_);
            return [1, [0, caml_call2(Core_Error[25], 0, exn)]];
           }
           var match$1 = match$0[1];
           if(0 !== match$1[0]) return 3456156 <= match$1[1] ? _an_ : _ao_;
           var
            peer = match$1[1],
            match = caml_call3(negotiate, 1, header, peer);
           if(0 === match[0]){var i = match[1]; return [0, i];}
           var e = match[1];
           return [1, [1, e]];
          });
    }
    else
     var _aR_ = caml_call1(Async_kernel[19], _ap_);
    return caml_call2(Async_kernel[22][3], _aR_, _aQ_);
   }
   function with_close
   (implementations,
    handshake_timeout,
    heartbeat_config,
    description,
    time_source,
    connection_state,
    transport,
    dispatch_queries,
    on_handshake_error){
    if(typeof on_handshake_error === "number")
     var
      handle_handshake_error =
        function(_ay_){throw caml_maybe_attach_backtrace(_ay_, 0);};
    else
     var f = on_handshake_error[2], handle_handshake_error = f;
    var
     _at_ =
       create$1
        (implementations,
         connection_state,
         handshake_timeout,
         heartbeat_config,
         0,
         description,
         time_source,
         transport);
    return caml_call2
            (Async_kernel[22][2],
             _at_,
             function(t){
              if(0 === t[0]){
               var t$0 = t[1];
               return caml_call8
                       (Async_kernel_Monitor[23],
                        0,
                        0,
                        0,
                        0,
                        _as_,
                        _ar_,
                        function(param){
                         var _av_ = caml_call1(dispatch_queries, t$0);
                         return caml_call2
                                 (Async_kernel[22][2],
                                  _av_,
                                  function(result){
                                   function _aw_(param){return result;}
                                   var
                                    _ax_ =
                                      implementations
                                       ? close_finished(t$0)
                                       : Async_kernel_Deferred[18];
                                   return caml_call2(Async_kernel[22][3], _ax_, _aw_);
                                  });
                        },
                        function(param){
                         return close
                                 (0,
                                  caml_call1(Core_Info[12], cst_Rpc_Connection_with_close_),
                                  t$0);
                        });
              }
              var
               e = t[1],
               _au_ = caml_call1(Async_rpc_kernel_Transport[5], transport);
              return caml_call2
                      (Async_kernel[22][2],
                       _au_,
                       function(param){
                        return caml_call1(handle_handshake_error, e);
                       });
             });
   }
   function server_with_close
   (handshake_timeout,
    heartbeat_config,
    description,
    time_source,
    transport,
    implementations,
    connection_state,
    on_handshake_error){
    if(typeof on_handshake_error === "number")
     var
      on_handshake_error$0 =
        -146189108 <= on_handshake_error
         ? -146189108
         : [0, 747848894, function(param){return Async_kernel_Deferred[18];}];
    else
     var f = on_handshake_error[2], on_handshake_error$0 = [0, 747848894, f];
    return with_close
            ([0, implementations],
             handshake_timeout,
             heartbeat_config,
             description,
             time_source,
             connection_state,
             transport,
             function(param){return Async_kernel_Deferred[18];},
             on_handshake_error$0);
   }
   function close$0(streaming_responses_flush_time, opt, t){
    var
     reason =
       opt ? opt[1] : caml_call1(Core_Info[12], cst_Rpc_Connection_close);
    return close(streaming_responses_flush_time, reason, t);
   }
   function null$0(param){
    return [0,
            function(param){return 0;},
            caml_call1(Async_rpc_kernel_Implementatio[2], 0)];
   }
   var Client_implementations = [0, null$0];
   function with_async_execution_context(context, f){
    return caml_call3
            (Async_kernel_Async_kernel_sche[6],
             handshake_header_override_key,
             [0, context],
             f);
   }
   caml_call1(Ppx_inline_test_lib[6], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Connectio);
   var
    Async_rpc_kernel_Connection =
      [0,
       sexp_of_t$3,
       [0,
        t_of_sexp$0,
        sexp_of_t$2,
        bin_size_t$0,
        bin_write_t$0,
        bin_read_t$2,
        bin_read_t$1,
        bin_shape_t$0,
        bin_writer_t$0,
        bin_reader_t$0,
        bin_t$0,
        create$0,
        timeout,
        send_every],
       Client_implementations,
       create$1,
       contains_magic_prefix,
       description,
       add_heartbeat_callback,
       reset_heartbeat_timeout,
       last_seen_alive,
       close$0,
       close_finished,
       close_reason,
       is_closed,
       bytes_to_write,
       bytes_written,
       bytes_read,
       flushed,
       with_close,
       server_with_close,
       dispatch,
       dispatch_bigstring,
       schedule_dispatch_bigstring,
       default_handshake_timeout,
       [0,
        [0,
         bin_size_t,
         bin_write_t,
         bin_read_t,
         bin_read_t$0,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         v1,
         default_handshake_header],
        with_async_execution_context]];
   runtime.caml_register_global
    (184, Async_rpc_kernel_Connection, cst_Async_rpc_kernel_Connectio);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Connection_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Connectio = "Async_rpc_kernel__Connection_intf",
    cst_async_rpc_kernel = "async_rpc_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Connectio);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][1], "src/connection_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_async_rpc_kernel, "connection_intf.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Connectio);
   var Async_rpc_kernel_Connection_in = [0];
   runtime.caml_register_global
    (11, Async_rpc_kernel_Connection_in, cst_Async_rpc_kernel_Connectio);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Rpc
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_kernel__Ivar, Async_kernel__Pipe, Async_rpc_kernel__Connection, Async_rpc_kernel__Description, Async_rpc_kernel__Implementation, Async_rpc_kernel__Implementation_types, Async_rpc_kernel__Implementations, Async_rpc_kernel__On_exception, Async_rpc_kernel__Protocol, Async_rpc_kernel__Rpc_error, Async_rpc_kernel__Rpc_result, Async_rpc_kernel__Util, Async_rpc_kernel__Writer_with_length, Base__Field, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Core, Core__Bag, Core__Bigstring, Core__Error, Core__Hashtbl, Core__Info, Core__Int, Core__List, Core__Or_error, Core__Result, Core__Type_equal, Core__Unit, Eager_deferred, Expect_test_collector, Expect_test_common__File, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$9 = "",
    cst_748c8bf4502d0978d007bf7f96 = " 748c8bf4502d0978d007bf7f96a7ef7f ",
    cst_9250fb765cda343889f7d38235 = "9250fb765cda343889f7d382350bf00b",
    cst$10 = ":",
    cst_query = ":query",
    cst_Async_rpc_kernel_Rpc = "Async_rpc_kernel__Rpc",
    cst_Closed_locally = "Closed_locally",
    cst_Closed_remotely = "Closed_remotely",
    cst_Error = "Error",
    cst_async_rpc_kernel = "async_rpc_kernel",
    cst_client_side_streaming_rpc_$2 =
      "client-side streaming_rpc response un-bin-io'ing",
    cst_closed_locally = "closed_locally",
    cst_closed_remotely = "closed_remotely",
    cst_error = "error",
    cst_src_rpc_ml$1 = "src/rpc.ml",
    cst_src_rpc_ml_Pipe_close_reas$1 =
      "src/rpc.ml.Pipe_close_reason.Stable.V1.t",
    cst_src_rpc_ml_Pipe_close_reas$2 = "src/rpc.ml.Pipe_close_reason.t",
    cst_t = "t",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$8 = cst$9,
    cst$2 = cst$9,
    cst$3 = cst$10,
    cst$4 = cst$9,
    cst$5 = cst$10,
    cst$6 = cst$9,
    cst$7 = cst$9,
    cst$1 = cst$9,
    cst = cst$9,
    cst$0 = cst$9,
    error_source_009 = cst_src_rpc_ml_Pipe_close_reas$2,
    error_source_024 = cst_src_rpc_ml_Pipe_close_reas$1,
    Async_rpc_kernel_Protocol = global_data.Async_rpc_kernel__Protocol,
    Async_kernel = global_data.Async_kernel,
    Core_Error = global_data.Core__Error,
    Core_Bag = global_data.Core__Bag,
    Core_Int = global_data.Core__Int,
    Core_Bigstring = global_data.Core__Bigstring,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Core_List = global_data.Core__List,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Core = global_data.Core,
    Async_rpc_kernel_Implementatio$0 =
      global_data.Async_rpc_kernel__Implementation_types,
    Core_Unit = global_data.Core__Unit,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Core_Info = global_data.Core__Info,
    Async_rpc_kernel_Connection = global_data.Async_rpc_kernel__Connection,
    Async_rpc_kernel_Writer_with_l =
      global_data.Async_rpc_kernel__Writer_with_length,
    Async_rpc_kernel_Rpc_result = global_data.Async_rpc_kernel__Rpc_result,
    Async_rpc_kernel_Util = global_data.Async_rpc_kernel__Util,
    Async_rpc_kernel_Rpc_error = global_data.Async_rpc_kernel__Rpc_error,
    Async_rpc_kernel_On_exception = global_data.Async_rpc_kernel__On_exception,
    Stdlib_String = global_data.Stdlib__String,
    Core_Type_equal = global_data.Core__Type_equal,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Expect_test_common_File = global_data.Expect_test_common__File,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Eager_deferred = global_data.Eager_deferred,
    Core_Or_error = global_data.Core__Or_error;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Result = global_data.Core__Result,
    Expect_test_config = global_data.Expect_test_config,
    Inline_test_config = global_data.Inline_test_config,
    Async_rpc_kernel_Implementatio =
      global_data.Async_rpc_kernel__Implementations,
    Async_rpc_kernel_Implementatio$1 =
      global_data.Async_rpc_kernel__Implementation,
    Async_rpc_kernel_Description = global_data.Async_rpc_kernel__Description;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Rpc);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][1], cst_src_rpc_ml$1);
   caml_call2(Ppx_inline_test_lib[5], cst_async_rpc_kernel, "rpc.ml");
   var
    symbol = Core_Result[16],
    symbol$0 = Core_Result[17],
    _a_ = [0, 0],
    _b_ = [1, 0],
    _c_ = [0, cst_query, 0],
    _d_ = [0, ":response", 0],
    cst_client_side_rpc_response_u = "client-side rpc response un-bin-io'ing",
    _e_ = [0, 76061764, [0, 0]],
    _f_ = [0, 76061764, [0, 0]],
    _g_ = [0, 76061764, [0, 0]],
    _h_ = [0, ":msg", 0];
   function dispatch_raw
   (metadata,
    conn,
    tag,
    version,
    bin_writer_query,
    query,
    query_id,
    response_handler){
    var query$0 = [0, tag, version, query_id, metadata, query];
    return 0
            ===
             caml_call4
               (Async_rpc_kernel_Connection[20],
                conn,
                response_handler,
                bin_writer_query,
                query$0)
              [0]
            ? _a_
            : _b_;
   }
   function dispatch_raw$0
   (metadata, conn, tag, version, bin_writer_query, query, query_id, f){
    var
     response_ivar = caml_call1(Async_kernel_Ivar[12], 0),
     e =
       dispatch_raw
        (metadata,
         conn,
         tag,
         version,
         bin_writer_query,
         query,
         query_id,
         [0, caml_call1(f, response_ivar)]);
    if(0 !== e[0]) caml_call2(Async_kernel_Ivar[14], response_ivar, e);
    return caml_call1(Async_kernel_Ivar[18], response_ivar);
   }
   function create(name, version, bin_query, bin_response){
    var
     _bI_ = Core[148],
     _bJ_ = caml_call2(Stdlib_String[7], cst, [0, name, _c_]),
     query_type_id = caml_call2(Core_Type_equal[8][3], _bJ_, _bI_),
     _bK_ = Core[148],
     _bL_ = caml_call2(Stdlib_String[7], cst$0, [0, name, _d_]),
     response_type_id = caml_call2(Core_Type_equal[8][3], _bL_, _bK_);
    return [0,
            caml_call1(Async_rpc_kernel_Protocol[1][11], name),
            version,
            bin_query,
            bin_response,
            query_type_id,
            response_type_id];
   }
   function name(t){
    return caml_call1(Async_rpc_kernel_Protocol[1][12], t[1]);
   }
   function version(t){return t[2];}
   function description(t){var _bH_ = t[2]; return [0, name(t), _bH_];}
   function query_type_id(t){return t[5];}
   function response_type_id(t){return t[6];}
   function bin_query(t){return t[3];}
   function bin_response(t){return t[4];}
   function shapes(t){return [0, t[3][1], t[4][1]];}
   function implement(opt, t, f){
    var on_exception = opt ? opt[1] : Async_rpc_kernel_On_exception[3];
    return [0,
            t[1],
            t[2],
            [2,
             t[3][3],
             t[4][2],
             function(state, query){
              var _bG_ = caml_call2(f, state, query);
              return caml_call2
                      (Eager_deferred[7], _bG_, function(a){return [0, a];});
             },
             1],
            [246, function(_bF_){return shapes(t);}],
            on_exception];
   }
   function implement$0(opt, t, f){
    var on_exception = opt ? opt[1] : Async_rpc_kernel_On_exception[3];
    return [0,
            t[1],
            t[2],
            [2,
             t[3][3],
             t[4][2],
             function(state, query){return [0, caml_call2(f, state, query)];},
             0],
            [246, function(_bE_){return shapes(t);}],
            on_exception];
   }
   function dispatch(metadata, t, conn, query){
    function response_handler
    (ivar, response, read_buffer, read_buffer_pos_ref){
     var
      response$0 =
        caml_call2
         (symbol,
          response[2],
          function(len){
           return caml_call6
                   (Async_rpc_kernel_Util[1],
                    t[4][3],
                    0,
                    read_buffer,
                    read_buffer_pos_ref,
                    len,
                    cst_client_side_rpc_response_u);
          });
     caml_call2(Async_kernel_Ivar[14], ivar, response$0);
     return _e_;
    }
    var query_id = caml_call1(Async_rpc_kernel_Protocol[2][45], 0);
    return dispatch_raw$0
            (metadata,
             conn,
             t[1],
             t[2],
             t[3][2],
             query,
             query_id,
             response_handler);
   }
   function rpc_result_to_or_error(t, conn, result){
    var
     _bB_ = caml_call2(Async_rpc_kernel_Connection[12], conn, 890972481),
     _bC_ = caml_call1(Async_rpc_kernel_Connection[6], conn),
     _bD_ = description(t);
    return caml_call4
            (Async_rpc_kernel_Rpc_result[4], _bD_, _bC_, _bB_, result);
   }
   function dispatch$0(metadata, t, conn, query){
    var _bA_ = dispatch(metadata, t, conn, query);
    return caml_call2
            (Async_kernel[22][3],
             _bA_,
             function(result){return rpc_result_to_or_error(t, conn, result);});
   }
   function dispatch_exn(metadata, t, conn, query){
    var _by_ = Core_Or_error[36], _bz_ = dispatch$0(metadata, t, conn, query);
    return caml_call2(Async_kernel[21], _bz_, _by_);
   }
   function make_dispatch
   (do_dispatch,
    conn,
    rpc_tag,
    version,
    metadata,
    buf,
    pos,
    len,
    handle_response,
    handle_error){
    function response_handler(response, read_buffer, read_buffer_pos_ref){
     var match = response[2];
     if(0 === match[0]){
      var
       len = match[1],
       d =
         caml_call3(handle_response, read_buffer, read_buffer_pos_ref[1], len);
      read_buffer_pos_ref[1] = read_buffer_pos_ref[1] + len | 0;
      return caml_call1(Async_kernel_Deferred[7], d)
              ? _f_
              : [0, -286555464, d];
     }
     var
      e = match[1],
      _bw_ =
        caml_call2
         (Async_rpc_kernel_Rpc_error[29],
          e,
          function(param){
           var
            _bx_ =
              caml_call2(Async_rpc_kernel_Connection[12], conn, 890972481),
            x_002 = caml_call1(Async_kernel_Deferred[5], _bx_);
           return caml_call2(Core[466], Core_Info[6], x_002);
          });
     caml_call1(handle_error, caml_call1(Core_Error[5], _bw_));
     return _g_;
    }
    return caml_call8
            (do_dispatch,
             metadata,
             conn,
             caml_call1(Async_rpc_kernel_Protocol[1][11], rpc_tag),
             version,
             buf,
             pos,
             len,
             [0, response_handler]);
   }
   function dispatch$1
   (metadata,
    conn,
    rpc_tag,
    version,
    buf,
    pos,
    len,
    handle_response,
    handle_error){
    return 0
            ===
             make_dispatch
               (Async_rpc_kernel_Connection[21],
                conn,
                rpc_tag,
                version,
                metadata,
                buf,
                pos,
                len,
                handle_response,
                handle_error)
              [0]
            ? 17724
            : 179911373;
   }
   function schedule_dispatch
   (metadata,
    conn,
    rpc_tag,
    version,
    buf,
    pos,
    len,
    handle_response,
    handle_error){
    var
     match =
       make_dispatch
        (Async_rpc_kernel_Connection[22],
         conn,
         rpc_tag,
         version,
         metadata,
         buf,
         pos,
         len,
         handle_response,
         handle_error);
    if(0 !== match[0]) return 179911373;
    var d = match[1];
    return [0, 933108739, d];
   }
   function deferred_no_authorization(f, state, responder, buf, pos, len){
    var _bv_ = caml_call5(f, state, responder, buf, pos, len);
    return caml_call2(Eager_deferred[7], _bv_, function(a){return [0, a];});
   }
   function blocking_no_authorization(f, state, responder, buf, pos, len){return [0, caml_call5(f, state, responder, buf, pos, len)];
   }
   function implement$1(opt, t, f){
    var on_exception = opt ? opt[1] : Async_rpc_kernel_On_exception[3];
    return [0,
            t[1],
            t[2],
            [3,
             function(_bq_, _br_, _bs_, _bt_, _bu_){
              return deferred_no_authorization
                      (f, _bq_, _br_, _bs_, _bt_, _bu_);
             },
             1],
            [246, function(_bp_){return shapes(t);}],
            on_exception];
   }
   function implement$2(opt, t, f){
    var on_exception = opt ? opt[1] : Async_rpc_kernel_On_exception[3];
    return [0,
            t[1],
            t[2],
            [3,
             function(_bk_, _bl_, _bm_, _bn_, _bo_){
              return blocking_no_authorization
                      (f, _bk_, _bl_, _bm_, _bn_, _bo_);
             },
             0],
            [246, function(_bj_){return shapes(t);}],
            on_exception];
   }
   function implement_for_tag_and_version(opt, rpc_tag, version, f){
    var on_exception = opt ? opt[1] : Async_rpc_kernel_On_exception[3];
    return [0,
            caml_call1(Async_rpc_kernel_Protocol[1][11], rpc_tag),
            version,
            [3,
             function(_be_, _bf_, _bg_, _bh_, _bi_){
              return deferred_no_authorization
                      (f, _be_, _bf_, _bg_, _bh_, _bi_);
             },
             1],
            0,
            on_exception];
   }
   function implement_for_tag_and_version$0(opt, rpc_tag, version, f){
    var on_exception = opt ? opt[1] : Async_rpc_kernel_On_exception[3];
    return [0,
            caml_call1(Async_rpc_kernel_Protocol[1][11], rpc_tag),
            version,
            [3,
             function(_a$_, _ba_, _bb_, _bc_, _bd_){
              return blocking_no_authorization
                      (f, _a$_, _ba_, _bb_, _bc_, _bd_);
             },
             0],
            0,
            on_exception];
   }
   function bin_msg(r){return r[3];}
   function version$0(r){return r[2];}
   function name$0(t){
    return caml_call1(Async_rpc_kernel_Protocol[1][12], t[1]);
   }
   function create$0(name, version, bin_msg){
    var
     _a9_ = Core[148],
     _a__ = caml_call2(Stdlib_String[7], cst$1, [0, name, _h_]),
     msg_type_id = caml_call2(Core_Type_equal[8][3], _a__, _a9_);
    return [0,
            caml_call1(Async_rpc_kernel_Protocol[1][11], name),
            version,
            bin_msg,
            msg_type_id];
   }
   function shapes$0(t){return [1, t[3][1]];}
   function description$0(t){var _a8_ = t[2]; return [0, name$0(t), _a8_];}
   function msg_type_id(t){return t[4];}
   function implement$3(opt, t, f){
    var on_exception = opt ? opt[1] : Async_rpc_kernel_On_exception[2];
    return [0,
            t[1],
            t[2],
            [0,
             t[3][3],
             function(state, query){
              var _a7_ = [0, caml_call2(f, state, query)];
              return caml_call1(Eager_deferred[6], _a7_);
             }],
            [246, function(_a6_){return shapes$0(t);}],
            on_exception];
   }
   function dispatch$2(metadata, t, conn, query){
    var query_id = caml_call1(Async_rpc_kernel_Protocol[2][45], 0);
    return dispatch_raw
            (metadata, conn, t[1], t[2], t[3][2], query, query_id, 0);
   }
   function rpc_result_to_or_error$0(t, conn, result){
    var
     _a3_ = caml_call2(Async_rpc_kernel_Connection[12], conn, 890972481),
     _a4_ = caml_call1(Async_rpc_kernel_Connection[6], conn),
     _a5_ = description$0(t);
    return caml_call4
            (Async_rpc_kernel_Rpc_result[4], _a5_, _a4_, _a3_, result);
   }
   function dispatch$3(metadata, t, conn, query){
    var result = dispatch$2(metadata, t, conn, query);
    return rpc_result_to_or_error$0(t, conn, result);
   }
   function dispatch_exn$0(metadata, t, conn, query){
    var _a2_ = dispatch$3(metadata, t, conn, query);
    return caml_call1(Core_Or_error[36], _a2_);
   }
   function implement$4(opt, t, f){
    var on_exception = opt ? opt[1] : Async_rpc_kernel_On_exception[2];
    return [0,
            t[1],
            t[2],
            [1,
             function(state, buf, pos, len){
              var _a1_ = [0, caml_call4(f, state, buf, pos, len)];
              return caml_call1(Eager_deferred[6], _a1_);
             }],
            [246, function(_a0_){return shapes$0(t);}],
            on_exception];
   }
   function dispatch$4(metadata, param, conn, buf, pos, len){
    var version = param[2], tag = param[1];
    return 0
            ===
             caml_call8
               (Async_rpc_kernel_Connection[21],
                metadata,
                conn,
                tag,
                version,
                buf,
                pos,
                len,
                0)
              [0]
            ? 17724
            : 179911373;
   }
   function schedule_dispatch$0(metadata, param, conn, buf, pos, len){
    var
     version = param[2],
     tag = param[1],
     match =
       caml_call8
        (Async_rpc_kernel_Connection[22],
         metadata,
         conn,
         tag,
         version,
         buf,
         pos,
         len,
         0);
    if(0 !== match[0]) return 179911373;
    var flushed = match[1];
    return [0, 933108739, flushed];
   }
   var
    _i_ =
      caml_call1
       (Bin_prot_Shape[5],
        [0,
         [0, cst_Closed_locally, 0],
         [0,
          [0, cst_Closed_remotely, 0],
          [0, [0, cst_Error, [0, Core_Error[36], 0]], 0]]]),
    _j_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _i_], 0],
    _k_ = caml_call1(Bin_shape[4][1], "src/rpc.ml:463:2"),
    group = caml_call2(Bin_prot_Shape[2], _k_, _j_),
    _l_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _l_), 0);
   function bin_size_t(param){
    if(typeof param === "number") return 1;
    var v1 = param[1], _aZ_ = caml_call1(Core_Error[32], v1);
    return caml_call2(Bin_prot_Common[23], 1, _aZ_);
   }
   function bin_write_t(buf, pos, param){
    if(typeof param === "number")
     return param
             ? caml_call3(Bin_prot_Write[30], buf, pos, 1)
             : caml_call3(Bin_prot_Write[30], buf, pos, 0);
    var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
    return caml_call3(Core_Error[33], buf, pos$0, v1);
   }
   var
    bin_writer_t = [0, bin_size_t, bin_write_t],
    cst_src_rpc_ml_Pipe_close_reas = cst_src_rpc_ml_Pipe_close_reas$2,
    _m_ = [1, cst_src_rpc_ml_Pipe_close_reas$2];
   function bin_read_t(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_rpc_ml_Pipe_close_reas, pos_ref[1]);
   }
   function bin_read_t$0(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(2 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _m_, pos_ref[1]);
    switch(match){
      case 0:
       return 0;
      case 1:
       return 1;
      default:
       var arg_1 = caml_call2(Core_Error[34], buf, pos_ref);
       return [0, arg_1];
    }
   }
   var
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
    _n_ = [0, cst_Closed_remotely],
    _o_ = [0, cst_Closed_locally],
    _p_ = [0, cst_Error];
   function compare(a_003, b_004){
    if(a_003 === b_004) return 0;
    if(typeof a_003 === "number"){
     if(! a_003){
      if(typeof b_004 === "number" && ! b_004) return 0;
      return -1;
     }
     if(typeof b_004 !== "number") return -1;
     if(b_004) return 0;
    }
    else{
     var a_005 = a_003[1];
     if(typeof b_004 !== "number"){
      var b_006 = b_004[1];
      return caml_call2(Core_Error[1], a_005, b_006);
     }
     if(b_004) return 1;
    }
    return 1;
   }
   function t_of_sexp(sexp_011){
    a:
    {
     if(0 === sexp_011[0]){
      var _aW_ = sexp_011[1];
      b:
      if(_aW_ !== cst_Closed_locally){
       c:
       if(_aW_ !== cst_Closed_remotely){
        if(_aW_ !== cst_Error){
         if(_aW_ === cst_closed_locally) break b;
         if(_aW_ === cst_closed_remotely) break c;
         if(_aW_ !== cst_error) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_009, sexp_011);
       }
       return 1;
      }
      return 0;
     }
     var _aX_ = sexp_011[1];
     if(! _aX_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_009, sexp_011);
     var _aY_ = _aX_[1];
     if(0 !== _aY_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_009, sexp_011);
     var tag_012 = _aY_[1];
     b:
     if(tag_012 !== cst_Closed_locally){
      c:
      if(tag_012 !== cst_Closed_remotely){
       if(tag_012 !== cst_Error){
        if(tag_012 === cst_closed_locally) break b;
        if(tag_012 === cst_closed_remotely) break c;
        if(tag_012 !== cst_error) break a;
       }
       var sexp_args_013 = _aX_[2];
       if(sexp_args_013 && ! sexp_args_013[2]){
        var
         arg0_014 = sexp_args_013[1],
         res0_015 = caml_call1(Core_Error[5], arg0_014);
        return [0, res0_015];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_009,
                tag_012,
                sexp_011);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[3], error_source_009, sexp_011);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_009, sexp_011);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_009, sexp_011);
   }
   function sexp_of_t(param){
    if(typeof param === "number") return param ? _n_ : _o_;
    var arg0_016 = param[1], res0_017 = caml_call1(Core_Error[6], arg0_016);
    return [1, [0, _p_, [0, res0_017, 0]]];
   }
   var
    Expect_test_collector$0 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_rpc_ml = cst_src_rpc_ml$1,
    _q_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_rpc_ml$1),
       471,
       12060,
       12073,
       12111],
    _r_ =
      [0,
       [0,
        [0, cst$9],
        [1, cst_748c8bf4502d0978d007bf7f96],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_rpc_ml$1),
         471,
         12060,
         12066,
         12072],
        _q_],
       0],
    _s_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_rpc_ml$1),
       469,
       12002,
       12004,
       12112],
    _t_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_9250fb765cda343889f7d38235);
   caml_call9
    (Expect_test_collector$0[3],
     _t_,
     _s_,
     cst_src_rpc_ml$1,
     0,
     0,
     _r_,
     0,
     Inline_test_config,
     function(param){
      var
       _aT_ = caml_call1(Bin_prot_Shape[15], bin_shape_t),
       _aU_ = caml_call1(Bin_shape[19][4], _aT_);
      caml_call1(Core[31], _aU_);
      var
       _aV_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_rpc_ml),
          471,
          12060,
          12066,
          12072];
      return caml_call1(Expect_test_collector$0[1], _aV_);
     });
   var
    _u_ =
      caml_call1
       (Bin_prot_Shape[5],
        [0,
         [0, cst_Closed_locally, 0],
         [0,
          [0, cst_Closed_remotely, 0],
          [0, [0, cst_Error, [0, Core_Error[40][2][9], 0]], 0]]]),
    _v_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _u_], 0],
    _w_ = caml_call1(Bin_shape[4][1], "src/rpc.ml:476:6"),
    group$0 = caml_call2(Bin_prot_Shape[2], _w_, _v_),
    _x_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t$0 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _x_), 0);
   function bin_size_t$0(param){
    if(typeof param === "number") return 1;
    var v1 = param[1], _aS_ = caml_call1(Core_Error[40][2][5], v1);
    return caml_call2(Bin_prot_Common[23], 1, _aS_);
   }
   function bin_write_t$0(buf, pos, param){
    if(typeof param === "number")
     return param
             ? caml_call3(Bin_prot_Write[30], buf, pos, 1)
             : caml_call3(Bin_prot_Write[30], buf, pos, 0);
    var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
    return caml_call3(Core_Error[40][2][6], buf, pos$0, v1);
   }
   var
    bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0],
    cst_src_rpc_ml_Pipe_close_reas$0 = cst_src_rpc_ml_Pipe_close_reas$1,
    _y_ = [1, cst_src_rpc_ml_Pipe_close_reas$1];
   function bin_read_t$1(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_rpc_ml_Pipe_close_reas$0,
             pos_ref[1]);
   }
   function bin_read_t$2(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(2 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _y_, pos_ref[1]);
    switch(match){
      case 0:
       return 0;
      case 1:
       return 1;
      default:
       var arg_1 = caml_call2(Core_Error[40][2][7], buf, pos_ref);
       return [0, arg_1];
    }
   }
   var
    bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
    bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0],
    _z_ = [0, cst_Closed_remotely],
    _A_ = [0, cst_Closed_locally],
    _B_ = [0, cst_Error];
   function compare$0(a_018, b_019){
    if(a_018 === b_019) return 0;
    if(typeof a_018 === "number"){
     if(! a_018){
      if(typeof b_019 === "number" && ! b_019) return 0;
      return -1;
     }
     if(typeof b_019 !== "number") return -1;
     if(b_019) return 0;
    }
    else{
     var a_020 = a_018[1];
     if(typeof b_019 !== "number"){
      var b_021 = b_019[1];
      return caml_call2(Core_Error[40][2][13], a_020, b_021);
     }
     if(b_019) return 1;
    }
    return 1;
   }
   function t_of_sexp$0(sexp_026){
    a:
    {
     if(0 === sexp_026[0]){
      var _aP_ = sexp_026[1];
      b:
      if(_aP_ !== cst_Closed_locally){
       c:
       if(_aP_ !== cst_Closed_remotely){
        if(_aP_ !== cst_Error){
         if(_aP_ === cst_closed_locally) break b;
         if(_aP_ === cst_closed_remotely) break c;
         if(_aP_ !== cst_error) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_024, sexp_026);
       }
       return 1;
      }
      return 0;
     }
     var _aQ_ = sexp_026[1];
     if(! _aQ_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_024, sexp_026);
     var _aR_ = _aQ_[1];
     if(0 !== _aR_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_024, sexp_026);
     var tag_027 = _aR_[1];
     b:
     if(tag_027 !== cst_Closed_locally){
      c:
      if(tag_027 !== cst_Closed_remotely){
       if(tag_027 !== cst_Error){
        if(tag_027 === cst_closed_locally) break b;
        if(tag_027 === cst_closed_remotely) break c;
        if(tag_027 !== cst_error) break a;
       }
       var sexp_args_028 = _aQ_[2];
       if(sexp_args_028 && ! sexp_args_028[2]){
        var
         arg0_029 = sexp_args_028[1],
         res0_030 = caml_call1(Core_Error[40][2][14], arg0_029);
        return [0, res0_030];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_024,
                tag_027,
                sexp_026);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[3], error_source_024, sexp_026);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_024, sexp_026);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_024, sexp_026);
   }
   function sexp_of_t$0(param){
    if(typeof param === "number") return param ? _z_ : _A_;
    var
     arg0_031 = param[1],
     res0_032 = caml_call1(Core_Error[40][2][15], arg0_031);
    return [1, [0, _B_, [0, res0_032, 0]]];
   }
   var
    Expect_test_collector$1 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_rpc_ml$0 = cst_src_rpc_ml$1,
    _C_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_rpc_ml$1),
       484,
       12389,
       12406,
       12444],
    _D_ =
      [0,
       [0,
        [0, cst$9],
        [1, cst_748c8bf4502d0978d007bf7f96],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_rpc_ml$1),
         484,
         12389,
         12399,
         12405],
        _C_],
       0],
    _E_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_rpc_ml$1),
       482,
       12323,
       12329,
       12445],
    _F_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_9250fb765cda343889f7d38235);
   caml_call9
    (Expect_test_collector$1[3],
     _F_,
     _E_,
     cst_src_rpc_ml$1,
     0,
     0,
     _D_,
     0,
     Inline_test_config,
     function(param){
      var
       _aM_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$0),
       _aN_ = caml_call1(Bin_shape[19][4], _aM_);
      caml_call1(Core[31], _aN_);
      var
       _aO_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_rpc_ml$0),
          484,
          12389,
          12399,
          12405];
      return caml_call1(Expect_test_collector$1[1], _aO_);
     });
   var _G_ = [0, cst_query, 0], _H_ = [0, ":error", 0];
   function create$1
   (client_pushes_back,
    name,
    version,
    bin_query,
    bin_initial_response,
    bin_update_response,
    bin_error,
    alias_for_initial_response,
    alias_for_update_response,
    param){
    var
     client_pushes_back$0 = client_pushes_back ? 1 : 0,
     _aE_ = Core[148],
     _aF_ = caml_call2(Stdlib_String[7], cst$2, [0, name, _G_]),
     query_type_id = caml_call2(Core_Type_equal[8][3], _aF_, _aE_),
     _aG_ = Core[148],
     _aH_ =
       caml_call2
        (Stdlib_String[7],
         cst$4,
         [0, name, [0, cst$3, [0, alias_for_initial_response, 0]]]),
     initial_response_type_id = caml_call2(Core_Type_equal[8][3], _aH_, _aG_),
     _aI_ = Core[148],
     _aJ_ =
       caml_call2
        (Stdlib_String[7],
         cst$6,
         [0, name, [0, cst$5, [0, alias_for_update_response, 0]]]),
     update_response_type_id = caml_call2(Core_Type_equal[8][3], _aJ_, _aI_),
     _aK_ = Core[148],
     _aL_ = caml_call2(Stdlib_String[7], cst$7, [0, name, _H_]),
     error_response_type_id = caml_call2(Core_Type_equal[8][3], _aL_, _aK_);
    return [0,
            caml_call1(Async_rpc_kernel_Protocol[1][11], name),
            version,
            bin_query,
            bin_initial_response,
            bin_update_response,
            bin_error,
            client_pushes_back$0,
            query_type_id,
            initial_response_type_id,
            update_response_type_id,
            error_response_type_id];
   }
   function make_initial_message(x){
    return [0, Async_rpc_kernel_Protocol[3][10], x];
   }
   function implement_gen(t, opt, impl){
    var
     on_exception = opt ? opt[1] : Async_rpc_kernel_On_exception[3],
     bin_init_writer =
       caml_call2(Async_rpc_kernel_Protocol[10][4], t[4][2], t[6][2]);
    return [0,
            t[1],
            t[2],
            [4, [0, t[3][3], bin_init_writer, t[5][2], impl]],
            [246,
             function(_aD_){return [2, t[3][1], t[4][1], t[5][1], t[6][1]];}],
            on_exception];
   }
   function implement$5(on_exception, t, f){
    function f$0(c, query){
     var _aC_ = caml_call2(f, c, query);
     return caml_call2
             (Async_kernel[22][3],
              _aC_,
              function(param){
               if(0 === param[0]){
                var match = param[1], pipe = match[2], initial = match[1];
                return [0, [0, [0, make_initial_message([0, initial]), pipe]]];
               }
               var err = param[1];
               return [0, [1, make_initial_message([1, err])]];
              });
    }
    return implement_gen(t, on_exception, [0, f$0]);
   }
   function implement_direct(on_exception, t, f){
    function f$0(c, query, writer){
     var _aB_ = caml_call3(f, c, query, writer);
     return caml_call2
             (Async_kernel[22][3],
              _aB_,
              function(x){
               return 0 === x[0]
                       ? [0, [0, make_initial_message(x)]]
                       : [0, [1, make_initial_message(x)]];
              });
    }
    return implement_gen(t, on_exception, [1, f$0]);
   }
   function abort(t, conn, id){
    var query = [0, t[1], t[2], id, 0, 774323088];
    caml_call4
     (Async_rpc_kernel_Connection[20],
      conn,
      0,
      Async_rpc_kernel_Protocol[9][17],
      query);
    return 0;
   }
   var
    Pipe_message = [0],
    Pipe_response = [0],
    _I_ = [1, 636790696],
    _J_ = [0, 76061764, [0, 0]],
    _K_ = [0, 76061764, [0, 0]],
    cst_client_side_streaming_rpc_ =
      "client-side streaming_rpc initial_response un-bin-io'ing",
    _L_ = [0, 76061764, [0, 0]],
    cst_client_side_streaming_rpc_$0 = cst_client_side_streaming_rpc_$2,
    cst_client_side_streaming_rpc_$1 = cst_client_side_streaming_rpc_$2,
    cst_response = "response";
   function id(t){return t[1];}
   function close_reason(t){return t[2];}
   function read_error(get_connection_close_reason, handler, err){
    var
     _aA_ =
       caml_call2
        (Async_rpc_kernel_Rpc_error[29], err, get_connection_close_reason),
     core_err = caml_call1(Core_Error[5], _aA_);
    caml_call1(handler, [1, [0, 106380200, core_err]]);
    return [0, 76061764, [1, err]];
   }
   function dispatch_gen(metadata, t, conn, query, make_update_handler){
    var
     _ar_ = caml_call1(Async_rpc_kernel_Writer_with_l[2], t[3]),
     bin_writer_query = caml_call1(Async_rpc_kernel_Protocol[9][4], _ar_),
     query$0 = [0, -250086680, query],
     query_id = caml_call1(Async_rpc_kernel_Protocol[2][45], 0),
     _as_ = caml_call2(Async_rpc_kernel_Connection[12], conn, 890972481),
     _at_ = caml_call1(Async_rpc_kernel_Connection[6], conn),
     _au_ = t[2],
     _av_ = [0, caml_call1(Async_rpc_kernel_Protocol[1][12], t[1]), _au_],
     _aw_ = caml_call3(Async_rpc_kernel_Rpc_result[4], _av_, _at_, _as_),
     _ax_ =
       dispatch_raw$0
        (metadata,
         conn,
         t[1],
         t[2],
         bin_writer_query,
         query$0,
         query_id,
         function(ivar){
          var
           initial_state = [0, t, query_id, make_update_handler, ivar, conn];
          function get_connection_close_reason(param){
           var
            _az_ =
              caml_call2(Async_rpc_kernel_Connection[12], conn, 890972481),
            x_033 = caml_call1(Async_kernel_Deferred[5], _az_);
           return caml_call2(Core[466], Core_Info[6], x_033);
          }
          var state = [0, [0, initial_state]];
          return function(response, read_buffer, read_buffer_pos_ref){
           var match = state[1];
           if(0 === match[0]){
            var
             initial_handler = match[1],
             error =
               function(err){
                caml_call2
                 (Async_kernel_Ivar[14], initial_handler[4], [1, err]);
                return _K_;
               },
             match$0 = response[2];
            if(0 !== match$0[0]){var err$1 = match$0[1]; return error(err$1);}
            var
             len = match$0[1],
             _ay_ =
               caml_call2
                (Async_rpc_kernel_Protocol[10][7],
                 initial_handler[1][4][3],
                 initial_handler[1][6][3]),
             initial =
               caml_call6
                (Async_rpc_kernel_Util[1],
                 _ay_,
                 0,
                 read_buffer,
                 read_buffer_pos_ref,
                 len,
                 cst_client_side_streaming_rpc_);
            if(0 !== initial[0]){var err$0 = initial[1]; return error(err$0);}
            var initial_msg = initial[1], match$1 = initial_msg[2];
            if(0 === match$1[0]){
             var
              initial$0 = match$1[1],
              match$2 = caml_call1(initial_handler[3], 0),
              handler = match$2[2],
              extra = match$2[1];
             caml_call2
              (Async_kernel_Ivar[14],
               initial_handler[4],
               [0, [0, [0, initial_handler[2], initial$0, extra]]]);
             state[1] = [1, initial_handler[1][5][3], handler];
             return -955854715;
            }
            var err = match$1[1];
            caml_call2
             (Async_kernel_Ivar[14], initial_handler[4], [0, [1, err]]);
            return _L_;
           }
           var
            handler$0 = match[2],
            bin_reader_update = match[1],
            match$3 = response[2];
           if(0 !== match$3[0]){
            var err$4 = match$3[1];
            return read_error(get_connection_close_reason, handler$0, err$4);
           }
           var
            len$0 = match$3[1],
            data =
              caml_call6
               (Async_rpc_kernel_Util[1],
                Async_rpc_kernel_Protocol[11][14],
                [0,
                 function(param){
                  if(typeof param === "number") return 0;
                  var len = param[2];
                  return len;
                 }],
                read_buffer,
                read_buffer_pos_ref,
                len$0,
                cst_client_side_streaming_rpc_$0);
           if(0 !== data[0]){
            var err$3 = data[1];
            return read_error(get_connection_close_reason, handler$0, err$3);
           }
           var match$4 = data[1];
           if(typeof match$4 === "number"){
            caml_call1(handler$0, _I_);
            return _J_;
           }
           var
            len$1 = match$4[2],
            data$0 =
              caml_call6
               (Async_rpc_kernel_Util[1],
                bin_reader_update,
                0,
                read_buffer,
                read_buffer_pos_ref,
                len$1,
                cst_client_side_streaming_rpc_$1);
           if(0 !== data$0[0]){
            var err$2 = data$0[1];
            return read_error(get_connection_close_reason, handler$0, err$2);
           }
           var
            data$1 = data$0[1],
            match$5 = caml_call1(handler$0, [0, data$1]);
           if(! match$5) return -955854715;
           var d = match$5[1];
           return [0, -822977931, d];};
         });
    return caml_call2(Async_kernel[21], _ax_, _aw_);
   }
   function dispatch$5(metadata, t, conn, query){
    var
     _ai_ =
       dispatch_gen
        (metadata,
         t,
         conn,
         query,
         function(param){
          var
           match = caml_call3(Async_kernel_Pipe[7], 0, 0, 0),
           pipe_w = match[2],
           pipe_r = match[1];
          caml_call2(Async_kernel_Pipe[80], pipe_w, 100);
          var close_reason = caml_call1(Async_kernel_Ivar[12], 0);
          function f(param){
           if(0 !== param[0]){
            var reason = param[1];
            if(typeof reason === "number")
             var _aq_ = 1;
            else
             var err = reason[2], _aq_ = [0, err];
            caml_call2(Async_kernel_Ivar[15], close_reason, _aq_);
            caml_call1(Async_kernel_Pipe[15], pipe_w);
            return 0;
           }
           var data = param[1];
           if(caml_call1(Async_kernel_Pipe[17], pipe_w)) return 0;
           caml_call2(Async_kernel_Pipe[28], pipe_w, data);
           if(t[7]){
            var
             _an_ = caml_call1(Async_kernel_Pipe[79], pipe_w),
             _ao_ = caml_call1(Async_kernel_Pipe[24], pipe_w);
            if(caml_call2(Core[87], _ao_, _an_)){
             var _ap_ = caml_call1(Async_kernel_Pipe[21], pipe_w);
             return [0,
                     caml_call2
                      (Async_kernel[22][3], _ap_, function(param){return 0;})];
            }
           }
           return 0;
          }
          return [0, [0, pipe_r, close_reason], f];
         });
    return caml_call2
            (Async_kernel[22][3],
             _ai_,
             function(e){
              if(0 === e[0]){
               var _aj_ = e[1];
               if(0 === _aj_[0]){
                var
                 _ak_ = _aj_[1],
                 match = _ak_[3],
                 close_reason = match[2],
                 pipe_r = match[1],
                 init = _ak_[2],
                 id = _ak_[1],
                 _al_ = caml_call1(Async_kernel_Pipe[18], pipe_r);
                caml_call2
                 (Async_kernel[12],
                  _al_,
                  function(param){
                   var
                    _am_ = 1 - caml_call1(Async_kernel_Ivar[17], close_reason);
                   return _am_
                           ? (abort
                              (t, conn, id),
                             caml_call2(Async_kernel_Ivar[15], close_reason, 0))
                           : _am_;
                  });
                var
                 pipe_metadata =
                   [0, id, caml_call1(Async_kernel_Ivar[18], close_reason)];
                return [0, [0, [0, pipe_metadata, init, pipe_r]]];
               }
              }
              return e;
             });
   }
   function create$2
   (client_pushes_back,
    name,
    version,
    bin_query,
    bin_response,
    bin_error,
    param){
    return create$1
            (client_pushes_back,
             name,
             version,
             bin_query,
             Core_Unit[14],
             bin_response,
             bin_error,
             cst$8,
             cst_response,
             0);
   }
   function bin_query$0(t){return t[3];}
   function bin_response$0(t){return t[5];}
   function bin_error(t){return t[6];}
   function client_pushes_back(t){return t[7];}
   function implement$6(on_exception, t, f){
    return implement$5
            (on_exception,
             t,
             function(a, query){
              var _ah_ = caml_call2(f, a, query);
              return caml_call2
                      (Async_kernel[22][3],
                       _ah_,
                       function(x){
                        return caml_call2
                                (symbol$0, x, function(x){return [0, 0, x];});
                       });
             });
   }
   var
    include = Async_rpc_kernel_Implementatio[4],
    close = include[1],
    closed = include[2],
    is_closed = include[3],
    write = include[4],
    write_without_pushback = include[5],
    flushed = include[6],
    bin_writer = include[7],
    Expert = include[8],
    cst_Rpc_Pipe_rpc_Direct_stream =
      "Rpc.Pipe_rpc.Direct_stream_writer.Group.Buffer.create got negative buffer size",
    _M_ = [0, cst_src_rpc_ml$1, 888, 25765, 25785];
   function create$3(opt, param){
    var initial_size = opt ? opt[1] : 4096;
    if(caml_call2(Core[91], initial_size, 0))
     caml_call5
      (Core[241],
       0,
       _M_,
       cst_Rpc_Pipe_rpc_Direct_stream,
       initial_size,
       Core_Int[82]);
    return [0, caml_call2(Core_Bigstring[117], 0, initial_size)];
   }
   var
    Buffer = [0, create$3],
    cst_Rpc_Pipe_rpc_Direct_stream$0 =
      "Rpc.Pipe_rpc.Direct_stream_writer.Group.add_exn: cannot add a closed direct stream writer",
    cst_Rpc_Pipe_rpc_Direct_stream$1 =
      "Rpc.Pipe_rpc.Direct_stream_writer.Group.add_exn: trying to add a direct stream writer that is already present in the group",
    cst_Rpc_Pipe_rpc_Direct_stream$2 =
      "Rpc.Pipe_rpc.Direct_stream_writer.Group.add: cannot add a direct stream writer with a different bin_writer";
   function create$4(buffer, param){
    if(buffer)
     var b = buffer[1], buffer$0 = b;
    else
     var buffer$0 = caml_call2(Buffer[1], 0, 0);
    var
     _ag_ = caml_call3(Async_rpc_kernel_Implementatio$0[1][38][5], 0, 0, 0);
    return [0, caml_call1(Core_Bag[22], 0), _ag_, buffer$0];
   }
   function length(t){return caml_call1(Core_Bag[5], t[1]);}
   function add_exn(t, writer){
    if(caml_call1(is_closed, writer))
     caml_call1(Core[5], cst_Rpc_Pipe_rpc_Direct_stream$0);
    if(caml_call2(Core_Hashtbl[30], t[2], writer[1]))
     caml_call1(Core[5], cst_Rpc_Pipe_rpc_Direct_stream$1);
    var match = caml_call1(Core_Bag[27], t[1]);
    if(match){
     var
      one = match[1],
      one$0 = caml_call1(Core_Bag[1][3], one),
      _af_ = caml_call1(bin_writer, writer);
     if(1 - (caml_call1(bin_writer, one$0) === _af_ ? 1 : 0))
      caml_call1(Core[5], cst_Rpc_Pipe_rpc_Direct_stream$2);
    }
    var
     writer_element_in_group = caml_call2(Core_Bag[23], t[1], writer),
     group_element_in_writer =
       caml_call2(Core_Bag[23], writer[7], [0, t, writer_element_in_group]);
    return caml_call3
            (Core_Hashtbl[38],
             t[2],
             writer[1],
             [0, writer_element_in_group, group_element_in_writer]);
   }
   function remove(t, writer){
    var match = caml_call2(Core_Hashtbl[63], t[2], writer[1]);
    if(! match) return 0;
    var
     match$0 = match[1],
     group_element_in_writer = match$0[2],
     writer_element_in_group = match$0[1];
    caml_call2(Core_Bag[26], t[1], writer_element_in_group);
    return caml_call2(Core_Bag[26], writer[7], group_element_in_writer);
   }
   function to_list(t){return caml_call1(Core_Bag[17], t[1]);}
   function flushed_or_closed(t){
    var
     _ab_ = to_list(t),
     _ac_ =
       caml_call2
        (Core_List[50],
         _ab_,
         function(t){
          var
           _ad_ = [0, caml_call1(closed, t), 0],
           _ae_ = [0, caml_call1(flushed, t), _ad_];
          return caml_call1(Async_kernel_Deferred[24], _ae_);
         });
    return caml_call1(Async_kernel_Deferred[22], _ac_);
   }
   function flushed$0(t){return flushed_or_closed(t);}
   function write_without_pushback$0(t, buf, pos, len){
    return caml_call2
            (Core_Bag[7],
             t[1],
             function(direct_stream_writer){
              caml_call4(Expert[2], direct_stream_writer, buf, pos, len);
              return 0;
             });
   }
   function write$0(t, buf, pos, len){
    write_without_pushback$0(t, buf, pos, len);
    return flushed_or_closed(t);
   }
   function write_without_pushback$1(t, x){
    var match = caml_call1(Core_Bag[27], t[1]);
    if(! match) return 0;
    var
     one = match[1],
     one$0 = caml_call1(Core_Bag[1][3], one),
     match$0 = caml_call1(bin_writer, one$0),
     write = match$0[2],
     size = match$0[1],
     buffer = t[3][1];
    try{var len$1 = caml_call3(write, buffer, 0, x);}
    catch(_aa_){
     var len = caml_call1(size, x);
     runtime.bigstring_destroy_stub(buffer);
     var
      _$_ = caml_call1(Core_Int[46], len),
      buffer$0 = caml_call2(Core_Bigstring[117], 0, _$_);
     t[3][1] = buffer$0;
     var len$0 = caml_call3(write, buffer$0, 0, x);
     return write_without_pushback$0(t, buffer$0, 0, len$0);
    }
    return write_without_pushback$0(t, buffer, 0, len$1);
   }
   function write$1(t, x){
    write_without_pushback$1(t, x);
    return flushed_or_closed(t);
   }
   function implement_direct$0(on_exception, t, f){return implement_direct(on_exception, t, f);
   }
   function dispatch$6(metadata, t, conn, query){
    var ___ = dispatch$5(metadata, t, conn, query);
    return caml_call2
            (Async_kernel[22][3],
             ___,
             function(response){
              return caml_call2
                      (symbol$0,
                       response,
                       function(x){
                        return caml_call2
                                (symbol$0,
                                 x,
                                 function(param){
                                  var pipe_r = param[3], metadata = param[1];
                                  return [0, pipe_r, metadata];
                                 });
                       });
             });
   }
   var
    Pipe_rpc_failed =
      [248,
       "Async_rpc_kernel__Rpc.Pipe_rpc.Pipe_rpc_failed",
       runtime.caml_fresh_oo_id(0)],
    cst_update = "update",
    cst_state = "state";
   function dispatch_exn$1(metadata, t, conn, query){
    var _Z_ = dispatch$6(metadata, t, conn, query);
    return caml_call2
            (Async_kernel[22][3],
             _Z_,
             function(result){
              if(0 !== result[0]){
               var rpc_error = result[1];
               throw caml_maybe_attach_backtrace
                      (caml_call1(Core_Error[26], rpc_error), 0);
              }
              var match = result[1];
              if(0 !== match[0])
               throw caml_maybe_attach_backtrace(Pipe_rpc_failed, 0);
              var pipe_and_id = match[1];
              return pipe_and_id;
             });
   }
   function dispatch_iter(metadata, t, conn, query, f){
    var
     _W_ =
       dispatch_gen
        (metadata, t, conn, query, function(param){return [0, 0, f];}),
     _X_ =
       caml_call2
        (Async_kernel[22][3],
         _W_,
         function(e){
          if(0 === e[0]){
           var _Y_ = e[1];
           if(0 === _Y_[0]){
            var match = _Y_[1], init = match[2], id = match[1];
            return [0, [0, [0, id, init]]];
           }
          }
          return e;
         });
    return caml_call2
            (Async_kernel[22][3],
             _X_,
             function(response){
              return caml_call2
                      (symbol$0,
                       response,
                       function(x){
                        return caml_call2
                                (symbol$0,
                                 x,
                                 function(param){var id = param[1]; return id;});
                       });
             });
   }
   function name$1(t){
    return caml_call1(Async_rpc_kernel_Protocol[1][12], t[1]);
   }
   function version$1(t){return t[2];}
   function description$1(t){var _V_ = t[2]; return [0, name$1(t), _V_];}
   function query_type_id$0(t){return t[8];}
   function error_type_id(t){return t[11];}
   function response_type_id$0(t){return t[10];}
   function create$5
   (client_pushes_back,
    name,
    version,
    bin_query,
    bin_state,
    bin_update,
    bin_error,
    param){
    return create$1
            (client_pushes_back,
             name,
             version,
             bin_query,
             bin_state,
             bin_update,
             bin_error,
             cst_state,
             cst_update,
             0);
   }
   function bin_query$1(t){return t[3];}
   function bin_state(t){return t[4];}
   function bin_update(t){return t[5];}
   function bin_error$0(t){return t[6];}
   function dispatch$7(metadata, t, conn, query){
    var _U_ = dispatch$5(metadata, t, conn, query);
    return caml_call2
            (Async_kernel[22][3],
             _U_,
             function(response){
              return caml_call2
                      (symbol$0,
                       response,
                       function(x){
                        return caml_call2
                                (symbol$0,
                                 x,
                                 function(param){
                                  var
                                   update_r = param[3],
                                   state = param[2],
                                   metadata = param[1];
                                  return [0, state, update_r, metadata];
                                 });
                       });
             });
   }
   function client_pushes_back$0(t){return t[7];}
   function name$2(t){
    return caml_call1(Async_rpc_kernel_Protocol[1][12], t[1]);
   }
   function version$2(t){return t[2];}
   function description$2(t){var _T_ = t[2]; return [0, name$2(t), _T_];}
   function query_type_id$1(t){return t[8];}
   function state_type_id(t){return t[9];}
   function update_type_id(t){return t[10];}
   function error_type_id$0(t){return t[11];}
   function description$3(param){
    switch(param[0]){
      case 0:
       var rpc = param[1]; return description(rpc);
      case 1:
       var rpc$0 = param[1]; return description$1(rpc$0);
      case 2:
       var rpc$1 = param[1]; return description$2(rpc$1);
      default: var rpc$2 = param[1]; return description$0(rpc$2);
    }
   }
   var Any = [0, description$3];
   caml_call1(Ppx_inline_test_lib[6], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Rpc);
   var
    _N_ = Async_rpc_kernel_Description[36],
    _O_ = Async_rpc_kernel_Description[35],
    _P_ = Async_rpc_kernel_Description[30],
    _Q_ = _P_[1],
    _R_ = Async_rpc_kernel_Description[29],
    _S_ = _R_[1],
    Async_rpc_kernel_Rpc =
      [0,
       [0,
        Async_rpc_kernel_Description[9],
        Async_rpc_kernel_Description[10],
        Async_rpc_kernel_Description[11],
        Async_rpc_kernel_Description[12],
        Async_rpc_kernel_Description[13],
        Async_rpc_kernel_Description[14],
        Async_rpc_kernel_Description[15],
        Async_rpc_kernel_Description[16],
        Async_rpc_kernel_Description[17],
        Async_rpc_kernel_Description[18],
        Async_rpc_kernel_Description[19],
        Async_rpc_kernel_Description[20],
        Async_rpc_kernel_Description[21],
        Async_rpc_kernel_Description[22],
        Async_rpc_kernel_Description[23],
        Async_rpc_kernel_Description[24],
        Async_rpc_kernel_Description[25],
        Async_rpc_kernel_Description[26],
        Async_rpc_kernel_Description[27],
        Async_rpc_kernel_Description[28],
        [0,
         [0, _S_[2], _S_[3]],
         _R_[2],
         _R_[3],
         _R_[42],
         _R_[4],
         _R_[5],
         _R_[6],
         _R_[7],
         _R_[8],
         _R_[9],
         _R_[10],
         _R_[11],
         _R_[12],
         _R_[13],
         _R_[14],
         _R_[15],
         _R_[16],
         _R_[17],
         _R_[18],
         _R_[19],
         _R_[20],
         _R_[21],
         _R_[22],
         _R_[23],
         _R_[24],
         _R_[25],
         _R_[26],
         _R_[27],
         _R_[28],
         _R_[29],
         _R_[30],
         _R_[31],
         _R_[32],
         _R_[33],
         _R_[34],
         _R_[35],
         _R_[36],
         _R_[37],
         _R_[38],
         _R_[39],
         _R_[40]],
        [0,
         [0, _Q_[2], _Q_[3]],
         _P_[2],
         _P_[3],
         _P_[27],
         _P_[4],
         _P_[5],
         _P_[6],
         _P_[7],
         _P_[8],
         _P_[9],
         _P_[10],
         _P_[11],
         _P_[12],
         _P_[13],
         _P_[14],
         _P_[15],
         _P_[16],
         _P_[17],
         _P_[18],
         _P_[19],
         _P_[20],
         _P_[21],
         _P_[22],
         _P_[23],
         _P_[24],
         _P_[25]],
        Async_rpc_kernel_Description[31],
        Async_rpc_kernel_Description[32],
        Async_rpc_kernel_Description[33],
        Async_rpc_kernel_Description[34],
        [0,
         _O_[1],
         _O_[2],
         _O_[3],
         _O_[4],
         _O_[5],
         _O_[6],
         _O_[7],
         _O_[8],
         _O_[9],
         _O_[10],
         _O_[11],
         _O_[12],
         _O_[13],
         _O_[14],
         _O_[15],
         _O_[16],
         _O_[17]],
        [0, _N_[1], _N_[2], _N_[3], _N_[4], _N_[5], _N_[6]],
        Async_rpc_kernel_Description[37],
        Async_rpc_kernel_Description[38],
        Async_rpc_kernel_Description[39]],
       [0, Async_rpc_kernel_On_exception[2], Async_rpc_kernel_On_exception[3]],
       [0,
        Async_rpc_kernel_Implementatio$1[3],
        Async_rpc_kernel_Implementatio$1[4],
        Async_rpc_kernel_Implementatio$1[5],
        Async_rpc_kernel_Implementatio$1[6],
        Async_rpc_kernel_Implementatio$1[7],
        Async_rpc_kernel_Implementatio$1[8],
        Async_rpc_kernel_Implementatio$1[9]],
       [0,
        Async_rpc_kernel_Implementatio[2],
        Async_rpc_kernel_Implementatio[3],
        Async_rpc_kernel_Implementatio[1],
        Async_rpc_kernel_Implementatio[7],
        Async_rpc_kernel_Implementatio[8],
        Async_rpc_kernel_Implementatio[9],
        Async_rpc_kernel_Implementatio[10],
        [0, [0], Async_rpc_kernel_Implementatio[11][2]]],
       [0,
        Async_rpc_kernel_Connection[1],
        Async_rpc_kernel_Connection[2],
        Async_rpc_kernel_Connection[3],
        Async_rpc_kernel_Connection[4],
        Async_rpc_kernel_Connection[5],
        Async_rpc_kernel_Connection[6],
        Async_rpc_kernel_Connection[7],
        Async_rpc_kernel_Connection[8],
        Async_rpc_kernel_Connection[9],
        Async_rpc_kernel_Connection[10],
        Async_rpc_kernel_Connection[11],
        Async_rpc_kernel_Connection[12],
        Async_rpc_kernel_Connection[13],
        Async_rpc_kernel_Connection[14],
        Async_rpc_kernel_Connection[15],
        Async_rpc_kernel_Connection[16],
        Async_rpc_kernel_Connection[17],
        Async_rpc_kernel_Connection[18],
        Async_rpc_kernel_Connection[19]],
       [0,
        create,
        name,
        version,
        description,
        query_type_id,
        response_type_id,
        bin_query,
        bin_response,
        implement,
        implement$0,
        dispatch,
        rpc_result_to_or_error,
        dispatch$0,
        dispatch_exn,
        [0,
         Async_rpc_kernel_Implementatio[11][1],
         schedule_dispatch,
         dispatch$1,
         implement$1,
         implement$2,
         implement_for_tag_and_version,
         implement_for_tag_and_version$0]],
       [0,
        bin_size_t,
        bin_write_t,
        bin_read_t$0,
        bin_read_t,
        bin_shape_t,
        bin_writer_t,
        bin_reader_t,
        bin_t,
        compare,
        t_of_sexp,
        sexp_of_t,
        [0,
         [0,
          bin_size_t$0,
          bin_write_t$0,
          bin_read_t$2,
          bin_read_t$1,
          bin_shape_t$0,
          bin_writer_t$0,
          bin_reader_t$0,
          bin_t$0,
          compare$0,
          t_of_sexp$0,
          sexp_of_t$0]]],
       [0,
        [0],
        [0, id],
        create$2,
        bin_query$0,
        bin_response$0,
        bin_error,
        implement$6,
        [0,
         write,
         write_without_pushback,
         close,
         closed,
         flushed,
         is_closed,
         Expert,
         [0,
          Buffer,
          create$4,
          flushed_or_closed,
          flushed$0,
          add_exn,
          remove,
          write$1,
          write_without_pushback$1,
          to_list,
          length,
          [0, write$0, write_without_pushback$0]]],
        implement_direct$0,
        dispatch$6,
        dispatch_exn$1,
        Pipe_message,
        Pipe_response,
        dispatch_iter,
        abort,
        close_reason,
        client_pushes_back,
        name$1,
        version$1,
        description$1,
        query_type_id$0,
        response_type_id$0,
        error_type_id],
       [0,
        [0],
        [0, id],
        create$5,
        bin_query$1,
        bin_state,
        bin_update,
        bin_error$0,
        implement$5,
        implement_direct,
        dispatch$7,
        abort,
        close_reason,
        client_pushes_back$0,
        name$2,
        version$2,
        description$2,
        query_type_id$1,
        state_type_id,
        update_type_id,
        error_type_id$0],
       [0,
        create$0,
        name$0,
        version$0,
        description$0,
        msg_type_id,
        bin_msg,
        implement$3,
        dispatch$2,
        rpc_result_to_or_error$0,
        dispatch$3,
        dispatch_exn$0,
        [0, implement$4, dispatch$4, schedule_dispatch$0]],
       Any,
       [0,
        [0, create, description, bin_query, bin_response],
        [0, create$2, description$1, bin_query$0, bin_response$0, bin_error],
        [0,
         create$5,
         description$2,
         bin_query$1,
         bin_state,
         bin_update,
         bin_error$0],
        [0, create$0, description$0, bin_msg]]];
   runtime.caml_register_global
    (156, Async_rpc_kernel_Rpc, cst_Async_rpc_kernel_Rpc);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Versioned_rpc
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_kernel__Deferred_or_error, Async_kernel__Deferred_result, Async_kernel__Monitor, Async_kernel__Pipe, Async_rpc_kernel__Rpc, Async_rpc_kernel__Rpc_shapes, Base__Field, Base__List, Base__Monad, Bin_prot__Common, Bin_prot__Shape, Bin_shape, Core, Core__Error, Core__Hashtbl, Core__Int, Core__List, Core__Map, Core__Memo, Core__Option, Core__Or_error, Core__Result, Core__Set, Core__String, Expect_test_collector, Expect_test_common__File, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_86ba5df747eec837f0b391dd49 = " 86ba5df747eec837f0b391dd49f33f9e ",
    cst_08d30aff7a6da374e03d7f344a = "08d30aff7a6da374e03d7f344adbf1b8",
    cst_Int_Set_equal_Caller_versi$5 =
      "<<Int.Set.equal (Caller.versions ()) (Callee.ve[...]>>",
    cst_Async_rpc_kernel_Versioned = "Async_rpc_kernel__Versioned_rpc",
    cst_Rpc = "Rpc",
    cst_Version = "Version",
    cst_async_rpc_kernel = "async_rpc_kernel",
    cst_query = "query",
    cst_response = "response",
    cst_src_versioned_rpc_ml$11 = "src/versioned_rpc.ml",
    cst_the_rpc = "the-rpc",
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    the_rpc = cst_the_rpc,
    not_the_rpc = "other-rpc",
    rpc_name$0 = cst_the_rpc,
    name$0 = "__Versioned_rpc.Menu",
    name$1 = "__Versioned_rpc.Shape_menu",
    Core_Int = global_data.Core__Int,
    Inline_test_config = global_data.Inline_test_config,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Result = global_data.Core__Result,
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Core_Error = global_data.Core__Error,
    Core_List = global_data.Core__List,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_kernel = global_data.Async_kernel,
    Core_Option = global_data.Core__Option,
    Core_Or_error = global_data.Core__Or_error,
    Core = global_data.Core,
    Expect_test_common_File = global_data.Expect_test_common__File,
    Core_Set = global_data.Core__Set,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error;
   global_data.Base__Field;
   var
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Async_rpc_kernel_Rpc_shapes = global_data.Async_rpc_kernel__Rpc_shapes,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Core_String = global_data.Core__String,
    Base_List = global_data.Base__List,
    Core_Memo = global_data.Core__Memo,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Core_Map = global_data.Core__Map,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel_Deferred_result = global_data.Async_kernel__Deferred_result,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Expect_test_config = global_data.Expect_test_config,
    Base_Monad = global_data.Base__Monad;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Versioned);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][1], cst_src_versioned_rpc_ml$11);
   caml_call2
    (Ppx_inline_test_lib[5], cst_async_rpc_kernel, "versioned_rpc.ml");
   var
    _a_ = [0, "Update"],
    _b_ = [0, cst_Rpc],
    _c_ = [0, cst_Version],
    _d_ = [0, "State"],
    _e_ = [0, "Error"],
    _f_ = [0, "Msg"],
    _g_ = [0, "Response"],
    _h_ = [0, "Query"],
    cst_type_conversion_failure = "type conversion failure",
    _i_ = [0, cst_Rpc],
    _j_ = [0, cst_Version],
    cst_multiple_rpc_registrations = "multiple rpc registrations",
    cst_Rpc_names_don_t_agree = "Rpc names don't agree",
    cst_Version_already_exists = "Version already exists",
    _k_ = [0, 1],
    _l_ = [0, 1],
    _m_ = [0, 0],
    cst_cannot_use_direct_interfac =
      "cannot use direct interface with Register_raw",
    _n_ = [0, 1],
    _o_ = [0, 1];
   function write(param, input){
    var
     writer = param[2],
     convert = param[1],
     _dv_ = caml_call1(convert, input);
    return caml_call2(Async_rpc_kernel_Rpc[8][8][1], writer, _dv_);
   }
   function write_without_pushback(param, input){
    var
     writer = param[2],
     convert = param[1],
     _du_ = caml_call1(convert, input);
    return caml_call2(Async_rpc_kernel_Rpc[8][8][2], writer, _du_);
   }
   function close(param){
    var writer = param[2];
    return caml_call1(Async_rpc_kernel_Rpc[8][8][3], writer);
   }
   function is_closed(param){
    var writer = param[2];
    return caml_call1(Async_rpc_kernel_Rpc[8][8][6], writer);
   }
   function closed(param){
    var writer = param[2];
    return caml_call1(Async_rpc_kernel_Rpc[8][8][4], writer);
   }
   function failed_conversion(x){
    return caml_call5
            (Core_Error[17],
             0,
             0,
             cst_type_conversion_failure,
             x,
             function(param){
              var
               arg3_006 = param[4],
               arg2_005 = param[3],
               arg1_004 = param[2],
               arg0_003 = param[1],
               res0_007 =
                 3854881 <= arg0_003
                  ? 389604849
                    <= arg0_003
                    ? 999946793 <= arg0_003 ? _a_ : _d_
                    : 106380200 <= arg0_003 ? _e_ : _f_
                  : -71406943 <= arg0_003 ? _g_ : _h_,
               v_001 = arg1_004[2],
               res1_008 = [1, [0, _b_, [0, caml_call1(Core[484], v_001), 0]]],
               v_002 = arg2_005[2],
               res2_009 = [1, [0, _c_, [0, caml_call1(Core[363], v_002), 0]]],
               res3_010 = caml_call1(Core[539], arg3_006);
              return [1,
                      [0,
                       res0_007,
                       [0, res1_008, [0, res2_009, [0, res3_010, 0]]]]];
             });
   }
   function multiple_registrations(x){
    return caml_call5
            (Core_Error[17],
             0,
             0,
             cst_multiple_rpc_registrations,
             x,
             function(param){
              var
               arg1_014 = param[2],
               arg0_013 = param[1],
               v_011 = arg0_013[2],
               res0_015 = [1, [0, _i_, [0, caml_call1(Core[484], v_011), 0]]],
               v_012 = arg1_014[2],
               res1_016 = [1, [0, _j_, [0, caml_call1(Core[363], v_012), 0]]];
              return [1, [0, res0_015, [0, res1_016, 0]]];
             });
   }
   function name(r){return r[1];}
   function create(name){return [0, name, Core_Int[103][4]];}
   function add(param, rpc, adapter){
    var
     adapters = param[2],
     name = param[1],
     _ds_ = caml_call1(Async_rpc_kernel_Rpc[6][2], rpc);
    if(caml_call2(Core_String[137], name, _ds_)){
     var _dt_ = [0, name, caml_call1(Async_rpc_kernel_Rpc[6][2], rpc)];
     return caml_call5
             (Core_Or_error[39],
              0,
              0,
              cst_Rpc_names_don_t_agree,
              _dt_,
              function(param){
               var
                arg1_022 = param[2],
                arg0_021 = param[1],
                res0_023 = caml_call1(Core[484], arg0_021),
                res1_024 = caml_call1(Core[484], arg1_022);
               return [1, [0, res0_023, [0, res1_024, 0]]];
              });
    }
    var version = caml_call1(Async_rpc_kernel_Rpc[6][3], rpc);
    if(caml_call2(Core_Map[42], adapters, version))
     return caml_call5
             (Core_Or_error[39],
              0,
              0,
              cst_Version_already_exists,
              [0, name, version],
              function(param){
               var
                arg1_026 = param[2],
                arg0_025 = param[1],
                res0_027 = caml_call1(Core[484], arg0_025),
                res1_028 = caml_call1(Core[363], arg1_026);
               return [1, [0, res0_027, [0, res1_028, 0]]];
              });
    var adapters$0 = caml_call3(Core_Map[36], adapters, version, adapter);
    return [0, [0, name, adapters$0]];
   }
   function add_rpc_version(t, old_rpc, upgrade, downgrade){
    function adapt(fn){
     function adapted(state, old_query){
      var _dr_ = caml_call2(fn, state, caml_call1(upgrade, old_query));
      return caml_call2
              (Async_kernel[22][3],
               _dr_,
               function(result){return caml_call1(downgrade, result);});
     }
     return caml_call3(Async_rpc_kernel_Rpc[6][9], 0, old_rpc, adapted);
    }
    return add(t, old_rpc, [0, adapt]);
   }
   function add_rpc_version_with_failure
   (t, old_rpc, upgrade_or_error, downgrade_or_error){
    function adapt(fn){
     return caml_call3
             (Async_rpc_kernel_Rpc[6][9],
              0,
              old_rpc,
              function(state, old_query){
               var
                _dm_ = caml_call1(upgrade_or_error, old_query),
                _dn_ = caml_call1(Async_kernel_Deferred[12], _dm_),
                _do_ =
                  caml_call2
                   (Async_kernel_Deferred_result[3][4][2],
                    _dn_,
                    function(query){
                     var _dp_ = caml_call2(fn, state, query);
                     return caml_call2
                             (Async_kernel_Deferred_result[3][4][2],
                              _dp_,
                              function(response){
                               var _dq_ = caml_call1(downgrade_or_error, response);
                               return caml_call1(Async_kernel_Deferred[12], _dq_);
                              });
                    });
               return caml_call2
                       (Async_kernel[22][3],
                        _do_,
                        function(param){
                         if(0 === param[0]){var value = param[1]; return [0, value];}
                         var error = param[1];
                         return [1, caml_call1(Core_Error[9], error)];
                        });
              });
    }
    return add(t, old_rpc, [0, adapt]);
   }
   function add_version
   (t, version, bin_query, bin_response, upgrade, downgrade){
    var
     rpc =
       caml_call4
        (Async_rpc_kernel_Rpc[6][1], t[1], version, bin_query, bin_response);
    return add_rpc_version(t, rpc, upgrade, downgrade);
   }
   function add_version_with_failure
   (t, version, bin_query, bin_response, upgrade, downgrade){
    var
     rpc =
       caml_call4
        (Async_rpc_kernel_Rpc[6][1], t[1], version, bin_query, bin_response);
    return add_rpc_version_with_failure(t, rpc, upgrade, downgrade);
   }
   function implement(t, fn){
    var _dl_ = caml_call1(Core_Map[77], t[2]);
    return caml_call2
            (Core_List[50],
             _dl_,
             function(param){
              var adapt = param[1];
              return caml_call1(adapt, fn);
             });
   }
   function Make(Model){
    var name = Model[1], registry = caml_call3(Core_Int[108][5], 0, _k_, 0);
    function implement_multi(log_not_previously_seen_versio, f){
     if(log_not_previously_seen_versio)
      var
       f$0 = log_not_previously_seen_versio[1],
       _di_ = caml_call1(f$0, name),
       log_version = caml_call3(Core_Memo[1], 0, 0, _di_);
     else
      var log_version = function(_dk_){return 0;};
     var _dj_ = caml_call1(Core_Hashtbl[67], registry);
     return caml_call2
             (Core_List[50],
              _dj_,
              function(param){
               var i = param[1];
               return caml_call2(i[1], log_version, f);
              });
    }
    function rpcs(param){
     var _dh_ = caml_call1(Core_Hashtbl[67], registry);
     return caml_call2
             (Core_List[50],
              _dh_,
              function(param){var rpc = param[2]; return rpc;});
    }
    function versions(param){
     var _dg_ = caml_call1(Core_Hashtbl[66], registry);
     return caml_call1(Core_Int[104][7], _dg_);
    }
    function Register(Version_i){
     var
      rpc =
        caml_call4
         (Async_rpc_kernel_Rpc[6][1],
          name,
          Version_i[17],
          Version_i[8],
          Version_i[16]);
     function implement(log_version, f){
      return caml_call3
              (Async_rpc_kernel_Rpc[6][9],
               0,
               rpc,
               function(s, q){
                caml_call1(log_version, Version_i[17]);
                var
                 match =
                   caml_call1
                    (Core_Result[48],
                     function(param){return caml_call1(Version_i[18], q);});
                if(0 === match[0]){
                 var
                  q$0 = match[1],
                  _dd_ = caml_call3(f, s, Version_i[17], q$0);
                 return caml_call2
                         (Async_kernel[22][3],
                          _dd_,
                          function(r){
                           var
                            match =
                              caml_call1
                               (Core_Result[48],
                                function(param){return caml_call1(Version_i[19], r);});
                           if(0 === match[0]){var r$0 = match[1]; return r$0;}
                           var
                            exn = match[1],
                            _df_ =
                              failed_conversion
                               ([0,
                                 -71406943,
                                 [0, 4102853, name],
                                 [0, -901574920, Version_i[17]],
                                 exn]);
                           return caml_call1(Core_Error[28], _df_);
                          });
                }
                var
                 exn = match[1],
                 _de_ =
                   failed_conversion
                    ([0,
                      -250086680,
                      [0, 4102853, name],
                      [0, -901574920, Version_i[17]],
                      exn]);
                return caml_call1(Core_Error[28], _de_);
               });
     }
     if(caml_call2(Core_Hashtbl[55], registry, Version_i[17])){
      var
       _dc_ =
         multiple_registrations
          ([0, [0, 4102853, name], [0, -901574920, Version_i[17]]]);
      caml_call1(Core_Error[28], _dc_);
     }
     else
      caml_call3
       (Core_Hashtbl[36],
        registry,
        Version_i[17],
        [0, [0, implement], [0, rpc]]);
     return [0, rpc];
    }
    return [0, name, , implement_multi, rpcs, versions, Register];
   }
   function Make$0(Model){
    var name = Model[1], registry = caml_call3(Core_Int[108][5], 0, _l_, 0);
    function implement_multi_gen(log_not_previously_seen_versio, impl){
     if(log_not_previously_seen_versio)
      var
       f = log_not_previously_seen_versio[1],
       _c$_ = caml_call1(f, name),
       log_version = caml_call3(Core_Memo[1], 0, 0, _c$_);
     else
      var log_version = function(_db_){return 0;};
     var _da_ = caml_call1(Core_Hashtbl[67], registry);
     return caml_call2
             (Core_List[50],
              _da_,
              function(param){
               var i = param[1];
               return caml_call2(i[1], log_version, impl);
              });
    }
    function implement_multi(log_not_previously_seen_versio, f){
     return implement_multi_gen(log_not_previously_seen_versio, [0, f]);
    }
    function implement_direct_multi(log_not_previously_seen_versio, f){
     return implement_multi_gen(log_not_previously_seen_versio, [1, f]);
    }
    function rpcs(param){
     var _c__ = caml_call1(Core_Hashtbl[67], registry);
     return caml_call2
             (Core_List[50],
              _c__,
              function(param){var rpc = param[2]; return rpc;});
    }
    function versions(param){
     var _c9_ = caml_call1(Core_Hashtbl[66], registry);
     return caml_call1(Core_Int[104][7], _c9_);
    }
    function Make_shared(Version_i, Convert){
     var
      _cU_ = Version_i[24],
      _cV_ = Version_i[16],
      _cW_ = Version_i[8],
      _cX_ = Version_i[25],
      _cY_ = caml_call2(Core_Option[56], Version_i[28], 0),
      rpc =
        caml_call7
         (Async_rpc_kernel_Rpc[8][3], _cY_, name, _cX_, _cW_, _cV_, _cU_, 0);
     function wrapped_model_of_query(q){
      try{var q$0 = caml_call1(Version_i[26], q); return q$0;}
      catch(exn$0){
       var
        exn = caml_wrap_exception(exn$0),
        _c8_ =
          failed_conversion
           ([0,
             -71406943,
             [0, 4102853, name],
             [0, -901574920, Version_i[25]],
             exn]);
       return caml_call1(Core_Error[28], _c8_);
      }
     }
     function wrapped_error_of_model(error){
      try{var error$0 = caml_call1(Version_i[27], error);}
      catch(exn$0){
       var
        exn = caml_wrap_exception(exn$0),
        _c7_ =
          failed_conversion
           ([0,
             106380200,
             [0, 4102853, name],
             [0, -901574920, Version_i[25]],
             exn]);
       return caml_call1(Core_Error[28], _c7_);
      }
      return [1, error$0];
     }
     function implement(log_version, impl){
      if(0 === impl[0]){
       var f = impl[1];
       return caml_call3
               (Async_rpc_kernel_Rpc[8][7],
                0,
                rpc,
                function(s, q){
                 caml_call1(log_version, Version_i[25]);
                 var
                  _c2_ = wrapped_model_of_query(q),
                  _c3_ = caml_call3(f, s, Version_i[25], _c2_);
                 return caml_call2
                         (Async_kernel[22][2],
                          _c3_,
                          function(param){
                           if(0 === param[0]){
                            var pipe = param[1];
                            return caml_call5
                                    (Async_kernel_Monitor[19],
                                     0,
                                     0,
                                     0,
                                     function(param){
                                      var _c6_ = [0, caml_call1(Convert[2], pipe)];
                                      return caml_call1(Async_kernel[19], _c6_);
                                     },
                                     function(exn){
                                      var
                                       _c5_ =
                                         failed_conversion
                                          ([0,
                                            -71406943,
                                            [0, 4102853, name],
                                            [0, -901574920, Version_i[25]],
                                            exn]);
                                      return caml_call1(Core_Error[28], _c5_);
                                     });
                           }
                           var error = param[1], _c4_ = wrapped_error_of_model(error);
                           return caml_call1(Async_kernel[19], _c4_);
                          });
                });
      }
      var
       f$0 = impl[1],
       convert_elt = caml_call1(Core_Or_error[36], Convert[1]);
      return caml_call3
              (Async_rpc_kernel_Rpc[8][9],
               0,
               rpc,
               function(s, q, writer$0){
                var
                 writer = [0, convert_elt, writer$0],
                 _c0_ = wrapped_model_of_query(q),
                 _c1_ = caml_call4(f$0, s, Version_i[25], _c0_, writer);
                return caml_call2
                        (Async_kernel[22][3],
                         _c1_,
                         function(param){
                          if(0 === param[0]) return _m_;
                          var error = param[1];
                          return wrapped_error_of_model(error);
                         });
               });
     }
     if(caml_call2(Core_Hashtbl[55], registry, Version_i[25])){
      var
       _cZ_ =
         multiple_registrations
          ([0, [0, 4102853, name], [0, -901574920, Version_i[25]]]);
      caml_call1(Core_Error[28], _cZ_);
     }
     else
      caml_call3
       (Core_Hashtbl[36],
        registry,
        Version_i[25],
        [0, [0, implement], [1, rpc]]);
     return [0, rpc];
    }
    function Register_raw(Version_i){
     var
      convert_elt =
        caml_call1(Core_Or_error[41], cst_cannot_use_direct_interfac),
      convert_pipe = Version_i[29];
     return Make_shared
             ([0,
               Version_i[1],
               Version_i[2],
               Version_i[3],
               Version_i[4],
               Version_i[5],
               Version_i[6],
               Version_i[7],
               Version_i[8],
               Version_i[9],
               Version_i[10],
               Version_i[11],
               Version_i[12],
               Version_i[13],
               Version_i[14],
               Version_i[15],
               Version_i[16],
               Version_i[17],
               Version_i[18],
               Version_i[19],
               Version_i[20],
               Version_i[21],
               Version_i[22],
               Version_i[23],
               Version_i[24],
               Version_i[25],
               Version_i[26],
               Version_i[27],
               Version_i[28]],
              [0, convert_elt, convert_pipe]);
    }
    function Register(Version_i){
     var convert_elt = [0, Version_i[29]];
     function convert_pipe(pipe){
      return caml_call2(Async_kernel_Pipe[57], pipe, Version_i[29]);
     }
     return Make_shared
             ([0,
               Version_i[1],
               Version_i[2],
               Version_i[3],
               Version_i[4],
               Version_i[5],
               Version_i[6],
               Version_i[7],
               Version_i[8],
               Version_i[9],
               Version_i[10],
               Version_i[11],
               Version_i[12],
               Version_i[13],
               Version_i[14],
               Version_i[15],
               Version_i[16],
               Version_i[17],
               Version_i[18],
               Version_i[19],
               Version_i[20],
               Version_i[21],
               Version_i[22],
               Version_i[23],
               Version_i[24],
               Version_i[25],
               Version_i[26],
               Version_i[27],
               Version_i[28]],
              [0, convert_elt, convert_pipe]);
    }
    return [0,
            name,
            ,
            ,
            implement_multi,
            implement_direct_multi,
            rpcs,
            versions,
            ,
            Register_raw,
            Register];
   }
   function Make$1(Model){
    var name = Model[1], registry = caml_call3(Core_Int[108][5], 0, _n_, 0);
    function implement_multi(log_not_previously_seen_versio, f){
     if(log_not_previously_seen_versio)
      var
       f$0 = log_not_previously_seen_versio[1],
       _cR_ = caml_call1(f$0, name),
       log_version = caml_call3(Core_Memo[1], 0, 0, _cR_);
     else
      var log_version = function(_cT_){return 0;};
     var _cS_ = caml_call1(Core_Hashtbl[67], registry);
     return caml_call2
             (Core_List[50],
              _cS_,
              function(param){
               var i = param[1];
               return caml_call2(i[1], log_version, f);
              });
    }
    function rpcs(param){
     var _cQ_ = caml_call1(Core_Hashtbl[67], registry);
     return caml_call2
             (Core_List[50],
              _cQ_,
              function(param){var rpc = param[2]; return rpc;});
    }
    function versions(param){
     var _cP_ = caml_call1(Core_Hashtbl[66], registry);
     return caml_call1(Core_Int[104][7], _cP_);
    }
    function Register_raw(Version_i){
     var
      _cB_ = Version_i[32],
      _cC_ = Version_i[24],
      _cD_ = Version_i[16],
      _cE_ = Version_i[8],
      _cF_ = Version_i[33],
      _cG_ = caml_call2(Core_Option[56], Version_i[37], 0),
      rpc =
        caml_call8
         (Async_rpc_kernel_Rpc[9][3],
          _cG_,
          name,
          _cF_,
          _cE_,
          _cD_,
          _cC_,
          _cB_,
          0);
     function implement(log_version, f){
      return caml_call3
              (Async_rpc_kernel_Rpc[9][8],
               0,
               rpc,
               function(s, q){
                caml_call1(log_version, Version_i[33]);
                try{var q$0 = caml_call1(Version_i[34], q);}
                catch(exn$0){
                 var
                  exn = caml_wrap_exception(exn$0),
                  _cI_ =
                    failed_conversion
                     ([0,
                       -71406943,
                       [0, 4102853, name],
                       [0, -901574920, Version_i[33]],
                       exn]);
                 return caml_call1(Core_Error[28], _cI_);
                }
                var _cJ_ = caml_call3(f, s, Version_i[33], q$0);
                return caml_call2
                        (Async_kernel[22][2],
                         _cJ_,
                         function(param){
                          if(0 === param[0]){
                           var
                            match = param[1],
                            pipe = match[2],
                            model_state = match[1];
                           try{
                            var
                             state$0 = caml_call1(Version_i[35], model_state),
                             state = state$0;
                           }
                           catch(exn$0){
                            var
                             exn = caml_wrap_exception(exn$0),
                             _cK_ =
                               failed_conversion
                                ([0,
                                  389604849,
                                  [0, 4102853, name],
                                  [0, -901574920, Version_i[33]],
                                  exn]),
                             state = caml_call1(Core_Error[28], _cK_);
                           }
                           return caml_call5
                                   (Async_kernel_Monitor[19],
                                    0,
                                    0,
                                    0,
                                    function(param){
                                     var
                                      _cO_ =
                                        [0,
                                         [0, state, caml_call2(Version_i[38], model_state, pipe)]];
                                     return caml_call1(Async_kernel[19], _cO_);
                                    },
                                    function(exn){
                                     var
                                      _cN_ =
                                        failed_conversion
                                         ([0,
                                           999946793,
                                           [0, 4102853, name],
                                           [0, -901574920, Version_i[33]],
                                           exn]);
                                     return caml_call1(Core_Error[28], _cN_);
                                    });
                          }
                          var error = param[1];
                          a:
                          {
                           try{var error$0 = caml_call1(Version_i[36], error);}
                           catch(exn){
                            var
                             exn$0 = caml_wrap_exception(exn),
                             _cL_ =
                               failed_conversion
                                ([0,
                                  106380200,
                                  [0, 4102853, name],
                                  [0, -901574920, Version_i[33]],
                                  exn$0]),
                             _cM_ = caml_call1(Core_Error[28], _cL_);
                            break a;
                           }
                           var _cM_ = [1, error$0];
                          }
                          return caml_call1(Async_kernel[19], _cM_);
                         });
               });
     }
     if(caml_call2(Core_Hashtbl[55], registry, Version_i[33])){
      var
       _cH_ =
         multiple_registrations
          ([0, [0, 4102853, name], [0, -901574920, Version_i[33]]]);
      caml_call1(Core_Error[28], _cH_);
     }
     else
      caml_call3
       (Core_Hashtbl[36],
        registry,
        Version_i[33],
        [0, [0, implement], [2, rpc]]);
     return [0, rpc];
    }
    function Register(Version_i){
     var
      bin_shape_query = Version_i[1],
      bin_size_query = Version_i[2],
      bin_write_query = Version_i[3],
      bin_writer_query = Version_i[4],
      bin_read_query = Version_i[5],
      bin_read_query$0 = Version_i[6],
      bin_reader_query = Version_i[7],
      bin_query = Version_i[8],
      bin_shape_state = Version_i[9],
      bin_size_state = Version_i[10],
      bin_write_state = Version_i[11],
      bin_writer_state = Version_i[12],
      bin_read_state = Version_i[13],
      bin_read_state$0 = Version_i[14],
      bin_reader_state = Version_i[15],
      bin_state = Version_i[16],
      bin_shape_update = Version_i[17],
      bin_size_update = Version_i[18],
      bin_write_update = Version_i[19],
      bin_writer_update = Version_i[20],
      bin_read_update = Version_i[21],
      bin_read_update$0 = Version_i[22],
      bin_reader_update = Version_i[23],
      bin_update = Version_i[24],
      bin_shape_error = Version_i[25],
      bin_size_error = Version_i[26],
      bin_write_error = Version_i[27],
      bin_writer_error = Version_i[28],
      bin_read_error = Version_i[29],
      bin_read_error$0 = Version_i[30],
      bin_reader_error = Version_i[31],
      bin_error = Version_i[32],
      version = Version_i[33],
      model_of_query = Version_i[34],
      state_of_model = Version_i[35],
      error_of_model = Version_i[36],
      client_pushes_back = Version_i[37],
      _cA_ = Version_i[38];
     function update_of_model(state, pipe){
      return caml_call2(Async_kernel_Pipe[57], pipe, _cA_);
     }
     var
      include =
        Register_raw
         ([0,
           bin_shape_query,
           bin_size_query,
           bin_write_query,
           bin_writer_query,
           bin_read_query,
           bin_read_query$0,
           bin_reader_query,
           bin_query,
           bin_shape_state,
           bin_size_state,
           bin_write_state,
           bin_writer_state,
           bin_read_state,
           bin_read_state$0,
           bin_reader_state,
           bin_state,
           bin_shape_update,
           bin_size_update,
           bin_write_update,
           bin_writer_update,
           bin_read_update,
           bin_read_update$0,
           bin_reader_update,
           bin_update,
           bin_shape_error,
           bin_size_error,
           bin_write_error,
           bin_writer_error,
           bin_read_error,
           bin_read_error$0,
           bin_reader_error,
           bin_error,
           version,
           model_of_query,
           state_of_model,
           error_of_model,
           client_pushes_back,
           update_of_model]),
      rpc = include[1];
     return [0, rpc];
    }
    return [0,
            name,
            ,
            implement_multi,
            rpcs,
            versions,
            Register_raw,
            Register];
   }
   function Make$2(Model){
    var name = Model[1], registry = caml_call3(Core_Int[108][5], 0, _o_, 0);
    function implement_multi(log_not_previously_seen_versio, f){
     if(log_not_previously_seen_versio)
      var
       f$0 = log_not_previously_seen_versio[1],
       _cx_ = caml_call1(f$0, name),
       log_version = caml_call3(Core_Memo[1], 0, 0, _cx_);
     else
      var log_version = function(_cz_){return 0;};
     var _cy_ = caml_call1(Core_Hashtbl[67], registry);
     return caml_call2
             (Core_List[50],
              _cy_,
              function(param){
               var i = param[1];
               return caml_call2(i[1], log_version, f);
              });
    }
    function rpcs(param){
     var _cw_ = caml_call1(Core_Hashtbl[67], registry);
     return caml_call2
             (Core_List[50],
              _cw_,
              function(param){var rpc = param[2]; return rpc;});
    }
    function versions(param){
     var _cv_ = caml_call1(Core_Hashtbl[66], registry);
     return caml_call1(Core_Int[104][7], _cv_);
    }
    function Register(Version_i){
     var
      rpc =
        caml_call3
         (Async_rpc_kernel_Rpc[10][1], name, Version_i[9], Version_i[8]);
     function implement(log_version, f){
      return caml_call3
              (Async_rpc_kernel_Rpc[10][7],
               0,
               rpc,
               function(s, q){
                caml_call1(log_version, Version_i[9]);
                var
                 match =
                   caml_call1
                    (Core_Result[48],
                     function(param){return caml_call1(Version_i[10], q);});
                if(0 === match[0]){
                 var q$0 = match[1];
                 return caml_call3(f, s, Version_i[9], q$0);
                }
                var
                 exn = match[1],
                 _cu_ =
                   failed_conversion
                    ([0,
                      3854881,
                      [0, 4102853, name],
                      [0, -901574920, Version_i[9]],
                      exn]);
                return caml_call1(Core_Error[28], _cu_);
               });
     }
     if(caml_call2(Core_Hashtbl[55], registry, Version_i[9])){
      var
       _ct_ =
         multiple_registrations
          ([0, [0, 4102853, name], [0, -901574920, Version_i[9]]]);
      caml_call1(Core_Error[28], _ct_);
     }
     else
      caml_call3
       (Core_Hashtbl[36],
        registry,
        Version_i[9],
        [0, [0, implement], [3, rpc]]);
     return [0, rpc];
    }
    return [0, name, , implement_multi, rpcs, versions, Register];
   }
   var
    Model = [0, name$0],
    include = Make(Model),
    implement_multi = include[3],
    Register = include[6],
    rpc_name = Model[1],
    _p_ = Core[521],
    _q_ = [0, [0, caml_call1(Bin_shape[2][1], cst_query), 0, _p_], 0],
    _r_ = caml_call1(Bin_shape[4][1], "src/versioned_rpc.ml:641:6"),
    group = caml_call2(Bin_prot_Shape[2], _r_, _q_),
    _s_ = caml_call1(Bin_shape[2][1], cst_query),
    bin_shape_query =
      caml_call1(caml_call2(Bin_prot_Shape[10], group, _s_), 0),
    bin_size_query = Core[522],
    bin_write_query = Core[523],
    bin_writer_query = [0, bin_size_query, bin_write_query],
    bin_read_query = Core[526],
    bin_read_query$0 = Core[525],
    bin_reader_query = [0, bin_read_query$0, bin_read_query],
    bin_query = [0, bin_shape_query, bin_writer_query, bin_reader_query],
    Expect_test_collector$0 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_versioned_rpc_ml = cst_src_versioned_rpc_ml$11,
    _t_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_versioned_rpc_ml$11),
       645,
       20619,
       20636,
       20674],
    _u_ =
      [0,
       [0,
        [0, cst],
        [1, cst_86ba5df747eec837f0b391dd49],
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_src_versioned_rpc_ml$11),
         645,
         20619,
         20629,
         20635],
        _t_],
       0],
    _v_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_versioned_rpc_ml$11),
       643,
       20549,
       20555,
       20675],
    _w_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_08d30aff7a6da374e03d7f344a);
   caml_call9
    (Expect_test_collector$0[3],
     _w_,
     _v_,
     cst_src_versioned_rpc_ml$11,
     0,
     0,
     _u_,
     0,
     Inline_test_config,
     function(param){
      var
       _cq_ = caml_call1(Bin_prot_Shape[15], bin_shape_query),
       _cr_ = caml_call1(Bin_shape[19][4], _cq_);
      caml_call1(Core[31], _cr_);
      var
       _cs_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_versioned_rpc_ml),
          645,
          20619,
          20629,
          20635];
      return caml_call1(Expect_test_collector$0[1], _cs_);
     });
   var
    _x_ = caml_call1(Bin_prot_Shape[3], [0, Core[471], [0, Core[350], 0]]),
    _y_ = caml_call1(Core[419], _x_),
    _z_ = [0, [0, caml_call1(Bin_shape[2][1], cst_response), 0, _y_], 0],
    _A_ = caml_call1(Bin_shape[4][1], "src/versioned_rpc.ml:648:6"),
    group$0 = caml_call2(Bin_prot_Shape[2], _A_, _z_),
    _B_ = caml_call1(Bin_shape[2][1], cst_response),
    bin_shape_response =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _B_), 0);
   function bin_size_response(v){
    return caml_call2
            (Core[420],
             function(param){
              var
               v2 = param[2],
               v1 = param[1],
               _co_ = caml_call1(Core[472], v1),
               size = caml_call2(Bin_prot_Common[23], 0, _co_),
               _cp_ = caml_call1(Core[351], v2);
              return caml_call2(Bin_prot_Common[23], size, _cp_);
             },
             v);
   }
   function bin_write_response(buf, pos, v){
    return caml_call4
            (Core[421],
             function(buf, pos, param){
              var
               v2 = param[2],
               v1 = param[1],
               pos$0 = caml_call3(Core[473], buf, pos, v1);
              return caml_call3(Core[352], buf, pos$0, v2);
             },
             buf,
             pos,
             v);
   }
   var bin_writer_response = [0, bin_size_response, bin_write_response];
   function bin_read_response(buf, pos_ref, vint){
    return caml_call3
            (caml_call1
              (Core[424],
               function(buf, pos_ref){
                var
                 v1 = caml_call2(Core[475], buf, pos_ref),
                 v2 = caml_call2(Core[354], buf, pos_ref);
                return [0, v1, v2];
               }),
             buf,
             pos_ref,
             vint);
   }
   function bin_read_response$0(buf, pos_ref){
    return caml_call2
            (caml_call1
              (Core[423],
               function(buf, pos_ref){
                var
                 v1 = caml_call2(Core[475], buf, pos_ref),
                 v2 = caml_call2(Core[354], buf, pos_ref);
                return [0, v1, v2];
               }),
             buf,
             pos_ref);
   }
   var
    bin_reader_response = [0, bin_read_response$0, bin_read_response],
    bin_response =
      [0, bin_shape_response, bin_writer_response, bin_reader_response],
    Expect_test_collector$1 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_versioned_rpc_ml$0 = cst_src_versioned_rpc_ml$11,
    _C_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_versioned_rpc_ml$11),
       652,
       20822,
       20839,
       20877],
    _D_ =
      [0,
       [0,
        [0, cst],
        [1, " 4c1e50c93b38c2ad0554cbd929bef3ac "],
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_src_versioned_rpc_ml$11),
         652,
         20822,
         20832,
         20838],
        _C_],
       0],
    _E_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_versioned_rpc_ml$11),
       650,
       20749,
       20755,
       20878],
    _F_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_08d30aff7a6da374e03d7f344a);
   caml_call9
    (Expect_test_collector$1[3],
     _F_,
     _E_,
     cst_src_versioned_rpc_ml$11,
     0,
     0,
     _D_,
     0,
     Inline_test_config,
     function(param){
      var
       _cl_ = caml_call1(Bin_prot_Shape[15], bin_shape_response),
       _cm_ = caml_call1(Bin_shape[19][4], _cl_);
      caml_call1(Core[31], _cm_);
      var
       _cn_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_src_versioned_rpc_ml$0),
          652,
          20822,
          20832,
          20838];
      return caml_call1(Expect_test_collector$1[1], _cn_);
     });
   function model_of_query(q){return q;}
   function _G_(param){
    var version = param[2], name = param[1];
    return [0, name, version];
   }
   var _H_ = Core_List[50];
   function response_of_model(_ck_){return caml_call2(_H_, _ck_, _G_);}
   var
    include$0 =
      Register
       ([0,
         bin_shape_query,
         bin_size_query,
         bin_write_query,
         bin_writer_query,
         bin_read_query$0,
         bin_read_query,
         bin_reader_query,
         bin_query,
         bin_shape_response,
         bin_size_response,
         bin_write_response,
         bin_writer_response,
         bin_read_response$0,
         bin_read_response,
         bin_reader_response,
         bin_response,
         1,
         model_of_query,
         response_of_model]),
    rpc = include$0[1];
   function add$0(impls){
    var
     menu = caml_call2(Core_List[50], impls, Async_rpc_kernel_Rpc[3][2]),
     menu_impls =
       implement_multi
        (0,
         function(_cj_, _ci_, param){
          return caml_call1(Async_kernel[19], menu);
         });
    return caml_call2(Core[155], impls, menu_impls);
   }
   function supported_rpcs(t){
    var _cg_ = caml_call1(Core_Hashtbl[77], t);
    return caml_call2
            (Base_List[57][4][2],
             _cg_,
             function(param){
              var
               versions = param[2],
               name = param[1],
               _ch_ = caml_call1(Core_Set[39], versions);
              return caml_call2
                      (Base_List[57][4][3],
                       _ch_,
                       function(version){return [0, name, version];});
             });
   }
   function supported_versions(t, rpc_name){
    var
     _ce_ = Core_Int[104][4],
     _cf_ = caml_call2(Core_Hashtbl[55], t, rpc_name);
    return caml_call2(Core_Option[35], _cf_, _ce_);
   }
   function of_entries(entries){
    var
     _cc_ = Core_Int[104][7],
     _cd_ = caml_call3(Core_String[157][10], 0, 0, entries);
    return caml_call2(Core_Hashtbl[42], _cd_, _cc_);
   }
   function aux_request(dispatch, conn){
    var _cb_ = caml_call3(dispatch, rpc, conn, 0);
    return caml_call2
            (Async_kernel[22][3],
             _cb_,
             function(result){
              return caml_call2(Core_Result[39], result, of_entries);
             });
   }
   function request(conn){
    var arg = Async_rpc_kernel_Rpc[6][13];
    return aux_request(function(eta){return caml_call2(arg, 0, eta);}, conn);
   }
   function request$0(conn){
    var arg = Async_rpc_kernel_Rpc[6][11];
    return aux_request(function(eta){return caml_call2(arg, 0, eta);}, conn);
   }
   function create$0(descriptions){
    return of_entries
            (caml_call2
              (Core_List[50],
               descriptions,
               function(param){
                var version = param[2], name = param[1];
                return [0, name, version];
               }));
   }
   var
    Model$0 = [0, name$1],
    include$1 = Make(Model$0),
    implement_multi$0 = include$1[3],
    Register$0 = include$1[6],
    _I_ = Core[521],
    _J_ = [0, [0, caml_call1(Bin_shape[2][1], cst_query), 0, _I_], 0],
    _K_ = caml_call1(Bin_shape[4][1], "src/versioned_rpc.ml:718:8"),
    group$1 = caml_call2(Bin_prot_Shape[2], _K_, _J_),
    _L_ = caml_call1(Bin_shape[2][1], cst_query),
    bin_shape_query$0 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$1, _L_), 0),
    bin_size_query$0 = Core[522],
    bin_write_query$0 = Core[523],
    bin_writer_query$0 = [0, bin_size_query$0, bin_write_query$0],
    bin_read_query$1 = Core[526],
    bin_read_query$2 = Core[525],
    bin_reader_query$0 = [0, bin_read_query$2, bin_read_query$1],
    bin_query$0 =
      [0, bin_shape_query$0, bin_writer_query$0, bin_reader_query$0],
    Expect_test_collector$2 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_versioned_rpc_ml$1 = cst_src_versioned_rpc_ml$11,
    _M_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_versioned_rpc_ml$11),
       722,
       22585,
       22604,
       22642],
    _N_ =
      [0,
       [0,
        [0, cst],
        [1, cst_86ba5df747eec837f0b391dd49],
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_src_versioned_rpc_ml$11),
         722,
         22585,
         22597,
         22603],
        _M_],
       0],
    _O_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_versioned_rpc_ml$11),
       720,
       22511,
       22519,
       22643],
    _P_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_08d30aff7a6da374e03d7f344a);
   caml_call9
    (Expect_test_collector$2[3],
     _P_,
     _O_,
     cst_src_versioned_rpc_ml$11,
     0,
     0,
     _N_,
     0,
     Inline_test_config,
     function(param){
      var
       _b__ = caml_call1(Bin_prot_Shape[15], bin_shape_query$0),
       _b$_ = caml_call1(Bin_shape[19][4], _b__);
      caml_call1(Core[31], _b$_);
      var
       _ca_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_src_versioned_rpc_ml$1),
          722,
          22585,
          22597,
          22603];
      return caml_call1(Expect_test_collector$2[1], _ca_);
     });
   var
    _Q_ =
      caml_call1
       (Bin_prot_Shape[3],
        [0,
         Async_rpc_kernel_Rpc[1][31][1][9],
         [0, Async_rpc_kernel_Rpc_shapes[2][1][5], 0]]),
    _R_ = caml_call1(Core[419], _Q_),
    _S_ = [0, [0, caml_call1(Bin_shape[2][1], cst_response), 0, _R_], 0],
    _T_ = caml_call1(Bin_shape[4][1], "src/versioned_rpc.ml:725:8"),
    group$2 = caml_call2(Bin_prot_Shape[2], _T_, _S_),
    _U_ = caml_call1(Bin_shape[2][1], cst_response),
    bin_shape_response$0 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$2, _U_), 0);
   function bin_size_response$0(v){
    return caml_call2
            (Core[420],
             function(param){
              var
               v2 = param[2],
               v1 = param[1],
               _b8_ = caml_call1(Async_rpc_kernel_Rpc[1][31][1][5], v1),
               size = caml_call2(Bin_prot_Common[23], 0, _b8_),
               _b9_ = caml_call1(Async_rpc_kernel_Rpc_shapes[2][1][1], v2);
              return caml_call2(Bin_prot_Common[23], size, _b9_);
             },
             v);
   }
   function bin_write_response$0(buf, pos, v){
    return caml_call4
            (Core[421],
             function(buf, pos, param){
              var
               v2 = param[2],
               v1 = param[1],
               pos$0 =
                 caml_call3(Async_rpc_kernel_Rpc[1][31][1][6], buf, pos, v1);
              return caml_call3
                      (Async_rpc_kernel_Rpc_shapes[2][1][2], buf, pos$0, v2);
             },
             buf,
             pos,
             v);
   }
   var bin_writer_response$0 = [0, bin_size_response$0, bin_write_response$0];
   function bin_read_response$1(buf, pos_ref, vint){
    return caml_call3
            (caml_call1
              (Core[424],
               function(buf, pos_ref){
                var
                 v1 =
                   caml_call2(Async_rpc_kernel_Rpc[1][31][1][7], buf, pos_ref),
                 v2 =
                   caml_call2
                    (Async_rpc_kernel_Rpc_shapes[2][1][3], buf, pos_ref);
                return [0, v1, v2];
               }),
             buf,
             pos_ref,
             vint);
   }
   function bin_read_response$2(buf, pos_ref){
    return caml_call2
            (caml_call1
              (Core[423],
               function(buf, pos_ref){
                var
                 v1 =
                   caml_call2(Async_rpc_kernel_Rpc[1][31][1][7], buf, pos_ref),
                 v2 =
                   caml_call2
                    (Async_rpc_kernel_Rpc_shapes[2][1][3], buf, pos_ref);
                return [0, v1, v2];
               }),
             buf,
             pos_ref);
   }
   var
    bin_reader_response$0 = [0, bin_read_response$2, bin_read_response$1],
    bin_response$0 =
      [0, bin_shape_response$0, bin_writer_response$0, bin_reader_response$0],
    Expect_test_collector$3 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_versioned_rpc_ml$2 = cst_src_versioned_rpc_ml$11,
    _V_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_versioned_rpc_ml$11),
       730,
       22842,
       22861,
       22899],
    _W_ =
      [0,
       [0,
        [0, cst],
        [1, " b4bdc01b7ead907e6d0d3f3d89700f1b "],
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_src_versioned_rpc_ml$11),
         730,
         22842,
         22854,
         22860],
        _V_],
       0],
    _X_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_versioned_rpc_ml$11),
       728,
       22765,
       22773,
       22900],
    _Y_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_08d30aff7a6da374e03d7f344a);
   caml_call9
    (Expect_test_collector$3[3],
     _Y_,
     _X_,
     cst_src_versioned_rpc_ml$11,
     0,
     0,
     _W_,
     0,
     Inline_test_config,
     function(param){
      var
       _b5_ = caml_call1(Bin_prot_Shape[15], bin_shape_response$0),
       _b6_ = caml_call1(Bin_shape[19][4], _b5_);
      caml_call1(Core[31], _b6_);
      var
       _b7_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_src_versioned_rpc_ml$2),
          730,
          22842,
          22854,
          22860];
      return caml_call1(Expect_test_collector$3[1], _b7_);
     });
   function model_of_query$0(_b4_){return _b4_;}
   function response_of_model$0(_b3_){return _b3_;}
   var
    include$2 =
      Register$0
       ([0,
         bin_shape_query$0,
         bin_size_query$0,
         bin_write_query$0,
         bin_writer_query$0,
         bin_read_query$2,
         bin_read_query$1,
         bin_reader_query$0,
         bin_query$0,
         bin_shape_response$0,
         bin_size_response$0,
         bin_write_response$0,
         bin_writer_response$0,
         bin_read_response$2,
         bin_read_response$1,
         bin_reader_response$0,
         bin_response$0,
         1,
         model_of_query$0,
         response_of_model$0]),
    rpc$0 = include$2[1],
    _Z_ = [0, "callee_menu"],
    ___ = [0, "callee_versions"],
    _$_ = [0, "caller_versions"],
    _aa_ = [0, "rpc_name"],
    cst_caller_and_callee_share_no =
      "caller and callee share no common versions for rpc";
   function add$1(impls){
    var
     shape_menu =
       caml_call2
        (Core_List[50],
         impls,
         function(impl){
          var _b2_ = caml_call1(Async_rpc_kernel_Rpc[3][3], impl);
          return [0, caml_call1(Async_rpc_kernel_Rpc[3][2], impl), _b2_];
         }),
     shape_menu_impls =
       implement_multi$0
        (0,
         function(_b1_, _b0_, param){
          return caml_call1(Async_kernel[19], shape_menu);
         }),
     _bZ_ = add$0(impls);
    return caml_call2(Core[155], _bZ_, shape_menu_impls);
   }
   function request$1(conn){
    return caml_call4(Async_rpc_kernel_Rpc[6][13], 0, rpc$0, conn, 0);
   }
   function menu(r){return r[2];}
   function connection(r){return r[1];}
   function create$1(connection){
    var _bY_ = request(connection);
    return caml_call2
            (Async_kernel_Deferred_or_error[19][4][3],
             _bY_,
             function(menu){return [0, connection, menu];});
   }
   function create_directly(connection, menu){return [0, connection, menu];}
   function most_recent_common_version
   (rpc_name, caller_versions, callee_versions, callee_menu){
    var
     _bS_ = caml_call2(Core_Set[16], callee_versions, caller_versions),
     match = caml_call1(Core_Set[60], _bS_);
    if(match){var version = match[1]; return [0, version];}
    var
     _bT_ =
       [0,
        [1,
         [0,
          _Z_,
          [0,
           caml_call2(Core_String[157][2], Core_Int[104][27], callee_menu),
           0]]],
        0],
     _bU_ =
       [0,
        [1, [0, ___, [0, caml_call1(Core_Int[104][27], callee_versions), 0]]],
        _bT_],
     _bV_ =
       [0,
        [1, [0, _$_, [0, caml_call1(Core_Int[104][27], caller_versions), 0]]],
        _bU_],
     _bW_ = [0, [1, [0, _aa_, [0, caml_call1(Core[484], rpc_name), 0]]], _bV_],
     _bX_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_caller_and_callee_share_no),
         _bW_]];
    return caml_call1(Core[239], _bX_);
   }
   var
    Expect_test_collector$4 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    _ab_ = [0, 2, 0],
    _ac_ = [0, 1, [0, 2, [0, 3, 0]]],
    cst_src_versioned_rpc_ml$3 = cst_src_versioned_rpc_ml$11,
    _ad_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_versioned_rpc_ml$11),
       799,
       24759,
       24772,
       24784],
    _ae_ =
      [0,
       [0,
        [0, cst],
        [1, " (Ok 2) "],
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_src_versioned_rpc_ml$11),
         799,
         24759,
         24765,
         24771],
        _ad_],
       0],
    _af_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_versioned_rpc_ml$11),
       788,
       24341,
       24343,
       24785],
    _ag_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_08d30aff7a6da374e03d7f344a);
   caml_call9
    (Expect_test_collector$4[3],
     _ag_,
     _af_,
     cst_src_versioned_rpc_ml$11,
     [0, "highest version number is taken in most_recent_common_version"],
     0,
     _ae_,
     0,
     Inline_test_config,
     function(param){
      var
       menu = of_entries([0, [0, rpc_name$0, 2], 0]),
       _bP_ = caml_call1(Core_Int[104][7], _ab_),
       result =
         most_recent_common_version
          (rpc_name$0, caml_call1(Core_Int[104][7], _ac_), _bP_, menu),
       _bQ_ = caml_call2(Core_Or_error[13], Core[363], result);
      caml_call2(Core[250], 0, _bQ_);
      var
       _bR_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_src_versioned_rpc_ml$3),
          799,
          24759,
          24765,
          24771];
      return caml_call1(Expect_test_collector$4[1], _bR_);
     });
   var
    Expect_test_collector$5 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    _ah_ = [0, 1, [0, 2, [0, 3, 0]]],
    cst_src_versioned_rpc_ml$4 = cst_src_versioned_rpc_ml$11,
    _ai_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_versioned_rpc_ml$11),
       815,
       25304,
       25310,
       25506],
    _aj_ =
      [0,
       [0,
        [0, cst],
        [1,
         '\n      (Error\n       ("caller and callee share no common versions for rpc" (rpc_name the-rpc)\n        (caller_versions (1 2 3)) (callee_versions ())\n        (callee_menu ((other-rpc (1 2))))))'],
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_src_versioned_rpc_ml$11),
         814,
         25291,
         25297,
         25303],
        _ai_],
       0],
    _ak_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_versioned_rpc_ml$11),
       802,
       24792,
       24794,
       25507],
    _al_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_08d30aff7a6da374e03d7f344a);
   caml_call9
    (Expect_test_collector$5[3],
     _al_,
     _ak_,
     cst_src_versioned_rpc_ml$11,
     [0, "error from most_recent_common_version looks reasonable"],
     0,
     _aj_,
     0,
     Inline_test_config,
     function(param){
      var
       menu =
         of_entries([0, [0, not_the_rpc, 1], [0, [0, not_the_rpc, 2], 0]]),
       _bM_ = supported_versions(menu, the_rpc),
       result =
         most_recent_common_version
          (the_rpc, caml_call1(Core_Int[104][7], _ah_), _bM_, menu),
       _bN_ = caml_call2(Core_Or_error[13], Core[363], result);
      caml_call2(Core[250], 0, _bN_);
      var
       _bO_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_src_versioned_rpc_ml$4),
          814,
          25291,
          25297,
          25303];
      return caml_call1(Expect_test_collector$5[1], _bO_);
     });
   var cst_unknown_rpc_version = "unknown rpc version";
   function Make$3(M){
    function with_specific_version
    (version, connection, name, query, dispatcher, registry){
     var match = caml_call2(Core_Hashtbl[55], registry, version);
     if(match){
      var dispatch = match[1][1];
      return caml_call3(dispatcher, dispatch, connection, query);
     }
     var
      x = [0, name, version],
      _bL_ =
        [1,
         caml_call5
          (Core_Error[17],
           0,
           0,
           cst_unknown_rpc_version,
           x,
           function(param){
            var
             arg1_018 = param[2],
             arg0_017 = param[1],
             res0_019 = caml_call1(Core[484], arg0_017),
             res1_020 = caml_call1(Core[363], arg1_018);
            return [1, [0, res0_019, [0, res1_020, 0]]];
           })];
     return caml_call1(M[5], _bL_);
    }
    function with_version_menu
    (param, query, name, versions, registry, dispatcher){
     var
      menu = param[2],
      connection = param[1],
      callee_versions = supported_versions(menu, name),
      caller_versions = caml_call1(versions, 0),
      match =
        most_recent_common_version
         (name, caller_versions, callee_versions, menu);
     if(0 === match[0]){
      var version = match[1];
      return with_specific_version
              (version, connection, name, query, dispatcher, registry);
     }
     var e = match[1];
     return caml_call1(M[5], [1, e]);
    }
    return [0, , with_version_menu];
   }
   var
    Async =
      Make$3
       ([0,
         Async_kernel_Deferred[8],
         Async_kernel_Deferred[9],
         Async_kernel_Deferred[10],
         Async_kernel_Deferred[11],
         Async_kernel_Deferred[12],
         Async_kernel_Deferred[13],
         Async_kernel_Deferred[14],
         Async_kernel_Deferred[15],
         Async_kernel_Deferred[21],
         Async_kernel_Deferred[22],
         Async_kernel_Deferred[16]]),
    Direct = Make$3(Base_Monad[11]),
    _am_ = [0, 1],
    _an_ = [0, 1],
    _ao_ = [0, 0],
    cst_Cannot_use_Direct_with_Reg = "Cannot use Direct with Register_raw",
    _ap_ = [0, 1],
    _aq_ = [0, 1];
   function Make$4(Model){
    var name = Model[1], registry = caml_call3(Core_Int[108][5], 0, _am_, 0);
    function rpcs(param){
     var _bK_ = caml_call1(Core_Hashtbl[67], registry);
     return caml_call2
             (Core_List[50],
              _bK_,
              function(param){var rpc = param[2]; return rpc;});
    }
    function versions(param){
     var _bJ_ = caml_call1(Core_Hashtbl[66], registry);
     return caml_call1(Core_Int[104][7], _bJ_);
    }
    function dispatch_multi(conn_with_menu, query){
     return Async[2].call
             (null,
              conn_with_menu,
              query,
              name,
              versions,
              registry,
              function(_bI_){return _bI_;});
    }
    function Register(Version_i){
     var
      rpc =
        caml_call4
         (Async_rpc_kernel_Rpc[6][1],
          name,
          Version_i[17],
          Version_i[8],
          Version_i[16]);
     function dispatch(conn, mq){
      var
       match =
         caml_call1
          (Core_Result[48],
           function(param){return caml_call1(Version_i[18], mq);});
      if(0 === match[0]){
       var
        q = match[1],
        _bG_ = caml_call4(Async_rpc_kernel_Rpc[6][13], 0, rpc, conn, q);
       return caml_call2
               (Async_kernel[22][3],
                _bG_,
                function(result){
                 return caml_call2
                         (Core_Result[20],
                          result,
                          function(r){
                           var
                            match =
                              caml_call1
                               (Core_Result[48],
                                function(param){return caml_call2(Version_i[19], mq, r);});
                           if(0 === match[0]){var r$0 = match[1]; return [0, r$0];}
                           var exn = match[1];
                           return [1,
                                   failed_conversion
                                    ([0,
                                      -71406943,
                                      [0, 4102853, name],
                                      [0, -901574920, Version_i[17]],
                                      exn])];
                          });
                });
      }
      var
       exn = match[1],
       _bH_ =
         [1,
          failed_conversion
           ([0,
             -250086680,
             [0, 4102853, name],
             [0, -901574920, Version_i[17]],
             exn])];
      return caml_call1(Async_kernel[19], _bH_);
     }
     if(caml_call2(Core_Hashtbl[55], registry, Version_i[17])){
      var
       _bF_ =
         multiple_registrations
          ([0, [0, 4102853, name], [0, -901574920, Version_i[17]]]);
      caml_call1(Core_Error[28], _bF_);
     }
     else
      caml_call3
       (Core_Hashtbl[36], registry, Version_i[17], [0, dispatch, [0, rpc]]);
     return [0, rpc];
    }
    function Register$0(Version_i){
     var
      bin_shape_query = Version_i[1],
      bin_size_query = Version_i[2],
      bin_write_query = Version_i[3],
      bin_writer_query = Version_i[4],
      bin_read_query = Version_i[5],
      bin_read_query$0 = Version_i[6],
      bin_reader_query = Version_i[7],
      bin_query = Version_i[8],
      bin_shape_response = Version_i[9],
      bin_size_response = Version_i[10],
      bin_write_response = Version_i[11],
      bin_writer_response = Version_i[12],
      bin_read_response = Version_i[13],
      bin_read_response$0 = Version_i[14],
      bin_reader_response = Version_i[15],
      bin_response = Version_i[16],
      version = Version_i[17],
      query_of_model = Version_i[18],
      _bE_ = Version_i[19];
     function model_of_response(param, r){return caml_call1(_bE_, r);}
     return Register
             ([0,
               bin_shape_query,
               bin_size_query,
               bin_write_query,
               bin_writer_query,
               bin_read_query,
               bin_read_query$0,
               bin_reader_query,
               bin_query,
               bin_shape_response,
               bin_size_response,
               bin_write_response,
               bin_writer_response,
               bin_read_response,
               bin_read_response$0,
               bin_reader_response,
               bin_response,
               version,
               query_of_model,
               model_of_response]);
    }
    return [0, name, , rpcs, versions, dispatch_multi, Register, Register$0];
   }
   function Make$5(Model){
    var name = Model[1], registry = caml_call3(Core_Int[108][5], 0, _an_, 0);
    function rpcs(param){
     var _bD_ = caml_call1(Core_Hashtbl[67], registry);
     return caml_call2
             (Core_List[50],
              _bD_,
              function(param){var rpc = param[2]; return rpc;});
    }
    function versions(param){
     var _bC_ = caml_call1(Core_Hashtbl[66], registry);
     return caml_call1(Core_Int[104][7], _bC_);
    }
    function dispatch_iter_multi(conn_with_menu, query, f){
     return Async[2].call
             (null,
              conn_with_menu,
              query,
              name,
              versions,
              registry,
              function(param, conn, query){
               var dispatch_iter = param[3];
               return caml_call3(dispatch_iter, conn, query, f);
              });
    }
    function dispatch_multi(conn_with_menu, query){
     return Async[2].call
             (null,
              conn_with_menu,
              query,
              name,
              versions,
              registry,
              function(param, conn, query){
               var dispatch = param[2];
               return caml_call2(dispatch, conn, query);
              });
    }
    function abort_multi(conn_with_menu, id){
     return Direct[2].call
             (null,
              conn_with_menu,
              id,
              name,
              versions,
              registry,
              function(param, conn, id){
               var abort = param[1];
               caml_call2(abort, conn, id);
               return _ao_;
              });
    }
    function Make_shared(Version_i, Convert){
     var
      _bp_ = Version_i[24],
      _bq_ = Version_i[16],
      _br_ = Version_i[8],
      _bs_ = Version_i[25],
      _bt_ = caml_call2(Core_Option[56], Version_i[28], 0),
      rpc =
        caml_call7
         (Async_rpc_kernel_Rpc[8][3], _bt_, name, _bs_, _br_, _bq_, _bp_, 0);
     function wrapped_query_of_model(q){
      try{var q$0 = caml_call1(Version_i[26], q);}
      catch(exn$0){
       var
        exn = caml_wrap_exception(exn$0),
        _bB_ =
          [1,
           failed_conversion
            ([0,
              -250086680,
              [0, 4102853, name],
              [0, -901574920, Version_i[25]],
              exn])];
       return caml_call1(Async_kernel[19], _bB_);
      }
      return caml_call1(Async_kernel[19], [0, q$0]);
     }
     function convert_result(result, convert_ok){
      if(0 !== result[0]) return result;
      var match = result[1];
      if(0 === match[0]){
       var ok = match[1];
       return [0, [0, caml_call1(convert_ok, ok)]];
      }
      var e = match[1];
      try{var e$0 = caml_call1(Version_i[27], e);}
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       return [1,
               failed_conversion
                ([0,
                  106380200,
                  [0, 4102853, name],
                  [0, -901574920, Version_i[25]],
                  exn])];
      }
      return [0, [1, e$0]];
     }
     function dispatch(conn, q){
      var _bz_ = wrapped_query_of_model(q);
      return caml_call2
              (Async_kernel[17],
               _bz_,
               function(q){
                var
                 _bA_ =
                   caml_call4(Async_rpc_kernel_Rpc[8][10], 0, rpc, conn, q);
                return caml_call2
                        (Async_kernel[22][3],
                         _bA_,
                         function(result){
                          return convert_result
                                  (result,
                                   function(param){
                                    var id = param[2], pipe = param[1];
                                    return [0, caml_call1(Convert[2], pipe), id];
                                   });
                         });
               });
     }
     function dispatch_iter(conn, q, f){
      var
       convert_elt = caml_call1(Core_Or_error[36], Convert[1]),
       _bv_ = wrapped_query_of_model(q);
      return caml_call2
              (Async_kernel[17],
               _bv_,
               function(q){
                var
                 _bw_ =
                   caml_call5
                    (Async_rpc_kernel_Rpc[8][14],
                     0,
                     rpc,
                     conn,
                     q,
                     function(message){
                      if(0 === message[0])
                       var u = message[1], _by_ = [0, caml_call1(convert_elt, u)];
                      else
                       var _by_ = message;
                      return caml_call1(f, _by_);
                     });
                return caml_call2
                        (Async_kernel[22][3],
                         _bw_,
                         function(result){
                          return convert_result(result, function(_bx_){return _bx_;});
                         });
               });
     }
     function abort(conn, id){
      return caml_call3(Async_rpc_kernel_Rpc[8][15], rpc, conn, id);
     }
     if(caml_call2(Core_Hashtbl[55], registry, Version_i[25])){
      var
       _bu_ =
         multiple_registrations
          ([0, [0, 4102853, name], [0, -901574920, Version_i[25]]]);
      caml_call1(Core_Error[28], _bu_);
     }
     else
      caml_call3
       (Core_Hashtbl[36],
        registry,
        Version_i[25],
        [0, [0, abort, dispatch, dispatch_iter], [1, rpc]]);
     return [0, rpc];
    }
    function Register_raw(Version_i){
     var
      convert_elt =
        caml_call1(Core_Or_error[41], cst_Cannot_use_Direct_with_Reg),
      convert_pipe = Version_i[29];
     return Make_shared
             ([0,
               Version_i[1],
               Version_i[2],
               Version_i[3],
               Version_i[4],
               Version_i[5],
               Version_i[6],
               Version_i[7],
               Version_i[8],
               Version_i[9],
               Version_i[10],
               Version_i[11],
               Version_i[12],
               Version_i[13],
               Version_i[14],
               Version_i[15],
               Version_i[16],
               Version_i[17],
               Version_i[18],
               Version_i[19],
               Version_i[20],
               Version_i[21],
               Version_i[22],
               Version_i[23],
               Version_i[24],
               Version_i[25],
               Version_i[26],
               Version_i[27],
               Version_i[28]],
              [0, convert_elt, convert_pipe]);
    }
    function Register(Version_i){
     var convert_elt = [0, Version_i[29]];
     function convert_pipe(rs){
      return caml_call2
              (Async_kernel_Pipe[57],
               rs,
               function(r){
                try{var r$0 = caml_call1(Version_i[29], r);}
                catch(exn$0){
                 var exn = caml_wrap_exception(exn$0);
                 return [1,
                         failed_conversion
                          ([0,
                            -71406943,
                            [0, 4102853, name],
                            [0, -901574920, Version_i[25]],
                            exn])];
                }
                return [0, r$0];
               });
     }
     return Make_shared
             ([0,
               Version_i[1],
               Version_i[2],
               Version_i[3],
               Version_i[4],
               Version_i[5],
               Version_i[6],
               Version_i[7],
               Version_i[8],
               Version_i[9],
               Version_i[10],
               Version_i[11],
               Version_i[12],
               Version_i[13],
               Version_i[14],
               Version_i[15],
               Version_i[16],
               Version_i[17],
               Version_i[18],
               Version_i[19],
               Version_i[20],
               Version_i[21],
               Version_i[22],
               Version_i[23],
               Version_i[24],
               Version_i[25],
               Version_i[26],
               Version_i[27],
               Version_i[28]],
              [0, convert_elt, convert_pipe]);
    }
    return [0,
            name,
            ,
            rpcs,
            versions,
            dispatch_iter_multi,
            dispatch_multi,
            abort_multi,
            ,
            Register_raw,
            Register];
   }
   function Make$6(Model){
    var name = Model[1], registry = caml_call3(Core_Int[108][5], 0, _ap_, 0);
    function rpcs(param){
     var _bo_ = caml_call1(Core_Hashtbl[67], registry);
     return caml_call2
             (Core_List[50],
              _bo_,
              function(param){var rpc = param[2]; return rpc;});
    }
    function versions(param){
     var _bn_ = caml_call1(Core_Hashtbl[66], registry);
     return caml_call1(Core_Int[104][7], _bn_);
    }
    function dispatch_multi(conn_with_menu, query){
     return Async[2].call
             (null,
              conn_with_menu,
              query,
              name,
              versions,
              registry,
              function(_bm_){return _bm_;});
    }
    function Register_raw(Version_i){
     var
      _bd_ = Version_i[32],
      _be_ = Version_i[24],
      _bf_ = Version_i[16],
      _bg_ = Version_i[8],
      _bh_ = Version_i[33],
      _bi_ = caml_call2(Core_Option[56], Version_i[37], 0),
      rpc =
        caml_call8
         (Async_rpc_kernel_Rpc[9][3],
          _bi_,
          name,
          _bh_,
          _bg_,
          _bf_,
          _be_,
          _bd_,
          0);
     function dispatch(conn, q){
      try{var q$0 = caml_call1(Version_i[34], q);}
      catch(exn$0){
       var
        exn = caml_wrap_exception(exn$0),
        _bk_ =
          [1,
           failed_conversion
            ([0,
              -250086680,
              [0, 4102853, name],
              [0, -901574920, Version_i[33]],
              exn])];
       return caml_call1(Async_kernel[19], _bk_);
      }
      var _bl_ = caml_call4(Async_rpc_kernel_Rpc[9][10], 0, rpc, conn, q$0);
      return caml_call2
              (Async_kernel[22][3],
               _bl_,
               function(result){
                if(0 !== result[0]){var exn$1 = result[1]; return [1, exn$1];}
                var match = result[1];
                if(0 === match[0]){
                 var
                  match$0 = match[1],
                  id = match$0[3],
                  pipe = match$0[2],
                  state = match$0[1];
                 try{var state$0 = caml_call1(Version_i[35], state);}
                 catch(exn$0){
                  var exn = caml_wrap_exception(exn$0);
                  return [1,
                          failed_conversion
                           ([0,
                             389604849,
                             [0, 4102853, name],
                             [0, -901574920, Version_i[33]],
                             exn])];
                 }
                 return [0,
                         [0, [0, state$0, caml_call1(Version_i[38], pipe), id]]];
                }
                var e = match[1];
                try{var e$0 = caml_call1(Version_i[36], e);}
                catch(exn){
                 var exn$0 = caml_wrap_exception(exn);
                 return [1,
                         failed_conversion
                          ([0,
                            106380200,
                            [0, 4102853, name],
                            [0, -901574920, Version_i[33]],
                            exn$0])];
                }
                return [0, [1, e$0]];
               });
     }
     if(caml_call2(Core_Hashtbl[55], registry, Version_i[33])){
      var
       _bj_ =
         multiple_registrations
          ([0, [0, 4102853, name], [0, -901574920, Version_i[33]]]);
      caml_call1(Core_Error[28], _bj_);
     }
     else
      caml_call3
       (Core_Hashtbl[36], registry, Version_i[33], [0, dispatch, [2, rpc]]);
     return [0, rpc];
    }
    function Register(Version_i){
     var
      bin_shape_query = Version_i[1],
      bin_size_query = Version_i[2],
      bin_write_query = Version_i[3],
      bin_writer_query = Version_i[4],
      bin_read_query = Version_i[5],
      bin_read_query$0 = Version_i[6],
      bin_reader_query = Version_i[7],
      bin_query = Version_i[8],
      bin_shape_state = Version_i[9],
      bin_size_state = Version_i[10],
      bin_write_state = Version_i[11],
      bin_writer_state = Version_i[12],
      bin_read_state = Version_i[13],
      bin_read_state$0 = Version_i[14],
      bin_reader_state = Version_i[15],
      bin_state = Version_i[16],
      bin_shape_update = Version_i[17],
      bin_size_update = Version_i[18],
      bin_write_update = Version_i[19],
      bin_writer_update = Version_i[20],
      bin_read_update = Version_i[21],
      bin_read_update$0 = Version_i[22],
      bin_reader_update = Version_i[23],
      bin_update = Version_i[24],
      bin_shape_error = Version_i[25],
      bin_size_error = Version_i[26],
      bin_write_error = Version_i[27],
      bin_writer_error = Version_i[28],
      bin_read_error = Version_i[29],
      bin_read_error$0 = Version_i[30],
      bin_reader_error = Version_i[31],
      bin_error = Version_i[32],
      version = Version_i[33],
      query_of_model = Version_i[34],
      model_of_state = Version_i[35],
      model_of_error = Version_i[36],
      client_pushes_back = Version_i[37];
     function model_of_update(rs){
      return caml_call2
              (Async_kernel_Pipe[57],
               rs,
               function(r){
                try{var r$0 = caml_call1(Version_i[38], r);}
                catch(exn$0){
                 var exn = caml_wrap_exception(exn$0);
                 return [1,
                         failed_conversion
                          ([0,
                            999946793,
                            [0, 4102853, name],
                            [0, -901574920, version],
                            exn])];
                }
                return [0, r$0];
               });
     }
     var
      include =
        Register_raw
         ([0,
           bin_shape_query,
           bin_size_query,
           bin_write_query,
           bin_writer_query,
           bin_read_query,
           bin_read_query$0,
           bin_reader_query,
           bin_query,
           bin_shape_state,
           bin_size_state,
           bin_write_state,
           bin_writer_state,
           bin_read_state,
           bin_read_state$0,
           bin_reader_state,
           bin_state,
           bin_shape_update,
           bin_size_update,
           bin_write_update,
           bin_writer_update,
           bin_read_update,
           bin_read_update$0,
           bin_reader_update,
           bin_update,
           bin_shape_error,
           bin_size_error,
           bin_write_error,
           bin_writer_error,
           bin_read_error,
           bin_read_error$0,
           bin_reader_error,
           bin_error,
           version,
           query_of_model,
           model_of_state,
           model_of_error,
           client_pushes_back,
           model_of_update]),
      rpc = include[1];
     return [0, rpc];
    }
    return [0, name, , rpcs, versions, dispatch_multi, Register_raw, Register];
   }
   function Make$7(Model){
    var name = Model[1], registry = caml_call3(Core_Int[108][5], 0, _aq_, 0);
    function rpcs(param){
     var _bc_ = caml_call1(Core_Hashtbl[67], registry);
     return caml_call2
             (Core_List[50],
              _bc_,
              function(param){var rpc = param[2]; return rpc;});
    }
    function versions(param){
     var _bb_ = caml_call1(Core_Hashtbl[66], registry);
     return caml_call1(Core_Int[104][7], _bb_);
    }
    function dispatch_multi(conn_with_menu, msg){
     return Direct[2].call
             (null,
              conn_with_menu,
              msg,
              name,
              versions,
              registry,
              function(_ba_){return _ba_;});
    }
    function Register(Version_i){
     var
      rpc =
        caml_call3
         (Async_rpc_kernel_Rpc[10][1], name, Version_i[9], Version_i[8]);
     function dispatch(conn, q){
      var
       match =
         caml_call1
          (Core_Result[48],
           function(param){return caml_call1(Version_i[10], q);});
      if(0 === match[0]){
       var q$0 = match[1];
       return caml_call4(Async_rpc_kernel_Rpc[10][10], 0, rpc, conn, q$0);
      }
      var exn = match[1];
      return [1,
              failed_conversion
               ([0,
                 3854881,
                 [0, 4102853, name],
                 [0, -901574920, Version_i[9]],
                 exn])];
     }
     if(caml_call2(Core_Hashtbl[55], registry, Version_i[9])){
      var
       _a$_ =
         multiple_registrations
          ([0, [0, 4102853, name], [0, -901574920, Version_i[9]]]);
      caml_call1(Core_Error[28], _a$_);
     }
     else
      caml_call3
       (Core_Hashtbl[36], registry, Version_i[9], [0, dispatch, [3, rpc]]);
     return [0, rpc];
    }
    return [0, name, , rpcs, versions, dispatch_multi, Register];
   }
   caml_call1(Ppx_inline_test_lib[6], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Versioned);
   var
    cst_src_versioned_rpc_ml$9 = cst_src_versioned_rpc_ml$11,
    cst_Int_Set_equal_Caller_versi$3 = cst_Int_Set_equal_Caller_versi$5,
    cst_src_versioned_rpc_ml$10 = cst_src_versioned_rpc_ml$11,
    cst_Int_Set_equal_Caller_versi$4 = cst_Int_Set_equal_Caller_versi$5,
    cst_src_versioned_rpc_ml$8 = cst_src_versioned_rpc_ml$11,
    cst_Int_Set_equal_Caller_versi$2 = cst_Int_Set_equal_Caller_versi$5,
    cst_src_versioned_rpc_ml$7 = cst_src_versioned_rpc_ml$11,
    cst_Int_Set_equal_Caller_versi$1 = cst_Int_Set_equal_Caller_versi$5,
    cst_src_versioned_rpc_ml$5 = cst_src_versioned_rpc_ml$11,
    cst_Int_Set_equal_Caller_versi = cst_Int_Set_equal_Caller_versi$5,
    cst_src_versioned_rpc_ml$6 = cst_src_versioned_rpc_ml$11,
    cst_Int_Set_equal_Caller_versi$0 = cst_Int_Set_equal_Caller_versi$5,
    Async_rpc_kernel_Versioned_rpc =
      [0,
       [0,
        add$0,
        implement_multi,
        request,
        request$0,
        [0, add$1, request$1],
        supported_rpcs,
        supported_versions,
        create$0,
        rpc_name],
       [0, create$1, create_directly, connection, menu],
       [0, write, write_without_pushback, close, closed, is_closed],
       [0,
        [0,
         function(_a5_){
          var _a6_ = Make$4(_a5_), _a7_ = _a6_[6], _a8_ = _a6_[7];
          return [0,
                  function(_a__){
                   return _a8_
                           ([0,
                             _a__[2],
                             _a__[3],
                             _a__[4],
                             _a__[5],
                             _a__[6],
                             _a__[7],
                             _a__[8],
                             _a__[9],
                             _a__[10],
                             _a__[11],
                             _a__[12],
                             _a__[13],
                             _a__[14],
                             _a__[15],
                             _a__[16],
                             _a__[17],
                             _a__[1],
                             _a__[18],
                             _a__[19]]);
                  },
                  function(_a9_){
                   return _a7_
                           ([0,
                             _a9_[2],
                             _a9_[3],
                             _a9_[4],
                             _a9_[5],
                             _a9_[6],
                             _a9_[7],
                             _a9_[8],
                             _a9_[9],
                             _a9_[10],
                             _a9_[11],
                             _a9_[12],
                             _a9_[13],
                             _a9_[14],
                             _a9_[15],
                             _a9_[16],
                             _a9_[17],
                             _a9_[1],
                             _a9_[18],
                             _a9_[19]]);
                  },
                  _a6_[5],
                  _a6_[3],
                  _a6_[4],
                  _a6_[1]];
         }],
        [0,
         function(_aZ_){
          var _a0_ = Make$5(_aZ_), _a1_ = _a0_[9], _a2_ = _a0_[10];
          return [0,
                  function(_a4_){return [0, _a2_(_a4_)[1]];},
                  function(_a3_){return [0, _a1_(_a3_)[1]];},
                  _a0_[6],
                  _a0_[5],
                  _a0_[7],
                  _a0_[3],
                  _a0_[4],
                  _a0_[1]];
         }],
        [0,
         function(_aX_){
          var _aY_ = Make$6(_aX_);
          return [0, _aY_[7], _aY_[6], _aY_[5], _aY_[3], _aY_[4], _aY_[1]];
         }],
        [0,
         function(_aT_){
          var _aU_ = Make$7(_aT_), _aV_ = _aU_[6];
          return [0,
                  function(_aW_){
                   return _aV_
                           ([0,
                             _aW_[2],
                             _aW_[3],
                             _aW_[4],
                             _aW_[5],
                             _aW_[6],
                             _aW_[7],
                             _aW_[8],
                             _aW_[9],
                             _aW_[1],
                             _aW_[10]]);
                  },
                  _aU_[5],
                  _aU_[3],
                  _aU_[4],
                  _aU_[1]];
         }]],
       [0,
        [0,
         [0,
          create,
          name,
          add_version,
          add_version_with_failure,
          add_rpc_version,
          add_rpc_version_with_failure,
          implement],
         function(_aP_){
          var _aQ_ = Make(_aP_), _aR_ = _aQ_[6];
          return [0,
                  function(_aS_){
                   return _aR_
                           ([0,
                             _aS_[2],
                             _aS_[3],
                             _aS_[4],
                             _aS_[5],
                             _aS_[6],
                             _aS_[7],
                             _aS_[8],
                             _aS_[9],
                             _aS_[10],
                             _aS_[11],
                             _aS_[12],
                             _aS_[13],
                             _aS_[14],
                             _aS_[15],
                             _aS_[16],
                             _aS_[17],
                             _aS_[1],
                             _aS_[18],
                             _aS_[19]]);
                  },
                  _aQ_[3],
                  _aQ_[4],
                  _aQ_[5],
                  _aQ_[1]];
         }],
        [0,
         function(_aJ_){
          var _aK_ = Make$0(_aJ_), _aL_ = _aK_[9], _aM_ = _aK_[10];
          return [0,
                  function(_aO_){return [0, _aM_(_aO_)[1]];},
                  function(_aN_){return [0, _aL_(_aN_)[1]];},
                  _aK_[4],
                  _aK_[5],
                  _aK_[6],
                  _aK_[7],
                  _aK_[1]];
         }],
        [0,
         function(_aH_){
          var _aI_ = Make$1(_aH_);
          return [0, _aI_[7], _aI_[6], _aI_[3], _aI_[4], _aI_[5], _aI_[1]];
         }],
        [0,
         function(_aD_){
          var _aE_ = Make$2(_aD_), _aF_ = _aE_[6];
          return [0,
                  function(_aG_){
                   return _aF_
                           ([0,
                             _aG_[2],
                             _aG_[3],
                             _aG_[4],
                             _aG_[5],
                             _aG_[6],
                             _aG_[7],
                             _aG_[8],
                             _aG_[9],
                             _aG_[1],
                             _aG_[10]]);
                  },
                  _aE_[3],
                  _aE_[4],
                  _aE_[5],
                  _aE_[1]];
         }]],
       [0,
        [0,
         function(Model){
          var
           name = Model[1],
           Caller = Make$4([0, name]),
           Callee = Make([0, name]);
          caml_call8
           (Ppx_inline_test_lib[7],
            Inline_test_config,
            cst_Int_Set_equal_Caller_versi,
            0,
            cst_src_versioned_rpc_ml$5,
            1396,
            6,
            74,
            function(param){
             var
              _aB_ = Callee[5].call(null, 0),
              _aC_ = Caller[4].call(null, 0);
             return caml_call2(Core_Int[104][3], _aC_, _aB_);
            });
          function Register(Version){
           var
            version = Version[1],
            bin_shape_query = Version[2],
            bin_size_query = Version[3],
            bin_write_query = Version[4],
            bin_writer_query = Version[5],
            bin_read_query = Version[6],
            bin_read_query$0 = Version[7],
            bin_reader_query = Version[8],
            bin_query = Version[9],
            bin_shape_response = Version[10],
            bin_size_response = Version[11],
            bin_write_response = Version[12],
            bin_writer_response = Version[13],
            bin_read_response = Version[14],
            bin_read_response$0 = Version[15],
            bin_reader_response = Version[16],
            bin_response = Version[17],
            callee_model_of_query = Version[19],
            response_of_callee_model = Version[20];
           Callee[6].call
            (null,
             [0,
              bin_shape_query,
              bin_size_query,
              bin_write_query,
              bin_writer_query,
              bin_read_query,
              bin_read_query$0,
              bin_reader_query,
              bin_query,
              bin_shape_response,
              bin_size_response,
              bin_write_response,
              bin_writer_response,
              bin_read_response,
              bin_read_response$0,
              bin_reader_response,
              bin_response,
              version,
              callee_model_of_query,
              response_of_callee_model]);
           var
            version$0 = Version[1],
            bin_shape_query$0 = Version[2],
            bin_size_query$0 = Version[3],
            bin_write_query$0 = Version[4],
            bin_writer_query$0 = Version[5],
            bin_read_query$1 = Version[6],
            bin_read_query$2 = Version[7],
            bin_reader_query$0 = Version[8],
            bin_query$0 = Version[9],
            bin_shape_response$0 = Version[10],
            bin_size_response$0 = Version[11],
            bin_write_response$0 = Version[12],
            bin_writer_response$0 = Version[13],
            bin_read_response$1 = Version[14],
            bin_read_response$2 = Version[15],
            bin_reader_response$0 = Version[16],
            bin_response$0 = Version[17],
            query_of_caller_model = Version[18],
            caller_model_of_response = Version[21],
            include =
              Caller[7].call
               (null,
                [0,
                 bin_shape_query$0,
                 bin_size_query$0,
                 bin_write_query$0,
                 bin_writer_query$0,
                 bin_read_query$1,
                 bin_read_query$2,
                 bin_reader_query$0,
                 bin_query$0,
                 bin_shape_response$0,
                 bin_size_response$0,
                 bin_write_response$0,
                 bin_writer_response$0,
                 bin_read_response$1,
                 bin_read_response$2,
                 bin_reader_response$0,
                 bin_response$0,
                 version$0,
                 query_of_caller_model,
                 caller_model_of_response]),
            rpc = include[1];
           caml_call8
            (Ppx_inline_test_lib[7],
             Inline_test_config,
             cst_Int_Set_equal_Caller_versi$0,
             0,
             cst_src_versioned_rpc_ml$6,
             1426,
             8,
             76,
             function(param){
              var
               _az_ = Callee[5].call(null, 0),
               _aA_ = Caller[4].call(null, 0);
              return caml_call2(Core_Int[104][3], _aA_, _az_);
             });
           return [0, rpc];
          }
          var dispatch_multi = Caller[5], implement_multi = Callee[3];
          function versions(param){return Caller[4].call(null, 0);}
          function rpcs(param){return Caller[3].call(null, 0);}
          return [0,
                  Register,
                  dispatch_multi,
                  implement_multi,
                  rpcs,
                  versions,
                  name];
         }],
        [0,
         function(Model){
          var
           name = Model[1],
           Caller = Make$5([0, name]),
           Callee = Make$0([0, name]);
          caml_call8
           (Ppx_inline_test_lib[7],
            Inline_test_config,
            cst_Int_Set_equal_Caller_versi$1,
            0,
            cst_src_versioned_rpc_ml$7,
            1519,
            6,
            74,
            function(param){
             var
              _ax_ = Callee[7].call(null, 0),
              _ay_ = Caller[4].call(null, 0);
             return caml_call2(Core_Int[104][3], _ay_, _ax_);
            });
          var
           dispatch_multi = Caller[6],
           dispatch_iter_multi = Caller[5],
           abort_multi = Caller[7],
           implement_multi = Callee[4],
           implement_direct_multi = Callee[5];
          function versions(param){return Caller[4].call(null, 0);}
          function rpcs(param){return Caller[3].call(null, 0);}
          return [0,
                  function(Version_i){
                   var
                    version = Version_i[1],
                    bin_shape_query = Version_i[2],
                    bin_size_query = Version_i[3],
                    bin_write_query = Version_i[4],
                    bin_writer_query = Version_i[5],
                    bin_read_query = Version_i[6],
                    bin_read_query$0 = Version_i[7],
                    bin_reader_query = Version_i[8],
                    bin_query = Version_i[9],
                    bin_shape_response = Version_i[10],
                    bin_size_response = Version_i[11],
                    bin_write_response = Version_i[12],
                    bin_writer_response = Version_i[13],
                    bin_read_response = Version_i[14],
                    bin_read_response$0 = Version_i[15],
                    bin_reader_response = Version_i[16],
                    bin_response = Version_i[17],
                    bin_shape_error = Version_i[18],
                    bin_size_error = Version_i[19],
                    bin_write_error = Version_i[20],
                    bin_writer_error = Version_i[21],
                    bin_read_error = Version_i[22],
                    bin_read_error$0 = Version_i[23],
                    bin_reader_error = Version_i[24],
                    bin_error = Version_i[25],
                    callee_model_of_query = Version_i[27],
                    error_of_callee_model = Version_i[28],
                    client_pushes_back = Version_i[30],
                    response_of_callee_model = Version_i[31];
                   Callee[10].call
                    (null,
                     [0,
                      bin_shape_query,
                      bin_size_query,
                      bin_write_query,
                      bin_writer_query,
                      bin_read_query,
                      bin_read_query$0,
                      bin_reader_query,
                      bin_query,
                      bin_shape_response,
                      bin_size_response,
                      bin_write_response,
                      bin_writer_response,
                      bin_read_response,
                      bin_read_response$0,
                      bin_reader_response,
                      bin_response,
                      bin_shape_error,
                      bin_size_error,
                      bin_write_error,
                      bin_writer_error,
                      bin_read_error,
                      bin_read_error$0,
                      bin_reader_error,
                      bin_error,
                      version,
                      callee_model_of_query,
                      error_of_callee_model,
                      client_pushes_back,
                      response_of_callee_model]);
                   var
                    version$0 = Version_i[1],
                    bin_shape_query$0 = Version_i[2],
                    bin_size_query$0 = Version_i[3],
                    bin_write_query$0 = Version_i[4],
                    bin_writer_query$0 = Version_i[5],
                    bin_read_query$1 = Version_i[6],
                    bin_read_query$2 = Version_i[7],
                    bin_reader_query$0 = Version_i[8],
                    bin_query$0 = Version_i[9],
                    bin_shape_response$0 = Version_i[10],
                    bin_size_response$0 = Version_i[11],
                    bin_write_response$0 = Version_i[12],
                    bin_writer_response$0 = Version_i[13],
                    bin_read_response$1 = Version_i[14],
                    bin_read_response$2 = Version_i[15],
                    bin_reader_response$0 = Version_i[16],
                    bin_response$0 = Version_i[17],
                    bin_shape_error$0 = Version_i[18],
                    bin_size_error$0 = Version_i[19],
                    bin_write_error$0 = Version_i[20],
                    bin_writer_error$0 = Version_i[21],
                    bin_read_error$1 = Version_i[22],
                    bin_read_error$2 = Version_i[23],
                    bin_reader_error$0 = Version_i[24],
                    bin_error$0 = Version_i[25],
                    query_of_caller_model = Version_i[26],
                    caller_model_of_error = Version_i[29],
                    client_pushes_back$0 = Version_i[30],
                    caller_model_of_response = Version_i[32],
                    include =
                      Caller[10].call
                       (null,
                        [0,
                         bin_shape_query$0,
                         bin_size_query$0,
                         bin_write_query$0,
                         bin_writer_query$0,
                         bin_read_query$1,
                         bin_read_query$2,
                         bin_reader_query$0,
                         bin_query$0,
                         bin_shape_response$0,
                         bin_size_response$0,
                         bin_write_response$0,
                         bin_writer_response$0,
                         bin_read_response$1,
                         bin_read_response$2,
                         bin_reader_response$0,
                         bin_response$0,
                         bin_shape_error$0,
                         bin_size_error$0,
                         bin_write_error$0,
                         bin_writer_error$0,
                         bin_read_error$1,
                         bin_read_error$2,
                         bin_reader_error$0,
                         bin_error$0,
                         version$0,
                         query_of_caller_model,
                         caller_model_of_error,
                         client_pushes_back$0,
                         caller_model_of_response]),
                    rpc = include[1];
                   return [0, rpc];
                  },
                  function(Version_i){
                   var
                    version = Version_i[1],
                    bin_shape_query = Version_i[2],
                    bin_size_query = Version_i[3],
                    bin_write_query = Version_i[4],
                    bin_writer_query = Version_i[5],
                    bin_read_query = Version_i[6],
                    bin_read_query$0 = Version_i[7],
                    bin_reader_query = Version_i[8],
                    bin_query = Version_i[9],
                    bin_shape_response = Version_i[10],
                    bin_size_response = Version_i[11],
                    bin_write_response = Version_i[12],
                    bin_writer_response = Version_i[13],
                    bin_read_response = Version_i[14],
                    bin_read_response$0 = Version_i[15],
                    bin_reader_response = Version_i[16],
                    bin_response = Version_i[17],
                    bin_shape_error = Version_i[18],
                    bin_size_error = Version_i[19],
                    bin_write_error = Version_i[20],
                    bin_writer_error = Version_i[21],
                    bin_read_error = Version_i[22],
                    bin_read_error$0 = Version_i[23],
                    bin_reader_error = Version_i[24],
                    bin_error = Version_i[25],
                    callee_model_of_query = Version_i[27],
                    error_of_callee_model = Version_i[28],
                    client_pushes_back = Version_i[30],
                    response_of_callee_model = Version_i[31];
                   Callee[9].call
                    (null,
                     [0,
                      bin_shape_query,
                      bin_size_query,
                      bin_write_query,
                      bin_writer_query,
                      bin_read_query,
                      bin_read_query$0,
                      bin_reader_query,
                      bin_query,
                      bin_shape_response,
                      bin_size_response,
                      bin_write_response,
                      bin_writer_response,
                      bin_read_response,
                      bin_read_response$0,
                      bin_reader_response,
                      bin_response,
                      bin_shape_error,
                      bin_size_error,
                      bin_write_error,
                      bin_writer_error,
                      bin_read_error,
                      bin_read_error$0,
                      bin_reader_error,
                      bin_error,
                      version,
                      callee_model_of_query,
                      error_of_callee_model,
                      client_pushes_back,
                      response_of_callee_model]);
                   var
                    version$0 = Version_i[1],
                    bin_shape_query$0 = Version_i[2],
                    bin_size_query$0 = Version_i[3],
                    bin_write_query$0 = Version_i[4],
                    bin_writer_query$0 = Version_i[5],
                    bin_read_query$1 = Version_i[6],
                    bin_read_query$2 = Version_i[7],
                    bin_reader_query$0 = Version_i[8],
                    bin_query$0 = Version_i[9],
                    bin_shape_response$0 = Version_i[10],
                    bin_size_response$0 = Version_i[11],
                    bin_write_response$0 = Version_i[12],
                    bin_writer_response$0 = Version_i[13],
                    bin_read_response$1 = Version_i[14],
                    bin_read_response$2 = Version_i[15],
                    bin_reader_response$0 = Version_i[16],
                    bin_response$0 = Version_i[17],
                    bin_shape_error$0 = Version_i[18],
                    bin_size_error$0 = Version_i[19],
                    bin_write_error$0 = Version_i[20],
                    bin_writer_error$0 = Version_i[21],
                    bin_read_error$1 = Version_i[22],
                    bin_read_error$2 = Version_i[23],
                    bin_reader_error$0 = Version_i[24],
                    bin_error$0 = Version_i[25],
                    query_of_caller_model = Version_i[26],
                    caller_model_of_error = Version_i[29],
                    client_pushes_back$0 = Version_i[30],
                    caller_model_of_response = Version_i[32],
                    include =
                      Caller[9].call
                       (null,
                        [0,
                         bin_shape_query$0,
                         bin_size_query$0,
                         bin_write_query$0,
                         bin_writer_query$0,
                         bin_read_query$1,
                         bin_read_query$2,
                         bin_reader_query$0,
                         bin_query$0,
                         bin_shape_response$0,
                         bin_size_response$0,
                         bin_write_response$0,
                         bin_writer_response$0,
                         bin_read_response$1,
                         bin_read_response$2,
                         bin_reader_response$0,
                         bin_response$0,
                         bin_shape_error$0,
                         bin_size_error$0,
                         bin_write_error$0,
                         bin_writer_error$0,
                         bin_read_error$1,
                         bin_read_error$2,
                         bin_reader_error$0,
                         bin_error$0,
                         version$0,
                         query_of_caller_model,
                         caller_model_of_error,
                         client_pushes_back$0,
                         caller_model_of_response]),
                    rpc = include[1];
                   return [0, rpc];
                  },
                  dispatch_multi,
                  dispatch_iter_multi,
                  abort_multi,
                  implement_multi,
                  implement_direct_multi,
                  rpcs,
                  versions,
                  name];
         }],
        [0,
         function(Model){
          var
           name = Model[1],
           Caller = Make$6([0, name]),
           Callee = Make$1([0, name]);
          caml_call8
           (Ppx_inline_test_lib[7],
            Inline_test_config,
            cst_Int_Set_equal_Caller_versi$2,
            0,
            cst_src_versioned_rpc_ml$8,
            1666,
            6,
            74,
            function(param){
             var
              _av_ = Callee[5].call(null, 0),
              _aw_ = Caller[4].call(null, 0);
             return caml_call2(Core_Int[104][3], _aw_, _av_);
            });
          function Register_raw(Version_i){
           var
            version = Version_i[1],
            bin_shape_query = Version_i[2],
            bin_size_query = Version_i[3],
            bin_write_query = Version_i[4],
            bin_writer_query = Version_i[5],
            bin_read_query = Version_i[6],
            bin_read_query$0 = Version_i[7],
            bin_reader_query = Version_i[8],
            bin_query = Version_i[9],
            bin_shape_state = Version_i[10],
            bin_size_state = Version_i[11],
            bin_write_state = Version_i[12],
            bin_writer_state = Version_i[13],
            bin_read_state = Version_i[14],
            bin_read_state$0 = Version_i[15],
            bin_reader_state = Version_i[16],
            bin_state = Version_i[17],
            bin_shape_update = Version_i[18],
            bin_size_update = Version_i[19],
            bin_write_update = Version_i[20],
            bin_writer_update = Version_i[21],
            bin_read_update = Version_i[22],
            bin_read_update$0 = Version_i[23],
            bin_reader_update = Version_i[24],
            bin_update = Version_i[25],
            bin_shape_error = Version_i[26],
            bin_size_error = Version_i[27],
            bin_write_error = Version_i[28],
            bin_writer_error = Version_i[29],
            bin_read_error = Version_i[30],
            bin_read_error$0 = Version_i[31],
            bin_reader_error = Version_i[32],
            bin_error = Version_i[33],
            callee_model_of_query = Version_i[35],
            state_of_callee_model = Version_i[37],
            error_of_callee_model = Version_i[39],
            client_pushes_back = Version_i[40],
            update_of_callee_model = Version_i[42];
           Callee[6].call
            (null,
             [0,
              bin_shape_query,
              bin_size_query,
              bin_write_query,
              bin_writer_query,
              bin_read_query,
              bin_read_query$0,
              bin_reader_query,
              bin_query,
              bin_shape_state,
              bin_size_state,
              bin_write_state,
              bin_writer_state,
              bin_read_state,
              bin_read_state$0,
              bin_reader_state,
              bin_state,
              bin_shape_update,
              bin_size_update,
              bin_write_update,
              bin_writer_update,
              bin_read_update,
              bin_read_update$0,
              bin_reader_update,
              bin_update,
              bin_shape_error,
              bin_size_error,
              bin_write_error,
              bin_writer_error,
              bin_read_error,
              bin_read_error$0,
              bin_reader_error,
              bin_error,
              version,
              callee_model_of_query,
              state_of_callee_model,
              error_of_callee_model,
              client_pushes_back,
              update_of_callee_model]);
           var
            version$0 = Version_i[1],
            bin_shape_query$0 = Version_i[2],
            bin_size_query$0 = Version_i[3],
            bin_write_query$0 = Version_i[4],
            bin_writer_query$0 = Version_i[5],
            bin_read_query$1 = Version_i[6],
            bin_read_query$2 = Version_i[7],
            bin_reader_query$0 = Version_i[8],
            bin_query$0 = Version_i[9],
            bin_shape_state$0 = Version_i[10],
            bin_size_state$0 = Version_i[11],
            bin_write_state$0 = Version_i[12],
            bin_writer_state$0 = Version_i[13],
            bin_read_state$1 = Version_i[14],
            bin_read_state$2 = Version_i[15],
            bin_reader_state$0 = Version_i[16],
            bin_state$0 = Version_i[17],
            bin_shape_update$0 = Version_i[18],
            bin_size_update$0 = Version_i[19],
            bin_write_update$0 = Version_i[20],
            bin_writer_update$0 = Version_i[21],
            bin_read_update$1 = Version_i[22],
            bin_read_update$2 = Version_i[23],
            bin_reader_update$0 = Version_i[24],
            bin_update$0 = Version_i[25],
            bin_shape_error$0 = Version_i[26],
            bin_size_error$0 = Version_i[27],
            bin_write_error$0 = Version_i[28],
            bin_writer_error$0 = Version_i[29],
            bin_read_error$1 = Version_i[30],
            bin_read_error$2 = Version_i[31],
            bin_reader_error$0 = Version_i[32],
            bin_error$0 = Version_i[33],
            query_of_caller_model = Version_i[34],
            caller_model_of_state = Version_i[36],
            caller_model_of_error = Version_i[38],
            client_pushes_back$0 = Version_i[40],
            caller_model_of_update = Version_i[41],
            include =
              Caller[6].call
               (null,
                [0,
                 bin_shape_query$0,
                 bin_size_query$0,
                 bin_write_query$0,
                 bin_writer_query$0,
                 bin_read_query$1,
                 bin_read_query$2,
                 bin_reader_query$0,
                 bin_query$0,
                 bin_shape_state$0,
                 bin_size_state$0,
                 bin_write_state$0,
                 bin_writer_state$0,
                 bin_read_state$1,
                 bin_read_state$2,
                 bin_reader_state$0,
                 bin_state$0,
                 bin_shape_update$0,
                 bin_size_update$0,
                 bin_write_update$0,
                 bin_writer_update$0,
                 bin_read_update$1,
                 bin_read_update$2,
                 bin_reader_update$0,
                 bin_update$0,
                 bin_shape_error$0,
                 bin_size_error$0,
                 bin_write_error$0,
                 bin_writer_error$0,
                 bin_read_error$1,
                 bin_read_error$2,
                 bin_reader_error$0,
                 bin_error$0,
                 version$0,
                 query_of_caller_model,
                 caller_model_of_state,
                 caller_model_of_error,
                 client_pushes_back$0,
                 caller_model_of_update]),
            rpc = include[1];
           return [0, rpc];
          }
          function Register(Version_i){
           var
            version = Version_i[1],
            bin_shape_query = Version_i[2],
            bin_size_query = Version_i[3],
            bin_write_query = Version_i[4],
            bin_writer_query = Version_i[5],
            bin_read_query = Version_i[6],
            bin_read_query$0 = Version_i[7],
            bin_reader_query = Version_i[8],
            bin_query = Version_i[9],
            bin_shape_state = Version_i[10],
            bin_size_state = Version_i[11],
            bin_write_state = Version_i[12],
            bin_writer_state = Version_i[13],
            bin_read_state = Version_i[14],
            bin_read_state$0 = Version_i[15],
            bin_reader_state = Version_i[16],
            bin_state = Version_i[17],
            bin_shape_update = Version_i[18],
            bin_size_update = Version_i[19],
            bin_write_update = Version_i[20],
            bin_writer_update = Version_i[21],
            bin_read_update = Version_i[22],
            bin_read_update$0 = Version_i[23],
            bin_reader_update = Version_i[24],
            bin_update = Version_i[25],
            bin_shape_error = Version_i[26],
            bin_size_error = Version_i[27],
            bin_write_error = Version_i[28],
            bin_writer_error = Version_i[29],
            bin_read_error = Version_i[30],
            bin_read_error$0 = Version_i[31],
            bin_reader_error = Version_i[32],
            bin_error = Version_i[33],
            callee_model_of_query = Version_i[35],
            state_of_callee_model = Version_i[37],
            error_of_callee_model = Version_i[39],
            client_pushes_back = Version_i[40],
            update_of_callee_model = Version_i[41];
           Callee[7].call
            (null,
             [0,
              bin_shape_query,
              bin_size_query,
              bin_write_query,
              bin_writer_query,
              bin_read_query,
              bin_read_query$0,
              bin_reader_query,
              bin_query,
              bin_shape_state,
              bin_size_state,
              bin_write_state,
              bin_writer_state,
              bin_read_state,
              bin_read_state$0,
              bin_reader_state,
              bin_state,
              bin_shape_update,
              bin_size_update,
              bin_write_update,
              bin_writer_update,
              bin_read_update,
              bin_read_update$0,
              bin_reader_update,
              bin_update,
              bin_shape_error,
              bin_size_error,
              bin_write_error,
              bin_writer_error,
              bin_read_error,
              bin_read_error$0,
              bin_reader_error,
              bin_error,
              version,
              callee_model_of_query,
              state_of_callee_model,
              error_of_callee_model,
              client_pushes_back,
              update_of_callee_model]);
           var
            version$0 = Version_i[1],
            bin_shape_query$0 = Version_i[2],
            bin_size_query$0 = Version_i[3],
            bin_write_query$0 = Version_i[4],
            bin_writer_query$0 = Version_i[5],
            bin_read_query$1 = Version_i[6],
            bin_read_query$2 = Version_i[7],
            bin_reader_query$0 = Version_i[8],
            bin_query$0 = Version_i[9],
            bin_shape_state$0 = Version_i[10],
            bin_size_state$0 = Version_i[11],
            bin_write_state$0 = Version_i[12],
            bin_writer_state$0 = Version_i[13],
            bin_read_state$1 = Version_i[14],
            bin_read_state$2 = Version_i[15],
            bin_reader_state$0 = Version_i[16],
            bin_state$0 = Version_i[17],
            bin_shape_update$0 = Version_i[18],
            bin_size_update$0 = Version_i[19],
            bin_write_update$0 = Version_i[20],
            bin_writer_update$0 = Version_i[21],
            bin_read_update$1 = Version_i[22],
            bin_read_update$2 = Version_i[23],
            bin_reader_update$0 = Version_i[24],
            bin_update$0 = Version_i[25],
            bin_shape_error$0 = Version_i[26],
            bin_size_error$0 = Version_i[27],
            bin_write_error$0 = Version_i[28],
            bin_writer_error$0 = Version_i[29],
            bin_read_error$1 = Version_i[30],
            bin_read_error$2 = Version_i[31],
            bin_reader_error$0 = Version_i[32],
            bin_error$0 = Version_i[33],
            query_of_caller_model = Version_i[34],
            caller_model_of_state = Version_i[36],
            caller_model_of_error = Version_i[38],
            client_pushes_back$0 = Version_i[40],
            caller_model_of_update = Version_i[42],
            include =
              Caller[7].call
               (null,
                [0,
                 bin_shape_query$0,
                 bin_size_query$0,
                 bin_write_query$0,
                 bin_writer_query$0,
                 bin_read_query$1,
                 bin_read_query$2,
                 bin_reader_query$0,
                 bin_query$0,
                 bin_shape_state$0,
                 bin_size_state$0,
                 bin_write_state$0,
                 bin_writer_state$0,
                 bin_read_state$1,
                 bin_read_state$2,
                 bin_reader_state$0,
                 bin_state$0,
                 bin_shape_update$0,
                 bin_size_update$0,
                 bin_write_update$0,
                 bin_writer_update$0,
                 bin_read_update$1,
                 bin_read_update$2,
                 bin_reader_update$0,
                 bin_update$0,
                 bin_shape_error$0,
                 bin_size_error$0,
                 bin_write_error$0,
                 bin_writer_error$0,
                 bin_read_error$1,
                 bin_read_error$2,
                 bin_reader_error$0,
                 bin_error$0,
                 version$0,
                 query_of_caller_model,
                 caller_model_of_state,
                 caller_model_of_error,
                 client_pushes_back$0,
                 caller_model_of_update]),
            rpc = include[1];
           return [0, rpc];
          }
          var dispatch_multi = Caller[5], implement_multi = Callee[3];
          function versions(param){return Caller[4].call(null, 0);}
          function rpcs(param){return Caller[3].call(null, 0);}
          return [0,
                  Register,
                  Register_raw,
                  dispatch_multi,
                  implement_multi,
                  rpcs,
                  versions,
                  name];
         }],
        [0,
         function(Model){
          var
           name = Model[1],
           Caller = Make$7([0, name]),
           Callee = Make$2([0, name]);
          caml_call8
           (Ppx_inline_test_lib[7],
            Inline_test_config,
            cst_Int_Set_equal_Caller_versi$3,
            0,
            cst_src_versioned_rpc_ml$9,
            1795,
            6,
            74,
            function(param){
             var
              _at_ = Callee[5].call(null, 0),
              _au_ = Caller[4].call(null, 0);
             return caml_call2(Core_Int[104][3], _au_, _at_);
            });
          function Register(Version){
           var
            version = Version[1],
            bin_shape_msg = Version[2],
            bin_size_msg = Version[3],
            bin_write_msg = Version[4],
            bin_writer_msg = Version[5],
            bin_read_msg = Version[6],
            bin_read_msg$0 = Version[7],
            bin_reader_msg = Version[8],
            bin_msg = Version[9],
            callee_model_of_msg = Version[11];
           Callee[6].call
            (null,
             [0,
              bin_shape_msg,
              bin_size_msg,
              bin_write_msg,
              bin_writer_msg,
              bin_read_msg,
              bin_read_msg$0,
              bin_reader_msg,
              bin_msg,
              version,
              callee_model_of_msg]);
           var
            version$0 = Version[1],
            bin_shape_msg$0 = Version[2],
            bin_size_msg$0 = Version[3],
            bin_write_msg$0 = Version[4],
            bin_writer_msg$0 = Version[5],
            bin_read_msg$1 = Version[6],
            bin_read_msg$2 = Version[7],
            bin_reader_msg$0 = Version[8],
            bin_msg$0 = Version[9],
            msg_of_caller_model = Version[10],
            include =
              Caller[6].call
               (null,
                [0,
                 bin_shape_msg$0,
                 bin_size_msg$0,
                 bin_write_msg$0,
                 bin_writer_msg$0,
                 bin_read_msg$1,
                 bin_read_msg$2,
                 bin_reader_msg$0,
                 bin_msg$0,
                 version$0,
                 msg_of_caller_model]),
            rpc = include[1];
           caml_call8
            (Ppx_inline_test_lib[7],
             Inline_test_config,
             cst_Int_Set_equal_Caller_versi$4,
             0,
             cst_src_versioned_rpc_ml$10,
             1820,
             8,
             76,
             function(param){
              var
               _ar_ = Callee[5].call(null, 0),
               _as_ = Caller[4].call(null, 0);
              return caml_call2(Core_Int[104][3], _as_, _ar_);
             });
           return [0, rpc];
          }
          var dispatch_multi = Caller[5], implement_multi = Callee[3];
          function versions(param){return Caller[4].call(null, 0);}
          function rpcs(param){return Caller[3].call(null, 0);}
          return [0,
                  Register,
                  dispatch_multi,
                  implement_multi,
                  rpcs,
                  versions,
                  name];
         }]]];
   runtime.caml_register_global
    (161, Async_rpc_kernel_Versioned_rpc, cst_Async_rpc_kernel_Versioned);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Pipe_transport
//# unitInfo: Requires: Async_kernel, Async_kernel__Async_kernel_scheduler, Async_kernel__Deferred, Async_kernel__Monitor, Async_kernel__Pipe, Async_rpc_kernel__Transport, Bin_prot__Utils, Core, Core__Bigbuffer, Core__Bigstring, Core__Int, Core__Int63, Core__Queue, Core__Result, Core__String, Expect_test_collector, Inline_test_config, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$3 = "",
    cst_Async_rpc_kernel_Pipe_tran$0 = "Async_rpc_kernel__Pipe_transport",
    cst_FOOBAR123$1 = "FOOBAR123",
    cst_Test_reader_bigstring$0 = "Test_reader_bigstring",
    cst_Test_reader_string$0 = "Test_reader_string",
    cst_async_rpc_kernel$0 = "async_rpc_kernel",
    cst_pipe = "pipe",
    cst_src_pipe_transport_ml$16 = "src/pipe_transport.ml",
    cst_src_pipe_transport_ml_Benc$5 = "src/pipe_transport.ml.Bench_reader",
    cst_write_2_msg_1_chunk$1 = "write_2_msg_1_chunk",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$3,
    pos$3 = "src/pipe_transport.ml:452:19",
    pos$2 = "src/pipe_transport.ml:430:21",
    cst = cst$3,
    pos$1 = "src/pipe_transport.ml:356:19",
    pos$0 = "src/pipe_transport.ml:355:19",
    pos = "src/pipe_transport.ml:333:19",
    cst$1 = cst$3,
    cst$2 = cst$3,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_kernel = global_data.Async_kernel,
    Core_Bigstring = global_data.Core__Bigstring,
    Async_rpc_kernel_Transport = global_data.Async_rpc_kernel__Transport,
    Async_kernel_Async_kernel_sche =
      global_data.Async_kernel__Async_kernel_scheduler,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Core_Int = global_data.Core__Int,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Core_Result = global_data.Core__Result,
    Assert_failure = global_data.Assert_failure,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Core = global_data.Core,
    Inline_test_config = global_data.Inline_test_config,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bin_prot_Utils = global_data.Bin_prot__Utils,
    Core_Int63 = global_data.Core__Int63,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Core_Queue = global_data.Core__Queue,
    Core_Bigbuffer = global_data.Core__Bigbuffer,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Expect_test_collector = global_data.Expect_test_collector,
    Core_String = global_data.Core__String;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Pipe_tran$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel$0);
   caml_call1(Expect_test_collector[6][1], cst_src_pipe_transport_ml$16);
   caml_call2
    (Ppx_inline_test_lib[5], cst_async_rpc_kernel$0, "pipe_transport.ml");
   var
    _a_ = [0, "bytes_read"],
    _b_ = [0, "buffer"],
    _c_ = [0, cst_pipe],
    _d_ = [0, cst_src_pipe_transport_ml$16, 116, 12],
    _e_ = [0, cst_src_pipe_transport_ml$16, 110, 16],
    _f_ = [1, 3456156],
    _g_ = [0, "bytes_written"],
    _h_ = [0, "monitor"],
    _i_ = [0, cst_pipe],
    _j_ = [0, 1];
   function pipe_read(t, f){
    var _an_ = caml_call1(Async_kernel_Pipe[43], t);
    return caml_call2
            (Async_kernel[22][2],
             _an_,
             function(param){
              if(3456156 <= param) return caml_call1(f, 3456156);
              var res = caml_call3(Async_kernel_Pipe[38], 0, 0, t);
              if(typeof res === "number" && 3456156 > res)
               return pipe_read(t, f);
              return caml_call1(f, res);
             });
   }
   function create(pipe){
    var _am_ = Core_Int63[14];
    return [0,
            pipe,
            caml_call1(Core_Bigbuffer[2], Async_rpc_kernel_Transport[1][1]),
            _am_];
   }
   function Pipe_reader(Data){
    function sexp_of_t(x_009){
     var
      of_a_001 = Data[1],
      buffer_005 = x_009[2],
      pipe_003 = x_009[1],
      bytes_read_007 = x_009[3],
      arg_008 = caml_call1(Core_Int63[100], bytes_read_007),
      bnds_002 = [0, [1, [0, _a_, [0, arg_008, 0]]], 0],
      arg_006 = caml_call1(Core_Bigbuffer[1], buffer_005),
      bnds_002$0 = [0, [1, [0, _b_, [0, arg_006, 0]]], bnds_002],
      arg_004 = caml_call2(Async_kernel_Pipe[4][1], of_a_001, pipe_003),
      bnds_002$1 = [0, [1, [0, _c_, [0, arg_004, 0]]], bnds_002$0];
     return [1, bnds_002$1];
    }
    function close(t){
     caml_call1(Async_kernel_Pipe[16], t[1]);
     return Async_kernel_Deferred[18];
    }
    function is_closed(t){return caml_call1(Async_kernel_Pipe[17], t[1]);}
    function bytes_read(t){return t[3];}
    function read_forever(t, on_message, on_end_of_batch){
     var buffer = t[2];
     function process_queue$0(counter, need, queue){
      for(;;){
       var match = caml_call1(Core_Queue[43], queue);
       if(! match) return caml_call1(Async_kernel[19], [1, need]);
       var
        data = match[1],
        buff_len = caml_call1(Core_Bigbuffer[12], buffer),
        data_len = caml_call1(Data[2], data);
       if
        (caml_call2(Core_Int[101][3], buff_len, 0)
         && caml_call2(Core_Int[101][1], data_len, need)){
        var _ai_ = caml_call1(Data[4], data), _aj_ = 0;
        if(counter >= 50)
         return caml_trampoline_return
                 (process_data$0, [0, _aj_, _ai_, data_len, queue]);
        var counter$0 = counter + 1 | 0;
        return process_data$0(counter$0, _aj_, _ai_, data_len, queue);
       }
       caml_call2(Data[3], buffer, data);
       var _ak_ = caml_call1(Core_Bigbuffer[12], buffer);
       if(caml_call2(Core_Int[101][1], _ak_, need)){
        var
         data$0 = caml_call1(Core_Bigbuffer[22], buffer),
         length = caml_call1(Core_Bigbuffer[12], buffer),
         _al_ = 0;
        if(counter >= 50)
         return caml_trampoline_return
                 (process_data$0, [0, _al_, data$0, length, queue]);
        var counter$1 = counter + 1 | 0;
        return process_data$0(counter$1, _al_, data$0, length, queue);
       }
      }
     }
     function process_queue(need, queue){
      return caml_trampoline(process_queue$0(0, need, queue));
     }
     function process_data$0(counter, pos, data, length, queue){
      if
       (!
        caml_call2(Core_Int[101][1], length, Async_rpc_kernel_Transport[1][1])){
       var _ah_ = Async_rpc_kernel_Transport[1][1];
       if(counter >= 50)
        return caml_trampoline_return
                (set_buffer_and_process_queue$0,
                 [0, _ah_, pos, length, queue, data]);
       var counter$1 = counter + 1 | 0;
       return set_buffer_and_process_queue$0
               (counter$1, _ah_, pos, length, queue, data);
      }
      var
       payload_len = caml_call2(Async_rpc_kernel_Transport[1][2], data, pos),
       total_len = Async_rpc_kernel_Transport[1][1] + payload_len | 0;
      if(! caml_call2(Core_Int[101][1], length, total_len)){
       if(counter >= 50)
        return caml_trampoline_return
                (set_buffer_and_process_queue$0,
                 [0, total_len, pos, length, queue, data]);
       var counter$0 = counter + 1 | 0;
       return set_buffer_and_process_queue$0
               (counter$0, total_len, pos, length, queue, data);
      }
      var _ae_ = caml_call1(Core_Int63[70], payload_len);
      t[3] = caml_call2(Core_Int63[17], t[3], _ae_);
      var
       continue_or_wait =
         caml_call3
          (on_message,
           data,
           pos + Async_rpc_kernel_Transport[1][1] | 0,
           payload_len);
      if(typeof continue_or_wait !== "number" && 0 === continue_or_wait[0]){
       var
        x = continue_or_wait[1],
        pos$0 = pos + total_len | 0,
        length$0 = length - total_len | 0;
       set_buffer(pos$0, length$0, data);
       caml_call2
        (Core_Queue[16],
         queue,
         function(data){return caml_call2(Data[3], buffer, data);});
       return caml_call1(Async_kernel[19], [0, x]);
      }
      function _af_(param){
       var pos$0 = pos + total_len | 0, length$0 = length - total_len | 0;
       if(caml_call2(Core_Int[101][1], length$0, 0))
        return caml_call2(Core_Int[101][4], length$0, 0)
                ? process_data(pos$0, data, length$0, queue)
                : set_buffer_and_process_queue
                  (Async_rpc_kernel_Transport[1][1], pos$0, 0, queue, data);
       throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
      }
      if(typeof continue_or_wait === "number")
       var _ag_ = Async_kernel_Deferred[18];
      else{
       if(0 === continue_or_wait[0])
        throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
       var d = continue_or_wait[1], _ag_ = d;
      }
      return caml_call2(Async_kernel[22][2], _ag_, _af_);
     }
     function process_data(pos, data, length, queue){
      return caml_trampoline(process_data$0(0, pos, data, length, queue));
     }
     function set_buffer(pos, length, data){
      if(caml_call2(Core_Int[101][3], length, 0))
       return caml_call1(Core_Bigbuffer[13], buffer);
      var data$0 = caml_call3(Core_Bigstring[25], data, pos, length);
      caml_call1(Core_Bigbuffer[13], buffer);
      return caml_call2(Core_Bigbuffer[23], buffer, data$0);
     }
     function set_buffer_and_process_queue$0
     (counter, need, pos, length, queue, data){
      set_buffer(pos, length, data);
      if(counter >= 50)
       return caml_trampoline_return(process_queue$0, [0, need, queue]);
      var counter$0 = counter + 1 | 0;
      return process_queue$0(counter$0, need, queue);
     }
     function set_buffer_and_process_queue(need, pos, length, queue, data){
      return caml_trampoline
              (set_buffer_and_process_queue$0
                (0, need, pos, length, queue, data));
     }
     function wait_for_read(need){
      return pipe_read
              (t[1],
               function(param){
                if(typeof param === "number")
                 return caml_call1(Async_kernel[19], _f_);
                var queue = param[2], _ad_ = process_queue(need, queue);
                return caml_call2
                        (Async_kernel[20], _ad_, end_of_batch_and_continue);
               });
     }
     function end_of_batch_and_continue(next){
      caml_call1(on_end_of_batch, 0);
      if(0 === next[0]){
       var result = next[1];
       return caml_call1(Async_kernel[19], [0, result]);
      }
      var need = next[1];
      return wait_for_read(need);
     }
     var
      need = Async_rpc_kernel_Transport[1][1],
      length = caml_call1(Core_Bigbuffer[12], buffer);
     if(caml_call2(Core_Int[90], length, need)) return wait_for_read(need);
     var
      data = caml_call1(Core_Bigbuffer[22], buffer),
      _ac_ = process_data(0, data, length, caml_call2(Core_Queue[62], 0, 0));
     return caml_call2(Async_kernel[20], _ac_, end_of_batch_and_continue);
    }
    var of_bigstring = Data[5], For_testing = [0, of_bigstring];
    return [0,
            sexp_of_t,
            close,
            is_closed,
            bytes_read,
            read_forever,
            For_testing];
   }
   function Pipe_writer(Data){
    function sexp_of_t(x_019){
     var
      of_a_011 = Data[1],
      monitor_015 = x_019[2],
      pipe_013 = x_019[1],
      bytes_written_017 = x_019[3],
      arg_018 = caml_call1(Core_Int63[100], bytes_written_017),
      bnds_012 = [0, [1, [0, _g_, [0, arg_018, 0]]], 0],
      arg_016 = caml_call1(Async_kernel_Monitor[1], monitor_015),
      bnds_012$0 = [0, [1, [0, _h_, [0, arg_016, 0]]], bnds_012],
      arg_014 = caml_call2(Async_kernel_Pipe[3][1], of_a_011, pipe_013),
      bnds_012$1 = [0, [1, [0, _i_, [0, arg_014, 0]]], bnds_012$0];
     return [1, bnds_012$1];
    }
    function close(t){
     caml_call1(Async_kernel_Pipe[15], t[1]);
     return Async_kernel_Deferred[18];
    }
    function is_closed(t){return caml_call1(Async_kernel_Pipe[17], t[1]);}
    function monitor(t){return t[2];}
    function bytes_to_write(param){return 0;}
    function bytes_written(t){return t[3];}
    function stopped(t){return caml_call1(Async_kernel_Pipe[18], t[1]);}
    function flushed(param){return Async_kernel_Deferred[18];}
    function incr_bytes_written(t, num_bytes){
     var _ab_ = caml_call1(Core_Int63[70], num_bytes);
     t[3] = caml_call2(Core_Int63[17], t[3], _ab_);
    }
    function send_bin_prot(t, writer, x){
     if(caml_call1(Async_kernel_Pipe[17], t[1])) return 0;
     var
      buf = caml_call3(Bin_prot_Utils[4], _j_, writer, x),
      data = caml_call1(Data[5], buf);
     incr_bytes_written(t, caml_call1(Data[2], data));
     caml_call2(Async_kernel_Pipe[28], t[1], data);
     return [0, 0];
    }
    function send_bin_prot_and_bigstring(t, writer, x, buf, pos, payload_size){
     if(caml_call1(Async_kernel_Pipe[17], t[1])) return 0;
     var
      data_size = caml_call1(writer[1], x),
      data =
        caml_call2
         (Core_Bigstring[117],
          0,
          (data_size + Async_rpc_kernel_Transport[1][1] | 0) + payload_size
          | 0);
     caml_call3
      (Async_rpc_kernel_Transport[1][3],
       data,
       0,
       data_size + payload_size | 0);
     var
      dst_pos =
        caml_call3(writer[2], data, Async_rpc_kernel_Transport[1][1], x);
     caml_call5(Core_Bigstring[22], buf, pos, data, dst_pos, payload_size);
     var data$0 = caml_call1(Data[5], data);
     incr_bytes_written(t, caml_call1(Data[2], data$0));
     caml_call2(Async_kernel_Pipe[28], t[1], data$0);
     return [0, 0];
    }
    function send_bin_prot_and_bigstring_no(t, writer, x, buf, pos, len){
     var r = send_bin_prot_and_bigstring(t, writer, x, buf, pos, len);
     if(typeof r !== "number" && 0 === r[0]){
      var x$0 = Async_kernel_Deferred[18];
      return [0, x$0];
     }
     return r;
    }
    return [0,
            sexp_of_t,
            close,
            is_closed,
            monitor,
            bytes_to_write,
            bytes_written,
            stopped,
            flushed,
            flushed,
            ,
            ,
            ,
            send_bin_prot,
            send_bin_prot_and_bigstring,
            send_bin_prot_and_bigstring_no];
   }
   var
    sexp_of_t = Core_Bigstring[6],
    length = Core_Bigstring[21],
    add_to_bigbuffer = Core_Bigbuffer[23];
   function to_bigstring(x){return x;}
   function of_bigstring(x){return x;}
   var
    Bigstring_data =
      [0, sexp_of_t, length, add_to_bigbuffer, to_bigstring, of_bigstring],
    sexp_of_t$0 = Core_String[128],
    length$0 = runtime.caml_ml_string_length,
    add_to_bigbuffer$0 = Core_Bigbuffer[16];
   function to_bigstring$0(x){return caml_call3(Core_Bigstring[14], 0, 0, x);}
   function of_bigstring$0(x){return caml_call3(Core_Bigstring[16], 0, 0, x);}
   var
    String_data =
      [0,
       sexp_of_t$0,
       length$0,
       add_to_bigbuffer$0,
       to_bigstring$0,
       of_bigstring$0],
    Bigstring_pipe_reader = Pipe_reader(Bigstring_data),
    Bigstring_pipe_writer = Pipe_writer(Bigstring_data),
    String_pipe_reader = Pipe_reader(String_data),
    String_pipe_writer = Pipe_writer(String_data),
    Kind = [0, 0, 1],
    cst_FOOBAR123 = cst_FOOBAR123$1,
    cst_src_pipe_transport_ml = cst_src_pipe_transport_ml$16,
    cst_run_test_write_1_msg_1_chu =
      "<<run_test write_1_msg_1_chunk (verify 1 1)>>",
    cst_src_pipe_transport_ml$0 = cst_src_pipe_transport_ml$16,
    cst_run_test_f_verify_2_1 = "<<run_test f (verify 2 1)>>",
    cst_src_pipe_transport_ml$1 = cst_src_pipe_transport_ml$16,
    cst_run_test_write_1_msg_3_chu =
      "<<run_test write_1_msg_3_chunk (verify 1 3)>>",
    cst_src_pipe_transport_ml$2 = cst_src_pipe_transport_ml$16,
    cst_run_test_write_2_msg_1_chu =
      "<<run_test write_2_msg_1_chunk (verify 2 1)>>",
    cst_src_pipe_transport_ml$3 = cst_src_pipe_transport_ml$16,
    cst_run_test_write_2_msg_one_b =
      "<<run_test write_2_msg_one_byte_at_a_time_34_ch[...]>>",
    cst_src_pipe_transport_ml$4 = cst_src_pipe_transport_ml$16,
    cst_run_test_f_verify_7_40 = "<<run_test f (verify 7 40)>>",
    _k_ = [0, 0],
    _l_ = [0, cst_src_pipe_transport_ml$16, 449, 7],
    _m_ = [0, cst_src_pipe_transport_ml$16, 442, 7],
    cst_src_pipe_transport_ml$5 = cst_src_pipe_transport_ml$16,
    cst_can_call_read_forever_mult = "can call read_forever multiple times";
   function create$0(kind, reader$0, writer$0){
    var
     ___ = Core_Int63[14],
     writer =
       [0, writer$0, caml_call4(Async_kernel_Monitor[3], 0, 0, 0, 0), ___],
     _$_ =
       kind
        ? caml_call2
          (Async_rpc_kernel_Transport[3][13],
           [0,
            Bigstring_pipe_writer[1],
            Bigstring_pipe_writer[2],
            Bigstring_pipe_writer[3],
            Bigstring_pipe_writer[4],
            Bigstring_pipe_writer[5],
            Bigstring_pipe_writer[6],
            Bigstring_pipe_writer[7],
            Bigstring_pipe_writer[8],
            Bigstring_pipe_writer[9],
            Bigstring_pipe_writer[13],
            Bigstring_pipe_writer[14],
            Bigstring_pipe_writer[15]],
           writer)
        : caml_call2
          (Async_rpc_kernel_Transport[3][13],
           [0,
            String_pipe_writer[1],
            String_pipe_writer[2],
            String_pipe_writer[3],
            String_pipe_writer[4],
            String_pipe_writer[5],
            String_pipe_writer[6],
            String_pipe_writer[7],
            String_pipe_writer[8],
            String_pipe_writer[9],
            String_pipe_writer[13],
            String_pipe_writer[14],
            String_pipe_writer[15]],
           writer),
     reader = create(reader$0),
     _aa_ =
       kind
        ? caml_call2
          (Async_rpc_kernel_Transport[2][6],
           [0,
            Bigstring_pipe_reader[1],
            Bigstring_pipe_reader[2],
            Bigstring_pipe_reader[3],
            Bigstring_pipe_reader[4],
            Bigstring_pipe_reader[5]],
           reader)
        : caml_call2
          (Async_rpc_kernel_Transport[2][6],
           [0,
            String_pipe_reader[1],
            String_pipe_reader[2],
            String_pipe_reader[3],
            String_pipe_reader[4],
            String_pipe_reader[5]],
           reader);
    return [0, _aa_, _$_];
   }
   function Test_reader(Transport_reader){
    var default_message = caml_call3(Core_Bigstring[14], 0, 0, cst_FOOBAR123);
    function create_message_buf(message){
     var
      message_len = caml_call1(Core_Bigstring[21], message),
      buf =
        caml_call2
         (Core_Bigstring[117],
          0,
          Async_rpc_kernel_Transport[1][1] + message_len | 0);
     caml_call3(Async_rpc_kernel_Transport[1][3], buf, 0, message_len);
     caml_call5
      (Core_Bigstring[22],
       message,
       0,
       buf,
       Async_rpc_kernel_Transport[1][1],
       message_len);
     return buf;
    }
    function on_message(opt, on_message_count, buffer, pos$0, len){
     var message = opt ? opt[1] : default_message;
     on_message_count[1] = on_message_count[1] + 1 | 0;
     var
      got = caml_call3(Core_Bigstring[25], buffer, pos$0, len),
      sexpifier = Core_Bigstring[6];
     function comparator(a_020, b_021){
      return caml_call2(Core_Bigstring[4], a_020, b_021);
     }
     caml_call8
      (Ppx_assert_lib_Runtime[3],
       pos,
       sexpifier,
       comparator,
       0,
       0,
       0,
       message,
       got);
     return 0;
    }
    function on_end_of_batch(on_end_of_batch_count, param){on_end_of_batch_count[1]++; return 0;
    }
    function wait(param){
     return caml_call1(Async_kernel_Async_kernel_sche[33][1], 0);
    }
    function run_test(run, verify){
     var
      match = caml_call3(Async_kernel_Pipe[7], 0, 0, 0),
      writer = match[2],
      reader = match[1],
      reader$0 = create(reader),
      on_message_count = [0, 0],
      on_end_of_batch_count = [0, 0],
      _U_ = 0;
     function on_message$0(_X_, _Y_, _Z_){
      return on_message(_U_, on_message_count, _X_, _Y_, _Z_);
     }
     function on_end_of_batch$0(_W_){
      return on_end_of_batch(on_end_of_batch_count, _W_);
     }
     caml_call3
      (Transport_reader[6], reader$0, on_message$0, on_end_of_batch$0);
     wait(0);
     caml_call1
      (run,
       function(x){
        var _V_ = caml_call1(Transport_reader[1][1], x);
        return caml_call2(Async_kernel_Pipe[28], writer, _V_);
       });
     wait(0);
     return caml_call2(verify, on_message_count, on_end_of_batch_count);
    }
    function verify
    (on_message_count, on_end_of_batch_count, message_count, batch_count){
     var got = on_message_count[1], sexpifier = Core[363];
     function comparator(a_022, b_023){
      return caml_call2(Core[358], a_022, b_023);
     }
     caml_call8
      (Ppx_assert_lib_Runtime[3],
       pos$0,
       sexpifier,
       comparator,
       0,
       0,
       0,
       message_count,
       got);
     var got$0 = on_end_of_batch_count[1], sexpifier$0 = Core[363];
     function comparator$0(a_024, b_025){
      return caml_call2(Core[358], a_024, b_025);
     }
     return caml_call8
             (Ppx_assert_lib_Runtime[3],
              pos$1,
              sexpifier$0,
              comparator$0,
              0,
              0,
              0,
              batch_count,
              got$0);
    }
    function write_1_msg_1_chunk(write){
     return caml_call1(write, create_message_buf(default_message));
    }
    function write_1_msg_3_chunk(write){
     var
      buf = create_message_buf(caml_call3(Core_Bigstring[14], 0, 0, cst)),
      _T_ = caml_call1(Core_Bigstring[21], default_message);
     caml_call3(Async_rpc_kernel_Transport[1][3], buf, 0, _T_);
     caml_call1(write, buf);
     wait(0);
     var
      msg_len = caml_call1(Core_Bigstring[21], default_message),
      split_at = msg_len / 2 | 0,
      part1 = caml_call3(Core_Bigstring[25], default_message, 0, split_at),
      part2 =
        caml_call3
         (Core_Bigstring[25],
          default_message,
          split_at,
          msg_len - split_at | 0);
     caml_call1(write, part1);
     wait(0);
     return caml_call1(write, part2);
    }
    function write_2_msg_1_chunk(write){
     var
      one_msg = create_message_buf(default_message),
      two_msg =
        caml_call2(Core_Bigstring[18], 0, [0, one_msg, [0, one_msg, 0]]);
     return caml_call1(write, two_msg);
    }
    function write_2_msg_one_byte_at_a_time(write){
     var
      one_msg = create_message_buf(default_message),
      two_msg =
        caml_call2(Core_Bigstring[18], 0, [0, one_msg, [0, one_msg, 0]]),
      _R_ = caml_call1(Core_Bigstring[21], two_msg) - 1 | 0,
      _Q_ = 0;
     if(_R_ >= 0){
      var i = _Q_;
      for(;;){
       caml_call1(write, caml_call3(Core_Bigstring[25], two_msg, i, 1));
       wait(0);
       var _S_ = i + 1 | 0;
       if(_R_ === i) break;
       i = _S_;
      }
     }
     return 0;
    }
    caml_call8
     (Ppx_inline_test_lib[8],
      Inline_test_config,
      cst_run_test_write_1_msg_1_chu,
      0,
      cst_src_pipe_transport_ml,
      393,
      2,
      61,
      function(param){
       run_test
        (write_1_msg_1_chunk,
         function(_O_){return function(_P_){return verify(_O_, _P_, 1, 1);};});
       return 0;
      });
    caml_call8
     (Ppx_inline_test_lib[8],
      Inline_test_config,
      cst_run_test_f_verify_2_1,
      0,
      cst_src_pipe_transport_ml$0,
      395,
      2,
      137,
      function(param){
       function f(write){
        write_1_msg_1_chunk(write);
        return write_1_msg_1_chunk(write);
       }
       run_test
        (f,
         function(_M_){return function(_N_){return verify(_M_, _N_, 2, 1);};});
       return 0;
      });
    caml_call8
     (Ppx_inline_test_lib[8],
      Inline_test_config,
      cst_run_test_write_1_msg_3_chu,
      0,
      cst_src_pipe_transport_ml$1,
      403,
      2,
      61,
      function(param){
       run_test
        (write_1_msg_3_chunk,
         function(_K_){return function(_L_){return verify(_K_, _L_, 1, 3);};});
       return 0;
      });
    caml_call8
     (Ppx_inline_test_lib[8],
      Inline_test_config,
      cst_run_test_write_2_msg_1_chu,
      0,
      cst_src_pipe_transport_ml$2,
      404,
      2,
      61,
      function(param){
       run_test
        (write_2_msg_1_chunk,
         function(_I_){return function(_J_){return verify(_I_, _J_, 2, 1);};});
       return 0;
      });
    caml_call8
     (Ppx_inline_test_lib[8],
      Inline_test_config,
      cst_run_test_write_2_msg_one_b,
      0,
      cst_src_pipe_transport_ml$3,
      405,
      2,
      82,
      function(param){
       run_test
        (write_2_msg_one_byte_at_a_time,
         function(_G_){return function(_H_){return verify(_G_, _H_, 2, 34);};});
       return 0;
      });
    caml_call8
     (Ppx_inline_test_lib[8],
      Inline_test_config,
      cst_run_test_f_verify_7_40,
      0,
      cst_src_pipe_transport_ml$4,
      407,
      2,
      317,
      function(param){
       function f(write){
        caml_call1(write, create_message_buf(default_message));
        wait(0);
        write_1_msg_3_chunk(write);
        wait(0);
        write_2_msg_1_chunk(write);
        wait(0);
        write_2_msg_one_byte_at_a_time(write);
        wait(0);
        return caml_call1(write, create_message_buf(default_message));
       }
       run_test
        (f,
         function(_E_){return function(_F_){return verify(_E_, _F_, 7, 40);};});
       return 0;
      });
    caml_call8
     (Ppx_inline_test_lib[8],
      Inline_test_config,
      cst_can_call_read_forever_mult,
      0,
      cst_src_pipe_transport_ml$5,
      422,
      2,
      1007,
      function(param){
       var
        match = caml_call3(Async_kernel_Pipe[7], 0, 0, 0),
        writer = match[2],
        reader = match[1],
        reader$0 = create(reader);
       function on_end_of_batch(param){return 0;}
       var num = [0, 0];
       function stop_after_on_message(buffer, pos, len){
        num[1]++;
        var
         got = caml_call3(Core_Bigstring[25], buffer, pos, len),
         sexpifier = Core_Bigstring[6];
        function comparator(a_026, b_027){
         return caml_call2(Core_Bigstring[4], a_026, b_027);
        }
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$2,
          sexpifier,
          comparator,
          0,
          0,
          0,
          default_message,
          got);
        return _k_;
       }
       var
        one_msg = create_message_buf(default_message),
        two_msg =
          caml_call2(Core_Bigstring[18], 0, [0, one_msg, [0, one_msg, 0]]),
        _A_ = caml_call1(Transport_reader[1][1], two_msg);
       caml_call2(Async_kernel_Pipe[28], writer, _A_);
       caml_call1(Async_kernel_Pipe[15], writer);
       var
        _B_ =
          caml_call3
           (Transport_reader[6],
            reader$0,
            stop_after_on_message,
            on_end_of_batch),
        _C_ =
          caml_call2
           (Async_kernel[22][2],
            _B_,
            function(x){
             if(! caml_call1(Core_Result[30], x))
              throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
             var
              _D_ =
                caml_call3
                 (Transport_reader[6],
                  reader$0,
                  stop_after_on_message,
                  on_end_of_batch);
             return caml_call2
                     (Async_kernel[22][2],
                      _D_,
                      function(x){
                       if(caml_call1(Core_Result[30], x))
                        return Async_kernel_Deferred[18];
                       throw caml_maybe_attach_backtrace
                              ([0, Assert_failure, _l_], 1);
                      });
            });
       caml_call1(Async_kernel[6], _C_);
       wait(0);
       var got = num[1], sexpifier = Core_Int[82];
       function comparator(a_030, b_031){
        return caml_call2(Core_Int[93], a_030, b_031);
       }
       caml_call8
        (Ppx_assert_lib_Runtime[3],
         pos$3,
         sexpifier,
         comparator,
         0,
         0,
         0,
         2,
         got);
       return 0;
      });
   }
   caml_call8
    (Ppx_inline_test_lib[9],
     Inline_test_config,
     cst_Test_reader_string$0,
     0,
     cst_src_pipe_transport_ml$16,
     456,
     0,
     79,
     function(param){
      Test_reader
       ([0,
         String_pipe_reader[6],
         String_pipe_reader[1],
         String_pipe_reader[2],
         String_pipe_reader[3],
         String_pipe_reader[4],
         String_pipe_reader[5]]);
      return 0;
     });
   caml_call8
    (Ppx_inline_test_lib[9],
     Inline_test_config,
     cst_Test_reader_bigstring$0,
     0,
     cst_src_pipe_transport_ml$16,
     457,
     0,
     85,
     function(param){
      Test_reader
       ([0,
         Bigstring_pipe_reader[6],
         Bigstring_pipe_reader[1],
         Bigstring_pipe_reader[2],
         Bigstring_pipe_reader[3],
         Bigstring_pipe_reader[4],
         Bigstring_pipe_reader[5]]);
      return 0;
     });
   var
    cst_FOOBAR123$0 = cst_FOOBAR123$1,
    cst_src_pipe_transport_ml_Benc = cst_src_pipe_transport_ml_Benc$5,
    cst_src_pipe_transport_ml$6 = cst_src_pipe_transport_ml$16,
    cst_run_test_write_1_msg_1_chu$0 = "run_test write_1_msg_1_chunk",
    cst_write_1_msg_1_chunk = "write_1_msg_1_chunk",
    cst_src_pipe_transport_ml_Benc$0 = cst_src_pipe_transport_ml_Benc$5,
    cst_src_pipe_transport_ml$7 = cst_src_pipe_transport_ml$16,
    cst_let_f_write_write_1_msg_1_ =
      "let f write = write_1_msg_1_chunk write; write_1_msg_1_chunk write in\nrun_test f",
    cst_write_2_msg_1_chunk = cst_write_2_msg_1_chunk$1,
    cst_src_pipe_transport_ml_Benc$1 = cst_src_pipe_transport_ml_Benc$5,
    cst_src_pipe_transport_ml$8 = cst_src_pipe_transport_ml$16,
    cst_run_test_write_1_msg_3_chu$0 = "run_test write_1_msg_3_chunk",
    cst_write_1_msg_3_chunk = "write_1_msg_3_chunk",
    cst_src_pipe_transport_ml_Benc$2 = cst_src_pipe_transport_ml_Benc$5,
    cst_src_pipe_transport_ml$9 = cst_src_pipe_transport_ml$16,
    cst_run_test_write_2_msg_1_chu$0 = "run_test write_2_msg_1_chunk",
    cst_write_2_msg_1_chunk$0 = cst_write_2_msg_1_chunk$1,
    cst_src_pipe_transport_ml_Benc$3 = cst_src_pipe_transport_ml_Benc$5,
    cst_src_pipe_transport_ml$10 = cst_src_pipe_transport_ml$16,
    cst_run_test_write_2_msg_one_b$0 =
      "run_test write_2_msg_one_byte_at_a_time_34_chunk",
    cst_write_2_msg_one_byte = "write_2_msg_one_byte",
    cst_src_pipe_transport_ml_Benc$4 = cst_src_pipe_transport_ml_Benc$5,
    cst_src_pipe_transport_ml$11 = cst_src_pipe_transport_ml$16,
    cst_let_f_write_write_create_m =
      "let f write =\n  write (create_message ());\n  write_1_msg_3_chunk write;\n  write_2_msg_1_chunk write;\n  write_2_msg_one_byte_at_a_time_34_chunk write;\n  write (create_message ()) in\nrun_test f",
    cst_multi = "multi";
   function Bench_reader(Transport_reader){
    var
     default_message = caml_call3(Core_Bigstring[14], 0, 0, cst_FOOBAR123$0);
    function create_message_buf(message){
     var
      message_len = caml_call1(Core_Bigstring[21], message),
      buf =
        caml_call2
         (Core_Bigstring[117],
          0,
          Async_rpc_kernel_Transport[1][1] + message_len | 0);
     caml_call3(Async_rpc_kernel_Transport[1][3], buf, 0, message_len);
     caml_call5
      (Core_Bigstring[22],
       message,
       0,
       buf,
       Async_rpc_kernel_Transport[1][1],
       message_len);
     return buf;
    }
    var
     one_message = create_message_buf(default_message),
     two_messages =
       caml_call2
        (Core_Bigstring[18], 0, [0, one_message, [0, one_message, 0]]),
     msg_len = caml_call1(Core_Bigstring[21], one_message),
     split_at = msg_len / 2 | 0,
     one_message_p1 = caml_call3(Core_Bigstring[25], one_message, 0, split_at),
     one_message_p2 =
       caml_call3
        (Core_Bigstring[25], one_message, split_at, msg_len - split_at | 0);
    function on_message(buffer, _z_, param){return 0;}
    function on_end_of_batch(param){return 0;}
    function wait(param){
     return caml_call1(Async_kernel_Async_kernel_sche[33][1], 0);
    }
    function run_test(run){
     var
      match = caml_call3(Async_kernel_Pipe[7], 0, 0, 0),
      writer = match[2],
      reader = match[1],
      reader$0 = create(reader);
     caml_call3(Transport_reader[6], reader$0, on_message, on_end_of_batch);
     wait(0);
     var for$0 = 0;
     for(;;){
      caml_call1
       (run,
        function(x){
         var _y_ = caml_call1(Transport_reader[1][1], x);
         return caml_call2(Async_kernel_Pipe[28], writer, _y_);
        });
      var _x_ = for$0 + 1 | 0;
      if(100 === for$0) return wait(0);
      for$0 = _x_;
     }
    }
    function write_1_msg_1_chunk(write){
     return caml_call1(write, one_message);
    }
    var buf = create_message_buf(caml_call3(Core_Bigstring[14], 0, 0, cst$0));
    function write_1_msg_3_chunk(write){
     var _w_ = caml_call1(Core_Bigstring[21], one_message);
     caml_call3(Async_rpc_kernel_Transport[1][3], buf, 0, _w_);
     caml_call1(write, buf);
     caml_call1(write, one_message_p1);
     return caml_call1(write, one_message_p2);
    }
    function write_2_msg_1_chunk(write){
     return caml_call1(write, two_messages);
    }
    function write_2_msg_one_byte_at_a_time(write){
     var _u_ = caml_call1(Core_Bigstring[21], two_messages) - 1 | 0, _t_ = 0;
     if(_u_ >= 0){
      var i = _t_;
      for(;;){
       caml_call1(write, caml_call3(Core_Bigstring[25], two_messages, i, 1));
       var _v_ = i + 1 | 0;
       if(_u_ === i) break;
       i = _v_;
      }
     }
     return 0;
    }
    if(Ppx_bench_lib_Benchmark_accumu[3]){
     var f = function(_s_, param){return run_test(write_1_msg_1_chunk);};
     caml_call8
      (Ppx_bench_lib_Benchmark_accumu[5],
       cst_write_1_msg_1_chunk,
       cst_run_test_write_1_msg_1_chu$0,
       cst_src_pipe_transport_ml$6,
       cst_src_pipe_transport_ml_Benc,
       527,
       2,
       64,
       [0, f]);
    }
    if(Ppx_bench_lib_Benchmark_accumu[3]){
     var
      f$0 =
        function(_r_, param){
         function f(write){
          caml_call1(write, one_message);
          return caml_call1(write, one_message);
         }
         return run_test(f);
        };
     caml_call8
      (Ppx_bench_lib_Benchmark_accumu[5],
       cst_write_2_msg_1_chunk,
       cst_let_f_write_write_1_msg_1_,
       cst_src_pipe_transport_ml$7,
       cst_src_pipe_transport_ml_Benc$0,
       529,
       2,
       140,
       [0, f$0]);
    }
    if(Ppx_bench_lib_Benchmark_accumu[3]){
     var f$1 = function(_q_, param){return run_test(write_1_msg_3_chunk);};
     caml_call8
      (Ppx_bench_lib_Benchmark_accumu[5],
       cst_write_1_msg_3_chunk,
       cst_run_test_write_1_msg_3_chu$0,
       cst_src_pipe_transport_ml$8,
       cst_src_pipe_transport_ml_Benc$1,
       537,
       2,
       64,
       [0, f$1]);
    }
    if(Ppx_bench_lib_Benchmark_accumu[3]){
     var f$2 = function(_p_, param){return run_test(write_2_msg_1_chunk);};
     caml_call8
      (Ppx_bench_lib_Benchmark_accumu[5],
       cst_write_2_msg_1_chunk$0,
       cst_run_test_write_2_msg_1_chu$0,
       cst_src_pipe_transport_ml$9,
       cst_src_pipe_transport_ml_Benc$2,
       538,
       2,
       64,
       [0, f$2]);
    }
    if(Ppx_bench_lib_Benchmark_accumu[3]){
     var
      f$3 =
        function(_o_, param){return run_test(write_2_msg_one_byte_at_a_time);};
     caml_call8
      (Ppx_bench_lib_Benchmark_accumu[5],
       cst_write_2_msg_one_byte,
       cst_run_test_write_2_msg_one_b$0,
       cst_src_pipe_transport_ml$10,
       cst_src_pipe_transport_ml_Benc$3,
       539,
       2,
       85,
       [0, f$3]);
    }
    if(Ppx_bench_lib_Benchmark_accumu[3]){
     var
      f$4 =
        function(_n_, param){
         function f(write){
          caml_call1(write, create_message_buf(default_message));
          write_1_msg_3_chunk(write);
          caml_call1(write, two_messages);
          write_2_msg_one_byte_at_a_time(write);
          return caml_call1(write, create_message_buf(default_message));
         }
         return run_test(f);
        };
     caml_call8
      (Ppx_bench_lib_Benchmark_accumu[5],
       cst_multi,
       cst_let_f_write_write_create_m,
       cst_src_pipe_transport_ml$11,
       cst_src_pipe_transport_ml_Benc$4,
       541,
       2,
       245,
       [0, f$4]);
    }
   }
   var
    cst_src_pipe_transport_ml$12 = cst_src_pipe_transport_ml$16,
    cst_src_pipe_transport_ml$13 = cst_src_pipe_transport_ml$16,
    cst_Test_reader_string = cst_Test_reader_string$0,
    cst_src_pipe_transport_ml$14 = cst_src_pipe_transport_ml$16,
    cst_src_pipe_transport_ml$15 = cst_src_pipe_transport_ml$16,
    cst_Test_reader_bigstring = cst_Test_reader_bigstring$0,
    cst_async_rpc_kernel = cst_async_rpc_kernel$0,
    cst_Async_rpc_kernel_Pipe_tran = cst_Async_rpc_kernel_Pipe_tran$0;
   if(Ppx_bench_lib_Benchmark_accumu[3])
    caml_call8
     (Ppx_bench_lib_Benchmark_accumu[6],
      cst_Test_reader_string,
      cst$1,
      cst_src_pipe_transport_ml$13,
      cst_src_pipe_transport_ml$12,
      553,
      0,
      81,
      function(param){
       Bench_reader
        ([0,
          String_pipe_reader[6],
          String_pipe_reader[1],
          String_pipe_reader[2],
          String_pipe_reader[3],
          String_pipe_reader[4],
          String_pipe_reader[5]]);
       return 0;
      });
   if(Ppx_bench_lib_Benchmark_accumu[3])
    caml_call8
     (Ppx_bench_lib_Benchmark_accumu[6],
      cst_Test_reader_bigstring,
      cst$2,
      cst_src_pipe_transport_ml$15,
      cst_src_pipe_transport_ml$14,
      554,
      0,
      87,
      function(param){
       Bench_reader
        ([0,
          Bigstring_pipe_reader[6],
          Bigstring_pipe_reader[1],
          Bigstring_pipe_reader[2],
          Bigstring_pipe_reader[3],
          Bigstring_pipe_reader[4],
          Bigstring_pipe_reader[5]]);
       return 0;
      });
   caml_call1(Ppx_inline_test_lib[6], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Pipe_tran);
   var Async_rpc_kernel_Pipe_transpor = [0, Kind, create$0];
   runtime.caml_register_global
    (101, Async_rpc_kernel_Pipe_transpor, cst_Async_rpc_kernel_Pipe_tran$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel__Persistent_connection
//# unitInfo: Requires: Async_rpc_kernel__Rpc, Async_rpc_kernel__Versioned_rpc, Expect_test_collector, Persistent_connection_kernel, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel_Persisten = "Async_rpc_kernel__Persistent_connection",
    cst_async_rpc_kernel = "async_rpc_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Persistent_connection_kernel = global_data.Persistent_connection_kernel,
    Async_rpc_kernel_Versioned_rpc =
      global_data.Async_rpc_kernel__Versioned_rpc;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel_Persisten);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][1], "src/persistent_connection.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_async_rpc_kernel, "persistent_connection.ml");
   var
    Make = Persistent_connection_kernel[1],
    rpc_connection = Async_rpc_kernel_Versioned_rpc[2][3];
   function close(t){
    var _c_ = caml_call1(rpc_connection, t);
    return caml_call3(Async_rpc_kernel_Rpc[5][10], 0, 0, _c_);
   }
   function is_closed(t){
    var _b_ = caml_call1(rpc_connection, t);
    return caml_call1(Async_rpc_kernel_Rpc[5][13], _b_);
   }
   function close_finished(t){
    var _a_ = caml_call1(rpc_connection, t);
    return caml_call1(Async_rpc_kernel_Rpc[5][11], _a_);
   }
   var
    Versioned_rpc = caml_call1(Make, [0, close, is_closed, close_finished]);
   function close$0(t){
    return caml_call3(Async_rpc_kernel_Rpc[5][10], 0, 0, t);
   }
   function is_closed$0(t){return caml_call1(Async_rpc_kernel_Rpc[5][13], t);}
   function close_finished$0(t){
    return caml_call1(Async_rpc_kernel_Rpc[5][11], t);
   }
   var Rpc = caml_call1(Make, [0, close$0, is_closed$0, close_finished$0]);
   caml_call1(Ppx_inline_test_lib[6], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel_Persisten);
   var Async_rpc_kernel_Persistent_co = [0, Rpc, Versioned_rpc];
   runtime.caml_register_global
    (14, Async_rpc_kernel_Persistent_co, cst_Async_rpc_kernel_Persisten);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_rpc_kernel
//# unitInfo: Requires: Async_rpc_kernel__Connection, Async_rpc_kernel__Rpc_metadata, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_rpc_kernel = "Async_rpc_kernel",
    cst_async_rpc_kernel = "async_rpc_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_rpc_kernel_Rpc_metadata = global_data.Async_rpc_kernel__Rpc_metadata,
    Async_rpc_kernel_Connection = global_data.Async_rpc_kernel__Connection;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_rpc_kernel);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][1], "src/async_rpc_kernel.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_async_rpc_kernel, "async_rpc_kernel.ml");
   var
    Rpc_metadata =
      [0, Async_rpc_kernel_Rpc_metadata[1], Async_rpc_kernel_Rpc_metadata[2]],
    Async_rpc_kernel_stable = [0],
    default_handshake_timeout = Async_rpc_kernel_Connection[23],
    Async_rpc_kernel_private = [0, default_handshake_timeout];
   caml_call1(Ppx_inline_test_lib[6], cst_async_rpc_kernel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_rpc_kernel);
   var
    Async_rpc_kernel =
      [0, Rpc_metadata, Async_rpc_kernel_stable, Async_rpc_kernel_private];
   runtime.caml_register_global(13, Async_rpc_kernel, cst_Async_rpc_kernel);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
