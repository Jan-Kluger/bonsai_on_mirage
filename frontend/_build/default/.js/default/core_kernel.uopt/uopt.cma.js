// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Uopt
//# unitInfo: Requires: Base, Expect_test_collector, Expect_test_common__File, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Uopt = "Uopt",
    cst_Uopt_none$0 = "Uopt.none",
    cst_uopt = "uopt",
    cst_uopt_src_uopt_ml$1 = "uopt/src/uopt.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    none = cst_Uopt_none$0,
    cst = "",
    Base = global_data.Base,
    Expect_test_config = global_data.Expect_test_config,
    Expect_test_collector = global_data.Expect_test_collector,
    Inline_test_config = global_data.Inline_test_config,
    Expect_test_common_File = global_data.Expect_test_common__File,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Uopt);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_uopt);
   caml_call1(Expect_test_collector[6][1], cst_uopt_src_uopt_ml$1);
   caml_call2(Ppx_inline_test_lib[5], cst_uopt, "uopt.ml");
   var
    cst_Uopt_some_Uopt_none = "Uopt.some Uopt.none",
    _a_ = [0, "None"],
    _b_ = [0, "Some"],
    cst_Uopt_value_exn = "Uopt.value_exn";
   function some(x){
    if(x === cst_Uopt_none$0) caml_call1(Base[215], cst_Uopt_some_Uopt_none);
    return x;
   }
   function unsafe_value(x){return x;}
   function is_none(t){return t === cst_Uopt_none$0 ? 1 : 0;}
   function is_some(t){return 1 - (t === cst_Uopt_none$0 ? 1 : 0);}
   function invariant(invariant_a, t){
    var _h_ = is_some(t);
    return _h_ ? caml_call1(invariant_a, t) : _h_;
   }
   function sexp_of_t(sexp_of_a, t){
    return t === cst_Uopt_none$0
            ? _a_
            : [1, [0, _b_, [0, caml_call1(sexp_of_a, t), 0]]];
   }
   function value_exn(t){
    return t === cst_Uopt_none$0
            ? caml_call1(Base[215], cst_Uopt_value_exn)
            : t;
   }
   function to_option(t){return t === cst_Uopt_none$0 ? 0 : [0, t];}
   function of_option(param){
    if(! param) return none;
    var a = param[1];
    return some(a);
   }
   var
    Optional_syntax = [0, is_none, unsafe_value],
    Optional_syntax$0 = [0, Optional_syntax],
    Optional_syntax$1 = [0, is_none, unsafe_value],
    Optional_syntax$2 = [0, Optional_syntax$1],
    Local = [0, Optional_syntax$2],
    cst_Uopt_none = cst_Uopt_none$0,
    cst_should_not_have_gotten_to_ = "should not have gotten to this point",
    _c_ = [0, "no-js", 0],
    _d_ = [0, "using the same sentinel value"],
    cst_uopt_src_uopt_ml = cst_uopt_src_uopt_ml$1,
    cst_uopt_src_uopt_ml$0 = cst_uopt_src_uopt_ml$1,
    cst_b61046faf4198a2121de82cfdd = "b61046faf4198a2121de82cfddf8e325";
   caml_call8
    (Ppx_inline_test_lib[9],
     Inline_test_config,
     cst,
     0,
     cst_uopt_src_uopt_ml$1,
     53,
     0,
     255,
     function(param){
      var
       Expect_test_collector$0 =
         caml_call1(Expect_test_collector[2], Expect_test_config),
       _e_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_uopt_src_uopt_ml$0),
          55,
          1583,
          1587,
          1788],
       _f_ =
         caml_call1
          (Expect_test_common_File[4][3], cst_b61046faf4198a2121de82cfdd);
      caml_call9
       (Expect_test_collector$0[3],
        _f_,
        _e_,
        cst_uopt_src_uopt_ml,
        _d_,
        _c_,
        0,
        0,
        Inline_test_config,
        function(param){
         try{some(cst_Uopt_none);}catch(_g_){return 0;}
         return caml_call1(Base[215], cst_should_not_have_gotten_to_);
        });
      return 0;
     });
   caml_call1(Ppx_inline_test_lib[6], cst_uopt);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Uopt);
   var
    Uopt =
      [0,
       sexp_of_t,
       invariant,
       none,
       some,
       some,
       is_none,
       is_some,
       value_exn,
       unsafe_value,
       to_option,
       of_option,
       Optional_syntax$0,
       Local];
   runtime.caml_register_global(29, Uopt, cst_Uopt);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW9wdC5jbWEuanMiLCJzZWN0aW9ucyI6W3sib2Zmc2V0Ijp7ImxpbmUiOjksImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW9wdC5jbWEuanMiLCJuYW1lcyI6WyJydW50aW1lIiwiY3N0X1VvcHQiLCJjc3RfVW9wdF9ub25lIiwiY3N0X3VvcHQiLCJjc3RfdW9wdF9zcmNfdW9wdF9tbCIsImNhbWxfY2FsbDEiLCJmIiwiYTAiLCJjYW1sX2NhbGwyIiwiYTEiLCJjYW1sX2NhbGw4IiwiYTIiLCJhMyIsImE0IiwiYTUiLCJhNiIsImE3IiwiY2FtbF9jYWxsOSIsImE4IiwiZ2xvYmFsX2RhdGEiLCJub25lIiwiY3N0IiwiQmFzZSIsIkV4cGVjdF90ZXN0X2NvbmZpZyIsIkV4cGVjdF90ZXN0X2NvbGxlY3RvciIsIklubGluZV90ZXN0X2NvbmZpZyIsIkV4cGVjdF90ZXN0X2NvbW1vbl9GaWxlIiwiUHB4X21vZHVsZV90aW1lcl9ydW50aW1lIiwiUHB4X2JlbmNoX2xpYl9CZW5jaG1hcmtfYWNjdW11IiwiUHB4X2lubGluZV90ZXN0X2xpYiIsImNzdF9Vb3B0X3NvbWVfVW9wdF9ub25lIiwiY3N0X1VvcHRfdmFsdWVfZXhuIiwic29tZSIsIngiLCJ1bnNhZmVfdmFsdWUiLCJpc19ub25lIiwidCIsImlzX3NvbWUiLCJpbnZhcmlhbnQiLCJpbnZhcmlhbnRfYSIsInNleHBfb2ZfdCIsInNleHBfb2ZfYSIsInZhbHVlX2V4biIsInRvX29wdGlvbiIsIm9mX29wdGlvbiIsInBhcmFtIiwiYSIsIk9wdGlvbmFsX3N5bnRheCIsIkxvY2FsIiwiY3N0X3Nob3VsZF9ub3RfaGF2ZV9nb3R0ZW5fdG9fIiwiY3N0X2I2MTA0NmZhZjQxOThhMjEyMWRlODJjZmRkIiwiVW9wdCJdLCJzb3VyY2VzIjpbIi9idWlsdGluL2JsYWNrYm94Lm1sIiwiL1VzZXJzL3lhbm5pY2svLm9wYW0vYm9uc2FpLWZyb250ZW5kL2xpYi9jb3JlX2tlcm5lbC91b3B0L3VvcHQubWwiXSwibWFwcGluZ3MiOiJJQUFBQSxVQUFBO0FBQUEsSUFBQUMsV0FBQTtBQUFBLElBQUFDLGtCQUFBO0FBQUEsSUFBQUMsV0FBQTtBQUFBLElBQUFDLHlCQUFBO0FBQUEsWUFBQUMsV0FBQUMsR0FBQUM7QUFBQUEsSUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFlBQUFDLFdBQUFGLEdBQUFDLElBQUFFO0FBQUFBLElBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUFBQyxXQUFBSixHQUFBQyxJQUFBRSxJQUFBRSxJQUFBQyxJQUFBQyxJQUFBQyxJQUFBQyxJQUFBQztBQUFBQSxJQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsWUFBQUMsV0FBQVgsR0FBQUMsSUFBQUUsSUFBQUUsSUFBQUMsSUFBQUMsSUFBQUMsSUFBQUMsSUFBQUMsSUFBQUU7QUFBQUEsSUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQUMsY0FBQTtBQUFBLElBQUFDLE9BQUE7QUFBQSxJQUFBQyxNQUFBO0FBQUEsSUFBQUMsT0FBQTtBQUFBLElBQUFDLHFCQUFBO0FBQUEsSUFBQUMsd0JBQUE7QUFBQSxJQUFBQyxxQkFBQTtBQUFBLElBQUFDLDBCQUFBO0FBQUEsSUFBQUMsMkJBQUE7QUFBQSxJQUFBQztBQUFBQSxNQUFBO0FBQUEsSUFBQUMsc0JBQUE7QUFBQSxHQ0FBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBQywwQkFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBQyxxQkFBQTtBQUFBLFlBQUFDLEtBQUFDO0FBQUFBLElBV0UsMEJBQTBCO0FBQUEsSUFDMUI7QUFBQSxHQUFDO0FBQUEsWUFBQUMsYUFBQUQsR0FLZ0MsU0FBa0I7QUFBQSxZQUFBRSxRQUFBQyxHQUdyQyxxQ0FBaUI7QUFBQSxZQUFBQyxRQUFBRCxHQUNGO0FBQUEsWUFBQUUsVUFBQUMsYUFBQUg7QUFBQUEsUUFBQSxNQUNFO0FBQUEsSUFBUyxhQUFrQztBQUFBO0FBQUEsWUFBQUksVUFBQUMsV0FBQUw7QUFBQUEsSUFHOUQ7QUFBQTtBQUFBLCtCQUFvQyw4QkFBcUI7QUFBQTtBQUFBLFlBQUFNLFVBQUFOO0FBQUFBLElBR3pDO0FBQUEsY0FBTTtBQUFBLGVBQTZDO0FBQUE7QUFBQSxZQUFBTyxVQUFBUCxHQUNuRCx5Q0FBcUM7QUFBQSxZQUFBUSxVQUFBQztBQUFBQSxJQUVuRCxZQUNKO0FBQUEsUUFBQUMsSUFESTtBQUFBLElBRUYsY0FBTTtBQUFBO0FBQUE7QUFBQSxJQUFBQyxrQkFqQ3BCO0FBQUEsSUFBQUEsb0JBQUE7QUFBQSxJQUFBQSxvQkFBQTtBQUFBLElBQUFBLG9CQUFBO0FBQUEsSUFBQUMsUUFBQTtBQUFBLElBQUE5QyxnQkFBQTtBQUFBLElBQUErQyxpQ0FBQTtBQUFBO0FBQUE7QUFBQSxJQUFBN0MsdUJBQUE7QUFBQSxJQUFBQSx5QkFBQTtBQUFBLElBQUE4QyxpQ0FBQTtBQUFBLEdBb0RBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGNBQUFMO0FBQUFBO0FBQUFBLE9BQUFyQjtBQUFBQSxTQUFBO0FBQUE7QUFBQSxTQUVJO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsaUJBQUFxQjtBQUFBQSxTQUNFLElBQU0sZ0NBRVc7QUFBQSxTQURHLDREQUNEO0FBQUE7QUFBQTtBQUFBLEtBRW5CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFNO0FBQUFBLE1BQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFRDNETiIsInNvdXJjZXNDb250ZW50IjpbIigqIGdlbmVyYXRlZCBjb2RlICopIiwib3BlbiBCYXNlXG5cbnR5cGUgKydhIHRcblxuKCogVGhpcyBbT2JqLm1hZ2ljXSBpcyBPSyBiZWNhdXNlIHdlIG5ldmVyIGFsbG93IHVzZXIgY29kZSBhY2Nlc3MgdG8gW25vbmVdIChleGNlcHQgdmlhXG4gICBbdW5zYWZlX3ZhbHVlXSkuICBXZSBkaXNhbGxvdyBbXyBVb3B0LnQgVW9wdC50XSwgc28gdGhlcmUgaXMgbm8gY2hhbmNlIG9mIGNvbmZ1c2luZ1xuICAgW25vbmVdIHdpdGggW3NvbWUgbm9uZV0uICBBbmQgW2Zsb2F0IFVvcHQudCBhcnJheV0gaXMgc2ltaWxhcmx5IGRpc2FsbG93ZWQuICopXG5sZXQgbm9uZSA6ICdhIHQgPSBTdGRsaWIuT2JqLm1hZ2ljIFwiVW9wdC5ub25lXCJcblxubGV0W0BpbmxpbmVdIHNvbWUgKHggOiAnYSkgPVxuICBsZXQgciA6ICdhIHQgPSBTdGRsaWIuT2JqLm1hZ2ljIHggaW5cbiAgaWYgcGh5c19lcXVhbCByIG5vbmUgdGhlbiBmYWlsd2l0aCBcIlVvcHQuc29tZSBVb3B0Lm5vbmVcIjtcbiAgclxuOztcblxubGV0IHNvbWVfbG9jYWwgPSBTdGRsaWIuT2JqLm1hZ2ljIHNvbWVcbmxldCBzb21lX2xvY2FsIDogJ2EuICgnYVtAbG9jYWxdKSAtPiAoJ2EgdFtAbG9jYWxdKSA9IHNvbWVfbG9jYWxcbmxldCB1bnNhZmVfdmFsdWUgKHggOiAnYSB0KSA6ICdhID0gU3RkbGliLk9iai5tYWdpYyB4XG5sZXQgdW5zYWZlX3ZhbHVlX2xvY2FsID0gU3RkbGliLk9iai5tYWdpYyB1bnNhZmVfdmFsdWVcbmxldCB1bnNhZmVfdmFsdWVfbG9jYWwgOiAnYS4gKCdhIHRbQGxvY2FsXSkgLT4gKCdhW0Bsb2NhbF0pID0gdW5zYWZlX3ZhbHVlX2xvY2FsXG5sZXQgaXNfbm9uZSB0ID0gcGh5c19lcXVhbCB0IG5vbmVcbmxldCBpc19zb21lIHQgPSBub3QgKGlzX25vbmUgdClcbmxldCBpbnZhcmlhbnQgaW52YXJpYW50X2EgdCA9IGlmIGlzX3NvbWUgdCB0aGVuIGludmFyaWFudF9hICh1bnNhZmVfdmFsdWUgdClcblxubGV0IHNleHBfb2ZfdCBzZXhwX29mX2EgdCA9XG4gIGlmIGlzX25vbmUgdCB0aGVuIFslc2V4cCBOb25lXSBlbHNlIFslc2V4cCBTb21lICh1bnNhZmVfdmFsdWUgdCA6IGEpXVxuOztcblxubGV0IHZhbHVlX2V4biB0ID0gaWYgaXNfbm9uZSB0IHRoZW4gZmFpbHdpdGggXCJVb3B0LnZhbHVlX2V4blwiIGVsc2UgdW5zYWZlX3ZhbHVlIHRcbmxldCB0b19vcHRpb24gdCA9IGlmIGlzX25vbmUgdCB0aGVuIE5vbmUgZWxzZSBTb21lICh1bnNhZmVfdmFsdWUgdClcblxubGV0IG9mX29wdGlvbiA9IGZ1bmN0aW9uXG4gIHwgTm9uZSAtPiBub25lXG4gIHwgU29tZSBhIC0+IHNvbWUgYVxuOztcblxubW9kdWxlIE9wdGlvbmFsX3N5bnRheCA9IHN0cnVjdFxuICBtb2R1bGUgT3B0aW9uYWxfc3ludGF4ID0gc3RydWN0XG4gICAgbGV0IGlzX25vbmUgPSBpc19ub25lXG4gICAgbGV0IHVuc2FmZV92YWx1ZSA9IHVuc2FmZV92YWx1ZVxuICBlbmRcbmVuZFxuXG5tb2R1bGUgTG9jYWwgPSBzdHJ1Y3RcbiAgbW9kdWxlIE9wdGlvbmFsX3N5bnRheCA9IHN0cnVjdFxuICAgIG1vZHVsZSBPcHRpb25hbF9zeW50YXggPSBzdHJ1Y3RcbiAgICAgIGxldCBpc19ub25lID0gaXNfbm9uZVxuICAgICAgbGV0IHVuc2FmZV92YWx1ZSA9IHVuc2FmZV92YWx1ZV9sb2NhbFxuICAgIGVuZFxuICBlbmRcbmVuZFxuXG5sZXQldGVzdF9tb2R1bGUgXyA9XG4gIChtb2R1bGUgc3RydWN0XG4gICAgbGV0JWV4cGVjdF90ZXN0IChcInVzaW5nIHRoZSBzYW1lIHNlbnRpbmVsIHZhbHVlXCIgW0B0YWdzIFwibm8tanNcIl0pID1cbiAgICAgIG1hdGNoIHNvbWUgXCJVb3B0Lm5vbmVcIiB3aXRoXG4gICAgICB8IChfIDogc3RyaW5nIHQpIC0+IGZhaWx3aXRoIFwic2hvdWxkIG5vdCBoYXZlIGdvdHRlbiB0byB0aGlzIHBvaW50XCJcbiAgICAgIHwgZXhjZXB0aW9uIF8gLT4gKClcbiAgICA7O1xuICBlbmQpXG47O1xuIl0sImlnbm9yZUxpc3QiOlswXX19XX0=
