// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Incr_dom__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Incr_dom = [0];
   runtime.caml_register_global(0, Incr_dom, "Incr_dom__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incr_dom__Component
//# unitInfo: Requires: Base__Field, Core__Option, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incr_dom_Component = "Incr_dom__Component",
    cst_incr_dom = "incr_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Option = global_data.Core__Option;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incr_dom_Component);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incr_dom);
   caml_call1(Expect_test_collector[6][1], "src/component.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_incr_dom, "component.ml");
   function extra(r){return r[5];}
   function on_display(r){return r[4];}
   function view(r){return r[3];}
   function update_visibility(r){return r[2];}
   function apply_action(r){return r[1];}
   function create_with_extra
   (apply_action, update_visibility, on_display, extra, model, view){
    var
     apply_action$0 =
       caml_call2
        (Core_Option[35],
         apply_action,
         function(_i_, _h_, param){return model;}),
     update_visibility$0 =
       caml_call2
        (Core_Option[35], update_visibility, function(param){return model;}),
     on_display$0 =
       caml_call2
        (Core_Option[35], on_display, function(_g_, param){return 0;});
    return [0, apply_action$0, update_visibility$0, view, on_display$0, extra];
   }
   function create(_c_, _b_, _a_){
    var _d_ = 0;
    return function(_e_, _f_){
     return create_with_extra(_c_, _b_, _a_, _d_, _e_, _f_);};
   }
   caml_call1(Ppx_inline_test_lib[6], cst_incr_dom);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incr_dom_Component);
   var
    Incr_dom_Component =
      [0,
       apply_action,
       update_visibility,
       view,
       extra,
       on_display,
       create,
       create_with_extra];
   runtime.caml_register_global
    (19, Incr_dom_Component, cst_Incr_dom_Component);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incr_dom__Incr
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incr_dom_Incr = "Incr_dom__Incr",
    cst_incr_dom = "incr_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Ui_incr = global_data.Ui_incr;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incr_dom_Incr);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incr_dom);
   caml_call1(Expect_test_collector[6][1], "src/incr.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_incr_dom, "incr.ml");
   var
    Incr = Ui_incr[1],
    clock = Ui_incr[2],
    sexp_of_state_witness = Ui_incr[3],
    State = Ui_incr[4],
    sexp_of_t = Ui_incr[5],
    invariant = Ui_incr[6],
    is_const = Ui_incr[7],
    is_valid = Ui_incr[8],
    is_necessary = Ui_incr[9],
    const$0 = Ui_incr[10],
    return$0 = Ui_incr[11],
    map = Ui_incr[12],
    symbol_map = Ui_incr[13],
    map2 = Ui_incr[14],
    map3 = Ui_incr[15],
    map4 = Ui_incr[16],
    map5 = Ui_incr[17],
    map6 = Ui_incr[18],
    map7 = Ui_incr[19],
    map8 = Ui_incr[20],
    map9 = Ui_incr[21],
    map10 = Ui_incr[22],
    map11 = Ui_incr[23],
    map12 = Ui_incr[24],
    map13 = Ui_incr[25],
    map14 = Ui_incr[26],
    map15 = Ui_incr[27],
    bind = Ui_incr[28],
    symbol_bind = Ui_incr[29],
    bind2 = Ui_incr[30],
    bind3 = Ui_incr[31],
    bind4 = Ui_incr[32],
    Infix = Ui_incr[33],
    join = Ui_incr[34],
    if$0 = Ui_incr[35],
    freeze = Ui_incr[36],
    depend_on = Ui_incr[37],
    necessary_if_alive = Ui_incr[38],
    for_all = Ui_incr[39],
    exists = Ui_incr[40],
    all = Ui_incr[41],
    both = Ui_incr[42],
    array_fold = Ui_incr[43],
    reduce_balanced = Ui_incr[44],
    Unordered_array_fold_update = Ui_incr[45],
    unordered_array_fold = Ui_incr[46],
    opt_unordered_array_fold = Ui_incr[47],
    sum = Ui_incr[48],
    opt_sum = Ui_incr[49],
    sum_int = Ui_incr[50],
    sum_float = Ui_incr[51],
    Scope = Ui_incr[52],
    Var = Ui_incr[53],
    Observer = Ui_incr[54],
    observe = Ui_incr[55],
    Update = Ui_incr[56],
    on_update = Ui_incr[57],
    stabilize = Ui_incr[58],
    am_stabilizing = Ui_incr[59],
    Cutoff = Ui_incr[60],
    set_cutoff = Ui_incr[61],
    get_cutoff = Ui_incr[62],
    lazy_from_fun = Ui_incr[63],
    default_hash_table_initial_siz = Ui_incr[64],
    memoize_fun = Ui_incr[65],
    memoize_fun_by_key = Ui_incr[66],
    weak_memoize_fun = Ui_incr[67],
    weak_memoize_fun_by_key = Ui_incr[68],
    user_info = Ui_incr[69],
    set_user_info = Ui_incr[70],
    append_user_info_graphviz = Ui_incr[71],
    Node_value = Ui_incr[72],
    node_value = Ui_incr[73],
    Packed = Ui_incr[74],
    pack = Ui_incr[75],
    save_dot = Ui_incr[76],
    save_dot_to_file = Ui_incr[77],
    Let_syntax = Ui_incr[78],
    Before_or_after = Ui_incr[79],
    Clock = Ui_incr[80],
    Expert = Ui_incr[81],
    Map = Ui_incr[82],
    Select = Ui_incr[83];
   caml_call1(Ppx_inline_test_lib[6], cst_incr_dom);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incr_dom_Incr);
   var
    Incr_dom_Incr =
      [0,
       Incr,
       clock,
       sexp_of_state_witness,
       State,
       sexp_of_t,
       invariant,
       is_const,
       is_valid,
       is_necessary,
       const$0,
       return$0,
       map,
       symbol_map,
       map2,
       map3,
       map4,
       map5,
       map6,
       map7,
       map8,
       map9,
       map10,
       map11,
       map12,
       map13,
       map14,
       map15,
       bind,
       symbol_bind,
       bind2,
       bind3,
       bind4,
       Infix,
       join,
       if$0,
       freeze,
       depend_on,
       necessary_if_alive,
       for_all,
       exists,
       all,
       both,
       array_fold,
       reduce_balanced,
       Unordered_array_fold_update,
       unordered_array_fold,
       opt_unordered_array_fold,
       sum,
       opt_sum,
       sum_int,
       sum_float,
       Scope,
       Var,
       Observer,
       observe,
       Update,
       on_update,
       stabilize,
       am_stabilizing,
       Cutoff,
       set_cutoff,
       get_cutoff,
       lazy_from_fun,
       default_hash_table_initial_siz,
       memoize_fun,
       memoize_fun_by_key,
       weak_memoize_fun,
       weak_memoize_fun_by_key,
       user_info,
       set_user_info,
       append_user_info_graphviz,
       Node_value,
       node_value,
       Packed,
       pack,
       save_dot,
       save_dot_to_file,
       Let_syntax,
       Before_or_after,
       Clock,
       Expert,
       Map,
       Select];
   runtime.caml_register_global(12, Incr_dom_Incr, cst_Incr_dom_Incr);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incr_dom__App_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incr_dom_App_intf = "Incr_dom__App_intf",
    cst_incr_dom = "incr_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incr_dom_App_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incr_dom);
   caml_call1(Expect_test_collector[6][1], "src/app_intf.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_incr_dom, "app_intf.ml");
   var Private = [0];
   caml_call1(Ppx_inline_test_lib[6], cst_incr_dom);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incr_dom_App_intf);
   var Incr_dom_App_intf = [0, Private];
   runtime.caml_register_global(11, Incr_dom_App_intf, cst_Incr_dom_App_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incr_dom__Js_misc
//# unitInfo: Requires: Base__Binary_searchable, Base__Field, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Core, Core__Float, Core__Option, Expect_test_collector, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Columns$0 = "Columns",
    cst_Incr_dom_Js_misc = "Incr_dom__Js_misc",
    cst_Rows$0 = "Rows",
    cst_a = "a",
    cst_bottom$0 = "bottom",
    cst_columns = "columns",
    cst_incr_dom = "incr_dom",
    cst_left$0 = "left",
    cst_right$0 = "right",
    cst_rows = "rows",
    cst_rows_or_columns = "rows_or_columns",
    cst_src_js_misc_ml_Rect_t$0 = "src/js_misc.ml.Rect.t",
    cst_src_js_misc_ml_rows_or_col$0 = "src/js_misc.ml.rows_or_columns",
    cst_t$0 = "t",
    cst_top$0 = "top";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_003 = cst_src_js_misc_ml_Rect_t$0,
    names =
      [0, cst_top$0, [0, cst_left$0, [0, cst_bottom$0, [0, cst_right$0, 0]]]],
    error_source_019 = cst_src_js_misc_ml_rows_or_col$0,
    descriptions = [0, [0, cst_Rows$0, 0], [0, [0, cst_Columns$0, 0], 0]],
    Core = global_data.Core,
    Core_Float = global_data.Core__Float,
    Core_Option = global_data.Core__Option,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Base_Binary_searchable = global_data.Base__Binary_searchable,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_Field = global_data.Base__Field,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incr_dom_Js_misc);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incr_dom);
   caml_call1(Expect_test_collector[6][1], "src/js_misc.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_incr_dom, "js_misc.ml");
   var
    cst_right = cst_right$0,
    cst_bottom = cst_bottom$0,
    cst_left = cst_left$0,
    cst_top = cst_top$0,
    _a_ = [0, cst_right$0],
    _b_ = [0, cst_bottom$0],
    _c_ = [0, cst_left$0],
    _d_ = [0, cst_top$0];
   function t_of_sexp(of_a_001, x_004){
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_003,
             [0,
              cst_top,
              1,
              of_a_001,
              [0,
               cst_left,
               1,
               of_a_001,
               [0, cst_bottom, 1, of_a_001, [0, cst_right, 1, of_a_001, 0]]]],
             function(param){
              return param !== cst_bottom$0
                      ? param
                        !== cst_left$0
                        ? param !== cst_right$0 ? param !== cst_top$0 ? -1 : 0 : 3
                        : 1
                      : 2;
             },
             0,
             function(param){
              var
               _aL_ = param[2],
               _aM_ = _aL_[2],
               right = _aM_[2][1],
               bottom = _aM_[1],
               left = _aL_[1],
               top = param[1];
              return [0, top, left, bottom, right];
             },
             x_004);
   }
   function sexp_of_t(of_a_005, param){
    var
     right_013 = param[4],
     bottom_011 = param[3],
     left_009 = param[2],
     top_007 = param[1],
     arg_014 = caml_call1(of_a_005, right_013),
     bnds_006 = [0, [1, [0, _a_, [0, arg_014, 0]]], 0],
     arg_012 = caml_call1(of_a_005, bottom_011),
     bnds_006$0 = [0, [1, [0, _b_, [0, arg_012, 0]]], bnds_006],
     arg_010 = caml_call1(of_a_005, left_009),
     bnds_006$1 = [0, [1, [0, _c_, [0, arg_010, 0]]], bnds_006$0],
     arg_008 = caml_call1(of_a_005, top_007),
     bnds_006$2 = [0, [1, [0, _d_, [0, arg_008, 0]]], bnds_006$1];
    return [1, bnds_006$2];
   }
   var
    _e_ = caml_call1(Bin_shape[3][1], cst_a),
    _f_ = caml_call1(Bin_shape[4][1], "src/js_misc.ml:9:14"),
    _g_ = [0, [0, cst_right$0, caml_call2(Bin_prot_Shape[11], _f_, _e_)], 0],
    _h_ = caml_call1(Bin_shape[3][1], cst_a),
    _i_ = caml_call1(Bin_shape[4][1], "src/js_misc.ml:8:15"),
    _j_ =
      [0, [0, cst_bottom$0, caml_call2(Bin_prot_Shape[11], _i_, _h_)], _g_],
    _k_ = caml_call1(Bin_shape[3][1], cst_a),
    _l_ = caml_call1(Bin_shape[4][1], "src/js_misc.ml:7:13"),
    _m_ = [0, [0, cst_left$0, caml_call2(Bin_prot_Shape[11], _l_, _k_)], _j_],
    _n_ = caml_call1(Bin_shape[3][1], cst_a),
    _o_ = caml_call1(Bin_shape[4][1], "src/js_misc.ml:6:12"),
    _p_ = [0, [0, cst_top$0, caml_call2(Bin_prot_Shape[11], _o_, _n_)], _m_],
    _q_ = caml_call1(Bin_prot_Shape[4], _p_),
    _r_ = [0, caml_call1(Bin_shape[3][1], cst_a), 0],
    _s_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$0), _r_, _q_], 0],
    _t_ = caml_call1(Bin_shape[4][1], "src/js_misc.ml:5:2"),
    group = caml_call2(Bin_prot_Shape[2], _t_, _s_),
    cst_t = cst_t$0,
    cst_src_js_misc_ml_Rect_t = cst_src_js_misc_ml_Rect_t$0;
   function bin_shape_t(a){
    var _aK_ = caml_call1(Bin_shape[2][1], cst_t);
    return caml_call1(caml_call2(Bin_prot_Shape[10], group, _aK_), [0, a, 0]);
   }
   function bin_size_t(size_of_a, param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _aG_ = caml_call1(size_of_a, v1),
     size = caml_call2(Bin_prot_Common[23], 0, _aG_),
     _aH_ = caml_call1(size_of_a, v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _aH_),
     _aI_ = caml_call1(size_of_a, v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _aI_),
     _aJ_ = caml_call1(size_of_a, v4);
    return caml_call2(Bin_prot_Common[23], size$1, _aJ_);
   }
   function bin_write_t(write_a, buf, pos, param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(write_a, buf, pos, v1),
     pos$1 = caml_call3(write_a, buf, pos$0, v2),
     pos$2 = caml_call3(write_a, buf, pos$1, v3);
    return caml_call3(write_a, buf, pos$2, v4);
   }
   function bin_writer_t(bin_writer_a){
    return [0,
            function(v){return bin_size_t(bin_writer_a[1], v);},
            function(v){
             var _aD_ = bin_writer_a[2];
             return function(_aE_, _aF_){
              return bin_write_t(_aD_, v, _aE_, _aF_);};
            }];
   }
   function bin_read_t(of_a, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_js_misc_ml_Rect_t, pos_ref[1]);
   }
   function bin_read_t$0(of_a, buf, pos_ref){
    var
     v_top = caml_call2(of_a, buf, pos_ref),
     v_left = caml_call2(of_a, buf, pos_ref),
     v_bottom = caml_call2(of_a, buf, pos_ref),
     v_right = caml_call2(of_a, buf, pos_ref);
    return [0, v_top, v_left, v_bottom, v_right];
   }
   function bin_reader_t(bin_reader_a){
    return [0,
            function(buf, pos_ref){
             return bin_read_t$0(bin_reader_a[1], buf, pos_ref);
            },
            function(buf, pos_ref, vtag){
             return bin_read_t(bin_reader_a[1], buf, pos_ref, vtag);
            }];
   }
   function bin_t(bin_a){
    var _aB_ = bin_reader_t(bin_a[3]), _aC_ = bin_writer_t(bin_a[2]);
    return [0, bin_shape_t(bin_a[1]), _aC_, _aB_];
   }
   function compare(cmp_a, a_015, b_016){
    if(a_015 === b_016) return 0;
    var n = caml_call2(cmp_a, a_015[1], b_016[1]);
    if(0 !== n) return n;
    var n$0 = caml_call2(cmp_a, a_015[2], b_016[2]);
    if(0 !== n$0) return n$0;
    var n$1 = caml_call2(cmp_a, a_015[3], b_016[3]);
    return 0 === n$1 ? caml_call2(cmp_a, a_015[4], b_016[4]) : n$1;
   }
   function right(r){return r[4];}
   function bottom(r){return r[3];}
   function left(r){return r[2];}
   function top(r){return r[1];}
   var
    right$0 =
      [0,
       function(param){return 0;},
       cst_right$0,
       0,
       right,
       function(r, v){return [0, r[1], r[2], r[3], v];}],
    bottom$0 =
      [0,
       function(param){return 0;},
       cst_bottom$0,
       0,
       bottom,
       function(r, v){return [0, r[1], r[2], v, r[4]];}],
    left$0 =
      [0,
       function(param){return 0;},
       cst_left$0,
       0,
       left,
       function(r, v){return [0, r[1], v, r[3], r[4]];}],
    top$0 =
      [0,
       function(param){return 0;},
       cst_top$0,
       0,
       top,
       function(r, v){return [0, v, r[2], r[3], r[4]];}];
   function make_creator
   (top_fun, left_fun, bottom_fun, right_fun, compile_acc){
    var
     match = caml_call2(top_fun, top$0, compile_acc),
     compile_acc$0 = match[2],
     top_gen = match[1],
     match$0 = caml_call2(left_fun, left$0, compile_acc$0),
     compile_acc$1 = match$0[2],
     left_gen = match$0[1],
     match$1 = caml_call2(bottom_fun, bottom$0, compile_acc$1),
     compile_acc$2 = match$1[2],
     bottom_gen = match$1[1],
     match$2 = caml_call2(right_fun, right$0, compile_acc$2),
     compile_acc$3 = match$2[2],
     right_gen = match$2[1];
    return [0,
            function(acc){
             var
              top = caml_call1(top_gen, acc),
              left = caml_call1(left_gen, acc),
              bottom = caml_call1(bottom_gen, acc),
              right = caml_call1(right_gen, acc);
             return [0, top, left, bottom, right];
            },
            compile_acc$3];
   }
   function create(top, left, bottom, right){return [0, top, left, bottom, right];
   }
   function map(top_fun, left_fun, bottom_fun, right_fun){
    var
     _ay_ = caml_call1(right_fun, right$0),
     _az_ = caml_call1(bottom_fun, bottom$0),
     _aA_ = caml_call1(left_fun, left$0);
    return [0, caml_call1(top_fun, top$0), _aA_, _az_, _ay_];
   }
   function iter(top_fun, left_fun, bottom_fun, right_fun){
    caml_call1(top_fun, top$0);
    caml_call1(left_fun, left$0);
    caml_call1(bottom_fun, bottom$0);
    return caml_call1(right_fun, right$0);
   }
   function fold(init, top_fun, left_fun, bottom_fun, right_fun){
    return caml_call2
            (right_fun,
             caml_call2
              (bottom_fun,
               caml_call2(left_fun, caml_call2(top_fun, init, top$0), left$0),
               bottom$0),
             right$0);
   }
   function map_poly(record){
    var
     _av_ = [0, caml_call1(record[1], right$0), 0],
     _aw_ = [0, caml_call1(record[1], bottom$0), _av_],
     _ax_ = [0, caml_call1(record[1], left$0), _aw_];
    return [0, caml_call1(record[1], top$0), _ax_];
   }
   function for_all(top_fun, left_fun, bottom_fun, right_fun){
    var
     _as_ = caml_call1(top_fun, top$0),
     _at_ = _as_ ? caml_call1(left_fun, left$0) : _as_,
     _au_ = _at_ ? caml_call1(bottom_fun, bottom$0) : _at_;
    return _au_ ? caml_call1(right_fun, right$0) : _au_;
   }
   function exists(top_fun, left_fun, bottom_fun, right_fun){
    var
     _ar_ = caml_call1(top_fun, top$0),
     _ap_ = _ar_ || caml_call1(left_fun, left$0),
     _aq_ = _ap_ || caml_call1(bottom_fun, bottom$0);
    return _aq_ ? _aq_ : caml_call1(right_fun, right$0);
   }
   function to_list(top_fun, left_fun, bottom_fun, right_fun){
    var
     _am_ = [0, caml_call1(right_fun, right$0), 0],
     _an_ = [0, caml_call1(bottom_fun, bottom$0), _am_],
     _ao_ = [0, caml_call1(left_fun, left$0), _an_];
    return [0, caml_call1(top_fun, top$0), _ao_];
   }
   function iter$0(record, top_fun, left_fun, bottom_fun, right_fun){
    caml_call3(top_fun, top$0, record, record[1]);
    caml_call3(left_fun, left$0, record, record[2]);
    caml_call3(bottom_fun, bottom$0, record, record[3]);
    return caml_call3(right_fun, right$0, record, record[4]);
   }
   function fold$0(record, init, top_fun, left_fun, bottom_fun, right_fun){
    var _aj_ = record[4], _ak_ = record[3], _al_ = record[2];
    return caml_call4
            (right_fun,
             caml_call4
              (bottom_fun,
               caml_call4
                (left_fun,
                 caml_call4(top_fun, init, top$0, record, record[1]),
                 left$0,
                 record,
                 _al_),
               bottom$0,
               record,
               _ak_),
             right$0,
             record,
             _aj_);
   }
   function for_all$0(record, top_fun, left_fun, bottom_fun, right_fun){
    var
     _ag_ = caml_call3(top_fun, top$0, record, record[1]),
     _ah_ = _ag_ ? caml_call3(left_fun, left$0, record, record[2]) : _ag_,
     _ai_ = _ah_ ? caml_call3(bottom_fun, bottom$0, record, record[3]) : _ah_;
    return _ai_ ? caml_call3(right_fun, right$0, record, record[4]) : _ai_;
   }
   function exists$0(record, top_fun, left_fun, bottom_fun, right_fun){
    var
     _af_ = caml_call3(top_fun, top$0, record, record[1]),
     _ad_ = _af_ || caml_call3(left_fun, left$0, record, record[2]),
     _ae_ = _ad_ || caml_call3(bottom_fun, bottom$0, record, record[3]);
    return _ae_ ? _ae_ : caml_call3(right_fun, right$0, record, record[4]);
   }
   function to_list$0(record, top_fun, left_fun, bottom_fun, right_fun){
    var
     _aa_ = [0, caml_call3(right_fun, right$0, record, record[4]), 0],
     _ab_ = [0, caml_call3(bottom_fun, bottom$0, record, record[3]), _aa_],
     _ac_ = [0, caml_call3(left_fun, left$0, record, record[2]), _ab_];
    return [0, caml_call3(top_fun, top$0, record, record[1]), _ac_];
   }
   function map$0(record, top_fun, left_fun, bottom_fun, right_fun){
    var
     _Z_ = caml_call3(right_fun, right$0, record, record[4]),
     ___ = caml_call3(bottom_fun, bottom$0, record, record[3]),
     _$_ = caml_call3(left_fun, left$0, record, record[2]);
    return [0, caml_call3(top_fun, top$0, record, record[1]), _$_, ___, _Z_];
   }
   function set_all_mutable_fields(record){
    caml_call1(Base_Field[1][1], record);
    return 0;
   }
   var
    Direct =
      [0,
       iter$0,
       fold$0,
       for_all$0,
       exists$0,
       to_list$0,
       map$0,
       set_all_mutable_fields],
    _u_ = [0, cst_Columns$0],
    _v_ = [0, cst_Rows$0];
   function map$1(t, f){
    var
     _W_ = caml_call1(f, t[4]),
     _X_ = caml_call1(f, t[3]),
     _Y_ = caml_call1(f, t[2]);
    return [0, caml_call1(f, t[1]), _Y_, _X_, _W_];
   }
   function int_height(t){return t[3] - t[1] | 0;}
   function int_width(t){return t[4] - t[2] | 0;}
   function float_height(t){return t[3] - t[1];}
   function float_width(t){return t[4] - t[2];}
   function round_float_rect(opt){
    var round = opt ? opt[1] : Core_Float[51];
    return function(_V_){return map$1(_V_, round);};
   }
   function rows_or_columns_of_sexp(sexp_020){
    a:
    {
     if(0 === sexp_020[0]){
      var _R_ = sexp_020[1];
      b:
      if(_R_ !== cst_Columns$0){
       if(_R_ !== cst_Rows$0){
        if(_R_ === cst_columns) break b;
        if(_R_ !== cst_rows) break a;
       }
       return 0;
      }
      return 1;
     }
     var _S_ = sexp_020[1];
     if(! _S_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_019, sexp_020);
     var _T_ = _S_[1];
     if(0 !== _T_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_019, sexp_020);
     var _U_ = _T_[1];
     b:
     if(_U_ !== cst_Columns$0){
      if(_U_ !== cst_Rows$0){
       if(_U_ === cst_columns) break b;
       if(_U_ !== cst_rows) break a;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[3], error_source_019, sexp_020);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_019, sexp_020);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_019, sexp_020);
   }
   function sexp_of_rows_or_columns(param){return param ? _u_ : _v_;}
   var
    _w_ =
      caml_call1
       (Bin_prot_Shape[5],
        [0, [0, cst_Rows$0, 0], [0, [0, cst_Columns$0, 0], 0]]),
    _x_ =
      [0, [0, caml_call1(Bin_shape[2][1], cst_rows_or_columns), 0, _w_], 0],
    _y_ = caml_call1(Bin_shape[4][1], "src/js_misc.ml:25:0"),
    group$0 = caml_call2(Bin_prot_Shape[2], _y_, _x_),
    _z_ = caml_call1(Bin_shape[2][1], cst_rows_or_columns),
    bin_shape_rows_or_columns =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _z_), 0);
   function bin_size_rows_or_columns(param){return 1;}
   function bin_write_rows_or_columns(buf, pos, param){
    return param
            ? caml_call3(Bin_prot_Write[30], buf, pos, 1)
            : caml_call3(Bin_prot_Write[30], buf, pos, 0);
   }
   var
    bin_writer_rows_or_columns =
      [0, bin_size_rows_or_columns, bin_write_rows_or_columns],
    cst_src_js_misc_ml_rows_or_col = cst_src_js_misc_ml_rows_or_col$0,
    _A_ = [1, cst_src_js_misc_ml_rows_or_col$0];
   function bin_read_rows_or_columns(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_js_misc_ml_rows_or_col, pos_ref[1]);
   }
   function bin_read_rows_or_columns$0(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    return 0 === match
            ? 0
            : 1
              === match
              ? 1
              : caml_call2(Bin_prot_Common[18], _A_, pos_ref[1]);
   }
   var
    bin_reader_rows_or_columns =
      [0, bin_read_rows_or_columns$0, bin_read_rows_or_columns],
    bin_rows_or_columns =
      [0,
       bin_shape_rows_or_columns,
       bin_writer_rows_or_columns,
       bin_reader_rows_or_columns],
    rows = 0,
    columns = 1,
    _B_ = [0, 0],
    _C_ = [0, 0];
   function is_rows(param){return param ? 0 : 1;}
   function is_columns(param){return param ? 1 : 0;}
   function rows_val(param){return param ? 0 : _B_;}
   function columns_val(param){return param ? _C_ : 0;}
   var
    rows$0 = [0, cst_Rows$0, 0, rows],
    columns$0 = [0, cst_Columns$0, 1, columns],
    cst_Columns = cst_Columns$0,
    cst_Rows = cst_Rows$0;
   function fold$1(init, rows_fun, columns_fun){
    return caml_call2
            (columns_fun, caml_call2(rows_fun, init, rows$0), columns$0);
   }
   function iter$1(rows_fun, columns_fun){
    caml_call1(rows_fun, rows$0);
    return caml_call1(columns_fun, columns$0);
   }
   function map$2(t, rows_fun, columns_fun){
    return t
            ? caml_call1(columns_fun, columns$0)
            : caml_call1(rows_fun, rows$0);
   }
   function make_matcher(rows_fun, columns_fun, compile_acc){
    var
     match = caml_call2(rows_fun, rows$0, compile_acc),
     compile_acc$0 = match[2],
     rows_gen = match[1],
     match$0 = caml_call2(columns_fun, columns$0, compile_acc$0),
     compile_acc$1 = match$0[2],
     columns_gen = match$0[1];
    return [0,
            function(t){
             return t ? caml_call1(columns_gen, 0) : caml_call1(rows_gen, 0);
            },
            compile_acc$1];
   }
   function to_rank(param){return param ? 1 : 0;}
   function to_name(param){return param ? cst_Columns : cst_Rows;}
   var
    Variants_of_rows_or_columns =
      [0,
       rows$0,
       columns$0,
       fold$1,
       iter$1,
       map$2,
       make_matcher,
       to_rank,
       to_name,
       descriptions],
    compare_rows_or_columns = runtime.caml_int_compare,
    cst_keep_in_view = "keep-in-view",
    _D_ =
      [0,
       [11, "Element ", [2, 0, [11, " not found", 0]]],
       "Element %s not found"];
   function innerHeight(param){
    var t0 = Js_of_ocaml_Dom_html[8];
    return t0.innerHeight;
   }
   function innerWidth(param){
    var t1 = Js_of_ocaml_Dom_html[8];
    return t1.innerWidth;
   }
   function element_is_in_viewport(elt){
    var
     rect = elt.getBoundingClientRect(),
     _J_ = caml_call2(Core_Float[122], rect.top, 0.);
    if(_J_){
     var _K_ = caml_call2(Core_Float[122], rect.left, 0.);
     if(_K_){
      var
       _L_ = innerHeight(0),
       _M_ = caml_call1(Core_Float[31], _L_),
       _N_ = caml_call2(Core_Float[123], rect.bottom, _M_);
      if(_N_){
       var _O_ = innerWidth(0), _P_ = caml_call1(Core_Float[31], _O_);
       return caml_call2(Core_Float[123], rect.right, _P_);
      }
      var _Q_ = _N_;
     }
     else
      var _Q_ = _K_;
    }
    else
     var _Q_ = _J_;
    return _Q_;
   }
   function scroll(opt, param){
    var
     id = opt ? opt[1] : cst_keep_in_view,
     match = caml_call1(Js_of_ocaml_Dom_html[3], id);
    if(! match) return 0;
    var elt = match[1], _I_ = 1 - element_is_in_viewport(elt);
    if(! _I_) return _I_;
    var t7 = Js_of_ocaml_Js[7];
    return elt.scrollIntoView(t7);
   }
   function viewport_rect_of_element(elt){
    var rect = elt.getBoundingClientRect();
    return [0, rect.top, rect.left, rect.bottom, rect.right];
   }
   function viewport_rect(param){
    var _H_ = innerWidth(0);
    return [0, 0, 0, innerHeight(0), _H_];
   }
   function client_rect_of_element(elt){
    var
     bounding_rect = viewport_rect_of_element(elt),
     _E_ = caml_call1(Core_Float[31], elt.clientWidth),
     _F_ = bounding_rect[2] + _E_,
     _G_ = caml_call1(Core_Float[31], elt.clientHeight);
    return [0,
            bounding_rect[1],
            bounding_rect[2],
            bounding_rect[1] + _G_,
            _F_];
   }
   function client_rect(param){
    var
     t18 = Js_of_ocaml_Dom_html[2],
     t19 = t18.documentElement,
     t16 = Js_of_ocaml_Dom_html[2],
     t17 = t16.documentElement;
    return [0, 0, 0, t17.clientHeight, t19.clientWidth];
   }
   function find_visible_range(length, nth_element_id, layout){
    if(caml_call2(Core[89], length, 0)) return 0;
    function element_search(search_by, mode, layout, x){
     function nth_element(n){
      var
       id = caml_call1(nth_element_id, n),
       match = caml_call1(Js_of_ocaml_Dom_html[3], id);
      if(! match) return caml_call3(Core[240], _D_, id, 0);
      var elt = match[1];
      return elt;
     }
     var
      first = viewport_rect_of_element(nth_element(0)),
      last = viewport_rect_of_element(nth_element(length - 1 | 0)),
      compare = Core_Float[129];
     function get(param, n){
      var
       is_ascending =
         layout
          ? caml_call2(Core_Float[123], first[2], last[2])
          : caml_call2(Core_Float[123], first[1], last[1]),
       n$0 = is_ascending ? n : (length - n | 0) - 1 | 0;
      return caml_call1(search_by, viewport_rect_of_element(nth_element(n$0)));
     }
     function length$0(param){return length;}
     return caml_call6
             (caml_call1(Base_Binary_searchable[1], [0, get, length$0])[1],
              0,
              0,
              0,
              compare,
              mode,
              x);
    }
    var viewport_rect$0 = viewport_rect(0);
    if(layout)
     var target = viewport_rect$0[2], search_by = right;
    else
     var target = viewport_rect$0[1], search_by = bottom;
    var
     first =
       element_search
        (search_by, -839473056, layout, caml_call1(Core_Float[31], target));
    if(layout)
     var target$0 = viewport_rect$0[4], search_by$0 = left;
    else
     var target$0 = viewport_rect$0[3], search_by$0 = top;
    var
     last =
       element_search
        (search_by$0, 200870407, layout, caml_call1(Core_Float[31], target$0));
    return caml_call2(Core_Option[19], first, last);
   }
   function get_scroll_container_js_expr(element){
    var
     doc = element.ownerDocument || document,
     win = doc.defaultView || window,
     re = /(auto|scroll)/;
    if(element === doc) return doc;
    var cur = element.parentNode;
    while(cur.parentNode){
     var style = win.getComputedStyle(cur);
     if(re.test(style.overflow + style.overflowY + style.overflowX))
      return cur;
     cur = cur.parentNode;
    }
    return doc;
   }
   function get_scroll_container(el){return get_scroll_container_js_expr(el);}
   caml_call1(Ppx_inline_test_lib[6], cst_incr_dom);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incr_dom_Js_misc);
   var
    Incr_dom_Js_misc =
      [0,
       [0,
        t_of_sexp,
        sexp_of_t,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_read_t$0,
        bin_read_t,
        bin_writer_t,
        bin_reader_t,
        bin_t,
        compare,
        right,
        bottom,
        left,
        top,
        [0,
         names,
         right$0,
         bottom$0,
         left$0,
         top$0,
         fold,
         make_creator,
         create,
         map,
         iter,
         for_all,
         exists,
         to_list,
         map_poly,
         Direct],
        map$1,
        int_height,
        int_width,
        float_height,
        float_width],
       round_float_rect,
       viewport_rect,
       viewport_rect_of_element,
       client_rect,
       client_rect_of_element,
       element_is_in_viewport,
       scroll,
       sexp_of_rows_or_columns,
       rows_or_columns_of_sexp,
       bin_shape_rows_or_columns,
       bin_size_rows_or_columns,
       bin_write_rows_or_columns,
       bin_writer_rows_or_columns,
       bin_read_rows_or_columns$0,
       bin_read_rows_or_columns,
       bin_reader_rows_or_columns,
       bin_rows_or_columns,
       rows,
       columns,
       is_rows,
       is_columns,
       rows_val,
       columns_val,
       Variants_of_rows_or_columns,
       compare_rows_or_columns,
       find_visible_range,
       get_scroll_container];
   runtime.caml_register_global(108, Incr_dom_Js_misc, cst_Incr_dom_Js_misc);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incr_dom__Start_app
//# unitInfo: Requires: Async_js, Async_kernel, Async_kernel__Async_kernel_scheduler, Async_kernel__Deferred, Async_kernel__Ivar, CamlinternalLazy, CamlinternalOO, Core, Core__Blang, Core__Comparable, Core__Deque, Core__Error, Core__Fn, Core__Hashtbl, Core__List, Core__Memo, Core__Option, Core__Or_error, Core__Set, Core__Sexp, Core__String, Core__Time_ns, Css_gen, Expect_test_collector, Incr_dom__Component, Incr_dom__Incr, Incr_dom__Js_misc, Javascript_profiling, Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__Firebug, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ppx_sexp_conv_lib, Sexplib0__Sexp_conv, Stdio__In_channel, Ui_effect, Ui_incr, Vdom_file_download, Virtual_dom__Effect, Virtual_dom__Node, Virtual_dom__Vdom
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$3 = '"',
    cst_Incr_dom_Start_app = "Incr_dom__Start_app",
    cst_apply_actions$1 = "apply actions",
    cst_before$1 = "before",
    cst_diff$1 = "diff",
    cst_incr_dom = "incr_dom",
    cst_on_display$1 = "on_display",
    cst_patch$1 = "patch",
    cst_src_start_app_ml = "src/start_app.ml",
    cst_stabilize$5 = "stabilize",
    cst_stabilize_for_action$1 = "stabilize-for-action",
    cst_total$1 = "total",
    cst_update_visibility$1 = "update visibility",
    caml_js_wrap_callback = runtime.caml_js_wrap_callback,
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst$2 = ": ",
    filename = "current_incr_dom_dot_graph.dot",
    cst$1 = "  ",
    cst = cst$3,
    cst$0 = cst$3,
    Virtual_dom_Node = global_data.Virtual_dom__Node,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Incr_dom_Component = global_data.Incr_dom__Component,
    Incr_dom_Incr = global_data.Incr_dom__Incr,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Ui_effect = global_data.Ui_effect,
    Core_Deque = global_data.Core__Deque,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Core_Time_ns = global_data.Core__Time_ns,
    Core_String = global_data.Core__String,
    Core_Option = global_data.Core__Option,
    Js_of_ocaml_Firebug = global_data.Js_of_ocaml__Firebug,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Async_js = global_data.Async_js,
    Core = global_data.Core,
    Core_Blang = global_data.Core__Blang,
    Ppx_sexp_conv_lib = global_data.Ppx_sexp_conv_lib,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Core_Error = global_data.Core__Error,
    Core_Or_error = global_data.Core__Or_error;
   global_data.CamlinternalOO;
   var
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Core_Memo = global_data.Core__Memo,
    Virtual_dom_Effect = global_data.Virtual_dom__Effect,
    Core_Fn = global_data.Core__Fn,
    Incr_dom_Js_misc = global_data.Incr_dom__Js_misc,
    Async_kernel = global_data.Async_kernel,
    Virtual_dom_Vdom = global_data.Virtual_dom__Vdom,
    Css_gen = global_data.Css_gen,
    Core_Set = global_data.Core__Set,
    Ui_incr = global_data.Ui_incr,
    Stdio_In_channel = global_data.Stdio__In_channel,
    Vdom_file_download = global_data.Vdom_file_download,
    Core_Sexp = global_data.Core__Sexp,
    Core_List = global_data.Core__List,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Async_kernel_Async_kernel_sche =
      global_data.Async_kernel__Async_kernel_scheduler,
    Javascript_profiling = global_data.Javascript_profiling,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Comparable = global_data.Core__Comparable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incr_dom_Start_app);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incr_dom);
   caml_call1(Expect_test_collector[6][1], cst_src_start_app_ml);
   caml_call2(Ppx_inline_test_lib[5], cst_incr_dom, "start_app.ml");
   var cst_request_ids_already_set = "request_ids already set";
   function print_errorf(fmt){
    return caml_call2
            (Core[248],
             function(s){
              var
               t4 = caml_jsstring_of_string(s),
               t5 = Js_of_ocaml_Firebug[1];
              return t5.error(t4);
             },
             fmt);
   }
   function request_animation_frame(callback){
    var
     current_context = caml_call1(Async_kernel_Async_kernel_sche[1], 0),
     request_ids = [0, 0];
    function callback$0(param){
     var _aB_ = request_ids[1];
     a:
     {
      if(typeof _aB_ === "number" && _aB_){var _aC_ = 1; break a;}
      var _aC_ = 0;
     }
     if(_aC_) return 0;
     var match = request_ids[1];
     if(typeof match === "number"){
      if(! match) request_ids[1] = 1;
     }
     else{
      var
       set_timeout_id = match[2],
       animation_frame_id = match[1],
       t11 = Js_of_ocaml_Dom_html[8];
      t11.cancelAnimationFrame(animation_frame_id);
      var t13 = Js_of_ocaml_Dom_html[8];
      t13.clearTimeout(set_timeout_id);
      request_ids[1] = 1;
     }
     caml_call2(Async_kernel_Async_kernel_sche[2], current_context, callback);
     return 0;
    }
    var
     animation_callback =
       caml_js_wrap_callback(function(param){return callback$0(0);}),
     t15 = Js_of_ocaml_Dom_html[8],
     animation_frame_id = t15.requestAnimationFrame(animation_callback),
     timeout_callback =
       caml_js_wrap_callback(function(param){return callback$0(0);}),
     t18 = Js_of_ocaml_Dom_html[8],
     set_timeout_id = t18.setTimeout(timeout_callback, 1000.),
     _aA_ = request_ids[1];
    if(typeof _aA_ !== "number")
     return caml_call1(Core[4], cst_request_ids_already_set);
    if(_aA_){
     var t7 = Js_of_ocaml_Dom_html[8];
     t7.cancelAnimationFrame(animation_frame_id);
     var t9 = Js_of_ocaml_Dom_html[8];
     return t9.clearTimeout(set_timeout_id);
    }
    request_ids[1] = [0, animation_frame_id, set_timeout_id];
    return 0;
   }
   function as_focusable(_az_){return _az_;}
   function mark_dirty(t){return caml_call2(Async_kernel_Ivar[15], t[1], 0);}
   function is_dirty(t){return caml_call1(Async_kernel_Ivar[17], t[1]);}
   function t_of_sexp(x_002){
    return caml_call2(Core_Blang[12], Core[485], x_002);
   }
   function sexp_of_t(x_003){
    return caml_call2(Core_Blang[13], Core[484], x_003);
   }
   function compare(a_004, b_005){
    return caml_call3
            (Core_Blang[9],
             function(a_006, b_007){
              return caml_call2(Core[479], a_006, b_007);
             },
             a_004,
             b_005);
   }
   var
    include =
      caml_call1(Core_Comparable[12], [0, compare, t_of_sexp, sexp_of_t]),
    symbol = include[1],
    symbol$0 = include[2],
    symbol$1 = include[3],
    symbol$2 = include[4],
    symbol$3 = include[5],
    symbol$4 = include[6],
    equal = include[7],
    compare$0 = include[8],
    min = include[9],
    max = include[10],
    ascending = include[11],
    descending = include[12],
    between = include[13],
    clamp_exn = include[14],
    clamp = include[15],
    comparator = include[16],
    validate_lbound = include[17],
    validate_ubound = include[18],
    validate_bound = include[19],
    Replace_polymorphic_compare = include[20],
    Map = include[21],
    Set = include[22];
   function set_logging_filter(t, logging_filter){t[2][1] = logging_filter; return 0;
   }
   var
    global = Js_of_ocaml_Js[52][1],
    global_is_initialized = [0, 0],
    app_states = caml_call3(Core_String[157][5], 0, 0, 0),
    cst_before = cst_before$1,
    cst_before$0 = cst_before$1,
    cst_after = "after",
    _a_ = [0, ", "],
    _b_ = [0, "\n"],
    _c_ =
      [0,
       [11,
        'Unable to find app with id "',
        [2, 0, [11, '". Valid app ids are: ', [2, 0, 0]]]],
       'Unable to find app with id "%s". Valid app ids are: %s'],
    _d_ =
      [0,
       [11,
        "Unable to find named filter(s): ",
        [2, 0, [11, ". Valid names are:\n", [2, 0, 0]]]],
       "Unable to find named filter(s): %s. Valid names are:\n%s"],
    cst_plain_text = "plain/text",
    cst_Logging_prints_action_info =
      "Logging prints action info to the console. It is disabled by default. To start logging, type one of the following:\nstartLoggingAll([app_id]) - log all actions\nstartLogging(filter_name [, app_id]) - filter actions using a pre-defined named filter [filter_name]\nstartLogging(filter_name_blang [, app_id]) - filter actions using a blang of named filters [filter_name_blang]\nstartLoggingCustom(filter [, app_id]) - filter actions using a custom function [filter] from a string (the action sexp) to a bool\nTo stop logging, type: stopLogging([app_id])",
    cst_Action_Logging = "Action Logging",
    cst_Profiling_is_disabled_by_d =
      "Profiling is disabled by default.\nTo start profiling, type: startProfiling([app_id])\nTo stop profiling, type: stopProfiling([app_id])",
    cst_Action_Profiling = "Action Profiling",
    cst_Debugging_prints_timing_in =
      "Debugging prints timing info to the console. It is disabled by default unless otherwise specified by the app.\nTo start debugging, type: startDebugging([app_id])\nTo stop debugging, type: stopDebugging([app_id])\n\n[app_id] is equal to the id of the element that the incr-dom app is bound to. If the page only has one app or you want to apply the action to all apps, you can pass in [null] (or for single-argument functions, omit it altogether).",
    cst_Debugging = "Debugging",
    cst_Incr_dom_Bonsai_Console = "Incr_dom / Bonsai Console",
    _e_ =
      [0,
       [11,
        'Available logging filters for "',
        [2, 0, [11, '":\n', [2, 0, 0]]]],
       'Available logging filters for "%s":\n%s'],
    cst_disable_tab_index = "disable_tab_index",
    cst_none = "none",
    cst_all = "all",
    _f_ = [0, [0, cst_src_start_app_ml, 457, 16891, 16932]],
    cst_scroll = "scroll",
    cst_resize = "resize",
    cst_stabilize = cst_stabilize$5,
    cst_stabilize$0 = cst_stabilize$5,
    cst_Exception_raised_by_s_Erro = "Exception raised by %s: %{Error#hum}",
    _g_ = [0, 0],
    cst_Exception_raised_by = "Exception raised by ",
    cst_named_filter_blang_sexp_st =
      'named filter blang "%{sexp:string Blang.t}"',
    _h_ = [12, 34, 0],
    _i_ = [0, 0],
    cst_named_filter_blang = 'named filter blang "',
    _j_ = [0, "action"],
    cst_Action = "Action",
    cst_custom_filter = "custom filter",
    cst_stabilize_for_action = cst_stabilize_for_action$1,
    cst_stabilize_for_action$0 = cst_stabilize_for_action$1,
    cst_stabilize$1 = cst_stabilize$5,
    cst_stabilize$2 = cst_stabilize$5,
    cst_total = cst_total$1,
    cst_update_visibility = cst_update_visibility$1,
    cst_update_visibility$0 = cst_update_visibility$1,
    cst_apply_actions = cst_apply_actions$1,
    cst_apply_actions$0 = cst_apply_actions$1,
    cst_stabilize$3 = cst_stabilize$5,
    cst_stabilize$4 = cst_stabilize$5,
    cst_diff = cst_diff$1,
    cst_diff$0 = cst_diff$1,
    cst_patch = cst_patch$1,
    cst_patch$0 = cst_patch$1,
    cst_on_display = cst_on_display$1,
    cst_on_display$0 = cst_on_display$1,
    cst_total$0 = cst_total$1;
   function single_line_string_list(strings){
    var
     _ax_ =
       caml_call2
        (Core_List[50],
         strings,
         function(str){
          var _ay_ = caml_call2(Core[17], str, cst);
          return caml_call2(Core[17], cst$0, _ay_);
         });
    return caml_call2(Core_String[45], _a_, _ax_);
   }
   function multi_line_string_list(strings){
    var
     _aw_ =
       caml_call2
        (Core_List[50],
         strings,
         function(str){return caml_call2(Core[17], cst$1, str);});
    return caml_call2(Core_String[45], _b_, _aw_);
   }
   function get_tag_name(node){
    var node$0 = node;
    for(;;){
     if(typeof node$0 !== "number")
      switch(node$0[0]){
        case 1:
         var e = node$0[1]; return [0, caml_call1(Virtual_dom_Node[1][1], e)];
        case 3:
         var t = node$0[2], _av_ = runtime.caml_obj_tag(t);
         a:
         if(250 === _av_)
          var node$1 = t[1];
         else{
          if(246 !== _av_ && 244 !== _av_){var node$1 = t; break a;}
          var node$1 = caml_call1(CamlinternalLazy[2], t);
         }
         node$0 = node$1;
         continue;
      }
     return 0;
    }
   }
   function start_bonsai
   (_p_, _o_, opt, bind_to_element_with_id, initial_model, App){
    var
     debug = _p_ ? _p_[1] : 0,
     stop = _o_ ? _o_[1] : caml_call1(Async_kernel_Deferred[19], 0),
     named_logging_filters = opt ? opt[1] : 0;
    caml_call1(Async_js[3], 0);
    var
     _q_ = caml_call1(Async_js[5], 0),
     _r_ =
       caml_call2
        (Async_kernel[22][2],
         _q_,
         function(param){
          var
           model_v = caml_call2(Incr_dom_Incr[53][2], 0, initial_model),
           model = caml_call1(Incr_dom_Incr[53][4], model_v),
           model_from_last_display_v =
             caml_call2(Incr_dom_Incr[53][2], 0, initial_model),
           model_from_last_display =
             caml_call1(Incr_dom_Incr[53][4], model_from_last_display_v),
           cutoff =
             caml_call1
              (Incr_dom_Incr[60][3],
               function(old_value, new_value){
                return caml_call2(App[1][1], old_value, new_value);
               });
          caml_call2(Incr_dom_Incr[61], model, cutoff);
          caml_call2(Incr_dom_Incr[61], model_from_last_display, cutoff);
          var action_queue = caml_call3(Core_Deque[31], 0, 0, 0);
          function handle(action){
           return caml_call2(Core_Deque[53], action_queue, action);
          }
          var
           Event = caml_call1(Ui_effect[18], [0, [0], handle]),
           visibility = [0, caml_call1(Async_kernel_Ivar[13], 0)];
          function viewport_changed(param){return mark_dirty(visibility);}
          caml_call1(Virtual_dom_Effect[21], [0, viewport_changed]);
          var
           _t_ = caml_call3(App[6], model, model_from_last_display, Event[1]),
           obs = caml_call2(Incr_dom_Incr[55], 0, _t_);
          function fetch(f, param){
           return caml_call1(f, caml_call1(Incr_dom_Incr[54][6], obs));
          }
          function _u_(param){var view = param[1]; return view;}
          caml_call1(Incr_dom_Incr[58], 0);
          var
           _v_ =
             [0,
              [0, cst_none, caml_call1(Core_Fn[1], 0)],
              named_logging_filters],
           _w_ = [0, [0, cst_all, caml_call1(Core_Fn[1], 1)], _v_],
           named_logging_filters$0 =
             caml_call3(Core_String[157][9], 0, 0, _w_),
           _x_ = caml_call1(Core_Hashtbl[66], named_logging_filters$0),
           filter_names = caml_call1(Core_String[153][7], _x_),
           _s_ =
             multi_line_string_list(caml_call1(Core_Set[39], filter_names)),
           app_init_message =
             caml_call3(Core[259], _e_, bind_to_element_with_id, _s_);
          if(global_is_initialized[1]){
           var
            t42 = caml_jsstring_of_string(app_init_message),
            t43 = Js_of_ocaml_Firebug[1];
           t43.log(t42);
          }
          else{
           var
            with_app_id_opt =
              function(update_state, app_id_opt){
               var
                _at_ = caml_call1(Js_of_ocaml_Js[5][10], app_id_opt),
                app_id_opt$0 =
                  caml_call2(Core_Option[30], _at_, caml_string_of_jsstring);
               if(! app_id_opt$0)
                return caml_call2(Core_Hashtbl[20], app_states, update_state);
               var
                app_id = app_id_opt$0[1],
                match = caml_call2(Core_Hashtbl[55], app_states, app_id);
               if(match){
                var state = match[1];
                return caml_call1(update_state, state);
               }
               var
                _au_ =
                  single_line_string_list
                   (caml_call1(Core_Hashtbl[66], app_states));
               return caml_call2(print_errorf(_c_), app_id, _au_);
              },
            update_logging_filter =
              function(logging_filter){
               function _aq_(_as_){
                return set_logging_filter(_as_, logging_filter);
               }
               return function(_ar_){return with_app_id_opt(_aq_, _ar_);};
              },
            update_should_profile =
              function(should_profile){
               function _ao_(t){t[3][1] = should_profile; return 0;}
               return function(_ap_){return with_app_id_opt(_ao_, _ap_);};
              },
            update_should_debug =
              function(should_debug){
               function _am_(t){t[4][1] = should_debug; return 0;}
               return function(_an_){return with_app_id_opt(_am_, _an_);};
              },
            t19 = caml_js_wrap_callback(update_logging_filter(0));
           global.startLoggingAll = t19;
           var
            t21 =
              caml_js_wrap_callback
               (function(blang_str){
                 var blang_str$0 = caml_string_of_jsstring(blang_str);
                 function _ah_(app_state){
                  var
                   _aj_ = caml_call1(Core_Sexp[73], blang_str$0),
                   blang = caml_call2(Core_Blang[12], Core_String[127], _aj_),
                   invalid_names =
                     caml_call3
                      (Core_Blang[34],
                       blang,
                       Core_String[153][4],
                       function(invalid_names, name){
                        return caml_call2(Core_Set[11], app_state[1], name)
                                ? invalid_names
                                : caml_call2(Core_Set[12], invalid_names, name);
                       });
                  if(caml_call1(Core_Set[10], invalid_names))
                   return set_logging_filter(app_state, [0, blang]);
                  var
                   _ak_ =
                     multi_line_string_list
                      (caml_call1(Core_Set[39], app_state[1])),
                   _al_ =
                     single_line_string_list
                      (caml_call1(Core_Set[39], invalid_names));
                  return caml_call2(print_errorf(_d_), _al_, _ak_);
                 }
                 return function(_ai_){return with_app_id_opt(_ah_, _ai_);};
                });
           global.startLogging = t21;
           var
            t23 =
              caml_js_wrap_callback
               (function(filter){
                 function filter$0(action_sexp){
                  return caml_call1
                          (filter,
                           caml_jsstring_of_string
                            (caml_call1(Core_Sexp[83], action_sexp)))
                         | 0;
                 }
                 return update_logging_filter([1, filter$0]);
                });
           global.startLoggingCustom = t23;
           var t25 = caml_js_wrap_callback(update_logging_filter(1));
           global.stopLogging = t25;
           var t27 = caml_js_wrap_callback(update_should_profile(1));
           global.startProfiling = t27;
           var t29 = caml_js_wrap_callback(update_should_profile(0));
           global.stopProfiling = t29;
           var t31 = caml_js_wrap_callback(update_should_debug(1));
           global.startDebugging = t31;
           var t33 = caml_js_wrap_callback(update_should_debug(0));
           global.stopDebugging = t33;
           var
            t35 =
              caml_js_wrap_callback
               (function(param){
                 caml_call1(Ui_incr[77], filename);
                 var
                  contents = caml_call1(Stdio_In_channel[25], filename),
                  _ag_ =
                    caml_call3
                     (Vdom_file_download[2], filename, cst_plain_text, contents);
                 return caml_call1(Vdom_file_download[3], _ag_);
                });
           global.saveIncrementalGraph = t35;
           var
            group =
              function(s, f){
               var
                t37 = caml_jsstring_of_string(s),
                t38 = Js_of_ocaml_Firebug[1];
               t38.groupCollapsed(t37);
               caml_call1(f, 0);
               var t39 = Js_of_ocaml_Firebug[1];
               t39.groupEnd();
              },
            log =
              function(s){
               var
                t40 = caml_jsstring_of_string(s),
                t41 = Js_of_ocaml_Firebug[1];
               return t41.log(t40);
              };
           group
            (cst_Incr_dom_Bonsai_Console,
             function(param){
              group
               (cst_Action_Logging,
                function(param){return log(cst_Logging_prints_action_info);});
              group
               (cst_Action_Profiling,
                function(param){return log(cst_Profiling_is_disabled_by_d);});
              group
               (cst_Debugging,
                function(param){return log(cst_Debugging_prints_timing_in);});
              return log(app_init_message);
             });
           global_is_initialized[1] = 1;
          }
          var
           logging_filter = [0, 1],
           should_profile = [0, 0],
           should_debug = [0, debug];
          caml_call3
           (Core_Hashtbl[36],
            app_states,
            bind_to_element_with_id,
            [0, filter_names, logging_filter, should_profile, should_debug]);
          caml_call2
           (Async_kernel[12],
            stop,
            function(param){
             return caml_call2
                     (Core_Hashtbl[31], app_states, bind_to_element_with_id);
            });
          var
           html = fetch(_u_, 0),
           html_dom = caml_call1(Virtual_dom_Node[64], html),
           elem = caml_call1(Js_of_ocaml_Dom_html[4], bind_to_element_with_id),
           _y_ = caml_call1(Js_of_ocaml_Js[5][10], elem.parentNode),
           parent = caml_call4(Core_Option[36], _f_, 0, 0, _y_);
          caml_call3(Js_of_ocaml_Dom[3], parent, html_dom, elem);
          function call_viewport_changed_on_event(event_name, where){
           var
            _ad_ = Js_of_ocaml_Js[8],
            _ae_ =
              caml_call1
               (Js_of_ocaml_Dom[10],
                function(param){
                 mark_dirty(visibility);
                 return Js_of_ocaml_Js[7];
                }),
            _af_ = caml_call1(Js_of_ocaml_Dom[14][1], event_name);
           caml_call4(Js_of_ocaml_Dom[16], where, _af_, _ae_, _ad_);
          }
          call_viewport_changed_on_event
           (cst_scroll, caml_call1(Incr_dom_Js_misc[28], html_dom));
          call_viewport_changed_on_event(cst_resize, Js_of_ocaml_Dom_html[8]);
          var
           _z_ = caml_call1(Incr_dom_Incr[53][5], model_v),
           _A_ =
             caml_call2
              (App[5],
               function(a){
                var _ac_ = caml_call1(Event[1], a);
                return caml_call1(Ui_effect[20][1], _ac_);
               },
               _z_);
          return caml_call2
                  (Async_kernel[22][2],
                   _A_,
                   function(state){
                    var prev_html = [0, html], prev_elt = [0, html_dom];
                    function refocus_root_element(param){
                     var
                      element = prev_elt[1],
                      _$_ = caml_call1(Js_of_ocaml_Dom_html[118][1], element),
                      _aa_ = caml_call1(Js_of_ocaml_Js[5][10], _$_),
                      _ab_ = caml_call2(Core_Option[30], _aa_, as_focusable);
                     return caml_call2
                             (Core_Option[42],
                              _ab_,
                              function(element){
                               var t45 = Js_of_ocaml_Js[7], t46 = {preventScroll: t45};
                               return element.focus(t46);
                              });
                    }
                    function timer_start(s){
                     var profile = should_profile[1], debug = should_debug[1];
                     if(profile){
                      var ___ = caml_call2(Core[17], s, cst_before);
                      caml_call1(Javascript_profiling[4][1], ___);
                     }
                     if(! debug) return debug;
                     var
                      t0 = caml_jsstring_of_string(s),
                      t1 = Js_of_ocaml_Firebug[1];
                     t1.time(t0);
                    }
                    function timer_stop(s){
                     var profile = should_profile[1], debug = should_debug[1];
                     if(profile){
                      var
                       before = caml_call2(Core[17], s, cst_before$0),
                       after = caml_call2(Core[17], s, cst_after);
                      caml_call1(Javascript_profiling[4][1], after);
                      caml_call3(Javascript_profiling[4][2], s, before, after);
                     }
                     if(! debug) return debug;
                     var
                      t2 = caml_jsstring_of_string(s),
                      t3 = Js_of_ocaml_Firebug[1];
                     t3.timeEnd(t2);
                    }
                    var
                     _B_ = Js_of_ocaml_Js[7],
                     _C_ =
                       caml_call1
                        (Js_of_ocaml_Dom_html[10],
                         function(t48){
                          var related_target = t48.relatedTarget;
                          if(1 - caml_call1(Js_of_ocaml_Js[5][5], related_target))
                           refocus_root_element(0);
                          return Js_of_ocaml_Js[7];
                         });
                    caml_call4
                     (Js_of_ocaml_Dom[16],
                      Js_of_ocaml_Dom_html[8],
                      Js_of_ocaml_Dom_html[15][37],
                      _C_,
                      _B_);
                    function safe_filter(name, filter, action){
                     var
                      match =
                        caml_call2
                         (Core_Or_error[33],
                          0,
                          function(param){return caml_call1(filter, action);});
                     if(0 === match[0]){
                      var should_log = match[1];
                      return should_log;
                     }
                     var err = match[1];
                     caml_call2
                      (print_errorf
                        ([0,
                          [11,
                           cst_Exception_raised_by,
                           [2,
                            0,
                            [11,
                             cst$2,
                             [24,
                              _g_,
                              function(param, custom_printf_010){
                               return caml_call1(Core_Error[9], custom_printf_010);
                              },
                              0]]]],
                          cst_Exception_raised_by_s_Erro]),
                       name,
                       err);
                     return 0;
                    }
                    var
                     _D_ = Set[1],
                     _E_ = Map[1],
                     named_filter_blang_cache =
                       caml_call2
                        (Core_Memo[4],
                         [0,
                          symbol,
                          symbol$0,
                          symbol$1,
                          symbol$2,
                          symbol$3,
                          symbol$4,
                          equal,
                          compare$0,
                          min,
                          max,
                          ascending,
                          descending,
                          between,
                          clamp_exn,
                          clamp,
                          comparator,
                          validate_lbound,
                          validate_ubound,
                          validate_bound,
                          Replace_polymorphic_compare,
                          [0,
                           [0, _E_[2], _E_[3]],
                           Map[2],
                           Map[3],
                           Map[42],
                           Map[4],
                           Map[5],
                           Map[6],
                           Map[7],
                           Map[8],
                           Map[9],
                           Map[10],
                           Map[11],
                           Map[12],
                           Map[13],
                           Map[14],
                           Map[15],
                           Map[16],
                           Map[17],
                           Map[18],
                           Map[19],
                           Map[20],
                           Map[21],
                           Map[22],
                           Map[23],
                           Map[24],
                           Map[25],
                           Map[26],
                           Map[27],
                           Map[28],
                           Map[29],
                           Map[30],
                           Map[31],
                           Map[32],
                           Map[33],
                           Map[34],
                           Map[35],
                           Map[36],
                           Map[37],
                           Map[38],
                           Map[39],
                           Map[40]],
                          [0,
                           [0, _D_[2], _D_[3]],
                           Set[2],
                           Set[3],
                           Set[27],
                           Set[4],
                           Set[5],
                           Set[6],
                           Set[7],
                           Set[8],
                           Set[9],
                           Set[10],
                           Set[11],
                           Set[12],
                           Set[13],
                           Set[14],
                           Set[15],
                           Set[16],
                           Set[17],
                           Set[18],
                           Set[19],
                           Set[20],
                           Set[21],
                           Set[22],
                           Set[23],
                           Set[24],
                           Set[25]]],
                         function(blang){
                          var
                           filter =
                             caml_call1(Core_Hashtbl[56], named_logging_filters$0);
                          a:
                          {
                           if(typeof blang !== "number" && 4 === blang[0]){
                            var name = blang[1], _W_ = caml_call1(filter, name);
                            break a;
                           }
                           var
                            _W_ =
                              function(action){
                               return caml_call2
                                       (Core_Blang[62],
                                        blang,
                                        function(name){return caml_call2(filter, name, action);});
                              };
                          }
                          var
                           _X_ =
                             caml_call2
                              (Core[259],
                               [0,
                                [11,
                                 cst_named_filter_blang,
                                 [24,
                                  _i_,
                                  function(param, custom_printf_012){
                                   var
                                    _Z_ =
                                      caml_call2(Core_Blang[13], Core[484], custom_printf_012);
                                   return caml_call2(Ppx_sexp_conv_lib[1][13], 0, _Z_);
                                  },
                                  _h_]],
                                cst_named_filter_blang_sexp_st],
                               blang);
                          return function(_Y_){return safe_filter(_X_, _W_, _Y_);};
                         });
                    function perform_update(param){
                     timer_start(cst_stabilize$1);
                     var
                      t51 = Js_of_ocaml_Js[26],
                      date = new t51,
                      _N_ = date.getTime(),
                      _O_ = caml_call1(Core_Time_ns[1][80], _N_),
                      now = caml_call1(Core_Time_ns[75], _O_);
                     caml_call2(Incr_dom_Incr[80][8], Incr_dom_Incr[2], now);
                     caml_call1(Incr_dom_Incr[58], 0);
                     timer_stop(cst_stabilize$2);
                     timer_start(cst_total);
                     timer_start(cst_update_visibility);
                     if(is_dirty(visibility)){
                      if(is_dirty(visibility))
                       visibility[1] = caml_call1(Async_kernel_Ivar[12], 0);
                      var
                       _H_ = Ui_effect[20][1],
                       _I_ = caml_call1(Incr_dom_Incr[53][6], model_v),
                       update_visibility = caml_call1(Incr_dom_Incr[54][6], obs)[3],
                       new_model = caml_call2(update_visibility, _I_, _H_);
                      caml_call2(Incr_dom_Incr[53][3], model_v, new_model);
                      timer_start(cst_stabilize);
                      caml_call1(Incr_dom_Incr[58], 0);
                      timer_stop(cst_stabilize$0);
                     }
                     timer_stop(cst_update_visibility$0);
                     timer_start(cst_apply_actions);
                     for(;;){
                      var match$0 = caml_call1(Core_Deque[60], action_queue);
                      if(! match$0) break;
                      var action = match$0[1], match = logging_filter[1];
                      if(typeof match === "number")
                       var should_log_action = 0 === match ? 1 : 0;
                      else if(0 === match[0])
                       var
                        blang = match[1],
                        should_log_action =
                          caml_call2(named_filter_blang_cache, blang, action);
                      else{
                       var filter = match[1];
                       let filter$0 = filter;
                       var
                        should_log_action =
                          safe_filter
                           (cst_custom_filter,
                            function(action){
                             return caml_call1(filter$0, caml_call1(App[2][1], action));
                            },
                            action);
                      }
                      if(should_log_action){
                       var
                        _J_ =
                          [0, [1, [0, _j_, [0, caml_call1(App[2][1], action), 0]]], 0],
                        _K_ =
                          [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_Action), _J_]];
                       caml_call1(Async_js[7], _K_);
                      }
                      if(caml_call1(App[4], action)){
                       timer_start(cst_stabilize_for_action);
                       caml_call1(Incr_dom_Incr[58], 0);
                       timer_stop(cst_stabilize_for_action$0);
                      }
                      else if(should_debug[1]){
                       var t50 = Js_of_ocaml_Firebug[1];
                       t50.debug("action applied without stabilizing");
                      }
                      var
                       _L_ = caml_call1(Incr_dom_Incr[53][6], model_v),
                       _M_ = Ui_effect[20][1],
                       apply_action = caml_call1(Incr_dom_Incr[54][6], obs)[2],
                       new_model$0 =
                         caml_call4(apply_action, state, _M_, _L_, action);
                      caml_call2(Incr_dom_Incr[53][3], model_v, new_model$0);
                     }
                     timer_stop(cst_apply_actions$0);
                     timer_start(cst_stabilize$3);
                     caml_call1(Incr_dom_Incr[58], 0);
                     timer_stop(cst_stabilize$4);
                     var root = fetch(_u_, 0);
                     a:
                     {
                      if(typeof root !== "number" && 1 === root[0]){
                       var
                        element = root[1],
                        _G_ = caml_call1(Virtual_dom_Node[1][2], element);
                       if
                        (1
                         -
                          caml_call2
                           (Virtual_dom_Vdom[1][93][1], cst_disable_tab_index, _G_)){
                        var
                         add_new_attrs =
                           function(attrs){
                            var
                             _S_ = caml_call1(Virtual_dom_Vdom[1][39], 0),
                             _T_ = caml_call2(Virtual_dom_Vdom[1][11], _S_, attrs),
                             _U_ = caml_call4(Css_gen[87], 0, 0, 870530776, 0),
                             _V_ = caml_call1(Virtual_dom_Vdom[1][29], _U_);
                            return caml_call2(Virtual_dom_Vdom[1][11], _V_, _T_);
                           },
                         html =
                           [1,
                            caml_call2(Virtual_dom_Node[1][5], element, add_new_attrs)];
                        break a;
                       }
                      }
                      var html = root;
                     }
                     timer_start(cst_diff);
                     var
                      patch =
                        caml_call2(Virtual_dom_Node[68][1], prev_html[1], html);
                     timer_stop(cst_diff$0);
                     if(1 - caml_call1(Virtual_dom_Node[68][3], patch))
                      mark_dirty(visibility);
                     timer_start(cst_patch);
                     var
                      elt =
                        caml_call2(Virtual_dom_Node[68][2], patch, prev_elt[1]);
                     timer_stop(cst_patch$0);
                     timer_start(cst_on_display);
                     var
                      _P_ = Ui_effect[20][1],
                      on_display = caml_call1(Incr_dom_Incr[54][6], obs)[4];
                     caml_call2(on_display, state, _P_);
                     timer_stop(cst_on_display$0);
                     var _Q_ = caml_call1(Incr_dom_Incr[53][5], model_v);
                     caml_call2
                      (Incr_dom_Incr[53][3], model_from_last_display_v, _Q_);
                     var
                      old_tag_name = get_tag_name(prev_html[1]),
                      new_tag_name = get_tag_name(html),
                      tags_the_same =
                        caml_call3
                         (Core_Option[15],
                          Core_String[138],
                          old_tag_name,
                          new_tag_name);
                     prev_html[1] = html;
                     prev_elt[1] = elt;
                     timer_stop(cst_total$0);
                     if(should_debug[1]){
                      var t54 = Js_of_ocaml_Firebug[1];
                      t54.debug("-------");
                     }
                     var _R_ = 1 - tags_the_same;
                     return _R_ ? refocus_root_element(0) : _R_;
                    }
                    function callback(param){
                     return caml_call1(Async_kernel_Deferred[7], stop)
                             ? 0
                             : (perform_update(0), request_animation_frame(callback));
                    }
                    perform_update(0);
                    var
                     t55 = Js_of_ocaml_Dom_html[2],
                     match = caml_call1(Js_of_ocaml_Js[5][10], t55.activeElement);
                    if(match){
                     var
                      el = match[1],
                      _F_ = caml_call1(Js_of_ocaml_Dom_html[118][7], el);
                     if(caml_call1(Js_of_ocaml_Js[5][5], _F_))
                      refocus_root_element(0);
                    }
                    else
                     refocus_root_element(0);
                    request_animation_frame(callback);
                    return caml_call1(Async_kernel_Deferred[19], 0);
                   });
         });
    return caml_call1(Async_kernel[6], _r_);
   }
   var Private = [0, start_bonsai];
   function start(_l_, _k_, opt, bind_to_element_with_id, initial_model, App){
    var
     debug = _l_ ? _l_[1] : 0,
     stop = _k_ ? _k_[1] : caml_call1(Async_kernel_Deferred[19], 0),
     named_logging_filters = opt ? opt[1] : 0,
     Model = App[1],
     Action = App[2],
     State = App[3],
     on_startup = App[4],
     _m_ = App[5];
    function action_requires_stabilization(param){return 1;}
    function create(model, old_model, inject){
     var _n_ = caml_call3(_m_, model, old_model, inject);
     return caml_call2
             (Incr_dom_Incr[78][4][6],
              _n_,
              function(component){
               var view = caml_call1(Incr_dom_Component[3], component);
               function apply_action(state, schedule_event, model, action){
                function schedule_action(a){
                 return caml_call1(schedule_event, caml_call1(inject, a));
                }
                return caml_call4
                        (Incr_dom_Component[1],
                         component,
                         action,
                         state,
                         schedule_action);
               }
               function update_visibility(model, schedule_event){
                function schedule_action(a){
                 return caml_call1(schedule_event, caml_call1(inject, a));
                }
                return caml_call2
                        (Incr_dom_Component[2], component, schedule_action);
               }
               function on_display(state, schedule_event){
                function schedule_action(a){
                 return caml_call1(schedule_event, caml_call1(inject, a));
                }
                return caml_call3
                        (Incr_dom_Component[5], component, state, schedule_action);
               }
               return [0, view, apply_action, update_visibility, on_display];
              });
    }
    return start_bonsai
            ([0, debug],
             [0, stop],
             [0, named_logging_filters],
             bind_to_element_with_id,
             initial_model,
             [0,
              Model,
              Action,
              State,
              action_requires_stabilization,
              on_startup,
              create]);
   }
   caml_call1(Ppx_inline_test_lib[6], cst_incr_dom);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incr_dom_Start_app);
   var Incr_dom_Start_app = [0, start, Private];
   runtime.caml_register_global
    (145, Incr_dom_Start_app, cst_Incr_dom_Start_app);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incr_dom
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Virtual_dom
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incr_dom = "Incr_dom",
    cst_incr_dom = "incr_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Virtual_dom = global_data.Virtual_dom;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incr_dom);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incr_dom);
   caml_call1(Expect_test_collector[6][1], "src/incr_dom.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_incr_dom, "incr_dom.ml");
   var Top_level_effects = Virtual_dom[1];
   caml_call1(Ppx_inline_test_lib[6], cst_incr_dom);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incr_dom);
   var Incr_dom = [0, Top_level_effects];
   runtime.caml_register_global(12, Incr_dom, cst_Incr_dom);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
