// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Bonsai_protocol
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Bonsai__Graph_info, Bonsai__Node_path, Core, Core__Stable, Expect_test_collector, Expect_test_common__File, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record, Stdlib, Uuid
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_b17892a0948ebd34a0b7162784 = " b17892a0948ebd34a0b716278484df52 ",
    cst_Bonsai = "Bonsai",
    cst_Bonsai_protocol = "Bonsai_protocol",
    cst_Graph_info = "Graph_info",
    cst_Message = "Message",
    cst_Other = "Other",
    cst_Performance_measure = "Performance_measure",
    cst_Uuid = "Uuid",
    cst_V1 = "V1",
    cst_V2 = "V2",
    cst_V3 = "V3",
    cst_V4 = "V4",
    cst_bonsai_protocol = "bonsai_protocol",
    cst_duration$1 = "duration",
    cst_entry_type$1 = "entry_type",
    cst_f34cb92051007196938f034640 = "f34cb92051007196938f034640411aae",
    cst_graph_info = "graph_info",
    cst_label$1 = "label",
    cst_message = "message",
    cst_performance_measure = "performance_measure",
    cst_src_protocol_bonsai_protoc$19 = "src/protocol/bonsai_protocol.ml",
    cst_src_protocol_bonsai_protoc$17 =
      "src/protocol/bonsai_protocol.ml.Entry.t",
    cst_src_protocol_bonsai_protoc$16 =
      "src/protocol/bonsai_protocol.ml.Message.t",
    cst_src_protocol_bonsai_protoc$25 =
      "src/protocol/bonsai_protocol.ml.Stable.Entry.V1.t",
    cst_src_protocol_bonsai_protoc$24 =
      "src/protocol/bonsai_protocol.ml.Stable.Message.V1.t",
    cst_src_protocol_bonsai_protoc$23 =
      "src/protocol/bonsai_protocol.ml.Stable.Message.V2.t",
    cst_src_protocol_bonsai_protoc$22 =
      "src/protocol/bonsai_protocol.ml.Stable.Message.V3.t",
    cst_src_protocol_bonsai_protoc$21 =
      "src/protocol/bonsai_protocol.ml.Stable.Worker_message.V1.t",
    cst_src_protocol_bonsai_protoc$20 =
      "src/protocol/bonsai_protocol.ml.Stable.Worker_message.V2.t",
    cst_src_protocol_bonsai_protoc$18 =
      "src/protocol/bonsai_protocol.ml.Versioned_message.t",
    cst_start_time$1 = "start_time",
    cst_t = "t",
    cst_uuid = "uuid",
    cst_v1 = "v1",
    cst_v2 = "v2",
    cst_v3 = "v3",
    cst_v4 = "v4",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_002 = cst_src_protocol_bonsai_protoc$25,
    error_source_029 = cst_src_protocol_bonsai_protoc$24,
    error_source_047 = cst_src_protocol_bonsai_protoc$23,
    error_source_065 = cst_src_protocol_bonsai_protoc$22,
    error_source_083 = cst_src_protocol_bonsai_protoc$21,
    error_source_101 = cst_src_protocol_bonsai_protoc$20,
    error_source_119 = cst_src_protocol_bonsai_protoc$18,
    error_source_150 = cst_src_protocol_bonsai_protoc$17,
    error_source_177 = cst_src_protocol_bonsai_protoc$16,
    Bonsai_Graph_info = global_data.Bonsai__Graph_info,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Core = global_data.Core,
    Bonsai_Node_path = global_data.Bonsai__Node_path,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Stdlib = global_data.Stdlib,
    Expect_test_common_File = global_data.Expect_test_common__File,
    Uuid = global_data.Uuid,
    Core_Stable = global_data.Core__Stable,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_protocol);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_protocol);
   caml_call1(Expect_test_collector[6][1], cst_src_protocol_bonsai_protoc$19);
   caml_call2
    (Ppx_inline_test_lib[5], cst_bonsai_protocol, "bonsai_protocol.ml");
   var
    _a_ =
      [0,
       [0, cst_entry_type$1, Core_Stable[58]],
       [0,
        [0, cst_start_time$1, Core_Stable[86]],
        [0, [0, cst_duration$1, Core_Stable[86]], 0]]],
    _b_ =
      [0, caml_call2(Bin_prot_Shape[6], cst_Other, [0, Core_Stable[58]]), 0],
    _c_ =
      [0,
       caml_call2
        (Bin_prot_Shape[6], cst_Bonsai, [0, Bonsai_Node_path[39][1][5]]),
       _b_],
    _d_ = caml_call1(Bin_shape[4][1], "src/protocol/bonsai_protocol.ml:8:18"),
    _e_ = [0, [0, cst_label$1, caml_call2(Bin_prot_Shape[8], _d_, _c_)], _a_],
    _f_ = caml_call1(Bin_prot_Shape[4], _e_),
    _g_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _f_], 0],
    _h_ = caml_call1(Bin_shape[4][1], "src/protocol/bonsai_protocol.ml:7:6"),
    group = caml_call2(Bin_prot_Shape[2], _h_, _g_),
    _i_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _i_), 0);
   function bin_size_t(param){
    var v4 = param[4], v3 = param[3], v2 = param[2], v1 = param[1], size = 0;
    if(370492634 <= v1[1])
     var
      args = v1[2],
      size_args = caml_call1(Bonsai_Node_path[39][1][1], args),
      _cq_ = caml_call2(Bin_prot_Common[23], size_args, 4);
    else
     var
      args$0 = v1[2],
      size_args$0 = caml_call1(Core_Stable[3], args$0),
      _cq_ = caml_call2(Bin_prot_Common[23], size_args$0, 4);
    var
     size$0 = caml_call2(Bin_prot_Common[23], size, _cq_),
     _cr_ = caml_call1(Core_Stable[3], v2),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _cr_),
     _cs_ = caml_call1(Core_Stable[7], v3),
     size$2 = caml_call2(Bin_prot_Common[23], size$1, _cs_),
     _ct_ = caml_call1(Core_Stable[7], v4);
    return caml_call2(Bin_prot_Common[23], size$2, _ct_);
   }
   function bin_write_t(buf, pos, param){
    var v4 = param[4], v3 = param[3], v2 = param[2], v1 = param[1];
    if(370492634 <= v1[1])
     var
      args = v1[2],
      pos$0 = caml_call3(Bin_prot_Write[29], buf, pos, 370492634),
      pos$1 = caml_call3(Bonsai_Node_path[39][1][2], buf, pos$0, args);
    else
     var
      args$0 = v1[2],
      pos$4 = caml_call3(Bin_prot_Write[29], buf, pos, -912009552),
      pos$1 = caml_call3(Core_Stable[60], buf, pos$4, args$0);
    var
     pos$2 = caml_call3(Core_Stable[60], buf, pos$1, v2),
     pos$3 = caml_call3(Core_Stable[88], buf, pos$2, v3);
    return caml_call3(Core_Stable[88], buf, pos$3, v4);
   }
   var
    bin_writer_t = [0, bin_size_t, bin_write_t],
    cst_src_protocol_bonsai_protoc = cst_src_protocol_bonsai_protoc$25,
    cst_src_protocol_bonsai_protoc$0 = cst_src_protocol_bonsai_protoc$25;
   function bin_read_t(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_protocol_bonsai_protoc, pos_ref[1]);
   }
   function bin_read_t$0(buf, pos_ref){
    var vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
    try{
     if(-912009552 === vint)
      var
       arg_1 = caml_call2(Core_Stable[62], buf, pos_ref),
       _co_ = [0, -912009552, arg_1];
     else{
      if(370492634 !== vint)
       throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 1);
      var
       arg_1$0 = caml_call2(Bonsai_Node_path[39][1][3], buf, pos_ref),
       _co_ = [0, 370492634, arg_1$0];
     }
     var v_label = _co_;
    }
    catch(_cp_){
     var _cn_ = caml_wrap_exception(_cp_);
     if(_cn_ !== Bin_prot_Common[13])
      throw caml_maybe_attach_backtrace(_cn_, 0);
     var
      v_label =
        caml_call2
         (Bin_prot_Common[19], cst_src_protocol_bonsai_protoc$0, pos_ref[1]);
    }
    var
     v_entry_type = caml_call2(Core_Stable[62], buf, pos_ref),
     v_start_time = caml_call2(Core_Stable[90], buf, pos_ref),
     v_duration = caml_call2(Core_Stable[90], buf, pos_ref);
    return [0, v_label, v_entry_type, v_start_time, v_duration];
   }
   var
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
    cst_duration = cst_duration$1,
    cst_start_time = cst_start_time$1,
    cst_entry_type = cst_entry_type$1,
    cst_label = cst_label$1,
    _j_ = [0, cst_duration$1],
    _k_ = [0, cst_start_time$1],
    _l_ = [0, cst_entry_type$1],
    _m_ = [0, cst_Bonsai],
    _n_ = [0, cst_label$1],
    _o_ = [0, cst_Other];
   function t_of_sexp(x_015){
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_002,
             [0,
              cst_label,
              1,
              function(sexp_014){
               try{
                if(0 === sexp_014[0])
                 var
                  atom_004 = sexp_014[1],
                  _ce_ =
                    atom_004 !== cst_Bonsai
                     ? atom_004
                       !== cst_Other
                       ? caml_call1(Sexplib0_Sexp_conv_error[19], 0)
                       : caml_call2
                         (Sexplib0_Sexp_conv_error[23], error_source_002, sexp_014)
                     : caml_call2
                       (Sexplib0_Sexp_conv_error[23], error_source_002, sexp_014),
                  _cf_ = _ce_;
                else{
                 var _cg_ = sexp_014[1];
                 if(_cg_){
                  var match = _cg_[1];
                  if(0 === match[0]){
                   var sexp_args_007 = _cg_[2], atom_004$0 = match[1];
                   if(atom_004$0 !== cst_Bonsai)
                    if(atom_004$0 !== cst_Other)
                     var _ch_ = caml_call1(Sexplib0_Sexp_conv_error[19], 0);
                    else{
                     a:
                     {
                      if(sexp_args_007 && ! sexp_args_007[2]){
                       var
                        arg0_009 = sexp_args_007[1],
                        res0_010 = caml_call1(Core_Stable[292], arg0_009),
                        _ck_ = [0, -912009552, res0_010];
                       break a;
                      }
                      var
                       _ck_ =
                         caml_call3
                          (Sexplib0_Sexp_conv_error[22],
                           error_source_002,
                           atom_004$0,
                           sexp_014);
                     }
                     var _ch_ = _ck_;
                    }
                   else{
                    a:
                    {
                     if(sexp_args_007 && ! sexp_args_007[2]){
                      var
                       arg0_012 = sexp_args_007[1],
                       res0_013 = caml_call1(Bonsai_Node_path[39][1][10], arg0_012),
                       _cl_ = [0, 370492634, res0_013];
                      break a;
                     }
                     var
                      _cl_ =
                        caml_call3
                         (Sexplib0_Sexp_conv_error[22],
                          error_source_002,
                          atom_004$0,
                          sexp_014);
                    }
                    var _ch_ = _cl_;
                   }
                   var _ci_ = _ch_;
                  }
                  else
                   var
                    _ci_ =
                      caml_call2
                       (Sexplib0_Sexp_conv_error[24], error_source_002, sexp_014);
                  var _cj_ = _ci_;
                 }
                 else
                  var
                   _cj_ =
                     caml_call2
                      (Sexplib0_Sexp_conv_error[25], error_source_002, sexp_014);
                 var _cf_ = _cj_;
                }
                return _cf_;
               }
               catch(_cm_){
                var _cd_ = caml_wrap_exception(_cm_);
                if(_cd_ === Sexplib0_Sexp_conv_error[18])
                 return caml_call2
                         (Sexplib0_Sexp_conv_error[20], error_source_002, sexp_014);
                throw caml_maybe_attach_backtrace(_cd_, 0);
               }
              },
              [0,
               cst_entry_type,
               1,
               Core_Stable[292],
               [0,
                cst_start_time,
                1,
                Core_Stable[268],
                [0, cst_duration, 1, Core_Stable[268], 0]]]],
             function(param){
              return param !== cst_duration$1
                      ? param
                        !== cst_entry_type$1
                        ? param
                          !== cst_label$1
                          ? param !== cst_start_time$1 ? -1 : 2
                          : 0
                        : 1
                      : 3;
             },
             0,
             function(param){
              var
               _cb_ = param[2],
               _cc_ = _cb_[2],
               duration = _cc_[2][1],
               start_time = _cc_[1],
               entry_type = _cb_[1],
               label = param[1];
              return [0, label, entry_type, start_time, duration];
             },
             x_015);
   }
   function sexp_of_t(param){
    var
     duration_025 = param[4],
     start_time_023 = param[3],
     entry_type_021 = param[2],
     label_017 = param[1],
     arg_026 = caml_call1(Core_Stable[267], duration_025),
     bnds_016 = [0, [1, [0, _j_, [0, arg_026, 0]]], 0],
     arg_024 = caml_call1(Core_Stable[267], start_time_023),
     bnds_016$0 = [0, [1, [0, _k_, [0, arg_024, 0]]], bnds_016],
     arg_022 = caml_call1(Core_Stable[291], entry_type_021),
     bnds_016$1 = [0, [1, [0, _l_, [0, arg_022, 0]]], bnds_016$0];
    if(370492634 <= label_017[1])
     var
      v_019 = label_017[2],
      arg_018 =
        [1, [0, _m_, [0, caml_call1(Bonsai_Node_path[39][1][11], v_019), 0]]];
    else
     var
      v_020 = label_017[2],
      arg_018 = [1, [0, _o_, [0, caml_call1(Core_Stable[291], v_020), 0]]];
    var bnds_016$2 = [0, [1, [0, _n_, [0, arg_018, 0]]], bnds_016$1];
    return [1, bnds_016$2];
   }
   var
    Expect_test_collector$0 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_protocol_bonsai_protoc$1 = cst_src_protocol_bonsai_protoc$19,
    _p_ =
      [0,
       caml_call1
        (Expect_test_common_File[1][6], cst_src_protocol_bonsai_protoc$19),
       17,
       402,
       419,
       457],
    _q_ =
      [0,
       [0,
        [0, cst],
        [1, " 06de0862e532730a58840545d773281d "],
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_src_protocol_bonsai_protoc$19),
         17,
         402,
         412,
         418],
        _p_],
       0],
    _r_ =
      [0,
       caml_call1
        (Expect_test_common_File[1][6], cst_src_protocol_bonsai_protoc$19),
       15,
       336,
       342,
       458],
    _s_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_f34cb92051007196938f034640);
   caml_call9
    (Expect_test_collector$0[3],
     _s_,
     _r_,
     cst_src_protocol_bonsai_protoc$19,
     0,
     0,
     _q_,
     0,
     Inline_test_config,
     function(param){
      var
       _b__ = caml_call1(Bin_prot_Shape[15], bin_shape_t),
       _b$_ = caml_call1(Bin_shape[19][4], _b__);
      caml_call1(Stdlib[46], _b$_);
      var
       _ca_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_src_protocol_bonsai_protoc$1),
          17,
          402,
          412,
          418];
      return caml_call1(Expect_test_collector$0[1], _ca_);
     });
   var
    _t_ =
      caml_call1
       (Bin_prot_Shape[5],
        [0,
         [0, cst_Graph_info, [0, Bonsai_Graph_info[15][2][7], 0]],
         [0, [0, cst_Performance_measure, [0, bin_shape_t, 0]], 0]]),
    _u_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _t_], 0],
    _v_ = caml_call1(Bin_shape[4][1], "src/protocol/bonsai_protocol.ml:24:6"),
    group$0 = caml_call2(Bin_prot_Shape[2], _v_, _u_),
    _w_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t$0 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _w_), 0);
   function bin_size_t$0(param){
    if(0 === param[0]){
     var v1 = param[1], _b8_ = caml_call1(Bonsai_Graph_info[15][2][3], v1);
     return caml_call2(Bin_prot_Common[23], 1, _b8_);
    }
    var v1$0 = param[1], _b9_ = bin_size_t(v1$0);
    return caml_call2(Bin_prot_Common[23], 1, _b9_);
   }
   function bin_write_t$0(buf, pos, param){
    if(0 === param[0]){
     var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
     return caml_call3(Bonsai_Graph_info[15][2][4], buf, pos$0, v1);
    }
    var v1$0 = param[1], pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
    return bin_write_t(buf, pos$1, v1$0);
   }
   var
    bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0],
    cst_src_protocol_bonsai_protoc$2 = cst_src_protocol_bonsai_protoc$24,
    _x_ = [1, cst_src_protocol_bonsai_protoc$24];
   function bin_read_t$1(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_protocol_bonsai_protoc$2,
             pos_ref[1]);
   }
   function bin_read_t$2(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(0 === match){
     var arg_1 = caml_call2(Bonsai_Graph_info[15][2][5], buf, pos_ref);
     return [0, arg_1];
    }
    if(1 !== match) return caml_call2(Bin_prot_Common[18], _x_, pos_ref[1]);
    var arg_1$0 = bin_read_t$0(buf, pos_ref);
    return [1, arg_1$0];
   }
   var
    bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
    bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0],
    _y_ = [0, cst_Graph_info],
    _z_ = [0, cst_Performance_measure];
   function t_of_sexp$0(sexp_031){
    a:
    {
     if(0 === sexp_031[0]){
      var _b5_ = sexp_031[1];
      b:
      if(_b5_ !== cst_Graph_info){
       if(_b5_ !== cst_Performance_measure){
        if(_b5_ === cst_graph_info) break b;
        if(_b5_ !== cst_performance_measure) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_029, sexp_031);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5], error_source_029, sexp_031);
     }
     var _b6_ = sexp_031[1];
     if(! _b6_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_029, sexp_031);
     var _b7_ = _b6_[1];
     if(0 !== _b7_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_029, sexp_031);
     var tag_032 = _b7_[1];
     b:
     if(tag_032 !== cst_Graph_info){
      if(tag_032 !== cst_Performance_measure){
       if(tag_032 === cst_graph_info) break b;
       if(tag_032 !== cst_performance_measure) break a;
      }
      var sexp_args_038 = _b6_[2];
      if(sexp_args_038 && ! sexp_args_038[2]){
       var arg0_039 = sexp_args_038[1], res0_040 = t_of_sexp(arg0_039);
       return [1, res0_040];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_029,
               tag_032,
               sexp_031);
     }
     var sexp_args_033 = _b6_[2];
     if(sexp_args_033 && ! sexp_args_033[2]){
      var
       arg0_034 = sexp_args_033[1],
       res0_035 = caml_call1(Bonsai_Graph_info[15][2][1], arg0_034);
      return [0, res0_035];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4],
              error_source_029,
              tag_032,
              sexp_031);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_029, sexp_031);
   }
   function sexp_of_t$0(param){
    if(0 === param[0]){
     var
      arg0_041 = param[1],
      res0_042 = caml_call1(Bonsai_Graph_info[15][2][2], arg0_041);
     return [1, [0, _y_, [0, res0_042, 0]]];
    }
    var arg0_043 = param[1], res0_044 = sexp_of_t(arg0_043);
    return [1, [0, _z_, [0, res0_044, 0]]];
   }
   var
    Expect_test_collector$1 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_protocol_bonsai_protoc$3 = cst_src_protocol_bonsai_protoc$19,
    _A_ =
      [0,
       caml_call1
        (Expect_test_common_File[1][6], cst_src_protocol_bonsai_protoc$19),
       31,
       746,
       763,
       801],
    _B_ =
      [0,
       [0,
        [0, cst],
        [1, cst_b17892a0948ebd34a0b7162784],
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_src_protocol_bonsai_protoc$19),
         31,
         746,
         756,
         762],
        _A_],
       0],
    _C_ =
      [0,
       caml_call1
        (Expect_test_common_File[1][6], cst_src_protocol_bonsai_protoc$19),
       29,
       680,
       686,
       802],
    _D_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_f34cb92051007196938f034640);
   caml_call9
    (Expect_test_collector$1[3],
     _D_,
     _C_,
     cst_src_protocol_bonsai_protoc$19,
     0,
     0,
     _B_,
     0,
     Inline_test_config,
     function(param){
      var
       _b2_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$0),
       _b3_ = caml_call1(Bin_shape[19][4], _b2_);
      caml_call1(Stdlib[46], _b3_);
      var
       _b4_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_src_protocol_bonsai_protoc$3),
          31,
          746,
          756,
          762];
      return caml_call1(Expect_test_collector$1[1], _b4_);
     });
   var
    _E_ =
      caml_call1
       (Bin_prot_Shape[5],
        [0,
         [0, cst_Graph_info, [0, Bonsai_Graph_info[15][3][5], 0]],
         [0, [0, cst_Performance_measure, [0, bin_shape_t, 0]], 0]]),
    _F_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _E_], 0],
    _G_ = caml_call1(Bin_shape[4][1], "src/protocol/bonsai_protocol.ml:36:6"),
    group$1 = caml_call2(Bin_prot_Shape[2], _G_, _F_),
    _H_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t$1 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$1, _H_), 0);
   function bin_size_t$1(param){
    if(0 === param[0]){
     var v1 = param[1], _b0_ = caml_call1(Bonsai_Graph_info[15][3][1], v1);
     return caml_call2(Bin_prot_Common[23], 1, _b0_);
    }
    var v1$0 = param[1], _b1_ = bin_size_t(v1$0);
    return caml_call2(Bin_prot_Common[23], 1, _b1_);
   }
   function bin_write_t$1(buf, pos, param){
    if(0 === param[0]){
     var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
     return caml_call3(Bonsai_Graph_info[15][3][2], buf, pos$0, v1);
    }
    var v1$0 = param[1], pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
    return bin_write_t(buf, pos$1, v1$0);
   }
   var
    bin_writer_t$1 = [0, bin_size_t$1, bin_write_t$1],
    cst_src_protocol_bonsai_protoc$4 = cst_src_protocol_bonsai_protoc$23,
    _I_ = [1, cst_src_protocol_bonsai_protoc$23];
   function bin_read_t$3(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_protocol_bonsai_protoc$4,
             pos_ref[1]);
   }
   function bin_read_t$4(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(0 === match){
     var arg_1 = caml_call2(Bonsai_Graph_info[15][3][3], buf, pos_ref);
     return [0, arg_1];
    }
    if(1 !== match) return caml_call2(Bin_prot_Common[18], _I_, pos_ref[1]);
    var arg_1$0 = bin_read_t$0(buf, pos_ref);
    return [1, arg_1$0];
   }
   var
    bin_reader_t$1 = [0, bin_read_t$4, bin_read_t$3],
    bin_t$1 = [0, bin_shape_t$1, bin_writer_t$1, bin_reader_t$1],
    _J_ = [0, cst_Graph_info],
    _K_ = [0, cst_Performance_measure];
   function t_of_sexp$1(sexp_049){
    a:
    {
     if(0 === sexp_049[0]){
      var _bX_ = sexp_049[1];
      b:
      if(_bX_ !== cst_Graph_info){
       if(_bX_ !== cst_Performance_measure){
        if(_bX_ === cst_graph_info) break b;
        if(_bX_ !== cst_performance_measure) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_047, sexp_049);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5], error_source_047, sexp_049);
     }
     var _bY_ = sexp_049[1];
     if(! _bY_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_047, sexp_049);
     var _bZ_ = _bY_[1];
     if(0 !== _bZ_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_047, sexp_049);
     var tag_050 = _bZ_[1];
     b:
     if(tag_050 !== cst_Graph_info){
      if(tag_050 !== cst_Performance_measure){
       if(tag_050 === cst_graph_info) break b;
       if(tag_050 !== cst_performance_measure) break a;
      }
      var sexp_args_056 = _bY_[2];
      if(sexp_args_056 && ! sexp_args_056[2]){
       var arg0_057 = sexp_args_056[1], res0_058 = t_of_sexp(arg0_057);
       return [1, res0_058];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_047,
               tag_050,
               sexp_049);
     }
     var sexp_args_051 = _bY_[2];
     if(sexp_args_051 && ! sexp_args_051[2]){
      var
       arg0_052 = sexp_args_051[1],
       res0_053 = caml_call1(Bonsai_Graph_info[15][3][9], arg0_052);
      return [0, res0_053];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4],
              error_source_047,
              tag_050,
              sexp_049);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_047, sexp_049);
   }
   function sexp_of_t$1(param){
    if(0 === param[0]){
     var
      arg0_059 = param[1],
      res0_060 = caml_call1(Bonsai_Graph_info[15][3][10], arg0_059);
     return [1, [0, _J_, [0, res0_060, 0]]];
    }
    var arg0_061 = param[1], res0_062 = sexp_of_t(arg0_061);
    return [1, [0, _K_, [0, res0_062, 0]]];
   }
   var
    Expect_test_collector$2 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_protocol_bonsai_protoc$5 = cst_src_protocol_bonsai_protoc$19,
    _L_ =
      [0,
       caml_call1
        (Expect_test_common_File[1][6], cst_src_protocol_bonsai_protoc$19),
       43,
       1095,
       1112,
       1150],
    _M_ =
      [0,
       [0,
        [0, cst],
        [1, " acf03a1188bfb7efeb8af957c2f31a09 "],
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_src_protocol_bonsai_protoc$19),
         43,
         1095,
         1105,
         1111],
        _L_],
       0],
    _N_ =
      [0,
       caml_call1
        (Expect_test_common_File[1][6], cst_src_protocol_bonsai_protoc$19),
       41,
       1029,
       1035,
       1151],
    _O_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_f34cb92051007196938f034640);
   caml_call9
    (Expect_test_collector$2[3],
     _O_,
     _N_,
     cst_src_protocol_bonsai_protoc$19,
     0,
     0,
     _M_,
     0,
     Inline_test_config,
     function(param){
      var
       _bU_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$1),
       _bV_ = caml_call1(Bin_shape[19][4], _bU_);
      caml_call1(Stdlib[46], _bV_);
      var
       _bW_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_src_protocol_bonsai_protoc$5),
          43,
          1095,
          1105,
          1111];
      return caml_call1(Expect_test_collector$2[1], _bW_);
     });
   function of_v1(t){
    if(0 === t[0]){
     var graph_info = t[1];
     return [0, caml_call1(Bonsai_Graph_info[15][3][12], graph_info)];
    }
    var v0 = t[1];
    return [1, v0];
   }
   var
    _P_ =
      caml_call1
       (Bin_prot_Shape[5],
        [0,
         [0, cst_Graph_info, [0, Bonsai_Graph_info[15][4][5], 0]],
         [0, [0, cst_Performance_measure, [0, bin_shape_t, 0]], 0]]),
    _Q_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _P_], 0],
    _R_ = caml_call1(Bin_shape[4][1], "src/protocol/bonsai_protocol.ml:53:6"),
    group$2 = caml_call2(Bin_prot_Shape[2], _R_, _Q_),
    _S_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t$2 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$2, _S_), 0);
   function bin_size_t$2(param){
    if(0 === param[0]){
     var v1 = param[1], _bS_ = caml_call1(Bonsai_Graph_info[15][4][1], v1);
     return caml_call2(Bin_prot_Common[23], 1, _bS_);
    }
    var v1$0 = param[1], _bT_ = bin_size_t(v1$0);
    return caml_call2(Bin_prot_Common[23], 1, _bT_);
   }
   function bin_write_t$2(buf, pos, param){
    if(0 === param[0]){
     var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
     return caml_call3(Bonsai_Graph_info[15][4][2], buf, pos$0, v1);
    }
    var v1$0 = param[1], pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
    return bin_write_t(buf, pos$1, v1$0);
   }
   var
    bin_writer_t$2 = [0, bin_size_t$2, bin_write_t$2],
    cst_src_protocol_bonsai_protoc$6 = cst_src_protocol_bonsai_protoc$22,
    _T_ = [1, cst_src_protocol_bonsai_protoc$22];
   function bin_read_t$5(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_protocol_bonsai_protoc$6,
             pos_ref[1]);
   }
   function bin_read_t$6(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(0 === match){
     var arg_1 = caml_call2(Bonsai_Graph_info[15][4][3], buf, pos_ref);
     return [0, arg_1];
    }
    if(1 !== match) return caml_call2(Bin_prot_Common[18], _T_, pos_ref[1]);
    var arg_1$0 = bin_read_t$0(buf, pos_ref);
    return [1, arg_1$0];
   }
   var
    bin_reader_t$2 = [0, bin_read_t$6, bin_read_t$5],
    bin_t$2 = [0, bin_shape_t$2, bin_writer_t$2, bin_reader_t$2],
    _U_ = [0, cst_Graph_info],
    _V_ = [0, cst_Performance_measure];
   function t_of_sexp$2(sexp_067){
    a:
    {
     if(0 === sexp_067[0]){
      var _bP_ = sexp_067[1];
      b:
      if(_bP_ !== cst_Graph_info){
       if(_bP_ !== cst_Performance_measure){
        if(_bP_ === cst_graph_info) break b;
        if(_bP_ !== cst_performance_measure) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_065, sexp_067);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5], error_source_065, sexp_067);
     }
     var _bQ_ = sexp_067[1];
     if(! _bQ_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_065, sexp_067);
     var _bR_ = _bQ_[1];
     if(0 !== _bR_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_065, sexp_067);
     var tag_068 = _bR_[1];
     b:
     if(tag_068 !== cst_Graph_info){
      if(tag_068 !== cst_Performance_measure){
       if(tag_068 === cst_graph_info) break b;
       if(tag_068 !== cst_performance_measure) break a;
      }
      var sexp_args_074 = _bQ_[2];
      if(sexp_args_074 && ! sexp_args_074[2]){
       var arg0_075 = sexp_args_074[1], res0_076 = t_of_sexp(arg0_075);
       return [1, res0_076];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_065,
               tag_068,
               sexp_067);
     }
     var sexp_args_069 = _bQ_[2];
     if(sexp_args_069 && ! sexp_args_069[2]){
      var
       arg0_070 = sexp_args_069[1],
       res0_071 = caml_call1(Bonsai_Graph_info[15][4][9], arg0_070);
      return [0, res0_071];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4],
              error_source_065,
              tag_068,
              sexp_067);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_065, sexp_067);
   }
   function sexp_of_t$2(param){
    if(0 === param[0]){
     var
      arg0_077 = param[1],
      res0_078 = caml_call1(Bonsai_Graph_info[15][4][10], arg0_077);
     return [1, [0, _U_, [0, res0_078, 0]]];
    }
    var arg0_079 = param[1], res0_080 = sexp_of_t(arg0_079);
    return [1, [0, _V_, [0, res0_080, 0]]];
   }
   var
    Expect_test_collector$3 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_protocol_bonsai_protoc$7 = cst_src_protocol_bonsai_protoc$19,
    _W_ =
      [0,
       caml_call1
        (Expect_test_common_File[1][6], cst_src_protocol_bonsai_protoc$19),
       60,
       1585,
       1602,
       1640],
    _X_ =
      [0,
       [0,
        [0, cst],
        [1, cst_b17892a0948ebd34a0b7162784],
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_src_protocol_bonsai_protoc$19),
         60,
         1585,
         1595,
         1601],
        _W_],
       0],
    _Y_ =
      [0,
       caml_call1
        (Expect_test_common_File[1][6], cst_src_protocol_bonsai_protoc$19),
       58,
       1519,
       1525,
       1641],
    _Z_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_f34cb92051007196938f034640);
   caml_call9
    (Expect_test_collector$3[3],
     _Z_,
     _Y_,
     cst_src_protocol_bonsai_protoc$19,
     0,
     0,
     _X_,
     0,
     Inline_test_config,
     function(param){
      var
       _bM_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$2),
       _bN_ = caml_call1(Bin_shape[19][4], _bM_);
      caml_call1(Stdlib[46], _bN_);
      var
       _bO_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_src_protocol_bonsai_protoc$7),
          60,
          1585,
          1595,
          1601];
      return caml_call1(Expect_test_collector$3[1], _bO_);
     });
   function of_v2(t){
    if(0 === t[0]){
     var graph_info = t[1];
     return [0, caml_call1(Bonsai_Graph_info[15][4][12], graph_info)];
    }
    var v0 = t[1];
    return [1, v0];
   }
   var
    ___ =
      caml_call1
       (Bin_prot_Shape[5],
        [0,
         [0, cst_Uuid, [0, Uuid[49][1][9], 0]],
         [0, [0, cst_Message, [0, bin_shape_t$1, 0]], 0]]),
    _$_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, ___], 0],
    _aa_ = caml_call1(Bin_shape[4][1], "src/protocol/bonsai_protocol.ml:72:6"),
    group$3 = caml_call2(Bin_prot_Shape[2], _aa_, _$_),
    _ab_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t$3 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$3, _ab_), 0);
   function bin_size_t$3(param){
    if(0 === param[0]){
     var v1 = param[1], _bK_ = caml_call1(Uuid[49][1][5], v1);
     return caml_call2(Bin_prot_Common[23], 1, _bK_);
    }
    var v1$0 = param[1], _bL_ = bin_size_t$1(v1$0);
    return caml_call2(Bin_prot_Common[23], 1, _bL_);
   }
   function bin_write_t$3(buf, pos, param){
    if(0 === param[0]){
     var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
     return caml_call3(Uuid[49][1][6], buf, pos$0, v1);
    }
    var v1$0 = param[1], pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
    return bin_write_t$1(buf, pos$1, v1$0);
   }
   var
    bin_writer_t$3 = [0, bin_size_t$3, bin_write_t$3],
    cst_src_protocol_bonsai_protoc$8 = cst_src_protocol_bonsai_protoc$21,
    _ac_ = [1, cst_src_protocol_bonsai_protoc$21];
   function bin_read_t$7(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_protocol_bonsai_protoc$8,
             pos_ref[1]);
   }
   function bin_read_t$8(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(0 === match){
     var arg_1 = caml_call2(Uuid[49][1][7], buf, pos_ref);
     return [0, arg_1];
    }
    if(1 !== match) return caml_call2(Bin_prot_Common[18], _ac_, pos_ref[1]);
    var arg_1$0 = bin_read_t$4(buf, pos_ref);
    return [1, arg_1$0];
   }
   var
    bin_reader_t$3 = [0, bin_read_t$8, bin_read_t$7],
    bin_t$3 = [0, bin_shape_t$3, bin_writer_t$3, bin_reader_t$3],
    _ad_ = [0, cst_Uuid],
    _ae_ = [0, cst_Message];
   function t_of_sexp$3(sexp_085){
    a:
    {
     if(0 === sexp_085[0]){
      var _bH_ = sexp_085[1];
      b:
      if(_bH_ !== cst_Message){
       if(_bH_ !== cst_Uuid){
        if(_bH_ === cst_message) break b;
        if(_bH_ !== cst_uuid) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_083, sexp_085);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5], error_source_083, sexp_085);
     }
     var _bI_ = sexp_085[1];
     if(! _bI_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_083, sexp_085);
     var _bJ_ = _bI_[1];
     if(0 !== _bJ_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_083, sexp_085);
     var tag_086 = _bJ_[1];
     b:
     if(tag_086 !== cst_Message){
      if(tag_086 !== cst_Uuid){
       if(tag_086 === cst_message) break b;
       if(tag_086 !== cst_uuid) break a;
      }
      var sexp_args_087 = _bI_[2];
      if(sexp_args_087 && ! sexp_args_087[2]){
       var
        arg0_088 = sexp_args_087[1],
        res0_089 = caml_call1(Uuid[49][1][14], arg0_088);
       return [0, res0_089];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_083,
               tag_086,
               sexp_085);
     }
     var sexp_args_092 = _bI_[2];
     if(sexp_args_092 && ! sexp_args_092[2]){
      var arg0_093 = sexp_args_092[1], res0_094 = t_of_sexp$1(arg0_093);
      return [1, res0_094];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4],
              error_source_083,
              tag_086,
              sexp_085);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_083, sexp_085);
   }
   function sexp_of_t$3(param){
    if(0 === param[0]){
     var
      arg0_095 = param[1],
      res0_096 = caml_call1(Uuid[49][1][15], arg0_095);
     return [1, [0, _ad_, [0, res0_096, 0]]];
    }
    var arg0_097 = param[1], res0_098 = sexp_of_t$1(arg0_097);
    return [1, [0, _ae_, [0, res0_098, 0]]];
   }
   var
    Expect_test_collector$4 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_protocol_bonsai_protoc$9 = cst_src_protocol_bonsai_protoc$19,
    _af_ =
      [0,
       caml_call1
        (Expect_test_common_File[1][6], cst_src_protocol_bonsai_protoc$19),
       79,
       2062,
       2079,
       2117],
    _ag_ =
      [0,
       [0,
        [0, cst],
        [1, " e1ff8318743ebd1c14eea6875eed5155 "],
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_src_protocol_bonsai_protoc$19),
         79,
         2062,
         2072,
         2078],
        _af_],
       0],
    _ah_ =
      [0,
       caml_call1
        (Expect_test_common_File[1][6], cst_src_protocol_bonsai_protoc$19),
       77,
       1996,
       2002,
       2118],
    _ai_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_f34cb92051007196938f034640);
   caml_call9
    (Expect_test_collector$4[3],
     _ai_,
     _ah_,
     cst_src_protocol_bonsai_protoc$19,
     0,
     0,
     _ag_,
     0,
     Inline_test_config,
     function(param){
      var
       _bE_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$3),
       _bF_ = caml_call1(Bin_shape[19][4], _bE_);
      caml_call1(Stdlib[46], _bF_);
      var
       _bG_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_src_protocol_bonsai_protoc$9),
          79,
          2062,
          2072,
          2078];
      return caml_call1(Expect_test_collector$4[1], _bG_);
     });
   var
    _aj_ =
      caml_call1
       (Bin_prot_Shape[5],
        [0,
         [0, cst_Uuid, [0, Uuid[49][1][9], 0]],
         [0, [0, cst_Message, [0, bin_shape_t$2, 0]], 0]]),
    _ak_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _aj_], 0],
    _al_ = caml_call1(Bin_shape[4][1], "src/protocol/bonsai_protocol.ml:84:6"),
    group$4 = caml_call2(Bin_prot_Shape[2], _al_, _ak_),
    _am_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t$4 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$4, _am_), 0);
   function bin_size_t$4(param){
    if(0 === param[0]){
     var v1 = param[1], _bC_ = caml_call1(Uuid[49][1][5], v1);
     return caml_call2(Bin_prot_Common[23], 1, _bC_);
    }
    var v1$0 = param[1], _bD_ = bin_size_t$2(v1$0);
    return caml_call2(Bin_prot_Common[23], 1, _bD_);
   }
   function bin_write_t$4(buf, pos, param){
    if(0 === param[0]){
     var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
     return caml_call3(Uuid[49][1][6], buf, pos$0, v1);
    }
    var v1$0 = param[1], pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
    return bin_write_t$2(buf, pos$1, v1$0);
   }
   var
    bin_writer_t$4 = [0, bin_size_t$4, bin_write_t$4],
    cst_src_protocol_bonsai_protoc$10 = cst_src_protocol_bonsai_protoc$20,
    _an_ = [1, cst_src_protocol_bonsai_protoc$20];
   function bin_read_t$9(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_protocol_bonsai_protoc$10,
             pos_ref[1]);
   }
   function bin_read_t$10(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(0 === match){
     var arg_1 = caml_call2(Uuid[49][1][7], buf, pos_ref);
     return [0, arg_1];
    }
    if(1 !== match) return caml_call2(Bin_prot_Common[18], _an_, pos_ref[1]);
    var arg_1$0 = bin_read_t$6(buf, pos_ref);
    return [1, arg_1$0];
   }
   var
    bin_reader_t$4 = [0, bin_read_t$10, bin_read_t$9],
    bin_t$4 = [0, bin_shape_t$4, bin_writer_t$4, bin_reader_t$4],
    _ao_ = [0, cst_Uuid],
    _ap_ = [0, cst_Message];
   function t_of_sexp$4(sexp_103){
    a:
    {
     if(0 === sexp_103[0]){
      var _bz_ = sexp_103[1];
      b:
      if(_bz_ !== cst_Message){
       if(_bz_ !== cst_Uuid){
        if(_bz_ === cst_message) break b;
        if(_bz_ !== cst_uuid) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_101, sexp_103);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5], error_source_101, sexp_103);
     }
     var _bA_ = sexp_103[1];
     if(! _bA_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_101, sexp_103);
     var _bB_ = _bA_[1];
     if(0 !== _bB_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_101, sexp_103);
     var tag_104 = _bB_[1];
     b:
     if(tag_104 !== cst_Message){
      if(tag_104 !== cst_Uuid){
       if(tag_104 === cst_message) break b;
       if(tag_104 !== cst_uuid) break a;
      }
      var sexp_args_105 = _bA_[2];
      if(sexp_args_105 && ! sexp_args_105[2]){
       var
        arg0_106 = sexp_args_105[1],
        res0_107 = caml_call1(Uuid[49][1][14], arg0_106);
       return [0, res0_107];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_101,
               tag_104,
               sexp_103);
     }
     var sexp_args_110 = _bA_[2];
     if(sexp_args_110 && ! sexp_args_110[2]){
      var arg0_111 = sexp_args_110[1], res0_112 = t_of_sexp$2(arg0_111);
      return [1, res0_112];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4],
              error_source_101,
              tag_104,
              sexp_103);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_101, sexp_103);
   }
   function sexp_of_t$4(param){
    if(0 === param[0]){
     var
      arg0_113 = param[1],
      res0_114 = caml_call1(Uuid[49][1][15], arg0_113);
     return [1, [0, _ao_, [0, res0_114, 0]]];
    }
    var arg0_115 = param[1], res0_116 = sexp_of_t$2(arg0_115);
    return [1, [0, _ap_, [0, res0_116, 0]]];
   }
   function of_v1$0(t){
    if(0 === t[0]){var v0 = t[1]; return [0, v0];}
    var message = t[1];
    return [1, of_v2(message)];
   }
   var
    Expect_test_collector$5 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_protocol_bonsai_protoc$11 = cst_src_protocol_bonsai_protoc$19,
    _aq_ =
      [0,
       caml_call1
        (Expect_test_common_File[1][6], cst_src_protocol_bonsai_protoc$19),
       95,
       2509,
       2526,
       2564],
    _ar_ =
      [0,
       [0,
        [0, cst],
        [1, " ba4653bfa208be82da09737f35e150dc "],
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_src_protocol_bonsai_protoc$19),
         95,
         2509,
         2519,
         2525],
        _aq_],
       0],
    _as_ =
      [0,
       caml_call1
        (Expect_test_common_File[1][6], cst_src_protocol_bonsai_protoc$19),
       93,
       2443,
       2449,
       2565],
    _at_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_f34cb92051007196938f034640);
   caml_call9
    (Expect_test_collector$5[3],
     _at_,
     _as_,
     cst_src_protocol_bonsai_protoc$19,
     0,
     0,
     _ar_,
     0,
     Inline_test_config,
     function(param){
      var
       _bw_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$4),
       _bx_ = caml_call1(Bin_shape[19][4], _bw_);
      caml_call1(Stdlib[46], _bx_);
      var
       _by_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_src_protocol_bonsai_protoc$11),
          95,
          2509,
          2519,
          2525];
      return caml_call1(Expect_test_collector$5[1], _by_);
     });
   var
    _au_ = [0, cst_V1],
    _av_ = [0, cst_V2],
    _aw_ = [0, cst_V3],
    _ax_ = [0, cst_V4];
   function t_of_sexp$5(sexp_121){
    a:
    {
     if(0 === sexp_121[0]){
      var _bt_ = sexp_121[1];
      b:
      if(_bt_ !== cst_V1){
       c:
       if(_bt_ !== cst_V2){
        d:
        if(_bt_ !== cst_V3){
         if(_bt_ !== cst_V4){
          if(_bt_ === cst_v1) break b;
          if(_bt_ === cst_v2) break c;
          if(_bt_ === cst_v3) break d;
          if(_bt_ !== cst_v4) break a;
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5], error_source_119, sexp_121);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_119, sexp_121);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_119, sexp_121);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5], error_source_119, sexp_121);
     }
     var _bu_ = sexp_121[1];
     if(! _bu_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_119, sexp_121);
     var _bv_ = _bu_[1];
     if(0 !== _bv_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_119, sexp_121);
     var tag_122 = _bv_[1];
     b:
     if(tag_122 !== cst_V1){
      c:
      if(tag_122 !== cst_V2){
       d:
       if(tag_122 !== cst_V3){
        if(tag_122 !== cst_V4){
         if(tag_122 === cst_v1) break b;
         if(tag_122 === cst_v2) break c;
         if(tag_122 === cst_v3) break d;
         if(tag_122 !== cst_v4) break a;
        }
        var sexp_args_138 = _bu_[2];
        if(sexp_args_138 && ! sexp_args_138[2]){
         var
          arg0_139 = sexp_args_138[1],
          res0_140 = caml_call2(Core[432], t_of_sexp$4, arg0_139);
         return [3, res0_140];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[4],
                 error_source_119,
                 tag_122,
                 sexp_121);
       }
       var sexp_args_133 = _bu_[2];
       if(sexp_args_133 && ! sexp_args_133[2]){
        var
         arg0_134 = sexp_args_133[1],
         res0_135 = caml_call2(Core[432], t_of_sexp$3, arg0_134);
        return [2, res0_135];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_119,
                tag_122,
                sexp_121);
      }
      var sexp_args_128 = _bu_[2];
      if(sexp_args_128 && ! sexp_args_128[2]){
       var
        arg0_129 = sexp_args_128[1],
        res0_130 = caml_call2(Core[432], t_of_sexp$1, arg0_129);
       return [1, res0_130];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_119,
               tag_122,
               sexp_121);
     }
     var sexp_args_123 = _bu_[2];
     if(sexp_args_123 && ! sexp_args_123[2]){
      var
       arg0_124 = sexp_args_123[1],
       res0_125 = caml_call2(Core[432], t_of_sexp$0, arg0_124);
      return [0, res0_125];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4],
              error_source_119,
              tag_122,
              sexp_121);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_119, sexp_121);
   }
   function sexp_of_t$5(param){
    switch(param[0]){
      case 0:
       var
        arg0_141 = param[1],
        res0_142 = caml_call2(Core[431], sexp_of_t$0, arg0_141);
       return [1, [0, _au_, [0, res0_142, 0]]];
      case 1:
       var
        arg0_143 = param[1],
        res0_144 = caml_call2(Core[431], sexp_of_t$1, arg0_143);
       return [1, [0, _av_, [0, res0_144, 0]]];
      case 2:
       var
        arg0_145 = param[1],
        res0_146 = caml_call2(Core[431], sexp_of_t$3, arg0_145);
       return [1, [0, _aw_, [0, res0_146, 0]]];
      default:
       var
        arg0_147 = param[1],
        res0_148 = caml_call2(Core[431], sexp_of_t$4, arg0_147);
       return [1, [0, _ax_, [0, res0_148, 0]]];
    }
   }
   var
    _ay_ = [0, [0, cst_V4, [0, caml_call1(Core[419], bin_shape_t$4), 0]], 0],
    _az_ =
      [0, [0, cst_V3, [0, caml_call1(Core[419], bin_shape_t$3), 0]], _ay_],
    _aA_ =
      [0, [0, cst_V2, [0, caml_call1(Core[419], bin_shape_t$1), 0]], _az_],
    _aB_ =
      [0, [0, cst_V1, [0, caml_call1(Core[419], bin_shape_t$0), 0]], _aA_],
    _aC_ = caml_call1(Bin_prot_Shape[5], _aB_),
    _aD_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _aC_], 0],
    _aE_ =
      caml_call1(Bin_shape[4][1], "src/protocol/bonsai_protocol.ml:106:2"),
    group$5 = caml_call2(Bin_prot_Shape[2], _aE_, _aD_),
    _aF_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t$5 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$5, _aF_), 0);
   function bin_size_t$5(param){
    switch(param[0]){
      case 0:
       var v1 = param[1], _bp_ = caml_call2(Core[420], bin_size_t$0, v1);
       return caml_call2(Bin_prot_Common[23], 1, _bp_);
      case 1:
       var v1$0 = param[1], _bq_ = caml_call2(Core[420], bin_size_t$1, v1$0);
       return caml_call2(Bin_prot_Common[23], 1, _bq_);
      case 2:
       var v1$1 = param[1], _br_ = caml_call2(Core[420], bin_size_t$3, v1$1);
       return caml_call2(Bin_prot_Common[23], 1, _br_);
      default:
       var v1$2 = param[1], _bs_ = caml_call2(Core[420], bin_size_t$4, v1$2);
       return caml_call2(Bin_prot_Common[23], 1, _bs_);
    }
   }
   function bin_write_t$5(buf, pos, param){
    switch(param[0]){
      case 0:
       var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
       return caml_call4(Core[421], bin_write_t$0, buf, pos$0, v1);
      case 1:
       var
        v1$0 = param[1],
        pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
       return caml_call4(Core[421], bin_write_t$1, buf, pos$1, v1$0);
      case 2:
       var
        v1$1 = param[1],
        pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
       return caml_call4(Core[421], bin_write_t$3, buf, pos$2, v1$1);
      default:
       var
        v1$2 = param[1],
        pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
       return caml_call4(Core[421], bin_write_t$4, buf, pos$3, v1$2);
    }
   }
   var
    bin_writer_t$5 = [0, bin_size_t$5, bin_write_t$5],
    cst_src_protocol_bonsai_protoc$12 = cst_src_protocol_bonsai_protoc$18,
    _aG_ = [1, cst_src_protocol_bonsai_protoc$18];
   function bin_read_t$11(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_protocol_bonsai_protoc$12,
             pos_ref[1]);
   }
   function bin_read_t$12(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(3 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _aG_, pos_ref[1]);
    switch(match){
      case 0:
       var
        arg_1 = caml_call2(caml_call1(Core[423], bin_read_t$2), buf, pos_ref);
       return [0, arg_1];
      case 1:
       var
        arg_1$0 =
          caml_call2(caml_call1(Core[423], bin_read_t$4), buf, pos_ref);
       return [1, arg_1$0];
      case 2:
       var
        arg_1$1 =
          caml_call2(caml_call1(Core[423], bin_read_t$8), buf, pos_ref);
       return [2, arg_1$1];
      default:
       var
        arg_1$2 =
          caml_call2(caml_call1(Core[423], bin_read_t$10), buf, pos_ref);
       return [3, arg_1$2];
    }
   }
   var
    bin_reader_t$5 = [0, bin_read_t$12, bin_read_t$11],
    bin_t$5 = [0, bin_shape_t$5, bin_writer_t$5, bin_reader_t$5],
    _aH_ =
      [0,
       [0, cst_entry_type$1, Core[471]],
       [0,
        [0, cst_start_time$1, Core[332]],
        [0, [0, cst_duration$1, Core[332]], 0]]],
    _aI_ = [0, caml_call2(Bin_prot_Shape[6], cst_Other, [0, Core[471]]), 0],
    _aJ_ =
      [0,
       caml_call2(Bin_prot_Shape[6], cst_Bonsai, [0, Bonsai_Node_path[5]]),
       _aI_],
    _aK_ =
      caml_call1(Bin_shape[4][1], "src/protocol/bonsai_protocol.ml:116:14"),
    _aL_ =
      [0, [0, cst_label$1, caml_call2(Bin_prot_Shape[8], _aK_, _aJ_)], _aH_],
    _aM_ = caml_call1(Bin_prot_Shape[4], _aL_),
    _aN_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _aM_], 0],
    _aO_ =
      caml_call1(Bin_shape[4][1], "src/protocol/bonsai_protocol.ml:115:2"),
    group$6 = caml_call2(Bin_prot_Shape[2], _aO_, _aN_),
    _aP_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t$6 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$6, _aP_), 0);
   function bin_size_t$6(param){
    var v4 = param[4], v3 = param[3], v2 = param[2], v1 = param[1], size = 0;
    if(370492634 <= v1[1])
     var
      args = v1[2],
      size_args = caml_call1(Bonsai_Node_path[1], args),
      _bl_ = caml_call2(Bin_prot_Common[23], size_args, 4);
    else
     var
      args$0 = v1[2],
      size_args$0 = caml_call1(Core[472], args$0),
      _bl_ = caml_call2(Bin_prot_Common[23], size_args$0, 4);
    var
     size$0 = caml_call2(Bin_prot_Common[23], size, _bl_),
     _bm_ = caml_call1(Core[472], v2),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _bm_),
     _bn_ = caml_call1(Core[333], v3),
     size$2 = caml_call2(Bin_prot_Common[23], size$1, _bn_),
     _bo_ = caml_call1(Core[333], v4);
    return caml_call2(Bin_prot_Common[23], size$2, _bo_);
   }
   function bin_write_t$6(buf, pos, param){
    var v4 = param[4], v3 = param[3], v2 = param[2], v1 = param[1];
    if(370492634 <= v1[1])
     var
      args = v1[2],
      pos$0 = caml_call3(Bin_prot_Write[29], buf, pos, 370492634),
      pos$1 = caml_call3(Bonsai_Node_path[2], buf, pos$0, args);
    else
     var
      args$0 = v1[2],
      pos$4 = caml_call3(Bin_prot_Write[29], buf, pos, -912009552),
      pos$1 = caml_call3(Core[473], buf, pos$4, args$0);
    var
     pos$2 = caml_call3(Core[473], buf, pos$1, v2),
     pos$3 = caml_call3(Core[334], buf, pos$2, v3);
    return caml_call3(Core[334], buf, pos$3, v4);
   }
   var
    bin_writer_t$6 = [0, bin_size_t$6, bin_write_t$6],
    cst_src_protocol_bonsai_protoc$13 = cst_src_protocol_bonsai_protoc$17,
    cst_src_protocol_bonsai_protoc$14 = cst_src_protocol_bonsai_protoc$17;
   function bin_read_t$13(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_protocol_bonsai_protoc$13,
             pos_ref[1]);
   }
   function bin_read_t$14(buf, pos_ref){
    var vint = caml_call2(Bin_prot_Read[28], buf, pos_ref);
    try{
     if(-912009552 === vint)
      var
       arg_1 = caml_call2(Core[475], buf, pos_ref),
       _bj_ = [0, -912009552, arg_1];
     else{
      if(370492634 !== vint)
       throw caml_maybe_attach_backtrace(Bin_prot_Common[13], 0);
      var
       arg_1$0 = caml_call2(Bonsai_Node_path[3], buf, pos_ref),
       _bj_ = [0, 370492634, arg_1$0];
     }
     var v_label = _bj_;
    }
    catch(_bk_){
     var _bi_ = caml_wrap_exception(_bk_);
     if(_bi_ !== Bin_prot_Common[13])
      throw caml_maybe_attach_backtrace(_bi_, 0);
     var
      v_label =
        caml_call2
         (Bin_prot_Common[19], cst_src_protocol_bonsai_protoc$14, pos_ref[1]);
    }
    var
     v_entry_type = caml_call2(Core[475], buf, pos_ref),
     v_start_time = caml_call2(Core[336], buf, pos_ref),
     v_duration = caml_call2(Core[336], buf, pos_ref);
    return [0, v_label, v_entry_type, v_start_time, v_duration];
   }
   var
    bin_reader_t$6 = [0, bin_read_t$14, bin_read_t$13],
    bin_t$6 = [0, bin_shape_t$6, bin_writer_t$6, bin_reader_t$6],
    cst_duration$0 = cst_duration$1,
    cst_start_time$0 = cst_start_time$1,
    cst_entry_type$0 = cst_entry_type$1,
    cst_label$0 = cst_label$1,
    _aQ_ = [0, cst_duration$1],
    _aR_ = [0, cst_start_time$1],
    _aS_ = [0, cst_entry_type$1],
    _aT_ = [0, cst_Bonsai],
    _aU_ = [0, cst_label$1],
    _aV_ = [0, cst_Other];
   function t_of_sexp$6(x_163){
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_150,
             [0,
              cst_label$0,
              1,
              function(sexp_162){
               try{
                if(0 === sexp_162[0])
                 var
                  atom_152 = sexp_162[1],
                  _a$_ =
                    atom_152 !== cst_Bonsai
                     ? atom_152
                       !== cst_Other
                       ? caml_call1(Sexplib0_Sexp_conv_error[19], 0)
                       : caml_call2
                         (Sexplib0_Sexp_conv_error[23], error_source_150, sexp_162)
                     : caml_call2
                       (Sexplib0_Sexp_conv_error[23], error_source_150, sexp_162),
                  _ba_ = _a$_;
                else{
                 var _bb_ = sexp_162[1];
                 if(_bb_){
                  var match = _bb_[1];
                  if(0 === match[0]){
                   var sexp_args_155 = _bb_[2], atom_152$0 = match[1];
                   if(atom_152$0 !== cst_Bonsai)
                    if(atom_152$0 !== cst_Other)
                     var _bc_ = caml_call1(Sexplib0_Sexp_conv_error[19], 0);
                    else{
                     a:
                     {
                      if(sexp_args_155 && ! sexp_args_155[2]){
                       var
                        arg0_157 = sexp_args_155[1],
                        res0_158 = caml_call1(Core[485], arg0_157),
                        _bf_ = [0, -912009552, res0_158];
                       break a;
                      }
                      var
                       _bf_ =
                         caml_call3
                          (Sexplib0_Sexp_conv_error[22],
                           error_source_150,
                           atom_152$0,
                           sexp_162);
                     }
                     var _bc_ = _bf_;
                    }
                   else{
                    a:
                    {
                     if(sexp_args_155 && ! sexp_args_155[2]){
                      var
                       arg0_160 = sexp_args_155[1],
                       res0_161 = caml_call1(Bonsai_Node_path[9], arg0_160),
                       _bg_ = [0, 370492634, res0_161];
                      break a;
                     }
                     var
                      _bg_ =
                        caml_call3
                         (Sexplib0_Sexp_conv_error[22],
                          error_source_150,
                          atom_152$0,
                          sexp_162);
                    }
                    var _bc_ = _bg_;
                   }
                   var _bd_ = _bc_;
                  }
                  else
                   var
                    _bd_ =
                      caml_call2
                       (Sexplib0_Sexp_conv_error[24], error_source_150, sexp_162);
                  var _be_ = _bd_;
                 }
                 else
                  var
                   _be_ =
                     caml_call2
                      (Sexplib0_Sexp_conv_error[25], error_source_150, sexp_162);
                 var _ba_ = _be_;
                }
                return _ba_;
               }
               catch(_bh_){
                var _a__ = caml_wrap_exception(_bh_);
                if(_a__ === Sexplib0_Sexp_conv_error[18])
                 return caml_call2
                         (Sexplib0_Sexp_conv_error[20], error_source_150, sexp_162);
                throw caml_maybe_attach_backtrace(_a__, 0);
               }
              },
              [0,
               cst_entry_type$0,
               1,
               Core[485],
               [0,
                cst_start_time$0,
                1,
                Core[346],
                [0, cst_duration$0, 1, Core[346], 0]]]],
             function(param){
              return param !== cst_duration$1
                      ? param
                        !== cst_entry_type$1
                        ? param
                          !== cst_label$1
                          ? param !== cst_start_time$1 ? -1 : 2
                          : 0
                        : 1
                      : 3;
             },
             0,
             function(param){
              var
               _a8_ = param[2],
               _a9_ = _a8_[2],
               duration = _a9_[2][1],
               start_time = _a9_[1],
               entry_type = _a8_[1],
               label = param[1];
              return [0, label, entry_type, start_time, duration];
             },
             x_163);
   }
   function sexp_of_t$6(param){
    var
     duration_173 = param[4],
     start_time_171 = param[3],
     entry_type_169 = param[2],
     label_165 = param[1],
     arg_174 = caml_call1(Core[345], duration_173),
     bnds_164 = [0, [1, [0, _aQ_, [0, arg_174, 0]]], 0],
     arg_172 = caml_call1(Core[345], start_time_171),
     bnds_164$0 = [0, [1, [0, _aR_, [0, arg_172, 0]]], bnds_164],
     arg_170 = caml_call1(Core[484], entry_type_169),
     bnds_164$1 = [0, [1, [0, _aS_, [0, arg_170, 0]]], bnds_164$0];
    if(370492634 <= label_165[1])
     var
      v_167 = label_165[2],
      arg_166 =
        [1, [0, _aT_, [0, caml_call1(Bonsai_Node_path[10], v_167), 0]]];
    else
     var
      v_168 = label_165[2],
      arg_166 = [1, [0, _aV_, [0, caml_call1(Core[484], v_168), 0]]];
    var bnds_164$2 = [0, [1, [0, _aU_, [0, arg_166, 0]]], bnds_164$1];
    return [1, bnds_164$2];
   }
   var
    _aW_ =
      caml_call1
       (Bin_prot_Shape[5],
        [0,
         [0, cst_Graph_info, [0, Bonsai_Graph_info[6], 0]],
         [0, [0, cst_Performance_measure, [0, bin_shape_t$6, 0]], 0]]),
    _aX_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _aW_], 0],
    _aY_ =
      caml_call1(Bin_shape[4][1], "src/protocol/bonsai_protocol.ml:125:2"),
    group$7 = caml_call2(Bin_prot_Shape[2], _aY_, _aX_),
    _aZ_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t$7 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$7, _aZ_), 0);
   function bin_size_t$7(param){
    if(0 === param[0]){
     var v1 = param[1], _a6_ = caml_call1(Bonsai_Graph_info[2], v1);
     return caml_call2(Bin_prot_Common[23], 1, _a6_);
    }
    var v1$0 = param[1], _a7_ = bin_size_t$6(v1$0);
    return caml_call2(Bin_prot_Common[23], 1, _a7_);
   }
   function bin_write_t$7(buf, pos, param){
    if(0 === param[0]){
     var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
     return caml_call3(Bonsai_Graph_info[3], buf, pos$0, v1);
    }
    var v1$0 = param[1], pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
    return bin_write_t$6(buf, pos$1, v1$0);
   }
   var
    bin_writer_t$7 = [0, bin_size_t$7, bin_write_t$7],
    cst_src_protocol_bonsai_protoc$15 = cst_src_protocol_bonsai_protoc$16,
    _a0_ = [1, cst_src_protocol_bonsai_protoc$16];
   function bin_read_t$15(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_protocol_bonsai_protoc$15,
             pos_ref[1]);
   }
   function bin_read_t$16(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(0 === match){
     var arg_1 = caml_call2(Bonsai_Graph_info[4], buf, pos_ref);
     return [0, arg_1];
    }
    if(1 !== match) return caml_call2(Bin_prot_Common[18], _a0_, pos_ref[1]);
    var arg_1$0 = bin_read_t$14(buf, pos_ref);
    return [1, arg_1$0];
   }
   var
    bin_reader_t$7 = [0, bin_read_t$16, bin_read_t$15],
    bin_t$7 = [0, bin_shape_t$7, bin_writer_t$7, bin_reader_t$7],
    _a1_ = [0, cst_Graph_info],
    _a2_ = [0, cst_Performance_measure];
   function t_of_sexp$7(sexp_179){
    a:
    {
     if(0 === sexp_179[0]){
      var _a3_ = sexp_179[1];
      b:
      if(_a3_ !== cst_Graph_info){
       if(_a3_ !== cst_Performance_measure){
        if(_a3_ === cst_graph_info) break b;
        if(_a3_ !== cst_performance_measure) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_177, sexp_179);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5], error_source_177, sexp_179);
     }
     var _a4_ = sexp_179[1];
     if(! _a4_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_177, sexp_179);
     var _a5_ = _a4_[1];
     if(0 !== _a5_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_177, sexp_179);
     var tag_180 = _a5_[1];
     b:
     if(tag_180 !== cst_Graph_info){
      if(tag_180 !== cst_Performance_measure){
       if(tag_180 === cst_graph_info) break b;
       if(tag_180 !== cst_performance_measure) break a;
      }
      var sexp_args_186 = _a4_[2];
      if(sexp_args_186 && ! sexp_args_186[2]){
       var arg0_187 = sexp_args_186[1], res0_188 = t_of_sexp$6(arg0_187);
       return [1, res0_188];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_177,
               tag_180,
               sexp_179);
     }
     var sexp_args_181 = _a4_[2];
     if(sexp_args_181 && ! sexp_args_181[2]){
      var
       arg0_182 = sexp_args_181[1],
       res0_183 = caml_call1(Bonsai_Graph_info[10], arg0_182);
      return [0, res0_183];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4],
              error_source_177,
              tag_180,
              sexp_179);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_177, sexp_179);
   }
   function sexp_of_t$7(param){
    if(0 === param[0]){
     var
      arg0_189 = param[1],
      res0_190 = caml_call1(Bonsai_Graph_info[11], arg0_189);
     return [1, [0, _a1_, [0, res0_190, 0]]];
    }
    var arg0_191 = param[1], res0_192 = sexp_of_t$6(arg0_191);
    return [1, [0, _a2_, [0, res0_192, 0]]];
   }
   var Worker_message = [0];
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai_protocol);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_protocol);
   var
    Bonsai_protocol =
      [0,
       [0,
        bin_size_t$6,
        bin_write_t$6,
        bin_read_t$14,
        bin_read_t$13,
        bin_shape_t$6,
        bin_writer_t$6,
        bin_reader_t$6,
        bin_t$6,
        t_of_sexp$6,
        sexp_of_t$6],
       [0,
        bin_size_t$7,
        bin_write_t$7,
        bin_read_t$16,
        bin_read_t$15,
        bin_shape_t$7,
        bin_writer_t$7,
        bin_reader_t$7,
        bin_t$7,
        t_of_sexp$7,
        sexp_of_t$7],
       Worker_message,
       [0,
        [0,
         [0,
          t_of_sexp,
          sexp_of_t,
          bin_size_t,
          bin_write_t,
          bin_read_t$0,
          bin_read_t,
          bin_shape_t,
          bin_writer_t,
          bin_reader_t,
          bin_t]],
        [0,
         [0,
          t_of_sexp$0,
          sexp_of_t$0,
          bin_size_t$0,
          bin_write_t$0,
          bin_read_t$2,
          bin_read_t$1,
          bin_shape_t$0,
          bin_writer_t$0,
          bin_reader_t$0,
          bin_t$0],
         [0,
          bin_size_t$1,
          bin_write_t$1,
          bin_read_t$4,
          bin_read_t$3,
          bin_shape_t$1,
          bin_writer_t$1,
          bin_reader_t$1,
          bin_t$1,
          t_of_sexp$1,
          sexp_of_t$1,
          of_v1],
         [0,
          bin_size_t$2,
          bin_write_t$2,
          bin_read_t$6,
          bin_read_t$5,
          bin_shape_t$2,
          bin_writer_t$2,
          bin_reader_t$2,
          bin_t$2,
          t_of_sexp$2,
          sexp_of_t$2,
          of_v2]],
        [0,
         [0,
          bin_size_t$3,
          bin_write_t$3,
          bin_read_t$8,
          bin_read_t$7,
          bin_shape_t$3,
          bin_writer_t$3,
          bin_reader_t$3,
          bin_t$3,
          t_of_sexp$3,
          sexp_of_t$3],
         [0,
          t_of_sexp$4,
          sexp_of_t$4,
          bin_size_t$4,
          bin_write_t$4,
          bin_read_t$10,
          bin_read_t$9,
          bin_shape_t$4,
          bin_writer_t$4,
          bin_reader_t$4,
          bin_t$4,
          of_v1$0]]],
       [0,
        t_of_sexp$5,
        sexp_of_t$5,
        bin_size_t$5,
        bin_write_t$5,
        bin_read_t$12,
        bin_read_t$11,
        bin_shape_t$5,
        bin_writer_t$5,
        bin_reader_t$5,
        bin_t$5]];
   runtime.caml_register_global(275, Bonsai_protocol, cst_Bonsai_protocol);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
