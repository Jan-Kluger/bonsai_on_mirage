// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Incr_map__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Incr_map = [0];
   runtime.caml_register_global(0, Incr_map, "Incr_map__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incr_map__Incr_map_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incr_map_Incr_map_intf = "Incr_map__Incr_map_intf",
    cst_incr_map = "incr_map";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incr_map_Incr_map_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incr_map);
   caml_call1(Expect_test_collector[6][1], "src/incr_map_intf.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_incr_map, "incr_map_intf.ml");
   var Instrumentation = [0];
   caml_call1(Ppx_inline_test_lib[6], cst_incr_map);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incr_map_Incr_map_intf);
   var Incr_map_Incr_map_intf = [0, Instrumentation];
   runtime.caml_register_global
    (11, Incr_map_Incr_map_intf, cst_Incr_map_Incr_map_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incr_map
//# unitInfo: Requires: Base__Option, CamlinternalLazy, Core, Core__Bool, Core__Info, Core__Int, Core__Lazy, Core__List, Core__Map, Core__Maybe_bound, Core__Option, Core__Sequence, Core__Set, Core__Tuple, Expect_test_collector, Incr_map__Incr_map_intf, Incremental, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incr_map = "Incr_map",
    cst_incr_map = "incr_map",
    cst_src_incr_map_ml = "src/incr_map.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Int = global_data.Core__Int,
    Core_Map = global_data.Core__Map,
    Core = global_data.Core,
    Incremental = global_data.Incremental,
    Core_Option = global_data.Core__Option,
    Core_Info = global_data.Core__Info,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Core_List = global_data.Core__List,
    Core_Bool = global_data.Core__Bool,
    Core_Tuple = global_data.Core__Tuple,
    Assert_failure = global_data.Assert_failure,
    Core_Maybe_bound = global_data.Core__Maybe_bound,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Lazy = global_data.Core__Lazy,
    Core_Set = global_data.Core__Set,
    Base_Option = global_data.Base__Option,
    Core_Sequence = global_data.Core__Sequence,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incr_map);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incr_map);
   caml_call1(Expect_test_collector[6][1], cst_src_incr_map_ml);
   caml_call2(Ppx_inline_test_lib[5], cst_incr_map, "incr_map.ml");
   var
    _a_ = [0, cst_src_incr_map_ml, 329, 11],
    _b_ = [0, 1],
    _c_ = [0, 1],
    cst_impossible_case_BUG_in_inc =
      "impossible case: BUG in incr_map.ml subrange",
    _d_ = [0, 1],
    cst_BUG_Hit_supposedly_impossi =
      "BUG: Hit supposedly impossible case in Incr_map.index_by",
    _e_ = [0, 1],
    _f_ = [0, "to_"],
    _g_ = [0, "from"],
    cst_Invalid_indices = "Invalid indices",
    _h_ = [0, 0, 0],
    _i_ = [0, cst_src_incr_map_ml, 1444, 10],
    _j_ = [0, cst_src_incr_map_ml, 1443, 10],
    _k_ = [0, cst_src_incr_map_ml, 1459, 6],
    _l_ = [0, [0, 0, 0]],
    _m_ = [0, cst_src_incr_map_ml, 1459, 6],
    _n_ = [0, cst_src_incr_map_ml, 1459, 6],
    _o_ = [0, cst_src_incr_map_ml, 1459, 6],
    _p_ = [0, cst_src_incr_map_ml, 1459, 6],
    _q_ = [0, cst_src_incr_map_ml, 1459, 6],
    _r_ = [0, cst_src_incr_map_ml, 1459, 6],
    _s_ = [0, cst_src_incr_map_ml, 1459, 6],
    _t_ = [0, cst_src_incr_map_ml, 1459, 6],
    _u_ = [0, [0, 0, 0]],
    _v_ = [0, 1],
    _w_ = [0, 1],
    _x_ = [0, 1],
    _y_ = [0, 1],
    _z_ = [0, 1];
   function no_instrumentation(f){return caml_call1(f, 0);}
   function with_old(instrumentation, i, f){
    var old = [0, 0];
    return caml_call2
            (Incremental[76][3][5],
             i,
             function(a){
              return caml_call1
                      (instrumentation,
                       function(param){
                        var b = caml_call2(f, old[1], a);
                        old[1] = [0, [0, a, b]];
                        return b;
                       });
             });
   }
   function cutoff(opt, map, cutoff){
    var instrumentation = opt ? opt[1] : no_instrumentation;
    function data_equal(old_value, new_value){
     return caml_call3(Incremental[58][10], cutoff, old_value, new_value);
    }
    return with_old
            (instrumentation,
             map,
             function(old, cur){
              if(! old) return cur;
              var old$0 = old[1][2];
              return caml_call5
                      (Core_Map[85],
                       old$0,
                       cur,
                       data_equal,
                       old$0,
                       function(acc, param){
                        var change = param[2], key = param[1], _dr_ = change[1];
                        if(847852583 === _dr_)
                         return caml_call2(Core_Map[45], acc, key);
                        if(1013247643 <= _dr_){
                         var new_value = change[2][2];
                         return caml_call3(Core_Map[36], acc, key, new_value);
                        }
                        var new$0 = change[2];
                        return caml_call3(Core_Map[35], acc, key, new$0);
                       });
             });
   }
   function unordered_fold
   (instrumentation,
    _dl_,
    update,
    specialized_initial,
    _dk_,
    opt,
    map,
    init,
    add,
    remove){
    var
     data_equal =
       _dl_ ? _dl_[1] : function(_dq_, _dp_){return _dq_ === _dp_ ? 1 : 0;},
     finalize = _dk_ ? _dk_[1] : function(_do_){return _do_;},
     revert_to_init_when_empty = opt ? opt[1] : 0;
    function default$0(key, old_data, new_data, acc){
     return caml_call3
             (add, key, new_data, caml_call3(remove, key, old_data, acc));
    }
    var update$0 = caml_call2(Core_Option[35], update, default$0);
    return with_old
            (instrumentation,
             map,
             function(old, new_in){
              if(old){
               var match = old[1], old_out = match[2], old_in = match[1];
               a:
               {
                if(revert_to_init_when_empty){
                 var _dm_ = caml_call1(Core_Map[33], new_in);
                 if(caml_call2(Core[89], _dm_, 0)){var init$0 = init; break a;}
                }
                var
                 init$0 =
                   caml_call5
                    (Core_Map[85],
                     old_in,
                     new_in,
                     data_equal,
                     old_out,
                     function(acc, param){
                      var change = param[2], key = param[1], _dn_ = change[1];
                      if(847852583 === _dn_){
                       var old = change[2];
                       return caml_call3(remove, key, old, acc);
                      }
                      if(1013247643 <= _dn_){
                       var match = change[2], new$0 = match[2], old$0 = match[1];
                       return caml_call4(update$0, key, old$0, new$0, acc);
                      }
                      var new$1 = change[2];
                      return caml_call3(add, key, new$1, acc);
                     });
               }
               var acc = init$0;
              }
              else if(specialized_initial)
               var
                initial = specialized_initial[1],
                acc = caml_call2(initial, init, new_in);
              else
               var acc = caml_call3(Core_Map[59], new_in, init, add);
              return caml_call1(finalize, acc);
             });
   }
   function unordered_fold_nested_maps
   (instrumentation,
    opt,
    revert_to_init_when_empty,
    update,
    incr_map,
    init,
    add,
    remove){
    var
     data_equal =
       opt ? opt[1] : function(_dj_, _di_){return _dj_ === _di_ ? 1 : 0;};
    if(update)
     var update$0 = update[1], update$1 = update$0;
    else
     var
      update$1 =
        function(outer_key, inner_key, old_data, new_data, acc){
         return caml_call4
                 (add,
                  outer_key,
                  inner_key,
                  new_data,
                  caml_call4(remove, outer_key, inner_key, old_data, acc));
        };
    return unordered_fold
            (instrumentation,
             0,
             [0,
              function(outer_key, old_inner_map, new_inner_map, acc){
               return caml_call2
                       (caml_call3
                         (Core_Map[85], old_inner_map, new_inner_map, data_equal),
                        acc,
                        function(acc, param){
                         var diff = param[2], inner_key = param[1], _dh_ = diff[1];
                         if(847852583 === _dh_){
                          var data_removed = diff[2];
                          return caml_call4
                                  (remove, outer_key, inner_key, data_removed, acc);
                         }
                         if(1013247643 <= _dh_){
                          var
                           match = diff[2],
                           new_data = match[2],
                           old_data = match[1];
                          return caml_call5
                                  (update$1, outer_key, inner_key, old_data, new_data, acc);
                         }
                         var data_added = diff[2];
                         return caml_call4
                                 (add, outer_key, inner_key, data_added, acc);
                        });
              }],
             0,
             0,
             revert_to_init_when_empty,
             incr_map,
             init,
             function(outer_key, inner_map, acc){
              return caml_call3
                      (Core_Map[59],
                       inner_map,
                       acc,
                       function(inner_key, data, acc){
                        return caml_call4(add, outer_key, inner_key, data, acc);
                       });
             },
             function(outer_key, inner_map, acc){
              return caml_call3
                      (Core_Map[59],
                       inner_map,
                       acc,
                       function(inner_key, data, acc){
                        return caml_call4(remove, outer_key, inner_key, data, acc);
                       });
             });
   }
   function with_comparator(get_comparator, x, f){
    var
     _df_ = caml_call2(Incremental[10], x, get_comparator),
     _dg_ = caml_call2(Incremental[34], 0, _df_);
    return caml_call2(Incremental[26], _dg_, f);
   }
   function with_comparator$0(map, f){
    return with_comparator(Core_Map[2], map, f);
   }
   function of_set(opt, set){
    var instrumentation = opt ? opt[1] : no_instrumentation;
    return with_comparator
            (Core_Set[6],
             set,
             function(comparator){
              var
               old_input = [0, caml_call1(Core_Set[3][1], comparator)],
               old_output = [0, caml_call1(Core_Map[118][1], comparator)];
              return caml_call2
                      (Incremental[10],
                       set,
                       function(new_input){
                        return caml_call1
                                (instrumentation,
                                 function(param){
                                  var
                                   _dd_ = old_output[1],
                                   _de_ = caml_call2(Core_Set[18], old_input[1], new_input),
                                   new_output =
                                     caml_call3
                                      (Core_Sequence[18],
                                       _de_,
                                       _dd_,
                                       function(output, param){
                                        if(0 === param[0]){
                                         var k = param[1];
                                         return caml_call2(Core_Map[45], output, k);
                                        }
                                        var k$0 = param[1];
                                        return caml_call3(Core_Map[35], output, k$0, 0);
                                       });
                                  old_input[1] = new_input;
                                  old_output[1] = new_output;
                                  return new_output;
                                 });
                       });
             });
   }
   function generic_mapi(witness, instrumentation, opt, map, f){
    var
     data_equal =
       opt ? opt[1] : function(_dc_, _db_){return _dc_ === _db_ ? 1 : 0;};
    return with_old
            (instrumentation,
             map,
             function(old, input){
              if(0 !== caml_call1(Core_Map[33], input) && old){
               var
                match = old[1],
                old_output = match[2],
                old_input = match[1];
               return caml_call5
                       (Core_Map[85],
                        old_input,
                        input,
                        data_equal,
                        old_output,
                        function(output, param){
                         var change = param[2], key = param[1], _da_ = change[1];
                         if(847852583 === _da_)
                          return caml_call2(Core_Map[45], output, key);
                         var
                          new_data = 1013247643 <= _da_ ? change[2][2] : change[2],
                          res = caml_call2(f, key, new_data);
                         if(! witness)
                          return caml_call3(Core_Map[36], output, key, res);
                         if(! res) return caml_call2(Core_Map[45], output, key);
                         var output_data = res[1];
                         return caml_call3(Core_Map[36], output, key, output_data);
                        });
              }
              return witness
                      ? caml_call2(Core_Map[67], input, f)
                      : caml_call2(Core_Map[56], input, f);
             });
   }
   function mapi(opt, data_equal, map, f){
    var instrumentation = opt ? opt[1] : no_instrumentation;
    return generic_mapi(0, instrumentation, data_equal, map, f);
   }
   function filter_mapi(opt, data_equal, map, f){
    var instrumentation = opt ? opt[1] : no_instrumentation;
    return generic_mapi(1, instrumentation, data_equal, map, f);
   }
   function map(instrumentation, data_equal, map, f){
    return mapi
            (instrumentation,
             data_equal,
             map,
             function(param, data){return caml_call1(f, data);});
   }
   function filter_map(instrumentation, data_equal, map, f){
    return filter_mapi
            (instrumentation,
             data_equal,
             map,
             function(param, data){return caml_call1(f, data);});
   }
   function with_old2(instrumentation, i1, i2, f){
    var old = [0, 0];
    return caml_call3
            (Incremental[12],
             i1,
             i2,
             function(a1, a2){
              return caml_call1
                      (instrumentation,
                       function(param){
                        var b = caml_call3(f, old[1], a1, a2);
                        old[1] = [0, [0, a1, a2, b]];
                        return b;
                       });
             });
   }
   function unordered_fold_with_extra
   (_c4_,
    _c3_,
    _c2_,
    update,
    specialized_initial,
    _c1_,
    opt,
    map,
    extra,
    init,
    add,
    remove,
    extra_changed){
    var
     instrumentation = _c4_ ? _c4_[1] : no_instrumentation,
     data_equal =
       _c3_ ? _c3_[1] : function(_c$_, _c__){return _c$_ === _c__ ? 1 : 0;},
     extra_equal =
       _c2_ ? _c2_[1] : function(_c9_, _c8_){return _c9_ === _c8_ ? 1 : 0;},
     finalize = _c1_ ? _c1_[1] : function(_c7_){return _c7_;},
     revert_to_init_when_empty = opt ? opt[1] : 0;
    function default$0(key, old_data, new_data, acc, extra){
     return caml_call4
             (add,
              key,
              new_data,
              caml_call4(remove, key, old_data, acc, extra),
              extra);
    }
    var update$0 = caml_call2(Core_Option[35], update, default$0);
    return with_old2
            (instrumentation,
             map,
             extra,
             function(old, new_in, new_extra){
              if(old){
               var
                match = old[1],
                old_out = match[3],
                old_extra = match[2],
                old_in = match[1],
                acc =
                  caml_call2(extra_equal, old_extra, new_extra)
                   ? old_out
                   : caml_call4
                     (extra_changed, old_extra, new_extra, old_in, old_out);
               a:
               {
                if(revert_to_init_when_empty){
                 var _c5_ = caml_call1(Core_Map[33], new_in);
                 if(caml_call2(Core[89], _c5_, 0)){var init$0 = init; break a;}
                }
                var
                 init$0 =
                   caml_call5
                    (Core_Map[85],
                     old_in,
                     new_in,
                     data_equal,
                     acc,
                     function(acc, param){
                      var change = param[2], key = param[1], _c6_ = change[1];
                      if(847852583 === _c6_){
                       var old = change[2];
                       return caml_call4(remove, key, old, acc, new_extra);
                      }
                      if(1013247643 <= _c6_){
                       var match = change[2], new$0 = match[2], old$0 = match[1];
                       return caml_call5
                               (update$0, key, old$0, new$0, acc, new_extra);
                      }
                      var new$1 = change[2];
                      return caml_call4(add, key, new$1, acc, new_extra);
                     });
               }
               var acc$0 = init$0;
              }
              else if(specialized_initial)
               var
                initial = specialized_initial[1],
                acc$0 = caml_call3(initial, init, new_in, new_extra);
              else
               var
                acc$0 =
                  caml_call3
                   (Core_Map[59],
                    new_in,
                    init,
                    function(key, data, acc){
                     return caml_call4(add, key, data, acc, new_extra);
                    });
              return caml_call1(finalize, acc$0);
             });
   }
   function mapi_count(_cX_, opt, input, comparator, f){
    var
     instrumentation = _cX_ ? _cX_[1] : no_instrumentation,
     data_equal =
       opt ? opt[1] : function(_c0_, _cZ_){return _c0_ === _cZ_ ? 1 : 0;};
    function add(new_key, acc){
     return caml_call3
             (Core_Map[41],
              acc,
              new_key,
              function(param){
               if(! param) return 1;
               var n = param[1];
               return n + 1 | 0;
              });
    }
    function remove(new_key, acc){
     return caml_call3
             (Core_Map[40],
              acc,
              new_key,
              function(param){
               if(! param) return 0;
               var n = param[1];
               return 1 === n ? 0 : [0, n - 1 | 0];
              });
    }
    return unordered_fold
            (instrumentation,
             [0, data_equal],
             [0,
              function(key, old_data, new_data, acc){
               var
                prev_key = caml_call2(f, key, old_data),
                new_key = caml_call2(f, key, new_data),
                _cY_ = caml_call2(comparator[1][1], prev_key, new_key);
               return caml_call2(Core[89], _cY_, 0)
                       ? acc
                       : add(new_key, remove(prev_key, acc));
              }],
             0,
             0,
             0,
             input,
             caml_call1(Core_Map[4], comparator),
             function(key, data, acc){
              return add(caml_call2(f, key, data), acc);
             },
             function(key, data, acc){
              return remove(caml_call2(f, key, data), acc);
             });
   }
   function map_count(instrumentation, data_equal, input, comparator, f){
    return mapi_count
            (instrumentation,
             data_equal,
             input,
             comparator,
             function(param, data){return caml_call1(f, data);});
   }
   function min_helper(map){
    var match = caml_call1(Core_Map[86], map);
    if(! match) return 0;
    var min = match[1][1];
    return [0, min];
   }
   function max_helper(map){
    var match = caml_call1(Core_Map[88], map);
    if(! match) return 0;
    var max = match[1][1];
    return [0, max];
   }
   function bounds_helper(map){
    var
     match = caml_call1(Core_Map[86], map),
     match$0 = caml_call1(Core_Map[88], map);
    if(match){
     if(match$0){
      var max = match$0[1][1], min = match[1][1];
      return [0, [0, min, max]];
     }
    }
    else if(! match$0) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function mapi_min(instrumentation, data_equal, input, comparator, f){
    var _cW_ = mapi_count(instrumentation, data_equal, input, comparator, f);
    return caml_call2(Incremental[10], _cW_, min_helper);
   }
   function mapi_max(instrumentation, data_equal, input, comparator, f){
    var _cV_ = mapi_count(instrumentation, data_equal, input, comparator, f);
    return caml_call2(Incremental[10], _cV_, max_helper);
   }
   function mapi_bounds(instrumentation, data_equal, input, comparator, f){
    var _cU_ = mapi_count(instrumentation, data_equal, input, comparator, f);
    return caml_call2(Incremental[10], _cU_, bounds_helper);
   }
   function map_min(instrumentation, data_equal, input, comparator, f){
    return mapi_min
            (instrumentation,
             data_equal,
             input,
             comparator,
             function(param, data){return caml_call1(f, data);});
   }
   function map_max(instrumentation, data_equal, input, comparator, f){
    return mapi_max
            (instrumentation,
             data_equal,
             input,
             comparator,
             function(param, data){return caml_call1(f, data);});
   }
   function min_value(instrumentation, data_equal, input, comparator){
    return map_min
            (instrumentation,
             data_equal,
             input,
             comparator,
             function(_cT_){return _cT_;});
   }
   function max_value(instrumentation, data_equal, input, comparator){
    return map_max
            (instrumentation,
             data_equal,
             input,
             comparator,
             function(_cS_){return _cS_;});
   }
   function map_bounds(instrumentation, data_equal, input, comparator, f){
    return mapi_bounds
            (instrumentation,
             data_equal,
             input,
             comparator,
             function(param, data){return caml_call1(f, data);});
   }
   function value_bounds(instrumentation, data_equal, input, comparator){
    return map_bounds
            (instrumentation,
             data_equal,
             input,
             comparator,
             function(_cR_){return _cR_;});
   }
   function merge_shared_impl
   (old, new_left_map, new_right_map, data_equal_left, data_equal_right, f){
    var comparator = caml_call1(Core_Map[2], new_left_map);
    if(old)
     var
      x = old[1],
      old_output = x[3],
      old_right_map = x[2],
      old_left_map = x[1];
    else
     var
      old_left_map$0 = caml_call1(Core_Map[118][1], comparator),
      old_output = old_left_map$0,
      old_right_map = old_left_map$0,
      old_left_map = old_left_map$0;
    var
     left_diff =
       caml_call3(Core_Map[84], old_left_map, new_left_map, data_equal_left),
     right_diff =
       caml_call3
        (Core_Map[84], old_right_map, new_right_map, data_equal_right),
     _cP_ =
       caml_call3
        (Core_Sequence[62],
         left_diff,
         right_diff,
         function(_cQ_, param){
          var right_key = param[1], left_key = _cQ_[1];
          return caml_call2(comparator[1], left_key, right_key);
         });
    return caml_call3
            (Core_Sequence[18],
             _cP_,
             old_output,
             function(output, diff_element){
              if(2 === diff_element[0])
               var left_key = diff_element[1][1], key$0 = left_key;
              else
               var key = diff_element[1][1], key$0 = key;
              return caml_call4(f, old_output, key$0, output, diff_element);
             });
   }
   function new_data_from_diff_element(param){
    var _cO_ = param[1];
    if(847852583 === _cO_) return 0;
    var x = 1013247643 <= _cO_ ? param[2][2] : param[2];
    return [0, x];
   }
   function merge(_cI_, _cH_, opt, left_map, right_map, f){
    var
     instrumentation = _cI_ ? _cI_[1] : no_instrumentation,
     data_equal_left =
       _cH_ ? _cH_[1] : function(_cN_, _cM_){return _cN_ === _cM_ ? 1 : 0;},
     data_equal_right =
       opt ? opt[1] : function(_cL_, _cK_){return _cL_ === _cK_ ? 1 : 0;};
    return with_old2
            (instrumentation,
             left_map,
             right_map,
             function(old, new_left_map, new_right_map){
              return merge_shared_impl
                      (old,
                       new_left_map,
                       new_right_map,
                       data_equal_left,
                       data_equal_right,
                       function(param, key, output, diff_element){
                        switch(diff_element[0]){
                          case 0:
                           var
                            left_diff = diff_element[1][2],
                            right_data_opt =
                              caml_call2(Core_Map[42], new_right_map, key),
                            right_data_opt$0 = right_data_opt,
                            left_data_opt = new_data_from_diff_element(left_diff);
                           break;
                          case 1:
                           var
                            right_diff = diff_element[1][2],
                            right_data_opt$1 = new_data_from_diff_element(right_diff),
                            right_data_opt$0 = right_data_opt$1,
                            left_data_opt = caml_call2(Core_Map[42], new_left_map, key);
                           break;
                          default:
                           var
                            right_diff$0 = diff_element[2][2],
                            left_diff$0 = diff_element[1][2],
                            right_data_opt$2 = new_data_from_diff_element(right_diff$0),
                            left_data_opt$0 = new_data_from_diff_element(left_diff$0),
                            right_data_opt$0 = right_data_opt$2,
                            left_data_opt = left_data_opt$0;
                        }
                        if(left_data_opt){
                         var x = left_data_opt[1];
                         if(right_data_opt$0)
                          var
                           y = right_data_opt$0[1],
                           _cJ_ = caml_call2(f, key, [0, 737457313, [0, x, y]]);
                         else
                          var _cJ_ = caml_call2(f, key, [0, 847852583, x]);
                         var output_data_opt = _cJ_;
                        }
                        else if(right_data_opt$0)
                         var
                          y$0 = right_data_opt$0[1],
                          output_data_opt = caml_call2(f, key, [0, -57574468, y$0]);
                        else
                         var output_data_opt = 0;
                        if(! output_data_opt)
                         return caml_call2(Core_Map[45], output, key);
                        var data = output_data_opt[1];
                        return caml_call3(Core_Map[36], output, key, data);
                       });
             });
   }
   function merge_both_some(_cu_, _ct_, _cs_, opt, left_map, right_map, f){
    var
     instrumentation = _cu_ ? _cu_[1] : no_instrumentation,
     data_equal_left =
       _ct_ ? _ct_[1] : function(_cG_, _cF_){return _cG_ === _cF_ ? 1 : 0;},
     data_equal_right =
       _cs_ ? _cs_[1] : function(_cE_, _cD_){return _cE_ === _cD_ ? 1 : 0;},
     out_equal =
       opt ? opt[1] : function(_cC_, _cB_){return _cC_ === _cB_ ? 1 : 0;};
    return with_old2
            (instrumentation,
             left_map,
             right_map,
             function(old, new_left_map, new_right_map){
              var
               comparator = caml_call1(Core_Map[2], new_left_map),
               empty = caml_call1(Core_Map[118][1], comparator),
               match = caml_call1(Core_Map[33], new_left_map),
               match$0 = caml_call1(Core_Map[33], new_right_map);
              if(0 !== match && 0 !== match$0)
               return merge_shared_impl
                       (old,
                        new_left_map,
                        new_right_map,
                        data_equal_left,
                        data_equal_right,
                        function(old_output, key, output, diff_element){
                         switch(diff_element[0]){
                           case 0:
                            var
                             left_diff = diff_element[1][2],
                             _cv_ = new_data_from_diff_element(left_diff),
                             left_and_right_data_opt =
                               caml_call2
                                (Base_Option[27][4][2],
                                 _cv_,
                                 function(left_data){
                                  var _cA_ = caml_call2(Core_Map[42], new_right_map, key);
                                  return caml_call2
                                          (Base_Option[27][4][3],
                                           _cA_,
                                           function(right_data){return [0, left_data, right_data];});
                                 });
                            break;
                           case 1:
                            var
                             right_diff = diff_element[1][2],
                             _cw_ = new_data_from_diff_element(right_diff),
                             left_and_right_data_opt =
                               caml_call2
                                (Base_Option[27][4][2],
                                 _cw_,
                                 function(right_data){
                                  var _cz_ = caml_call2(Core_Map[42], new_left_map, key);
                                  return caml_call2
                                          (Base_Option[27][4][3],
                                           _cz_,
                                           function(left_data){return [0, left_data, right_data];});
                                 });
                            break;
                           default:
                            var
                             right_diff$0 = diff_element[2][2],
                             left_diff$0 = diff_element[1][2],
                             _cx_ = new_data_from_diff_element(left_diff$0),
                             left_and_right_data_opt =
                               caml_call2
                                (Base_Option[27][4][2],
                                 _cx_,
                                 function(left_data){
                                  var _cy_ = new_data_from_diff_element(right_diff$0);
                                  return caml_call2
                                          (Base_Option[27][4][3],
                                           _cy_,
                                           function(right_data){return [0, left_data, right_data];});
                                 });
                         }
                         var prev_out = caml_call2(Core_Map[42], old_output, key);
                         if(! left_and_right_data_opt)
                          return prev_out
                                  ? caml_call2(Core_Map[45], output, key)
                                  : output;
                         var
                          match = left_and_right_data_opt[1],
                          y = match[2],
                          x = match[1],
                          data = caml_call3(f, key, x, y);
                         if(prev_out){
                          var prev_out$0 = prev_out[1];
                          if(caml_call2(out_equal, data, prev_out$0)) return output;
                         }
                         return caml_call3(Core_Map[36], output, key, data);
                        });
              return empty;
             });
   }
   function generic_mapi_with_comparator
   (witness, instrumentation, cutoff, opt, lhs, comparator, f){
    var
     data_equal =
       opt ? opt[1] : function(_cr_, _cq_){return _cr_ === _cq_ ? 1 : 0;},
     incremental_state = caml_call1(Incremental[4], lhs),
     empty_map = caml_call1(Core_Map[118][1], comparator),
     prev_map = [0, empty_map],
     prev_nodes = [0, empty_map],
     acc = [0, empty_map],
     result =
       caml_call3
        (Incremental[79][2][2],
         incremental_state,
         0,
         function(param){return acc[1];}),
     on_inner_change =
       witness
        ? function
         (key, opt){
          var old = acc[1];
          if(opt)
           var data = opt[1], _cp_ = caml_call3(Core_Map[36], old, key, data);
          else
           var _cp_ = caml_call2(Core_Map[45], old, key);
          acc[1] = _cp_;
          return 0;
         }
        : function
         (key, data){
          acc[1] = caml_call3(Core_Map[36], acc[1], key, data);
          return 0;
         },
     lhs_change = [];
    caml_update_dummy
     (lhs_change,
      [246,
       function(_ci_){
        return caml_call2
                (Incremental[10],
                 lhs,
                 function(map){
                  return caml_call1
                          (instrumentation,
                           function(param){
                            var
                             new_nodes =
                               caml_call5
                                (Core_Map[85],
                                 prev_map[1],
                                 map,
                                 data_equal,
                                 prev_nodes[1],
                                 function(nodes, param){
                                  var changed = param[2], key = param[1], _cj_ = changed[1];
                                  if(847852583 === _cj_){
                                   var
                                    match = caml_call2(Core_Map[43], nodes, key),
                                    dep = match[2],
                                    node = match[1],
                                    nodes$0 = caml_call2(Core_Map[45], nodes, key);
                                   caml_call2(Incremental[79][2][7], result, dep);
                                   acc[1] = caml_call2(Core_Map[45], acc[1], key);
                                   caml_call1(Incremental[79][2][5], node);
                                   return nodes$0;
                                  }
                                  if(1013247643 <= _cj_){
                                   var node$0 = caml_call2(Core_Map[43], nodes, key)[1];
                                   caml_call1(Incremental[79][2][4], node$0);
                                   return nodes;
                                  }
                                  var
                                   node$1 =
                                     caml_call3
                                      (Incremental[79][2][2],
                                       incremental_state,
                                       0,
                                       function(param){
                                        return caml_call2(Core_Map[43], prev_map[1], key);
                                       });
                                  caml_call2
                                   (Core_Option[42],
                                    cutoff,
                                    function(c){
                                     var _co_ = caml_call1(Incremental[79][2][3], node$1);
                                     return caml_call2(Incremental[59], _co_, c);
                                    });
                                  var
                                   _ck_ = caml_call1(Core[242], lhs_change),
                                   _cl_ = caml_call2(Incremental[79][1][2], 0, _ck_);
                                  caml_call2(Incremental[79][2][6], node$1, _cl_);
                                  var
                                   _cm_ =
                                     caml_call2
                                      (f, key, caml_call1(Incremental[79][2][3], node$1)),
                                   user_function_dep =
                                     caml_call2
                                      (Incremental[79][1][2],
                                       [0, function(_cn_){return on_inner_change(key, _cn_);}],
                                       _cm_);
                                  caml_call2(Incremental[79][2][6], result, user_function_dep);
                                  return caml_call3
                                          (Core_Map[36], nodes, key, [0, node$1, user_function_dep]);
                                 });
                            prev_nodes[1] = new_nodes;
                            prev_map[1] = map;
                            return 0;
                           });
                 });
       }]);
    var
     _cg_ = caml_call1(Core[242], lhs_change),
     _ch_ = caml_call2(Incremental[79][1][2], 0, _cg_);
    caml_call2(Incremental[79][2][6], result, _ch_);
    return caml_call1(Incremental[79][2][3], result);
   }
   function filter_mapi$0(opt, cutoff, data_equal, map, f){
    var instrumentation = opt ? opt[1] : no_instrumentation;
    return with_comparator$0
            (map,
             function(comparator){
              return generic_mapi_with_comparator
                      (1, instrumentation, cutoff, data_equal, map, comparator, f);
             });
   }
   function mapi$0(opt, cutoff, data_equal, map, f){
    var instrumentation = opt ? opt[1] : no_instrumentation;
    return with_comparator$0
            (map,
             function(comparator){
              return generic_mapi_with_comparator
                      (0, instrumentation, cutoff, data_equal, map, comparator, f);
             });
   }
   function map$0(instrumentation, cutoff, data_equal, map, f){
    return mapi$0
            (instrumentation,
             cutoff,
             data_equal,
             map,
             function(param, data){return caml_call1(f, data);});
   }
   function filter_map$0(instrumentation, cutoff, data_equal, map, f){
    return filter_mapi$0
            (instrumentation,
             cutoff,
             data_equal,
             map,
             function(param, data){return caml_call1(f, data);});
   }
   function merge$0
   (instrumentation, cutoff, data_equal_left, data_equal_right, map1, map2, f){
    return filter_mapi$0
            (instrumentation,
             cutoff,
             0,
             merge
              (instrumentation,
               data_equal_left,
               data_equal_right,
               map1,
               map2,
               function(param, diff){return [0, diff];}),
             function(key, diff){return caml_call2(f, key, diff);});
   }
   function unzip_mapi
   (opt, data_equal, left_result_equal, right_result_equal, input, f){
    var
     instrumentation = opt ? opt[1] : no_instrumentation,
     pair =
       with_comparator$0
        (input,
         function(comparator){
          var
           data_equal$0 =
             data_equal
              ? data_equal[1]
              : function(_cf_, _ce_){return _cf_ === _ce_ ? 1 : 0;},
           left_result_equal$0 =
             left_result_equal
              ? left_result_equal[1]
              : function(_cd_, _cc_){return _cd_ === _cc_ ? 1 : 0;},
           right_result_equal$0 =
             right_result_equal
              ? right_result_equal[1]
              : function(_cb_, _ca_){return _cb_ === _ca_ ? 1 : 0;},
           incremental_state = caml_call1(Incremental[4], input),
           empty_map = caml_call1(Core_Map[118][1], comparator),
           left_acc = [0, empty_map],
           left_result =
             caml_call3
              (Incremental[79][2][2],
               incremental_state,
               0,
               function(param){return left_acc[1];}),
           right_acc = [0, empty_map],
           right_result =
             caml_call3
              (Incremental[79][2][2],
               incremental_state,
               0,
               function(param){return right_acc[1];}),
           prev_map = [0, empty_map],
           input_change =
             caml_call2
              (Incremental[10],
               input,
               function(map){
                return caml_call1
                        (instrumentation,
                         function(param){
                          var
                           match = caml_call1(Core_Map[32], prev_map[1]),
                           match$0 = caml_call1(Core_Map[32], map);
                          a:
                          {
                           if(match){
                            if(! match$0){
                             var
                              left$0 =
                                caml_call2
                                 (Core_Map[56],
                                  map,
                                  function(key, data){
                                   var l = caml_call2(f, key, data)[1];
                                   return l;
                                  }),
                              right$0 =
                                caml_call2
                                 (Core_Map[56],
                                  map,
                                  function(key, data){
                                   var r = caml_call2(f, key, data)[2];
                                   return r;
                                  }),
                              right = right$0,
                              left = left$0;
                             break a;
                            }
                           }
                           else if(! match$0){
                            var
                             _b7_ =
                               caml_call5
                                (Core_Map[85],
                                 prev_map[1],
                                 map,
                                 data_equal$0,
                                 [0, left_acc[1], right_acc[1]],
                                 function(_b8_, param){
                                  var
                                   changed = param[2],
                                   key = param[1],
                                   right = _b8_[2],
                                   left = _b8_[1],
                                   _b9_ = changed[1];
                                  if(847852583 === _b9_){
                                   var _b__ = caml_call2(Core_Map[45], right, key);
                                   return [0, caml_call2(Core_Map[45], left, key), _b__];
                                  }
                                  if(1013247643 <= _b9_){
                                   var
                                    match = changed[2],
                                    new$0 = match[2],
                                    prev = match[1],
                                    match$0 = caml_call2(f, key, prev),
                                    prev_b = match$0[2],
                                    prev_a = match$0[1],
                                    match$1 = caml_call2(f, key, new$0),
                                    new_b = match$1[2],
                                    new_a = match$1[1],
                                    left$0 =
                                      caml_call2(left_result_equal$0, prev_a, new_a)
                                       ? left
                                       : caml_call3(Core_Map[36], left, key, new_a),
                                    right$0 =
                                      caml_call2(right_result_equal$0, prev_b, new_b)
                                       ? right
                                       : caml_call3(Core_Map[36], right, key, new_b);
                                   return [0, left$0, right$0];
                                  }
                                  var
                                   element = changed[2],
                                   match$2 = caml_call2(f, key, element),
                                   b = match$2[2],
                                   a = match$2[1],
                                   _b$_ = caml_call3(Core_Map[36], right, key, b);
                                  return [0, caml_call3(Core_Map[36], left, key, a), _b$_];
                                 }),
                             right = _b7_[2],
                             left = _b7_[1];
                            break a;
                           }
                           var right = empty_map, left = empty_map;
                          }
                          if(1 - (left_acc[1] === left ? 1 : 0))
                           caml_call1(Incremental[79][2][4], left_result);
                          if(1 - (right_acc[1] === right ? 1 : 0))
                           caml_call1(Incremental[79][2][4], right_result);
                          left_acc[1] = left;
                          right_acc[1] = right;
                          prev_map[1] = map;
                          return 0;
                         });
               }),
           _b3_ = caml_call2(Incremental[79][1][2], 0, input_change);
          caml_call2(Incremental[79][2][6], left_result, _b3_);
          var _b4_ = caml_call2(Incremental[79][1][2], 0, input_change);
          caml_call2(Incremental[79][2][6], right_result, _b4_);
          var
           _b5_ = caml_call1(Incremental[79][2][3], right_result),
           _b6_ = [0, caml_call1(Incremental[79][2][3], left_result), _b5_];
          return caml_call2(Core_Tuple[1][8], Incremental[40], _b6_);
         }),
     _b0_ = caml_call2(Incremental[10], pair, function(_b2_){return _b2_[2];});
    return [0,
            caml_call2(Incremental[10], pair, function(_b1_){return _b1_[1];}),
            _b0_];
   }
   function unzip
   (instrumentation, left_result_equal, right_result_equal, input){
    var
     data_equal =
       caml_call3
        (Core_Option[24],
         left_result_equal,
         right_result_equal,
         function(l, r){return caml_call2(Core_Tuple[1][10], l, r);});
    return unzip_mapi
            (instrumentation,
             data_equal,
             left_result_equal,
             right_result_equal,
             input,
             function(param, data){return data;});
   }
   function unzip_mapi$0(opt, cutoff, data_equal, input, f){
    var
     instrumentation = opt ? opt[1] : no_instrumentation,
     pair =
       with_comparator$0
        (input,
         function(comparator){
          var
           data_equal$0 =
             data_equal
              ? data_equal[1]
              : function(_bZ_, _bY_){return _bZ_ === _bY_ ? 1 : 0;},
           incremental_state = caml_call1(Incremental[4], input),
           empty_map = caml_call1(Core_Map[118][1], comparator),
           prev_map = [0, empty_map],
           prev_nodes = [0, empty_map],
           left_acc = [0, empty_map],
           left_result =
             caml_call3
              (Incremental[79][2][2],
               incremental_state,
               0,
               function(param){return left_acc[1];}),
           right_acc = [0, empty_map],
           right_result =
             caml_call3
              (Incremental[79][2][2],
               incremental_state,
               0,
               function(param){return right_acc[1];}),
           input_change = [];
          caml_update_dummy
           (input_change,
            [246,
             function(_bT_){
              return caml_call2
                      (Incremental[10],
                       input,
                       function(map){
                        return caml_call1
                                (instrumentation,
                                 function(param){
                                  var
                                   new_nodes =
                                     caml_call5
                                      (Core_Map[85],
                                       prev_map[1],
                                       map,
                                       data_equal$0,
                                       prev_nodes[1],
                                       function(nodes, param){
                                        var changed = param[2], key = param[1], _bU_ = changed[1];
                                        if(847852583 === _bU_){
                                         var
                                          match = caml_call2(Core_Map[43], nodes, key),
                                          right_dep = match[3],
                                          left_dep = match[2],
                                          node = match[1],
                                          nodes$0 = caml_call2(Core_Map[45], nodes, key);
                                         caml_call2(Incremental[79][2][7], left_result, left_dep);
                                         caml_call2(Incremental[79][2][7], right_result, right_dep);
                                         left_acc[1] = caml_call2(Core_Map[45], left_acc[1], key);
                                         right_acc[1] = caml_call2(Core_Map[45], right_acc[1], key);
                                         caml_call1(Incremental[79][2][5], node);
                                         return nodes$0;
                                        }
                                        if(1013247643 <= _bU_){
                                         var node$0 = caml_call2(Core_Map[43], nodes, key)[1];
                                         caml_call1(Incremental[79][2][4], node$0);
                                         return nodes;
                                        }
                                        var
                                         node$1 =
                                           caml_call3
                                            (Incremental[79][2][2],
                                             incremental_state,
                                             0,
                                             function(param){
                                              return caml_call2(Core_Map[43], prev_map[1], key);
                                             });
                                        caml_call2
                                         (Core_Option[42],
                                          cutoff,
                                          function(c){
                                           var _bX_ = caml_call1(Incremental[79][2][3], node$1);
                                           return caml_call2(Incremental[59], _bX_, c);
                                          });
                                        var
                                         _bV_ = caml_call1(Core[242], input_change),
                                         _bW_ = caml_call2(Incremental[79][1][2], 0, _bV_);
                                        caml_call2(Incremental[79][2][6], node$1, _bW_);
                                        var
                                         match$0 =
                                           caml_call2
                                            (f, key, caml_call1(Incremental[79][2][3], node$1)),
                                         right_incr = match$0[2],
                                         left_incr = match$0[1],
                                         left_user_function_dep =
                                           caml_call2
                                            (Incremental[79][1][2],
                                             [0,
                                              function(data){
                                               left_acc[1] =
                                                caml_call3(Core_Map[36], left_acc[1], key, data);
                                               return 0;
                                              }],
                                             left_incr),
                                         right_user_function_dep =
                                           caml_call2
                                            (Incremental[79][1][2],
                                             [0,
                                              function(data){
                                               right_acc[1] =
                                                caml_call3(Core_Map[36], right_acc[1], key, data);
                                               return 0;
                                              }],
                                             right_incr);
                                        caml_call2
                                         (Incremental[79][2][6], left_result, left_user_function_dep);
                                        caml_call2
                                         (Incremental[79][2][6],
                                          right_result,
                                          right_user_function_dep);
                                        return caml_call3
                                                (Core_Map[36],
                                                 nodes,
                                                 key,
                                                 [0, node$1, left_user_function_dep, right_user_function_dep]);
                                       });
                                  prev_nodes[1] = new_nodes;
                                  prev_map[1] = map;
                                  return 0;
                                 });
                       });
             }]);
          var
           _bN_ = caml_call1(Core[242], input_change),
           _bO_ = caml_call2(Incremental[79][1][2], 0, _bN_);
          caml_call2(Incremental[79][2][6], left_result, _bO_);
          var
           _bP_ = caml_call1(Core[242], input_change),
           _bQ_ = caml_call2(Incremental[79][1][2], 0, _bP_);
          caml_call2(Incremental[79][2][6], right_result, _bQ_);
          var
           _bR_ = caml_call1(Incremental[79][2][3], right_result),
           _bS_ = [0, caml_call1(Incremental[79][2][3], left_result), _bR_];
          return caml_call2(Core_Tuple[1][8], Incremental[40], _bS_);
         }),
     _bK_ = caml_call2(Incremental[10], pair, function(_bM_){return _bM_[2];});
    return [0,
            caml_call2(Incremental[10], pair, function(_bL_){return _bL_[1];}),
            _bK_];
   }
   function keys(opt, map){
    var instrumentation = opt ? opt[1] : no_instrumentation;
    return with_comparator$0
            (map,
             function(comparator){
              function add(key, param, acc){
               return caml_call2(Core_Set[12], acc, key);
              }
              function remove(key, param, acc){
               return caml_call2(Core_Set[13], acc, key);
              }
              function data_equal(_bJ_, param){return 1;}
              return unordered_fold
                      (instrumentation,
                       [0, data_equal],
                       0,
                       0,
                       0,
                       _b_,
                       map,
                       caml_call1(Core_Set[3][1], comparator),
                       add,
                       remove);
             });
   }
   function partition_mapi(opt, data_equal, map, f){
    var instrumentation = opt ? opt[1] : no_instrumentation;
    return with_comparator$0
            (map,
             function(comparator){
              var empty = caml_call1(Core_Map[118][1], comparator);
              return unordered_fold
                      (instrumentation,
                       data_equal,
                       [0,
                        function(key, _bG_, data, param){
                         var
                          second = param[2],
                          first = param[1],
                          match = caml_call2(f, key, data);
                         if(0 === match[0]){
                          var
                           data$0 = match[1],
                           _bH_ = caml_call2(Core_Map[45], second, key);
                          return [0,
                                  caml_call3(Core_Map[36], first, key, data$0),
                                  _bH_];
                         }
                         var
                          data$1 = match[1],
                          _bI_ = caml_call3(Core_Map[36], second, key, data$1);
                         return [0, caml_call2(Core_Map[45], first, key), _bI_];
                        }],
                       0,
                       0,
                       _c_,
                       map,
                       [0, empty, empty],
                       function(key, data, param){
                        var
                         second = param[2],
                         first = param[1],
                         match = caml_call2(f, key, data);
                        if(0 === match[0]){
                         var data$0 = match[1];
                         return [0,
                                 caml_call3(Core_Map[35], first, key, data$0),
                                 second];
                        }
                        var data$1 = match[1];
                        return [0,
                                first,
                                caml_call3(Core_Map[35], second, key, data$1)];
                       },
                       function(key, _bE_, param){
                        var
                         second = param[2],
                         first = param[1],
                         _bF_ = caml_call2(Core_Map[45], second, key);
                        return [0, caml_call2(Core_Map[45], first, key), _bF_];
                       });
             });
   }
   function partition_mapi$0(instrumentation, cutoff, data_equal, map, f){
    return partition_mapi
            (instrumentation,
             0,
             mapi$0(instrumentation, cutoff, data_equal, map, f),
             function(param, data){return data;});
   }
   function flatten(state, map){
    var
     _bC_ = caml_call1(Core_Map[2], map),
     result = [0, caml_call1(Core_Map[118][1], _bC_)],
     node =
       caml_call3
        (Incremental[79][2][2], state, 0, function(param){return result[1];});
    caml_call2
     (Core_Map[49],
      map,
      function(key, incr){
       var
        _bD_ =
          caml_call2
           (Incremental[79][1][2],
            [0,
             function(a){
              result[1] = caml_call3(Core_Map[36], result[1], key, a);
              return 0;
             }],
            incr);
       return caml_call2(Incremental[79][2][6], node, _bD_);
      });
    return caml_call1(Incremental[79][2][3], node);
   }
   function join(opt, map_incr){
    var instrumentation = opt ? opt[1] : no_instrumentation;
    return with_comparator$0
            (map_incr,
             function(comparator){
              var
               incremental_state = caml_call1(Incremental[4], map_incr),
               empty_map = caml_call1(Core_Map[118][1], comparator),
               result_map = [0, empty_map],
               old_map_of_incrs = [0, empty_map],
               current_dependencies = [0, empty_map],
               result =
                 caml_call3
                  (Incremental[79][2][2],
                   incremental_state,
                   0,
                   function(param){return result_map[1];});
              function add_subnode(current_dependencies, key, data_node){
               var
                new_dep =
                  caml_call2
                   (Incremental[79][1][2],
                    [0,
                     function(data){
                      result_map[1] =
                       caml_call3(Core_Map[36], result_map[1], key, data);
                      return 0;
                     }],
                    data_node);
               caml_call2(Incremental[79][2][6], result, new_dep);
               return caml_call3
                       (Core_Map[36], current_dependencies, key, new_dep);
              }
              function remove_subnode(current_dependencies, key){
               var dep = caml_call2(Core_Map[43], current_dependencies, key);
               caml_call2(Incremental[79][2][7], result, dep);
               result_map[1] = caml_call2(Core_Map[45], result_map[1], key);
               return caml_call2(Core_Map[45], current_dependencies, key);
              }
              var
               lhs_change =
                 caml_call2
                  (Incremental[10],
                   map_incr,
                   function(map_of_incrs){
                    return caml_call1
                            (instrumentation,
                             function(param){
                              var
                               new_dependency_map =
                                 caml_call5
                                  (Core_Map[85],
                                   old_map_of_incrs[1],
                                   map_of_incrs,
                                   function(_bB_, _bA_){return _bB_ === _bA_ ? 1 : 0;},
                                   current_dependencies[1],
                                   function(current_dependencies, param){
                                    var diff = param[2], key = param[1], _bz_ = diff[1];
                                    if(847852583 === _bz_)
                                     return remove_subnode(current_dependencies, key);
                                    if(1013247643 <= _bz_){
                                     var data_node = diff[2][2];
                                     return add_subnode
                                             (remove_subnode(current_dependencies, key), key, data_node);
                                    }
                                    var data_node$0 = diff[2];
                                    return add_subnode(current_dependencies, key, data_node$0);
                                   });
                              current_dependencies[1] = new_dependency_map;
                              old_map_of_incrs[1] = map_of_incrs;
                              return 0;
                             });
                   }),
               _by_ = caml_call2(Incremental[79][1][2], 0, lhs_change);
              caml_call2(Incremental[79][2][6], result, _by_);
              return caml_call1(Incremental[79][2][3], result);
             });
   }
   function separate(opt, input_map, data_equal){
    var
     instrumentation = opt ? opt[1] : no_instrumentation,
     incremental_state = caml_call1(Incremental[4], input_map);
    return with_comparator$0
            (input_map,
             function(comparator){
              var
               empty = caml_call1(Core_Map[118][1], comparator),
               state = [0, empty, empty, empty],
               output_map_node =
                 caml_call3
                  (Incremental[79][2][2],
                   incremental_state,
                   0,
                   function(param){return state[3];});
              function make_node_depend_on_input_map_(node, input_map_changed){
               var
                _bx_ = caml_call1(Core_Lazy[32], input_map_changed),
                dependency = caml_call2(Incremental[79][1][2], 0, _bx_);
               return caml_call2(Incremental[79][2][6], node, dependency);
              }
              var input_map_changed = [];
              caml_update_dummy
               (input_map_changed,
                [246,
                 function(_bq_){
                  return caml_call2
                          (Incremental[10],
                           input_map,
                           function(input_map){
                            return caml_call1
                                    (instrumentation,
                                     function(param){
                                      var
                                       prev_input_map = state[1],
                                       match =
                                         caml_call5
                                          (Core_Map[85],
                                           prev_input_map,
                                           input_map,
                                           data_equal,
                                           [0, state[2], state[3]],
                                           function(_br_, param){
                                            var
                                             change = param[2],
                                             key = param[1],
                                             output_map = _br_[2],
                                             expert_nodes = _br_[1],
                                             _bs_ = change[1];
                                            if(847852583 === _bs_){
                                             var old_node = caml_call2(Core_Map[43], expert_nodes, key);
                                             caml_call1(Incremental[79][2][5], old_node);
                                             caml_call1(Incremental[79][2][4], output_map_node);
                                             var _bt_ = caml_call2(Core_Map[45], output_map, key);
                                             return [0,
                                                     caml_call2(Core_Map[45], expert_nodes, key),
                                                     _bt_];
                                            }
                                            if(1013247643 <= _bs_){
                                             var _bu_ = caml_call2(Core_Map[43], expert_nodes, key);
                                             caml_call1(Incremental[79][2][4], _bu_);
                                             return [0, expert_nodes, output_map];
                                            }
                                            var
                                             node =
                                               caml_call3
                                                (Incremental[79][2][2],
                                                 incremental_state,
                                                 0,
                                                 function(param){
                                                  return caml_call2(Core_Map[43], state[1], key);
                                                 });
                                            make_node_depend_on_input_map_(node, input_map_changed);
                                            caml_call1(Incremental[79][2][4], output_map_node);
                                            var
                                             _bv_ = caml_call1(Incremental[79][2][3], node),
                                             _bw_ = caml_call3(Core_Map[35], output_map, key, _bv_);
                                            return [0,
                                                    caml_call3(Core_Map[35], expert_nodes, key, node),
                                                    _bw_];
                                           }),
                                       output_map = match[2],
                                       expert_nodes = match[1];
                                      state[1] = input_map;
                                      state[2] = expert_nodes;
                                      state[3] = output_map;
                                      return 0;
                                     });
                           });
                 }]);
              make_node_depend_on_input_map_
               (output_map_node, input_map_changed);
              return caml_call1(Incremental[79][2][3], output_map_node);
             });
   }
   function subrange(_ba_, opt, map_incr, range){
    var
     instrumentation = _ba_ ? _ba_[1] : no_instrumentation,
     data_equal =
       opt ? opt[1] : function(_bp_, _bo_){return _bp_ === _bo_ ? 1 : 0;};
    return with_old2
            (instrumentation,
             map_incr,
             range,
             function(old, map, range){
              var compare = caml_call1(Core_Map[2], map)[1];
              function equal(l, r){
               var _bn_ = caml_call2(compare, l, r);
               return caml_call2(Core[89], _bn_, 0);
              }
              function maybe_bound_equal(a_008, b_009){
               if(a_008 === b_009) return 1;
               if(typeof a_008 === "number"){
                if(typeof b_009 === "number") return 1;
                if(1 === b_009[0]) return 0;
               }
               else{
                if(0 === a_008[0]){
                 var a_010 = a_008[1];
                 if(typeof b_009 !== "number" && 0 === b_009[0]){
                  var b_011 = b_009[1];
                  return equal(a_010, b_011);
                 }
                 return 0;
                }
                var a_012 = a_008[1];
                if(typeof b_009 === "number") return 0;
                if(0 !== b_009[0]){
                 var b_013 = b_009[1];
                 return equal(a_012, b_013);
                }
               }
               return 0;
              }
              function range_is_empty(min, max){
               a:
               if(typeof min !== "number"){
                if(0 === min[0]){
                 var min$0 = min[1];
                 if(typeof max === "number") break a;
                 if(0 === max[0]){
                  var
                   max$0 = max[1],
                   _bk_ = caml_call2(compare, min$0, max$0);
                  return caml_call2(Core[90], _bk_, 0);
                 }
                 var max$1 = max[1], min$1 = min$0;
                }
                else{
                 var _bm_ = min[1];
                 if(typeof max === "number") break a;
                 var max$1 = max[1], min$1 = _bm_;
                }
                var _bl_ = caml_call2(compare, min$1, max$1);
                return caml_call2(Core[87], _bl_, 0);
               }
               return 0;
              }
              function range_includes(min, max, key){
               var _bj_ = caml_call3(Core_Maybe_bound[19], min, key, compare);
               return _bj_
                       ? caml_call3(Core_Maybe_bound[20], max, key, compare)
                       : _bj_;
              }
              if(! range){
               var _bc_ = caml_call1(Core_Map[2], map);
               return caml_call1(Core_Map[118][1], _bc_);
              }
              var range$0 = range[1], max = range$0[2], min = range$0[1];
              function from_scratch(param){
               return caml_call3(Core_Map[101], map, min, max);
              }
              if(old){
               var _bb_ = old[1], match = _bb_[2];
               if(match){
                var
                 old_range = match[1],
                 old_min = old_range[1],
                 old_map = _bb_[1],
                 old_max = old_range[2];
                if
                 (!
                  range_is_empty(old_min, old_max)
                  &&
                   !
                   range_is_empty(min, old_max)
                   && ! range_is_empty(old_min, max)){
                 var old_res = _bb_[3], old_max$0 = old_range[2];
                 return caml_call1
                         (Core[262],
                          function(param){
                           function apply_diff_in_intersection(_bg_, param$0){
                            var
                             data = param$0[2],
                             key = param$0[1],
                             map = _bg_[2],
                             outside = _bg_[1],
                             _bf_ = range_includes(min, max, key),
                             _bh_ = _bf_ ? range_includes(old_min, old_max$0, key) : _bf_;
                            if(! _bh_){
                             var outside$0 = outside - 1 | 0;
                             return 0 <= outside$0
                                     ? [0, outside$0, caml_call2(Core_Map[45], map, key)]
                                     : caml_call1(param, from_scratch(0));
                            }
                            var _bi_ = data[1];
                            if(847852583 === _bi_)
                             return [0, outside, caml_call2(Core_Map[45], map, key)];
                            var data$0 = 1013247643 <= _bi_ ? data[2][2] : data[2];
                            return [0,
                                    outside,
                                    caml_call3(Core_Map[36], map, key, data$0)];
                           }
                           var
                            outside_cutoff = caml_call1(Core_Map[33], old_res) / 4 | 0,
                            with_updated_values_in_interse =
                              caml_call5
                                (Core_Map[85],
                                 old_map,
                                 map,
                                 data_equal,
                                 [0, outside_cutoff, old_res],
                                 apply_diff_in_intersection)
                               [2];
                           if
                            (caml_call4
                              (Core_Tuple[1][10],
                               maybe_bound_equal,
                               maybe_bound_equal,
                               old_range,
                               range$0))
                            return with_updated_values_in_interse;
                           var
                            without_keys_out_of_range =
                              caml_call3
                               (Core_Map[101], with_updated_values_in_interse, min, max);
                           function map_append_exn(lower_part, upper_part){
                            var
                             match = caml_call2(Core_Map[100], lower_part, upper_part);
                            if(typeof match === "number")
                             return caml_call1(Core[5], cst_impossible_case_BUG_in_inc);
                            var map = match[2];
                            return map;
                           }
                           if(typeof old_min === "number")
                            var
                             _bd_ = caml_call1(Core_Map[2], map),
                             lower_part = caml_call1(Core_Map[118][1], _bd_);
                           else if(0 === old_min[0])
                            var
                             old_min$0 = old_min[1],
                             lower_part =
                               caml_call3(Core_Map[101], map, min, [1, old_min$0]);
                           else
                            var
                             old_min$1 = old_min[1],
                             lower_part =
                               caml_call3(Core_Map[101], map, min, [0, old_min$1]);
                           if(typeof old_max$0 === "number")
                            var
                             _be_ = caml_call1(Core_Map[2], map),
                             upper_part = caml_call1(Core_Map[118][1], _be_);
                           else if(0 === old_max$0[0])
                            var
                             old_max = old_max$0[1],
                             upper_part =
                               caml_call3(Core_Map[101], map, [1, old_max], max);
                           else
                            var
                             old_max$1 = old_max$0[1],
                             upper_part =
                               caml_call3(Core_Map[101], map, [0, old_max$1], max);
                           var
                            with_new_keys_now_in_range =
                              map_append_exn
                               (lower_part,
                                map_append_exn(without_keys_out_of_range, upper_part));
                           return with_new_keys_now_in_range;
                          });
                }
                return from_scratch(0);
               }
              }
              return from_scratch(0);
             });
   }
   function rekey(opt, data_equal, map_incr, outer_comparator, f){
    var
     instrumentation = opt ? opt[1] : no_instrumentation,
     _a8_ =
       unordered_fold
        (instrumentation,
         data_equal,
         [0,
          function(key, old_data, new_data, param){
           var
            adds = param[2],
            output = param[1],
            prev_key = caml_call2(f, key, old_data),
            new_key = caml_call2(f, key, new_data),
            _a$_ =
              caml_call2
               (caml_call1(Core_Map[2], output)[1], prev_key, new_key);
           if(caml_call2(Core[89], _a$_, 0))
            return [0,
                    caml_call3(Core_Map[36], output, new_key, new_data),
                    adds];
           var output$0 = caml_call2(Core_Map[45], output, prev_key);
           return [0, output$0, [0, [0, new_key, new_data], adds]];
          }],
         0,
         [0,
          function(param){
           var
            adds = param[2],
            output = param[1],
            output$0 =
              caml_call3
               (Core_List[20],
                adds,
                output,
                function(output, param){
                 var data = param[2], key = param[1];
                 return caml_call3(Core_Map[35], output, key, data);
                });
           return [0, output$0, 0];
          }],
         _d_,
         map_incr,
         [0, caml_call1(Core_Map[4], outer_comparator), 0],
         function(key, data, param){
          var
           adds = param[2],
           output = param[1],
           new_entry = [0, caml_call2(f, key, data), data];
          return [0, output, [0, new_entry, adds]];
         },
         function(key, data, param){
          var
           adds = param[2],
           output = param[1],
           _a__ = caml_call2(f, key, data);
          return [0, caml_call2(Core_Map[45], output, _a__), adds];
         });
    return caml_call2(Incremental[10], _a8_, function(_a9_){return _a9_[1];});
   }
   function index_byi(opt, data_equal, map_incr, outer_comparator, index){
    var instrumentation = opt ? opt[1] : no_instrumentation;
    return with_comparator$0
            (map_incr,
             function(inner_comparator){
              return unordered_fold
                      (instrumentation,
                       data_equal,
                       0,
                       0,
                       0,
                       _e_,
                       map_incr,
                       caml_call1(Core_Map[4], outer_comparator),
                       function(inner_key, data, outer_map){
                        var match = caml_call2(index, inner_key, data);
                        if(! match) return outer_map;
                        var outer_key = match[1];
                        return caml_call3
                                (Core_Map[41],
                                 outer_map,
                                 outer_key,
                                 function(param){
                                  if(! param)
                                   return caml_call3
                                           (Core_Map[118][2], inner_comparator, inner_key, data);
                                  var inner_map = param[1];
                                  return caml_call3(Core_Map[35], inner_map, inner_key, data);
                                 });
                       },
                       function(inner_key, data, outer_map){
                        var match = caml_call2(index, inner_key, data);
                        if(! match) return outer_map;
                        var outer_key = match[1];
                        return caml_call3
                                (Core_Map[40],
                                 outer_map,
                                 outer_key,
                                 function(param){
                                  if(! param)
                                   return caml_call1(Core[5], cst_BUG_Hit_supposedly_impossi);
                                  var
                                   inner_map = param[1],
                                   inner_map$0 = caml_call2(Core_Map[45], inner_map, inner_key);
                                  return caml_call1(Core_Map[32], inner_map$0)
                                          ? 0
                                          : [0, inner_map$0];
                                 });
                       });
             });
   }
   function index_by(instrumentation, data_equal, map_incr, comparator, index){
    return index_byi
            (instrumentation,
             data_equal,
             map_incr,
             comparator,
             function(param, data){return caml_call1(index, data);});
   }
   function is_known(param){
    if(typeof param === "number" && param) return 0;
    return 1;
   }
   function to_option(param){
    if(typeof param === "number") return 0;
    var k = param[1];
    return [0, k];
   }
   function find_key_range_linear(from, to, map){
    var
     len = caml_call1(Core_Map[33], map),
     begin_key = caml_call2(Core_Int[86], from, len) ? 0 : 1,
     end_key = caml_call2(Core_Int[86], to, len) ? 0 : 1;
    function find_keys(fold, start_pos, advance_pos){
     return caml_call1
             (Core[262],
              function(param){
               return caml_call3
                       (fold,
                        map,
                        [0, begin_key, end_key, start_pos],
                        function(key, _a7_, param$0){
                         var
                          pos = param$0[3],
                          end_key = param$0[2],
                          begin_key = param$0[1],
                          begin_key$0 =
                            caml_call2(Core_Int[88], pos, from) ? [0, key] : begin_key,
                          end_key$0 =
                            caml_call2(Core_Int[88], pos, to) ? [0, key] : end_key;
                         if(is_known(begin_key$0) && is_known(end_key$0))
                          return caml_call1(param, [0, begin_key$0, end_key$0, pos]);
                         return [0,
                                 begin_key$0,
                                 end_key$0,
                                 caml_call1(advance_pos, pos)];
                        });
              });
    }
    var
     match =
       caml_call2(Core[91], to, len - from | 0)
        ? find_keys(Core_Map[59], 0, function(pos){return pos + 1 | 0;})
        : find_keys
          (Core_Map[61], len - 1 | 0, function(pos){return pos - 1 | 0;}),
     end_key$0 = match[2],
     begin_key$0 = match[1],
     _a6_ = to_option(begin_key$0);
    return caml_call2
            (Core_Option[30],
             _a6_,
             function(begin_key){return [0, begin_key, to_option(end_key$0)];});
   }
   function find_offset(compare, key, changed_key, change){
    var _a4_ = caml_call2(compare, changed_key, key);
    if(! caml_call2(Core_Int[90], _a4_, 0)) return 0;
    if(typeof change !== "number"){
     var _a5_ = change[1];
     if(-57574468 === _a5_) return -1;
     if(847852583 === _a5_) return 1;
    }
    return 0;
   }
   function rank(opt, map, key){
    var instrumentation = opt ? opt[1] : no_instrumentation;
    return with_comparator$0
            (map,
             function(comparator){
              var compare_key = comparator[1];
              function same_key(a, b){
               var _a3_ = caml_call2(compare_key, a, b);
               return caml_call2(Core[89], _a3_, 0);
              }
              function process(old, new_map, new_key){
               var old$0 = old;
               for(;;){
                if(! caml_call2(Core_Map[46], new_map, new_key)) return 0;
                if(old$0){
                 var
                  match = old$0[1],
                  old_rank = match[3],
                  old_key = match[2],
                  old_map = match[1];
                 if(new_map === old_map && same_key(old_key, new_key))
                  return old_rank;
                 if(old_rank){
                  var old_rank$0 = old_rank[1];
                  if(new_map !== old_map){
                   if(same_key(new_key, old_key))
                    return [0,
                            caml_call5
                             (Core_Map[85],
                              old_map,
                              new_map,
                              function(_a2_, param){return 1;},
                              old_rank$0,
                              function(acc, param){
                               var diff = param[2], diff_key = param[1];
                               if(typeof diff !== "number"){
                                var _aZ_ = diff[1];
                                if(-57574468 === _aZ_){
                                 var _a0_ = caml_call2(compare_key, diff_key, new_key);
                                 if(caml_call2(Core[91], _a0_, 0)) return acc + 1 | 0;
                                }
                                else if(847852583 === _aZ_){
                                 var _a1_ = caml_call2(compare_key, diff_key, new_key);
                                 if(caml_call2(Core[91], _a1_, 0)) return acc - 1 | 0;
                                }
                               }
                               return acc;
                              })];
                   var
                    old_rank$1 =
                      process
                       ([0, [0, old_map, old_key, [0, old_rank$0]]],
                        new_map,
                        old_key),
                    old$1 = [0, [0, new_map, old_key, old_rank$1]];
                   old$0 = old$1;
                   continue;
                  }
                  var _aX_ = caml_call2(compare_key, new_key, old_key);
                  if(caml_call2(Core[91], _aX_, 0))
                   var
                    upper_bound = [1, old_key],
                    lower_bound = [1, new_key],
                    subrange =
                      caml_call3(Core_Map[101], new_map, lower_bound, upper_bound),
                    _aY_ =
                      (old_rank$0 - caml_call1(Core_Map[33], subrange) | 0) - 1
                      | 0;
                  else
                   var
                    upper_bound$0 = [1, new_key],
                    lower_bound$0 = [1, old_key],
                    subrange$0 =
                      caml_call3
                       (Core_Map[101], new_map, lower_bound$0, upper_bound$0),
                    _aY_ =
                      (old_rank$0 + caml_call1(Core_Map[33], subrange$0) | 0) + 1
                      | 0;
                  return [0, _aY_];
                 }
                }
                return caml_call2(Core_Map[107], new_map, new_key);
               }
              }
              return with_old2(instrumentation, map, key, process);
             });
   }
   function subrange_by_rank(opt, data_equal, map, range){
    var instrumentation = opt ? opt[1] : no_instrumentation;
    function find_key_range(range){
     return with_old2
             (instrumentation,
              map,
              range,
              function(old, map, param){
               var
                to = param[2],
                from = param[1],
                _aH_ = caml_call2(Core_Int[90], to, from),
                _aI_ = _aH_ || caml_call2(Core_Int[90], from, 0);
               if(_aI_){
                var
                 _aJ_ =
                   [0, [1, [0, _f_, [0, caml_call1(Core[363], to), 0]]], 0],
                 _aK_ =
                   [0,
                    [1, [0, _g_, [0, caml_call1(Core[363], from), 0]]],
                    _aJ_],
                 _aL_ =
                   [1,
                    [0,
                     caml_call1(Sexplib0_Sexp_conv[7], cst_Invalid_indices),
                     _aK_]];
                caml_call1(Core[255], _aL_);
               }
               if(old){
                var _aM_ = old[1], _aN_ = _aM_[3];
                if(_aN_){
                 var
                  _aO_ = _aN_[1],
                  end_key_opt$0 = _aO_[2],
                  begin_key = _aO_[1],
                  match = _aM_[2],
                  old_to = match[2],
                  old_from = match[1],
                  old_map = _aM_[1],
                  _aP_ = caml_call1(Core_Map[2], map)[1],
                  range_offset_begin = from - old_from | 0,
                  range_offset_end = to - old_to | 0,
                  adjust_and_offset =
                    function(by$1, key$1){
                     a:
                     {
                      if
                       (caml_call2(Core[87], by$1, 0)
                        && ! caml_call2(Core_Map[46], map, key$1)){var _aW_ = 1; break a;}
                      var _aW_ = 0;
                     }
                     var by$2 = by$1 + _aW_ | 0, key = key$1, by = by$2;
                     for(;;){
                      if(caml_call2(Core_Int[88], by, 0)) return [0, key];
                      if(caml_call2(Core_Int[90], by, 0))
                       var add = 1, closest_dir = -640801497;
                      else
                       var add = -1, closest_dir = -779285466;
                      var
                       match = caml_call3(Core_Map[104], map, closest_dir, key);
                      if(! match) return 0;
                      var key$0 = match[1][1], by$0 = by + add | 0;
                      key = key$0;
                      by = by$0;
                     }
                    },
                  diff =
                    function(init, f){
                     return caml_call5
                             (Core_Map[85],
                              old_map,
                              map,
                              function(_aV_, param){return 1;},
                              init,
                              f);
                    };
                 if(end_key_opt$0)
                  var
                   end_key = end_key_opt$0[1],
                   match$0 =
                     diff
                      (_h_,
                       function(_aS_, param){
                        var
                         change = param[2],
                         key = param[1],
                         offset_end = _aS_[2],
                         offset_begin = _aS_[1],
                         _aT_ =
                           offset_end + find_offset(_aP_, end_key, key, change) | 0;
                        return [0,
                                offset_begin + find_offset(_aP_, begin_key, key, change) | 0,
                                _aT_];
                       }),
                   map_offset_end = match$0[2],
                   map_offset_begin = match$0[1],
                   end_key_opt$1 =
                     adjust_and_offset
                      (map_offset_end + range_offset_end | 0, end_key),
                   end_key_opt$2 = end_key_opt$1,
                   begin_key_opt =
                     adjust_and_offset
                      (map_offset_begin + range_offset_begin | 0, begin_key);
                 else
                  var
                   map_offset_begin$0 =
                     diff
                      (0,
                       function(offset_begin, param){
                        var change = param[2], key = param[1];
                        return offset_begin
                               + find_offset(_aP_, begin_key, key, change)
                               | 0;
                       }),
                   _aG_ = find_key_range_linear(to, to, map),
                   end_key_opt =
                     caml_call2
                      (Core_Option[30], _aG_, function(_aU_){return _aU_[1];}),
                   begin_key_opt$0 =
                     adjust_and_offset
                      (map_offset_begin$0 + range_offset_begin | 0, begin_key),
                   end_key_opt$2 = end_key_opt,
                   begin_key_opt = begin_key_opt$0;
                 var _aQ_ = caml_call1(Core_Map[46], map);
                 if(! caml_call2(Core_Option[44], begin_key_opt, _aQ_))
                  throw caml_maybe_attach_backtrace
                         ([0, Assert_failure, _j_], 1);
                 var _aR_ = caml_call1(Core_Map[46], map);
                 if(caml_call2(Core_Option[44], end_key_opt$2, _aR_))
                  return caml_call2
                          (Core_Option[30],
                           begin_key_opt,
                           function(begin_key){return [0, begin_key, end_key_opt$2];});
                 throw caml_maybe_attach_backtrace
                        ([0, Assert_failure, _i_], 1);
                }
               }
               return find_key_range_linear(from, to, map);
              });
    }
    function symbol(new$0, bound){
     return caml_call2
             (Core_Maybe_bound[18], bound, function(param){return new$0;});
    }
    var
     _aw_ = caml_call1(Incremental[4], map),
     return$0 = caml_call1(Incremental[9], _aw_),
     _ax_ =
       caml_call2
        (Incremental[76][3][5],
         range,
         function(param){
          return typeof param[1] === "number"
                  ? typeof param[2] === "number" ? 0 : 3
                  : typeof param[2] === "number" ? 2 : 1;
         }),
     key_range =
       caml_call2
        (Incremental[76][3][1],
         _ax_,
         function(param){
          if(3 < param >>> 0)
           throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
          switch(param){
            case 0:
             return caml_call1(return$0, _l_);
            case 1:
             var
              l =
                caml_call2
                 (Incremental[76][3][5],
                  range,
                  function(param){
                   var _aF_ = param[1];
                   if(typeof _aF_ !== "number"){
                    var pattern_syntax_014 = _aF_[1];
                    if(typeof param[2] !== "number") return pattern_syntax_014;
                   }
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _m_], 1);
                  }),
              lb =
                caml_call2
                 (Incremental[76][3][5],
                  range,
                  function(param){
                   var pattern_syntax_015 = param[1];
                   if
                    (typeof pattern_syntax_015 !== "number"
                     && typeof param[2] !== "number")
                    return pattern_syntax_015;
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _n_], 1);
                  }),
              u =
                caml_call2
                 (Incremental[76][3][5],
                  range,
                  function(param){
                   if(typeof param[1] !== "number"){
                    var match = param[2];
                    if(typeof match !== "number"){
                     var pattern_syntax_016 = match[1];
                     return pattern_syntax_016;
                    }
                   }
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _o_], 1);
                  }),
              ub =
                caml_call2
                 (Incremental[76][3][5],
                  range,
                  function(param){
                   if(typeof param[1] !== "number"){
                    var pattern_syntax_017 = param[2];
                    if(typeof pattern_syntax_017 !== "number")
                     return pattern_syntax_017;
                   }
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _p_], 1);
                  }),
              let_syntax_022 =
                find_key_range(caml_call2(Incremental[40], l, u)),
              _ay_ = caml_call2(Incremental[76][3][20], lb, ub),
              _az_ = caml_call2(Incremental[76][3][20], let_syntax_022, _ay_);
             return caml_call2
                     (Incremental[76][3][5],
                      _az_,
                      function(param){
                       var
                        match = param[2],
                        ub = match[2],
                        lb = match[1],
                        key_range = param[1];
                       if(! key_range) return 0;
                       var
                        _aD_ = key_range[1],
                        match$0 = _aD_[2],
                        begin_key = _aD_[1];
                       if(! match$0) return [0, [0, symbol(begin_key, lb), 0]];
                       var end_key = match$0[1], _aE_ = symbol(end_key, ub);
                       return [0, [0, symbol(begin_key, lb), _aE_]];
                      });
            case 2:
             var
              l$0 =
                caml_call2
                 (Incremental[76][3][5],
                  range,
                  function(param){
                   var _aC_ = param[1];
                   if(typeof _aC_ !== "number"){
                    var pattern_syntax_018 = _aC_[1];
                    if(typeof param[2] === "number") return pattern_syntax_018;
                   }
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _q_], 1);
                  }),
              lb$0 =
                caml_call2
                 (Incremental[76][3][5],
                  range,
                  function(param){
                   var pattern_syntax_019 = param[1];
                   if
                    (typeof pattern_syntax_019 !== "number"
                     && typeof param[2] === "number")
                    return pattern_syntax_019;
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _r_], 1);
                  }),
              let_syntax_026 =
                find_key_range(caml_call2(Incremental[40], l$0, l$0)),
              _aA_ = caml_call2(Incremental[76][3][20], let_syntax_026, lb$0);
             return caml_call2
                     (Incremental[76][3][5],
                      _aA_,
                      function(param){
                       var lb = param[2], key_range = param[1];
                       if(! key_range) return 0;
                       var key = key_range[1][1];
                       return [0, [0, symbol(key, lb), 0]];
                      });
            default:
             var
              u$0 =
                caml_call2
                 (Incremental[76][3][5],
                  range,
                  function(param){
                   if(typeof param[1] === "number"){
                    var match = param[2];
                    if(typeof match !== "number"){
                     var pattern_syntax_020 = match[1];
                     return pattern_syntax_020;
                    }
                   }
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _s_], 1);
                  }),
              ub$0 =
                caml_call2
                 (Incremental[76][3][5],
                  range,
                  function(param){
                   if(typeof param[1] === "number"){
                    var pattern_syntax_021 = param[2];
                    if(typeof pattern_syntax_021 !== "number")
                     return pattern_syntax_021;
                   }
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _t_], 1);
                  }),
              let_syntax_029 =
                find_key_range(caml_call2(Incremental[40], u$0, u$0)),
              _aB_ = caml_call2(Incremental[76][3][20], let_syntax_029, ub$0);
             return caml_call2
                     (Incremental[76][3][5],
                      _aB_,
                      function(param){
                       var ub = param[2], key_range = param[1];
                       if(! key_range) return _u_;
                       var key = key_range[1][1];
                       return [0, [0, 0, symbol(key, ub)]];
                      });
          }
         });
    return subrange(0, data_equal, map, key_range);
   }
   function transpose(_am_, opt, k2_comparator, m){
    var
     instrumentation = _am_ ? _am_[1] : no_instrumentation,
     data_equal =
       opt ? opt[1] : function(_av_, _au_){return _av_ === _au_ ? 1 : 0;};
    return with_comparator$0
            (m,
             function(k1_comparator){
              function update(k1, old_data, new_data, acc){
               return caml_call5
                       (Core_Map[85],
                        old_data,
                        new_data,
                        data_equal,
                        acc,
                        function(acc, param){
                         var diff = param[2], k2 = param[1], _ar_ = diff[1];
                         if(847852583 === _ar_)
                          var value = 0;
                         else
                          var
                           x = 1013247643 <= _ar_ ? diff[2][2] : diff[2],
                           value = [0, x];
                         return caml_call3
                                 (Core_Map[40],
                                  acc,
                                  k2,
                                  function(acc_inner){
                                   var
                                    _as_ = caml_call1(Core_Map[118][1], k1_comparator),
                                    _at_ = caml_call2(Core_Option[35], acc_inner, _as_),
                                    acc_inner$0 =
                                      caml_call3
                                       (Core_Map[40], _at_, k1, function(param){return value;});
                                   return caml_call1(Core_Map[32], acc_inner$0)
                                           ? 0
                                           : [0, acc_inner$0];
                                  });
                        });
              }
              function add(key, data){
               var _ap_ = caml_call1(Core_Map[4], k2_comparator);
               return function(_aq_){return update(key, _ap_, data, _aq_);};
              }
              function remove(key, data){
               var _an_ = caml_call1(Core_Map[4], k2_comparator);
               return function(_ao_){return update(key, data, _an_, _ao_);};
              }
              return unordered_fold
                      (instrumentation,
                       0,
                       [0, update],
                       0,
                       0,
                       _v_,
                       m,
                       caml_call1(Core_Map[4], k2_comparator),
                       add,
                       remove);
             });
   }
   function collapse_by(opt, data_equal, map_incr, merge_keys, comparator){
    var instrumentation = opt ? opt[1] : no_instrumentation;
    return unordered_fold_nested_maps
            (instrumentation,
             data_equal,
             _w_,
             [0,
              function(outer_key, inner_key, param, new_data, acc){
               var _al_ = caml_call2(merge_keys, outer_key, inner_key);
               return caml_call3(Core_Map[36], acc, _al_, new_data);
              }],
             map_incr,
             caml_call1(Core_Map[4], comparator),
             function(outer_key, inner_key, data, acc){
              var _ak_ = caml_call2(merge_keys, outer_key, inner_key);
              return caml_call3(Core_Map[35], acc, _ak_, data);
             },
             function(outer_key, inner_key, param, acc){
              var _aj_ = caml_call2(merge_keys, outer_key, inner_key);
              return caml_call2(Core_Map[45], acc, _aj_);
             });
   }
   function collapse(instrumentation, data_equal, map_incr, inner_comparator){
    return with_comparator$0
            (map_incr,
             function(outer_comparator){
              var
               inner_comparator$0 = inner_comparator[1],
               comparator =
                 caml_call2
                  (Core_Tuple[1][5], outer_comparator, inner_comparator$0);
              return collapse_by
                      (instrumentation,
                       data_equal,
                       map_incr,
                       Core_Tuple[1][6],
                       [0, comparator]);
             });
   }
   function expand
   (opt, data_equal, map_incr, outer_comparator, inner_comparator){
    var instrumentation = opt ? opt[1] : no_instrumentation;
    return unordered_fold
            (instrumentation,
             data_equal,
             [0,
              function(_ai_, param, new_data, acc){
               var inner_key = _ai_[2], outer_key = _ai_[1];
               return caml_call3
                       (Core_Map[41],
                        acc,
                        outer_key,
                        function(param){
                         if(! param)
                          return caml_call3
                                  (Core_Map[5], inner_comparator, inner_key, new_data);
                         var map = param[1];
                         return caml_call3(Core_Map[36], map, inner_key, new_data);
                        });
              }],
             0,
             0,
             _x_,
             map_incr,
             caml_call1(Core_Map[4], outer_comparator),
             function(param, data, acc){
              var inner_key = param[2], outer_key = param[1];
              return caml_call3
                      (Core_Map[41],
                       acc,
                       outer_key,
                       function(param){
                        if(! param)
                         return caml_call3
                                 (Core_Map[5], inner_comparator, inner_key, data);
                        var map = param[1];
                        return caml_call3(Core_Map[35], map, inner_key, data);
                       });
             },
             function(_ag_, param, acc){
              var inner_key = _ag_[2], outer_key = _ag_[1];
              return caml_call3
                      (Core_Map[40],
                       acc,
                       outer_key,
                       function(param){
                        if(! param) return 0;
                        var
                         map = param[1],
                         map$0 = caml_call2(Core_Map[45], map, inner_key),
                         _ah_ = 1 - caml_call1(Core_Map[32], map$0);
                        return caml_call2(Core_Option[56], _ah_, map$0);
                       });
             });
   }
   function counti(opt, data_equal, map_incr, f){
    var instrumentation = opt ? opt[1] : no_instrumentation;
    return unordered_fold
            (instrumentation,
             data_equal,
             0,
             0,
             0,
             _y_,
             map_incr,
             0,
             function(key, data, count){
              return caml_call2(f, key, data) ? count + 1 | 0 : count;
             },
             function(key, data, count){
              return caml_call2(f, key, data) ? count - 1 | 0 : count;
             });
   }
   function count(instrumentation, data_equal, map_incr, f){
    return counti
            (instrumentation,
             data_equal,
             map_incr,
             function(param, data){return caml_call1(f, data);});
   }
   function existsi(instrumentation, data_equal, map_incr, f){
    var _af_ = counti(instrumentation, data_equal, map_incr, f);
    return caml_call2
            (Incremental[10],
             _af_,
             function(count){return caml_call2(Core[92], count, 0);});
   }
   function exists(instrumentation, data_equal, map_incr, f){
    return existsi
            (instrumentation,
             data_equal,
             map_incr,
             function(param, data){return caml_call1(f, data);});
   }
   function sum(opt, data_equal, map_incr, Group, f){
    var instrumentation = opt ? opt[1] : no_instrumentation;
    return unordered_fold
            (instrumentation,
             data_equal,
             0,
             0,
             0,
             _z_,
             map_incr,
             Group[1],
             function(param, v, acc){
              var _ae_ = caml_call1(f, v);
              return caml_call2(Group[2], acc, _ae_);
             },
             function(param, v, acc){
              var _ad_ = caml_call1(f, v);
              return caml_call2(Group[3], acc, _ad_);
             });
   }
   function for_alli(instrumentation, data_equal, map_incr, f){
    var
     _ac_ =
       counti
        (instrumentation,
         data_equal,
         map_incr,
         function(key, data){return 1 - caml_call2(f, key, data);});
    return caml_call2
            (Incremental[10],
             _ac_,
             function(count){return caml_call2(Core[89], count, 0);});
   }
   function for_all(instrumentation, data_equal, map_incr, f){
    return for_alli
            (instrumentation,
             data_equal,
             map_incr,
             function(param, data){return caml_call1(f, data);});
   }
   function unordered_fold$0
   (opt,
    data_equal,
    update,
    specialized_initial,
    finalize,
    revert_to_init_when_empty,
    map,
    init,
    add,
    remove){
    var instrumentation = opt ? opt[1] : no_instrumentation;
    return unordered_fold
            (instrumentation,
             data_equal,
             update,
             specialized_initial,
             finalize,
             revert_to_init_when_empty,
             map,
             init,
             add,
             remove);
   }
   function unordered_fold_nested_maps$0
   (opt,
    data_equal,
    revert_to_init_when_empty,
    update,
    map,
    init,
    add,
    remove){
    var instrumentation = opt ? opt[1] : no_instrumentation;
    return unordered_fold_nested_maps
            (instrumentation,
             data_equal,
             revert_to_init_when_empty,
             update,
             map,
             init,
             add,
             remove);
   }
   var
    For_testing = [0, find_key_range_linear],
    _A_ = [0, "node_is_unnecessary"],
    _B_ = [0, "node_is_invalid"],
    _C_ = [0, "node_is_const"],
    _D_ = [0, "node_info"],
    _E_ = [0, "saved_value"],
    _F_ = [0, "entries"],
    _G_ = [0, "actual_value"],
    _H_ = [0, "key"];
   function M(K){return [0];}
   function create(_V_, opt, input_map, comparator){
    var
     instrumentation = _V_ ? _V_[1] : no_instrumentation,
     data_equal =
       opt ? opt[1] : function(_ab_, _aa_){return _ab_ === _aa_ ? 1 : 0;},
     self = [];
    caml_update_dummy
     (self,
      [246,
       function(param){
        var
         updater_node =
           caml_call2
            (Incremental[10],
             input_map,
             function(input_map){
              return caml_call1
                      (instrumentation,
                       function(param){
                        var _Y_ = caml_obj_tag(self);
                        a:
                        if(250 === _Y_)
                         var self$0 = self[1];
                        else{
                         if(246 !== _Y_ && 244 !== _Y_){var self$0 = self; break a;}
                         var self$0 = caml_call1(CamlinternalLazy[2], self);
                        }
                        caml_call5
                         (Core_Map[85],
                          self$0[1],
                          input_map,
                          data_equal,
                          0,
                          function(_Z_, param){
                           var
                            changed_value = param[2],
                            key = param[1],
                            entries = caml_call2(Core_Map[39], self$0[2], key);
                           return caml_call2
                                   (Core_List[19],
                                    entries,
                                    function(entry){
                                     var ___ = changed_value[1];
                                     if(847852583 === ___)
                                      var _$_ = 0;
                                     else
                                      var
                                       new_value =
                                         1013247643 <= ___ ? changed_value[2][2] : changed_value[2],
                                       _$_ = [0, new_value];
                                     entry[1] = _$_;
                                     return caml_call1(Incremental[79][2][4], entry[2]);
                                    });
                          });
                        self$0[1] = input_map;
                        return 0;
                       });
             }),
         empty_map = caml_call1(Core_Map[118][1], comparator),
         _X_ = caml_call1(Incremental[4], input_map);
        return [0,
                empty_map,
                empty_map,
                updater_node,
                caml_call2(Incremental[50][2], _X_, 0)];
       }]);
    var _W_ = caml_obj_tag(self);
    if(250 === _W_) return self[1];
    if(246 !== _W_ && 244 !== _W_) return self;
    return caml_call1(CamlinternalLazy[2], self);
   }
   function find(t, key){
    var match = caml_call2(Core_Map[39], t[2], key);
    if(match){
     var entry = match[1];
     return caml_call1(Incremental[79][2][3], entry[2]);
    }
    var incremental_state = caml_call1(Incremental[4], t[3]);
    return caml_call3
            (Incremental[50][3],
             incremental_state,
             t[4],
             function(param){
              var entry = [];
              caml_update_dummy
               (entry,
                [246,
                 function(param){
                  var
                   _R_ =
                     caml_call3
                      (Incremental[79][2][2],
                       incremental_state,
                       [0,
                        function(is_now_observable){
                         var _S_ = caml_obj_tag(entry);
                         a:
                         if(250 === _S_)
                          var entry$0 = entry[1];
                         else{
                          if(246 !== _S_ && 244 !== _S_){var entry$0 = entry; break a;
                          }
                          var entry$0 = caml_call1(CamlinternalLazy[2], entry);
                         }
                         var
                          current_entries = caml_call2(Core_Map[39], t[2], key),
                          is_linked =
                            caml_call2
                             (Core_List[23],
                              current_entries,
                              function(_U_){return entry$0 === _U_ ? 1 : 0;});
                         if(caml_call2(Core_Bool[28], is_linked, is_now_observable))
                          return 0;
                         if(is_now_observable){
                          t[2] =
                           caml_call3
                            (Core_Map[41],
                             t[2],
                             key,
                             function(param){
                              if(param){
                               var other_entries = param[1];
                               if(other_entries){
                                var other_entry = other_entries[1];
                                entry$0[1] = other_entry[1];
                                return [0, entry$0, other_entries];
                               }
                              }
                              entry$0[1] = caml_call2(Core_Map[42], t[1], key);
                              return [0, entry$0, 0];
                             });
                          return 0;
                         }
                         var
                          new_entries =
                            caml_call2
                             (Core_List[11],
                              current_entries,
                              function(x){return 1 - (entry$0 === x ? 1 : 0);}),
                          _T_ =
                            caml_call1(Core_List[18], new_entries)
                             ? caml_call2(Core_Map[45], t[2], key)
                             : caml_call3(Core_Map[36], t[2], key, new_entries);
                         t[2] = _T_;
                         return 0;
                        }],
                       function(param){return caml_call1(Core[242], entry)[1];});
                  return [0, caml_call2(Core_Map[42], t[1], key), _R_];
                 }]);
              var _P_ = caml_obj_tag(entry);
              a:
              if(250 === _P_)
               var entry$0 = entry[1];
              else{
               if(246 !== _P_ && 244 !== _P_){var entry$0 = entry; break a;}
               var entry$0 = caml_call1(CamlinternalLazy[2], entry);
              }
              var _Q_ = caml_call2(Incremental[79][1][2], 0, t[3]);
              caml_call2(Incremental[79][2][6], entry$0[2], _Q_);
              return caml_call1(Incremental[79][2][3], entry$0[2]);
             });
   }
   function sexp_of_t(sexp_of_key, sexp_of_value, t){
    var
     info_per_key =
       caml_call3
        (Core_Map[81],
         t[1],
         t[2],
         function(key, data){
          var _I_ = data[1];
          if(737457313 === _I_)
           var
            match = data[2],
            entries = match[2],
            x = match[1],
            actual_value = [0, x],
            entries$0 = entries,
            actual_value$0 = actual_value;
          else if(847852583 <= _I_)
           var x$0 = data[2], entries$0 = 0, actual_value$0 = [0, x$0];
          else
           var y = data[2], entries$0 = y, actual_value$0 = 0;
          var
           match$0 =
             [0,
              [1,
               [0,
                _F_,
                [0,
                 caml_call2
                  (Core[431],
                   function(entry){
                    var
                     saved_value = entry[1],
                     node = entry[2],
                     node$0 = caml_call1(Incremental[79][2][3], node),
                     match = caml_call1(Incremental[67], node$0),
                     _K_ = caml_call1(Incremental[5], node$0),
                     match$0 = caml_call2(Core_Option[56], _K_, 0),
                     _L_ = 1 - caml_call1(Incremental[6], node$0),
                     match$1 = caml_call2(Core_Option[56], _L_, 0),
                     _M_ = 1 - caml_call1(Incremental[7], node$0),
                     _N_ = caml_call2(Core_Option[56], _M_, 0),
                     match$2 = 0;
                    if(_N_)
                     var
                      v = _N_[1],
                      match$3 =
                        [0,
                         [1, [0, _A_, [0, caml_call1(Core[534], v), 0]]],
                         match$2];
                    else
                     var match$3 = match$2;
                    if(match$1)
                     var
                      v$0 = match$1[1],
                      match$4 =
                        [0,
                         [1, [0, _B_, [0, caml_call1(Core[534], v$0), 0]]],
                         match$3];
                    else
                     var match$4 = match$3;
                    if(match$0)
                     var
                      v$1 = match$0[1],
                      match$5 =
                        [0,
                         [1, [0, _C_, [0, caml_call1(Core[534], v$1), 0]]],
                         match$4];
                    else
                     var match$5 = match$4;
                    if(match)
                     var
                      v$2 = match[1],
                      _O_ =
                        [0,
                         [1, [0, _D_, [0, caml_call1(Core_Info[6], v$2), 0]]],
                         match$5];
                    else
                     var _O_ = match$5;
                    return [1,
                            [0,
                             [1,
                              [0,
                               _E_,
                               [0, caml_call2(Core[466], sexp_of_value, saved_value), 0]]],
                             _O_]];
                   },
                   entries$0),
                 0]]],
              0];
          if(actual_value$0)
           var
            v = actual_value$0[1],
            _J_ =
              [0,
               [1, [0, _G_, [0, caml_call1(sexp_of_value, v), 0]]],
               match$0];
          else
           var _J_ = match$0;
          return [0,
                  [1,
                   [0,
                    [1, [0, _H_, [0, caml_call1(sexp_of_key, key), 0]]],
                    _J_]]];
         });
    return [1, caml_call1(Core_Map[77], info_per_key)];
   }
   caml_call1(Ppx_inline_test_lib[6], cst_incr_map);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incr_map);
   var
    Incr_map =
      [0,
       of_set,
       filter_mapi,
       mapi,
       filter_map,
       map,
       filter_mapi$0,
       map$0,
       filter_map$0,
       mapi$0,
       partition_mapi,
       partition_mapi$0,
       unordered_fold$0,
       unordered_fold_with_extra,
       cutoff,
       mapi_count,
       map_count,
       mapi_min,
       mapi_max,
       map_min,
       map_max,
       min_value,
       max_value,
       mapi_bounds,
       map_bounds,
       value_bounds,
       merge,
       merge_both_some,
       merge$0,
       unzip,
       unzip_mapi,
       unzip_mapi$0,
       flatten,
       join,
       separate,
       keys,
       rank,
       subrange,
       subrange_by_rank,
       rekey,
       index_byi,
       index_by,
       unordered_fold_nested_maps$0,
       transpose,
       collapse,
       collapse_by,
       expand,
       counti,
       count,
       for_alli,
       for_all,
       existsi,
       exists,
       sum,
       [0, create, find, M, [0, sexp_of_t]],
       For_testing,
       function(Incr){
        function flatten$0(x){return flatten(Incr[2][3], x);}
        function M(K){return [0];}
        return [0,
                of_set,
                filter_mapi,
                mapi,
                filter_map,
                map,
                filter_mapi$0,
                mapi$0,
                filter_map$0,
                map$0,
                partition_mapi,
                partition_mapi$0,
                unordered_fold$0,
                unordered_fold_with_extra,
                cutoff,
                mapi_count,
                map_count,
                mapi_min,
                mapi_max,
                map_min,
                map_max,
                min_value,
                max_value,
                mapi_bounds,
                map_bounds,
                value_bounds,
                merge,
                merge_both_some,
                unzip,
                unzip_mapi,
                unzip_mapi$0,
                merge$0,
                flatten$0,
                join,
                separate,
                keys,
                rank,
                subrange,
                subrange_by_rank,
                rekey,
                index_byi,
                index_by,
                unordered_fold_nested_maps$0,
                transpose,
                collapse,
                collapse_by,
                expand,
                counti,
                count,
                for_alli,
                for_all,
                existsi,
                exists,
                sum,
                [0, create, find, M, [0, sexp_of_t]],
                For_testing];
       }];
   runtime.caml_register_global(65, Incr_map, cst_Incr_map);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
