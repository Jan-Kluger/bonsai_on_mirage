// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Bonsai__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Bonsai = [0];
   runtime.caml_register_global(0, Bonsai, "Bonsai__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Annotate_incr
//# unitInfo: Requires: Base__Hash, Core, Core__Hashable, Core__List, Core__Memo, Core__Source_code_position, Core__String, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Tailwind_colors, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Assoc_input = "Assoc_input",
    cst_Assoc_inputs = "Assoc_inputs",
    cst_Assoc_key = "Assoc_key",
    cst_Assoc_lifecycles = "Assoc_lifecycles",
    cst_Assoc_results = "Assoc_results",
    cst_Bonsai_Annotate_incr = "Bonsai__Annotate_incr",
    cst_Empty_lifecycle = "Empty_lifecycle",
    cst_Input = "Input",
    cst_Lifecycle = "Lifecycle",
    cst_Lifecycle_apply_action_pai = "Lifecycle_apply_action_pair",
    cst_Model = "Model",
    cst_Model_and_input = "Model_and_input",
    cst_Path = "Path",
    cst_Result = "Result",
    cst_Value = "Value",
    cst_assoc_input$0 = "assoc_input",
    cst_assoc_inputs = "assoc_inputs",
    cst_assoc_key$0 = "assoc_key",
    cst_assoc_lifecycles = "assoc_lifecycles",
    cst_assoc_results = "assoc_results",
    cst_bonsai = "bonsai",
    cst_bound$1 = "bound: ",
    cst_empty_lifecycle$0 = "empty_lifecycle",
    cst_input$0 = "input",
    cst_lifecycle$0 = "lifecycle",
    cst_lifecycle_apply_action_pai$0 = "lifecycle_apply_action_pair",
    cst_model$0 = "model",
    cst_model_and_input = "model_and_input",
    cst_path$0 = "path",
    cst_result$0 = "result",
    cst_value$0 = "value",
    caml_string_compare = runtime.caml_string_compare;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_005 = "src/annotate_incr.ml.Kind.T.t",
    Ui_incr = global_data.Ui_incr,
    Core_String = global_data.Core__String,
    Tailwind_colors = global_data.Tailwind_colors,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_Hash = global_data.Base__Hash,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Core = global_data.Core,
    Core_List = global_data.Core__List,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Hashable = global_data.Core__Hashable,
    Core_Memo = global_data.Core__Memo;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Annotate_incr);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/annotate_incr.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "annotate_incr.ml");
   var enabled = [0, 0];
   function enable(param){enabled[1] = 1; return 0;}
   function disable(param){enabled[1] = 0; return 0;}
   var empty_attrs = Core_String[152][4];
   function hash_fold_t(hsv, arg){
    switch(arg){
      case 0:
       return caml_call2(Base_Hash[3], hsv, 0);
      case 1:
       return caml_call2(Base_Hash[3], hsv, 1);
      case 2:
       return caml_call2(Base_Hash[3], hsv, 2);
      case 3:
       return caml_call2(Base_Hash[3], hsv, 3);
      case 4:
       return caml_call2(Base_Hash[3], hsv, 4);
      case 5:
       return caml_call2(Base_Hash[3], hsv, 5);
      case 6:
       return caml_call2(Base_Hash[3], hsv, 6);
      case 7:
       return caml_call2(Base_Hash[3], hsv, 7);
      case 8:
       return caml_call2(Base_Hash[3], hsv, 8);
      case 9:
       return caml_call2(Base_Hash[3], hsv, 9);
      case 10:
       return caml_call2(Base_Hash[3], hsv, 10);
      case 11:
       return caml_call2(Base_Hash[3], hsv, 11);
      case 12:
       return caml_call2(Base_Hash[3], hsv, 12);
      default: return caml_call2(Base_Hash[3], hsv, 13);
    }
   }
   function hash(arg){
    var hsv = caml_call2(Base_Hash[11], 0, 0), _I_ = hash_fold_t(hsv, arg);
    return caml_call1(Base_Hash[9], _I_);
   }
   var
    compare = runtime.caml_int_compare,
    _a_ = [0, cst_Input],
    _b_ = [0, cst_Value],
    _c_ = [0, cst_Result],
    _d_ = [0, cst_Lifecycle],
    _e_ = [0, cst_Empty_lifecycle],
    _f_ = [0, cst_Model],
    _g_ = [0, cst_Model_and_input],
    _h_ = [0, cst_Assoc_key],
    _i_ = [0, cst_Assoc_input],
    _j_ = [0, cst_Assoc_results],
    _k_ = [0, cst_Assoc_lifecycles],
    _l_ = [0, cst_Assoc_inputs],
    _m_ = [0, cst_Path],
    _n_ = [0, cst_Lifecycle_apply_action_pai];
   function t_of_sexp(sexp_006){
    a:
    {
     if(0 === sexp_006[0]){
      var
       _y_ = sexp_006[1],
       _z_ = caml_string_compare(_y_, cst_assoc_input$0);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              j:
              {
               k:
               {
                l:
                {
                 m:
                 {
                  n:
                  {
                   if(0 <= _z_){
                    if(0 >= _z_) break h;
                    var _A_ = caml_string_compare(_y_, cst_lifecycle$0);
                    if(0 > _A_){
                     if(_y_ === cst_assoc_inputs) break g;
                     if(_y_ === cst_assoc_key$0) break f;
                     if(_y_ === cst_assoc_lifecycles) break e;
                     if(_y_ === cst_assoc_results) break d;
                     if(_y_ === cst_empty_lifecycle$0) break c;
                     if(_y_ !== cst_input$0) break a;
                     break b;
                    }
                    if(0 < _A_){
                     if(_y_ === cst_lifecycle_apply_action_pai$0) break n;
                     if(_y_ === cst_model$0) break m;
                     if(_y_ === cst_model_and_input) break l;
                     if(_y_ === cst_path$0) break k;
                     if(_y_ === cst_result$0) break j;
                     if(_y_ !== cst_value$0) break a;
                     break i;
                    }
                   }
                   else{
                    var _B_ = caml_string_compare(_y_, cst_Lifecycle);
                    if(0 > _B_){
                     if(_y_ === cst_Assoc_input) break h;
                     if(_y_ === cst_Assoc_inputs) break g;
                     if(_y_ === cst_Assoc_key) break f;
                     if(_y_ === cst_Assoc_lifecycles) break e;
                     if(_y_ === cst_Assoc_results) break d;
                     if(_y_ === cst_Empty_lifecycle) break c;
                     if(_y_ !== cst_Input) break a;
                     break b;
                    }
                    if(0 < _B_){
                     if(_y_ === cst_Lifecycle_apply_action_pai) break n;
                     if(_y_ === cst_Model) break m;
                     if(_y_ === cst_Model_and_input) break l;
                     if(_y_ === cst_Path) break k;
                     if(_y_ === cst_Result) break j;
                     if(_y_ !== cst_Value) break a;
                     break i;
                    }
                   }
                   return 3;
                  }
                  return 13;
                 }
                 return 5;
                }
                return 6;
               }
               return 12;
              }
              return 2;
             }
             return 1;
            }
            return 8;
           }
           return 11;
          }
          return 7;
         }
         return 10;
        }
        return 9;
       }
       return 4;
      }
      return 0;
     }
     var _C_ = sexp_006[1];
     if(! _C_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_005, sexp_006);
     var _D_ = _C_[1];
     if(0 !== _D_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_005, sexp_006);
     var _E_ = _D_[1], _F_ = caml_string_compare(_E_, cst_assoc_input$0);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 n:
                 {
                  if(0 <= _F_){
                   if(0 >= _F_) break h;
                   var _G_ = caml_string_compare(_E_, cst_lifecycle$0);
                   if(0 > _G_){
                    if(_E_ === cst_assoc_inputs) break g;
                    if(_E_ === cst_assoc_key$0) break f;
                    if(_E_ === cst_assoc_lifecycles) break e;
                    if(_E_ === cst_assoc_results) break d;
                    if(_E_ === cst_empty_lifecycle$0) break c;
                    if(_E_ !== cst_input$0) break a;
                    break b;
                   }
                   if(0 < _G_){
                    if(_E_ === cst_lifecycle_apply_action_pai$0) break n;
                    if(_E_ === cst_model$0) break m;
                    if(_E_ === cst_model_and_input) break l;
                    if(_E_ === cst_path$0) break k;
                    if(_E_ === cst_result$0) break j;
                    if(_E_ !== cst_value$0) break a;
                    break i;
                   }
                  }
                  else{
                   var _H_ = caml_string_compare(_E_, cst_Lifecycle);
                   if(0 > _H_){
                    if(_E_ === cst_Assoc_input) break h;
                    if(_E_ === cst_Assoc_inputs) break g;
                    if(_E_ === cst_Assoc_key) break f;
                    if(_E_ === cst_Assoc_lifecycles) break e;
                    if(_E_ === cst_Assoc_results) break d;
                    if(_E_ === cst_Empty_lifecycle) break c;
                    if(_E_ !== cst_Input) break a;
                    break b;
                   }
                   if(0 < _H_){
                    if(_E_ === cst_Lifecycle_apply_action_pai) break n;
                    if(_E_ === cst_Model) break m;
                    if(_E_ === cst_Model_and_input) break l;
                    if(_E_ === cst_Path) break k;
                    if(_E_ === cst_Result) break j;
                    if(_E_ !== cst_Value) break a;
                    break i;
                   }
                  }
                  return caml_call2
                          (Sexplib0_Sexp_conv_error[3], error_source_005, sexp_006);
                 }
                 return caml_call2
                         (Sexplib0_Sexp_conv_error[3], error_source_005, sexp_006);
                }
                return caml_call2
                        (Sexplib0_Sexp_conv_error[3], error_source_005, sexp_006);
               }
               return caml_call2
                       (Sexplib0_Sexp_conv_error[3], error_source_005, sexp_006);
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[3], error_source_005, sexp_006);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[3], error_source_005, sexp_006);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[3], error_source_005, sexp_006);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3], error_source_005, sexp_006);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[3], error_source_005, sexp_006);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[3], error_source_005, sexp_006);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[3], error_source_005, sexp_006);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[3], error_source_005, sexp_006);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[3], error_source_005, sexp_006);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_005, sexp_006);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_005, sexp_006);
   }
   function sexp_of_t(param){
    switch(param){
      case 0:
       return _a_;
      case 1:
       return _b_;
      case 2:
       return _c_;
      case 3:
       return _d_;
      case 4:
       return _e_;
      case 5:
       return _f_;
      case 6:
       return _g_;
      case 7:
       return _h_;
      case 8:
       return _i_;
      case 9:
       return _j_;
      case 10:
       return _k_;
      case 11:
       return _l_;
      case 12:
       return _m_;
      default: return _n_;
    }
   }
   var
    include =
      caml_call1
       (Core_Hashable[3],
        [0, hash_fold_t, t_of_sexp, compare, sexp_of_t, hash]),
    hashable = include[4],
    cst_input = cst_input$0,
    cst_value = cst_value$0,
    cst_result = cst_result$0,
    cst_lifecycle = cst_lifecycle$0,
    cst_empty_lifecycle = "empty lifecycle",
    cst_model = cst_model$0,
    cst_model_input = "model & input",
    cst_assoc_key = "assoc key",
    cst_assoc_input = "assoc input",
    cst_assoc_result_map = "assoc result map",
    cst_assoc_lifecycle_map = "assoc lifecycle map",
    cst_assoc_input_map = "assoc input map",
    cst_path = cst_path$0,
    cst_lifecycle_apply_action_pai = "lifecycle/apply-action pair",
    cst_fillcolor = "fillcolor",
    _o_ = [0, "style", "filled"],
    cst_app = "app/",
    cst_lib = "lib/",
    cst_bound = cst_bound$1,
    cst_bound$0 = cst_bound$1,
    _p_ =
      caml_call3
       (Core_Memo[1],
        [0, hashable],
        0,
        function(kind, incr){
         var _w_ = 0;
         switch(kind){
           case 0:
            var _x_ = cst_input; break;
           case 1:
            var _x_ = cst_value; break;
           case 2:
            var _x_ = cst_result; break;
           case 3:
            var _x_ = cst_lifecycle; break;
           case 4:
            var _x_ = cst_empty_lifecycle; break;
           case 5:
            var _x_ = cst_model; break;
           case 6:
            var _x_ = cst_model_input; break;
           case 7:
            var _x_ = cst_assoc_key; break;
           case 8:
            var _x_ = cst_assoc_input; break;
           case 9:
            var _x_ = cst_assoc_result_map; break;
           case 10:
            var _x_ = cst_assoc_lifecycle_map; break;
           case 11:
            var _x_ = cst_assoc_input_map; break;
           case 12:
            var _x_ = cst_path; break;
           default: var _x_ = cst_lifecycle_apply_action_pai;
         }
         var label = [0, _x_, _w_];
         switch(kind){
           case 0:
            var match = Tailwind_colors[75]; break;
           case 1:
            var match = Tailwind_colors[54]; break;
           case 2:
            var match = Tailwind_colors[55]; break;
           case 3:
            var match = Tailwind_colors[155]; break;
           case 4:
            var match = Tailwind_colors[157]; break;
           case 5:
            var match = Tailwind_colors[115]; break;
           case 6:
            var match = Tailwind_colors[205]; break;
           case 7:
            var match = Tailwind_colors[206]; break;
           case 8:
            var match = Tailwind_colors[207]; break;
           case 9:
            var match = Tailwind_colors[56]; break;
           case 10:
            var match = Tailwind_colors[156]; break;
           case 11:
            var match = Tailwind_colors[76]; break;
           case 12:
            var match = Tailwind_colors[57]; break;
           default: var match = Tailwind_colors[116];
         }
         var
          color = match[2],
          attrs =
            caml_call1
             (Core_String[152][14],
              [0, _o_, [0, [0, cst_fillcolor, color], 0]]);
         return caml_call3(Ui_incr[74][3], incr, label, attrs);
        });
   function annotate_packed(kind, incr){
    var _v_ = enabled[1];
    return _v_ ? caml_call2(_p_, kind, incr) : _v_;
   }
   function annotate(kind, incr){
    var _u_ = enabled[1];
    return _u_ ? annotate_packed(kind, caml_call1(Ui_incr[75], incr)) : _u_;
   }
   function attribute_packed(pos_opt, t){
    if(enabled[1] && pos_opt){
     var
      pos$0 = pos_opt[1],
      _r_ = caml_call1(Core_Source_code_position[2], pos$0),
      _s_ = caml_call2(Core_String[92], _r_, cst_lib),
      pos = caml_call2(Core_String[92], _s_, cst_app),
      match = caml_call2(Core_String[74], pos, 47);
     if(match)
      var
       match$0 = match[1],
       r = match$0[2],
       l = match$0[1],
       _t_ = [0, caml_call2(Core[17], cst_bound, r), 0],
       labels = [0, caml_call2(Core[17], cst_bound$0, l), _t_];
     else
      var labels = [0, pos, 0];
     return caml_call2
             (Core_List[19],
              labels,
              function(label){
               var label$0 = [0, label, 0];
               return caml_call3(Ui_incr[74][3], t, label$0, empty_attrs);
              });
    }
    return 0;
   }
   function attribute(pos_opt, incr){
    var _q_ = enabled[1];
    return _q_
            ? attribute_packed(pos_opt, caml_call1(Ui_incr[75], incr))
            : _q_;
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Annotate_incr);
   var
    Bonsai_Annotate_incr =
      [0,
       enable,
       disable,
       [0],
       annotate,
       annotate_packed,
       attribute,
       attribute_packed];
   runtime.caml_register_global
    (112, Bonsai_Annotate_incr, cst_Bonsai_Annotate_incr);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Module_types
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Module_types = "Bonsai__Module_types",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Module_types);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/module_types.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "module_types.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Module_types);
   var Bonsai_Module_types = [0];
   runtime.caml_register_global
    (11, Bonsai_Module_types, cst_Bonsai_Module_types);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Import
//# unitInfo: Requires: Bonsai__Annotate_incr, Bonsai__Module_types, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Import = "Bonsai__Import",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bonsai_Annotate_incr = global_data.Bonsai__Annotate_incr;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/import.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "import.ml");
   var
    enable = Bonsai_Annotate_incr[1],
    disable = Bonsai_Annotate_incr[2],
    Kind = Bonsai_Annotate_incr[3],
    annotate = Bonsai_Annotate_incr[4],
    annotate_packed = Bonsai_Annotate_incr[5],
    attribute = Bonsai_Annotate_incr[6],
    attribute_packed = Bonsai_Annotate_incr[7];
   function reset_unit_model(_c_, _b_, _a_, param){return 0;}
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Import);
   var
    Bonsai_Import =
      [0,
       enable,
       disable,
       Kind,
       annotate,
       annotate_packed,
       attribute,
       attribute_packed,
       reset_unit_model];
   runtime.caml_register_global(12, Bonsai_Import, cst_Bonsai_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Environment
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_incr, Univ_map
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Environment = "Bonsai__Environment",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Ui_incr = global_data.Ui_incr,
    Univ_map = global_data.Univ_map;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Environment);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/environment.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "environment.ml");
   var
    _a_ = [0, Ui_incr[5]],
    include = caml_call1(caml_call1(Univ_map[23], Univ_map[1]), _a_),
    empty = include[4],
    find = include[10],
    add_exn = include[13],
    update = include[16];
   function add_overwriting(t, key, data){
    return caml_call3(update, t, key, function(param){return data;});
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Environment);
   var Bonsai_Environment = [0, empty, add_exn, add_overwriting, find];
   runtime.caml_register_global
    (13, Bonsai_Environment, cst_Bonsai_Environment);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Value
//# unitInfo: Requires: Base__Applicative, Bonsai__Environment, Bonsai__Import, Core, Core__Source_code_position, Core__Type_equal, Expect_test_collector, Incremental, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib__String, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_Bonsai_Value = "Bonsai__Value",
    cst_bonsai = "bonsai",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    Ui_incr = global_data.Ui_incr,
    Bonsai_Environment = global_data.Bonsai__Environment,
    Stdlib_String = global_data.Stdlib__String,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Incremental = global_data.Incremental,
    Bonsai_Import = global_data.Bonsai__Import,
    Core_Type_equal = global_data.Core__Type_equal,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Base_Applicative = global_data.Base__Applicative;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Value);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/value.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "value.ml");
   var
    cst_The_Value_t_for_the_key_in =
      "The Value.t for the key introduced within a [Bonsai.assoc] or [Bonsai.assoc_on] computation",
    cst_The_Value_t_for_the_data_i =
      "The Value.t for the data introduced within a [Bonsai.assoc] or [Bonsai.assoc_on] computation",
    cst_The_name_for_the_model_int =
      "The name for the model introduced within a [Bonsai.wrap] computation",
    cst_The_Value_t_for_the_inject =
      "The Value.t for the injection function introduced within a [Bonsai.wrap] computation",
    cst_The_app_input_Value_t = "The app input Value.t",
    cst_A_model_resetter = "A model resetter",
    _a_ = [0, "TEST_FILENAME", 0, 0, 0],
    cst_A_Value_t_introduced_by_th =
      "A Value.t introduced by the [let%sub] expression at ",
    cst_A_Value_t_introduced_by_so =
      "A Value.t introduced by some [let%sub] expression",
    cst_map2 = "map2",
    cst_map = "map",
    cst_cutoff = "cutoff",
    _c_ =
      [0,
       " was used outside of the scope that it was declared in. Make sure that you aren't storing it inside a ref.",
       0],
    cst_return = "return",
    cst_return_exn = "return exn";
   function value_id(name){
    return caml_call2(Core_Type_equal[8][3], name, Core[148]);
   }
   function map2(t1, t2, f){
    return [0, [6, t1, t2, f], 0, value_id(cst_map2)];
   }
   function named(name_source, id){return [0, [2, name_source], 0, id];}
   function cutoff(added_by_let_syntax, t, equal){
    var value = [4, t, equal, added_by_let_syntax];
    return [0, value, 0, value_id(cst_cutoff)];
   }
   function _b_(env, param){
    var id = param[3], value = param[1];
    switch(value[0]){
      case 0:
       var x = value[1]; return caml_call1(Ui_incr[11], x);
      case 1:
       var x$0 = value[1]; return x$0;
      case 2:
       var
        name_source = value[1],
        match = caml_call2(Bonsai_Environment[4], env, id);
       if(match){var incremental = match[1]; return incremental;}
       if(typeof name_source === "number")
        switch(name_source){
          case 0:
           var _k_ = cst_The_Value_t_for_the_key_in; break;
          case 1:
           var _k_ = cst_The_Value_t_for_the_data_i; break;
          case 2:
           var _k_ = cst_The_name_for_the_model_int; break;
          case 3:
           var _k_ = cst_The_Value_t_for_the_inject; break;
          case 4:
           var _k_ = cst_The_app_input_Value_t; break;
          default: var _k_ = cst_A_model_resetter;
        }
       else{
        var here = name_source[1];
        if(here)
         var
          here$0 = here[1],
          here$1 = Core[542] ? _a_ : here$0,
          _j_ =
            [0,
             cst_A_Value_t_introduced_by_th,
             [0, caml_call1(Core_Source_code_position[2], here$1), 0]],
          _k_ = caml_call2(Stdlib_String[7], cst, _j_);
        else
         var _k_ = cst_A_Value_t_introduced_by_so;
       }
       var
        _l_ = caml_call2(Stdlib_String[7], cst$0, [0, _k_, _c_]),
        _m_ = caml_call1(Sexplib0_Sexp_conv[7], _l_);
       return caml_call1(Core[255], _m_);
      case 3:
       var
        t2 = value[2],
        t1 = value[1],
        _n_ = _b_(env, t2),
        _o_ = _b_(env, t1);
       return caml_call2(Ui_incr[42], _o_, _n_);
      case 4:
       var equal = value[2], t = value[1], incremental_node = _b_(env, t);
       switch(t[1][0]){
         case 1:
         case 2:
         case 4:
          var
           incremental_node$0 =
             caml_call2
              (Ui_incr[12], incremental_node, function(_T_){return _T_;});
          break;
         default: var incremental_node$0 = incremental_node;
       }
       var _p_ = caml_call1(Incremental[58][5], equal);
       caml_call2(Incremental[59], incremental_node$0, _p_);
       return incremental_node$0;
      case 5:
       var f = value[2], t$0 = value[1], _q_ = _b_(env, t$0);
       return caml_call2(Ui_incr[12], _q_, f);
      case 6:
       var
        f$0 = value[3],
        t2$0 = value[2],
        t1$0 = value[1],
        _r_ = _b_(env, t2$0),
        _s_ = _b_(env, t1$0);
       return caml_call3(Ui_incr[14], _s_, _r_, f$0);
      case 7:
       var
        f$1 = value[4],
        t3 = value[3],
        t2$1 = value[2],
        t1$1 = value[1],
        _t_ = _b_(env, t3),
        _u_ = _b_(env, t2$1),
        _v_ = _b_(env, t1$1);
       return caml_call4(Ui_incr[15], _v_, _u_, _t_, f$1);
      case 8:
       var
        f$2 = value[5],
        t4 = value[4],
        t3$0 = value[3],
        t2$2 = value[2],
        t1$2 = value[1],
        _w_ = _b_(env, t4),
        _x_ = _b_(env, t3$0),
        _y_ = _b_(env, t2$2),
        _z_ = _b_(env, t1$2);
       return caml_call5(Ui_incr[16], _z_, _y_, _x_, _w_, f$2);
      case 9:
       var
        f$3 = value[6],
        t5 = value[5],
        t4$0 = value[4],
        t3$1 = value[3],
        t2$3 = value[2],
        t1$3 = value[1],
        _A_ = _b_(env, t5),
        _B_ = _b_(env, t4$0),
        _C_ = _b_(env, t3$1),
        _D_ = _b_(env, t2$3),
        _E_ = _b_(env, t1$3);
       return caml_call6(Ui_incr[17], _E_, _D_, _C_, _B_, _A_, f$3);
      case 10:
       var
        f$4 = value[7],
        t6 = value[6],
        t5$0 = value[5],
        t4$1 = value[4],
        t3$2 = value[3],
        t2$4 = value[2],
        t1$4 = value[1],
        _F_ = _b_(env, t6),
        _G_ = _b_(env, t5$0),
        _H_ = _b_(env, t4$1),
        _I_ = _b_(env, t3$2),
        _J_ = _b_(env, t2$4),
        _K_ = _b_(env, t1$4);
       return caml_call7(Ui_incr[18], _K_, _J_, _I_, _H_, _G_, _F_, f$4);
      case 11:
       var
        f$5 = value[8],
        t7 = value[7],
        t6$0 = value[6],
        t5$1 = value[5],
        t4$2 = value[4],
        t3$3 = value[3],
        t2$5 = value[2],
        t1$5 = value[1],
        _L_ = _b_(env, t7),
        _M_ = _b_(env, t6$0),
        _N_ = _b_(env, t5$1),
        _O_ = _b_(env, t4$2),
        _P_ = _b_(env, t3$3),
        _Q_ = _b_(env, t2$5),
        _R_ = _b_(env, t1$5);
       return caml_call8(Ui_incr[19], _R_, _Q_, _P_, _O_, _N_, _M_, _L_, f$5);
      default:
       var ex = value[1], _S_ = caml_call1(Ui_incr[11], 0);
       return caml_call2
               (Ui_incr[12],
                _S_,
                function(param){throw caml_maybe_attach_backtrace(ex, 0);});
    }
   }
   function eval$0(env, t){
    var incr = _b_(env, t);
    caml_call2(Bonsai_Import[4], 1, incr);
    return incr;
   }
   function return$0(a){return [0, [0, a], 0, value_id(cst_return)];}
   function return_exn(exn){
    return [0, [12, exn], 0, value_id(cst_return_exn)];
   }
   var
    map =
      [0,
       -198771759,
       function(t, f){return [0, [5, t, f], 0, value_id(cst_map)];}],
    include = caml_call1(Base_Applicative[12], [0, return$0, map2, map]),
    return$1 = include[1],
    map$0 = include[2],
    symbol = include[4],
    symbol$0 = include[5],
    symbol$1 = include[6],
    symbol_map = include[7],
    apply = include[8],
    map2$0 = include[9],
    all_unit = include[12],
    Applicative_infix = include[13],
    cst_both = "both",
    cst_map3 = "map3",
    cst_map4 = "map4",
    cst_map5 = "map5",
    cst_map6 = "map6",
    cst_map7 = "map7",
    cst_incr = "incr";
   function both(a, b){return [0, [3, a, b], 0, value_id(cst_both)];}
   function map3(t1, t2, t3, f){
    return [0, [7, t1, t2, t3, f], 0, value_id(cst_map3)];
   }
   function map4(t1, t2, t3, t4, f){
    return [0, [8, t1, t2, t3, t4, f], 0, value_id(cst_map4)];
   }
   function map5(t1, t2, t3, t4, t5, f){
    return [0, [9, t1, t2, t3, t4, t5, f], 0, value_id(cst_map5)];
   }
   function map6(t1, t2, t3, t4, t5, t6, f){
    return [0, [10, t1, t2, t3, t4, t5, t6, f], 0, value_id(cst_map6)];
   }
   function map7(t1, t2, t3, t4, t5, t6, t7, f){
    return [0, [11, t1, t2, t3, t4, t5, t6, t7, f], 0, value_id(cst_map7)];
   }
   function all(param){
    if(! param) return caml_call1(return$1, 0);
    var _d_ = param[2], t1 = param[1];
    if(! _d_) return caml_call2(map$0, t1, function(a1){return [0, a1, 0];});
    var _e_ = _d_[2], t2 = _d_[1];
    if(! _e_)
     return caml_call3
             (map2$0, t1, t2, function(a1, a2){return [0, a1, [0, a2, 0]];});
    var _f_ = _e_[2], t3 = _e_[1];
    if(! _f_)
     return map3
             (t1,
              t2,
              t3,
              function(a1, a2, a3){return [0, a1, [0, a2, [0, a3, 0]]];});
    var _g_ = _f_[2], t4 = _f_[1];
    if(! _g_)
     return map4
             (t1,
              t2,
              t3,
              t4,
              function(a1, a2, a3, a4){
               return [0, a1, [0, a2, [0, a3, [0, a4, 0]]]];
              });
    var _h_ = _g_[2], t5 = _g_[1];
    if(! _h_)
     return map5
             (t1,
              t2,
              t3,
              t4,
              t5,
              function(a1, a2, a3, a4, a5){
               return [0, a1, [0, a2, [0, a3, [0, a4, [0, a5, 0]]]]];
              });
    var _i_ = _h_[2], t6 = _h_[1];
    if(! _i_)
     return map6
             (t1,
              t2,
              t3,
              t4,
              t5,
              t6,
              function(a1, a2, a3, a4, a5, a6){
               return [0, a1, [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, 0]]]]]];
              });
    var t7 = _i_[1];
    if(! _i_[2])
     return map7
             (t1,
              t2,
              t3,
              t4,
              t5,
              t6,
              t7,
              function(a1, a2, a3, a4, a5, a6, a7){
               return [0,
                       a1,
                       [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, [0, a7, 0]]]]]]];
              });
    var
     rest = _i_[2],
     left =
       map7
        (t1,
         t2,
         t3,
         t4,
         t5,
         t6,
         t7,
         function(a1, a2, a3, a4, a5, a6, a7){
          return [0,
                  a1,
                  [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, [0, a7, 0]]]]]]];
         }),
     right = all(rest);
    return caml_call3
            (map2$0,
             left,
             right,
             function(left, right){return caml_call2(Core[155], left, right);});
   }
   function of_incr(x){return [0, [1, x], 0, value_id(cst_incr)];}
   var
    Open_on_rhs_intf = [0],
    symbol$2 = Applicative_infix[1],
    symbol$3 = Applicative_infix[2],
    symbol$4 = Applicative_infix[3],
    symbol_map$0 = Applicative_infix[4],
    Open_on_rhs = [0],
    Let_syntax = [0, return$1, map$0, both, Open_on_rhs],
    Let_syntax$0 =
      [0, return$1, symbol$2, symbol$3, symbol$4, symbol_map$0, Let_syntax];
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Value);
   var
    Bonsai_Value =
      [0,
       [0],
       return$1,
       map$0,
       both,
       symbol,
       symbol$0,
       symbol$1,
       symbol_map,
       apply,
       map2$0,
       all,
       all_unit,
       Applicative_infix,
       Open_on_rhs_intf,
       Let_syntax$0,
       map3,
       map4,
       map5,
       map6,
       map7,
       named,
       cutoff,
       eval$0,
       of_incr,
       return_exn];
   runtime.caml_register_global(45, Bonsai_Value, cst_Bonsai_Value);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Var
//# unitInfo: Requires: Bonsai__Value, Core, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Var = "Bonsai__Var",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ui_incr = global_data.Ui_incr,
    Bonsai_Value = global_data.Bonsai__Value,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Var);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/var.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "var.ml");
   var
    cst_Bonsai_Var_mutated_during_ =
      "Bonsai.Var mutated during the computation of a Bonsai value";
   function create(x){return caml_call2(Ui_incr[53][2], 0, x);}
   function set(t, v){
    if(caml_call1(Ui_incr[59], 0))
     caml_call1(Core[5], cst_Bonsai_Var_mutated_during_);
    return caml_call2(Ui_incr[53][3], t, v);
   }
   function update(t, f){
    var old = caml_call1(Ui_incr[53][5], t);
    return set(t, caml_call1(f, old));
   }
   function get(t){return caml_call1(Ui_incr[53][5], t);}
   function value(t){
    var _b_ = caml_call1(Ui_incr[53][4], t);
    return caml_call1(Bonsai_Value[24], _b_);
   }
   function incr_var(_a_){return _a_;}
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Var);
   var Bonsai_Var = [0, create, update, set, get, value, incr_var];
   runtime.caml_register_global(15, Bonsai_Var, cst_Bonsai_Var);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Input
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Input = "Bonsai__Input",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    static$0 = [1, 0],
    Ui_incr = global_data.Ui_incr,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Input);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/input.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "input.ml");
   function dynamic(input){return [0, input];}
   function map(t, f){
    switch(t[0]){
      case 0:
       var input = t[1]; return [0, caml_call2(Ui_incr[12], input, f)];
      case 1:
       var input$0 = t[1]; return [1, caml_call1(f, input$0)];
      default:
       var g = t[2], input$1 = t[1];
       return [2,
               input$1,
               function(x){return caml_call1(f, caml_call1(g, x));}];
    }
   }
   function iter_incremental(t, f){
    switch(t[0]){
      case 0:
       var incr = t[1]; return caml_call1(f, caml_call1(Ui_incr[75], incr));
      case 1:
       return 0;
      default:
       var incr$0 = t[1];
       return caml_call1(f, caml_call1(Ui_incr[75], incr$0));
    }
   }
   function to_incremental(param){
    switch(param[0]){
      case 0:
       var input = param[1]; return input;
      case 1:
       var input$0 = param[1]; return caml_call1(Ui_incr[11], input$0);
      default:
       var f = param[2], incr = param[1];
       return caml_call2(Ui_incr[12], incr, f);
    }
   }
   function merge(a, b){
    switch(a[0]){
      case 0:
       var a$0 = a[1];
       switch(b[0]){
         case 0:
          var b$0 = b[1]; return [0, caml_call2(Ui_incr[42], a$0, b$0)];
         case 1:
          var b$1 = b[1]; return [2, a$0, function(a){return [0, a, b$1];}];
         default:
          var f = b[2], b$2 = b[1];
          return [2,
                  caml_call2(Ui_incr[42], a$0, b$2),
                  function(param){
                   var b = param[2], a = param[1];
                   return [0, a, caml_call1(f, b)];
                  }];
       }
      case 1:
       var a$1 = a[1];
       switch(b[0]){
         case 0:
          var b$3 = b[1]; return [2, b$3, function(b){return [0, a$1, b];}];
         case 1:
          var b$4 = b[1]; return [1, [0, a$1, b$4]];
         default:
          var f$0 = b[2], b$5 = b[1];
          return [2, b$5, function(b){return [0, a$1, caml_call1(f$0, b)];}];
       }
      default:
       var f$1 = a[2], a$2 = a[1];
       switch(b[0]){
         case 0:
          var b$6 = b[1];
          return [2,
                  caml_call2(Ui_incr[42], a$2, b$6),
                  function(param){
                   var b = param[2], a = param[1];
                   return [0, caml_call1(f$1, a), b];
                  }];
         case 1:
          var b$7 = b[1];
          return [2, a$2, function(a){return [0, caml_call1(f$1, a), b$7];}];
         default:
          var g = b[2], b$8 = b[1];
          return [2,
                  caml_call2(Ui_incr[42], a$2, b$8),
                  function(param){
                   var b = param[2], a = param[1], _a_ = caml_call1(g, b);
                   return [0, caml_call1(f$1, a), _a_];
                  }];
       }
    }
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Input);
   var
    Bonsai_Input =
      [0, dynamic, static$0, to_incremental, merge, map, iter_incremental];
   runtime.caml_register_global(13, Bonsai_Input, cst_Bonsai_Input);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Path
//# unitInfo: Requires: Base__Buffer, Core, Core__Char, Core__Comparable, Core__Int, Core__Sexp, Core__String, Core__Type_equal, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Reversed_list, Uopt
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Path = "Bonsai__Path",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "_",
    Core = global_data.Core,
    Uopt = global_data.Uopt,
    Reversed_list = global_data.Reversed_list,
    Base_Buffer = global_data.Base__Buffer,
    Core_Int = global_data.Core__Int,
    Core_String = global_data.Core__String,
    Core_Sexp = global_data.Core__Sexp,
    Core_Char = global_data.Core__Char,
    Core_Type_equal = global_data.Core__Type_equal,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Comparable = global_data.Core__Comparable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Path);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/path.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "path.ml");
   var
    _a_ = [0, "Subst_from"],
    _b_ = [0, "Subst_into"],
    _c_ = [0, "Assoc"],
    _d_ = [0, "Switch"];
   function sexp_of_t(param){
    var id = param[2], key = param[1];
    return caml_call2(Core_Type_equal[8][6], id, key);
   }
   function keyed(compare, id){
    return caml_call1(Core[260], function(key){return [0, key, id, compare];});
   }
   function sexp_of_t$0(param){
    if(typeof param === "number") return 0 === param ? _a_ : _b_;
    if(0 === param[0]){
     var arg0_001 = param[1], res0_002 = sexp_of_t(arg0_001);
     return [1, [0, _c_, [0, res0_002, 0]]];
    }
    var arg0_003 = param[1], res0_004 = caml_call1(Core[363], arg0_003);
    return [1, [0, _d_, [0, res0_004, 0]]];
   }
   function compare(a_005, b_006){
    if(a_005 === b_006) return 0;
    a:
    {
     if(typeof a_005 !== "number"){
      if(0 === a_005[0]){
       var a_007 = a_005[1];
       if(typeof b_006 !== "number"){
        if(0 !== b_006[0]) return -1;
        var
         b_008 = b_006[1],
         id2 = b_008[2],
         key2 = b_008[1],
         compare1 = a_007[3],
         id1 = a_007[2],
         key1 = a_007[1];
        if(caml_call2(Core_Type_equal[8][9], id1, id2))
         return caml_call2(compare1, key1, key2);
        var
         _l_ = caml_call1(Core_Type_equal[8][2], id2),
         _m_ = caml_call1(Core_Type_equal[8][2], id1);
        return caml_call2(Core_Type_equal[8][11][27], _m_, _l_);
       }
       if(0 === b_006) break a;
      }
      else{
       var a_009 = a_005[1];
       if(typeof b_006 !== "number"){
        if(0 === b_006[0]) return 1;
        var b_010 = b_006[1];
        return caml_call2(Core[358], a_009, b_010);
       }
       if(0 === b_006) break a;
      }
      return 1;
     }
     if(0 === a_005){
      if(typeof b_006 === "number" && ! b_006) return 0;
      return -1;
     }
     if(typeof b_006 !== "number") return -1;
     if(b_006) return 0;
    }
    return 1;
   }
   var offset = caml_call1(Core_Char[7], 97);
   function lower_nibble_to_alpha(c){
    var _k_ = caml_call2(Core_Int[26], c, 15) + offset | 0;
    return caml_call1(Core_Char[9], _k_);
   }
   function char_to_alpha(buf, c){
    var
     c$0 = caml_call1(Core_Char[7], c),
     lower = lower_nibble_to_alpha(c$0),
     upper = lower_nibble_to_alpha(caml_call2(Core_Int[32], c$0, 4));
    caml_call2(Base_Buffer[15], buf, upper);
    return caml_call2(Base_Buffer[15], buf, lower);
   }
   function items(t){
    var match = caml_call1(Uopt[10], t[2]);
    if(match){var items = match[1]; return items;}
    var items$0 = caml_call1(Reversed_list[3], t[1]);
    t[2] = caml_call1(Uopt[4], items$0);
    return items$0;
   }
   function sexp_of_t$1(t){
    var x_011 = items(t);
    return caml_call2(Core[431], sexp_of_t$0, x_011);
   }
   function compare$0(a, b){
    if(a === b) return 0;
    var b_013 = items(b), a_012 = items(a);
    return caml_call3
            (Core[427],
             function(a_014, b_015){return compare(a_014, b_015);},
             a_012,
             b_013);
   }
   var empty = [0, 0, caml_call1(Uopt[4], 0), [0, "bonsai_path"]];
   function append(t, ele){
    var
     items_rev = [0, ele, t[1]],
     items = Uopt[3],
     string_repr = [1, t, ele];
    return [0, items_rev, items, string_repr];
   }
   var
    include = caml_call1(Core_Comparable[11], [0, compare$0, sexp_of_t$1]),
    symbol = include[1],
    symbol$0 = include[2],
    symbol$1 = include[3],
    symbol$2 = include[4],
    symbol$3 = include[5],
    symbol$4 = include[6],
    equal = include[7],
    compare$1 = include[8],
    min = include[9],
    max = include[10],
    ascending = include[11],
    descending = include[12],
    between = include[13],
    clamp_exn = include[14],
    clamp = include[15],
    comparator = include[16],
    validate_lbound = include[17],
    validate_ubound = include[18],
    validate_bound = include[19],
    Replace_polymorphic_compare = include[20],
    Map = include[21],
    Set = include[22],
    cst_x = "x",
    cst_y = "y";
   function to_unique_identifier_string(t){
    var match = t[3];
    if(0 === match[0]){var s = match[1]; return s;}
    var
     ele = match[2],
     parent = match[1],
     parent_s = to_unique_identifier_string(parent);
    if(typeof ele === "number")
     var _g_ = 0 === ele ? cst_x : cst_y;
    else if(0 === ele[0]){
     var k = ele[1], buf = caml_call1(Base_Buffer[2], 10), _e_ = sexp_of_t(k);
     caml_call4
      (Core_Sexp[87],
       buf,
       char_to_alpha,
       function(buf, string){
        return caml_call2
                (Core_String[15],
                 string,
                 function(_i_){return char_to_alpha(buf, _i_);});
       },
       _e_);
     var _g_ = caml_call1(Base_Buffer[3], buf);
    }
    else{
     var
      i = ele[1],
      buf$0 = caml_call1(Base_Buffer[2], 4),
      _f_ = caml_call1(Core_Int[84], i);
     caml_call2
      (Core_String[15], _f_, function(_j_){return char_to_alpha(buf$0, _j_);});
     var _g_ = caml_call1(Base_Buffer[3], buf$0);
    }
    var
     _h_ = caml_call2(Core[17], cst, _g_),
     string_repr = caml_call2(Core[17], parent_s, _h_);
    t[3] = [0, string_repr];
    return string_repr;
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Path);
   var
    Bonsai_Path =
      [0,
       [0, [0], keyed, sexp_of_t$0, compare],
       sexp_of_t$1,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare$1,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       Map,
       Set,
       empty,
       append,
       to_unique_identifier_string];
   runtime.caml_register_global(29, Bonsai_Path, cst_Bonsai_Path);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Lifecycle
//# unitInfo: Requires: Bonsai__Path, Core__Map, Core__Option, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Reversed_list, Ui_effect
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Lifecycle = "Bonsai__Lifecycle",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Map = global_data.Core__Map,
    Reversed_list = global_data.Reversed_list,
    Ui_effect = global_data.Ui_effect,
    Core_Option = global_data.Core__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bonsai_Path = global_data.Bonsai__Path;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Lifecycle);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/lifecycle.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "lifecycle.ml");
   var empty = Bonsai_Path[23][5], _a_ = [0, 0, 0];
   function has_after_display(t){
    return caml_call2
            (Core_Map[93],
             t,
             function(t){return caml_call1(Core_Option[58], t[3]);});
   }
   function maybe_cons(hd, tl){
    if(! hd) return tl;
    var a = hd[1];
    return [0, a, tl];
   }
   function diff(old, new$0){
    function collect(_l_, param){
     var after_display = param[3];
     return function(_m_){return maybe_cons(after_display, _m_);};
    }
    var after_displays = caml_call3(Core_Map[59], new$0, 0, collect);
    function collect$0(_i_, param){
     var
      _j_ = param[2],
      _k_ = _j_[1],
      deactivations = _i_[2],
      activations = _i_[1];
     if(847852583 === _k_){
      var on_deactivate = _j_[2][2];
      return [0, activations, maybe_cons(on_deactivate, deactivations)];
     }
     if(1013247643 <= _k_) return [0, activations, deactivations];
     var on_activate = _j_[2][1];
     return [0, maybe_cons(on_activate, activations), deactivations];
    }
    function data_equal(_h_, _g_){return _h_ === _g_ ? 1 : 0;}
    var
     match = caml_call5(Core_Map[85], old, new$0, data_equal, _a_, collect$0),
     deactivations = match[2],
     activations = match[1],
     _b_ = caml_call1(Reversed_list[3], after_displays),
     _c_ = [0, [0, Ui_effect[2], _b_], 0],
     _d_ = caml_call1(Reversed_list[3], activations),
     _e_ = [0, [0, Ui_effect[2], _d_], _c_],
     _f_ = caml_call1(Reversed_list[3], deactivations);
    return [0, Ui_effect[2], [0, [0, Ui_effect[2], _f_], _e_]];
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Lifecycle);
   var Bonsai_Lifecycle = [0, [0, has_after_display, empty, diff]];
   runtime.caml_register_global(17, Bonsai_Lifecycle, cst_Bonsai_Lifecycle);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Meta
//# unitInfo: Requires: Base__Option, Core, Core__Either, Core__Fn, Core__Int, Core__Map, Core__Nothing, Core__Sexp, Core__Tuple, Core__Type_equal, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Meta = "Bonsai__Meta",
    cst_bonsai = "bonsai",
    cst_enum_action_with_key$1 = "enum action with key";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_057 =
      "src/meta.ml.Model line 286: (M_io.t * model) Map.M(M).t",
    cst = "()",
    Core = global_data.Core,
    Core_Type_equal = global_data.Core__Type_equal,
    Core_Int = global_data.Core__Int,
    Core_Sexp = global_data.Core__Sexp,
    Core_Map = global_data.Core__Map,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Core_Tuple = global_data.Core__Tuple,
    Core_Either = global_data.Core__Either,
    Base_Option = global_data.Base__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Nothing = global_data.Core__Nothing,
    Core_Fn = global_data.Core__Fn;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Meta);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/meta.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "meta.ml");
   var
    unit_type_id = caml_call2(Core_Type_equal[8][3], cst, Core[534]),
    nothing_type_id =
      caml_call2(Core_Type_equal[8][3], "Nothing.t", Core_Nothing[13]),
    _a_ = [0, "Either"];
   function sexp_of_t(sexp_of_a, param){
    var sexp_of_a$0 = sexp_of_a, param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        var type_id = param$0[1];
        return caml_call2(Core_Type_equal[8][1], sexp_of_a$0, type_id);
       case 1:
        var
         x_003 = param$0[2],
         x_002 = param$0[1],
         _Y_ = [0, sexp_of_t(Core[148], x_003), 0];
        return [1, [0, sexp_of_t(Core[148], x_002), _Y_]];
       case 2:
        var
         x_006 = param$0[3],
         x_005 = param$0[2],
         x_004 = param$0[1],
         _Z_ = [0, sexp_of_t(Core[148], x_006), 0],
         ___ = [0, sexp_of_t(Core[148], x_005), _Z_];
        return [1, [0, sexp_of_t(Core[148], x_004), ___]];
       case 3:
        var
         x_008 = param$0[2],
         x_007 = param$0[1],
         _$_ = [0, sexp_of_t(Core[148], x_008), 0];
        return [1, [0, _a_, [0, sexp_of_t(Core[148], x_007), _$_]]];
       case 4:
        var x_009 = param$0[3], sexp_of_a$1 = Core[148];
        sexp_of_a$0 = sexp_of_a$1;
        param$0 = x_009;
        break;
       case 5:
        var x_010 = param$0[4], sexp_of_a$2 = Core[148];
        sexp_of_a$0 = sexp_of_a$2;
        param$0 = x_010;
        break;
       default:
        var
         multi_model = param$0[1],
         sexp_of_hidden =
           function(param){
            var type_id = param[2][3];
            return sexp_of_t(Core[148], type_id);
           };
        return caml_call2(Core_Int[103][42], sexp_of_hidden, multi_model);
     }
   }
   function to_sexp(param){
    switch(param[0]){
      case 0:
       var type_id = param[1];
       return caml_call1(Core_Type_equal[8][6], type_id);
      case 1:
       var
        b_t = param[2],
        a_t = param[1],
        sexp_of_a = to_sexp(a_t),
        sexp_of_b = to_sexp(b_t);
       return function(param){
        var
         arg1_014 = param[2],
         arg0_013 = param[1],
         res0_015 = caml_call1(sexp_of_a, arg0_013),
         res1_016 = caml_call1(sexp_of_b, arg1_014);
        return [1, [0, res0_015, [0, res1_016, 0]]];};
      case 2:
       var
        c_t = param[3],
        b_t$0 = param[2],
        a_t$0 = param[1],
        sexp_of_a$0 = to_sexp(a_t$0),
        sexp_of_b$0 = to_sexp(b_t$0),
        sexp_of_c = to_sexp(c_t);
       return function(param){
        var
         arg2_019 = param[3],
         arg1_018 = param[2],
         arg0_017 = param[1],
         res0_020 = caml_call1(sexp_of_a$0, arg0_017),
         res1_021 = caml_call1(sexp_of_b$0, arg1_018),
         res2_022 = caml_call1(sexp_of_c, arg2_019);
        return [1, [0, res0_020, [0, res1_021, [0, res2_022, 0]]]];};
      case 3:
       var
        b_t$1 = param[2],
        a_t$1 = param[1],
        sexp_of_a$1 = to_sexp(a_t$1),
        sexp_of_b$1 = to_sexp(b_t$1);
       return function(x_023){
        return caml_call3(Core_Either[14], sexp_of_a$1, sexp_of_b$1, x_023);};
      case 4:
       var
        by = param[3],
        k = param[1],
        sexp_of_t$0 = caml_call1(Core_Type_equal[8][6], k),
        Key = [0, sexp_of_t$0],
        sexp_of_by = to_sexp(by);
       return function(x_024){
        return caml_call3(Core_Map[126], Key, sexp_of_by, x_024);};
      case 5:
       var
        by$0 = param[4],
        k_io = param[2],
        k_model = param[1],
        sexp_of_t$1 = caml_call1(Core_Type_equal[8][6], k_model),
        Key$0 = [0, sexp_of_t$1],
        sexp_of_by$0 = to_sexp(by$0),
        sexp_of_k_io = caml_call1(Core_Type_equal[8][6], k_io);
       return function(x_029){
        return caml_call3
                (Core_Map[126],
                 Key$0,
                 function(param){
                  var
                   arg1_026 = param[2],
                   arg0_025 = param[1],
                   res0_027 = caml_call1(sexp_of_k_io, arg0_025),
                   res1_028 = caml_call1(sexp_of_by$0, arg1_026);
                  return [1, [0, res0_027, [0, res1_028, 0]]];
                 },
                 x_029);};
      default:
       var
        sexp_of_hidden =
          function(param){
           var type_id = param[2][3];
           return sexp_of_t(Core[148], type_id);
          };
       return function(x_030){
        return caml_call2(Core_Int[103][42], sexp_of_hidden, x_030);};
    }
   }
   var
    Fail =
      [248, "Bonsai__Meta.Model.Type_id.Fail", runtime.caml_fresh_oo_id(0)],
    type_equal_id_same_witness = Core_Type_equal[8][9],
    _b_ = [0, 0],
    _c_ = [0, 0],
    _d_ = [0, 0],
    _e_ = [0, 0],
    _f_ = [0, 0],
    _g_ = [0, 0],
    cst_module_tree_type_id = "module tree type id";
   function same_witness(a, b){
    switch(a[0]){
      case 0:
       if(0 === b[0])
        return caml_call2(type_equal_id_same_witness, a[1], b[1]);
       break;
      case 1:
       if(1 === b[0]){
        var _J_ = same_witness(a[1], b[1]);
        return caml_call2
                (Base_Option[27][4][2],
                 _J_,
                 function(param){
                  var _X_ = same_witness(a[2], b[2]);
                  return caml_call2
                          (Base_Option[27][4][2], _X_, function(param){return _b_;});
                 });
       }
       break;
      case 2:
       if(2 === b[0]){
        var _K_ = same_witness(a[1], b[1]);
        return caml_call2
                (Base_Option[27][4][2],
                 _K_,
                 function(param){
                  var _V_ = same_witness(a[2], b[2]);
                  return caml_call2
                          (Base_Option[27][4][2],
                           _V_,
                           function(param){
                            var _W_ = same_witness(a[3], b[3]);
                            return caml_call2
                                    (Base_Option[27][4][2], _W_, function(param){return _c_;});
                           });
                 });
       }
       break;
      case 3:
       if(3 === b[0]){
        var _L_ = same_witness(a[1], b[1]);
        return caml_call2
                (Base_Option[27][4][2],
                 _L_,
                 function(param){
                  var _U_ = same_witness(a[2], b[2]);
                  return caml_call2
                          (Base_Option[27][4][2], _U_, function(param){return _d_;});
                 });
       }
       break;
      case 4:
       if(4 === b[0]){
        var _M_ = caml_call2(type_equal_id_same_witness, a[1], b[1]);
        return caml_call2
                (Base_Option[27][4][2],
                 _M_,
                 function(param){
                  var
                   _S_ = caml_call2(type_equal_id_same_witness, a[2], b[2]);
                  return caml_call2
                          (Base_Option[27][4][2],
                           _S_,
                           function(param){
                            var _T_ = same_witness(a[3], b[3]);
                            return caml_call2
                                    (Base_Option[27][4][2], _T_, function(param){return _e_;});
                           });
                 });
       }
       break;
      case 5:
       if(5 === b[0]){
        var _N_ = caml_call2(type_equal_id_same_witness, a[2], b[2]);
        return caml_call2
                (Base_Option[27][4][2],
                 _N_,
                 function(param){
                  var
                   _P_ = caml_call2(type_equal_id_same_witness, a[1], b[1]);
                  return caml_call2
                          (Base_Option[27][4][2],
                           _P_,
                           function(param){
                            var
                             _Q_ = caml_call2(type_equal_id_same_witness, a[3], b[3]);
                            return caml_call2
                                    (Base_Option[27][4][2],
                                     _Q_,
                                     function(param){
                                      var _R_ = same_witness(a[4], b[4]);
                                      return caml_call2
                                              (Base_Option[27][4][2], _R_, function(param){return _f_;});
                                     });
                           });
                 });
       }
       break;
      default:
       if(6 === b[0])
        return caml_call1
                (Core[262],
                 function(param){
                  caml_call3
                   (Core_Map[54],
                    a[1],
                    b[1],
                    function(param$0, data){
                     if(typeof data !== "number" && 737457313 === data[1]){
                      var _O_ = data[2], b = _O_[2];
                      return same_witness(_O_[1][2][3], b[2][3])
                              ? 0
                              : caml_call1(param, 0);
                     }
                     return caml_call1(param, 0);
                    });
                  return _g_;
                 });
    }
    return 0;
   }
   function same_witness_exn(a, b){
    var match = same_witness(a, b);
    if(! match) throw Fail;
    var proof = match[1];
    return proof;
   }
   function to_type_id(param){
    return caml_call2
            (Core_Type_equal[8][3], cst_module_tree_type_id, Core[148]);
   }
   var
    unit = [0, unit_type_id],
    nothing = [0, nothing_type_id],
    unit$0 = [0, 0, Core[530], unit, Core[534], Core[535]],
    _h_ = [0, [2, 0, [11, "-model", 0]], "%s-model"];
   function both(model1, model2){
    var
     sexp_of = caml_call2(Core_Tuple[1][2], model1[4], model2[4]),
     of_sexp = caml_call2(Core_Tuple[1][1], model1[5], model2[5]),
     type_id = [1, model1[3], model2[3]],
     default$0 = [0, model1[1], model2[1]],
     equal = caml_call2(Core_Tuple[1][10], model1[2], model2[2]);
    return [0, default$0, equal, type_id, sexp_of, of_sexp];
   }
   function map(M, k, cmp, model){
    var sexp_of_model = model[4], model_of_sexp = model[5];
    function sexp_of_map_model(x_045){
     return caml_call3(Core_Map[126], [0, M[2]], sexp_of_model, x_045);
    }
    var
     model_map_type_id = [4, k, cmp, model[3]],
     _I_ = caml_call1(Core_Map[75], model[2]);
    return [0,
            caml_call1(Core_Map[4], [0, M[3]]),
            _I_,
            model_map_type_id,
            sexp_of_map_model,
            function(x_046){
             return caml_call3
                     (Core_Map[127], [0, M[1], M[3]], model_of_sexp, x_046);
            }];
   }
   function map_on(M, M_io, k_model, k_io, cmp, model){
    var sexp_of_model = model[4], model_of_sexp = model[5];
    function sexp_of_map_model(x_051){
     return caml_call3
             (Core_Map[126],
              [0, M[2]],
              function(param){
               var
                arg1_048 = param[2],
                arg0_047 = param[1],
                res0_049 = caml_call1(M_io[2], arg0_047),
                res1_050 = caml_call1(sexp_of_model, arg1_048);
               return [1, [0, res0_049, [0, res1_050, 0]]];
              },
              x_051);
    }
    var model_map_type_id = [5, k_model, k_io, cmp, model[3]];
    function io_equal(a, b){
     var _H_ = caml_call2(M_io[3][1], a, b);
     return caml_call2(Core[89], _H_, 0);
    }
    var
     _D_ = caml_call2(Core_Tuple[1][10], io_equal, model[2]),
     _E_ = caml_call1(Core_Map[75], _D_);
    return [0,
            caml_call1(Core_Map[4], [0, M[3]]),
            _E_,
            model_map_type_id,
            sexp_of_map_model,
            function(x_058){
             return caml_call3
                     (Core_Map[127],
                      [0, M[1], M[3]],
                      function(sexp_056){
                       if(1 === sexp_056[0]){
                        var _F_ = sexp_056[1];
                        if(_F_){
                         var _G_ = _F_[2];
                         if(_G_ && ! _G_[2]){
                          var
                           arg1_053 = _G_[1],
                           arg0_052 = _F_[1],
                           res0_054 = caml_call1(M_io[1], arg0_052),
                           res1_055 = caml_call1(model_of_sexp, arg1_053);
                          return [0, res0_054, res1_055];
                         }
                        }
                       }
                       return caml_call3
                               (Sexplib0_Sexp_conv_error[2], error_source_057, 2, sexp_056);
                      },
                      x_058);
            }];
   }
   function of_module(M, default$0, name){
    var
     _B_ = M[2],
     _C_ = caml_call2(Core[259], _h_, name),
     type_id = caml_call2(Core_Type_equal[8][3], _C_, _B_);
    return [0, default$0, M[3], [0, type_id], M[2], M[1]];
   }
   function sexp_of_t$0(param){
    var sexp_of = param[2][4], model = param[1];
    return caml_call1(sexp_of, model);
   }
   function equal(_A_, param){
    var
     t2 = param[2][3],
     m2 = param[1],
     match = _A_[2],
     t1 = match[3],
     equal = match[2],
     m1 = _A_[1];
    return same_witness(t1, t2) ? caml_call2(equal, m1, m2) : 0;
   }
   function create(info){
    function t_of_sexp(sexp){
     var m = caml_call1(info[5], sexp);
     return [0, m, info, t_of_sexp];
    }
    function wrap(m){return [0, m, info, t_of_sexp];}
    return wrap;
   }
   var
    _i_ = caml_call1(Core_Fn[1], 0),
    lazy =
      [0,
       0,
       function(a_059, b_060){
        return caml_call3
                (Core[463],
                 function(a_061, b_062){return equal(a_061, b_062);},
                 a_059,
                 b_060);
       },
       [0,
        caml_call2
         (Core_Type_equal[8][3],
          "lazy-model",
          function(x_063){return caml_call2(Core[466], sexp_of_t$0, x_063);})],
       function(x_064){return caml_call2(Core[466], sexp_of_t$0, x_064);},
       _i_],
    _j_ = [0, "key"],
    _k_ = [0, "type_id"],
    _l_ = [0, "action"],
    cst_enum_action_with_key = cst_enum_action_with_key$1,
    cst_enum_action_with_key$0 = cst_enum_action_with_key$1;
   function action_id(sexp_of_key){
    return [0,
            caml_call2
             (Core_Type_equal[8][3],
              cst_enum_action_with_key$0,
              function(x_065){
               var
                key = x_065[3],
                type_id = x_065[2],
                action = x_065[1],
                sexp_of_action = to_sexp(type_id),
                _w_ = Core[148],
                _x_ =
                  [0, [1, [0, _j_, [0, caml_call1(sexp_of_key, key), 0]]], 0],
                _y_ = [0, [1, [0, _k_, [0, sexp_of_t(_w_, type_id), 0]]], _x_],
                _z_ =
                  [0,
                   [1, [0, _l_, [0, caml_call1(sexp_of_action, action), 0]]],
                   _y_];
               return [1,
                       [0,
                        caml_call1(Sexplib0_Sexp_conv[7], cst_enum_action_with_key),
                        _z_]];
              })];
   }
   var
    unit$1 = action_id(Core[534]),
    int$0 = action_id(Core[363]),
    _m_ = [0, [2, 0, [11, "-action", 0]], "%s-action"];
   function both$0(a, b){return [3, a, b];}
   function map$0(k, action){return [1, [0, k], action];}
   function map_for_assoc_on(io_k, model_k, action){return [2, [0, io_k], [0, model_k], action];
   }
   function of_module$0(M, name){
    var _u_ = M[1], _v_ = caml_call2(Core[259], _m_, name);
    return [0, caml_call2(Core_Type_equal[8][3], _v_, _u_)];
   }
   function sexp_of_t$1(sexp_of_k){
    var _t_ = [0, sexp_of_k];
    return function(x_066){
     return caml_call3(Core_Map[126], _t_, sexp_of_t$0, x_066);};
   }
   function t_of_sexp(default_models, x_067){
    var k_to_sexp_map = caml_call2(Core_Int[103][41], Core_Sexp[91], x_067);
    return caml_call3
            (Core_Map[81],
             k_to_sexp_map,
             default_models,
             function(_q_, param){
              var _r_ = param[1];
              if(737457313 === _r_){
               var _s_ = param[2], t_of_sexp = _s_[2][3], sexp = _s_[1];
               return [0, caml_call1(t_of_sexp, sexp)];
              }
              if(847852583 <= _r_) return 0;
              var default_model = param[2];
              return [0, default_model];
             });
   }
   var find_exn = Core_Map[43], set = Core_Map[36];
   function of_models(_p_){return _p_;}
   function to_models(_o_){return _o_;}
   function model_info(default$0){
    function sexp_of(x_068){return sexp_of_t$1(Core[363])(x_068);}
    function of_sexp(_n_){return t_of_sexp(default$0, _n_);}
    var type_id = [6, default$0];
    return [0,
            default$0,
            function(a_069, b_070){
             return caml_call3
                     (Core_Int[103][3],
                      function(a_071, b_072){return equal(a_071, b_072);},
                      a_069,
                      b_070);
            },
            type_id,
            sexp_of,
            of_sexp];
   }
   var
    Multi_model =
      [0,
       sexp_of_t$1,
       t_of_sexp,
       find_exn,
       set,
       to_models,
       of_models,
       model_info],
    cst_input = "input";
   function create$0(param){
    return [0, caml_call2(Core_Type_equal[8][3], cst_input, Core[148])];
   }
   function both$1(a, b){return [1, a, b];}
   function map$1(k, cmp, by){return [4, k, cmp, by];}
   var
    unit$2 = [0, caml_call2(Core_Type_equal[8][3], "lazy input", Core[148])],
    int$1 = [0, caml_call2(Core_Type_equal[8][3], "enum input", Core[148])],
    Hidden = [0, unit$2, int$1];
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Meta);
   var
    Bonsai_Meta =
      [0,
       [0,
        [0,
         sexp_of_t,
         same_witness,
         same_witness_exn,
         to_type_id,
         to_sexp,
         nothing,
         unit],
        [0, equal, sexp_of_t$0, create, lazy],
        unit$0,
        both,
        map,
        map_on,
        of_module],
       [0,
        [0,
         sexp_of_t,
         same_witness,
         same_witness_exn,
         to_type_id,
         to_sexp,
         nothing,
         unit],
        [0, unit$1, int$0],
        nothing,
        both$0,
        map$0,
        map_for_assoc_on,
        of_module$0],
       Multi_model,
       [0,
        same_witness,
        same_witness_exn,
        unit,
        both$1,
        map$1,
        create$0,
        Hidden]];
   runtime.caml_register_global(46, Bonsai_Meta, cst_Bonsai_Meta);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Snapshot
//# unitInfo: Requires: Base__Field, Bonsai__Import, Bonsai__Input, Bonsai__Lifecycle, Core__Option, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Snapshot = "Bonsai__Snapshot",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bonsai_Lifecycle = global_data.Bonsai__Lifecycle,
    Ui_incr = global_data.Ui_incr,
    Bonsai_Import = global_data.Bonsai__Import,
    Bonsai_Input = global_data.Bonsai__Input,
    Core_Option = global_data.Core__Option;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Snapshot);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/snapshot.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "snapshot.ml");
   function result(r){return r[3];}
   function lifecycle(r){return r[2];}
   function input(r){return r[1];}
   function create(input, lifecycle, result){
    var _c_ = caml_call1(Bonsai_Import[5], 0);
    caml_call2(Bonsai_Input[6], input, _c_);
    var _d_ = caml_call1(Bonsai_Import[4], 3);
    caml_call2(Core_Option[42], lifecycle, _d_);
    caml_call2(Bonsai_Import[4], 2, result);
    return [0, input, lifecycle, result];
   }
   function attribute_positions(here, t){
    var _a_ = caml_call1(Bonsai_Import[7], here);
    caml_call2(Bonsai_Input[6], t[1], _a_);
    var _b_ = caml_call1(Bonsai_Import[6], here);
    caml_call2(Core_Option[42], t[2], _b_);
    return caml_call2(Bonsai_Import[6], here, t[3]);
   }
   function lifecycle_or_empty(t){
    var match = t[2];
    if(match){var l = match[1]; return l;}
    var r = caml_call1(Ui_incr[10], Bonsai_Lifecycle[1][2]);
    caml_call2(Bonsai_Import[4], 4, r);
    return r;
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Snapshot);
   var
    Bonsai_Snapshot =
      [0,
       input,
       result,
       lifecycle,
       lifecycle_or_empty,
       create,
       attribute_positions];
   runtime.caml_register_global(21, Bonsai_Snapshot, cst_Bonsai_Snapshot);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Computation
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Computation = "Bonsai__Computation",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Computation);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/computation.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "computation.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Computation);
   var Bonsai_Computation = [0];
   runtime.caml_register_global
    (11, Bonsai_Computation, cst_Bonsai_Computation);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Node_path
//# unitInfo: Requires: Base__Buffer, Bin_prot__Common, Bin_prot__Shape, Bin_shape, Core, Core__Int, Core__List, Core__String, Expect_test_collector, Expect_test_common__File, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    cst_Bonsai_Node_path = "Bonsai__Node_path",
    cst_bonsai = "bonsai",
    cst_builder = "builder",
    cst_f11b0a882bdfd71b170a35851e$3 = "f11b0a882bdfd71b170a35851ed7776e",
    cst_src_node_path_ml$19 = "src/node_path.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    empty = [0, 0, 0],
    cst = cst$0,
    Expect_test_common_File = global_data.Expect_test_common__File,
    Core = global_data.Core,
    Expect_test_config = global_data.Expect_test_config,
    Expect_test_collector = global_data.Expect_test_collector,
    Inline_test_config = global_data.Inline_test_config,
    Base_Buffer = global_data.Base__Buffer,
    Core_Int = global_data.Core__Int,
    Core_List = global_data.Core__List;
   global_data.Bin_prot__Common;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_String = global_data.Core__String,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Node_path);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], cst_src_node_path_ml$19);
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "node_path.ml");
   var
    include = Core_String[167][1],
    bin_size_t = include[8],
    bin_write_t = include[9],
    bin_read_t = include[10],
    bin_read_t$0 = include[11],
    bin_shape_t = include[12],
    bin_writer_t = include[13],
    bin_reader_t = include[14],
    bin_t = include[15],
    compare = include[16],
    t_of_sexp = include[17],
    sexp_of_t = include[18],
    comparator = include[19],
    Map = include[20],
    Set = include[21],
    _a_ = [0, [0, "depth", Core[350]], 0],
    _b_ = [0, [0, "choices", caml_call1(Core[419], Core[350])], _a_],
    _c_ = caml_call1(Bin_prot_Shape[4], _b_),
    _d_ = [0, [0, caml_call1(Bin_shape[2][1], cst_builder), 0, _c_], 0],
    _e_ = caml_call1(Bin_shape[4][1], "src/node_path.ml:13:0"),
    group = caml_call2(Bin_prot_Shape[2], _e_, _d_),
    _f_ = caml_call1(Bin_shape[2][1], cst_builder);
   caml_call1(caml_call2(Bin_prot_Shape[10], group, _f_), 0);
   var
    _g_ = [0, [0, 1, [0, 2, [0, 2, [0, 1, [0, 0, 0]]]]], 0],
    cst_src_node_path_ml = cst_src_node_path_ml$19,
    cst_src_node_path_ml$0 = cst_src_node_path_ml$19,
    cst_src_node_path_ml$1 = cst_src_node_path_ml$19,
    _h_ = [1, " 1-2-2-1-0_0 "],
    _i_ = [0, cst$0],
    cst_src_node_path_ml$2 = cst_src_node_path_ml$19,
    cst_src_node_path_ml$3 = cst_src_node_path_ml$19,
    cst_f11b0a882bdfd71b170a35851e = cst_f11b0a882bdfd71b170a35851e$3,
    _j_ = [0, 0, 1],
    cst_src_node_path_ml$4 = cst_src_node_path_ml$19,
    cst_src_node_path_ml$5 = cst_src_node_path_ml$19,
    cst_src_node_path_ml$6 = cst_src_node_path_ml$19,
    _k_ = [1, " _1 "],
    _l_ = [0, cst$0],
    cst_src_node_path_ml$7 = cst_src_node_path_ml$19,
    cst_src_node_path_ml$8 = cst_src_node_path_ml$19,
    cst_f11b0a882bdfd71b170a35851e$0 = cst_f11b0a882bdfd71b170a35851e$3,
    cst_src_node_path_ml$9 = cst_src_node_path_ml$19,
    cst_src_node_path_ml$10 = cst_src_node_path_ml$19,
    cst_src_node_path_ml$11 = cst_src_node_path_ml$19,
    _m_ = [1, " _0 "],
    _n_ = [0, cst$0],
    cst_src_node_path_ml$12 = cst_src_node_path_ml$19,
    cst_src_node_path_ml$13 = cst_src_node_path_ml$19,
    cst_f11b0a882bdfd71b170a35851e$1 = cst_f11b0a882bdfd71b170a35851e$3,
    _o_ = [0, [0, 30, 0], 1],
    cst_src_node_path_ml$14 = cst_src_node_path_ml$19,
    cst_src_node_path_ml$15 = cst_src_node_path_ml$19,
    cst_src_node_path_ml$16 = cst_src_node_path_ml$19,
    _p_ = [1, " 30_1 "],
    _q_ = [0, cst$0],
    cst_src_node_path_ml$17 = cst_src_node_path_ml$19,
    cst_src_node_path_ml$18 = cst_src_node_path_ml$19,
    cst_f11b0a882bdfd71b170a35851e$2 = cst_f11b0a882bdfd71b170a35851e$3;
   function to_string(param){
    var
     depth = param[2],
     choices = param[1],
     buffer = caml_call1(Base_Buffer[2], 10);
    if(choices){
     var
      choices$0 = choices[2],
      choice = choices[1],
      _L_ = caml_call1(Core_Int[84], choice);
     caml_call2(Base_Buffer[16], buffer, _L_);
     caml_call2
      (Core_List[19],
       choices$0,
       function(choice){
        caml_call2(Base_Buffer[15], buffer, 45);
        var _N_ = caml_call1(Core_Int[84], choice);
        return caml_call2(Base_Buffer[16], buffer, _N_);
       });
    }
    caml_call2(Base_Buffer[15], buffer, 95);
    var _M_ = caml_call1(Core_Int[84], depth);
    caml_call2(Base_Buffer[16], buffer, _M_);
    return caml_call1(Base_Buffer[3], buffer);
   }
   function choice_point(t, n){
    return [0, caml_call2(Core[155], t[1], [0, n, 0]), 0];
   }
   function descend(t){return [0, t[1], t[2] + 1 | 0];}
   caml_call8
    (Ppx_inline_test_lib[9],
     Inline_test_config,
     cst,
     0,
     cst_src_node_path_ml$19,
     37,
     0,
     513,
     function(param){
      function test(t){var s = to_string(t); return caml_call1(Core[31], s);}
      var
       Expect_test_collector$0 =
         caml_call1(Expect_test_collector[2], Expect_test_config),
       _r_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_node_path_ml$0),
          46,
          1000,
          1015,
          1032],
       _s_ =
         [0,
          [0,
           _i_,
           _h_,
           [0,
            caml_call1(Expect_test_common_File[1][6], cst_src_node_path_ml$1),
            46,
            1000,
            1008,
            1014],
           _r_],
          0],
       _t_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_node_path_ml$3),
          44,
          921,
          925,
          1033],
       _u_ =
         caml_call1
          (Expect_test_common_File[4][3], cst_f11b0a882bdfd71b170a35851e);
      caml_call9
       (Expect_test_collector$0[3],
        _u_,
        _t_,
        cst_src_node_path_ml$2,
        0,
        0,
        _s_,
        0,
        Inline_test_config,
        function(param){
         test(_g_);
         var
          _K_ =
            [0,
             caml_call1(Expect_test_common_File[1][6], cst_src_node_path_ml),
             46,
             1000,
             1008,
             1014];
         return caml_call1(Expect_test_collector$0[1], _K_);
        });
      var
       Expect_test_collector$1 =
         caml_call1(Expect_test_collector[2], Expect_test_config),
       _v_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_node_path_ml$5),
          51,
          1106,
          1121,
          1129],
       _w_ =
         [0,
          [0,
           _l_,
           _k_,
           [0,
            caml_call1(Expect_test_common_File[1][6], cst_src_node_path_ml$6),
            51,
            1106,
            1114,
            1120],
           _v_],
          0],
       _x_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_node_path_ml$8),
          49,
          1042,
          1046,
          1130],
       _y_ =
         caml_call1
          (Expect_test_common_File[4][3], cst_f11b0a882bdfd71b170a35851e$0);
      caml_call9
       (Expect_test_collector$1[3],
        _y_,
        _x_,
        cst_src_node_path_ml$7,
        0,
        0,
        _w_,
        0,
        Inline_test_config,
        function(param){
         test(_j_);
         var
          _J_ =
            [0,
             caml_call1(Expect_test_common_File[1][6], cst_src_node_path_ml$4),
             51,
             1106,
             1114,
             1120];
         return caml_call1(Expect_test_collector$1[1], _J_);
        });
      var
       Expect_test_collector$2 =
         caml_call1(Expect_test_collector[2], Expect_test_config),
       _z_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_node_path_ml$10),
          56,
          1181,
          1196,
          1204],
       _A_ =
         [0,
          [0,
           _n_,
           _m_,
           [0,
            caml_call1(Expect_test_common_File[1][6], cst_src_node_path_ml$11),
            56,
            1181,
            1189,
            1195],
           _z_],
          0],
       _B_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_node_path_ml$13),
          54,
          1139,
          1143,
          1205],
       _C_ =
         caml_call1
          (Expect_test_common_File[4][3], cst_f11b0a882bdfd71b170a35851e$1);
      caml_call9
       (Expect_test_collector$2[3],
        _C_,
        _B_,
        cst_src_node_path_ml$12,
        0,
        0,
        _A_,
        0,
        Inline_test_config,
        function(param){
         test(empty);
         var
          _I_ =
            [0,
             caml_call1(Expect_test_common_File[1][6], cst_src_node_path_ml$9),
             56,
             1181,
             1189,
             1195];
         return caml_call1(Expect_test_collector$2[1], _I_);
        });
      var
       Expect_test_collector$3 =
         caml_call1(Expect_test_collector[2], Expect_test_config),
       _D_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_node_path_ml$15),
          61,
          1282,
          1297,
          1307],
       _E_ =
         [0,
          [0,
           _q_,
           _p_,
           [0,
            caml_call1(Expect_test_common_File[1][6], cst_src_node_path_ml$16),
            61,
            1282,
            1290,
            1296],
           _D_],
          0],
       _F_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_node_path_ml$18),
          59,
          1214,
          1218,
          1308],
       _G_ =
         caml_call1
          (Expect_test_common_File[4][3], cst_f11b0a882bdfd71b170a35851e$2);
      caml_call9
       (Expect_test_collector$3[3],
        _G_,
        _F_,
        cst_src_node_path_ml$17,
        0,
        0,
        _E_,
        0,
        Inline_test_config,
        function(param){
         test(_o_);
         var
          _H_ =
            [0,
             caml_call1
              (Expect_test_common_File[1][6], cst_src_node_path_ml$14),
             61,
             1282,
             1290,
             1296];
         return caml_call1(Expect_test_collector$3[1], _H_);
        });
      return 0;
     });
   function finalize(builder){return to_string(builder);}
   var
    bin_size_t$0 = Core_String[119],
    bin_write_t$0 = Core_String[120],
    bin_read_t$1 = Core_String[121],
    bin_read_t$2 = Core_String[122],
    bin_shape_t$0 = Core_String[123],
    bin_writer_t$0 = Core_String[124],
    bin_reader_t$0 = Core_String[125],
    bin_t$0 = Core_String[126],
    t_of_sexp$0 = Core_String[127],
    sexp_of_t$0 = Core_String[128],
    of_string = Core_String[129],
    to_string$0 = Core_String[130],
    symbol = Core_String[132],
    symbol$0 = Core_String[133],
    symbol$1 = Core_String[134],
    symbol$2 = Core_String[135],
    symbol$3 = Core_String[136],
    symbol$4 = Core_String[137],
    equal = Core_String[138],
    compare$0 = Core_String[139],
    min = Core_String[140],
    max = Core_String[141],
    ascending = Core_String[142],
    descending = Core_String[143],
    between = Core_String[144],
    clamp_exn = Core_String[145],
    clamp = Core_String[146],
    validate_lbound = Core_String[147],
    validate_ubound = Core_String[148],
    validate_bound = Core_String[149],
    Replace_polymorphic_compare = Core_String[150],
    comparator$0 = Core_String[151],
    Map$0 = Core_String[152],
    Set$0 = Core_String[153];
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Node_path);
   var
    Bonsai_Node_path =
      [0,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$1,
       bin_read_t$2,
       bin_shape_t$0,
       bin_writer_t$0,
       bin_reader_t$0,
       bin_t$0,
       t_of_sexp$0,
       sexp_of_t$0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare$0,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       comparator$0,
       Map$0,
       Set$0,
       of_string,
       to_string$0,
       empty,
       choice_point,
       descend,
       finalize,
       [0,
        [0,
         bin_size_t,
         bin_write_t,
         bin_read_t,
         bin_read_t$0,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         compare,
         t_of_sexp,
         sexp_of_t,
         comparator,
         [0,
          Map[1],
          Map[2],
          Map[3],
          Map[4],
          Map[5],
          Map[6],
          Map[7],
          Map[8],
          Map[9],
          Map[10],
          Map[11],
          Map[12]],
         [0,
          Set[1],
          Set[2],
          Set[3],
          Set[4],
          Set[5],
          Set[6],
          Set[7],
          Set[8],
          Set[9],
          Set[10],
          Set[11]]]]];
   runtime.caml_register_global(66, Bonsai_Node_path, cst_Bonsai_Node_path);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Transform
//# unitInfo: Requires: Bonsai__Node_path, Core__Lazy, Core__Map, Core__Type_equal, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Transform = "Bonsai__Transform",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bonsai_Node_path = global_data.Bonsai__Node_path,
    Core_Type_equal = global_data.Core__Type_equal,
    Core_Map = global_data.Core__Map,
    Core_Lazy = global_data.Core__Lazy,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Transform);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/transform.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "transform.ml");
   var Var_from_parent = [0];
   function descend(f, var_from_parent, append_to, parent, param){
    var
     id = param[3],
     here = param[2],
     value = param[1],
     current_path = caml_call1(Bonsai_Node_path[37], append_to);
    function map(n, v){
     var
      append_to = caml_call2(Bonsai_Node_path[36], current_path, n),
      child_path = caml_call1(Bonsai_Node_path[37], append_to);
     return caml_call3
             (f[1],
              [0,
               function(parent, v){
                return descend(f, 0, append_to, parent, v);
               },
               var_from_parent,
               [246,
                function(_av_){
                 return caml_call1(Bonsai_Node_path[38], current_path);
                }],
               [246,
                function(_au_){
                 return caml_call1(Bonsai_Node_path[38], child_path);
                }]],
              parent,
              v);
    }
    switch(value[0]){
      case 0:
       var value$0 = value; break;
      case 1:
       var value$0 = value; break;
      case 2:
       var value$0 = value; break;
      case 3:
       var
        b = value[2],
        a = value[1],
        _R_ = map(2, b),
        value$0 = [3, map(1, a), _R_];
       break;
      case 4:
       var
        _S_ = value[3],
        _T_ = value[2],
        value$0 = [4, map(1, value[1]), _T_, _S_];
       break;
      case 5:
       var _U_ = value[2], value$0 = [5, map(1, value[1]), _U_]; break;
      case 6:
       var
        _V_ = value[3],
        _W_ = map(2, value[2]),
        value$0 = [6, map(1, value[1]), _W_, _V_];
       break;
      case 7:
       var
        _X_ = value[4],
        _Y_ = map(3, value[3]),
        _Z_ = map(2, value[2]),
        value$0 = [7, map(1, value[1]), _Z_, _Y_, _X_];
       break;
      case 8:
       var
        ___ = value[5],
        _$_ = map(4, value[4]),
        _aa_ = map(3, value[3]),
        _ab_ = map(2, value[2]),
        value$0 = [8, map(1, value[1]), _ab_, _aa_, _$_, ___];
       break;
      case 9:
       var
        _ac_ = value[6],
        _ad_ = map(5, value[5]),
        _ae_ = map(4, value[4]),
        _af_ = map(3, value[3]),
        _ag_ = map(2, value[2]),
        value$0 = [9, map(1, value[1]), _ag_, _af_, _ae_, _ad_, _ac_];
       break;
      case 10:
       var
        _ah_ = value[7],
        _ai_ = map(6, value[6]),
        _aj_ = map(5, value[5]),
        _ak_ = map(4, value[4]),
        _al_ = map(3, value[3]),
        _am_ = map(2, value[2]),
        value$0 = [10, map(1, value[1]), _am_, _al_, _ak_, _aj_, _ai_, _ah_];
       break;
      case 11:
       var
        _an_ = value[8],
        _ao_ = map(7, value[7]),
        _ap_ = map(6, value[6]),
        _aq_ = map(5, value[5]),
        _ar_ = map(4, value[4]),
        _as_ = map(3, value[3]),
        _at_ = map(2, value[2]),
        value$0 =
          [11, map(1, value[1]), _at_, _as_, _ar_, _aq_, _ap_, _ao_, _an_];
       break;
      default: var value$0 = value;
    }
    return [0, value$0, here, id];
   }
   var
    id =
      [0,
       function(param, from_parent, value){
        var recurse = param[1];
        return caml_call2(recurse, from_parent, value);
       }],
    _a_ = [0, 1],
    _b_ = [0, 2],
    _c_ = [0, 1],
    _d_ = [0, 2],
    _e_ = [0, 2],
    _f_ = [0, 1],
    _g_ = [0, 2],
    _h_ = [0, 1];
   function descend$0(f, for_value, append_to, parent, computation){
    var current_path = caml_call1(Bonsai_Node_path[37], append_to);
    function map(opt, choice, c){
     var var_from_parent = opt ? opt[1] : 0;
     if(choice)
      var
       choice$0 = choice[1],
       append_to = caml_call2(Bonsai_Node_path[36], current_path, choice$0);
     else
      var append_to = current_path;
     var child_path = caml_call1(Bonsai_Node_path[37], append_to);
     return caml_call3
             (f[1],
              [0,
               function(parent, c){
                return descend$0(f, for_value, append_to, parent, c);
               },
               var_from_parent,
               [246,
                function(_Q_){
                 return caml_call1(Bonsai_Node_path[38], current_path);
                }],
               [246,
                function(_P_){
                 return caml_call1(Bonsai_Node_path[38], child_path);
                }]],
              parent,
              c);
    }
    function map_value(opt, choice, v){
     var var_from_parent = opt ? opt[1] : 0;
     if(choice)
      var
       choice$0 = choice[1],
       append_to = caml_call2(Bonsai_Node_path[36], current_path, choice$0);
     else
      var append_to = current_path;
     var
      parent_path =
        [246,
         function(_O_){return caml_call1(Bonsai_Node_path[38], current_path);}],
      current_path$0 = caml_call1(Bonsai_Node_path[37], append_to);
     return caml_call3
             (for_value[1],
              [0,
               function(parent, v){
                return descend(for_value, 0, append_to, parent, v);
               },
               var_from_parent,
               parent_path,
               [246,
                function(_N_){
                 return caml_call1(Bonsai_Node_path[38], current_path$0);
                }]],
              parent,
              v);
    }
    if(typeof computation === "number") return computation;
    switch(computation[0]){
      case 0:
       var value = computation[1]; return [0, map_value(0, 0, value)];
      case 1:
       var _k_ = map_value(0, 0, computation[8]);
       return [1,
               computation[1],
               computation[2],
               computation[3],
               computation[4],
               computation[5],
               computation[6],
               computation[7],
               _k_];
      case 2:
       var _l_ = map_value(0, 0, computation[6]);
       return [2,
               computation[1],
               computation[2],
               computation[3],
               computation[4],
               computation[5],
               _l_];
      case 3:
       return computation;
      case 4:
       var _m_ = computation[3], _n_ = computation[2];
       return [4, map_value(0, 0, computation[1]), _n_, _m_];
      case 5:
       var
        _o_ = computation[1],
        from =
          map
           ([0, [0, caml_call1(Core_Type_equal[8][2], computation[2])]],
            _a_,
            _o_),
        into = map(0, _b_, computation[3]);
       return [5, from, computation[2], into, computation[4]];
      case 6:
       var
        _p_ = computation[2],
        value$0 =
          map_value
           ([0, [0, caml_call1(Core_Type_equal[8][2], computation[1])]],
            _c_,
            _p_),
        inner = map(0, _d_, computation[3]);
       return [6, computation[1], value$0, inner];
      case 7:
       return computation;
      case 8:
       var
        _q_ = computation[6],
        _r_ = caml_call1(Core_Type_equal[8][2], computation[5]),
        _s_ =
          map
           ([0, [1, caml_call1(Core_Type_equal[8][2], computation[3]), _r_]],
            _e_,
            _q_),
        _t_ = computation[5],
        _u_ = computation[4],
        _v_ = computation[3],
        _w_ = computation[2];
       return [8, map_value(0, _f_, computation[1]), _w_, _v_, _u_, _t_, _s_];
      case 9:
       var
        _x_ = computation[10],
        _y_ = computation[9],
        _z_ = caml_call1(Core_Type_equal[8][2], computation[8]),
        _A_ =
          map
           ([0, [1, caml_call1(Core_Type_equal[8][2], computation[4]), _z_]],
            _g_,
            _y_),
        _B_ = computation[8],
        _C_ = computation[7],
        _D_ = computation[6],
        _E_ = computation[5],
        _F_ = computation[4],
        _G_ = computation[3],
        _H_ = computation[2];
       return [9,
               map_value(0, _h_, computation[1]),
               _H_,
               _G_,
               _F_,
               _E_,
               _D_,
               _C_,
               _B_,
               _A_,
               _x_];
      case 10:
       var _I_ = computation[2];
       return [10, map_value(0, 0, computation[1]), _I_];
      case 11:
       var
        here = computation[3],
        arms = computation[2],
        index = [0, 1],
        match = map_value(0, [0, index[1]], computation[1]),
        arms$0 =
          caml_call2
           (Core_Map[55],
            arms,
            function(c){index[1]++; return map(0, [0, index[1]], c);});
       return [11, match, arms$0, here];
      case 12:
       var t = computation[1];
       return [12,
               caml_call2
                (Core_Lazy[25], t, function(eta){return map(0, 0, eta);})];
      case 13:
       var
        inner$0 = computation[6],
        model_id = computation[5],
        inject_id = computation[4],
        _J_ = computation[8],
        _K_ = computation[7],
        _L_ = caml_call1(Core_Type_equal[8][2], inject_id),
        _M_ =
          map
           ([0, [1, caml_call1(Core_Type_equal[8][2], model_id), _L_]],
            0,
            inner$0);
       return [13,
               computation[1],
               computation[2],
               computation[3],
               computation[4],
               computation[5],
               _M_,
               _K_,
               _J_];
      case 14:
       var inner$1 = computation[2], reset_id = computation[1];
       return [14, reset_id, map(0, 0, inner$1)];
      default: var t$0 = computation[1]; return [15, map_value(0, 0, t$0)];
    }
   }
   var
    id$0 =
      [0,
       function(param, from_parent, computation){
        var recurse = param[1];
        return caml_call2(recurse, from_parent, computation);
       }];
   function map(computation_mapper, value_mapper, init, computation){
    var
     current_path = caml_call1(Bonsai_Node_path[37], Bonsai_Node_path[35]),
     parent_path = Bonsai_Node_path[35],
     append_to = Bonsai_Node_path[35];
    return caml_call3
            (computation_mapper[1],
             [0,
              function(parent, c){
               return descend$0
                       (computation_mapper, value_mapper, append_to, parent, c);
              },
              0,
              [246,
               function(_j_){
                return caml_call1(Bonsai_Node_path[38], parent_path);
               }],
              [246,
               function(_i_){
                return caml_call1(Bonsai_Node_path[38], current_path);
               }]],
             init,
             computation);
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Transform);
   var Bonsai_Transform = [0, Var_from_parent, [0, id], [0, id$0], map];
   runtime.caml_register_global(23, Bonsai_Transform, cst_Bonsai_Transform);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Fix_transform_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Fix_transform_intf = "Bonsai__Fix_transform_intf",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Fix_transform_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/fix_transform_intf.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "fix_transform_intf.ml");
   function combine(_a_, param){return 0;}
   var Unit = [0, combine, 0, 0];
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Fix_transform_intf);
   var Bonsai_Fix_transform_intf = [0, Unit];
   runtime.caml_register_global
    (11, Bonsai_Fix_transform_intf, cst_Bonsai_Fix_transform_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Fix_transform
//# unitInfo: Requires: Bonsai__Fix_transform_intf, CamlinternalMod, Core__Int, Core__Lazy, Core__List, Core__Map, Core__Option, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Fix_transform = "Bonsai__Fix_transform",
    cst_bonsai = "bonsai",
    cst_src_fix_transform_ml = "src/fix_transform.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_List = global_data.Core__List,
    Core_Option = global_data.Core__Option,
    Core_Map = global_data.Core__Map,
    Core_Int = global_data.Core__Int,
    Core_Lazy = global_data.Core__Lazy,
    CamlinternalMod = global_data.CamlinternalMod,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Fix_transform);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], cst_src_fix_transform_ml);
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "fix_transform.ml");
   var
    _a_ = [0, [0, 0, 0]],
    _b_ = [0, cst_src_fix_transform_ml, 8, 62],
    _c_ = [0, [0, 0, 0]],
    _d_ = [0, cst_src_fix_transform_ml, 208, 54],
    _e_ = [0, [0, 0, 0]],
    _f_ = [0, [0, 0, 0]];
   function Make(Types, F){
    var
     Recurse = caml_call2(CamlinternalMod[1], _b_, _a_),
     User = caml_call2(CamlinternalMod[1], _d_, _c_),
     empty_for_lazy = Types[3][3],
     empty = Types[3][2],
     combine_up = Types[3][1];
    function default_c(down, acc, computation){
     if(typeof computation === "number")
      var computation$0 = 0, up = empty, acc$0 = acc;
     else
      switch(computation[0]){
        case 0:
         var
          value = computation[1],
          match = caml_call3(User[2], down, acc, value),
          value$0 = match[3],
          up$0 = match[2],
          acc$1 = match[1],
          computation$0 = [0, value$0],
          up = up$0,
          acc$0 = acc$1;
         break;
        case 1:
         var
          input = computation[8],
          reset = computation[7],
          apply_static = computation[6],
          apply_dynamic = computation[5],
          static_action = computation[4],
          dynamic_action = computation[3],
          input_id = computation[2],
          model = computation[1],
          match$0 = caml_call3(User[2], down, acc, input),
          input$0 = match$0[3],
          up$1 = match$0[2],
          acc$2 = match$0[1],
          res =
            [1,
             model,
             input_id,
             dynamic_action,
             static_action,
             apply_dynamic,
             apply_static,
             reset,
             input$0],
          computation$0 = res,
          up = up$1,
          acc$0 = acc$2;
         break;
        case 2:
         var
          input$1 = computation[6],
          reset$0 = computation[5],
          apply_action = computation[4],
          dynamic_action$0 = computation[3],
          input_id$0 = computation[2],
          model$0 = computation[1],
          match$1 = caml_call3(User[2], down, acc, input$1),
          input$2 = match$1[3],
          up$2 = match$1[2],
          acc$3 = match$1[1],
          computation$0 =
            [2,
             model$0,
             input_id$0,
             dynamic_action$0,
             apply_action,
             reset$0,
             input$2],
          up = up$2,
          acc$0 = acc$3;
         break;
        case 3:
         var
          reset$1 = computation[4],
          apply_action$0 = computation[3],
          static_action$0 = computation[2],
          model$1 = computation[1],
          computation$0 =
            [3, model$1, static_action$0, apply_action$0, reset$1],
          up = empty,
          acc$0 = acc;
         break;
        case 4:
         var
          compute = computation[3],
          input_id$1 = computation[2],
          input$3 = computation[1],
          match$2 = caml_call3(User[2], down, acc, input$3),
          input$4 = match$2[3],
          up$3 = match$2[2],
          acc$4 = match$2[1],
          computation$0 = [4, input$4, input_id$1, compute],
          up = up$3,
          acc$0 = acc$4;
         break;
        case 5:
         var
          here = computation[4],
          into = computation[3],
          via = computation[2],
          from = computation[1],
          match$3 = caml_call3(User[1], down, acc, from),
          from$0 = match$3[3],
          up1 = match$3[2],
          acc$5 = match$3[1],
          match$4 = caml_call3(User[1], down, acc$5, into),
          into$0 = match$4[3],
          up2 = match$4[2],
          acc$6 = match$4[1],
          computation$1 = [5, from$0, via, into$0, here],
          computation$0 = computation$1,
          up = caml_call2(combine_up, up1, up2),
          acc$0 = acc$6;
         break;
        case 6:
         var
          inner = computation[3],
          value$1 = computation[2],
          id = computation[1],
          match$5 = caml_call3(User[2], down, acc, value$1),
          value$2 = match$5[3],
          up1$0 = match$5[2],
          acc$7 = match$5[1],
          match$6 = caml_call3(User[1], down, acc$7, inner),
          inner$0 = match$6[3],
          up2$0 = match$6[2],
          acc$8 = match$6[1],
          computation$2 = [6, id, value$2, inner$0],
          computation$0 = computation$2,
          up = caml_call2(combine_up, up1$0, up2$0),
          acc$0 = acc$8;
         break;
        case 7:
         var
          for_some = computation[3],
          default$0 = computation[2],
          id$0 = computation[1],
          computation$0 = [7, id$0, default$0, for_some],
          up = empty,
          acc$0 = acc;
         break;
        case 8:
         var
          by = computation[6],
          data_id = computation[5],
          cmp_id = computation[4],
          key_id = computation[3],
          key_comparator = computation[2],
          map = computation[1],
          match$7 = caml_call3(User[2], down, acc, map),
          map$0 = match$7[3],
          up1$1 = match$7[2],
          acc$9 = match$7[1],
          match$8 = caml_call3(User[1], down, acc$9, by),
          by$0 = match$8[3],
          up2$1 = match$8[2],
          acc$10 = match$8[1],
          computation$3 =
            [8, map$0, key_comparator, key_id, cmp_id, data_id, by$0],
          computation$0 = computation$3,
          up = caml_call2(combine_up, up1$1, up2$1),
          acc$0 = acc$10;
         break;
        case 9:
         var
          match$9 = caml_call3(User[2], down, acc, computation[1]),
          map$1 = match$9[3],
          up1$2 = match$9[2],
          acc$11 = match$9[1],
          match$10 = caml_call3(User[1], down, acc$11, computation[9]),
          by$1 = match$10[3],
          up2$2 = match$10[2],
          acc$12 = match$10[1],
          computation$4 =
            [9,
             map$1,
             computation[2],
             computation[3],
             computation[4],
             computation[5],
             computation[6],
             computation[7],
             computation[8],
             by$1,
             computation[10]],
          computation$0 = computation$4,
          up = caml_call2(combine_up, up1$2, up2$2),
          acc$0 = acc$12;
         break;
        case 10:
         var
          by$2 = computation[2],
          map$2 = computation[1],
          match$11 = caml_call3(User[2], down, acc, map$2),
          map$3 = match$11[3],
          up$4 = match$11[2],
          acc$13 = match$11[1],
          computation$0 = [10, map$3, by$2],
          up = up$4,
          acc$0 = acc$13;
         break;
        case 11:
         var
          here$0 = computation[3],
          arms = computation[2],
          match$12 = caml_call3(User[2], down, acc, computation[1]),
          up1$3 = match$12[2],
          acc$14 = match$12[1],
          match$13 = match$12[3],
          _i_ = caml_call2(Core_Map[78], 0, arms),
          _j_ =
            caml_call3
             (Core_List[90],
              _i_,
              [0, acc$14, up1$3],
              function(_k_, param){
               var
                v = param[2],
                k = param[1],
                up = _k_[2],
                acc = _k_[1],
                match = caml_call3(User[1], down, acc, v),
                v$0 = match[3],
                up$0 = match[2],
                acc$0 = match[1];
               return [0,
                       [0, acc$0, caml_call2(combine_up, up, up$0)],
                       [0, k, v$0]];
              }),
          arms$0 = _j_[2],
          match$14 = _j_[1],
          upn = match$14[2],
          acc$15 = match$14[1],
          arms$1 = caml_call2(Core_Map[8], [0, Core_Int[102]], arms$0),
          computation$0 = [11, match$13, arms$1, here$0],
          up = upn,
          acc$0 = acc$15;
         break;
        case 12:
         var
          t = computation[1],
          t$0 =
            caml_call2
             (Core_Lazy[25],
              t,
              function(t){
               var t$0 = caml_call3(User[1], down, acc, t)[3];
               return t$0;
              }),
          computation$0 = [12, t$0],
          up = empty_for_lazy,
          acc$0 = acc;
         break;
        case 13:
         var
          reset$2 = computation[8],
          dynamic_apply_action = computation[7],
          inner$1 = computation[6],
          model_id = computation[5],
          inject_id = computation[4],
          result_id = computation[3],
          action_id = computation[2],
          wrapper_model = computation[1],
          match$15 = caml_call3(User[1], down, acc, inner$1),
          inner$2 = match$15[3],
          up$5 = match$15[2],
          acc$16 = match$15[1],
          res$0 =
            [13,
             wrapper_model,
             action_id,
             result_id,
             inject_id,
             model_id,
             inner$2,
             dynamic_apply_action,
             reset$2],
          computation$0 = res$0,
          up = up$5,
          acc$0 = acc$16;
         break;
        case 14:
         var
          inner$3 = computation[2],
          reset_id = computation[1],
          match$16 = caml_call3(User[1], down, acc, inner$3),
          inner$4 = match$16[3],
          up$6 = match$16[2],
          acc$17 = match$16[1],
          computation$0 = [14, reset_id, inner$4],
          up = up$6,
          acc$0 = acc$17;
         break;
        default:
         var
          value$3 = computation[1],
          match$17 = caml_call3(User[2], down, acc, value$3),
          value$4 = match$17[3],
          up$7 = match$17[2],
          acc$18 = match$17[1],
          computation$5 = [15, value$4],
          computation$0 = computation$5,
          up = up$7,
          acc$0 = acc$18;
      }
     return [0, acc$0, up, computation$0];
    }
    function reduce_up(l){
     var _h_ = caml_call2(Core_List[107], l, combine_up);
     return caml_call2(Core_Option[35], _h_, empty);
    }
    function default_v(down, acc, param){
     var id = param[3], here = param[2], value = param[1];
     switch(value[0]){
       case 0:
        var c = value[1], value$0 = [0, c], up = empty, acc$0 = acc; break;
       case 1:
        var
         incr_node = value[1],
         value$0 = [1, incr_node],
         up = empty,
         acc$0 = acc;
        break;
       case 2:
        var
         name_source = value[1],
         value$0 = [2, name_source],
         up = empty,
         acc$0 = acc;
        break;
       case 3:
        var
         b = value[2],
         a = value[1],
         match = caml_call3(User[2], down, acc, a),
         a$0 = match[3],
         up_a = match[2],
         acc$1 = match[1],
         match$0 = caml_call3(User[2], down, acc$1, b),
         b$0 = match$0[3],
         up_b = match$0[2],
         acc$2 = match$0[1],
         value$1 = [3, a$0, b$0],
         value$0 = value$1,
         up = caml_call2(combine_up, up_a, up_b),
         acc$0 = acc$2;
        break;
       case 4:
        var
         match$1 = caml_call3(User[2], down, acc, value[1]),
         value$2 = match$1[3],
         up$0 = match$1[2],
         acc$3 = match$1[1],
         value$0 = [4, value$2, value[2], value[3]],
         up = up$0,
         acc$0 = acc$3;
        break;
       case 5:
        var
         match$2 = caml_call3(User[2], down, acc, value[1]),
         value$3 = match$2[3],
         up$1 = match$2[2],
         acc$4 = match$2[1],
         value$0 = [5, value$3, value[2]],
         up = up$1,
         acc$0 = acc$4;
        break;
       case 6:
        var
         match$3 = caml_call3(User[2], down, acc, value[1]),
         t1 = match$3[3],
         up1 = match$3[2],
         acc$5 = match$3[1],
         match$4 = caml_call3(User[2], down, acc$5, value[2]),
         t2 = match$4[3],
         up2 = match$4[2],
         acc$6 = match$4[1],
         value$4 = [6, t1, t2, value[3]],
         value$0 = value$4,
         up = reduce_up([0, up1, [0, up2, 0]]),
         acc$0 = acc$6;
        break;
       case 7:
        var
         match$5 = caml_call3(User[2], down, acc, value[1]),
         t1$0 = match$5[3],
         up1$0 = match$5[2],
         acc$7 = match$5[1],
         match$6 = caml_call3(User[2], down, acc$7, value[2]),
         t2$0 = match$6[3],
         up2$0 = match$6[2],
         acc$8 = match$6[1],
         match$7 = caml_call3(User[2], down, acc$8, value[3]),
         t3 = match$7[3],
         up3 = match$7[2],
         acc$9 = match$7[1],
         value$5 = [7, t1$0, t2$0, t3, value[4]],
         value$0 = value$5,
         up = reduce_up([0, up1$0, [0, up2$0, [0, up3, 0]]]),
         acc$0 = acc$9;
        break;
       case 8:
        var
         match$8 = caml_call3(User[2], down, acc, value[1]),
         t1$1 = match$8[3],
         up1$1 = match$8[2],
         acc$10 = match$8[1],
         match$9 = caml_call3(User[2], down, acc$10, value[2]),
         t2$1 = match$9[3],
         up2$1 = match$9[2],
         acc$11 = match$9[1],
         match$10 = caml_call3(User[2], down, acc$11, value[3]),
         t3$0 = match$10[3],
         up3$0 = match$10[2],
         acc$12 = match$10[1],
         match$11 = caml_call3(User[2], down, acc$12, value[4]),
         t4 = match$11[3],
         up4 = match$11[2],
         acc$13 = match$11[1],
         value$6 = [8, t1$1, t2$1, t3$0, t4, value[5]],
         value$0 = value$6,
         up = reduce_up([0, up1$1, [0, up2$1, [0, up3$0, [0, up4, 0]]]]),
         acc$0 = acc$13;
        break;
       case 9:
        var
         match$12 = caml_call3(User[2], down, acc, value[1]),
         t1$2 = match$12[3],
         up1$2 = match$12[2],
         acc$14 = match$12[1],
         match$13 = caml_call3(User[2], down, acc$14, value[2]),
         t2$2 = match$13[3],
         up2$2 = match$13[2],
         acc$15 = match$13[1],
         match$14 = caml_call3(User[2], down, acc$15, value[3]),
         t3$1 = match$14[3],
         up3$1 = match$14[2],
         acc$16 = match$14[1],
         match$15 = caml_call3(User[2], down, acc$16, value[4]),
         t4$0 = match$15[3],
         up4$0 = match$15[2],
         acc$17 = match$15[1],
         match$16 = caml_call3(User[2], down, acc$17, value[5]),
         t5 = match$16[3],
         up5 = match$16[2],
         acc$18 = match$16[1],
         up$2 =
           reduce_up
            ([0, up1$2, [0, up2$2, [0, up3$1, [0, up4$0, [0, up5, 0]]]]]),
         value$0 = [9, t1$2, t2$2, t3$1, t4$0, t5, value[6]],
         up = up$2,
         acc$0 = acc$18;
        break;
       case 10:
        var
         match$17 = caml_call3(User[2], down, acc, value[1]),
         t1$3 = match$17[3],
         up1$3 = match$17[2],
         acc$19 = match$17[1],
         match$18 = caml_call3(User[2], down, acc$19, value[2]),
         t2$3 = match$18[3],
         up2$3 = match$18[2],
         acc$20 = match$18[1],
         match$19 = caml_call3(User[2], down, acc$20, value[3]),
         t3$2 = match$19[3],
         up3$2 = match$19[2],
         acc$21 = match$19[1],
         match$20 = caml_call3(User[2], down, acc$21, value[4]),
         t4$1 = match$20[3],
         up4$1 = match$20[2],
         acc$22 = match$20[1],
         match$21 = caml_call3(User[2], down, acc$22, value[5]),
         t5$0 = match$21[3],
         up5$0 = match$21[2],
         acc$23 = match$21[1],
         match$22 = caml_call3(User[2], down, acc$23, value[6]),
         t6 = match$22[3],
         up6 = match$22[2],
         acc$24 = match$22[1],
         up$3 =
           reduce_up
            ([0,
              up1$3,
              [0, up2$3, [0, up3$2, [0, up4$1, [0, up5$0, [0, up6, 0]]]]]]),
         value$0 = [10, t1$3, t2$3, t3$2, t4$1, t5$0, t6, value[7]],
         up = up$3,
         acc$0 = acc$24;
        break;
       case 11:
        var
         match$23 = caml_call3(User[2], down, acc, value[1]),
         t1$4 = match$23[3],
         up1$4 = match$23[2],
         acc$25 = match$23[1],
         match$24 = caml_call3(User[2], down, acc$25, value[2]),
         t2$4 = match$24[3],
         up2$4 = match$24[2],
         acc$26 = match$24[1],
         match$25 = caml_call3(User[2], down, acc$26, value[3]),
         t3$3 = match$25[3],
         up3$3 = match$25[2],
         acc$27 = match$25[1],
         match$26 = caml_call3(User[2], down, acc$27, value[4]),
         t4$2 = match$26[3],
         up4$2 = match$26[2],
         acc$28 = match$26[1],
         match$27 = caml_call3(User[2], down, acc$28, value[5]),
         t5$1 = match$27[3],
         up5$1 = match$27[2],
         acc$29 = match$27[1],
         match$28 = caml_call3(User[2], down, acc$29, value[6]),
         t6$0 = match$28[3],
         up6$0 = match$28[2],
         acc$30 = match$28[1],
         match$29 = caml_call3(User[2], down, acc$30, value[7]),
         t7 = match$29[3],
         up7 = match$29[2],
         acc$31 = match$29[1],
         up$4 =
           reduce_up
            ([0,
              up1$4,
              [0,
               up2$4,
               [0, up3$3, [0, up4$2, [0, up5$1, [0, up6$0, [0, up7, 0]]]]]]]),
         value$0 = [11, t1$4, t2$4, t3$3, t4$2, t5$1, t6$0, t7, value[8]],
         up = up$4,
         acc$0 = acc$31;
        break;
       default:
        var
         e = value[1],
         value$7 = [12, e],
         value$0 = value$7,
         up = empty,
         acc$0 = acc;
     }
     return [0, acc$0, up, [0, value$0, here, id]];
    }
    function on_value(down, acc, behavior, value){
     return 264513256 <= behavior
             ? caml_call3(User[2], down, acc, value)
             : default_v(down, acc, value);
    }
    function on_computation(down, acc, behavior, computation){
     return 264513256 <= behavior
             ? caml_call3(User[1], down, acc, computation)
             : default_c(down, acc, computation);
    }
    caml_call3
     (CamlinternalMod[2], _e_, Recurse, [0, on_computation, on_value]);
    var _g_ = caml_call1(F, Recurse);
    caml_call3(CamlinternalMod[2], _f_, User, _g_);
    function transform_c(down, acc, computation){
     return caml_call4(Recurse[1], down, acc, 264513256, computation);
    }
    function transform_v(down, acc, value){
     return caml_call4(Recurse[2], down, acc, 264513256, value);
    }
    return [0, transform_c, transform_v];
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Fix_transform);
   var Bonsai_Fix_transform = [0, Make];
   runtime.caml_register_global
    (23, Bonsai_Fix_transform, cst_Bonsai_Fix_transform);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Proc_min
//# unitInfo: Requires: Bonsai__Computation, Bonsai__Meta, Bonsai__Value, Core, Core__Int, Core__Option, Core__Or_error, Core__Sequence, Core__Source_code_position, Core__Type_equal, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Proc_min = "Bonsai__Proc_min",
    cst_action = "action",
    cst_bonsai = "bonsai",
    cst_data_id$1 = "data id",
    cst_model_key_id$1 = "model key id",
    cst_src_proc_min_ml = "src/proc_min.ml",
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Core_Type_equal = global_data.Core__Type_equal,
    Bonsai_Value = global_data.Bonsai__Value,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Bonsai_Meta = global_data.Bonsai__Meta,
    Ui_incr = global_data.Ui_incr,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Core_Option = global_data.Core__Option,
    Core_Sequence = global_data.Core__Sequence,
    Core_Int = global_data.Core__Int,
    Core_Or_error = global_data.Core__Or_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Proc_min);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], cst_src_proc_min_ml);
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "proc_min.ml");
   var _a_ = [0, cst_src_proc_min_ml, 15, 360, 406];
   function read(x){return [0, x];}
   function sub(here, from, f){
    if(typeof from !== "number" && 0 === from[0]){
     var match = from[1], named = match[1];
     if(2 === named[0]){
      var
       id = match[3],
       there = match[2],
       here$0 = caml_call2(Core_Option[55], here, there);
      return caml_call1(f, [0, named, here$0, id]);
     }
    }
    var
     _J_ = Core[148],
     _K_ = caml_call1(Core_Source_code_position[2], _a_),
     via = caml_call2(Core_Type_equal[8][3], _K_, _J_),
     into = caml_call1(f, caml_call2(Bonsai_Value[21], [0, here], via));
    return [5, from, via, into, here];
   }
   function switch$0(here, match, branches, with$0){
    var
     _F_ = caml_call5(Core_Sequence[82], 0, 0, 0, 0, branches),
     _G_ =
       caml_call2
        (Core_Sequence[41],
         _F_,
         function(key){
          try{var _I_ = caml_call1(with$0, key), computation = _I_;}
          catch(exn$0){
           var
            exn = caml_wrap_exception(exn$0),
            x = caml_call1(Bonsai_Value[25], exn),
            computation = [0, x];
          }
          return [0, key, computation];
         }),
     _H_ = caml_call1(Core_Int[103][18], _G_),
     arms = caml_call1(Core_Or_error[36], _H_);
    return [11, match, arms, here];
   }
   function build_resetter(reset, default_model, f){
    function ignore_absurd(_E_){return 0;}
    return caml_call3
            (Core_Option[37],
             reset,
             function(_A_, _B_, _C_, _D_){return default_model;},
             function(a){return caml_call2(f, ignore_absurd, a);});
   }
   function fetch(id, default$0, for_some){return [7, id, default$0, for_some];
   }
   function store(id, value, inner){return [6, id, value, inner];}
   var Dynamic_scope = [0, fetch, store];
   function lifecycle(t){return [15, t];}
   var
    Edge = [0, lifecycle],
    _b_ = [0, cst_src_proc_min_ml, 73, 1784, 1828],
    _c_ = [0, cst_action],
    cst_An_action_sent_to_a_state_ =
      "An action sent to a [state_machine01] has been dropped because its input was not present. This happens when the [state_machine01] is inactive when it receives a message.",
    _d_ = [0, cst_src_proc_min_ml, 100, 2786, 2830],
    _e_ = [0, "Active"],
    _f_ = [0, "Inactive"],
    _g_ = [0, cst_src_proc_min_ml, 157, 4145, 4189],
    _h_ = [0, cst_action],
    cst_An_action_sent_to_an_of_mo =
      "An action sent to an [of_module] has been dropped because its input was not present. This happens when the [of_module] is inactive when it receives a message.",
    cst_src_proc_min_ml_205_17 = "src/proc_min.ml:205:17";
   function state_machine01
   (model,
    Dynamic_action,
    static_action,
    reset,
    default_model,
    apply_dynamic,
    apply_static,
    input){
    var
     reset$0 =
       caml_call2
        (Core_Option[35],
         reset,
         function(_w_, _x_, _y_, _z_){return default_model;}),
     name = caml_call1(Core_Source_code_position[2], _b_);
    function apply_dynamic$0
    (inject_dynamic, inject_static, schedule_event, input, model, action){
     if(input){
      var input$0 = input[1];
      return caml_call6
              (apply_dynamic,
               inject_dynamic,
               inject_static,
               schedule_event,
               input$0,
               model,
               action);
     }
     var
      _u_ =
        [0, [1, [0, _c_, [0, caml_call1(Dynamic_action[1], action), 0]]], 0],
      _v_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_An_action_sent_to_a_state_),
          _u_]];
     caml_call2(Core[251], 0, _v_);
     return model;
    }
    var
     _r_ = caml_call2(Bonsai_Meta[2][7], static_action, name),
     _s_ = caml_call2(Bonsai_Meta[2][7], Dynamic_action, name),
     _t_ = caml_call1(Bonsai_Meta[4][6], 0);
    return [1,
            caml_call3(Bonsai_Meta[1][7], model, default_model, name),
            _t_,
            _s_,
            _r_,
            apply_dynamic$0,
            apply_static,
            reset$0,
            input];
   }
   function sexp_of_t(of_input_001, param){
    if(! param) return _f_;
    var arg0_002 = param[1], res0_003 = caml_call1(of_input_001, arg0_002);
    return [1, [0, _e_, [0, res0_003, 0]]];
   }
   function state_machine1
   (model, Dynamic_action, reset$0, default_model, apply_action$0, input){
    var
     name = caml_call1(Core_Source_code_position[2], _d_),
     reset =
       build_resetter
        (reset$0,
         default_model,
         function(ignore_absurd, reset, inject_dynamic, inject_static){
          caml_call1(ignore_absurd, inject_static);
          return caml_call1(reset, inject_dynamic);
         });
    function apply_action(inject_dynamic, param){
     return function(schedule_event, input$0, model, action){
      if(input$0) var x = input$0[1], input = [0, x]; else var input = 0;
      return caml_call5
              (apply_action$0,
               inject_dynamic,
               schedule_event,
               input,
               model,
               action);};
    }
    var
     _p_ = caml_call2(Bonsai_Meta[2][7], Dynamic_action, name),
     _q_ = caml_call1(Bonsai_Meta[4][6], 0);
    return [2,
            caml_call3(Bonsai_Meta[1][7], model, default_model, name),
            _q_,
            _p_,
            apply_action,
            reset,
            input];
   }
   function state_machine0
   (reset, model, static_action, default_model, apply_action){
    var name = caml_call1(Core_Source_code_position[2], _g_);
    function apply_action$0(param, inject_static){
     return caml_call1(apply_action, inject_static);
    }
    var
     reset$0 =
       build_resetter
        (reset,
         default_model,
         function(ignore_absurd, reset, inject_dynamic, inject_static){
          caml_call1(ignore_absurd, inject_dynamic);
          return caml_call1(reset, inject_static);
         }),
     _o_ = caml_call2(Bonsai_Meta[2][7], static_action, name);
    return [3,
            caml_call3(Bonsai_Meta[1][7], model, default_model, name),
            _o_,
            apply_action$0,
            reset$0];
   }
   function value_cutoff(t, equal){
    var x = caml_call3(Bonsai_Value[22], 0, t, equal);
    return [0, x];
   }
   function compute_with_clock(t, f){
    return [4, t, caml_call1(Bonsai_Meta[4][6], 0), f];
   }
   function of_module(M, default_model, input){
    return sub
            (0,
             state_machine1
              (M[3],
               M[4],
               0,
               default_model,
               function(inject, schedule_event, input, model, action){
                if(input){
                 var input$0 = input[1];
                 return caml_call5
                         (M[6], input$0, inject, schedule_event, model, action);
                }
                var
                 _l_ =
                   [0, [1, [0, _h_, [0, caml_call1(M[4][1], action), 0]]], 0],
                 _m_ =
                   [0,
                    caml_call1
                     (Sexplib0_Sexp_conv[7], cst_An_action_sent_to_an_of_mo),
                    _l_],
                 _n_ =
                   [1,
                    [0,
                     caml_call1
                      (Sexplib0_Sexp_conv[7], cst_src_proc_min_ml_205_17),
                     _m_]];
                caml_call2(Core[251], 0, _n_);
                return model;
               },
               input),
             function(state){
              return compute_with_clock
                      (caml_call2(Bonsai_Value[4], input, state),
                       function(clock, input_and_state){
                        var
                         inject =
                           caml_call2
                            (Ui_incr[78][4][6],
                             input_and_state,
                             function(param){
                              var pattern_syntax_005 = param[2][2];
                              return pattern_syntax_005;
                             }),
                         input =
                           caml_call2
                            (Ui_incr[78][4][6],
                             input_and_state,
                             function(param){
                              var pattern_syntax_006 = param[1];
                              return pattern_syntax_006;
                             }),
                         model =
                           caml_call2
                            (Ui_incr[78][4][6],
                             input_and_state,
                             function(param){
                              var pattern_syntax_007 = param[2][1];
                              return pattern_syntax_007;
                             });
                        return caml_call3(M[7], input, model, inject);
                       });
             });
   }
   var
    Proc_incr = [0, value_cutoff, compute_with_clock, of_module],
    cst_key_id = "key id",
    cst_cmp_id = "cmp id",
    cst_data_id = cst_data_id$1,
    cst_io_key_id = "io key id",
    cst_io_cmp_id = "io cmp id",
    cst_model_key_id = cst_model_key_id$1,
    cst_model_key_id$0 = cst_model_key_id$1,
    cst_data_id$0 = cst_data_id$1,
    cst_model_id = "model id",
    cst_action_id = "action id",
    cst_inject_id = "inject id",
    _i_ = [0, cst_action],
    cst_An_action_sent_to_a_wrap_h =
      "An action sent to a [wrap] has been dropped because its input was not present. This happens when the [wrap] is inactive when it receives a message.",
    cst_outer_model_for_wrap = "outer model for wrap",
    cst_reset_model = "reset-model";
   function assoc(comparator, map, f){
    var
     key_id = caml_call2(Core_Type_equal[8][3], cst_key_id, comparator[2]),
     cmp_id = caml_call2(Core_Type_equal[8][3], cst_cmp_id, Core[148]),
     data_id = caml_call2(Core_Type_equal[8][3], cst_data_id, Core[148]),
     key_var = caml_call2(Bonsai_Value[21], 0, key_id),
     data_var = caml_call2(Bonsai_Value[21], 1, data_id),
     by = caml_call2(f, key_var, data_var);
    return [8, map, comparator, key_id, cmp_id, data_id, by];
   }
   function assoc_on(io_comparator, model_comparator, map, get_model_key, f){
    var
     io_key_id =
       caml_call2(Core_Type_equal[8][3], cst_io_key_id, io_comparator[2]),
     io_cmp_id = caml_call2(Core_Type_equal[8][3], cst_io_cmp_id, Core[148]),
     model_key_id =
       caml_call2
        (Core_Type_equal[8][3], cst_model_key_id, model_comparator[2]),
     model_cmp_id =
       caml_call2(Core_Type_equal[8][3], cst_model_key_id$0, Core[148]),
     data_id = caml_call2(Core_Type_equal[8][3], cst_data_id$0, Core[148]),
     key_var = caml_call2(Bonsai_Value[21], 0, io_key_id),
     data_var = caml_call2(Bonsai_Value[21], 1, data_id),
     by = caml_call2(f, key_var, data_var);
    return [9,
            map,
            io_comparator,
            model_comparator,
            io_key_id,
            io_cmp_id,
            model_key_id,
            model_cmp_id,
            data_id,
            by,
            get_model_key];
   }
   function lazy(t){return [12, t];}
   function wrap(reset, model_module, default_model, apply_action, f){
    var
     model_id = caml_call2(Core_Type_equal[8][3], cst_model_id, Core[148]),
     sexp_of_t = Core[148],
     M = [0, sexp_of_t],
     reset$0 =
       build_resetter
        (reset,
         default_model,
         function(ignore_absurd, reset, inject_dynamic, inject_static){
          caml_call1(ignore_absurd, inject_static);
          return caml_call1(reset, inject_dynamic);
         }),
     action_id = caml_call2(Bonsai_Meta[2][7], M, cst_action_id),
     result_id = caml_call1(Bonsai_Meta[4][6], 0),
     inject_id = caml_call2(Core_Type_equal[8][3], cst_inject_id, Core[148]);
    function apply_action$0
    (inject_dynamic, param, schedule_event, result, model, action){
     if(result){
      var result$0 = result[1];
      return caml_call5
              (apply_action,
               inject_dynamic,
               schedule_event,
               result$0,
               model,
               action);
     }
     var
      _j_ = [0, [1, [0, _i_, [0, caml_call1(M[1], action), 0]]], 0],
      _k_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_An_action_sent_to_a_wrap_h),
          _j_]];
     caml_call2(Core[251], 0, _k_);
     return model;
    }
    var
     model_var = caml_call2(Bonsai_Value[21], 2, model_id),
     inject_var = caml_call2(Bonsai_Value[21], 3, inject_id),
     inner = caml_call2(f, model_var, inject_var),
     wrapper_model =
       caml_call3
        (Bonsai_Meta[1][7],
         model_module,
         default_model,
         cst_outer_model_for_wrap);
    return [13,
            wrapper_model,
            action_id,
            result_id,
            inject_id,
            model_id,
            inner,
            apply_action$0,
            reset$0];
   }
   function with_model_resetter(f){
    var
     reset_id = caml_call2(Core_Type_equal[8][3], cst_reset_model, Core[148]),
     inner = caml_call1(f, caml_call2(Bonsai_Value[21], 5, reset_id));
    return [14, reset_id, inner];
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Proc_min);
   var
    Bonsai_Proc_min =
      [0,
       read,
       sub,
       switch$0,
       Proc_incr,
       Dynamic_scope,
       Edge,
       state_machine01,
       [0, sexp_of_t],
       state_machine1,
       state_machine0,
       assoc,
       assoc_on,
       lazy,
       wrap,
       with_model_resetter,
       0];
   runtime.caml_register_global(48, Bonsai_Proc_min, cst_Bonsai_Proc_min);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Incr0
//# unitInfo: Requires: Bonsai__Proc_min, Bonsai__Value, Core, Core__Type_equal, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Incr0 = "Bonsai__Incr0",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Core_Type_equal = global_data.Core__Type_equal,
    Bonsai_Value = global_data.Bonsai__Value,
    Bonsai_Proc_min = global_data.Bonsai__Proc_min,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Incr0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/incr0.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "incr0.ml");
   var cst_to_value = "to_value";
   function compute(t, f){
    return caml_call2
            (Bonsai_Proc_min[4][2],
             t,
             function(param, input){return caml_call1(f, input);});
   }
   function with_clock(f){
    var _a_ = caml_call1(Bonsai_Value[2], 0);
    return caml_call2
            (Bonsai_Proc_min[4][2],
             _a_,
             function(clock, param){return caml_call1(f, clock);});
   }
   function to_value(incr){
    return [0,
            [1, incr],
            0,
            caml_call2(Core_Type_equal[8][3], cst_to_value, Core[148])];
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Incr0);
   var Bonsai_Incr0 = [0, compute, with_clock, to_value];
   runtime.caml_register_global(16, Bonsai_Incr0, cst_Bonsai_Incr0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Map0
//# unitInfo: Requires: Bonsai__Incr0, Bonsai__Value, Expect_test_collector, Incr_map, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Map0 = "Bonsai__Map0",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call10(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    return (f.l >= 0 ? f.l : f.l = f.length) === 10
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]);
   }
   function caml_call13
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12){
    return (f.l >= 0 ? f.l : f.l = f.length) === 13
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Incr_map = global_data.Incr_map,
    Bonsai_Incr0 = global_data.Bonsai__Incr0,
    Ui_incr = global_data.Ui_incr,
    Bonsai_Value = global_data.Bonsai__Value,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Map0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/map0.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "map0.ml");
   var arg = Incr_map[1];
   function _a_(eta){return caml_call2(arg, 0, eta);}
   var _b_ = Bonsai_Incr0[1];
   function of_set(_ag_){return caml_call2(_b_, _ag_, _a_);}
   function filter_mapi(m, f){
    var _af_ = Incr_map[2];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call4(_af_, 0, 0, eta, f);});
   }
   function filter_map(m, f){
    var _ae_ = Incr_map[4];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call4(_ae_, 0, 0, eta, f);});
   }
   function partition_mapi(m, f){
    var _ad_ = Incr_map[10];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call4(_ad_, 0, 0, eta, f);});
   }
   function unordered_fold(update, m, init, add, remove){
    var _ac_ = Incr_map[12];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){
              return caml_call10
                      (_ac_, 0, 0, update, 0, 0, 0, eta, init, add, remove);
             });
   }
   function unordered_fold_with_extra
   (update, m, e, init, add, remove, extra_changed){
    var _ab_ = caml_call2(Bonsai_Value[4], m, e);
    return caml_call2
            (Bonsai_Incr0[1],
             _ab_,
             function(m_and_e){
              var
               e =
                 caml_call2
                  (Ui_incr[78][4][6],
                   m_and_e,
                   function(param){
                    var pattern_syntax_001 = param[2];
                    return pattern_syntax_001;
                   }),
               m =
                 caml_call2
                  (Ui_incr[78][4][6],
                   m_and_e,
                   function(param){
                    var pattern_syntax_002 = param[1];
                    return pattern_syntax_002;
                   });
              return caml_call13
                      (Incr_map[13],
                       0,
                       0,
                       0,
                       update,
                       0,
                       0,
                       0,
                       m,
                       e,
                       init,
                       add,
                       remove,
                       extra_changed);
             });
   }
   function cutoff(m, equal){
    var _$_ = caml_call1(Ui_incr[60][5], equal), _aa_ = Incr_map[14];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call3(_aa_, 0, eta, _$_);});
   }
   function mapi_count(m, M, f){
    var _Z_ = [0, M[3]], ___ = Incr_map[15];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call5(___, 0, 0, eta, _Z_, f);});
   }
   function map_count(m, M, f){
    var _X_ = [0, M[3]], _Y_ = Incr_map[16];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call5(_Y_, 0, 0, eta, _X_, f);});
   }
   function mapi_min(m, M, f){
    var _V_ = [0, M[3]], _W_ = Incr_map[17];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call5(_W_, 0, 0, eta, _V_, f);});
   }
   function mapi_max(m, M, f){
    var _T_ = [0, M[3]], _U_ = Incr_map[18];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call5(_U_, 0, 0, eta, _T_, f);});
   }
   function map_min(m, M, f){
    var _R_ = [0, M[3]], _S_ = Incr_map[19];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call5(_S_, 0, 0, eta, _R_, f);});
   }
   function map_max(m, M, f){
    var _P_ = [0, M[3]], _Q_ = Incr_map[20];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call5(_Q_, 0, 0, eta, _P_, f);});
   }
   function min_value(m, M){
    var _N_ = [0, M[3]], _O_ = Incr_map[21];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call4(_O_, 0, 0, eta, _N_);});
   }
   function max_value(m, M){
    var _L_ = [0, M[3]], _M_ = Incr_map[22];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call4(_M_, 0, 0, eta, _L_);});
   }
   function mapi_bounds(m, M, f){
    var _J_ = [0, M[3]], _K_ = Incr_map[23];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call5(_K_, 0, 0, eta, _J_, f);});
   }
   function map_bounds(m, M, f){
    var _H_ = [0, M[3]], _I_ = Incr_map[24];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call5(_I_, 0, 0, eta, _H_, f);});
   }
   function value_bounds(m, M){
    var _F_ = [0, M[3]], _G_ = Incr_map[25];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call4(_G_, 0, 0, eta, _F_);});
   }
   function merge(a, b, f){
    var _E_ = caml_call2(Bonsai_Value[4], a, b);
    return caml_call2
            (Bonsai_Incr0[1],
             _E_,
             function(a_and_b){
              var
               a =
                 caml_call2
                  (Ui_incr[78][4][6],
                   a_and_b,
                   function(param){
                    var pattern_syntax_003 = param[1];
                    return pattern_syntax_003;
                   }),
               b =
                 caml_call2
                  (Ui_incr[78][4][6],
                   a_and_b,
                   function(param){
                    var pattern_syntax_004 = param[2];
                    return pattern_syntax_004;
                   });
              return caml_call6(Incr_map[26], 0, 0, 0, a, b, f);
             });
   }
   function merge_both_some(a, b, f){
    var _D_ = caml_call2(Bonsai_Value[4], a, b);
    return caml_call2
            (Bonsai_Incr0[1],
             _D_,
             function(a_and_b){
              var
               a =
                 caml_call2
                  (Ui_incr[78][4][6],
                   a_and_b,
                   function(param){
                    var pattern_syntax_005 = param[1];
                    return pattern_syntax_005;
                   }),
               b =
                 caml_call2
                  (Ui_incr[78][4][6],
                   a_and_b,
                   function(param){
                    var pattern_syntax_006 = param[2];
                    return pattern_syntax_006;
                   });
              return caml_call7(Incr_map[27], 0, 0, 0, 0, a, b, f);
             });
   }
   function unzip(m){
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(m){
              var
               match = caml_call4(Incr_map[29], 0, 0, 0, m),
               r = match[2],
               l = match[1];
              return caml_call2(Ui_incr[42], l, r);
             });
   }
   function unzip_mapi(m, f){
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(m){
              var
               match = caml_call6(Incr_map[30], 0, 0, 0, 0, m, f),
               r = match[2],
               l = match[1];
              return caml_call2(Ui_incr[42], l, r);
             });
   }
   var arg$0 = Incr_map[35];
   function _c_(eta){return caml_call2(arg$0, 0, eta);}
   var _d_ = Bonsai_Incr0[1];
   function keys(_C_){return caml_call2(_d_, _C_, _c_);}
   function rank(m, k){
    var _B_ = caml_call2(Bonsai_Value[4], m, k);
    return caml_call2
            (Bonsai_Incr0[1],
             _B_,
             function(m_and_k){
              var
               k =
                 caml_call2
                  (Ui_incr[78][4][6],
                   m_and_k,
                   function(param){
                    var pattern_syntax_007 = param[2];
                    return pattern_syntax_007;
                   }),
               m =
                 caml_call2
                  (Ui_incr[78][4][6],
                   m_and_k,
                   function(param){
                    var pattern_syntax_008 = param[1];
                    return pattern_syntax_008;
                   });
              return caml_call3(Incr_map[36], 0, m, k);
             });
   }
   function subrange(m, bounds){
    var _A_ = caml_call2(Bonsai_Value[4], m, bounds);
    return caml_call2
            (Bonsai_Incr0[1],
             _A_,
             function(m_and_bounds){
              var
               bounds =
                 caml_call2
                  (Ui_incr[78][4][6],
                   m_and_bounds,
                   function(param){
                    var pattern_syntax_009 = param[2];
                    return pattern_syntax_009;
                   }),
               m =
                 caml_call2
                  (Ui_incr[78][4][6],
                   m_and_bounds,
                   function(param){
                    var pattern_syntax_010 = param[1];
                    return pattern_syntax_010;
                   });
              return caml_call4(Incr_map[37], 0, 0, m, bounds);
             });
   }
   function subrange_by_rank(m, bounds){
    var _z_ = caml_call2(Bonsai_Value[4], m, bounds);
    return caml_call2
            (Bonsai_Incr0[1],
             _z_,
             function(m_and_bounds){
              var
               bounds =
                 caml_call2
                  (Ui_incr[78][4][6],
                   m_and_bounds,
                   function(param){
                    var pattern_syntax_011 = param[2];
                    return pattern_syntax_011;
                   }),
               m =
                 caml_call2
                  (Ui_incr[78][4][6],
                   m_and_bounds,
                   function(param){
                    var pattern_syntax_012 = param[1];
                    return pattern_syntax_012;
                   });
              return caml_call4(Incr_map[38], 0, 0, m, bounds);
             });
   }
   function rekey(m, M, f){
    var _x_ = [0, M[3]], _y_ = Incr_map[39];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call5(_y_, 0, 0, eta, _x_, f);});
   }
   function index_byi(m, M, index){
    var _v_ = [0, M[3]], _w_ = Incr_map[40];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call5(_w_, 0, 0, eta, _v_, index);});
   }
   function index_by(m, M, index){
    var _t_ = [0, M[3]], _u_ = Incr_map[41];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call5(_u_, 0, 0, eta, _t_, index);});
   }
   function unordered_fold_nested_maps(update, m, init, add, remove){
    var _s_ = Incr_map[42];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){
              return caml_call8(_s_, 0, 0, 0, update, eta, init, add, remove);
             });
   }
   function transpose(M, m){
    var _r_ = caml_call3(Incr_map[43], 0, 0, [0, M[3]]);
    return caml_call2(Bonsai_Incr0[1], m, _r_);
   }
   function collapse(m, M){
    var _p_ = [0, M[3]], _q_ = Incr_map[44];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call4(_q_, 0, 0, eta, _p_);});
   }
   function collapse_by(m, merge_keys, M){
    var _n_ = [0, M[3]], _o_ = Incr_map[45];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){
              return caml_call5(_o_, 0, 0, eta, merge_keys, _n_);
             });
   }
   function expand(m, M_outer, M_inner){
    var _k_ = [0, M_inner[3]], _l_ = [0, M_outer[3]], _m_ = Incr_map[46];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call5(_m_, 0, 0, eta, _l_, _k_);});
   }
   function counti(m, f){
    var _j_ = Incr_map[47];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call4(_j_, 0, 0, eta, f);});
   }
   function count(m, f){
    var _i_ = Incr_map[48];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call4(_i_, 0, 0, eta, f);});
   }
   function for_alli(m, f){
    var _h_ = Incr_map[49];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call4(_h_, 0, 0, eta, f);});
   }
   function for_all(m, f){
    var _g_ = Incr_map[50];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call4(_g_, 0, 0, eta, f);});
   }
   function existsi(m, f){
    var _f_ = Incr_map[51];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call4(_f_, 0, 0, eta, f);});
   }
   function exists(m, f){
    var _e_ = Incr_map[52];
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(eta){return caml_call4(_e_, 0, 0, eta, f);});
   }
   function sum(m, algebra, f){
    return caml_call2
            (Bonsai_Incr0[1],
             m,
             function(m){
              return caml_call5(Incr_map[53], 0, 0, m, algebra, f);
             });
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Map0);
   var
    Bonsai_Map0 =
      [0,
       -974539459,
       -974539459,
       of_set,
       filter_mapi,
       filter_map,
       partition_mapi,
       unordered_fold,
       unordered_fold_with_extra,
       cutoff,
       mapi_count,
       map_count,
       mapi_min,
       mapi_max,
       map_min,
       map_max,
       min_value,
       max_value,
       mapi_bounds,
       map_bounds,
       value_bounds,
       merge,
       merge_both_some,
       unzip,
       unzip_mapi,
       keys,
       rank,
       subrange,
       subrange_by_rank,
       rekey,
       index_byi,
       index_by,
       unordered_fold_nested_maps,
       transpose,
       collapse,
       collapse_by,
       expand,
       counti,
       count,
       for_alli,
       for_all,
       existsi,
       exists,
       sum];
   runtime.caml_register_global(15, Bonsai_Map0, cst_Bonsai_Map0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Proc
//# unitInfo: Requires: Base__Applicative, Base__Field, Bonsai__Incr0, Bonsai__Map0, Bonsai__Path, Bonsai__Proc_min, Bonsai__Value, Bonsai__Var, CamlinternalLazy, Core, Core__Bool, Core__Comparator, Core__Error, Core__Int, Core__List, Core__Map, Core__Option, Core__Source_code_position, Core__Time_ns, Core__Tuple, Core__Type_equal, Core__Unique_id, Core__Unit, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record, Ui_effect, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Aborted = "Aborted",
    cst_After = "After",
    cst_Before = "Before",
    cst_Bonsai_Proc = "Bonsai__Proc",
    cst_Finished = "Finished",
    cst_Schedule_effect = "Schedule_effect",
    cst_Set = "Set",
    cst_Wait_for = "Wait_for",
    cst_Waiting_for = "Waiting_for",
    cst_Waiting_for_effect_to_fini = "Waiting_for_effect_to_finish",
    cst_aborted = "aborted",
    cst_after = "after",
    cst_before = "before",
    cst_bonsai = "bonsai",
    cst_finished = "finished",
    cst_last_result$0 = "last_result",
    cst_last_seqnum$0 = "last_seqnum",
    cst_schedule_effect = "schedule_effect",
    cst_src_proc_ml = "src/proc.ml",
    cst_wait_for = "wait_for",
    cst_waiting_for = "waiting_for",
    cst_waiting_for_effect_to_fini = "waiting_for_effect_to_finish",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_285 = "src/proc.ml.Clock.t",
    error_source_085 = "src/proc.ml.Edge.Poll.t",
    error_source_135 = "src/proc.ml.Effect_throttling.Poll_result.t",
    error_source_213 = "src/proc.ml.Clock.Before_or_after.t",
    error_source_219 = "src/proc.ml.Clock.Every_model.t",
    error_source_242 = "src/proc.ml.Clock.Every_action.t",
    Core = global_data.Core,
    Core_Tuple = global_data.Core__Tuple,
    Core_Map = global_data.Core__Map,
    Core_List = global_data.Core__List,
    Bonsai_Value = global_data.Bonsai__Value,
    Ui_effect = global_data.Ui_effect,
    Core_Time_ns = global_data.Core__Time_ns,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Ui_incr = global_data.Ui_incr,
    Core_Type_equal = global_data.Core__Type_equal,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Bonsai_Map0 = global_data.Bonsai__Map0,
    Bonsai_Var = global_data.Bonsai__Var,
    Core_Source_code_position = global_data.Core__Source_code_position,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Core_Error = global_data.Core__Error,
    Core_Option = global_data.Core__Option;
   global_data.Base__Field;
   var
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Core_Unit = global_data.Core__Unit,
    Core_Int = global_data.Core__Int,
    Bonsai_Path = global_data.Bonsai__Path,
    Core_Bool = global_data.Core__Bool,
    Core_Comparator = global_data.Core__Comparator,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bonsai_Proc_min = global_data.Bonsai__Proc_min,
    Bonsai_Incr0 = global_data.Bonsai__Incr0,
    Core_Unique_id = global_data.Core__Unique_id,
    Base_Applicative = global_data.Base__Applicative;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Proc);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], cst_src_proc_ml);
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "proc.ml");
   var
    read = Bonsai_Proc_min[1],
    sub = Bonsai_Proc_min[2],
    switch$0 = Bonsai_Proc_min[3],
    Proc_incr = Bonsai_Proc_min[4],
    Dynamic_scope = Bonsai_Proc_min[5],
    Edge = Bonsai_Proc_min[6],
    state_machine01 = Bonsai_Proc_min[7],
    Computation_status = Bonsai_Proc_min[8],
    state_machine1 = Bonsai_Proc_min[9],
    state_machine0 = Bonsai_Proc_min[10],
    assoc = Bonsai_Proc_min[11],
    assoc_on = Bonsai_Proc_min[12],
    lazy = Bonsai_Proc_min[13],
    wrap = Bonsai_Proc_min[14],
    with_model_resetter = Bonsai_Proc_min[15],
    path = Bonsai_Proc_min[16];
   function map(here, t, f){
    var _h6_ = caml_call2(Bonsai_Value[3], t, f);
    return [0, _h6_[1], here, _h6_[3]];
   }
   var both = Bonsai_Value[4];
   function arr(here, t, f){return caml_call1(read, map(here, t, f));}
   function cutoff(t, equal){
    return caml_call3(Bonsai_Value[22], 1, t, equal);
   }
   var
    map7 = Bonsai_Value[20],
    map6 = Bonsai_Value[19],
    map5 = Bonsai_Value[18],
    map4 = Bonsai_Value[17],
    map3 = Bonsai_Value[16],
    Let_syntax =
      [0,
       sub,
       switch$0,
       read,
       map,
       both,
       arr,
       cutoff,
       map3,
       map4,
       map5,
       map6,
       map7];
   function symbol_map(a, f){return caml_call3(Let_syntax[4], 0, a, f);}
   function symbol(f, a){
    return caml_call3
            (Bonsai_Value[10], f, a, function(f, a){return caml_call1(f, a);});
   }
   function symbol$0(f, a){return caml_call3(Let_syntax[4], 0, a, f);}
   var
    Let_syntax$0 = [0, read, Let_syntax, symbol_map, symbol, symbol$0],
    _a_ = [0, [0, cst_src_proc_ml, 34, 818, 822]],
    _b_ = [0, cst_src_proc_ml, 51, 1330, 1356],
    _c_ = [0, [0, cst_src_proc_ml, 62, 1677, 1679]],
    _d_ = [0, [0, cst_src_proc_ml, 61, 1611, 1613]],
    _e_ = [0, [0, cst_src_proc_ml, 90, 2643, 2645]],
    _f_ = [0, "action"],
    cst_An_action_sent_to_an_of_mo =
      "An action sent to an [of_module1] has been dropped because its input was not present. This happens when the [of_module1] is inactive when it receives a message.",
    cst_src_proc_ml_82_14 = "src/proc.ml:82:14",
    _g_ = [0, [0, cst_src_proc_ml, 71, 1971, 1973]],
    _h_ = [0, [0, cst_src_proc_ml, 70, 1937, 1939]],
    _i_ = [0, [0, cst_src_proc_ml, 138, 3913, 3915]],
    _j_ = [0, [0, cst_src_proc_ml, 130, 3734, 3736]],
    _k_ = [0, [0, cst_src_proc_ml, 152, 4309, 4311]],
    _l_ = [0, [0, cst_src_proc_ml, 145, 4148, 4150]],
    _m_ = [0, [0, cst_src_proc_ml, 209, 6129, 6133]],
    _n_ = [0, [0, cst_src_proc_ml, 206, 6015, 6021]],
    _o_ = [0, [0, cst_src_proc_ml, 205, 5994, 5998]],
    _p_ = [0, [0, cst_src_proc_ml, 192, 5504, 5508]],
    _q_ = [0, [0, cst_src_proc_ml, 192, 5504, 5508]],
    _r_ = [0, [0, cst_src_proc_ml, 192, 5504, 5508]],
    _s_ = [0, [0, cst_src_proc_ml, 192, 5504, 5508]],
    _t_ = [0, [0, cst_src_proc_ml, 192, 5504, 5508]];
   function pure(f, i){
    return caml_call1(read, caml_call2(Bonsai_Value[3], i, f));
   }
   function const$0(x){
    return caml_call1(read, caml_call1(Bonsai_Value[2], x));
   }
   function with_model_resetter$0(inside){
    return caml_call1
            (with_model_resetter,
             function(reset){
              return caml_call3
                      (Let_syntax$0[2][1],
                       _a_,
                       inside,
                       function(r){
                        var _h5_ = caml_call2(Bonsai_Value[4], r, reset);
                        return caml_call1(Let_syntax$0[1], _h5_);
                       });
             });
   }
   function enum$0(E, match, with$0){
    var
     all = E[2],
     include = caml_call1(Core_Comparator[5], [0, E[1], E[5]]),
     comparator = include[1],
     forward_index = caml_call1(Core_List[30], all),
     _h3_ = caml_call2(Core_List[41], all, function(i, k){return [0, k, i];}),
     reverse_index = caml_call2(Core_Map[8], [0, comparator], _h3_),
     _h4_ = caml_call1(Core_Map[43], reverse_index),
     branches = forward_index.length - 1;
    function with$1(i){
     return caml_call1
             (with$0, runtime.caml_check_bound(forward_index, i)[1 + i]);
    }
    var match$0 = caml_call2(Let_syntax$0[3], match, _h4_);
    return caml_call4(Let_syntax$0[2][2], _b_, match$0, branches, with$1);
   }
   function scope_model(M, v, computation){
    var
     v$0 =
       caml_call2
        (Bonsai_Value[3],
         v,
         function(k){return caml_call3(Core_Map[5], [0, M[3]], k, 0);}),
     _h1_ =
       caml_call3(assoc, M, v$0, function(_h2_, param){return computation;});
    return caml_call3
            (Let_syntax$0[2][1],
             _d_,
             _h1_,
             function(map){
              return caml_call3
                      (Let_syntax$0[2][6],
                       _c_,
                       map,
                       function(map){
                        var r = caml_call1(Core_Map[89], map)[2];
                        return r;
                       });
             });
   }
   function of_module1(component, default_model, input){
    var _hV_ = caml_call1(Let_syntax$0[1], input);
    return caml_call3
            (Let_syntax$0[2][1],
             _h_,
             _hV_,
             function(input){
              var
               _hW_ =
                 caml_call6
                  (state_machine1,
                   component[3],
                   component[4],
                   0,
                   default_model,
                   function(inject, schedule_event, input, model, action){
                    if(input){
                     var input$0 = input[1];
                     return caml_call5
                             (component[6],
                              inject,
                              schedule_event,
                              input$0,
                              model,
                              action);
                    }
                    var
                     _hY_ =
                       [0,
                        [1, [0, _f_, [0, caml_call1(component[4][1], action), 0]]],
                        0],
                     _hZ_ =
                       [0,
                        caml_call1
                         (Sexplib0_Sexp_conv[7], cst_An_action_sent_to_an_of_mo),
                        _hY_],
                     _h0_ =
                       [1,
                        [0,
                         caml_call1(Sexplib0_Sexp_conv[7], cst_src_proc_ml_82_14),
                         _hZ_]];
                    caml_call2(Core[251], 0, _h0_);
                    return model;
                   },
                   input);
              return caml_call3
                      (Let_syntax$0[2][1],
                       _g_,
                       _hW_,
                       function(model_and_inject){
                        var
                         _hX_ =
                           caml_call2(Let_syntax$0[2][5], model_and_inject, input);
                        return caml_call3
                                (Let_syntax$0[2][6],
                                 _e_,
                                 _hX_,
                                 function(param){
                                  var
                                   input = param[2],
                                   match = param[1],
                                   inject = match[2],
                                   model = match[1];
                                  return caml_call3(component[7], inject, input, model);
                                 });
                       });
             });
   }
   function of_module2(c, default_model, i1, i2){
    return of_module1(c, default_model, caml_call2(Bonsai_Value[4], i1, i2));
   }
   function race_dynamic_model(M, A, model, apply_action, input){
    if(657750365 <= model[1])
     var
      m = model[2],
      model_creator =
        caml_call2
         (Bonsai_Value[3],
          m,
          function(m, param){
           if(! param) return m;
           var a = param[1];
           return a;
          });
    else
     var f = model[2], model_creator = f;
    function t_of_sexp(x_010){return caml_call2(Core[467], M[1], x_010);}
    function sexp_of_t(x_011){return caml_call2(Core[466], M[2], x_011);}
    function equal(a_012, b_013){
     return caml_call3
             (Core[463],
              function(a_014, b_015){return caml_call2(M[3], a_014, b_015);},
              a_012,
              b_013);
    }
    var M_actual = [0, t_of_sexp, sexp_of_t, equal];
    function apply_action$0
    (inject, schedule_event, computation_status, model, action){
     if(! computation_status)
      return [0,
              caml_call5
               (apply_action, inject, schedule_event, 0, model, action)];
     var
      match = computation_status[1],
      model_creator = match[2],
      input = match[1],
      model$0 = [0, caml_call1(model_creator, model)];
     return [0,
             caml_call5
              (apply_action,
               inject,
               schedule_event,
               [0, input],
               model$0,
               action)];
    }
    var
     _hT_ =
       caml_call6
        (state_machine1,
         M_actual,
         A,
         0,
         0,
         apply_action$0,
         caml_call2(Bonsai_Value[4], input, model_creator));
    return caml_call3
            (Let_syntax$0[2][1],
             _j_,
             _hT_,
             function(model_and_inject){
              var
               _hU_ =
                 caml_call2
                  (Let_syntax$0[2][5], model_and_inject, model_creator);
              return caml_call3
                      (Let_syntax$0[2][6],
                       _i_,
                       _hU_,
                       function(param){
                        var
                         model_creator = param[2],
                         match = param[1],
                         inject = match[2],
                         model = match[1];
                        return [0, caml_call1(model_creator, model), inject];
                       });
             });
   }
   function of_module0(component, default_model){
    var
     _hO_ = component[6],
     _hP_ =
       caml_call5
        (state_machine0,
         0,
         component[3],
         component[4],
         default_model,
         function(_hQ_){
          var _hR_ = caml_call1(_hO_, _hQ_);
          return function(_hS_){return caml_call2(_hR_, _hS_, 0);};
         });
    return caml_call3
            (Let_syntax$0[2][1],
             _l_,
             _hP_,
             function(model_and_inject){
              return caml_call3
                      (Let_syntax$0[2][6],
                       _k_,
                       model_and_inject,
                       function(param){
                        var inject = param[2], model = param[1];
                        return caml_call3(component[7], inject, 0, model);
                       });
             });
   }
   function actor1(M, A, reset, default_model, recv, input){
    function sexp_of_t(cb){
     var _hN_ = caml_call1(Ui_effect[21][1][2], cb);
     return caml_call1(A[1], _hN_);
    }
    var
     Action_with_callback = [0, sexp_of_t],
     reset$0 =
       caml_call2
        (Core_Option[30],
         reset,
         function(f, inject, schedule_event, model){
          function inject$0(action){
           return caml_call2(Ui_effect[21][2], action, inject);
          }
          return caml_call3(f, inject$0, schedule_event, model);
         }),
     _hG_ =
       caml_call6
        (state_machine1,
         M,
         Action_with_callback,
         reset$0,
         default_model,
         function(param, schedule_event, input, model, callback){
          var
           action = caml_call1(Ui_effect[21][1][2], callback),
           match = caml_call4(recv, schedule_event, input, model, action),
           response = match[2],
           new_model = match[1];
          caml_call1
           (schedule_event,
            caml_call2(Ui_effect[21][1][3], callback, response));
          return new_model;
         },
         input);
    return caml_call3
            (Let_syntax$0[2][1],
             _t_,
             _hG_,
             function(pattern_syntax_022){
              var
               _hH_ =
                 caml_call3
                  (Let_syntax$0[2][4],
                   _r_,
                   pattern_syntax_022,
                   function(param){
                    var pattern_syntax_024 = param[1];
                    return pattern_syntax_024;
                   }),
               _hI_ = caml_call1(Let_syntax$0[2][3], _hH_);
              return caml_call3
                      (Let_syntax$0[2][1],
                       _s_,
                       _hI_,
                       function(model){
                        var
                         _hJ_ =
                           caml_call3
                            (Let_syntax$0[2][4],
                             _p_,
                             pattern_syntax_022,
                             function(param){
                              var pattern_syntax_023 = param[2];
                              return pattern_syntax_023;
                             }),
                         _hK_ = caml_call1(Let_syntax$0[2][3], _hJ_);
                        return caml_call3
                                (Let_syntax$0[2][1],
                                 _q_,
                                 _hK_,
                                 function(inject){
                                  var
                                   _hL_ =
                                     caml_call3
                                      (Let_syntax$0[2][6],
                                       _n_,
                                       inject,
                                       function(inject, action){
                                        return caml_call2(Ui_effect[21][2], action, inject);
                                       });
                                  return caml_call3
                                          (Let_syntax$0[2][1],
                                           _o_,
                                           _hL_,
                                           function(inject){
                                            var _hM_ = caml_call2(Let_syntax$0[2][5], model, inject);
                                            return caml_call3
                                                    (Let_syntax$0[2][6],
                                                     _m_,
                                                     _hM_,
                                                     function(param){
                                                      var inject = param[2], model = param[1];
                                                      return [0, model, inject];
                                                     });
                                           });
                                 });
                       });
             });
   }
   function actor0(reset, model, action, default_model, recv){
    function recv$0(schedule_event, param){
     return caml_call1(recv, schedule_event);
    }
    return actor1
            (model,
             action,
             reset,
             default_model,
             recv$0,
             caml_call1(Bonsai_Value[2], 0));
   }
   function state(reset, M, default_model){
    var
     reset$0 =
       caml_call2
        (Core_Option[30],
         reset,
         function(reset, _hF_, param, m){return caml_call1(reset, m);});
    return caml_call5
            (state_machine0,
             reset$0,
             M,
             [0, M[2]],
             default_model,
             function(_hE_, param, old_model, new_model){return new_model;});
   }
   var
    Toggle = [0],
    _u_ = [0, cst_Set],
    _v_ = [0, "Toggle"],
    _w_ = [0, [0, cst_src_proc_ml, 254, 7269, 7271]],
    _x_ = [0, [0, cst_src_proc_ml, 245, 7022, 7024]],
    _y_ = [0, [0, cst_src_proc_ml, 261, 7553, 7555]],
    _z_ = [0, [0, cst_src_proc_ml, 260, 7482, 7484]],
    _A_ = [0, [0, cst_src_proc_ml, 260, 7482, 7484]],
    _B_ = [0, [0, cst_src_proc_ml, 260, 7482, 7484]],
    _C_ = [0, [0, cst_src_proc_ml, 260, 7482, 7484]],
    _D_ = [0, [0, cst_src_proc_ml, 260, 7482, 7484]],
    _E_ = [0, [0, cst_src_proc_ml, 277, 7864, 7866]];
   function toggle(default_model){
    function sexp_of_t(param){
     if(! param) return _v_;
     var arg0_039 = param[1], res0_040 = caml_call1(Core[309], arg0_039);
     return [1, [0, _u_, [0, res0_040, 0]]];
    }
    var
     _hB_ =
       caml_call5
        (state_machine0,
         0,
         [0, Core_Bool[17], Core_Bool[18], Core_Bool[28]],
         [0, sexp_of_t],
         default_model,
         function(_hD_, _hC_, state, param){
          if(! param) return 1 - state;
          var state$0 = param[1];
          return state$0;
         });
    return caml_call3
            (Let_syntax$0[2][1],
             _x_,
             _hB_,
             function(state_and_inject){
              return caml_call3
                      (Let_syntax$0[2][6],
                       _w_,
                       state_and_inject,
                       function(state_and_inject){
                        var
                         inject = state_and_inject[2],
                         state = state_and_inject[1];
                        return [0,
                                state,
                                function(state){return caml_call1(inject, [0, state]);},
                                caml_call1(inject, 0)];
                       });
             });
   }
   function toggle$0(default_model){
    var _hv_ = toggle(default_model);
    return caml_call3
            (Let_syntax$0[2][1],
             _D_,
             _hv_,
             function(pattern_syntax_043){
              var
               _hw_ =
                 caml_call3
                  (Let_syntax$0[2][4],
                   _B_,
                   pattern_syntax_043,
                   function(param){
                    var pattern_syntax_045 = param[3];
                    return pattern_syntax_045;
                   }),
               _hx_ = caml_call1(Let_syntax$0[2][3], _hw_);
              return caml_call3
                      (Let_syntax$0[2][1],
                       _C_,
                       _hx_,
                       function(toggle){
                        var
                         _hy_ =
                           caml_call3
                            (Let_syntax$0[2][4],
                             _z_,
                             pattern_syntax_043,
                             function(param){
                              var pattern_syntax_044 = param[1];
                              return pattern_syntax_044;
                             }),
                         _hz_ = caml_call1(Let_syntax$0[2][3], _hy_);
                        return caml_call3
                                (Let_syntax$0[2][1],
                                 _A_,
                                 _hz_,
                                 function(state){
                                  var _hA_ = caml_call2(Let_syntax$0[2][5], state, toggle);
                                  return caml_call3
                                          (Let_syntax$0[2][6],
                                           _y_,
                                           _hA_,
                                           function(param){
                                            var toggle = param[2], state = param[1];
                                            return [0, state, toggle];
                                           });
                                 });
                       });
             });
   }
   function state_opt(reset, default_model, M){
    function equal(a_049, b_050){
     return caml_call3
             (Core[463],
              function(a_051, b_052){return caml_call2(M[3], a_051, b_052);},
              a_049,
              b_050);
    }
    function t_of_sexp(x_054){return caml_call2(Core[467], M[1], x_054);}
    function sexp_of_t(x_055){return caml_call2(Core[466], M[2], x_055);}
    return state(reset, [0, t_of_sexp, sexp_of_t, equal], default_model);
   }
   var
    path_id =
      caml_call3
       (Let_syntax$0[2][1],
        [0, [0, cst_src_proc_ml, 276, 7839, 7841]],
        path,
        function(path){
         return caml_call3
                 (Let_syntax$0[2][6],
                  _E_,
                  path,
                  function(path){return caml_call1(Bonsai_Path[27], path);});
        }),
    _F_ = [0, [0, cst_src_proc_ml, 290, 8110, 8112]],
    _G_ = [0, [0, cst_src_proc_ml, 282, 7947, 7949]],
    _H_ = [0, [0, cst_src_proc_ml, 282, 7947, 7949]],
    _I_ = [0, [0, cst_src_proc_ml, 282, 7947, 7949]];
   function yoink(a){
    var
     _hq_ =
       actor1
        ([0, Core_Unit[15], Core_Unit[16], Core_Unit[26]],
         [0, Core_Unit[16]],
         0,
         0,
         function(_hu_, a, _ht_, param){return [0, 0, a];},
         a);
    return caml_call3
            (Let_syntax$0[2][1],
             _I_,
             _hq_,
             function(pattern_syntax_058){
              var
               _hr_ =
                 caml_call3
                  (Let_syntax$0[2][4],
                   _G_,
                   pattern_syntax_058,
                   function(param){
                    var pattern_syntax_059 = param[2];
                    return pattern_syntax_059;
                   }),
               _hs_ = caml_call1(Let_syntax$0[2][3], _hr_);
              return caml_call3
                      (Let_syntax$0[2][1],
                       _H_,
                       _hs_,
                       function(result){
                        return caml_call3
                                (Let_syntax$0[2][6],
                                 _F_,
                                 result,
                                 function(result){return caml_call1(result, 0);});
                       });
             });
   }
   var
    _J_ = Edge[1],
    _K_ = [0, [0, cst_src_proc_ml, 309, 8592, 8598]],
    _L_ = [0, [0, cst_src_proc_ml, 308, 8576, 8580]],
    _M_ = [0, [0, cst_src_proc_ml, 303, 8421, 8427]],
    _N_ = [0, [0, cst_src_proc_ml, 302, 8400, 8404]],
    _O_ = [0, [0, cst_src_proc_ml, 337, 9558, 9566]],
    _P_ = [0, [0, cst_src_proc_ml, 342, 9757, 9765]],
    _Q_ = [0, cst_src_proc_ml, 335, 6],
    _R_ = [0, [0, cst_src_proc_ml, 335, 9515, 9521]],
    _S_ = [0, [0, cst_src_proc_ml, 335, 9515, 9521]],
    _T_ = [0, cst_src_proc_ml, 335, 6],
    _U_ = [0, cst_src_proc_ml, 336, 9542, 9550],
    _V_ = [0, [0, cst_src_proc_ml, 335, 9515, 9521]],
    _W_ = [0, [0, cst_src_proc_ml, 334, 9494, 9498]],
    _X_ = [0, [0, cst_src_proc_ml, 333, 9439, 9443]],
    _Y_ = [0, [0, cst_src_proc_ml, 333, 9439, 9443]],
    _Z_ = [0, [0, cst_src_proc_ml, 333, 9439, 9443]],
    ___ = [0, [0, cst_src_proc_ml, 333, 9439, 9443]],
    _$_ = [0, [0, cst_src_proc_ml, 333, 9439, 9443]];
   function lifecycle(on_activate, on_deactivate, after_display, param){
    function transpose_join(param){
     if(! param) return caml_call1(Bonsai_Value[2], 0);
     var a = param[1];
     return a;
    }
    var
     let_syntax_062 = transpose_join(on_activate),
     let_syntax_063 = transpose_join(on_deactivate),
     let_syntax_064 = transpose_join(after_display),
     _hm_ = caml_call2(Let_syntax$0[2][5], let_syntax_063, let_syntax_064),
     _hn_ = caml_call2(Let_syntax$0[2][5], let_syntax_062, _hm_),
     _ho_ =
       caml_call3
        (Let_syntax$0[2][6],
         _M_,
         _hn_,
         function(param){
          var match = param[2], c = match[2], b = match[1], a = param[1];
          return [0, a, b, c];
         });
    return caml_call3
            (Let_syntax$0[2][1],
             _N_,
             _ho_,
             function(triple){
              var
               _hp_ =
                 caml_call3
                  (Let_syntax$0[2][6],
                   _K_,
                   triple,
                   function(param){
                    var on_activate = param[1];
                    if(! on_activate && ! param[2] && ! param[3]) return 0;
                    var after_display = param[3], on_deactivate = param[2];
                    return [0, [0, on_activate, on_deactivate, after_display]];
                   });
              return caml_call3
                      (Let_syntax$0[2][1],
                       _L_,
                       _hp_,
                       function(t){return caml_call1(_J_, t);});
             });
   }
   function lifecycle$0(on_activate, on_deactivate, after_display, param){
    var
     _hb_ = Core_Option[54],
     _hc_ = Bonsai_Value[3],
     _hd_ =
       caml_call2
        (Core_Option[30],
         after_display,
         function(_hl_){return caml_call2(_hc_, _hl_, _hb_);}),
     _he_ = Core_Option[54],
     _hf_ = Bonsai_Value[3],
     _hg_ =
       caml_call2
        (Core_Option[30],
         on_deactivate,
         function(_hk_){return caml_call2(_hf_, _hk_, _he_);}),
     _hh_ = Core_Option[54],
     _hi_ = Bonsai_Value[3];
    return lifecycle
            (caml_call2
              (Core_Option[30],
               on_activate,
               function(_hj_){return caml_call2(_hi_, _hj_, _hh_);}),
             _hg_,
             _hd_,
             0);
   }
   function after_display(event_opt_value){
    return lifecycle(0, 0, [0, event_opt_value], 0);
   }
   function after_display$0(event_value){
    var
     event_value$0 = caml_call2(Bonsai_Value[3], event_value, Core_Option[54]);
    return lifecycle(0, 0, [0, event_value$0], 0);
   }
   function on_change(M, input, callback){
    var _gT_ = state_opt(0, 0, M);
    return caml_call3
            (Let_syntax$0[2][1],
             _$_,
             _gT_,
             function(pattern_syntax_067){
              var
               _gU_ =
                 caml_call3
                  (Let_syntax$0[2][4],
                   _Z_,
                   pattern_syntax_067,
                   function(param){
                    var pattern_syntax_069 = param[1];
                    return pattern_syntax_069;
                   }),
               _gV_ = caml_call1(Let_syntax$0[2][3], _gU_);
              return caml_call3
                      (Let_syntax$0[2][1],
                       ___,
                       _gV_,
                       function(state){
                        var
                         _gW_ =
                           caml_call3
                            (Let_syntax$0[2][4],
                             _X_,
                             pattern_syntax_067,
                             function(param){
                              var pattern_syntax_068 = param[2];
                              return pattern_syntax_068;
                             }),
                         _gX_ = caml_call1(Let_syntax$0[2][3], _gW_);
                        return caml_call3
                                (Let_syntax$0[2][1],
                                 _Y_,
                                 _gX_,
                                 function(set_state){
                                  var
                                   _gY_ = caml_call1(Let_syntax$0[2][3], state),
                                   _gZ_ =
                                     caml_call3
                                      (Let_syntax$0[2][1],
                                       _V_,
                                       _gY_,
                                       function(pattern_syntax_071){
                                        var
                                         _g0_ =
                                           caml_call3
                                            (Let_syntax$0[2][4],
                                             0,
                                             pattern_syntax_071,
                                             function(param){return param ? 1 : 0;});
                                        return caml_call4
                                                (Let_syntax$0[2][2],
                                                 _U_,
                                                 _g0_,
                                                 2,
                                                 function(param){
                                                  if(0 === param){
                                                   var
                                                    _g1_ = caml_call2(Let_syntax$0[2][5], input, callback),
                                                    _g2_ = caml_call2(Let_syntax$0[2][5], set_state, _g1_);
                                                   return caml_call3
                                                           (Let_syntax$0[2][6],
                                                            _O_,
                                                            _g2_,
                                                            function(param){
                                                             var
                                                              match = param[2],
                                                              callback = match[2],
                                                              input = match[1],
                                                              set_state = param[1],
                                                              _g$_ = [0, caml_call2(callback, 0, input), 0],
                                                              _ha_ = [0, caml_call1(set_state, [0, input]), _g$_];
                                                             return [0, [0, Ui_effect[2], _ha_]];
                                                            });
                                                  }
                                                  if(1 !== param)
                                                   throw caml_maybe_attach_backtrace
                                                          ([0, Assert_failure, _T_], 1);
                                                  var
                                                   _g3_ =
                                                     caml_call3
                                                      (Let_syntax$0[2][4],
                                                       _R_,
                                                       pattern_syntax_071,
                                                       function(param){
                                                        if(! param)
                                                         throw caml_maybe_attach_backtrace
                                                                ([0, Assert_failure, _Q_], 1);
                                                        var pattern_syntax_072 = param[1];
                                                        return pattern_syntax_072;
                                                       }),
                                                   _g4_ = caml_call1(Let_syntax$0[2][3], _g3_);
                                                  return caml_call3
                                                          (Let_syntax$0[2][1],
                                                           _S_,
                                                           _g4_,
                                                           function(state){
                                                            var
                                                             _g5_ = caml_call2(Let_syntax$0[2][5], input, callback),
                                                             _g6_ = caml_call2(Let_syntax$0[2][5], set_state, _g5_),
                                                             _g7_ = caml_call2(Let_syntax$0[2][5], state, _g6_);
                                                            return caml_call3
                                                                    (Let_syntax$0[2][6],
                                                                     _P_,
                                                                     _g7_,
                                                                     function(param){
                                                                      var
                                                                       _g8_ = param[2],
                                                                       match = _g8_[2],
                                                                       callback = match[2],
                                                                       input = match[1],
                                                                       set_state = _g8_[1],
                                                                       state = param[1];
                                                                      if(state !== input && ! caml_call2(M[3], state, input))
                                                                       return [0,
                                                                               caml_call1
                                                                                (Ui_effect[15],
                                                                                 [246,
                                                                                  function(param){
                                                                                   var
                                                                                    _g9_ = [0, caml_call2(callback, [0, state], input), 0],
                                                                                    _g__ = [0, caml_call1(set_state, [0, input]), _g9_];
                                                                                   return [0, Ui_effect[2], _g__];
                                                                                  }])];
                                                                      return 0;
                                                                     });
                                                           });
                                                 });
                                       });
                                  return caml_call3
                                          (Let_syntax$0[2][1],
                                           _W_,
                                           _gZ_,
                                           function(update){return after_display(update);});
                                 });
                       });
             });
   }
   function on_change$0(model, input, callback){
    var
     callback$0 =
       caml_call2
        (Bonsai_Value[3],
         callback,
         function(callback, prev, value){return caml_call1(callback, value);});
    return on_change(model, input, callback$0);
   }
   function initial(a){return [0, a];}
   var
    Starting = [0, 0, initial],
    cst_last_result = cst_last_result$0,
    cst_last_seqnum = cst_last_seqnum$0,
    _aa_ = [0, cst_last_result$0],
    _ab_ = [0, cst_last_seqnum$0],
    _ac_ = [0, cst_Set],
    _ad_ = [0, [0, cst_src_proc_ml, 417, 11957, 11963]],
    _ae_ = [0, [0, cst_src_proc_ml, 410, 11675, 11683]],
    _af_ = [0, [0, cst_src_proc_ml, 409, 11650, 11656]],
    _ag_ = [0, [0, cst_src_proc_ml, 397, 11190, 11196]],
    _ah_ = [0, [0, cst_src_proc_ml, 397, 11190, 11196]],
    _ai_ = [0, [0, cst_src_proc_ml, 397, 11190, 11196]],
    _aj_ = [0, [0, cst_src_proc_ml, 397, 11190, 11196]],
    _ak_ = [0, [0, cst_src_proc_ml, 397, 11190, 11196]],
    _al_ = [0, [0, cst_src_proc_ml, 378, 10706, 10712]],
    _am_ = [0, [0, cst_src_proc_ml, 378, 10706, 10712]],
    _an_ = [0, [0, cst_src_proc_ml, 378, 10706, 10712]],
    _ao_ = [0, [0, cst_src_proc_ml, 470, 13644, 13652]],
    _ap_ = [0, [0, cst_src_proc_ml, 470, 13644, 13652]],
    _aq_ = [0, [0, cst_src_proc_ml, 470, 13644, 13652]],
    _ar_ = [0, [0, cst_src_proc_ml, 467, 13555, 13565]],
    _as_ = [0, [0, cst_src_proc_ml, 466, 13528, 13536]],
    _at_ = [0, [0, cst_src_proc_ml, 465, 13447, 13455]],
    _au_ = [0, [0, cst_src_proc_ml, 465, 13447, 13455]],
    _av_ = [0, [0, cst_src_proc_ml, 465, 13447, 13455]],
    _aw_ = [0, [0, cst_src_proc_ml, 465, 13447, 13455]],
    _ax_ = [0, [0, cst_src_proc_ml, 465, 13447, 13455]],
    _ay_ = [0, [0, cst_src_proc_ml, 455, 13145, 13155]],
    _az_ = [0, [0, cst_src_proc_ml, 454, 13120, 13128]],
    _aA_ = [0, [0, cst_src_proc_ml, 453, 13077, 13085]];
   function manual_refresh_implementation
   (Result, initial, wrap_result, effect){
    var
     _gA_ =
       actor0
        (0,
         [0, Core_Int[81], Core_Int[82], Core_Int[92]],
         [0, Core_Unit[16]],
         0,
         function(_gS_, i, param){return [0, i + 1 | 0, i];});
    return caml_call3
            (Let_syntax$0[2][1],
             _an_,
             _gA_,
             function(pattern_syntax_082){
              var
               _gB_ =
                 caml_call3
                  (Let_syntax$0[2][4],
                   _al_,
                   pattern_syntax_082,
                   function(param){
                    var pattern_syntax_083 = param[2];
                    return pattern_syntax_083;
                   }),
               _gC_ = caml_call1(Let_syntax$0[2][3], _gB_);
              return caml_call3
                      (Let_syntax$0[2][1],
                       _am_,
                       _gC_,
                       function(next_seqnum){
                        function t_of_sexp(x_086){
                         return caml_call6
                                 (Sexplib0_Sexp_conv_record[3],
                                  error_source_085,
                                  [0,
                                   cst_last_seqnum,
                                   1,
                                   Core[364],
                                   [0, cst_last_result, 1, Result[1], 0]],
                                  function(param){
                                   return param !== cst_last_result$0
                                           ? param !== cst_last_seqnum$0 ? -1 : 0
                                           : 1;
                                  },
                                  0,
                                  function(param){
                                   var last_result = param[2][1], last_seqnum = param[1];
                                   return [0, last_seqnum, last_result];
                                  },
                                  x_086);
                        }
                        function sexp_of_t(param){
                         var
                          last_result_090 = param[2],
                          last_seqnum_088 = param[1],
                          arg_091 = caml_call1(Result[2], last_result_090),
                          bnds_087 = [0, [1, [0, _aa_, [0, arg_091, 0]]], 0],
                          arg_089 = caml_call1(Core[363], last_seqnum_088),
                          bnds_087$0 = [0, [1, [0, _ab_, [0, arg_089, 0]]], bnds_087];
                         return [1, bnds_087$0];
                        }
                        function equal(a_092, b_093){
                         if(a_092 === b_093) return 1;
                         var _gR_ = caml_call2(Core[359], a_092[1], b_093[1]);
                         return _gR_
                                 ? caml_call2(Result[3], a_092[2], b_093[2])
                                 : _gR_;
                        }
                        function sexp_of_t$0(param){
                         var
                          arg1_095 = param[2],
                          arg0_094 = param[1],
                          res0_096 = caml_call1(Core[363], arg0_094),
                          res1_097 = caml_call1(Result[2], arg1_095);
                         return [1, [0, _ac_, [0, res0_096, [0, res1_097, 0]]]];
                        }
                        var
                         Action = [0, sexp_of_t$0],
                         _gD_ =
                           caml_call5
                            (state_machine0,
                             0,
                             [0, t_of_sexp, sexp_of_t, equal],
                             Action,
                             [0, -1, initial],
                             function(_gQ_, _gP_, model, param){
                              var res = param[2], seqnum = param[1];
                              return caml_call2(Core[91], seqnum, model[1])
                                      ? model
                                      : [0, seqnum, res];
                             });
                        return caml_call3
                                (Let_syntax$0[2][1],
                                 _ak_,
                                 _gD_,
                                 function(pattern_syntax_098){
                                  var
                                   _gE_ =
                                     caml_call3
                                      (Let_syntax$0[2][4],
                                       _ai_,
                                       pattern_syntax_098,
                                       function(param){
                                        var pattern_syntax_100 = param[1];
                                        return pattern_syntax_100;
                                       }),
                                   _gF_ = caml_call1(Let_syntax$0[2][3], _gE_);
                                  return caml_call3
                                          (Let_syntax$0[2][1],
                                           _aj_,
                                           _gF_,
                                           function(state){
                                            var
                                             _gG_ =
                                               caml_call3
                                                (Let_syntax$0[2][4],
                                                 _ag_,
                                                 pattern_syntax_098,
                                                 function(param){
                                                  var pattern_syntax_099 = param[2];
                                                  return pattern_syntax_099;
                                                 }),
                                             _gH_ = caml_call1(Let_syntax$0[2][3], _gG_);
                                            return caml_call3
                                                    (Let_syntax$0[2][1],
                                                     _ah_,
                                                     _gH_,
                                                     function(inject_change){
                                                      var
                                                       _gI_ =
                                                         caml_call2(Let_syntax$0[2][5], next_seqnum, inject_change),
                                                       _gJ_ = caml_call2(Let_syntax$0[2][5], effect, _gI_),
                                                       _gK_ =
                                                         caml_call3
                                                          (Let_syntax$0[2][6],
                                                           _ae_,
                                                           _gJ_,
                                                           function(param){
                                                            var
                                                             match = param[2],
                                                             inject_change = match[2],
                                                             next_seqnum = match[1],
                                                             effect = param[1],
                                                             _gO_ = caml_call1(next_seqnum, 0);
                                                            return caml_call2
                                                                    (Ui_effect[13][4][2],
                                                                     _gO_,
                                                                     function(seqnum){
                                                                      return caml_call2
                                                                              (Ui_effect[13][4][2],
                                                                               effect,
                                                                               function(result){
                                                                                return caml_call1
                                                                                        (inject_change,
                                                                                         [0, seqnum, caml_call1(wrap_result, result)]);
                                                                               });
                                                                     });
                                                           });
                                                      return caml_call3
                                                              (Let_syntax$0[2][1],
                                                               _af_,
                                                               _gK_,
                                                               function(callback){
                                                                var
                                                                 _gL_ =
                                                                   caml_call2
                                                                    (Let_syntax$0[2][7],
                                                                     state,
                                                                     function(_gN_, param){
                                                                      var
                                                                       new_for_cutoff_110 = param[2],
                                                                       old_for_cutoff_111 = _gN_[2];
                                                                      return old_for_cutoff_111 === new_for_cutoff_110 ? 1 : 0;
                                                                     }),
                                                                 _gM_ = caml_call2(Let_syntax$0[2][5], _gL_, callback);
                                                                return caml_call3
                                                                        (Let_syntax$0[2][6],
                                                                         _ad_,
                                                                         _gM_,
                                                                         function(param){
                                                                          var callback = param[2], last_result = param[1][2];
                                                                          return [0, last_result, callback];
                                                                         });
                                                               });
                                                     });
                                           });
                                 });
                       });
             });
   }
   function manual_refresh(Result, kind, effect){
    if(kind){
     var initial = kind[1];
     return manual_refresh_implementation
             (Result, initial, function(_gz_){return _gz_;}, effect);
    }
    function t_of_sexp(x_114){return caml_call2(Core[467], Result[1], x_114);}
    function sexp_of_t(x_115){return caml_call2(Core[466], Result[2], x_115);}
    function equal(a_116, b_117){
     return caml_call3
             (Core[463],
              function(a_118, b_119){
               return caml_call2(Result[3], a_118, b_119);
              },
              a_116,
              b_117);
    }
    return manual_refresh_implementation
            ([0, t_of_sexp, sexp_of_t, equal], 0, Core_Option[54], effect);
   }
   function effect_on_change(Input, Result, kind, input, effect){
    var _gm_ = yoink(input);
    return caml_call3
            (Let_syntax$0[2][1],
             _aA_,
             _gm_,
             function(get_input){
              var
               _gn_ = caml_call2(Let_syntax$0[2][5], get_input, effect),
               _go_ =
                 caml_call3
                  (Let_syntax$0[2][6],
                   _ay_,
                   _gn_,
                   function(param){
                    var
                     effect = param[2],
                     get_input = param[1],
                     _gy_ =
                       caml_call2
                        (Ui_effect[13][4][2],
                         get_input,
                         function(param){
                          if(! param) return Ui_effect[14];
                          var input = param[1];
                          return caml_call1(Ui_effect[7], input);
                         });
                    return caml_call2
                            (Ui_effect[13][4][2],
                             _gy_,
                             function(input){return caml_call1(effect, input);});
                   });
              return caml_call3
                      (Let_syntax$0[2][1],
                       _az_,
                       _go_,
                       function(effect){
                        var _gp_ = manual_refresh(Result, kind, effect);
                        return caml_call3
                                (Let_syntax$0[2][1],
                                 _ax_,
                                 _gp_,
                                 function(pattern_syntax_126){
                                  var
                                   _gq_ =
                                     caml_call3
                                      (Let_syntax$0[2][4],
                                       _av_,
                                       pattern_syntax_126,
                                       function(param){
                                        var pattern_syntax_128 = param[1];
                                        return pattern_syntax_128;
                                       }),
                                   _gr_ = caml_call1(Let_syntax$0[2][3], _gq_);
                                  return caml_call3
                                          (Let_syntax$0[2][1],
                                           _aw_,
                                           _gr_,
                                           function(result){
                                            var
                                             _gs_ =
                                               caml_call3
                                                (Let_syntax$0[2][4],
                                                 _at_,
                                                 pattern_syntax_126,
                                                 function(param){
                                                  var pattern_syntax_127 = param[2];
                                                  return pattern_syntax_127;
                                                 }),
                                             _gt_ = caml_call1(Let_syntax$0[2][3], _gs_);
                                            return caml_call3
                                                    (Let_syntax$0[2][1],
                                                     _au_,
                                                     _gt_,
                                                     function(refresh){
                                                      var
                                                       _gu_ =
                                                         caml_call3
                                                          (Let_syntax$0[2][6],
                                                           _ar_,
                                                           refresh,
                                                           function(refresh, param){return refresh;});
                                                      return caml_call3
                                                              (Let_syntax$0[2][1],
                                                               _as_,
                                                               _gu_,
                                                               function(callback){
                                                                var _gv_ = on_change$0(Input, input, callback);
                                                                return caml_call3
                                                                        (Let_syntax$0[2][1],
                                                                         _aq_,
                                                                         _gv_,
                                                                         function(pattern_syntax_131){
                                                                          var
                                                                           _gw_ =
                                                                             caml_call3
                                                                              (Let_syntax$0[2][4],
                                                                               _ao_,
                                                                               pattern_syntax_131,
                                                                               function(param){return 0;}),
                                                                           _gx_ = caml_call1(Let_syntax$0[2][3], _gw_);
                                                                          return caml_call3
                                                                                  (Let_syntax$0[2][1],
                                                                                   _ap_,
                                                                                   _gx_,
                                                                                   function(param){return caml_call1(Let_syntax$0[1], result);});
                                                                         });
                                                               });
                                                     });
                                           });
                                 });
                       });
             });
   }
   var
    Poll =
      [0,
       Starting,
       manual_refresh_implementation,
       manual_refresh,
       effect_on_change],
    Edge$0 =
      [0,
       lifecycle,
       lifecycle$0,
       after_display,
       after_display$0,
       on_change,
       on_change$0,
       Poll],
    _aB_ = [0, cst_Finished],
    _aC_ = [0, cst_Aborted];
   function t_of_sexp(of_a_132, sexp_137){
    a:
    {
     if(0 === sexp_137[0]){
      var _gj_ = sexp_137[1];
      b:
      if(_gj_ !== cst_Aborted){
       if(_gj_ !== cst_Finished){
        if(_gj_ === cst_aborted) break b;
        if(_gj_ !== cst_finished) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_135, sexp_137);
      }
      return 0;
     }
     var _gk_ = sexp_137[1];
     if(! _gk_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_135, sexp_137);
     var _gl_ = _gk_[1];
     if(0 !== _gl_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_135, sexp_137);
     var tag_138 = _gl_[1];
     b:
     if(tag_138 !== cst_Aborted){
      if(tag_138 !== cst_Finished){
       if(tag_138 === cst_aborted) break b;
       if(tag_138 !== cst_finished) break a;
      }
      var sexp_args_139 = _gk_[2];
      if(sexp_args_139 && ! sexp_args_139[2]){
       var
        arg0_140 = sexp_args_139[1],
        res0_141 = caml_call1(of_a_132, arg0_140);
       return [0, res0_141];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_135,
               tag_138,
               sexp_137);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_135, sexp_137);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_135, sexp_137);
   }
   function sexp_of_t(of_a_143, param){
    if(! param) return _aC_;
    var arg0_144 = param[1], res0_145 = caml_call1(of_a_143, arg0_144);
    return [1, [0, _aB_, [0, res0_145, 0]]];
   }
   function equal(cmp_a, a_147, b_148){
    if(a_147 === b_148) return 1;
    if(! a_147) return b_148 ? 0 : 1;
    if(! b_148) return 0;
    var b_150 = b_148[1], a_149 = a_147[1];
    return caml_call2(cmp_a, a_149, b_150);
   }
   var
    request_aborted_error = caml_call1(Core_Error[12], "request was aborted"),
    _aD_ = [0, "for"];
   function collapse_to_or_error(tag_s){
    function maybe_tag_error(error){
     if(! tag_s) return error;
     var _gh_ = tag_s[1], _gi_ = runtime.caml_obj_tag(_gh_);
     a:
     if(250 === _gi_)
      var tag = _gh_[1];
     else{
      if(246 !== _gi_ && 244 !== _gi_){var tag = _gh_; break a;}
      var tag = caml_call1(CamlinternalLazy[2], _gh_);
     }
     return caml_call2(Core_Error[21], error, tag);
    }
    return function(param){
     if(! param) return [1, maybe_tag_error(request_aborted_error)];
     var match = param[1];
     if(0 === match[0]){var v = match[1]; return [0, v];}
     var e = match[1];
     return [1, maybe_tag_error(e)];};
   }
   function collapse_fun_to_or_error(sexp_of_input, f, a){
    if(sexp_of_input)
     var
      sexp_of_input$0 = sexp_of_input[1],
      tag_s =
        [0,
         [246,
          function(param){
           return [1, [0, _aD_, [0, caml_call1(sexp_of_input$0, a), 0]]];
          }]];
    else
     var tag_s = 0;
    var
     _ge_ = collapse_to_or_error(tag_s),
     _gf_ =
       caml_call1
        (Ui_effect[15], [246, function(_gg_){return caml_call1(f, a);}]);
    return caml_call2(Ui_effect[8], _gf_, _ge_);
   }
   var
    Poll_result =
      [0,
       t_of_sexp,
       sexp_of_t,
       equal,
       request_aborted_error,
       collapse_to_or_error,
       collapse_fun_to_or_error],
    _aE_ = [0, cst_src_proc_ml, 528, 24],
    _aF_ = [0, [0, cst_src_proc_ml, 620, 19508, 19512]],
    _aG_ = [0, [0, cst_src_proc_ml, 619, 19457, 19461]],
    _aH_ = [0, [0, cst_src_proc_ml, 619, 19457, 19461]],
    _aI_ = [0, [0, cst_src_proc_ml, 619, 19457, 19461]],
    _aJ_ = [0, [0, cst_src_proc_ml, 616, 19395, 19401]],
    _aK_ = [0, [0, cst_src_proc_ml, 615, 19369, 19373]],
    _aL_ = [0, [0, cst_src_proc_ml, 532, 15259, 15263]],
    _aM_ = [0, [0, cst_src_proc_ml, 532, 15259, 15263]],
    _aN_ = [0, [0, cst_src_proc_ml, 532, 15259, 15263]],
    _aO_ = [0, [0, cst_src_proc_ml, 532, 15259, 15263]],
    cst_BUG_finished_effect_even_t =
      "BUG:  finished effect even though not running",
    _aP_ = [0, "here"],
    _aQ_ = [0, cst_src_proc_ml, 610, 19211, 19243],
    _aR_ = [0, 1, 0],
    _aS_ = [0, cst_src_proc_ml, 607, 19044, 19076],
    _aT_ = [0, cst_src_proc_ml, 604, 18890, 18922],
    _aU_ = [0, 0, 0],
    _aV_ = [0, 1, 0],
    _aW_ = [0, 0, 0],
    _aX_ = [0, 1, 0],
    _aY_ = [0, 0, 0],
    _aZ_ = [0, [0, cst_src_proc_ml, 532, 15259, 15263]];
   function poll(effect){
    var
     sexp_of_t = Core[148],
     Action = [0, sexp_of_t],
     sexp_of_t$0 = Core[148];
    function t_of_sexp(param){
     throw caml_maybe_attach_backtrace([0, Assert_failure, _aE_], 1);
    }
    function equal(_gd_, _gc_){return _gd_ === _gc_ ? 1 : 0;}
    var
     _fZ_ =
       caml_call6
        (state_machine1,
         [0, t_of_sexp, sexp_of_t$0, equal],
         Action,
         [0, function(_gb_, param, model){return model;}],
         _aY_,
         function(inject, schedule_event, effect, param, action){
          var next_up = param[2], running = param[1];
          function run_effect(effect, callback){
           var
            _f$_ =
              caml_call1(effect, caml_call1(Ui_effect[21][1][2], callback));
           return caml_call1
                   (schedule_event,
                    caml_call2
                     (Ui_effect[13][4][2],
                      _f$_,
                      function(response){
                       var
                        _ga_ =
                          caml_call2(Ui_effect[21][1][3], callback, [0, response]);
                       return caml_call2
                               (Ui_effect[13][4][2],
                                _ga_,
                                function(param){return caml_call1(inject, 1);});
                      }));
          }
          function abort(callback){
           return caml_call1
                   (schedule_event,
                    caml_call2(Ui_effect[21][1][3], callback, 0));
          }
          function soft_assert_running(here, running){
           var _f8_ = 1 - running;
           if(! _f8_) return _f8_;
           var
            _f9_ =
              [0,
               caml_call1
                (Sexplib0_Sexp_conv[7], cst_BUG_finished_effect_even_t),
               0],
            _f__ =
              [1,
               [0,
                [1,
                 [0,
                  _aP_,
                  [0, caml_call1(Core_Source_code_position[1], here), 0]]],
                _f9_]];
           return caml_call2(Core[251], 0, _f__);
          }
          if(typeof action === "number"){
           if(! action){
            if(! effect) return [0, running, next_up];
            if(running) return [0, 1, next_up];
            if(! next_up) return _aW_;
            var effect$1 = effect[1], next_up$1 = next_up[1];
            run_effect(effect$1, next_up$1);
            return _aV_;
           }
           if(! next_up){soft_assert_running(_aT_, running); return _aU_;}
           var next_up$0 = next_up[1];
           if(effect){
            var effect$0 = effect[1];
            soft_assert_running(_aQ_, running);
            run_effect(effect$0, next_up$0);
            return _aR_;
           }
           soft_assert_running(_aS_, running);
           return [0, 0, [0, next_up$0]];
          }
          var callback = action[1];
          if(running){
           if(! next_up) return [0, 1, [0, callback]];
           var next_up$2 = next_up[1];
           abort(next_up$2);
           return [0, 1, [0, callback]];
          }
          if(! next_up){
           if(! effect) return [0, 0, [0, callback]];
           var effect$3 = effect[1];
           run_effect(effect$3, callback);
           return _aX_;
          }
          var next_up$3 = next_up[1];
          if(effect){
           var effect$2 = effect[1];
           run_effect(effect$2, next_up$3);
           return [0, 1, [0, callback]];
          }
          abort(next_up$3);
          return [0, 0, [0, callback]];
         },
         effect);
    return caml_call3
            (Let_syntax$0[2][1],
             _aZ_,
             _fZ_,
             function(pattern_syntax_151){
              var
               _f0_ =
                 caml_call3
                  (Let_syntax$0[2][4],
                   _aN_,
                   pattern_syntax_151,
                   function(param){
                    var pattern_syntax_153 = param[2];
                    return pattern_syntax_153;
                   }),
               _f1_ = caml_call1(Let_syntax$0[2][3], _f0_);
              return caml_call3
                      (Let_syntax$0[2][1],
                       _aO_,
                       _f1_,
                       function(inject){
                        var
                         _f2_ =
                           caml_call3
                            (Let_syntax$0[2][4],
                             _aL_,
                             pattern_syntax_151,
                             function(param){
                              var pattern_syntax_152 = param[1];
                              return pattern_syntax_152;
                             }),
                         _f3_ = caml_call1(Let_syntax$0[2][3], _f2_);
                        return caml_call3
                                (Let_syntax$0[2][1],
                                 _aM_,
                                 _f3_,
                                 function(model){
                                  var
                                   _f4_ =
                                     caml_call3
                                      (Let_syntax$0[2][6],
                                       _aJ_,
                                       inject,
                                       function(inject){return caml_call1(inject, 0);});
                                  return caml_call3
                                          (Let_syntax$0[2][1],
                                           _aK_,
                                           _f4_,
                                           function(on_activate){
                                            var _f5_ = caml_call4(Edge$0[2], [0, on_activate], 0, 0, 0);
                                            return caml_call3
                                                    (Let_syntax$0[2][1],
                                                     _aI_,
                                                     _f5_,
                                                     function(pattern_syntax_158){
                                                      var
                                                       _f6_ =
                                                         caml_call3
                                                          (Let_syntax$0[2][4],
                                                           _aG_,
                                                           pattern_syntax_158,
                                                           function(param){return 0;}),
                                                       _f7_ = caml_call1(Let_syntax$0[2][3], _f6_);
                                                      return caml_call3
                                                              (Let_syntax$0[2][1],
                                                               _aH_,
                                                               _f7_,
                                                               function(param){
                                                                return caml_call3
                                                                        (Let_syntax$0[2][6],
                                                                         _aF_,
                                                                         inject,
                                                                         function(inject, request){
                                                                          return caml_call2
                                                                                  (Ui_effect[21][2],
                                                                                   request,
                                                                                   function(callback){
                                                                                    return caml_call1(inject, [0, callback]);
                                                                                   });
                                                                         });
                                                               });
                                                     });
                                           });
                                 });
                       });
             });
   }
   var
    Effect_throttling = [0, Poll_result, poll],
    _a0_ = Bonsai_Proc_min[4],
    value_cutoff = _a0_[1],
    compute_with_clock = _a0_[2],
    of_module = _a0_[3],
    compute = Bonsai_Incr0[1],
    with_clock = Bonsai_Incr0[2],
    to_value = Bonsai_Incr0[3],
    Incr =
      [0,
       value_cutoff,
       compute_with_clock,
       of_module,
       compute,
       with_clock,
       to_value],
    _a1_ = [0, cst_src_proc_ml, 633, 2],
    _a2_ = [0, [0, cst_src_proc_ml, 633, 19798, 19800]],
    _a3_ = [0, [0, cst_src_proc_ml, 633, 19798, 19800]],
    _a4_ = [0, [0, cst_src_proc_ml, 636, 19864, 19868]],
    _a5_ = [0, [0, cst_src_proc_ml, 636, 19864, 19868]],
    _a6_ = [0, [0, cst_src_proc_ml, 636, 19864, 19868]],
    _a7_ = [0, cst_src_proc_ml, 633, 2],
    _a8_ = [0, cst_src_proc_ml, 634, 19821, 19825],
    _a9_ = [0, [0, cst_src_proc_ml, 633, 19798, 19800]],
    _a__ = [0, [0, cst_src_proc_ml, 632, 19750, 19752]],
    _a$_ = [0, [0, cst_src_proc_ml, 632, 19750, 19752]],
    _ba_ = [0, [0, cst_src_proc_ml, 632, 19750, 19752]],
    _bb_ = [0, [0, cst_src_proc_ml, 632, 19750, 19752]],
    _bc_ = [0, [0, cst_src_proc_ml, 632, 19750, 19752]],
    _bd_ = [0, [0, cst_src_proc_ml, 648, 20108, 20110]],
    _be_ = [0, [0, cst_src_proc_ml, 669, 20820, 20824]],
    _bf_ = [0, [0, cst_src_proc_ml, 669, 20820, 20824]],
    _bg_ = [0, [0, cst_src_proc_ml, 669, 20820, 20824]],
    _bh_ = [0, [0, cst_src_proc_ml, 666, 20686, 20692]],
    _bi_ = [0, [0, cst_src_proc_ml, 665, 20663, 20667]],
    _bj_ = [0, cst_src_proc_ml, 662, 2],
    _bk_ = [0, [0, cst_src_proc_ml, 662, 20579, 20581]],
    _bl_ = [0, [0, cst_src_proc_ml, 662, 20579, 20581]],
    _bm_ = [0, cst_src_proc_ml, 662, 2],
    _bn_ = [0, cst_src_proc_ml, 663, 20602, 20606],
    _bo_ = [0, [0, cst_src_proc_ml, 662, 20579, 20581]],
    _bp_ = [0, [0, cst_src_proc_ml, 661, 20506, 20508]],
    _bq_ = [0, [0, cst_src_proc_ml, 660, 20472, 20474]],
    _br_ = [0, [0, cst_src_proc_ml, 659, 20383, 20385]],
    _bs_ = [0, [0, cst_src_proc_ml, 659, 20383, 20385]],
    _bt_ = [0, [0, cst_src_proc_ml, 659, 20383, 20385]],
    _bu_ = [0, [0, cst_src_proc_ml, 659, 20383, 20385]],
    _bv_ = [0, [0, cst_src_proc_ml, 659, 20383, 20385]],
    _bw_ = [0, [0, cst_src_proc_ml, 686, 21306, 21308]],
    _bx_ = [0, [0, cst_src_proc_ml, 686, 21306, 21308]],
    _by_ = [0, [0, cst_src_proc_ml, 686, 21306, 21308]],
    _bz_ = [0, [0, cst_src_proc_ml, 683, 21227, 21231]],
    _bA_ = [0, [0, cst_src_proc_ml, 682, 21206, 21208]],
    _bB_ = [0, [0, cst_src_proc_ml, 681, 21160, 21162]],
    _bC_ = [0, [0, cst_src_proc_ml, 681, 21160, 21162]],
    _bD_ = [0, [0, cst_src_proc_ml, 681, 21160, 21162]],
    _bE_ = [0, [0, cst_src_proc_ml, 681, 21160, 21162]],
    _bF_ = [0, [0, cst_src_proc_ml, 681, 21160, 21162]],
    _bG_ = [0, [0, cst_src_proc_ml, 691, 21402, 21404]],
    cst_not_found = "not found",
    _bH_ = [0, "key"],
    cst_Incremental_glitch = "Incremental glitch",
    cst_src_proc_ml_716_29 = "src/proc.ml:716:29",
    cst_BUG = "BUG",
    _bI_ = [0, [0, cst_src_proc_ml, 708, 21866, 21870]],
    _bJ_ = [0, [0, cst_src_proc_ml, 707, 21817, 21821]],
    _bK_ = [0, cst_src_proc_ml, 705, 2],
    _bL_ = [0, [0, cst_src_proc_ml, 705, 21769, 21771]],
    _bM_ = [0, [0, cst_src_proc_ml, 705, 21769, 21771]],
    _bN_ = [0, [0, cst_src_proc_ml, 718, 22192, 22196]],
    _bO_ = [0, cst_src_proc_ml, 705, 2],
    _bP_ = [0, [0, cst_src_proc_ml, 705, 21769, 21771]],
    _bQ_ = [0, [0, cst_src_proc_ml, 705, 21769, 21771]],
    _bR_ = [0, cst_src_proc_ml, 705, 2],
    _bS_ = [0, cst_src_proc_ml, 706, 21796, 21800],
    _bT_ = [0, [0, cst_src_proc_ml, 705, 21769, 21771]],
    _bU_ = [0, [0, cst_src_proc_ml, 702, 21701, 21705]],
    _bV_ = [0, [0, cst_src_proc_ml, 701, 21679, 21681]],
    _bW_ = [0, [0, cst_src_proc_ml, 698, 21602, 21606]],
    _bX_ = [0, [0, cst_src_proc_ml, 697, 21584, 21586]],
    _bY_ = [0, [0, cst_src_proc_ml, 761, 23485, 23493]],
    _bZ_ = [0, [0, cst_src_proc_ml, 760, 23464, 23470]],
    _b0_ = [0, [0, cst_src_proc_ml, 759, 23425, 23431]],
    _b1_ = [0, [0, cst_src_proc_ml, 779, 23961, 23965]];
   function freeze(model, value){
    var _fL_ = state_opt(0, 0, model);
    return caml_call3
            (Let_syntax$0[2][1],
             _bc_,
             _fL_,
             function(pattern_syntax_160){
              var
               _fM_ =
                 caml_call3
                  (Let_syntax$0[2][4],
                   _ba_,
                   pattern_syntax_160,
                   function(param){
                    var pattern_syntax_162 = param[1];
                    return pattern_syntax_162;
                   }),
               _fN_ = caml_call1(Let_syntax$0[2][3], _fM_);
              return caml_call3
                      (Let_syntax$0[2][1],
                       _bb_,
                       _fN_,
                       function(state){
                        var
                         _fO_ =
                           caml_call3
                            (Let_syntax$0[2][4],
                             _a__,
                             pattern_syntax_160,
                             function(param){
                              var pattern_syntax_161 = param[2];
                              return pattern_syntax_161;
                             }),
                         _fP_ = caml_call1(Let_syntax$0[2][3], _fO_);
                        return caml_call3
                                (Let_syntax$0[2][1],
                                 _a$_,
                                 _fP_,
                                 function(set_state){
                                  var _fQ_ = caml_call1(Let_syntax$0[2][3], state);
                                  return caml_call3
                                          (Let_syntax$0[2][1],
                                           _a9_,
                                           _fQ_,
                                           function(pattern_syntax_163){
                                            var
                                             _fR_ =
                                               caml_call3
                                                (Let_syntax$0[2][4],
                                                 0,
                                                 pattern_syntax_163,
                                                 function(param){return param ? 0 : 1;});
                                            return caml_call4
                                                    (Let_syntax$0[2][2],
                                                     _a8_,
                                                     _fR_,
                                                     2,
                                                     function(param){
                                                      if(0 === param){
                                                       var
                                                        _fS_ =
                                                          caml_call3
                                                           (Let_syntax$0[2][4],
                                                            _a2_,
                                                            pattern_syntax_163,
                                                            function(param){
                                                             if(! param)
                                                              throw caml_maybe_attach_backtrace
                                                                     ([0, Assert_failure, _a1_], 1);
                                                             var pattern_syntax_164 = param[1];
                                                             return pattern_syntax_164;
                                                            }),
                                                        _fT_ = caml_call1(Let_syntax$0[2][3], _fS_);
                                                       return caml_call3
                                                               (Let_syntax$0[2][1],
                                                                _a3_,
                                                                _fT_,
                                                                function(state){return caml_call1(Let_syntax$0[1], state);});
                                                      }
                                                      if(1 !== param)
                                                       throw caml_maybe_attach_backtrace
                                                              ([0, Assert_failure, _a7_], 1);
                                                      var
                                                       _fU_ = caml_call2(Let_syntax$0[2][5], set_state, value),
                                                       _fV_ =
                                                         [0,
                                                          caml_call3
                                                           (Let_syntax$0[2][4],
                                                            0,
                                                            _fU_,
                                                            function(param){
                                                             var value = param[2], set_state = param[1];
                                                             return caml_call1(set_state, [0, value]);
                                                            })],
                                                       _fW_ = caml_call4(Edge$0[2], _fV_, 0, 0, 0);
                                                      return caml_call3
                                                              (Let_syntax$0[2][1],
                                                               _a6_,
                                                               _fW_,
                                                               function(pattern_syntax_165){
                                                                var
                                                                 _fX_ =
                                                                   caml_call3
                                                                    (Let_syntax$0[2][4],
                                                                     _a4_,
                                                                     pattern_syntax_165,
                                                                     function(param){return 0;}),
                                                                 _fY_ = caml_call1(Let_syntax$0[2][3], _fX_);
                                                                return caml_call3
                                                                        (Let_syntax$0[2][1],
                                                                         _a5_,
                                                                         _fY_,
                                                                         function(param){return caml_call1(Let_syntax$0[1], value);});
                                                               });
                                                     });
                                           });
                                 });
                       });
             });
   }
   function thunk(f){
    var
     _fF_ = caml_call1(Bonsai_Var[1], 0),
     _fG_ = caml_call1(Bonsai_Var[5], _fF_),
     _fH_ = caml_call2(Bonsai_Value[3], _fG_, f),
     _fI_ = caml_call1(Let_syntax$0[1], _fH_);
    return caml_call3
            (Let_syntax$0[2][1],
             _bd_,
             _fI_,
             function(out){
              var
               t_of_sexp = Sexplib0_Sexp_conv[47],
               sexp_of_t = Sexplib0_Sexp_conv[23];
              function equal(_fK_, _fJ_){return _fK_ === _fJ_ ? 1 : 0;}
              return freeze([0, t_of_sexp, sexp_of_t, equal], out);
             });
   }
   function most_recent_some(M, input, f){
    var _fq_ = state_opt(0, 0, M);
    return caml_call3
            (Let_syntax$0[2][1],
             _bv_,
             _fq_,
             function(pattern_syntax_171){
              var
               _fr_ =
                 caml_call3
                  (Let_syntax$0[2][4],
                   _bt_,
                   pattern_syntax_171,
                   function(param){
                    var pattern_syntax_173 = param[2];
                    return pattern_syntax_173;
                   }),
               _fs_ = caml_call1(Let_syntax$0[2][3], _fr_);
              return caml_call3
                      (Let_syntax$0[2][1],
                       _bu_,
                       _fs_,
                       function(set_most_recent_valid_value){
                        var
                         _ft_ =
                           caml_call3
                            (Let_syntax$0[2][4],
                             _br_,
                             pattern_syntax_171,
                             function(param){
                              var pattern_syntax_172 = param[1];
                              return pattern_syntax_172;
                             }),
                         _fu_ = caml_call1(Let_syntax$0[2][3], _ft_);
                        return caml_call3
                                (Let_syntax$0[2][1],
                                 _bs_,
                                 _fu_,
                                 function(most_recent_valid_value){
                                  var _fv_ = pure(f, input);
                                  return caml_call3
                                          (Let_syntax$0[2][1],
                                           _bq_,
                                           _fv_,
                                           function(input){
                                            var
                                             _fw_ =
                                               caml_call2
                                                (Incr[1],
                                                 input,
                                                 function(a_176, b_177){
                                                  return caml_call3
                                                          (Core[463],
                                                           function(a_178, b_179){
                                                            return caml_call2(M[3], a_178, b_179);
                                                           },
                                                           a_176,
                                                           b_177);
                                                 });
                                            return caml_call3
                                                    (Let_syntax$0[2][1],
                                                     _bp_,
                                                     _fw_,
                                                     function(input){
                                                      var _fx_ = caml_call1(Let_syntax$0[2][3], input);
                                                      return caml_call3
                                                              (Let_syntax$0[2][1],
                                                               _bo_,
                                                               _fx_,
                                                               function(pattern_syntax_180){
                                                                var
                                                                 _fy_ =
                                                                   caml_call3
                                                                    (Let_syntax$0[2][4],
                                                                     0,
                                                                     pattern_syntax_180,
                                                                     function(param){return param ? 1 : 0;});
                                                                return caml_call4
                                                                        (Let_syntax$0[2][2],
                                                                         _bn_,
                                                                         _fy_,
                                                                         2,
                                                                         function(param){
                                                                          if(0 === param)
                                                                           return caml_call1(Let_syntax$0[1], most_recent_valid_value);
                                                                          if(1 !== param)
                                                                           throw caml_maybe_attach_backtrace
                                                                                  ([0, Assert_failure, _bm_], 1);
                                                                          var
                                                                           _fz_ =
                                                                             caml_call3
                                                                              (Let_syntax$0[2][4],
                                                                               _bk_,
                                                                               pattern_syntax_180,
                                                                               function(param){
                                                                                if(! param)
                                                                                 throw caml_maybe_attach_backtrace
                                                                                        ([0, Assert_failure, _bj_], 1);
                                                                                var pattern_syntax_181 = param[1];
                                                                                return pattern_syntax_181;
                                                                               }),
                                                                           _fA_ = caml_call1(Let_syntax$0[2][3], _fz_);
                                                                          return caml_call3
                                                                                  (Let_syntax$0[2][1],
                                                                                   _bl_,
                                                                                   _fA_,
                                                                                   function(inner){
                                                                                    var
                                                                                     _fB_ =
                                                                                       caml_call3
                                                                                        (Let_syntax$0[2][6],
                                                                                         _bh_,
                                                                                         set_most_recent_valid_value,
                                                                                         function(set_most_recent_valid_value, x){
                                                                                          return caml_call1(set_most_recent_valid_value, [0, x]);
                                                                                         });
                                                                                    return caml_call3
                                                                                            (Let_syntax$0[2][1],
                                                                                             _bi_,
                                                                                             _fB_,
                                                                                             function(callback){
                                                                                              var _fC_ = caml_call3(Edge$0[6], M, inner, callback);
                                                                                              return caml_call3
                                                                                                      (Let_syntax$0[2][1],
                                                                                                       _bg_,
                                                                                                       _fC_,
                                                                                                       function(pattern_syntax_184){
                                                                                                        var
                                                                                                         _fD_ =
                                                                                                           caml_call3
                                                                                                            (Let_syntax$0[2][4],
                                                                                                             _be_,
                                                                                                             pattern_syntax_184,
                                                                                                             function(param){return 0;}),
                                                                                                         _fE_ = caml_call1(Let_syntax$0[2][3], _fD_);
                                                                                                        return caml_call3
                                                                                                                (Let_syntax$0[2][1],
                                                                                                                 _bf_,
                                                                                                                 _fE_,
                                                                                                                 function(param){return caml_call1(Let_syntax$0[1], input);});
                                                                                                       });
                                                                                             });
                                                                                   });
                                                                         });
                                                               });
                                                     });
                                           });
                                 });
                       });
             });
   }
   function most_recent_value_satisfying(m, input, condition){
    return most_recent_some
            (m,
             input,
             function(a){return caml_call1(condition, a) ? [0, a] : 0;});
   }
   function previous_value(model, input){
    var _fh_ = state_opt(0, 0, model);
    return caml_call3
            (Let_syntax$0[2][1],
             _bF_,
             _fh_,
             function(pattern_syntax_185){
              var
               _fi_ =
                 caml_call3
                  (Let_syntax$0[2][4],
                   _bD_,
                   pattern_syntax_185,
                   function(param){
                    var pattern_syntax_187 = param[2];
                    return pattern_syntax_187;
                   }),
               _fj_ = caml_call1(Let_syntax$0[2][3], _fi_);
              return caml_call3
                      (Let_syntax$0[2][1],
                       _bE_,
                       _fj_,
                       function(set_prev){
                        var
                         _fk_ =
                           caml_call3
                            (Let_syntax$0[2][4],
                             _bB_,
                             pattern_syntax_185,
                             function(param){
                              var pattern_syntax_186 = param[1];
                              return pattern_syntax_186;
                             }),
                         _fl_ = caml_call1(Let_syntax$0[2][3], _fk_);
                        return caml_call3
                                (Let_syntax$0[2][1],
                                 _bC_,
                                 _fl_,
                                 function(prev){
                                  var
                                   _fm_ =
                                     caml_call3
                                      (Let_syntax$0[2][6],
                                       _bz_,
                                       set_prev,
                                       function(set_prev, input){
                                        return caml_call1(set_prev, [0, input]);
                                       });
                                  return caml_call3
                                          (Let_syntax$0[2][1],
                                           _bA_,
                                           _fm_,
                                           function(callback){
                                            var _fn_ = caml_call3(Edge$0[6], model, input, callback);
                                            return caml_call3
                                                    (Let_syntax$0[2][1],
                                                     _by_,
                                                     _fn_,
                                                     function(pattern_syntax_190){
                                                      var
                                                       _fo_ =
                                                         caml_call3
                                                          (Let_syntax$0[2][4],
                                                           _bw_,
                                                           pattern_syntax_190,
                                                           function(param){return 0;}),
                                                       _fp_ = caml_call1(Let_syntax$0[2][3], _fo_);
                                                      return caml_call3
                                                              (Let_syntax$0[2][1],
                                                               _bx_,
                                                               _fp_,
                                                               function(param){return caml_call1(Let_syntax$0[1], prev);});
                                                     });
                                           });
                                 });
                       });
             });
   }
   function assoc_set(m, v, f){
    var _fg_ = caml_call1(Bonsai_Map0[3], v);
    return caml_call3
            (Let_syntax$0[2][1],
             _bG_,
             _fg_,
             function(as_map){
              return caml_call3
                      (assoc,
                       m,
                       as_map,
                       function(k, param){return caml_call1(f, k);});
             });
   }
   function assoc_list(m, list, get_key, f){
    var
     _e3_ =
       caml_call3
        (Let_syntax$0[2][6],
         _bW_,
         list,
         function(list){
          return caml_call2
                  (Core_List[50],
                   list,
                   function(x){return [0, caml_call1(get_key, x), x];});
         });
    return caml_call3
            (Let_syntax$0[2][1],
             _bX_,
             _e3_,
             function(alist){
              var
               _e4_ =
                 caml_call3
                  (Let_syntax$0[2][6],
                   _bU_,
                   alist,
                   function(alist){
                    return caml_call2(Core_Map[6], [0, m[3]], alist);
                   });
              return caml_call3
                      (Let_syntax$0[2][1],
                       _bV_,
                       _e4_,
                       function(input_map){
                        var _e5_ = caml_call1(Let_syntax$0[2][3], input_map);
                        return caml_call3
                                (Let_syntax$0[2][1],
                                 _bT_,
                                 _e5_,
                                 function(pattern_syntax_196){
                                  var
                                   _e6_ =
                                     caml_call3
                                      (Let_syntax$0[2][4],
                                       0,
                                       pattern_syntax_196,
                                       function(param){return 17724 <= param[1] ? 0 : 1;});
                                  return caml_call4
                                          (Let_syntax$0[2][2],
                                           _bS_,
                                           _e6_,
                                           2,
                                           function(param){
                                            if(0 === param){
                                             var
                                              _e7_ =
                                                caml_call3
                                                 (Let_syntax$0[2][4],
                                                  _bL_,
                                                  pattern_syntax_196,
                                                  function(param){
                                                   if(typeof param !== "number" && 17724 === param[1]){
                                                    var pattern_syntax_197 = param[2];
                                                    return pattern_syntax_197;
                                                   }
                                                   throw caml_maybe_attach_backtrace
                                                          ([0, Assert_failure, _bK_], 1);
                                                  }),
                                              _e8_ = caml_call1(Let_syntax$0[2][3], _e7_);
                                             return caml_call3
                                                     (Let_syntax$0[2][1],
                                                      _bM_,
                                                      _e8_,
                                                      function(input_map){
                                                       var _e$_ = caml_call3(assoc, m, input_map, f);
                                                       return caml_call3
                                                               (Let_syntax$0[2][1],
                                                                _bJ_,
                                                                _e$_,
                                                                function(output_map){
                                                                 var
                                                                  _fa_ = caml_call2(Let_syntax$0[2][5], alist, output_map);
                                                                 return caml_call3
                                                                         (Let_syntax$0[2][6],
                                                                          _bI_,
                                                                          _fa_,
                                                                          function(param){
                                                                           var output_map = param[2], alist = param[1];
                                                                           return [0,
                                                                                   17724,
                                                                                   caml_call2
                                                                                    (Core_List[50],
                                                                                     alist,
                                                                                     function(param){
                                                                                      var
                                                                                       k = param[1],
                                                                                       match = caml_call2(Core_Map[42], output_map, k);
                                                                                      if(match){var r = match[1]; return r;}
                                                                                      var
                                                                                       _fb_ =
                                                                                         [0, caml_call1(Sexplib0_Sexp_conv[7], cst_not_found), 0],
                                                                                       _fc_ =
                                                                                         [0, [1, [0, _bH_, [0, caml_call1(m[2], k), 0]]], _fb_],
                                                                                       _fd_ =
                                                                                         [0,
                                                                                          caml_call1(Sexplib0_Sexp_conv[7], cst_Incremental_glitch),
                                                                                          _fc_],
                                                                                       _fe_ =
                                                                                         [0,
                                                                                          caml_call1(Sexplib0_Sexp_conv[7], cst_src_proc_ml_716_29),
                                                                                          _fd_],
                                                                                       _ff_ =
                                                                                         [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_BUG), _fe_]];
                                                                                      return caml_call1(Core[255], _ff_);
                                                                                     })];
                                                                          });
                                                                });
                                                      });
                                            }
                                            if(1 !== param)
                                             throw caml_maybe_attach_backtrace
                                                    ([0, Assert_failure, _bR_], 1);
                                            var
                                             _e9_ =
                                               caml_call3
                                                (Let_syntax$0[2][4],
                                                 _bP_,
                                                 pattern_syntax_196,
                                                 function(param){
                                                  if(typeof param !== "number" && -1048878709 === param[1]){
                                                   var pattern_syntax_198 = param[2];
                                                   return pattern_syntax_198;
                                                  }
                                                  throw caml_maybe_attach_backtrace
                                                         ([0, Assert_failure, _bO_], 1);
                                                 }),
                                             _e__ = caml_call1(Let_syntax$0[2][3], _e9_);
                                            return caml_call3
                                                    (Let_syntax$0[2][1],
                                                     _bQ_,
                                                     _e__,
                                                     function(key){
                                                      return caml_call3
                                                              (Let_syntax$0[2][6],
                                                               _bN_,
                                                               key,
                                                               function(key){return [0, -1048878709, key];});
                                                     });
                                           });
                                 });
                       });
             });
   }
   function fallback(param){
    if(0 === param[0]){var fallback$0 = param[2]; return fallback$0;}
    var get = param[2], base = param[1];
    return caml_call1(get, fallback(base));
   }
   function fetch(t, default$0, for_some){
    var t$0 = t, for_some$0 = for_some;
    for(;;){
     if(0 === t$0[0]){
      var id = t$0[1];
      return caml_call3(Dynamic_scope[1], id, default$0, for_some$0);
     }
     var get = t$0[2], base = t$0[1];
     let for_some = for_some$0, get$0 = get;
     var
      for_some$1 =
        function(x){return caml_call1(for_some, caml_call1(get$0, x));};
     t$0 = base;
     for_some$0 = for_some$1;
    }
   }
   function lookup(var$0){
    return fetch(var$0, fallback(var$0), function(_e2_){return _e2_;});
   }
   function store(var$0, value, inner){
    if(0 === var$0[0]){
     var id = var$0[1];
     return caml_call3(Dynamic_scope[2], id, value, inner);
    }
    var set = var$0[3], base = var$0[1], _eZ_ = lookup(base);
    return caml_call3
            (Let_syntax$0[2][1],
             _b0_,
             _eZ_,
             function(current){
              var
               _e0_ = caml_call2(Let_syntax$0[2][5], current, value),
               _e1_ =
                 caml_call3
                  (Let_syntax$0[2][6],
                   _bY_,
                   _e0_,
                   function(param){
                    var value = param[2], current = param[1];
                    return caml_call2(set, current, value);
                   });
              return caml_call3
                      (Let_syntax$0[2][1],
                       _bZ_,
                       _e1_,
                       function(new$0){return store(base, new$0, inner);});
             });
   }
   function create(opt, name, fallback, param){
    var sexp_of = opt ? opt[1] : Core[148];
    return [0, caml_call2(Core_Type_equal[8][3], name, sexp_of), fallback];
   }
   function derived(opt, base, get, set){
    var sexp_of = opt ? opt[1] : Core[148];
    return [1, base, get, set, sexp_of];
   }
   function modify(var$0, change, f){
    var _eY_ = lookup(var$0);
    return caml_call3
            (Let_syntax$0[2][1],
             _b1_,
             _eY_,
             function(current){
              function revert(c){return store(var$0, current, c);}
              var value = caml_call1(change, current);
              return store(var$0, value, caml_call1(f, [0, revert]));
             });
   }
   function set(t, v, inside){return store(t, v, inside);}
   function set$0(var$0, value, f){
    return modify(var$0, function(param){return value;}, f);
   }
   var
    Dynamic_scope$0 =
      [0, fallback, fetch, lookup, store, create, derived, modify, set, set$0];
   function approx_now(tick_every){
    return caml_call1
            (Incr[5],
             function(clock){
              var _eX_ = caml_call2(Ui_incr[80][12], clock, tick_every);
              return caml_call2
                      (Ui_incr[78][4][6],
                       _eX_,
                       function(param){return caml_call1(Ui_incr[80][6], clock);});
             });
   }
   var
    now = caml_call1(Incr[5], Ui_incr[80][7]),
    _b2_ = [0, cst_After],
    _b3_ = [0, cst_Before];
   function t_of_sexp$0(sexp_214){
    a:
    {
     if(0 === sexp_214[0]){
      var _eT_ = sexp_214[1];
      b:
      if(_eT_ !== cst_After){
       if(_eT_ !== cst_Before){
        if(_eT_ === cst_after) break b;
        if(_eT_ !== cst_before) break a;
       }
       return 0;
      }
      return 1;
     }
     var _eU_ = sexp_214[1];
     if(! _eU_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_213, sexp_214);
     var _eV_ = _eU_[1];
     if(0 !== _eV_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_213, sexp_214);
     var _eW_ = _eV_[1];
     b:
     if(_eW_ !== cst_After){
      if(_eW_ !== cst_Before){
       if(_eW_ === cst_after) break b;
       if(_eW_ !== cst_before) break a;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[3], error_source_213, sexp_214);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_213, sexp_214);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_213, sexp_214);
   }
   function sexp_of_t$0(param){return param ? _b2_ : _b3_;}
   function equal$0(_eS_, _eR_){return _eS_ === _eR_ ? 1 : 0;}
   var Before_or_after = [0, t_of_sexp$0, sexp_of_t$0, equal$0];
   function at(time){
    return caml_call2
            (Incr[2],
             time,
             function(clock){
              var
               _eO_ = caml_call1(Ui_incr[80][10], clock),
               _eP_ = Ui_incr[28];
              return function(_eQ_){return caml_call2(_eP_, _eQ_, _eO_);};
             });
   }
   var
    get_current_time =
      caml_call1
       (Incr[5],
        function(clock){
         var
          _eN_ =
            caml_call2
             (Ui_effect[17],
              function(param){return caml_call1(Ui_incr[80][6], clock);},
              0);
         return caml_call1(Ui_incr[11], _eN_);
        }),
    Trigger_id = caml_call1(Core_Unique_id[1], 0),
    _b4_ = [0, cst_Waiting_for],
    _b5_ = [0, cst_Waiting_for_effect_to_fini];
   function t_of_sexp$1(sexp_221){
    a:
    {
     if(0 === sexp_221[0]){
      var _eJ_ = sexp_221[1];
      b:
      if(_eJ_ !== cst_Waiting_for){
       if(_eJ_ !== cst_Waiting_for_effect_to_fini){
        if(_eJ_ === cst_waiting_for) break b;
        if(_eJ_ !== cst_waiting_for_effect_to_fini) break a;
       }
       return 0;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5], error_source_219, sexp_221);
     }
     var _eK_ = sexp_221[1];
     if(! _eK_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_219, sexp_221);
     var _eL_ = _eK_[1];
     if(0 !== _eL_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_219, sexp_221);
     var tag_222 = _eL_[1];
     b:
     if(tag_222 !== cst_Waiting_for){
      if(tag_222 !== cst_Waiting_for_effect_to_fini){
       if(tag_222 === cst_waiting_for) break b;
       if(tag_222 !== cst_waiting_for_effect_to_fini) break a;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[3], error_source_219, sexp_221);
     }
     var sexp_args_223 = _eK_[2];
     if(sexp_args_223){
      var _eM_ = sexp_args_223[2];
      if(_eM_ && ! _eM_[2]){
       var
        arg1_225 = _eM_[1],
        arg0_224 = sexp_args_223[1],
        res0_226 = caml_call2(Core[467], Trigger_id[9], arg0_224),
        res1_227 = caml_call1(Core_Time_ns[25][3], arg1_225);
       return [0, res0_226, res1_227];
      }
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4],
              error_source_219,
              tag_222,
              sexp_221);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_219, sexp_221);
   }
   function sexp_of_t$1(param){
    if(! param) return _b5_;
    var
     arg1_229 = param[2],
     arg0_228 = param[1],
     res0_230 = caml_call2(Core[466], Trigger_id[10], arg0_228),
     res1_231 = caml_call1(Core_Time_ns[25][4], arg1_229);
    return [1, [0, _b4_, [0, res0_230, [0, res1_231, 0]]]];
   }
   function equal$1(a_232, b_233){
    if(a_232 === b_233) return 1;
    if(! a_232) return b_233 ? 0 : 1;
    if(! b_233) return 0;
    var
     b_237 = b_233[2],
     b_235 = b_233[1],
     a_236 = a_232[2],
     a_234 = a_232[1],
     _eI_ =
       caml_call3
        (Core[463],
         function(a_238, b_239){
          return caml_call2(Trigger_id[19], a_238, b_239);
         },
         a_234,
         b_235);
    return _eI_ ? caml_call2(Core_Time_ns[25][12], a_236, b_237) : _eI_;
   }
   var
    Every_model = [0, t_of_sexp$1, sexp_of_t$1, equal$1],
    _b6_ = [0, cst_Wait_for],
    _b7_ = [0, cst_Schedule_effect];
   function t_of_sexp$2(sexp_244){
    a:
    {
     if(0 === sexp_244[0]){
      var _eF_ = sexp_244[1];
      b:
      if(_eF_ !== cst_Schedule_effect){
       if(_eF_ !== cst_Wait_for){
        if(_eF_ === cst_schedule_effect) break b;
        if(_eF_ !== cst_wait_for) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_242, sexp_244);
      }
      return 0;
     }
     var _eG_ = sexp_244[1];
     if(! _eG_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_242, sexp_244);
     var _eH_ = _eG_[1];
     if(0 !== _eH_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_242, sexp_244);
     var tag_245 = _eH_[1];
     b:
     if(tag_245 !== cst_Schedule_effect){
      if(tag_245 !== cst_Wait_for){
       if(tag_245 === cst_schedule_effect) break b;
       if(tag_245 !== cst_wait_for) break a;
      }
      var sexp_args_246 = _eG_[2];
      if(sexp_args_246 && ! sexp_args_246[2]){
       var
        arg0_247 = sexp_args_246[1],
        res0_248 = caml_call1(Core_Time_ns[25][3], arg0_247);
       return [0, res0_248];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_242,
               tag_245,
               sexp_244);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_242, sexp_244);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_242, sexp_244);
   }
   function sexp_of_t$2(param){
    if(! param) return _b7_;
    var
     arg0_249 = param[1],
     res0_250 = caml_call1(Core_Time_ns[25][4], arg0_249);
    return [1, [0, _b6_, [0, res0_250, 0]]];
   }
   function equal$2(a_251, b_252){
    if(a_251 === b_252) return 1;
    if(! a_251) return b_252 ? 0 : 1;
    if(! b_252) return 0;
    var b_254 = b_252[1], a_253 = a_251[1];
    return caml_call2(Core_Time_ns[25][12], a_253, b_254);
   }
   var
    Every_action = [0, t_of_sexp$2, sexp_of_t$2, equal$2],
    _b8_ = [0, [0, cst_src_proc_ml, 881, 27099, 27105]],
    _b9_ = [0, [0, cst_src_proc_ml, 880, 27076, 27080]],
    _b__ = [0, [0, cst_src_proc_ml, 876, 26937, 26945]],
    _b$_ = [0, [0, cst_src_proc_ml, 875, 26892, 26900]],
    _ca_ = [0, cst_src_proc_ml, 872, 6],
    _cb_ = [0, [0, cst_src_proc_ml, 872, 26766, 26772]],
    _cc_ = [0, [0, cst_src_proc_ml, 872, 26766, 26772]],
    _cd_ = [0, cst_src_proc_ml, 872, 6],
    _ce_ = [0, [0, cst_src_proc_ml, 872, 26766, 26772]],
    _cf_ = [0, [0, cst_src_proc_ml, 872, 26766, 26772]],
    _cg_ = [0, cst_src_proc_ml, 872, 6],
    _ch_ = [0, cst_src_proc_ml, 873, 26799, 26807],
    _ci_ = [0, [0, cst_src_proc_ml, 872, 26766, 26772]],
    _cj_ = [0, [0, cst_src_proc_ml, 871, 26736, 26740]],
    _ck_ = [0, [0, cst_src_proc_ml, 863, 26532, 26536]],
    _cl_ = [0, [0, cst_src_proc_ml, 863, 26532, 26536]],
    _cm_ = [0, [0, cst_src_proc_ml, 863, 26532, 26536]],
    _cn_ = [0, [0, cst_src_proc_ml, 863, 26532, 26536]],
    _co_ = [0, [0, cst_src_proc_ml, 863, 26532, 26536]],
    _cp_ = [0, [0, cst_src_proc_ml, 845, 25755, 25761]],
    _cq_ = [0, [0, cst_src_proc_ml, 844, 25730, 25734]],
    _cr_ = [0, [0, cst_src_proc_ml, 843, 25679, 25683]],
    _cs_ = [0, [0, cst_src_proc_ml, 837, 25474, 25480]],
    _ct_ = [0, [0, cst_src_proc_ml, 836, 25446, 25450]],
    _cu_ = [0, [0, cst_src_proc_ml, 833, 25363, 25369]],
    _cv_ = [0, [0, cst_src_proc_ml, 832, 25339, 25343]],
    _cz_ = [0, 0];
   function generic_every(create_effect, opt, span, callback){
    var
     trigger_on_activate = opt ? opt[1] : 1,
     _ef_ =
       caml_call3
        (Let_syntax$0[2][1],
         _cu_,
         now,
         function(now){
          var _eE_ = Core_Time_ns[25];
          return freeze([0, _eE_[3], _eE_[4], _eE_[12]], now);
         });
    return caml_call3
            (Let_syntax$0[2][1],
             _cv_,
             _ef_,
             function(base_time){
              var
               _eg_ =
                 caml_call3
                  (Let_syntax$0[2][6],
                   _cs_,
                   base_time,
                   function(base_time){
                    var
                     start_time =
                       trigger_on_activate
                        ? base_time
                        : caml_call2(Core_Time_ns[66], base_time, span);
                    return [0, 0, start_time];
                   });
              return caml_call3
                      (Let_syntax$0[2][1],
                       _ct_,
                       _eg_,
                       function(initial_model){
                        return caml_call3
                                (Let_syntax$0[2][1],
                                 _cr_,
                                 get_current_time,
                                 function(get_current_time){
                                  var
                                   _eh_ =
                                     caml_call2(Let_syntax$0[2][5], get_current_time, callback),
                                   _ei_ = caml_call2(Let_syntax$0[2][5], base_time, _eh_),
                                   _ej_ =
                                     caml_call3
                                      (Let_syntax$0[2][6],
                                       _cp_,
                                       _ei_,
                                       function(param){
                                        var
                                         match = param[2],
                                         callback = match[2],
                                         get_current_time = match[1],
                                         base_time = param[1];
                                        return [0, base_time, get_current_time, callback];
                                       });
                                  return caml_call3
                                          (Let_syntax$0[2][1],
                                           _cq_,
                                           _ej_,
                                           function(race_input){
                                            function apply_action
                                            (inject, schedule_event, input, old_model, param){
                                             if(param){
                                              var next_time = param[1];
                                              return [0, [0, caml_call1(Trigger_id[45], 0)], next_time];
                                             }
                                             if(input)
                                              var
                                               match = input[1],
                                               callback = match[3],
                                               get_current_time = match[2],
                                               base_time = match[1],
                                               _eC_ =
                                                 caml_call4
                                                  (create_effect, span, base_time, get_current_time, callback),
                                               _eD_ =
                                                 caml_call2
                                                  (Ui_effect[13][4][2],
                                                   _eC_,
                                                   function(next_time){
                                                    return caml_call1(inject, [0, next_time]);
                                                   });
                                             else
                                              var _eD_ = Ui_effect[1];
                                             caml_call1(schedule_event, _eD_);
                                             return 0;
                                            }
                                            var
                                             _ek_ =
                                               race_dynamic_model
                                                (Every_model,
                                                 [0, Every_action[2]],
                                                 [0, 657750365, initial_model],
                                                 apply_action,
                                                 race_input);
                                            return caml_call3
                                                    (Let_syntax$0[2][1],
                                                     _co_,
                                                     _ek_,
                                                     function(pattern_syntax_266){
                                                      var
                                                       _el_ =
                                                         caml_call3
                                                          (Let_syntax$0[2][4],
                                                           _cm_,
                                                           pattern_syntax_266,
                                                           function(param){
                                                            var pattern_syntax_268 = param[2];
                                                            return pattern_syntax_268;
                                                           }),
                                                       _em_ = caml_call1(Let_syntax$0[2][3], _el_);
                                                      return caml_call3
                                                              (Let_syntax$0[2][1],
                                                               _cn_,
                                                               _em_,
                                                               function(inject){
                                                                var
                                                                 _en_ =
                                                                   caml_call3
                                                                    (Let_syntax$0[2][4],
                                                                     _ck_,
                                                                     pattern_syntax_266,
                                                                     function(param){
                                                                      var pattern_syntax_267 = param[1];
                                                                      return pattern_syntax_267;
                                                                     }),
                                                                 _eo_ = caml_call1(Let_syntax$0[2][3], _en_);
                                                                return caml_call3
                                                                        (Let_syntax$0[2][1],
                                                                         _cl_,
                                                                         _eo_,
                                                                         function(every_model){
                                                                          var
                                                                           _ep_ = caml_call1(Let_syntax$0[2][3], every_model),
                                                                           _eq_ =
                                                                             caml_call3
                                                                              (Let_syntax$0[2][1],
                                                                               _ci_,
                                                                               _ep_,
                                                                               function(pattern_syntax_270){
                                                                                var
                                                                                 _ev_ =
                                                                                   caml_call3
                                                                                    (Let_syntax$0[2][4],
                                                                                     0,
                                                                                     pattern_syntax_270,
                                                                                     function(param){return param ? 1 : 0;});
                                                                                return caml_call4
                                                                                        (Let_syntax$0[2][2],
                                                                                         _ch_,
                                                                                         _ev_,
                                                                                         2,
                                                                                         function(param){
                                                                                          if(0 === param) return const$0(0);
                                                                                          if(1 !== param)
                                                                                           throw caml_maybe_attach_backtrace
                                                                                                  ([0, Assert_failure, _cg_], 1);
                                                                                          var
                                                                                           _ew_ =
                                                                                             caml_call3
                                                                                              (Let_syntax$0[2][4],
                                                                                               _ce_,
                                                                                               pattern_syntax_270,
                                                                                               function(param){
                                                                                                if(! param)
                                                                                                 throw caml_maybe_attach_backtrace
                                                                                                        ([0, Assert_failure, _cd_], 1);
                                                                                                var pattern_syntax_272 = param[1];
                                                                                                return pattern_syntax_272;
                                                                                               }),
                                                                                           _ex_ = caml_call1(Let_syntax$0[2][3], _ew_);
                                                                                          return caml_call3
                                                                                                  (Let_syntax$0[2][1],
                                                                                                   _cf_,
                                                                                                   _ex_,
                                                                                                   function(trigger_id){
                                                                                                    var
                                                                                                     _ey_ =
                                                                                                       caml_call3
                                                                                                        (Let_syntax$0[2][4],
                                                                                                         _cb_,
                                                                                                         pattern_syntax_270,
                                                                                                         function(param){
                                                                                                          if(! param)
                                                                                                           throw caml_maybe_attach_backtrace
                                                                                                                  ([0, Assert_failure, _ca_], 1);
                                                                                                          var pattern_syntax_271 = param[2];
                                                                                                          return pattern_syntax_271;
                                                                                                         }),
                                                                                                     _ez_ = caml_call1(Let_syntax$0[2][3], _ey_);
                                                                                                    return caml_call3
                                                                                                            (Let_syntax$0[2][1],
                                                                                                             _cc_,
                                                                                                             _ez_,
                                                                                                             function(time){
                                                                                                              var _eA_ = at(time);
                                                                                                              return caml_call3
                                                                                                                      (Let_syntax$0[2][1],
                                                                                                                       _b$_,
                                                                                                                       _eA_,
                                                                                                                       function(before_or_after){
                                                                                                                        var
                                                                                                                         _eB_ =
                                                                                                                           caml_call2(Let_syntax$0[2][5], trigger_id, before_or_after);
                                                                                                                        return caml_call3
                                                                                                                                (Let_syntax$0[2][6],
                                                                                                                                 _b__,
                                                                                                                                 _eB_,
                                                                                                                                 function(param){
                                                                                                                                  var before_or_after = param[2], trigger_id = param[1];
                                                                                                                                  return [0, [0, trigger_id, before_or_after]];
                                                                                                                                 });
                                                                                                                       });
                                                                                                             });
                                                                                                   });
                                                                                         });
                                                                               });
                                                                          return caml_call3
                                                                                  (Let_syntax$0[2][1],
                                                                                   _cj_,
                                                                                   _eq_,
                                                                                   function(before_or_after){
                                                                                    var
                                                                                     _er_ =
                                                                                       caml_call3
                                                                                        (Let_syntax$0[2][6],
                                                                                         _b8_,
                                                                                         inject,
                                                                                         function(inject, param){
                                                                                          if(param && param[1][2]) return caml_call1(inject, 0);
                                                                                          return Ui_effect[1];
                                                                                         });
                                                                                    return caml_call3
                                                                                            (Let_syntax$0[2][1],
                                                                                             _b9_,
                                                                                             _er_,
                                                                                             function(callback){
                                                                                              function t_of_sexp(x_286){
                                                                                               return caml_call2
                                                                                                       (Core[467],
                                                                                                        function(sexp_284){
                                                                                                         if(1 === sexp_284[0]){
                                                                                                          var _et_ = sexp_284[1];
                                                                                                          if(_et_){
                                                                                                           var _eu_ = _et_[2];
                                                                                                           if(_eu_ && ! _eu_[2]){
                                                                                                            var
                                                                                                             arg1_281 = _eu_[1],
                                                                                                             arg0_280 = _et_[1],
                                                                                                             res0_282 = caml_call2(Core[467], Trigger_id[9], arg0_280),
                                                                                                             res1_283 = caml_call1(Before_or_after[1], arg1_281);
                                                                                                            return [0, res0_282, res1_283];
                                                                                                           }
                                                                                                          }
                                                                                                         }
                                                                                                         return caml_call3
                                                                                                                 (Sexplib0_Sexp_conv_error[2], error_source_285, 2, sexp_284);
                                                                                                        },
                                                                                                        x_286);
                                                                                              }
                                                                                              function sexp_of_t(x_291){
                                                                                               return caml_call2
                                                                                                       (Core[466],
                                                                                                        function(param){
                                                                                                         var
                                                                                                          arg1_288 = param[2],
                                                                                                          arg0_287 = param[1],
                                                                                                          res0_289 = caml_call2(Core[466], Trigger_id[10], arg0_287),
                                                                                                          res1_290 = caml_call1(Before_or_after[2], arg1_288);
                                                                                                         return [1, [0, res0_289, [0, res1_290, 0]]];
                                                                                                        },
                                                                                                        x_291);
                                                                                              }
                                                                                              function equal(a_292, b_293){
                                                                                               return caml_call3
                                                                                                       (Core[463],
                                                                                                        function(a_294, b_295){
                                                                                                         var
                                                                                                          t_297 = a_294[2],
                                                                                                          t_296 = a_294[1],
                                                                                                          t_299 = b_295[2],
                                                                                                          t_298 = b_295[1],
                                                                                                          _es_ =
                                                                                                            caml_call3
                                                                                                             (Core[463],
                                                                                                              function(a_300, b_301){
                                                                                                               return caml_call2(Trigger_id[19], a_300, b_301);
                                                                                                              },
                                                                                                              t_296,
                                                                                                              t_298);
                                                                                                         return _es_
                                                                                                                 ? caml_call2(Before_or_after[3], t_297, t_299)
                                                                                                                 : _es_;
                                                                                                        },
                                                                                                        a_292,
                                                                                                        b_293);
                                                                                              }
                                                                                              return caml_call3
                                                                                                      (Edge$0[6],
                                                                                                       [0, t_of_sexp, sexp_of_t, equal],
                                                                                                       before_or_after,
                                                                                                       callback);
                                                                                             });
                                                                                   });
                                                                         });
                                                               });
                                                     });
                                           });
                                 });
                       });
             });
   }
   function ensure_clock_advances(old_time, new_time){
    var _ee_ = caml_call1(Core_Time_ns[70], old_time);
    return caml_call2(Core_Time_ns[24], _ee_, new_time);
   }
   function _cw_(span, param, get_current_time, callback){
    return caml_call2
            (Ui_effect[13][4][2],
             callback,
             function(param){
              return caml_call2
                      (Ui_effect[13][4][3],
                       get_current_time,
                       function(now){
                        return ensure_clock_advances
                                (now, caml_call2(Core_Time_ns[66], now, span));
                       });
             });
   }
   function every_wait_period_after_previo(_eb_, _ec_, _ed_){return generic_every(_cw_, _eb_, _ec_, _ed_);
   }
   function _cx_(span, param, get_current_time, callback){
    return caml_call2
            (Ui_effect[13][4][2],
             get_current_time,
             function(start){
              return caml_call2
                      (Ui_effect[13][4][2],
                       callback,
                       function(param){
                        return caml_call2
                                (Ui_effect[13][4][3],
                                 get_current_time,
                                 function(now){
                                  return ensure_clock_advances
                                          (now, caml_call2(Core_Time_ns[66], start, span));
                                 });
                       });
             });
   }
   function every_wait_period_after_previo$0(_d__, _d$_, _ea_){return generic_every(_cx_, _d__, _d$_, _ea_);
   }
   function _cy_(span, base_time, get_current_time, callback){
    return caml_call2
            (Ui_effect[13][4][2],
             callback,
             function(param){
              return caml_call2
                      (Ui_effect[13][4][3],
                       get_current_time,
                       function(now){
                        var
                         _d8_ = caml_call1(Core_Time_ns[1][107], Core_Time_ns[1][75]),
                         _d9_ = caml_call2(Core_Time_ns[1][24], span, _d8_);
                        return ensure_clock_advances
                                (now,
                                 caml_call5(Core_Time_ns[80], _cz_, base_time, now, _d9_, 0));
                       });
             });
   }
   function every_multiple_of_period_block(_d5_, _d6_, _d7_){return generic_every(_cy_, _d5_, _d6_, _d7_);
   }
   function every_multiple_of_period_non_b
   (trigger_on_activate, span, callback){
    return generic_every
            (_cy_,
             trigger_on_activate,
             span,
             caml_call3
              (Let_syntax$0[2][4],
               0,
               callback,
               function(callback){return [0, Ui_effect[2], [0, callback, 0]];}));
   }
   function every(when_to_start_next_effect){
    return 103362454 <= when_to_start_next_effect
            ? 584040262
              <= when_to_start_next_effect
              ? every_wait_period_after_previo$0
              : every_multiple_of_period_block
            : -174594474
              <= when_to_start_next_effect
              ? every_wait_period_after_previo
              : every_multiple_of_period_non_b;
   }
   var
    Clock =
      [0,
       approx_now,
       now,
       Before_or_after,
       at,
       get_current_time,
       Trigger_id,
       Every_model,
       Every_action,
       generic_every,
       ensure_clock_advances,
       every_wait_period_after_previo,
       every_wait_period_after_previo$0,
       every_multiple_of_period_block,
       every_multiple_of_period_non_b,
       every],
    _cA_ = [0, "Add"],
    _cB_ = [0, "Remove"],
    _cC_ = [0, "Change"];
   function sexp_of_t$3(of_query_310, param){
    switch(param[0]){
      case 0:
       var arg0_311 = param[1], res0_312 = caml_call1(of_query_310, arg0_311);
       return [1, [0, _cA_, [0, res0_312, 0]]];
      case 1:
       var arg0_313 = param[1], res0_314 = caml_call1(of_query_310, arg0_313);
       return [1, [0, _cB_, [0, res0_314, 0]]];
      default:
       var
        arg1_316 = param[2],
        arg0_315 = param[1],
        res0_317 = caml_call1(of_query_310, arg0_315),
        res1_318 = caml_call1(of_query_310, arg1_316);
       return [1, [0, _cC_, [0, res0_317, [0, res1_318, 0]]]];
    }
   }
   var
    Action = [0, sexp_of_t$3],
    _cD_ = [0, [0, cst_src_proc_ml, 1010, 31389, 31393]],
    _cE_ = [0, [0, cst_src_proc_ml, 1009, 31300, 31304]],
    _cF_ = [0, [0, cst_src_proc_ml, 1002, 31123, 31127]],
    _cG_ = [0, [0, cst_src_proc_ml, 1002, 31123, 31127]],
    _cH_ = [0, [0, cst_src_proc_ml, 1002, 31123, 31127]],
    _cI_ = [0, [0, cst_src_proc_ml, 1002, 31123, 31127]],
    _cJ_ = [0, [0, cst_src_proc_ml, 1002, 31123, 31127]],
    _cK_ = [0, [0, cst_src_proc_ml, 1039, 32203, 32207]],
    _cL_ = [0, [0, cst_src_proc_ml, 1029, 31912, 31916]],
    _cM_ = [0, [0, cst_src_proc_ml, 1029, 31912, 31916]],
    _cN_ = [0, [0, cst_src_proc_ml, 1031, 31954, 31962]],
    _cO_ = [0, [0, cst_src_proc_ml, 1030, 31929, 31935]],
    _cP_ = [0, [0, cst_src_proc_ml, 1029, 31912, 31916]],
    _cQ_ = [0, [0, cst_src_proc_ml, 1017, 31611, 31615]],
    _cR_ = [0, [0, cst_src_proc_ml, 1017, 31611, 31615]],
    _cS_ = [0, [0, cst_src_proc_ml, 1017, 31611, 31615]],
    _cT_ = [0, [0, cst_src_proc_ml, 1016, 31567, 31571]],
    _cU_ = [0, [0, cst_src_proc_ml, 1016, 31567, 31571]],
    _cV_ = [0, [0, cst_src_proc_ml, 1016, 31567, 31571]];
   function create$0(Query, f){
    function t_of_sexp(x_321){
     return caml_call3
             (Core_Map[127], [0, Query[1], Query[3]], Core[364], x_321);
    }
    function sexp_of_t(x_322){
     return caml_call3(Core_Map[126], [0, Query[2]], Core[363], x_322);
    }
    function equal(a_323, b_324){
     return caml_call4
             (Core_Map[130],
              [0],
              function(a_325, b_326){
               return caml_call2(Core[359], a_325, b_326);
              },
              a_323,
              b_324);
    }
    var Model = [0, t_of_sexp, sexp_of_t, equal];
    function sexp_of_t$0(x_327){
     return caml_call2(Action[1], Query[2], x_327);
    }
    var Action$0 = [0, sexp_of_t$0];
    function apply_action(_d4_, param, model, action){
     function add(model, q){
      return caml_call3
              (Core_Map[41],
               model,
               q,
               function(param){
                if(! param) return 1;
                var c = param[1];
                return c + 1 | 0;
               });
     }
     function remove(model, q){
      return caml_call3
              (Core_Map[40],
               model,
               q,
               function(param){
                if(! param) return 0;
                var c = param[1];
                return 1 === c ? 0 : [0, c - 1 | 0];
               });
     }
     switch(action[0]){
       case 0:
        var q = action[1]; return add(model, q);
       case 1:
        var q$0 = action[1]; return remove(model, q$0);
       default:
        var after = action[2], before = action[1];
        return add(remove(model, before), after);
     }
    }
    var
     _dX_ =
       caml_call5
        (state_machine0,
         0,
         Model,
         Action$0,
         caml_call1(Core_Map[4], [0, Query[3]]),
         apply_action);
    return caml_call3
            (Let_syntax$0[2][1],
             _cJ_,
             _dX_,
             function(pattern_syntax_328){
              var
               _dY_ =
                 caml_call3
                  (Let_syntax$0[2][4],
                   _cH_,
                   pattern_syntax_328,
                   function(param){
                    var pattern_syntax_330 = param[1];
                    return pattern_syntax_330;
                   }),
               _dZ_ = caml_call1(Let_syntax$0[2][3], _dY_);
              return caml_call3
                      (Let_syntax$0[2][1],
                       _cI_,
                       _dZ_,
                       function(queries){
                        var
                         _d0_ =
                           caml_call3
                            (Let_syntax$0[2][4],
                             _cF_,
                             pattern_syntax_328,
                             function(param){
                              var pattern_syntax_329 = param[2];
                              return pattern_syntax_329;
                             }),
                         _d1_ = caml_call1(Let_syntax$0[2][3], _d0_);
                        return caml_call3
                                (Let_syntax$0[2][1],
                                 _cG_,
                                 _d1_,
                                 function(inject){
                                  var
                                   _d2_ =
                                     caml_call3
                                      (assoc,
                                       Query,
                                       queries,
                                       function(query, count){return caml_call1(f, query);});
                                  return caml_call3
                                          (Let_syntax$0[2][1],
                                           _cE_,
                                           _d2_,
                                           function(responses){
                                            var
                                             _d3_ = caml_call2(Let_syntax$0[2][5], responses, inject);
                                            return caml_call3
                                                    (Let_syntax$0[2][6],
                                                     _cD_,
                                                     _d3_,
                                                     function(param){
                                                      var inject = param[2], responses = param[1];
                                                      return [0, responses, inject];
                                                     });
                                           });
                                 });
                       });
             });
   }
   function lookup$0(q_mod, t, query){
    var _dI_ = caml_call1(Let_syntax$0[1], t);
    return caml_call3
            (Let_syntax$0[2][1],
             _cV_,
             _dI_,
             function(pattern_syntax_335){
              var
               _dJ_ =
                 caml_call3
                  (Let_syntax$0[2][4],
                   _cT_,
                   pattern_syntax_335,
                   function(param){
                    var pattern_syntax_336 = param[2];
                    return pattern_syntax_336;
                   }),
               _dK_ = caml_call1(Let_syntax$0[2][3], _dJ_);
              return caml_call3
                      (Let_syntax$0[2][1],
                       _cU_,
                       _dK_,
                       function(inject){
                        var
                         _dL_ = caml_call2(Let_syntax$0[2][5], inject, query),
                         _dM_ =
                           [0,
                            caml_call3
                             (Let_syntax$0[2][4],
                              0,
                              _dL_,
                              function(param){
                               var query = param[2], inject = param[1];
                               return caml_call1(inject, [1, query]);
                              })],
                         _dN_ = caml_call2(Let_syntax$0[2][5], inject, query),
                         _dO_ =
                           [0,
                            caml_call3
                             (Let_syntax$0[2][4],
                              0,
                              _dN_,
                              function(param){
                               var query = param[2], inject = param[1];
                               return caml_call1(inject, [0, query]);
                              })],
                         _dP_ = caml_call4(Edge$0[2], _dO_, _dM_, 0, 0);
                        return caml_call3
                                (Let_syntax$0[2][1],
                                 _cS_,
                                 _dP_,
                                 function(pattern_syntax_337){
                                  var
                                   _dQ_ =
                                     caml_call3
                                      (Let_syntax$0[2][4],
                                       _cQ_,
                                       pattern_syntax_337,
                                       function(param){return 0;}),
                                   _dR_ = caml_call1(Let_syntax$0[2][3], _dQ_);
                                  return caml_call3
                                          (Let_syntax$0[2][1],
                                           _cR_,
                                           _dR_,
                                           function(param){
                                            var
                                             _dS_ =
                                               caml_call3
                                                (Let_syntax$0[2][6],
                                                 _cN_,
                                                 inject,
                                                 function(inject, prev, next){
                                                  if(! prev) return Ui_effect[1];
                                                  var prev$0 = prev[1];
                                                  return caml_call1(inject, [2, prev$0, next]);
                                                 }),
                                             _dT_ =
                                               caml_call3
                                                (Let_syntax$0[2][1],
                                                 _cO_,
                                                 _dS_,
                                                 function(callback){
                                                  return caml_call3(Edge$0[5], q_mod, query, callback);
                                                 });
                                            return caml_call3
                                                    (Let_syntax$0[2][1],
                                                     _cP_,
                                                     _dT_,
                                                     function(pattern_syntax_344){
                                                      var
                                                       _dU_ =
                                                         caml_call3
                                                          (Let_syntax$0[2][4],
                                                           _cL_,
                                                           pattern_syntax_344,
                                                           function(param){return 0;}),
                                                       _dV_ = caml_call1(Let_syntax$0[2][3], _dU_);
                                                      return caml_call3
                                                              (Let_syntax$0[2][1],
                                                               _cM_,
                                                               _dV_,
                                                               function(param){
                                                                var _dW_ = caml_call2(Let_syntax$0[2][5], t, query);
                                                                return caml_call3
                                                                        (Let_syntax$0[2][6],
                                                                         _cK_,
                                                                         _dW_,
                                                                         function(param){
                                                                          var query = param[2], t = param[1], responses = t[1];
                                                                          return caml_call2(Core_Map[42], responses, query);
                                                                         });
                                                               });
                                                     });
                                           });
                                 });
                       });
             });
   }
   var
    Memo = [0, Action, create$0, lookup$0],
    _cW_ = [0, [0, cst_src_proc_ml, 1057, 32558, 32566]],
    _cX_ = [0, [0, cst_src_proc_ml, 1056, 32533, 32541]],
    _cY_ = [0, [0, cst_src_proc_ml, 1055, 32508, 32516]],
    _cZ_ = [0, [0, cst_src_proc_ml, 1064, 32671, 32679]],
    _c0_ = [0, [0, cst_src_proc_ml, 1063, 32646, 32654]];
   function map2(a, b, f){
    return caml_call3
            (Let_syntax$0[2][1],
             _cY_,
             a,
             function(let_syntax_352){
              return caml_call3
                      (Let_syntax$0[2][1],
                       _cX_,
                       b,
                       function(b){
                        var
                         _dH_ = caml_call2(Let_syntax$0[2][5], let_syntax_352, b);
                        return caml_call3
                                (Let_syntax$0[2][6],
                                 _cW_,
                                 _dH_,
                                 function(param){
                                  var b = param[2], a = param[1];
                                  return caml_call2(f, a, b);
                                 });
                       });
             });
   }
   var
    map$0 =
      [0,
       -198771759,
       function(a, f){
        return caml_call3
                (Let_syntax$0[2][1],
                 _c0_,
                 a,
                 function(a){
                  return caml_call3
                          (Let_syntax$0[2][6],
                           _cZ_,
                           a,
                           function(a){return caml_call1(f, a);});
                 });
       }],
    include = caml_call1(Base_Applicative[12], [0, const$0, map2, map$0]),
    return$0 = include[1],
    map$1 = include[2],
    both$0 = include[3],
    symbol$1 = include[4],
    symbol$2 = include[5],
    symbol$3 = include[6],
    symbol_map$0 = include[7],
    apply = include[8],
    map2$0 = include[9],
    Applicative_infix = include[13],
    _c1_ = [0, [0, cst_src_proc_ml, 1077, 32877, 32883]],
    _c2_ = [0, [0, cst_src_proc_ml, 1076, 32852, 32858]],
    _c3_ = [0, [0, cst_src_proc_ml, 1075, 32827, 32833]],
    _c4_ = [0, [0, cst_src_proc_ml, 1085, 33051, 33057]],
    _c5_ = [0, [0, cst_src_proc_ml, 1084, 33026, 33032]],
    _c6_ = [0, [0, cst_src_proc_ml, 1083, 33001, 33007]],
    _c7_ = [0, [0, cst_src_proc_ml, 1082, 32976, 32982]],
    _c8_ = [0, [0, cst_src_proc_ml, 1094, 33256, 33262]],
    _c9_ = [0, [0, cst_src_proc_ml, 1093, 33231, 33237]],
    _c__ = [0, [0, cst_src_proc_ml, 1092, 33206, 33212]],
    _c$_ = [0, [0, cst_src_proc_ml, 1091, 33181, 33187]],
    _da_ = [0, [0, cst_src_proc_ml, 1090, 33156, 33162]],
    _db_ = [0, [0, cst_src_proc_ml, 1104, 33492, 33498]],
    _dc_ = [0, [0, cst_src_proc_ml, 1103, 33467, 33473]],
    _dd_ = [0, [0, cst_src_proc_ml, 1102, 33442, 33448]],
    _de_ = [0, [0, cst_src_proc_ml, 1101, 33417, 33423]],
    _df_ = [0, [0, cst_src_proc_ml, 1100, 33392, 33398]],
    _dg_ = [0, [0, cst_src_proc_ml, 1099, 33367, 33373]],
    _dh_ = [0, [0, cst_src_proc_ml, 1115, 33759, 33765]],
    _di_ = [0, [0, cst_src_proc_ml, 1114, 33734, 33740]],
    _dj_ = [0, [0, cst_src_proc_ml, 1113, 33709, 33715]],
    _dk_ = [0, [0, cst_src_proc_ml, 1112, 33684, 33690]],
    _dl_ = [0, [0, cst_src_proc_ml, 1111, 33659, 33665]],
    _dm_ = [0, [0, cst_src_proc_ml, 1110, 33634, 33640]],
    _dn_ = [0, [0, cst_src_proc_ml, 1109, 33609, 33615]];
   function map3$0(t1, t2, t3, f){
    return caml_call3
            (Let_syntax$0[2][1],
             _c3_,
             t1,
             function(t1){
              return caml_call3
                      (Let_syntax$0[2][1],
                       _c2_,
                       t2,
                       function(t2){
                        return caml_call3
                                (Let_syntax$0[2][1],
                                 _c1_,
                                 t3,
                                 function(t3){
                                  return caml_call1
                                          (read, caml_call4(Bonsai_Value[16], t1, t2, t3, f));
                                 });
                       });
             });
   }
   function map4$0(t1, t2, t3, t4, f){
    return caml_call3
            (Let_syntax$0[2][1],
             _c7_,
             t1,
             function(t1){
              return caml_call3
                      (Let_syntax$0[2][1],
                       _c6_,
                       t2,
                       function(t2){
                        return caml_call3
                                (Let_syntax$0[2][1],
                                 _c5_,
                                 t3,
                                 function(t3){
                                  return caml_call3
                                          (Let_syntax$0[2][1],
                                           _c4_,
                                           t4,
                                           function(t4){
                                            return caml_call1
                                                    (read, caml_call5(Bonsai_Value[17], t1, t2, t3, t4, f));
                                           });
                                 });
                       });
             });
   }
   function map5$0(t1, t2, t3, t4, t5, f){
    return caml_call3
            (Let_syntax$0[2][1],
             _da_,
             t1,
             function(t1){
              return caml_call3
                      (Let_syntax$0[2][1],
                       _c$_,
                       t2,
                       function(t2){
                        return caml_call3
                                (Let_syntax$0[2][1],
                                 _c__,
                                 t3,
                                 function(t3){
                                  return caml_call3
                                          (Let_syntax$0[2][1],
                                           _c9_,
                                           t4,
                                           function(t4){
                                            return caml_call3
                                                    (Let_syntax$0[2][1],
                                                     _c8_,
                                                     t5,
                                                     function(t5){
                                                      return caml_call1
                                                              (read, caml_call6(Bonsai_Value[18], t1, t2, t3, t4, t5, f));
                                                     });
                                           });
                                 });
                       });
             });
   }
   function map6$0(t1, t2, t3, t4, t5, t6, f){
    return caml_call3
            (Let_syntax$0[2][1],
             _dg_,
             t1,
             function(t1){
              return caml_call3
                      (Let_syntax$0[2][1],
                       _df_,
                       t2,
                       function(t2){
                        return caml_call3
                                (Let_syntax$0[2][1],
                                 _de_,
                                 t3,
                                 function(t3){
                                  return caml_call3
                                          (Let_syntax$0[2][1],
                                           _dd_,
                                           t4,
                                           function(t4){
                                            return caml_call3
                                                    (Let_syntax$0[2][1],
                                                     _dc_,
                                                     t5,
                                                     function(t5){
                                                      return caml_call3
                                                              (Let_syntax$0[2][1],
                                                               _db_,
                                                               t6,
                                                               function(t6){
                                                                return caml_call1
                                                                        (read,
                                                                         caml_call7(Bonsai_Value[19], t1, t2, t3, t4, t5, t6, f));
                                                               });
                                                     });
                                           });
                                 });
                       });
             });
   }
   function map7$0(t1, t2, t3, t4, t5, t6, t7, f){
    return caml_call3
            (Let_syntax$0[2][1],
             _dn_,
             t1,
             function(t1){
              return caml_call3
                      (Let_syntax$0[2][1],
                       _dm_,
                       t2,
                       function(t2){
                        return caml_call3
                                (Let_syntax$0[2][1],
                                 _dl_,
                                 t3,
                                 function(t3){
                                  return caml_call3
                                          (Let_syntax$0[2][1],
                                           _dk_,
                                           t4,
                                           function(t4){
                                            return caml_call3
                                                    (Let_syntax$0[2][1],
                                                     _dj_,
                                                     t5,
                                                     function(t5){
                                                      return caml_call3
                                                              (Let_syntax$0[2][1],
                                                               _di_,
                                                               t6,
                                                               function(t6){
                                                                return caml_call3
                                                                        (Let_syntax$0[2][1],
                                                                         _dh_,
                                                                         t7,
                                                                         function(t7){
                                                                          return caml_call1
                                                                                  (read,
                                                                                   caml_call8(Bonsai_Value[20], t1, t2, t3, t4, t5, t6, t7, f));
                                                                         });
                                                               });
                                                     });
                                           });
                                 });
                       });
             });
   }
   var
    Mapn = [0, map2$0, map3$0, map4$0, map5$0, map6$0, map7$0],
    map2$1 = Mapn[1],
    map3$1 = Mapn[2],
    map4$1 = Mapn[3],
    map5$1 = Mapn[4],
    map6$1 = Mapn[5],
    map7$1 = Mapn[6],
    _do_ = [0, [0, cst_src_proc_ml, 1147, 34930, 34936]],
    _dp_ = [0, [0, cst_src_proc_ml, 1146, 34907, 34913]],
    _dq_ = [0, [0, cst_src_proc_ml, 1154, 35082, 35088]],
    _dr_ = [0, [0, cst_src_proc_ml, 1153, 35059, 35065]];
   function all(param){
    if(! param) return caml_call1(return$0, 0);
    var _dB_ = param[2], t1 = param[1];
    if(! _dB_) return caml_call2(map$1, t1, function(a1){return [0, a1, 0];});
    var _dC_ = _dB_[2], t2 = _dB_[1];
    if(! _dC_)
     return caml_call3
             (map2$1, t1, t2, function(a1, a2){return [0, a1, [0, a2, 0]];});
    var _dD_ = _dC_[2], t3 = _dC_[1];
    if(! _dD_)
     return caml_call4
             (map3$1,
              t1,
              t2,
              t3,
              function(a1, a2, a3){return [0, a1, [0, a2, [0, a3, 0]]];});
    var _dE_ = _dD_[2], t4 = _dD_[1];
    if(! _dE_)
     return caml_call5
             (map4$1,
              t1,
              t2,
              t3,
              t4,
              function(a1, a2, a3, a4){
               return [0, a1, [0, a2, [0, a3, [0, a4, 0]]]];
              });
    var _dF_ = _dE_[2], t5 = _dE_[1];
    if(! _dF_)
     return caml_call6
             (map5$1,
              t1,
              t2,
              t3,
              t4,
              t5,
              function(a1, a2, a3, a4, a5){
               return [0, a1, [0, a2, [0, a3, [0, a4, [0, a5, 0]]]]];
              });
    var _dG_ = _dF_[2], t6 = _dF_[1];
    if(! _dG_)
     return caml_call7
             (map6$1,
              t1,
              t2,
              t3,
              t4,
              t5,
              t6,
              function(a1, a2, a3, a4, a5, a6){
               return [0, a1, [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, 0]]]]]];
              });
    var t7 = _dG_[1];
    if(! _dG_[2])
     return caml_call8
             (map7$1,
              t1,
              t2,
              t3,
              t4,
              t5,
              t6,
              t7,
              function(a1, a2, a3, a4, a5, a6, a7){
               return [0,
                       a1,
                       [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, [0, a7, 0]]]]]]];
              });
    var
     rest = _dG_[2],
     left =
       caml_call8
        (map7$1,
         t1,
         t2,
         t3,
         t4,
         t5,
         t6,
         t7,
         function(a1, a2, a3, a4, a5, a6, a7){
          return [0,
                  a1,
                  [0, a2, [0, a3, [0, a4, [0, a5, [0, a6, [0, a7, 0]]]]]]];
         }),
     right = all(rest);
    return caml_call3
            (map2$1,
             left,
             right,
             function(left, right){return caml_call2(Core[155], left, right);});
   }
   function reduce_balanced(xs, f){
    return caml_call2
            (Core_List[108],
             xs,
             function(a, b){
              return caml_call3
                      (Let_syntax$0[2][1],
                       _dp_,
                       a,
                       function(a){
                        return caml_call3
                                (Let_syntax$0[2][1],
                                 _do_,
                                 b,
                                 function(b){return caml_call2(f, a, b);});
                       });
             });
   }
   function fold_right(xs, f, init){
    var _dA_ = caml_call1(read, init);
    return caml_call3
            (Core_List[99],
             xs,
             function(a, b){
              return caml_call3
                      (Let_syntax$0[2][1],
                       _dr_,
                       a,
                       function(a){
                        return caml_call3
                                (Let_syntax$0[2][1],
                                 _dq_,
                                 b,
                                 function(b){return caml_call2(f, a, b);});
                       });
             },
             _dA_);
   }
   function all_unit(xs){
    return caml_call2(map$1, all(xs), function(param){return 0;});
   }
   function all_map(map_of_computations){
    var
     _dx_ = caml_call1(Core_Map[3], map_of_computations),
     _dy_ = caml_call1(Core_Map[8], _dx_),
     _dz_ = caml_call2(Core_Map[78], 0, map_of_computations);
    return caml_call2
            (map$1,
             all
              (caml_call2
                (Core_List[50],
                 _dz_,
                 function(param){
                  var data = param[2], key = param[1];
                  return caml_call2
                          (map$1, data, caml_call1(Core_Tuple[1][6], key));
                 })),
             _dy_);
   }
   var
    symbol$4 = Applicative_infix[1],
    symbol$5 = Applicative_infix[2],
    symbol$6 = Applicative_infix[3],
    symbol_map$1 = Applicative_infix[4],
    map2$2 = Mapn[1],
    map3$2 = Mapn[2],
    map4$2 = Mapn[3],
    map5$2 = Mapn[4],
    map6$2 = Mapn[5],
    map7$2 = Mapn[6],
    Let_syntax$1 =
      [0,
       return$0,
       map$1,
       both$0,
       map2$2,
       map3$2,
       map4$2,
       map5$2,
       map6$2,
       map7$2],
    Let_syntax$2 =
      [0, return$0, symbol$4, symbol$5, symbol$6, symbol_map$1, Let_syntax$1],
    Computation =
      [0,
       return$0,
       map$1,
       both$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol_map$0,
       apply,
       Applicative_infix,
       Mapn,
       map2$1,
       map3$1,
       map4$1,
       map5$1,
       map6$1,
       map7$1,
       all,
       reduce_balanced,
       fold_right,
       all_unit,
       all_map,
       Let_syntax$2],
    Name_source = Bonsai_Value[1],
    return$1 = Bonsai_Value[2],
    map$2 = Bonsai_Value[3],
    both$1 = Bonsai_Value[4],
    symbol$7 = Bonsai_Value[5],
    symbol$8 = Bonsai_Value[6],
    symbol$9 = Bonsai_Value[7],
    symbol_map$2 = Bonsai_Value[8],
    apply$0 = Bonsai_Value[9],
    map2$3 = Bonsai_Value[10],
    all$0 = Bonsai_Value[11],
    all_unit$0 = Bonsai_Value[12],
    Applicative_infix$0 = Bonsai_Value[13],
    Open_on_rhs_intf = Bonsai_Value[14],
    Let_syntax$3 = Bonsai_Value[15],
    map3$3 = Bonsai_Value[16],
    map4$3 = Bonsai_Value[17],
    map5$3 = Bonsai_Value[18],
    map6$3 = Bonsai_Value[19],
    map7$3 = Bonsai_Value[20],
    named = Bonsai_Value[21],
    eval$0 = Bonsai_Value[23],
    of_incr = Bonsai_Value[24],
    return_exn = Bonsai_Value[25],
    _ds_ = Bonsai_Value[22];
   function cutoff$0(t, equal){return caml_call3(_ds_, 0, t, equal);}
   var
    Value =
      [0,
       Name_source,
       return$1,
       map$2,
       both$1,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol_map$2,
       apply$0,
       map2$3,
       all$0,
       all_unit$0,
       Applicative_infix$0,
       Open_on_rhs_intf,
       Let_syntax$3,
       map3$3,
       map4$3,
       map5$3,
       map6$3,
       map7$3,
       named,
       eval$0,
       of_incr,
       return_exn,
       cutoff$0];
   function conceal_value(_dw_){return _dw_;}
   function reveal_value(_dv_){return _dv_;}
   function conceal_computation(_du_){return _du_;}
   function reveal_computation(_dt_){return _dt_;}
   var
    Private =
      [0,
       conceal_value,
       reveal_value,
       conceal_computation,
       reveal_computation];
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Proc);
   var
    Bonsai_Proc =
      [0,
       read,
       sub,
       switch$0,
       Proc_incr,
       state_machine01,
       Computation_status,
       state_machine1,
       state_machine0,
       assoc,
       assoc_on,
       lazy,
       wrap,
       path,
       Let_syntax$0,
       pure,
       const$0,
       with_model_resetter,
       with_model_resetter$0,
       enum$0,
       scope_model,
       of_module1,
       of_module2,
       race_dynamic_model,
       of_module0,
       actor1,
       actor0,
       state,
       Toggle,
       toggle,
       toggle$0,
       state_opt,
       path_id,
       yoink,
       Edge$0,
       Effect_throttling,
       Incr,
       freeze,
       thunk,
       most_recent_some,
       most_recent_value_satisfying,
       previous_value,
       assoc_set,
       assoc_list,
       Dynamic_scope$0,
       Clock,
       Memo,
       Computation,
       Value,
       Private];
   runtime.caml_register_global(362, Bonsai_Proc, cst_Bonsai_Proc);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Simplify
//# unitInfo: Requires: Bonsai__Path, Core, Core__List, Core__Option, Core__Type_equal, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Univ_map
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Simplify = "Bonsai__Simplify",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Type_equal = global_data.Core__Type_equal,
    Bonsai_Path = global_data.Bonsai__Path,
    Core = global_data.Core,
    Core_Option = global_data.Core__Option,
    Core_List = global_data.Core__List,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Univ_map = global_data.Univ_map;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Simplify);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/simplify.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "simplify.ml");
   function sexp_of_t(of_a_001){return Core[534];}
   var
    include =
      caml_call1(caml_call1(Univ_map[23], Univ_map[1]), [0, sexp_of_t]),
    empty = include[4],
    is_empty = include[6],
    set = include[7],
    add_exn = include[13],
    remove = include[17],
    to_alist = include[20];
   function merge(a, b){
    var _O_ = caml_call1(to_alist, b);
    return caml_call3
            (Core_List[20],
             _O_,
             a,
             function(acc, param){
              var id = param[1];
              return caml_call3(set, acc, id, 0);
             });
   }
   function sexp_of_t$0(of_a_002){return of_a_002;}
   var
    Env = caml_call1(caml_call1(Univ_map[23], Univ_map[1]), [0, sexp_of_t$0]);
   function squash(other){
    if(typeof other === "number") return 0;
    if(0 === other[0]){var a = other[1]; return [0, a];}
    var gen = other[2], free = other[1];
    return caml_call1(is_empty, free) ? [0, caml_call1(gen, Env[4])] : other;
   }
   function map(a, f){
    if(typeof a === "number") return 0;
    if(0 === a[0]){var a$0 = a[1]; return [0, caml_call1(f, a$0)];}
    var gen = a[2], free = a[1];
    return [1, free, function(m){return caml_call1(f, caml_call1(gen, m));}];
   }
   function both(a, b){
    if(typeof a !== "number")
     if(0 === a[0]){
      var a$0 = a[1];
      if(typeof b !== "number"){
       if(0 === b[0]){var b$0 = b[1]; return [0, [0, a$0, b$0]];}
       var gen = b[2], free = b[1];
       return [1, free, function(m){return [0, a$0, caml_call1(gen, m)];}];
      }
     }
     else{
      var gen$0 = a[2], free_a = a[1];
      if(typeof b !== "number"){
       if(0 === b[0]){
        var b$1 = b[1];
        return [1,
                free_a,
                function(m){return [0, caml_call1(gen$0, m), b$1];}];
       }
       var gen_b = b[2], free_b = b[1], free$0 = merge(free_a, free_b);
       return [1,
               free$0,
               function(env){
                var _N_ = caml_call1(gen_b, env);
                return [0, caml_call1(gen$0, env), _N_];
               }];
      }
     }
    return 0;
   }
   function value_to_function(value, key_id, data_id){
    var value$0 = value;
    for(;;){
     var match = value$0[1];
     switch(match[0]){
       case 0:
        var r = match[1]; return [0, function(key, data){return r;}];
       case 1:
        return 0;
       case 2:
        var
         same_name = Core_Type_equal[8][9],
         match$0 = caml_call2(same_name, value$0[3], key_id),
         match$1 = caml_call2(same_name, value$0[3], data_id);
        return match$0
                ? [0, function(key, data){return key;}]
                : match$1
                  ? [0, function(key, data){return data;}]
                  : [1,
                    caml_call3(add_exn, empty, value$0[3], 0),
                    function(env, _M_, param){
                     return caml_call2(Env[11], env, value$0[3]);
                    }];
       case 3:
        var
         b = match[2],
         a = match[1],
         let_syntax_003 = value_to_function(a, key_id, data_id),
         let_syntax_004 = value_to_function(b, key_id, data_id);
        return map
                (both(let_syntax_003, let_syntax_004),
                 function(param, key, data){
                  var
                   b = param[2],
                   a = param[1],
                   _L_ = caml_call2(b, key, data);
                  return [0, caml_call2(a, key, data), _L_];
                 });
       case 4:
        var value$1 = match[1];
        if(! match[3]) return 0;
        value$0 = value$1;
        break;
       case 5:
        var f = match[2], t = match[1];
        return map
                (value_to_function(t, key_id, data_id),
                 function(a, key, data){
                  return caml_call1(f, caml_call2(a, key, data));
                 });
       case 6:
        var
         f$0 = match[3],
         t2 = match[2],
         t1 = match[1],
         let_syntax_007 = value_to_function(t1, key_id, data_id),
         let_syntax_008 = value_to_function(t2, key_id, data_id);
        return map
                (both(let_syntax_007, let_syntax_008),
                 function(param, key, data){
                  var
                   t2 = param[2],
                   t1 = param[1],
                   _K_ = caml_call2(t2, key, data);
                  return caml_call2(f$0, caml_call2(t1, key, data), _K_);
                 });
       case 7:
        var
         f$1 = match[4],
         t3 = match[3],
         t2$0 = match[2],
         t1$0 = match[1],
         let_syntax_010 = value_to_function(t1$0, key_id, data_id),
         let_syntax_011 = value_to_function(t2$0, key_id, data_id),
         let_syntax_012 = value_to_function(t3, key_id, data_id);
        return map
                (both(let_syntax_010, both(let_syntax_011, let_syntax_012)),
                 function(param, key, data){
                  var
                   match = param[2],
                   t3 = match[2],
                   t2 = match[1],
                   t1 = param[1],
                   _I_ = caml_call2(t3, key, data),
                   _J_ = caml_call2(t2, key, data);
                  return caml_call3(f$1, caml_call2(t1, key, data), _J_, _I_);
                 });
       case 8:
        var
         f$2 = match[5],
         t4 = match[4],
         t3$0 = match[3],
         t2$1 = match[2],
         t1$1 = match[1],
         let_syntax_014 = value_to_function(t1$1, key_id, data_id),
         let_syntax_015 = value_to_function(t2$1, key_id, data_id),
         let_syntax_016 = value_to_function(t3$0, key_id, data_id),
         let_syntax_017 = value_to_function(t4, key_id, data_id);
        return map
                (both
                  (let_syntax_014,
                   both(let_syntax_015, both(let_syntax_016, let_syntax_017))),
                 function(param, key, data){
                  var
                   _E_ = param[2],
                   match = _E_[2],
                   t4 = match[2],
                   t3 = match[1],
                   t2 = _E_[1],
                   t1 = param[1],
                   _F_ = caml_call2(t4, key, data),
                   _G_ = caml_call2(t3, key, data),
                   _H_ = caml_call2(t2, key, data);
                  return caml_call4
                          (f$2, caml_call2(t1, key, data), _H_, _G_, _F_);
                 });
       case 9:
        var
         f$3 = match[6],
         t5 = match[5],
         t4$0 = match[4],
         t3$1 = match[3],
         t2$2 = match[2],
         t1$2 = match[1],
         let_syntax_019 = value_to_function(t1$2, key_id, data_id),
         let_syntax_020 = value_to_function(t2$2, key_id, data_id),
         let_syntax_021 = value_to_function(t3$1, key_id, data_id),
         let_syntax_022 = value_to_function(t4$0, key_id, data_id),
         let_syntax_023 = value_to_function(t5, key_id, data_id);
        return map
                (both
                  (let_syntax_019,
                   both
                    (let_syntax_020,
                     both(let_syntax_021, both(let_syntax_022, let_syntax_023)))),
                 function(param, key, data){
                  var
                   _y_ = param[2],
                   _z_ = _y_[2],
                   match = _z_[2],
                   t5 = match[2],
                   t4 = match[1],
                   t3 = _z_[1],
                   t2 = _y_[1],
                   t1 = param[1],
                   _A_ = caml_call2(t5, key, data),
                   _B_ = caml_call2(t4, key, data),
                   _C_ = caml_call2(t3, key, data),
                   _D_ = caml_call2(t2, key, data);
                  return caml_call5
                          (f$3, caml_call2(t1, key, data), _D_, _C_, _B_, _A_);
                 });
       case 10:
        var
         f$4 = match[7],
         t6 = match[6],
         t5$0 = match[5],
         t4$1 = match[4],
         t3$2 = match[3],
         t2$3 = match[2],
         t1$3 = match[1],
         let_syntax_025 = value_to_function(t1$3, key_id, data_id),
         let_syntax_026 = value_to_function(t2$3, key_id, data_id),
         let_syntax_027 = value_to_function(t3$2, key_id, data_id),
         let_syntax_028 = value_to_function(t4$1, key_id, data_id),
         let_syntax_029 = value_to_function(t5$0, key_id, data_id),
         let_syntax_030 = value_to_function(t6, key_id, data_id);
        return map
                (both
                  (let_syntax_025,
                   both
                    (let_syntax_026,
                     both
                      (let_syntax_027,
                       both(let_syntax_028, both(let_syntax_029, let_syntax_030))))),
                 function(param, key, data){
                  var
                   _q_ = param[2],
                   _r_ = _q_[2],
                   _s_ = _r_[2],
                   match = _s_[2],
                   t6 = match[2],
                   t5 = match[1],
                   t4 = _s_[1],
                   t3 = _r_[1],
                   t2 = _q_[1],
                   t1 = param[1],
                   _t_ = caml_call2(t6, key, data),
                   _u_ = caml_call2(t5, key, data),
                   _v_ = caml_call2(t4, key, data),
                   _w_ = caml_call2(t3, key, data),
                   _x_ = caml_call2(t2, key, data);
                  return caml_call6
                          (f$4, caml_call2(t1, key, data), _x_, _w_, _v_, _u_, _t_);
                 });
       case 11:
        var
         f$5 = match[8],
         t7 = match[7],
         t6$0 = match[6],
         t5$1 = match[5],
         t4$2 = match[4],
         t3$3 = match[3],
         t2$4 = match[2],
         t1$4 = match[1],
         let_syntax_032 = value_to_function(t1$4, key_id, data_id),
         let_syntax_033 = value_to_function(t2$4, key_id, data_id),
         let_syntax_034 = value_to_function(t3$3, key_id, data_id),
         let_syntax_035 = value_to_function(t4$2, key_id, data_id),
         let_syntax_036 = value_to_function(t5$1, key_id, data_id),
         let_syntax_037 = value_to_function(t6$0, key_id, data_id),
         let_syntax_038 = value_to_function(t7, key_id, data_id);
        return map
                (both
                  (let_syntax_032,
                   both
                    (let_syntax_033,
                     both
                      (let_syntax_034,
                       both
                        (let_syntax_035,
                         both(let_syntax_036, both(let_syntax_037, let_syntax_038)))))),
                 function(param, key, data){
                  var
                   _g_ = param[2],
                   _h_ = _g_[2],
                   _i_ = _h_[2],
                   _j_ = _i_[2],
                   match = _j_[2],
                   t7 = match[2],
                   t6 = match[1],
                   t5 = _j_[1],
                   t4 = _i_[1],
                   t3 = _h_[1],
                   t2 = _g_[1],
                   t1 = param[1],
                   _k_ = caml_call2(t7, key, data),
                   _l_ = caml_call2(t6, key, data),
                   _m_ = caml_call2(t5, key, data),
                   _n_ = caml_call2(t4, key, data),
                   _o_ = caml_call2(t3, key, data),
                   _p_ = caml_call2(t2, key, data);
                  return caml_call7
                          (f$5,
                           caml_call2(t1, key, data),
                           _p_,
                           _o_,
                           _n_,
                           _m_,
                           _l_,
                           _k_);
                 });
       default: return 0;
     }
    }
   }
   function _a_(computation, key_id, data_id){
    if(typeof computation === "number")
     return [0, function(path, _f_, param){return path;}];
    switch(computation[0]){
      case 0:
       var value = computation[1];
       return map
               (value_to_function(value, key_id, data_id),
                function(f, path){return f;});
      case 5:
       var
        computation$0 = computation[3],
        via = computation[2],
        computation$1 = computation[1],
        match = _a_(computation$1, key_id, data_id),
        match$0 = _a_(computation$0, key_id, data_id);
       a:
       if(typeof match !== "number"){
        if(0 === match[0]){
         var from = match[1];
         if(typeof match$0 === "number") break a;
         if(0 !== match$0[0]){
          var
           gen = match$0[2],
           free = match$0[1],
           free$0 = caml_call2(remove, free, via),
           gen$0 =
             function(env, path, key, data){
              var
               from_path = caml_call2(Bonsai_Path[26], path, 0),
               into_path = caml_call2(Bonsai_Path[26], path, 1),
               _d_ = caml_call3(from, from_path, key, data),
               env$0 = caml_call3(Env[13], env, via, _d_);
              return caml_call4(gen, env$0, into_path, key, data);
             };
          return squash([1, free$0, gen$0]);
         }
        }
        else{
         var gen_a = match[2], free_a = match[1];
         if(typeof match$0 === "number") break a;
         if(0 !== match$0[0]){
          var
           gen_b = match$0[2],
           free_b = match$0[1],
           free_b$0 = caml_call2(remove, free_b, via),
           free$1 = merge(free_a, free_b$0),
           gen$1 =
             function(env, path, key, data){
              var
               from_path = caml_call2(Bonsai_Path[26], path, 0),
               into_path = caml_call2(Bonsai_Path[26], path, 1),
               _e_ = caml_call4(gen_a, env, from_path, key, data),
               env$0 = caml_call3(Env[13], env, via, _e_);
              return caml_call4(gen_b, env$0, into_path, key, data);
             };
          return squash([1, free$1, gen$1]);
         }
        }
        var r = match$0[1];
        return [0, r];
       }
       return 0;
      default: return 0;
    }
   }
   function computation_to_function(t, key_compare, key_id, data_id){
    var
     _b_ = caml_call2(Bonsai_Path[1][2], key_compare, key_id),
     make_path_element = caml_call1(Core[261], _b_),
     match = squash(_a_(t, key_id, data_id));
    if(typeof match !== "number" && 0 === match[0]){
     var f = match[1];
     return caml_call1
             (Core_Option[54],
              function(path, key, data){
               var
                _c_ = [0, caml_call1(make_path_element, key)],
                path$0 = caml_call2(Bonsai_Path[26], path, _c_);
               return caml_call3(f, path$0, key, data);
              });
    }
    return 0;
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Simplify);
   var Bonsai_Simplify = [0, computation_to_function];
   runtime.caml_register_global(17, Bonsai_Simplify, cst_Bonsai_Simplify);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Constant_fold
//# unitInfo: Requires: Base__Option, Bonsai__Fix_transform, Bonsai__Fix_transform_intf, Bonsai__Proc, Bonsai__Simplify, Bonsai__Value, CamlinternalLazy, Core, Core__Error, Core__Lazy, Core__Map, Core__Option, Core__Type_equal, Core__Unit, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Univ_map
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Constant_fold = "Bonsai__Constant_fold",
    cst_bonsai = "bonsai",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    name = "leaf1",
    Bonsai_Proc = global_data.Bonsai__Proc,
    Core_Map = global_data.Core__Map,
    Bonsai_Value = global_data.Bonsai__Value,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Core_Error = global_data.Core__Error,
    Core_Lazy = global_data.Core__Lazy,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Option = global_data.Base__Option,
    Bonsai_Simplify = global_data.Bonsai__Simplify,
    Core_Option = global_data.Core__Option,
    Core_Type_equal = global_data.Core__Type_equal,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Univ_map = global_data.Univ_map,
    Bonsai_Fix_transform_intf = global_data.Bonsai__Fix_transform_intf,
    Bonsai_Fix_transform = global_data.Bonsai__Fix_transform;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Constant_fold);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/constant_fold.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "constant_fold.ml");
   function sexp_of_t(param){return Core[148];}
   var
    Constants_in_scope =
      caml_call1(caml_call1(Univ_map[23], Univ_map[1]), [0, sexp_of_t]),
    Down = [0],
    cst_exception = "exception",
    cst_does_not_have_a_correspond =
      "does not have a corresponding computation",
    cst_switch_with_value = "switch with value";
   function wrap_value(here, name, v){
    return [0, v, here, caml_call2(Core_Type_equal[8][3], name, Core[148])];
   }
   function value_exception_folder(f){
    try{var _ab_ = caml_call1(f, 0); return _ab_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     return wrap_value(0, cst_exception, [12, exn]);
    }
   }
   function lazy_contents_if_value_is_cons(param){
    var value = param[1];
    switch(value[0]){
      case 0:
       var x = value[1]; return [0, [250, x]];
      case 12:
       var ex = value[1];
       return [0,
               [246,
                function(param){throw caml_maybe_attach_backtrace(ex, 0);}]];
      default: return 0;
    }
   }
   function contents_if_value_is_constant(value){
    var ___ = lazy_contents_if_value_is_cons(value);
    return caml_call2
            (Core_Option[30],
             ___,
             function(_$_){
              var _aa_ = caml_obj_tag(_$_);
              if(250 === _aa_) return _$_[1];
              if(246 !== _aa_ && 244 !== _aa_) return _$_;
              return caml_call1(CamlinternalLazy[2], _$_);
             });
   }
   function constant_or_value(with_id, f){
    return value_exception_folder
            (function(param){
              var match = caml_call1(f, 0);
              if(! match) return with_id;
              var constant = match[1];
              return [0, [0, constant], with_id[2], with_id[3]];
             });
   }
   function simplify_assoc_if_simpl(key_comparator, key_id, data_id, map, by){
    var
     _Z_ =
       caml_call4
        (Bonsai_Simplify[1], by, key_comparator[3][1], key_id, data_id);
    return caml_call2
            (Base_Option[27][4][3], _Z_, function(by){return [10, map, by];});
   }
   var
    open =
      caml_call1
       (caml_call1
         (Bonsai_Fix_transform[1],
          [0, Down, [0], Bonsai_Fix_transform_intf[1]]),
        function(Recurse){
         function _a_(param, assoc_on_t){
          var evaluated = param[2], constants_in_scope = param[1];
          if(typeof assoc_on_t !== "number")
           switch(assoc_on_t[0]){
             case 2:
              var
               input = assoc_on_t[6],
               reset = assoc_on_t[5],
               apply_action = assoc_on_t[4],
               dynamic_action = assoc_on_t[3],
               input_id = assoc_on_t[2],
               model = assoc_on_t[1],
               input$0 =
                 caml_call4
                   (Recurse[2],
                    [0, constants_in_scope, evaluated],
                    0,
                    264513256,
                    input)
                  [3];
              try{
               var match = contents_if_value_is_constant(input$0);
               if(match)
                var
                 input$1 = match[1],
                 apply_action$0 =
                   function(inject_dynamic, inject_static){
                    var
                     _W_ = [0, input$1],
                     _X_ =
                       caml_call2(apply_action, inject_static, inject_dynamic);
                    return function(_Y_){return caml_call2(_X_, _Y_, _W_);};
                   },
                 reset$0 =
                   function(inject_dynamic, inject_static){
                    return caml_call2(reset, inject_static, inject_dynamic);
                   },
                 _I_ = [3, model, dynamic_action, apply_action$0, reset$0];
               else
                var
                 _I_ =
                   [2,
                    model,
                    input_id,
                    dynamic_action,
                    apply_action,
                    reset,
                    input$0];
               return _I_;
              }
              catch(exn$0){
               var exn = caml_wrap_exception(exn$0);
               return [0, wrap_value(0, name, [12, exn])];
              }
             case 5:
              var
               here = assoc_on_t[4],
               into = assoc_on_t[3],
               via = assoc_on_t[2],
               from = assoc_on_t[1],
               from$0 =
                 caml_call4
                   (Recurse[1],
                    [0, constants_in_scope, evaluated],
                    0,
                    264513256,
                    from)
                  [3];
              if(typeof from$0 !== "number" && 0 === from$0[0]){
               var
                with_id = from$0[1],
                _J_ = lazy_contents_if_value_is_cons(with_id);
               if(caml_call1(Core_Option[58], _J_)){
                var
                 new_constants_in_scope =
                   caml_call3
                    (Constants_in_scope[13], constants_in_scope, via, with_id),
                 c$0 =
                   caml_call4
                     (Recurse[1],
                      [0, new_constants_in_scope, evaluated],
                      0,
                      264513256,
                      into)
                    [3];
                return c$0;
               }
              }
              var
               into$0 =
                 caml_call4
                   (Recurse[1],
                    [0, constants_in_scope, evaluated],
                    0,
                    264513256,
                    into)
                  [3];
              return [5, from$0, via, into$0, here];
             case 8:
              var
               by = assoc_on_t[6],
               data_id = assoc_on_t[5],
               key_id = assoc_on_t[3],
               key_comparator = assoc_on_t[2],
               map = assoc_on_t[1],
               map_v =
                 caml_call4
                   (Recurse[2],
                    [0, constants_in_scope, evaluated],
                    0,
                    264513256,
                    map)
                  [3],
               match$0 = map_v[1];
              switch(match$0[0]){
                case 0:
                 var
                  map$0 = match$0[1],
                  _K_ =
                    caml_call2
                     (Core_Map[56],
                      map$0,
                      function(key, data){
                       var
                        data_binding =
                          [5, caml_call1(Bonsai_Proc[16], data), data_id, by, 0];
                       return [5,
                               caml_call1(Bonsai_Proc[16], key),
                               key_id,
                               data_binding,
                               0];
                      }),
                  _L_ = caml_call1(Bonsai_Proc[47][21], _K_),
                  r =
                    caml_call4
                      (Recurse[1],
                       [0, constants_in_scope, evaluated],
                       0,
                       264513256,
                       _L_)
                     [3];
                 return r;
                case 12:
                 var
                  exn$0 = match$0[1],
                  _M_ = caml_call1(Bonsai_Value[25], exn$0);
                 return caml_call1(Bonsai_Proc[1], _M_);
                default:
                 var
                  by$0 =
                    caml_call4
                      (Recurse[1], [0, constants_in_scope, 1], 0, 264513256, by)
                     [3],
                  match$1 =
                    simplify_assoc_if_simpl
                     (key_comparator, key_id, data_id, map_v, by$0);
                 if(! match$1)
                  return [8,
                          map_v,
                          assoc_on_t[2],
                          assoc_on_t[3],
                          assoc_on_t[4],
                          assoc_on_t[5],
                          by$0];
                 var kind = match$1[1];
                 return kind;
              }
             case 9:
              var
               by$1 = assoc_on_t[9],
               data_id$0 = assoc_on_t[8],
               key_id$0 = assoc_on_t[4],
               key_comparator$0 = assoc_on_t[2],
               map$1 = assoc_on_t[1],
               map$2 =
                 caml_call4
                   (Recurse[2],
                    [0, constants_in_scope, evaluated],
                    0,
                    264513256,
                    map$1)
                  [3],
               by$2 =
                 caml_call4
                   (Recurse[1], [0, constants_in_scope, 1], 0, 264513256, by$1)
                  [3],
               match$2 =
                 simplify_assoc_if_simpl
                  (key_comparator$0, key_id$0, data_id$0, map$2, by$2);
              if(! match$2)
               return [9,
                       map$2,
                       assoc_on_t[2],
                       assoc_on_t[3],
                       assoc_on_t[4],
                       assoc_on_t[5],
                       assoc_on_t[6],
                       assoc_on_t[7],
                       assoc_on_t[8],
                       by$2,
                       assoc_on_t[10]];
              var kind$0 = match$2[1];
              return kind$0;
             case 11:
              var
               here$0 = assoc_on_t[3],
               arms = assoc_on_t[2],
               match$3 =
                 caml_call4
                   (Recurse[2],
                    [0, constants_in_scope, evaluated],
                    0,
                    264513256,
                    assoc_on_t[1])
                  [3],
               match$4 = match$3[1];
              switch(match$4[0]){
                case 0:
                 var
                  i = match$4[1],
                  match$5 = caml_call2(Core_Map[42], arms, i);
                 if(match$5){
                  var
                   c$1 = match$5[1],
                   r$0 =
                     caml_call4
                       (Recurse[1],
                        [0, constants_in_scope, evaluated],
                        0,
                        264513256,
                        c$1)
                      [3];
                  return r$0;
                 }
                 var
                  _N_ =
                    [0,
                     caml_call1
                      (Sexplib0_Sexp_conv[7], cst_does_not_have_a_correspond),
                     0],
                  _O_ = [0, [1, [0, caml_call1(Core[363], i), _N_]], 0],
                  _P_ =
                    [1,
                     [0,
                      caml_call1(Sexplib0_Sexp_conv[7], cst_switch_with_value),
                      _O_]],
                  _Q_ = caml_call1(Core_Error[18], _P_),
                  _R_ = caml_call1(Core_Error[26], _Q_),
                  _S_ = caml_call1(Bonsai_Value[25], _R_);
                 return caml_call1(Bonsai_Proc[1], _S_);
                case 12:
                 var
                  exn$1 = match$4[1],
                  _T_ = caml_call1(Bonsai_Value[25], exn$1);
                 return caml_call1(Bonsai_Proc[1], _T_);
                default:
                 var
                  arms$0 =
                    caml_call2
                     (Core_Map[55],
                      arms,
                      function(c){
                       var
                        r =
                          caml_call4
                            (Recurse[1], [0, constants_in_scope, 1], 0, 264513256, c)
                           [3];
                       return r;
                      });
                 return [11, match$3, arms$0, here$0];
              }
             case 12:
              var t = assoc_on_t[1];
              if(evaluated)
               return [12,
                       caml_call2
                        (Core_Lazy[25],
                         t,
                         function(t){
                          var
                           t$0 =
                             caml_call4
                               (Recurse[1], [0, constants_in_scope, 0], 0, 264513256, t)
                              [3];
                          return t$0;
                         })];
              var _U_ = caml_obj_tag(t);
              a:
              if(250 === _U_)
               var _V_ = t[1];
              else{
               if(246 !== _U_ && 244 !== _U_){var _V_ = t; break a;}
               var _V_ = caml_call1(CamlinternalLazy[2], t);
              }
              var
               c$2 =
                 caml_call4
                   (Recurse[1], [0, constants_in_scope, 0], 0, 264513256, _V_)
                  [3];
              return c$2;
           }
          var
           c =
             caml_call4
               (Recurse[1],
                [0, constants_in_scope, evaluated],
                0,
                -582119678,
                assoc_on_t)
              [3];
          return c;
         }
         function transform_v(constants_in_scope$0, param, value$1){
          var
           evaluated = constants_in_scope$0[2],
           constants_in_scope = constants_in_scope$0[1],
           value_with_id =
             caml_call4
               (Recurse[2],
                [0, constants_in_scope, evaluated],
                0,
                -582119678,
                value$1)
              [3],
           id = value_with_id[3],
           value = value_with_id[1];
          function rebuild(value){
           return [0, value, value_with_id[2], value_with_id[3]];
          }
          switch(value[0]){
            case 2:
             var
              match =
                caml_call2(Constants_in_scope[10], constants_in_scope, id);
             if(match)
              var value$0 = match[1], _b_ = value$0;
             else
              var _b_ = value_with_id;
             break;
            case 3:
             var
              b = value[2],
              a = value[1],
              _b_ =
                value_exception_folder
                 (function(param){
                   var
                    match = contents_if_value_is_constant(a),
                    match$0 = contents_if_value_is_constant(b);
                   if(match){
                    var l = match[1];
                    if(match$0)
                     var r = match$0[1], _H_ = [0, [0, l, r]];
                    else
                     var _H_ = [5, b, function(b){return [0, l, b];}];
                    var value$0 = _H_;
                   }
                   else if(match$0)
                    var
                     r$0 = match$0[1],
                     value$0 = [5, a, function(a){return [0, a, r$0];}];
                   else
                    var value$0 = value;
                   return rebuild(value$0);
                  });
             break;
            case 4:
             var
              was_wrapper_cutoff_added_by_le = value[3],
              equal = value[2],
              t = value[1],
              _b_ =
                value_exception_folder
                 (function(param){
                   var _E_ = contents_if_value_is_constant(t), match = t[1];
                   if(_E_)
                    var v = _E_[1], _F_ = [0, v];
                   else if(4 === match[0])
                    var
                     was_nested_cutoff_added_by_let = match[3],
                     inner_equal = match[2],
                     t$0 = match[1],
                     added_by_let_syntax =
                       was_wrapper_cutoff_added_by_le
                        ? was_nested_cutoff_added_by_let
                        : was_wrapper_cutoff_added_by_le,
                     _F_ =
                       [4,
                        t$0,
                        function(a, b){
                         var _G_ = caml_call2(inner_equal, a, b);
                         return _G_ ? _G_ : caml_call2(equal, a, b);
                        },
                        added_by_let_syntax];
                   else
                    var _F_ = value;
                   return rebuild(_F_);
                  });
             break;
            case 5:
             var
              f = value[2],
              t$0 = value[1],
              _b_ =
                constant_or_value
                 (value_with_id,
                  function(param){
                   var _D_ = contents_if_value_is_constant(t$0);
                   return caml_call2
                           (Base_Option[27][4][3],
                            _D_,
                            function(t1){return caml_call1(f, t1);});
                  });
             break;
            case 6:
             var
              f$0 = value[3],
              t2 = value[2],
              t1 = value[1],
              _b_ =
                constant_or_value
                 (value_with_id,
                  function(param){
                   var _B_ = contents_if_value_is_constant(t1);
                   return caml_call2
                           (Base_Option[27][4][2],
                            _B_,
                            function(t1){
                             var _C_ = contents_if_value_is_constant(t2);
                             return caml_call2
                                     (Base_Option[27][4][3],
                                      _C_,
                                      function(t2){return caml_call2(f$0, t1, t2);});
                            });
                  });
             break;
            case 7:
             var
              f$1 = value[4],
              t3 = value[3],
              t2$0 = value[2],
              t1$0 = value[1],
              _b_ =
                constant_or_value
                 (value_with_id,
                  function(param){
                   var _y_ = contents_if_value_is_constant(t1$0);
                   return caml_call2
                           (Base_Option[27][4][2],
                            _y_,
                            function(t1){
                             var _z_ = contents_if_value_is_constant(t2$0);
                             return caml_call2
                                     (Base_Option[27][4][2],
                                      _z_,
                                      function(t2){
                                       var _A_ = contents_if_value_is_constant(t3);
                                       return caml_call2
                                               (Base_Option[27][4][3],
                                                _A_,
                                                function(t3){return caml_call3(f$1, t1, t2, t3);});
                                      });
                            });
                  });
             break;
            case 8:
             var
              f$2 = value[5],
              t4 = value[4],
              t3$0 = value[3],
              t2$1 = value[2],
              t1$1 = value[1],
              _b_ =
                constant_or_value
                 (value_with_id,
                  function(param){
                   var _u_ = contents_if_value_is_constant(t1$1);
                   return caml_call2
                           (Base_Option[27][4][2],
                            _u_,
                            function(t1){
                             var _v_ = contents_if_value_is_constant(t2$1);
                             return caml_call2
                                     (Base_Option[27][4][2],
                                      _v_,
                                      function(t2){
                                       var _w_ = contents_if_value_is_constant(t3$0);
                                       return caml_call2
                                               (Base_Option[27][4][2],
                                                _w_,
                                                function(t3){
                                                 var _x_ = contents_if_value_is_constant(t4);
                                                 return caml_call2
                                                         (Base_Option[27][4][3],
                                                          _x_,
                                                          function(t4){return caml_call4(f$2, t1, t2, t3, t4);});
                                                });
                                      });
                            });
                  });
             break;
            case 9:
             var
              f$3 = value[6],
              t5 = value[5],
              t4$0 = value[4],
              t3$1 = value[3],
              t2$2 = value[2],
              t1$2 = value[1],
              _b_ =
                constant_or_value
                 (value_with_id,
                  function(param){
                   var _p_ = contents_if_value_is_constant(t1$2);
                   return caml_call2
                           (Base_Option[27][4][2],
                            _p_,
                            function(t1){
                             var _q_ = contents_if_value_is_constant(t2$2);
                             return caml_call2
                                     (Base_Option[27][4][2],
                                      _q_,
                                      function(t2){
                                       var _r_ = contents_if_value_is_constant(t3$1);
                                       return caml_call2
                                               (Base_Option[27][4][2],
                                                _r_,
                                                function(t3){
                                                 var _s_ = contents_if_value_is_constant(t4$0);
                                                 return caml_call2
                                                         (Base_Option[27][4][2],
                                                          _s_,
                                                          function(t4){
                                                           var _t_ = contents_if_value_is_constant(t5);
                                                           return caml_call2
                                                                   (Base_Option[27][4][3],
                                                                    _t_,
                                                                    function(t5){return caml_call5(f$3, t1, t2, t3, t4, t5);});
                                                          });
                                                });
                                      });
                            });
                  });
             break;
            case 10:
             var
              f$4 = value[7],
              t6 = value[6],
              t5$0 = value[5],
              t4$1 = value[4],
              t3$2 = value[3],
              t2$3 = value[2],
              t1$3 = value[1],
              _b_ =
                constant_or_value
                 (value_with_id,
                  function(param){
                   var _j_ = contents_if_value_is_constant(t1$3);
                   return caml_call2
                           (Base_Option[27][4][2],
                            _j_,
                            function(t1){
                             var _k_ = contents_if_value_is_constant(t2$3);
                             return caml_call2
                                     (Base_Option[27][4][2],
                                      _k_,
                                      function(t2){
                                       var _l_ = contents_if_value_is_constant(t3$2);
                                       return caml_call2
                                               (Base_Option[27][4][2],
                                                _l_,
                                                function(t3){
                                                 var _m_ = contents_if_value_is_constant(t4$1);
                                                 return caml_call2
                                                         (Base_Option[27][4][2],
                                                          _m_,
                                                          function(t4){
                                                           var _n_ = contents_if_value_is_constant(t5$0);
                                                           return caml_call2
                                                                   (Base_Option[27][4][2],
                                                                    _n_,
                                                                    function(t5){
                                                                     var _o_ = contents_if_value_is_constant(t6);
                                                                     return caml_call2
                                                                             (Base_Option[27][4][3],
                                                                              _o_,
                                                                              function(t6){
                                                                               return caml_call6(f$4, t1, t2, t3, t4, t5, t6);
                                                                              });
                                                                    });
                                                          });
                                                });
                                      });
                            });
                  });
             break;
            case 11:
             var
              f$5 = value[8],
              t7 = value[7],
              t6$0 = value[6],
              t5$1 = value[5],
              t4$2 = value[4],
              t3$3 = value[3],
              t2$4 = value[2],
              t1$4 = value[1],
              _b_ =
                constant_or_value
                 (value_with_id,
                  function(param){
                   var _c_ = contents_if_value_is_constant(t1$4);
                   return caml_call2
                           (Base_Option[27][4][2],
                            _c_,
                            function(t1){
                             var _d_ = contents_if_value_is_constant(t2$4);
                             return caml_call2
                                     (Base_Option[27][4][2],
                                      _d_,
                                      function(t2){
                                       var _e_ = contents_if_value_is_constant(t3$3);
                                       return caml_call2
                                               (Base_Option[27][4][2],
                                                _e_,
                                                function(t3){
                                                 var _f_ = contents_if_value_is_constant(t4$2);
                                                 return caml_call2
                                                         (Base_Option[27][4][2],
                                                          _f_,
                                                          function(t4){
                                                           var _g_ = contents_if_value_is_constant(t5$1);
                                                           return caml_call2
                                                                   (Base_Option[27][4][2],
                                                                    _g_,
                                                                    function(t5){
                                                                     var _h_ = contents_if_value_is_constant(t6$0);
                                                                     return caml_call2
                                                                             (Base_Option[27][4][2],
                                                                              _h_,
                                                                              function(t6){
                                                                               var _i_ = contents_if_value_is_constant(t7);
                                                                               return caml_call2
                                                                                       (Base_Option[27][4][3],
                                                                                        _i_,
                                                                                        function(t7){
                                                                                         return caml_call7(f$5, t1, t2, t3, t4, t5, t6, t7);
                                                                                        });
                                                                              });
                                                                    });
                                                          });
                                                });
                                      });
                            });
                  });
             break;
            default: var _b_ = value_with_id;
          }
          return [0, 0, 0, _b_];
         }
         function transform_c(constants_in_scope, param, c){return [0, 0, 0, _a_(constants_in_scope, c)];
         }
         return [0, transform_c, transform_v];
        }),
    transform_c = open[1];
   function constant_fold(c){
    var r = caml_call3(transform_c, [0, Constants_in_scope[4], 0], 0, c)[3];
    return r;
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Constant_fold);
   var Bonsai_Constant_fold = [0, constant_fold];
   runtime.caml_register_global
    (30, Bonsai_Constant_fold, cst_Bonsai_Constant_fold);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Flatten_values
//# unitInfo: Requires: Bonsai__Transform, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Flatten_values = "Bonsai__Flatten_values",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bonsai_Transform = global_data.Bonsai__Transform,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Flatten_values);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/flatten_values.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "flatten_values.ml");
   function value_map(context, _a_, param){
    var id = param[3], here = param[2], value = param[1];
    a:
    {
     switch(value[0]){
       case 3:
        var _b_ = value[2][1];
        if(3 === _b_[0]){
         var t2 = _b_[1], t1 = value[1], _c_ = _b_[2][1];
         if(3 === _c_[0]){
          var t3$0 = _c_[1], _e_ = _c_[2][1];
          if(3 === _e_[0]){
           var t4$0 = _e_[1], _g_ = _e_[2][1];
           if(3 === _g_[0]){
            var t5$0 = _g_[1], match = _g_[2][1];
            if(3 === match[0])
             var
              t7 = match[2],
              t6$0 = match[1],
              _i_ =
                [11,
                 t1,
                 t2,
                 t3$0,
                 t4$0,
                 t5$0,
                 t6$0,
                 t7,
                 function(t1, t2, t3, t4, t5, t6, t7){
                  return [0,
                          t1,
                          [0, t2, [0, t3, [0, t4, [0, t5, [0, t6, t7]]]]]];
                 }];
            else
             var
              t6 = _g_[2],
              _i_ =
                [10,
                 t1,
                 t2,
                 t3$0,
                 t4$0,
                 t5$0,
                 t6,
                 function(t1, t2, t3, t4, t5, t6){
                  return [0, t1, [0, t2, [0, t3, [0, t4, [0, t5, t6]]]]];
                 }];
            var _h_ = _i_;
           }
           else
            var
             t5 = _e_[2],
             _h_ =
               [9,
                t1,
                t2,
                t3$0,
                t4$0,
                t5,
                function(t1, t2, t3, t4, t5){
                 return [0, t1, [0, t2, [0, t3, [0, t4, t5]]]];
                }];
           var _f_ = _h_;
          }
          else
           var
            t4 = _c_[2],
            _f_ =
              [8,
               t1,
               t2,
               t3$0,
               t4,
               function(t1, t2, t3, t4){return [0, t1, [0, t2, [0, t3, t4]]];}];
          var _d_ = _f_;
         }
         else
          var
           t3 = _b_[2],
           _d_ =
             [7,
              t1,
              t2,
              t3,
              function(t1, t2, t3){return [0, t1, [0, t2, t3]];}];
         var value$0 = _d_;
         break a;
        }
        break;
       case 5:
        var _j_ = value[1][1];
        if(3 === _j_[0]){
         var t1$0 = _j_[1], _k_ = _j_[2][1];
         if(3 === _k_[0]){
          var t2$1 = _k_[1], _m_ = _k_[2][1];
          if(3 === _m_[0]){
           var t3$2 = _m_[1], _o_ = _m_[2][1];
           if(3 === _o_[0]){
            var t4$2 = _o_[1], _q_ = _o_[2][1];
            if(3 === _q_[0]){
             var t5$2 = _q_[1], match$0 = _q_[2][1];
             if(3 === match$0[0])
              var
               f$4 = value[2],
               t7$0 = match$0[2],
               t6$2 = match$0[1],
               _s_ =
                 [11,
                  t1$0,
                  t2$1,
                  t3$2,
                  t4$2,
                  t5$2,
                  t6$2,
                  t7$0,
                  function(t1, t2, t3, t4, t5, t6, t7){
                   return caml_call1
                           (f$4,
                            [0, t1, [0, t2, [0, t3, [0, t4, [0, t5, [0, t6, t7]]]]]]);
                  }];
             else
              var
               f$3 = value[2],
               t6$1 = _q_[2],
               _s_ =
                 [10,
                  t1$0,
                  t2$1,
                  t3$2,
                  t4$2,
                  t5$2,
                  t6$1,
                  function(t1, t2, t3, t4, t5, t6){
                   return caml_call1
                           (f$3, [0, t1, [0, t2, [0, t3, [0, t4, [0, t5, t6]]]]]);
                  }];
             var _r_ = _s_;
            }
            else
             var
              f$2 = value[2],
              t5$1 = _o_[2],
              _r_ =
                [9,
                 t1$0,
                 t2$1,
                 t3$2,
                 t4$2,
                 t5$1,
                 function(t1, t2, t3, t4, t5){
                  return caml_call1
                          (f$2, [0, t1, [0, t2, [0, t3, [0, t4, t5]]]]);
                 }];
            var _p_ = _r_;
           }
           else
            var
             f$1 = value[2],
             t4$1 = _m_[2],
             _p_ =
               [8,
                t1$0,
                t2$1,
                t3$2,
                t4$1,
                function(t1, t2, t3, t4){
                 return caml_call1(f$1, [0, t1, [0, t2, [0, t3, t4]]]);
                }];
           var _n_ = _p_;
          }
          else
           var
            f$0 = value[2],
            t3$1 = _k_[2],
            _n_ =
              [7,
               t1$0,
               t2$1,
               t3$1,
               function(t1, t2, t3){
                return caml_call1(f$0, [0, t1, [0, t2, t3]]);
               }];
          var _l_ = _n_;
         }
         else
          var
           f = value[2],
           t2$0 = _j_[2],
           _l_ =
             [6,
              t1$0,
              t2$0,
              function(t1, t2){return caml_call1(f, [0, t1, t2]);}];
         var value$0 = _l_;
         break a;
        }
        break;
     }
     var value$0 = value;
    }
    return caml_call2(context[1], 0, [0, value$0, here, id]);
   }
   function computation_map(context, param, computation){return caml_call2(context[1], 0, computation);
   }
   function flatten_values(t){
    return caml_call4
            (Bonsai_Transform[4], [0, computation_map], [0, value_map], 0, t);
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Flatten_values);
   var Bonsai_Flatten_values = [0, flatten_values];
   runtime.caml_register_global
    (12, Bonsai_Flatten_values, cst_Bonsai_Flatten_values);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Pre_process
//# unitInfo: Requires: Bonsai__Constant_fold, Bonsai__Flatten_values, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Pre_process = "Bonsai__Pre_process",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bonsai_Constant_fold = global_data.Bonsai__Constant_fold,
    Bonsai_Flatten_values = global_data.Bonsai__Flatten_values,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Pre_process);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/pre_process.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "pre_process.ml");
   function pre_process(t){
    var _a_ = caml_call1(Bonsai_Constant_fold[1], t);
    return caml_call1(Bonsai_Flatten_values[1], _a_);
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Pre_process);
   var Bonsai_Pre_process = [0, pre_process];
   runtime.caml_register_global
    (13, Bonsai_Pre_process, cst_Bonsai_Pre_process);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Skeleton
//# unitInfo: Requires: Bonsai__Meta, Bonsai__Node_path, CamlinternalLazy, CamlinternalOO, Core, Core__Fn, Core__Int, Core__Lazy, Core__List, Core__Map, Core__Option, Core__Source_code_position, Core__String, Core__Type_equal, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Assoc = "Assoc",
    cst_Assoc_on = "Assoc_on",
    cst_Assoc_simpl = "Assoc_simpl",
    cst_Bonsai_Skeleton = "Bonsai__Skeleton",
    cst_Constant = "Constant",
    cst_Cutoff = "Cutoff",
    cst_Exception = "Exception",
    cst_Fetch = "Fetch",
    cst_Identity = "Identity",
    cst_Incr = "Incr",
    cst_Lazy = "Lazy",
    cst_Leaf0 = "Leaf0",
    cst_Leaf01 = "Leaf01",
    cst_Leaf1 = "Leaf1",
    cst_Leaf_incr = "Leaf_incr",
    cst_Lifecycle = "Lifecycle",
    cst_Mapn = "Mapn",
    cst_Model_cutoff = "Model_cutoff",
    cst_Named = "Named",
    cst_Path = "Path",
    cst_Return = "Return",
    cst_Store = "Store",
    cst_Sub = "Sub",
    cst_Switch = "Switch",
    cst_With_model_resetter = "With_model_resetter",
    cst_Wrap = "Wrap",
    cst_added_by_let_syntax$0 = "added_by_let_syntax",
    cst_arms$0 = "arms",
    cst_assoc = "assoc",
    cst_assoc_on = "assoc_on",
    cst_assoc_simpl = "assoc_simpl",
    cst_bonsai = "bonsai",
    cst_bool = "bool",
    cst_by$1 = "by",
    cst_cmp_id$0 = "cmp_id",
    cst_computation = "computation",
    cst_computation_kind = "computation_kind",
    cst_constant = "constant",
    cst_cutoff = "cutoff",
    cst_data_id$1 = "data_id",
    cst_exception = "exception",
    cst_fetch = "fetch",
    cst_from$0 = "from",
    cst_here$1 = "here",
    cst_id$2 = "id",
    cst_identity = "identity",
    cst_incr$0 = "incr",
    cst_inject_id$0 = "inject_id",
    cst_inner$2 = "inner",
    cst_input$2 = "input",
    cst_inputs$0 = "inputs",
    cst_into$0 = "into",
    cst_io_key_id$0 = "io_key_id",
    cst_key_id$0 = "key_id",
    cst_kind$1 = "kind",
    cst_lazy$0 = "lazy",
    cst_lazy = "lazy_",
    cst_leaf0 = "leaf0",
    cst_leaf01 = "leaf01",
    cst_leaf1 = "leaf1",
    cst_leaf_incr = "leaf_incr",
    cst_lifecycle = "lifecycle",
    cst_list = "list",
    cst_map$2 = "map",
    cst_mapn = "mapn",
    cst_match$0 = "match_",
    cst_model_cmp_id$0 = "model_cmp_id",
    cst_model_cutoff = "model_cutoff",
    cst_model_id$0 = "model_id",
    cst_model_key_id$0 = "model_key_id",
    cst_named = "named",
    cst_node_path$1 = "node_path",
    cst_option = "option",
    cst_path = "path",
    cst_reset_id$0 = "reset_id",
    cst_return = "return",
    cst_source_code_position = "source_code_position",
    cst_store = "store",
    cst_sub = "sub",
    cst_switch = "switch",
    cst_t$3 = "t",
    cst_value$2 = "value",
    cst_value_kind = "value_kind",
    cst_via$0 = "via",
    cst_with_model_resetter = "with_model_resetter",
    cst_wrap = "wrap",
    caml_get_public_method = runtime.caml_get_public_method,
    caml_string_compare = runtime.caml_string_compare,
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    _a_ =
      [0,
       cst_source_code_position,
       cst_option,
       cst_node_path$1,
       cst_list,
       cst_lazy,
       cst_id$2,
       cst_bool],
    _b_ =
      [0,
       cst_value_kind,
       cst_value$2,
       cst_source_code_position,
       cst_option,
       cst_node_path$1,
       cst_list,
       cst_lazy,
       cst_id$2,
       cst_computation_kind,
       cst_computation,
       cst_bool],
    _c_ =
      [0,
       cst_bool,
       cst_list,
       cst_computation_kind,
       cst_lazy,
       cst_id$2,
       cst_node_path$1,
       cst_value_kind,
       cst_computation,
       cst_option,
       cst_value$2,
       cst_source_code_position],
    _d_ =
      [0,
       cst_bool,
       cst_computation,
       cst_computation_kind,
       cst_id$2,
       cst_lazy,
       cst_list,
       cst_node_path$1,
       cst_option,
       cst_source_code_position,
       cst_value$2,
       cst_value_kind],
    shared =
      [0, cst_computation, cst_computation_kind, cst_value$2, cst_value_kind],
    error_source_002 = "src/skeleton.ml.Value.t",
    error_source_006 = "src/skeleton.ml.Value.kind",
    error_source_031 = "src/skeleton.ml.Value.Minimal.t",
    error_source_056 = "src/skeleton.ml.Computation0.t",
    error_source_060 = "src/skeleton.ml.Computation0.kind",
    error_source_190 = "src/skeleton.ml.Computation0.Minimal.t",
    CamlinternalOO = global_data.CamlinternalOO,
    Core = global_data.Core,
    Core_Int = global_data.Core__Int,
    Core_Option = global_data.Core__Option,
    Core_List = global_data.Core__List,
    Core_Lazy = global_data.Core__Lazy,
    Core_Fn = global_data.Core__Fn,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Bonsai_Node_path = global_data.Bonsai__Node_path,
    Core_Map = global_data.Core__Map,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Core_String = global_data.Core__String,
    Bonsai_Meta = global_data.Bonsai__Meta,
    Core_Type_equal = global_data.Core__Type_equal,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Skeleton);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/skeleton.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "skeleton.ml");
   function finalize(node_path_builder){
    return [246,
            function(_el_){
             return caml_call1(Bonsai_Node_path[38], node_path_builder);
            }];
   }
   var
    of_int = Core_Int[62],
    to_int = Core_Int[63],
    t_of_sexp = Core_Int[81],
    sexp_of_t = Core_Int[82],
    to_string = Core_Int[84],
    compare = Core_Int[93],
    hash_fold_t = Core_Int[105],
    hash = Core_Int[106];
   function of_type_id(id){
    var
     _ej_ = caml_call1(Core_Type_equal[8][2], id),
     _ek_ = caml_call1(Core_Type_equal[8][11][2], _ej_);
    return caml_call1(Core_Int[81], _ek_);
   }
   function of_model_type_id(id){
    return of_type_id(caml_call1(Bonsai_Meta[1][1][4], id));
   }
   var
    _e_ = [],
    letrec_function_context = [],
    cst_id = cst_id$2,
    cst_here = cst_here$1,
    cst_kind = cst_kind$1,
    cst_node_path = cst_node_path$1,
    cst_inputs = cst_inputs$0,
    cst_added_by_let_syntax = cst_added_by_let_syntax$0,
    cst_t = cst_t$3;
   function t_of_sexp$0(x_003){
    var
     _ef_ =
       [0,
        cst_kind,
        1,
        kind_of_sexp,
        [0,
         cst_here,
         1,
         caml_call1(Core[467], Core_Source_code_position[37][1][11]),
         [0, cst_id, 1, t_of_sexp, 0]]],
     _eg_ =
       [0,
        cst_node_path,
        1,
        caml_call1(Core_Lazy[17], Bonsai_Node_path[9]),
        _ef_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             _e_[1],
             _eg_,
             function(param){
              return param !== cst_here$1
                      ? param
                        !== cst_id$2
                        ? param
                          !== cst_kind$1
                          ? param !== cst_node_path$1 ? -1 : 0
                          : 1
                        : 3
                      : 2;
             },
             0,
             function(param){
              var
               _eh_ = param[2],
               _ei_ = _eh_[2],
               id = _ei_[2][1],
               here = _ei_[1],
               kind = _eh_[1],
               node_path = param[1];
              return [0, node_path, kind, here, id];
             },
             x_003);
   }
   function kind_of_sexp(sexp_008){
    a:
    {
     if(0 === sexp_008[0]){
      var _d__ = sexp_008[1], _d$_ = caml_string_compare(_d__, cst_constant);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           if(0 <= _d$_){
            if(0 < _d$_){
             if(_d__ === cst_cutoff) break f;
             if(_d__ === cst_exception) break e;
             if(_d__ === cst_incr$0) break d;
             if(_d__ === cst_mapn) break c;
             if(_d__ !== cst_named) break a;
             break b;
            }
           }
           else if(_d__ !== cst_Constant){
            if(_d__ === cst_Cutoff) break f;
            if(_d__ === cst_Exception) break e;
            if(_d__ === cst_Incr) break d;
            if(_d__ === cst_Mapn) break c;
            if(_d__ !== cst_Named) break a;
            break b;
           }
           return 0;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[5],
                   letrec_function_context[1],
                   sexp_008);
         }
         return 1;
        }
        return 2;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5],
                letrec_function_context[1],
                sexp_008);
      }
      return 3;
     }
     var _ea_ = sexp_008[1];
     if(! _ea_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7],
               letrec_function_context[1],
               sexp_008);
     var _eb_ = _ea_[1];
     if(0 !== _eb_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6],
               letrec_function_context[1],
               sexp_008);
     var _ec_ = _eb_[1], _ed_ = caml_string_compare(_ec_, cst_constant);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          if(0 <= _ed_){
           if(0 < _ed_){
            if(_ec_ === cst_cutoff) break f;
            if(_ec_ === cst_exception) break e;
            if(_ec_ === cst_incr$0) break d;
            if(_ec_ === cst_mapn) break c;
            if(_ec_ !== cst_named) break a;
            break b;
           }
          }
          else if(_ec_ !== cst_Constant){
           if(_ec_ === cst_Cutoff) break f;
           if(_ec_ === cst_Exception) break e;
           if(_ec_ === cst_Incr) break d;
           if(_ec_ === cst_Mapn) break c;
           if(_ec_ !== cst_Named) break a;
           break b;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[3],
                   letrec_function_context[1],
                   sexp_008);
         }
         var sexps_009 = _ea_[2];
         return caml_call7
                 (Sexplib0_Sexp_conv_record[4],
                  letrec_function_context[1],
                  sexp_008,
                  [0,
                   cst_t,
                   1,
                   t_of_sexp$0,
                   [0, cst_added_by_let_syntax, 1, Core[310], 0]],
                  function(param){
                   return param !== cst_added_by_let_syntax$0
                           ? param !== cst_t$3 ? -1 : 0
                           : 1;
                  },
                  0,
                  function(param){
                   var added_by_let_syntax = param[2][1], t = param[1];
                   return [0, t, added_by_let_syntax];
                  },
                  sexps_009);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[3],
                 letrec_function_context[1],
                 sexp_008);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[3],
                letrec_function_context[1],
                sexp_008);
      }
      var
       sexps_011 = _ea_[2],
       _ee_ = [0, cst_inputs, 1, caml_call1(Core[432], t_of_sexp$0), 0];
      return caml_call7
              (Sexplib0_Sexp_conv_record[4],
               letrec_function_context[1],
               sexp_008,
               _ee_,
               function(param){return param !== cst_inputs$0 ? -1 : 0;},
               0,
               function(param){var inputs = param[1]; return [1, inputs];},
               sexps_011);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3],
              letrec_function_context[1],
              sexp_008);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[8],
             letrec_function_context[1],
             sexp_008);
   }
   caml_update_dummy(_e_, [0, error_source_002]);
   caml_update_dummy(letrec_function_context, [0, error_source_006]);
   var
    _f_ = [0, cst_id$2],
    _g_ = [0, cst_here$1],
    _h_ = [0, cst_kind$1],
    _i_ = [0, cst_node_path$1],
    _j_ = [0, cst_Constant],
    _k_ = [0, cst_Exception],
    _l_ = [0, cst_Incr],
    _m_ = [0, cst_Named],
    _n_ = [0, cst_added_by_let_syntax$0],
    _o_ = [0, cst_t$3],
    _p_ = [0, cst_Cutoff],
    _q_ = [0, cst_inputs$0],
    _r_ = [0, cst_Mapn];
   function sexp_of_t$0(param){
    var
     id_019 = param[4],
     here_017 = param[3],
     kind_015 = param[2],
     node_path_013 = param[1],
     arg_020 = caml_call1(sexp_of_t, id_019),
     bnds_012 = [0, [1, [0, _f_, [0, arg_020, 0]]], 0],
     arg_018 =
       caml_call2(Core[466], Core_Source_code_position[37][1][12], here_017),
     bnds_012$0 = [0, [1, [0, _g_, [0, arg_018, 0]]], bnds_012],
     arg_016 = sexp_of_kind(kind_015),
     bnds_012$1 = [0, [1, [0, _h_, [0, arg_016, 0]]], bnds_012$0],
     arg_014 = caml_call2(Core_Lazy[18], Bonsai_Node_path[10], node_path_013),
     bnds_012$2 = [0, [1, [0, _i_, [0, arg_014, 0]]], bnds_012$1];
    return [1, bnds_012$2];
   }
   function sexp_of_kind(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return _j_;
       case 1:
        return _k_;
       case 2:
        return _l_;
       default: return _m_;
     }
    if(0 === param[0]){
     var
      added_by_let_syntax_024 = param[2],
      t_022 = param[1],
      arg_025 = caml_call1(Core[309], added_by_let_syntax_024),
      bnds_021 = [0, [1, [0, _n_, [0, arg_025, 0]]], 0],
      arg_023 = sexp_of_t$0(t_022),
      bnds_021$0 = [0, [1, [0, _o_, [0, arg_023, 0]]], bnds_021];
     return [1, [0, _p_, bnds_021$0]];
    }
    var
     inputs_027 = param[1],
     arg_028 = caml_call2(Core[431], sexp_of_t$0, inputs_027),
     bnds_026 = [0, [1, [0, _q_, [0, arg_028, 0]]], 0];
    return [1, [0, _r_, bnds_026]];
   }
   var letrec_function_context$0 = [];
   caml_update_dummy(letrec_function_context$0, [0, error_source_031]);
   var
    _s_ = [0, cst_Exception],
    _t_ = [0, cst_Incr],
    _u_ = [0, cst_id$2],
    _v_ = [0, cst_Constant],
    _w_ = [0, "uid"],
    _x_ = [0, cst_Named],
    _y_ = [0, cst_added_by_let_syntax$0],
    _z_ = [0, cst_t$3],
    _A_ = [0, cst_Cutoff],
    _B_ = [0, cst_inputs$0],
    _C_ = [0, cst_Mapn],
    _D_ = [0, [11, "constant_", [2, 0, 0]], "constant_%s"],
    _E_ = [0, [11, "exception_", [2, 0, 0]], "exception_%s"],
    cst_incr = cst_incr$0,
    _F_ = [0, [12, 120, [2, 0, 0]], "x%s"],
    _G_ = [0, [11, "(cutoff ", [2, 0, [12, 41, 0]]], "(cutoff %s)"],
    _H_ = [0, " "],
    _I_ = [0, [11, "(mapn ", [2, 0, [12, 41, 0]]], "(mapn %s)"];
   function sexp_of_t$1(param){
    if(typeof param === "number") return 0 === param ? _s_ : _t_;
    switch(param[0]){
      case 0:
       var
        id_042 = param[1],
        arg_043 = caml_call1(sexp_of_t, id_042),
        bnds_041 = [0, [1, [0, _u_, [0, arg_043, 0]]], 0];
       return [1, [0, _v_, bnds_041]];
      case 1:
       var
        uid_045 = param[1],
        arg_046 = caml_call1(sexp_of_t, uid_045),
        bnds_044 = [0, [1, [0, _w_, [0, arg_046, 0]]], 0];
       return [1, [0, _x_, bnds_044]];
      case 2:
       var
        added_by_let_syntax_050 = param[2],
        t_048 = param[1],
        arg_051 = caml_call1(Core[309], added_by_let_syntax_050),
        bnds_047 = [0, [1, [0, _y_, [0, arg_051, 0]]], 0],
        arg_049 = sexp_of_t$1(t_048),
        bnds_047$0 = [0, [1, [0, _z_, [0, arg_049, 0]]], bnds_047];
       return [1, [0, _A_, bnds_047$0]];
      default:
       var
        inputs_053 = param[1],
        arg_054 = caml_call2(Core[431], sexp_of_t$1, inputs_053),
        bnds_052 = [0, [1, [0, _B_, [0, arg_054, 0]]], 0];
       return [1, [0, _C_, bnds_052]];
    }
   }
   function of_complete(complete){
    var match = complete[2];
    if(typeof match === "number")
     switch(match){
       case 0:
        return [0, complete[4]];
       case 1:
        return 0;
       case 2:
        return 1;
       default: return [1, complete[4]];
     }
    if(0 === match[0]){
     var added_by_let_syntax = match[2], t = match[1];
     return [2, of_complete(t), added_by_let_syntax];
    }
    var inputs = match[1];
    return [3, caml_call2(Core_List[50], inputs, of_complete)];
   }
   function minimal_sexp_of_t(t){return sexp_of_t$1(of_complete(t));}
   function inputs(param){
    var kind = param[2];
    if(typeof kind === "number") return 0;
    if(0 === kind[0]){var t = kind[1]; return [0, t, 0];}
    var inputs = kind[1];
    return inputs;
   }
   function of_value(initial_path, value){
    var letrec_function_context = [];
    function helper(current_path, param){
     var outer_id = param[3], here = param[2], value = param[1];
     switch(value[0]){
       case 0:
        var kind = 0; break;
       case 1:
        var kind = 2; break;
       case 2:
        var kind = 3; break;
       case 3:
        var
         t2 = value[2],
         t1 = value[1],
         kind =
           caml_call2
            (letrec_function_context[1],
             current_path,
             [0, [0, t1], [0, [0, t2], 0]]);
        break;
       case 4:
        var
         added_by_let_syntax = value[3],
         t = value[1],
         _d9_ = caml_call2(Bonsai_Node_path[36], current_path, 1),
         kind =
           [0,
            helper(caml_call1(Bonsai_Node_path[37], _d9_), t),
            added_by_let_syntax];
        break;
       case 5:
        var
         t$0 = value[1],
         kind =
           caml_call2
            (letrec_function_context[1], current_path, [0, [0, t$0], 0]);
        break;
       case 6:
        var
         t2$0 = value[2],
         t1$0 = value[1],
         kind =
           caml_call2
            (letrec_function_context[1],
             current_path,
             [0, [0, t1$0], [0, [0, t2$0], 0]]);
        break;
       case 7:
        var
         t3 = value[3],
         t2$1 = value[2],
         t1$1 = value[1],
         kind =
           caml_call2
            (letrec_function_context[1],
             current_path,
             [0, [0, t1$1], [0, [0, t2$1], [0, [0, t3], 0]]]);
        break;
       case 8:
        var
         t4 = value[4],
         t3$0 = value[3],
         t2$2 = value[2],
         t1$2 = value[1],
         kind =
           caml_call2
            (letrec_function_context[1],
             current_path,
             [0, [0, t1$2], [0, [0, t2$2], [0, [0, t3$0], [0, [0, t4], 0]]]]);
        break;
       case 9:
        var
         t5 = value[5],
         t4$0 = value[4],
         t3$1 = value[3],
         t2$3 = value[2],
         t1$3 = value[1],
         kind =
           caml_call2
            (letrec_function_context[1],
             current_path,
             [0,
              [0, t1$3],
              [0, [0, t2$3], [0, [0, t3$1], [0, [0, t4$0], [0, [0, t5], 0]]]]]);
        break;
       case 10:
        var
         t6 = value[6],
         t5$0 = value[5],
         t4$1 = value[4],
         t3$2 = value[3],
         t2$4 = value[2],
         t1$4 = value[1],
         kind =
           caml_call2
            (letrec_function_context[1],
             current_path,
             [0,
              [0, t1$4],
              [0,
               [0, t2$4],
               [0, [0, t3$2], [0, [0, t4$1], [0, [0, t5$0], [0, [0, t6], 0]]]]]]);
        break;
       case 11:
        var
         t7 = value[7],
         t6$0 = value[6],
         t5$1 = value[5],
         t4$2 = value[4],
         t3$3 = value[3],
         t2$5 = value[2],
         t1$5 = value[1],
         kind =
           caml_call2
            (letrec_function_context[1],
             current_path,
             [0,
              [0, t1$5],
              [0,
               [0, t2$5],
               [0,
                [0, t3$3],
                [0,
                 [0, t4$2],
                 [0, [0, t5$1], [0, [0, t6$0], [0, [0, t7], 0]]]]]]]);
        break;
       default: var kind = 1;
     }
     var _d8_ = of_type_id(outer_id);
     return [0, finalize(current_path), kind, here, _d8_];
    }
    function create_mapn_with_choices(current_path, values){
     return [1,
             caml_call2
              (Core_List[41],
               values,
               function(i, param){
                var
                 value = param[1],
                 _d7_ =
                   caml_call2(Bonsai_Node_path[36], current_path, i + 1 | 0);
                return helper(caml_call1(Bonsai_Node_path[37], _d7_), value);
               })];
    }
    caml_update_dummy(letrec_function_context, [0, create_mapn_with_choices]);
    return helper(initial_path, value);
   }
   function of_value$0(value){
    return of_value
            (caml_call1(Bonsai_Node_path[37], Bonsai_Node_path[35]), value);
   }
   function to_string_hum(param){
    var id = param[4], kind = param[2];
    if(typeof kind === "number")
     switch(kind){
       case 0:
        var _d1_ = caml_call1(to_string, id);
        return caml_call2(Core[259], _D_, _d1_);
       case 1:
        var _d2_ = caml_call1(to_string, id);
        return caml_call2(Core[259], _E_, _d2_);
       case 2:
        return cst_incr;
       default:
        var _d3_ = caml_call1(to_string, id);
        return caml_call2(Core[259], _F_, _d3_);
     }
    if(0 === kind[0]){
     var t = kind[1], _d4_ = to_string_hum(t);
     return caml_call2(Core[259], _G_, _d4_);
    }
    var
     inputs = kind[1],
     _d5_ = caml_call2(Core_List[50], inputs, to_string_hum),
     _d6_ = caml_call2(Core_String[45], _H_, _d5_);
    return caml_call2(Core[259], _I_, _d6_);
   }
   var
    _J_ = [],
    letrec_function_context$1 = [],
    cst_here$0 = cst_here$1,
    cst_kind$0 = cst_kind$1,
    cst_node_path$0 = cst_node_path$1,
    cst_inner = cst_inner$2,
    cst_inject_id = cst_inject_id$0,
    cst_model_id = cst_model_id$0,
    cst_inner$0 = cst_inner$2,
    cst_reset_id = cst_reset_id$0,
    cst_arms = cst_arms$0,
    cst_match = cst_match$0,
    cst_into = cst_into$0,
    cst_via = cst_via$0,
    cst_from = cst_from$0,
    cst_inner$1 = cst_inner$2,
    cst_value = cst_value$2,
    cst_id$0 = cst_id$2,
    cst_value$0 = cst_value$2,
    cst_t$0 = cst_t$3,
    cst_value$1 = cst_value$2,
    cst_input = cst_input$2,
    cst_input$0 = cst_input$2,
    cst_input$1 = cst_input$2,
    cst_t$1 = cst_t$3,
    cst_t$2 = cst_t$3,
    cst_id$1 = cst_id$2,
    cst_map = cst_map$2,
    cst_by = cst_by$1,
    cst_data_id = cst_data_id$1,
    cst_model_cmp_id = cst_model_cmp_id$0,
    cst_model_key_id = cst_model_key_id$0,
    cst_io_key_id = cst_io_key_id$0,
    cst_map$0 = cst_map$2,
    cst_by$0 = cst_by$1,
    cst_data_id$0 = cst_data_id$1,
    cst_cmp_id = cst_cmp_id$0,
    cst_key_id = cst_key_id$0,
    cst_map$1 = cst_map$2;
   function t_of_sexp$1(x_057){
    var
     _dY_ =
       [0,
        cst_kind$0,
        1,
        kind_of_sexp$0,
        [0,
         cst_here$0,
         1,
         caml_call1(Core[467], Core_Source_code_position[37][1][11]),
         0]],
     _dZ_ =
       [0,
        cst_node_path$0,
        1,
        caml_call1(Core_Lazy[17], Bonsai_Node_path[9]),
        _dY_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             _J_[1],
             _dZ_,
             function(param){
              return param !== cst_here$1
                      ? param
                        !== cst_kind$1
                        ? param !== cst_node_path$1 ? -1 : 0
                        : 1
                      : 2;
             },
             0,
             function(param){
              var
               _d0_ = param[2],
               here = _d0_[2][1],
               kind = _d0_[1],
               node_path = param[1];
              return [0, node_path, kind, here];
             },
             x_057);
   }
   function kind_of_sexp$0(sexp_062){
    a:
    {
     if(0 === sexp_062[0]){
      var _dC_ = sexp_062[1], _dD_ = caml_string_compare(_dC_, cst_assoc);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              j:
              {
               k:
               {
                l:
                {
                 m:
                 {
                  n:
                  {
                   o:
                   {
                    p:
                    {
                     q:
                     {
                      r:
                      {
                       s:
                       {
                        if(0 <= _dD_){
                         if(0 >= _dD_) break j;
                         var _dE_ = caml_string_compare(_dC_, cst_lifecycle);
                         if(0 <= _dE_){
                          if(0 >= _dE_) break s;
                          if(_dC_ === cst_model_cutoff) break r;
                          if(_dC_ === cst_path) break q;
                          if(_dC_ === cst_return) break p;
                          if(_dC_ === cst_store) break o;
                          if(_dC_ === cst_sub) break n;
                          if(_dC_ === cst_switch) break m;
                          if(_dC_ === cst_with_model_resetter) break l;
                          if(_dC_ !== cst_wrap) break a;
                          break k;
                         }
                         if(_dC_ === cst_assoc_on) break i;
                         if(_dC_ === cst_assoc_simpl) break h;
                         if(_dC_ === cst_fetch) break g;
                         if(_dC_ === cst_identity) break f;
                         if(_dC_ === cst_lazy$0) break e;
                         if(_dC_ === cst_leaf0) break d;
                         if(_dC_ === cst_leaf01) break c;
                         if(_dC_ === cst_leaf1) break b;
                         if(_dC_ !== cst_leaf_incr) break a;
                        }
                        else{
                         var _dF_ = caml_string_compare(_dC_, cst_Leaf_incr);
                         if(0 > _dF_){
                          if(_dC_ === cst_Assoc) break j;
                          if(_dC_ === cst_Assoc_on) break i;
                          if(_dC_ === cst_Assoc_simpl) break h;
                          if(_dC_ === cst_Fetch) break g;
                          if(_dC_ === cst_Identity) break f;
                          if(_dC_ === cst_Lazy) break e;
                          if(_dC_ === cst_Leaf0) break d;
                          if(_dC_ === cst_Leaf01) break c;
                          if(_dC_ !== cst_Leaf1) break a;
                          break b;
                         }
                         if(0 < _dF_){
                          if(_dC_ === cst_Lifecycle) break s;
                          if(_dC_ === cst_Model_cutoff) break r;
                          if(_dC_ === cst_Path) break q;
                          if(_dC_ === cst_Return) break p;
                          if(_dC_ === cst_Store) break o;
                          if(_dC_ === cst_Sub) break n;
                          if(_dC_ === cst_Switch) break m;
                          if(_dC_ === cst_With_model_resetter) break l;
                          if(_dC_ !== cst_Wrap) break a;
                          break k;
                         }
                        }
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[5],
                                 letrec_function_context$1[1],
                                 sexp_062);
                       }
                       return caml_call2
                               (Sexplib0_Sexp_conv_error[5],
                                letrec_function_context$1[1],
                                sexp_062);
                      }
                      return caml_call2
                              (Sexplib0_Sexp_conv_error[5],
                               letrec_function_context$1[1],
                               sexp_062);
                     }
                     return 1;
                    }
                    return caml_call2
                            (Sexplib0_Sexp_conv_error[5],
                             letrec_function_context$1[1],
                             sexp_062);
                   }
                   return caml_call2
                           (Sexplib0_Sexp_conv_error[5],
                            letrec_function_context$1[1],
                            sexp_062);
                  }
                  return caml_call2
                          (Sexplib0_Sexp_conv_error[5],
                           letrec_function_context$1[1],
                           sexp_062);
                 }
                 return caml_call2
                         (Sexplib0_Sexp_conv_error[5],
                          letrec_function_context$1[1],
                          sexp_062);
                }
                return caml_call2
                        (Sexplib0_Sexp_conv_error[5],
                         letrec_function_context$1[1],
                         sexp_062);
               }
               return caml_call2
                       (Sexplib0_Sexp_conv_error[5],
                        letrec_function_context$1[1],
                        sexp_062);
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[5],
                       letrec_function_context$1[1],
                       sexp_062);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5],
                      letrec_function_context$1[1],
                      sexp_062);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[5],
                     letrec_function_context$1[1],
                     sexp_062);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],
                    letrec_function_context$1[1],
                    sexp_062);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[5],
                   letrec_function_context$1[1],
                   sexp_062);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5],
                  letrec_function_context$1[1],
                  sexp_062);
        }
        return 0;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5],
                letrec_function_context$1[1],
                sexp_062);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5],
               letrec_function_context$1[1],
               sexp_062);
     }
     var _dG_ = sexp_062[1];
     if(! _dG_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7],
               letrec_function_context$1[1],
               sexp_062);
     var _dH_ = _dG_[1];
     if(0 !== _dH_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6],
               letrec_function_context$1[1],
               sexp_062);
     var _dI_ = _dH_[1], _dJ_ = caml_string_compare(_dI_, cst_assoc);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 n:
                 {
                  o:
                  {
                   p:
                   {
                    q:
                    {
                     r:
                     {
                      s:
                      {
                       if(0 <= _dJ_){
                        if(0 >= _dJ_) break j;
                        var _dK_ = caml_string_compare(_dI_, cst_lifecycle);
                        if(0 <= _dK_){
                         if(0 >= _dK_) break s;
                         if(_dI_ === cst_model_cutoff) break r;
                         if(_dI_ === cst_path) break q;
                         if(_dI_ === cst_return) break p;
                         if(_dI_ === cst_store) break o;
                         if(_dI_ === cst_sub) break n;
                         if(_dI_ === cst_switch) break m;
                         if(_dI_ === cst_with_model_resetter) break l;
                         if(_dI_ !== cst_wrap) break a;
                         break k;
                        }
                        if(_dI_ === cst_assoc_on) break i;
                        if(_dI_ === cst_assoc_simpl) break h;
                        if(_dI_ === cst_fetch) break g;
                        if(_dI_ === cst_identity) break f;
                        if(_dI_ === cst_lazy$0) break e;
                        if(_dI_ === cst_leaf0) break d;
                        if(_dI_ === cst_leaf01) break c;
                        if(_dI_ === cst_leaf1) break b;
                        if(_dI_ !== cst_leaf_incr) break a;
                       }
                       else{
                        var _dN_ = caml_string_compare(_dI_, cst_Leaf_incr);
                        if(0 > _dN_){
                         if(_dI_ === cst_Assoc) break j;
                         if(_dI_ === cst_Assoc_on) break i;
                         if(_dI_ === cst_Assoc_simpl) break h;
                         if(_dI_ === cst_Fetch) break g;
                         if(_dI_ === cst_Identity) break f;
                         if(_dI_ === cst_Lazy) break e;
                         if(_dI_ === cst_Leaf0) break d;
                         if(_dI_ === cst_Leaf01) break c;
                         if(_dI_ !== cst_Leaf1) break a;
                         break b;
                        }
                        if(0 < _dN_){
                         if(_dI_ === cst_Lifecycle) break s;
                         if(_dI_ === cst_Model_cutoff) break r;
                         if(_dI_ === cst_Path) break q;
                         if(_dI_ === cst_Return) break p;
                         if(_dI_ === cst_Store) break o;
                         if(_dI_ === cst_Sub) break n;
                         if(_dI_ === cst_Switch) break m;
                         if(_dI_ === cst_With_model_resetter) break l;
                         if(_dI_ !== cst_Wrap) break a;
                         break k;
                        }
                       }
                       var sexps_069 = _dG_[2];
                       return caml_call7
                               (Sexplib0_Sexp_conv_record[4],
                                letrec_function_context$1[1],
                                sexp_062,
                                [0, cst_input, 1, t_of_sexp$0, 0],
                                function(param){return param !== cst_input$2 ? -1 : 0;},
                                0,
                                function(param){var input = param[1]; return [3, input];},
                                sexps_069);
                      }
                      var sexps_093 = _dG_[2];
                      return caml_call7
                              (Sexplib0_Sexp_conv_record[4],
                               letrec_function_context$1[1],
                               sexp_062,
                               [0, cst_value$1, 1, t_of_sexp$0, 0],
                               function(param){return param !== cst_value$2 ? -1 : 0;},
                               0,
                               function(param){var value = param[1]; return [15, value];},
                               sexps_093);
                     }
                     var sexps_071 = _dG_[2];
                     return caml_call7
                             (Sexplib0_Sexp_conv_record[4],
                              letrec_function_context$1[1],
                              sexp_062,
                              [0, cst_t$0, 1, t_of_sexp$1, 0],
                              function(param){return param !== cst_t$3 ? -1 : 0;},
                              0,
                              function(param){var t = param[1]; return [4, t];},
                              sexps_071);
                    }
                    return caml_call2
                            (Sexplib0_Sexp_conv_error[3],
                             letrec_function_context$1[1],
                             sexp_062);
                   }
                   var sexps_063 = _dG_[2];
                   return caml_call7
                           (Sexplib0_Sexp_conv_record[4],
                            letrec_function_context$1[1],
                            sexp_062,
                            [0, cst_value$0, 1, t_of_sexp$0, 0],
                            function(param){return param !== cst_value$2 ? -1 : 0;},
                            0,
                            function(param){var value = param[1]; return [0, value];},
                            sexps_063);
                  }
                  var sexps_075 = _dG_[2];
                  return caml_call7
                          (Sexplib0_Sexp_conv_record[4],
                           letrec_function_context$1[1],
                           sexp_062,
                           [0,
                            cst_id$0,
                            1,
                            Core[364],
                            [0,
                             cst_value,
                             1,
                             t_of_sexp$0,
                             [0, cst_inner$1, 1, t_of_sexp$1, 0]]],
                           function(param){
                            return param !== cst_id$2
                                    ? param !== cst_inner$2 ? param !== cst_value$2 ? -1 : 1 : 2
                                    : 0;
                           },
                           0,
                           function(param){
                            var
                             _dX_ = param[2],
                             inner = _dX_[2][1],
                             value = _dX_[1],
                             id = param[1];
                            return [6, id, value, inner];
                           },
                           sexps_075);
                 }
                 var sexps_073 = _dG_[2];
                 return caml_call7
                         (Sexplib0_Sexp_conv_record[4],
                          letrec_function_context$1[1],
                          sexp_062,
                          [0,
                           cst_from,
                           1,
                           t_of_sexp$1,
                           [0, cst_via, 1, Core[364], [0, cst_into, 1, t_of_sexp$1, 0]]],
                          function(param){
                           return param !== cst_from$0
                                   ? param !== cst_into$0 ? param !== cst_via$0 ? -1 : 1 : 2
                                   : 0;
                          },
                          0,
                          function(param){
                           var
                            _dW_ = param[2],
                            into = _dW_[2][1],
                            via = _dW_[1],
                            from = param[1];
                           return [5, from, via, into];
                          },
                          sexps_073);
                }
                var
                 sexps_085 = _dG_[2],
                 _dL_ =
                   [0,
                    cst_match,
                    1,
                    t_of_sexp$0,
                    [0, cst_arms, 1, caml_call1(Core[432], t_of_sexp$1), 0]];
                return caml_call7
                        (Sexplib0_Sexp_conv_record[4],
                         letrec_function_context$1[1],
                         sexp_062,
                         _dL_,
                         function(param){
                          return param !== cst_arms$0
                                  ? param !== cst_match$0 ? -1 : 0
                                  : 1;
                         },
                         0,
                         function(param){
                          var arms = param[2][1];
                          return [11, param[1], arms];
                         },
                         sexps_085);
               }
               var sexps_091 = _dG_[2];
               return caml_call7
                       (Sexplib0_Sexp_conv_record[4],
                        letrec_function_context$1[1],
                        sexp_062,
                        [0,
                         cst_reset_id,
                         1,
                         Core[364],
                         [0, cst_inner$0, 1, t_of_sexp$1, 0]],
                        function(param){
                         return param !== cst_inner$2
                                 ? param !== cst_reset_id$0 ? -1 : 0
                                 : 1;
                        },
                        0,
                        function(param){
                         var inner = param[2][1], reset_id = param[1];
                         return [14, reset_id, inner];
                        },
                        sexps_091);
              }
              var sexps_089 = _dG_[2];
              return caml_call7
                      (Sexplib0_Sexp_conv_record[4],
                       letrec_function_context$1[1],
                       sexp_062,
                       [0,
                        cst_model_id,
                        1,
                        Core[364],
                        [0,
                         cst_inject_id,
                         1,
                         Core[364],
                         [0, cst_inner, 1, t_of_sexp$1, 0]]],
                       function(param){
                        return param !== cst_inject_id$0
                                ? param
                                  !== cst_inner$2
                                  ? param !== cst_model_id$0 ? -1 : 0
                                  : 2
                                : 1;
                       },
                       0,
                       function(param){
                        var
                         _dV_ = param[2],
                         inner = _dV_[2][1],
                         inject_id = _dV_[1],
                         model_id = param[1];
                        return [13, model_id, inject_id, inner];
                       },
                       sexps_089);
             }
             var sexps_079 = _dG_[2];
             return caml_call7
                     (Sexplib0_Sexp_conv_record[4],
                      letrec_function_context$1[1],
                      sexp_062,
                      [0,
                       cst_map$1,
                       1,
                       t_of_sexp$0,
                       [0,
                        cst_key_id,
                        1,
                        Core[364],
                        [0,
                         cst_cmp_id,
                         1,
                         Core[364],
                         [0,
                          cst_data_id$0,
                          1,
                          Core[364],
                          [0, cst_by$0, 1, t_of_sexp$1, 0]]]]],
                      function(param){
                       return param !== cst_by$1
                               ? param
                                 !== cst_cmp_id$0
                                 ? param
                                   !== cst_data_id$1
                                   ? param !== cst_key_id$0 ? param !== cst_map$2 ? -1 : 0 : 1
                                   : 3
                                 : 2
                               : 4;
                      },
                      0,
                      function(param){
                       var
                        _dS_ = param[2],
                        _dT_ = _dS_[2],
                        _dU_ = _dT_[2],
                        by = _dU_[2][1],
                        data_id = _dU_[1],
                        cmp_id = _dT_[1],
                        key_id = _dS_[1],
                        map = param[1];
                       return [8, map, key_id, cmp_id, data_id, by];
                      },
                      sexps_079);
            }
            var sexps_081 = _dG_[2];
            return caml_call7
                    (Sexplib0_Sexp_conv_record[4],
                     letrec_function_context$1[1],
                     sexp_062,
                     [0,
                      cst_map$0,
                      1,
                      t_of_sexp$0,
                      [0,
                       cst_io_key_id,
                       1,
                       Core[364],
                       [0,
                        cst_model_key_id,
                        1,
                        Core[364],
                        [0,
                         cst_model_cmp_id,
                         1,
                         Core[364],
                         [0,
                          cst_data_id,
                          1,
                          Core[364],
                          [0, cst_by, 1, t_of_sexp$1, 0]]]]]],
                     function(param){
                      return param !== cst_by$1
                              ? param
                                !== cst_data_id$1
                                ? param
                                  !== cst_io_key_id$0
                                  ? param
                                    !== cst_map$2
                                    ? param
                                      !== cst_model_cmp_id$0
                                      ? param !== cst_model_key_id$0 ? -1 : 2
                                      : 3
                                    : 0
                                  : 1
                                : 4
                              : 5;
                     },
                     0,
                     function(param){
                      var
                       _dO_ = param[2],
                       _dP_ = _dO_[2],
                       _dQ_ = _dP_[2],
                       _dR_ = _dQ_[2],
                       by = _dR_[2][1],
                       data_id = _dR_[1],
                       model_cmp_id = _dQ_[1],
                       model_key_id = _dP_[1],
                       io_key_id = _dO_[1],
                       map = param[1];
                      return [9,
                              map,
                              io_key_id,
                              model_key_id,
                              model_cmp_id,
                              data_id,
                              by];
                     },
                     sexps_081);
           }
           var sexps_083 = _dG_[2];
           return caml_call7
                   (Sexplib0_Sexp_conv_record[4],
                    letrec_function_context$1[1],
                    sexp_062,
                    [0, cst_map, 1, t_of_sexp$0, 0],
                    function(param){return param !== cst_map$2 ? -1 : 0;},
                    0,
                    function(param){var map = param[1]; return [10, map];},
                    sexps_083);
          }
          var sexps_077 = _dG_[2];
          return caml_call7
                  (Sexplib0_Sexp_conv_record[4],
                   letrec_function_context$1[1],
                   sexp_062,
                   [0, cst_id$1, 1, Core[364], 0],
                   function(param){return param !== cst_id$2 ? -1 : 0;},
                   0,
                   function(param){var id = param[1]; return [7, id];},
                   sexps_077);
         }
         var sexps_095 = _dG_[2];
         return caml_call7
                 (Sexplib0_Sexp_conv_record[4],
                  letrec_function_context$1[1],
                  sexp_062,
                  [0, cst_t$2, 1, t_of_sexp$1, 0],
                  function(param){return param !== cst_t$3 ? -1 : 0;},
                  0,
                  function(param){var t = param[1]; return [16, t];},
                  sexps_095);
        }
        var
         sexps_087 = _dG_[2],
         _dM_ = [0, cst_t$1, 1, caml_call1(Core[467], t_of_sexp$1), 0];
        return caml_call7
                (Sexplib0_Sexp_conv_record[4],
                 letrec_function_context$1[1],
                 sexp_062,
                 _dM_,
                 function(param){return param !== cst_t$3 ? -1 : 0;},
                 0,
                 function(param){var t = param[1]; return [12, t];},
                 sexps_087);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[3],
                letrec_function_context$1[1],
                sexp_062);
      }
      var sexps_065 = _dG_[2];
      return caml_call7
              (Sexplib0_Sexp_conv_record[4],
               letrec_function_context$1[1],
               sexp_062,
               [0, cst_input$1, 1, t_of_sexp$0, 0],
               function(param){return param !== cst_input$2 ? -1 : 0;},
               0,
               function(param){var input = param[1]; return [1, input];},
               sexps_065);
     }
     var sexps_067 = _dG_[2];
     return caml_call7
             (Sexplib0_Sexp_conv_record[4],
              letrec_function_context$1[1],
              sexp_062,
              [0, cst_input$0, 1, t_of_sexp$0, 0],
              function(param){return param !== cst_input$2 ? -1 : 0;},
              0,
              function(param){var input = param[1]; return [2, input];},
              sexps_067);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[8],
             letrec_function_context$1[1],
             sexp_062);
   }
   caml_update_dummy(_J_, [0, error_source_056]);
   caml_update_dummy(letrec_function_context$1, [0, error_source_060]);
   var
    _K_ = [0, cst_here$1],
    _L_ = [0, cst_kind$1],
    _M_ = [0, cst_node_path$1],
    _N_ = [0, cst_Leaf0],
    _O_ = [0, cst_Path],
    _P_ = [0, cst_value$2],
    _Q_ = [0, cst_Return],
    _R_ = [0, cst_input$2],
    _S_ = [0, cst_Leaf01],
    _T_ = [0, cst_input$2],
    _U_ = [0, cst_Leaf1],
    _V_ = [0, cst_input$2],
    _W_ = [0, cst_Leaf_incr],
    _X_ = [0, cst_t$3],
    _Y_ = [0, cst_Model_cutoff],
    _Z_ = [0, cst_into$0],
    ___ = [0, cst_via$0],
    _$_ = [0, cst_from$0],
    _aa_ = [0, cst_Sub],
    _ab_ = [0, cst_inner$2],
    _ac_ = [0, cst_value$2],
    _ad_ = [0, cst_id$2],
    _ae_ = [0, cst_Store],
    _af_ = [0, cst_id$2],
    _ag_ = [0, cst_Fetch],
    _ah_ = [0, cst_by$1],
    _ai_ = [0, cst_data_id$1],
    _aj_ = [0, cst_cmp_id$0],
    _ak_ = [0, cst_key_id$0],
    _al_ = [0, cst_map$2],
    _am_ = [0, cst_Assoc],
    _an_ = [0, cst_by$1],
    _ao_ = [0, cst_data_id$1],
    _ap_ = [0, cst_model_cmp_id$0],
    _aq_ = [0, cst_model_key_id$0],
    _ar_ = [0, cst_io_key_id$0],
    _as_ = [0, cst_map$2],
    _at_ = [0, cst_Assoc_on],
    _au_ = [0, cst_map$2],
    _av_ = [0, cst_Assoc_simpl],
    _aw_ = [0, cst_arms$0],
    _ax_ = [0, cst_match$0],
    _ay_ = [0, cst_Switch],
    _az_ = [0, cst_t$3],
    _aA_ = [0, cst_Lazy],
    _aB_ = [0, cst_inner$2],
    _aC_ = [0, cst_inject_id$0],
    _aD_ = [0, cst_model_id$0],
    _aE_ = [0, cst_Wrap],
    _aF_ = [0, cst_inner$2],
    _aG_ = [0, cst_reset_id$0],
    _aH_ = [0, cst_With_model_resetter],
    _aI_ = [0, cst_value$2],
    _aJ_ = [0, cst_Lifecycle],
    _aK_ = [0, cst_t$3],
    _aL_ = [0, cst_Identity];
   function sexp_of_t$2(param){
    var
     here_101 = param[3],
     kind_099 = param[2],
     node_path_097 = param[1],
     arg_102 =
       caml_call2(Core[466], Core_Source_code_position[37][1][12], here_101),
     bnds_096 = [0, [1, [0, _K_, [0, arg_102, 0]]], 0],
     arg_100 = sexp_of_kind$0(kind_099),
     bnds_096$0 = [0, [1, [0, _L_, [0, arg_100, 0]]], bnds_096],
     arg_098 = caml_call2(Core_Lazy[18], Bonsai_Node_path[10], node_path_097),
     bnds_096$1 = [0, [1, [0, _M_, [0, arg_098, 0]]], bnds_096$0];
    return [1, bnds_096$1];
   }
   function sexp_of_kind$0(param){
    if(typeof param === "number") return 0 === param ? _N_ : _O_;
    switch(param[0]){
      case 0:
       var
        value_104 = param[1],
        arg_105 = sexp_of_t$0(value_104),
        bnds_103 = [0, [1, [0, _P_, [0, arg_105, 0]]], 0];
       return [1, [0, _Q_, bnds_103]];
      case 1:
       var
        input_107 = param[1],
        arg_108 = sexp_of_t$0(input_107),
        bnds_106 = [0, [1, [0, _R_, [0, arg_108, 0]]], 0];
       return [1, [0, _S_, bnds_106]];
      case 2:
       var
        input_110 = param[1],
        arg_111 = sexp_of_t$0(input_110),
        bnds_109 = [0, [1, [0, _T_, [0, arg_111, 0]]], 0];
       return [1, [0, _U_, bnds_109]];
      case 3:
       var
        input_113 = param[1],
        arg_114 = sexp_of_t$0(input_113),
        bnds_112 = [0, [1, [0, _V_, [0, arg_114, 0]]], 0];
       return [1, [0, _W_, bnds_112]];
      case 4:
       var
        t_116 = param[1],
        arg_117 = sexp_of_t$2(t_116),
        bnds_115 = [0, [1, [0, _X_, [0, arg_117, 0]]], 0];
       return [1, [0, _Y_, bnds_115]];
      case 5:
       var
        into_123 = param[3],
        via_121 = param[2],
        from_119 = param[1],
        arg_124 = sexp_of_t$2(into_123),
        bnds_118 = [0, [1, [0, _Z_, [0, arg_124, 0]]], 0],
        arg_122 = caml_call1(Core[363], via_121),
        bnds_118$0 = [0, [1, [0, ___, [0, arg_122, 0]]], bnds_118],
        arg_120 = sexp_of_t$2(from_119),
        bnds_118$1 = [0, [1, [0, _$_, [0, arg_120, 0]]], bnds_118$0];
       return [1, [0, _aa_, bnds_118$1]];
      case 6:
       var
        inner_130 = param[3],
        value_128 = param[2],
        id_126 = param[1],
        arg_131 = sexp_of_t$2(inner_130),
        bnds_125 = [0, [1, [0, _ab_, [0, arg_131, 0]]], 0],
        arg_129 = sexp_of_t$0(value_128),
        bnds_125$0 = [0, [1, [0, _ac_, [0, arg_129, 0]]], bnds_125],
        arg_127 = caml_call1(Core[363], id_126),
        bnds_125$1 = [0, [1, [0, _ad_, [0, arg_127, 0]]], bnds_125$0];
       return [1, [0, _ae_, bnds_125$1]];
      case 7:
       var
        id_133 = param[1],
        arg_134 = caml_call1(Core[363], id_133),
        bnds_132 = [0, [1, [0, _af_, [0, arg_134, 0]]], 0];
       return [1, [0, _ag_, bnds_132]];
      case 8:
       var
        by_144 = param[5],
        data_id_142 = param[4],
        cmp_id_140 = param[3],
        key_id_138 = param[2],
        map_136 = param[1],
        arg_145 = sexp_of_t$2(by_144),
        bnds_135 = [0, [1, [0, _ah_, [0, arg_145, 0]]], 0],
        arg_143 = caml_call1(Core[363], data_id_142),
        bnds_135$0 = [0, [1, [0, _ai_, [0, arg_143, 0]]], bnds_135],
        arg_141 = caml_call1(Core[363], cmp_id_140),
        bnds_135$1 = [0, [1, [0, _aj_, [0, arg_141, 0]]], bnds_135$0],
        arg_139 = caml_call1(Core[363], key_id_138),
        bnds_135$2 = [0, [1, [0, _ak_, [0, arg_139, 0]]], bnds_135$1],
        arg_137 = sexp_of_t$0(map_136),
        bnds_135$3 = [0, [1, [0, _al_, [0, arg_137, 0]]], bnds_135$2];
       return [1, [0, _am_, bnds_135$3]];
      case 9:
       var
        by_157 = param[6],
        data_id_155 = param[5],
        model_cmp_id_153 = param[4],
        model_key_id_151 = param[3],
        io_key_id_149 = param[2],
        map_147 = param[1],
        arg_158 = sexp_of_t$2(by_157),
        bnds_146 = [0, [1, [0, _an_, [0, arg_158, 0]]], 0],
        arg_156 = caml_call1(Core[363], data_id_155),
        bnds_146$0 = [0, [1, [0, _ao_, [0, arg_156, 0]]], bnds_146],
        arg_154 = caml_call1(Core[363], model_cmp_id_153),
        bnds_146$1 = [0, [1, [0, _ap_, [0, arg_154, 0]]], bnds_146$0],
        arg_152 = caml_call1(Core[363], model_key_id_151),
        bnds_146$2 = [0, [1, [0, _aq_, [0, arg_152, 0]]], bnds_146$1],
        arg_150 = caml_call1(Core[363], io_key_id_149),
        bnds_146$3 = [0, [1, [0, _ar_, [0, arg_150, 0]]], bnds_146$2],
        arg_148 = sexp_of_t$0(map_147),
        bnds_146$4 = [0, [1, [0, _as_, [0, arg_148, 0]]], bnds_146$3];
       return [1, [0, _at_, bnds_146$4]];
      case 10:
       var
        map_160 = param[1],
        arg_161 = sexp_of_t$0(map_160),
        bnds_159 = [0, [1, [0, _au_, [0, arg_161, 0]]], 0];
       return [1, [0, _av_, bnds_159]];
      case 11:
       var
        arms_165 = param[2],
        match_163 = param[1],
        arg_166 = caml_call2(Core[431], sexp_of_t$2, arms_165),
        bnds_162 = [0, [1, [0, _aw_, [0, arg_166, 0]]], 0],
        arg_164 = sexp_of_t$0(match_163),
        bnds_162$0 = [0, [1, [0, _ax_, [0, arg_164, 0]]], bnds_162];
       return [1, [0, _ay_, bnds_162$0]];
      case 12:
       var
        t_168 = param[1],
        arg_169 = caml_call2(Core[466], sexp_of_t$2, t_168),
        bnds_167 = [0, [1, [0, _az_, [0, arg_169, 0]]], 0];
       return [1, [0, _aA_, bnds_167]];
      case 13:
       var
        inner_175 = param[3],
        inject_id_173 = param[2],
        model_id_171 = param[1],
        arg_176 = sexp_of_t$2(inner_175),
        bnds_170 = [0, [1, [0, _aB_, [0, arg_176, 0]]], 0],
        arg_174 = caml_call1(Core[363], inject_id_173),
        bnds_170$0 = [0, [1, [0, _aC_, [0, arg_174, 0]]], bnds_170],
        arg_172 = caml_call1(Core[363], model_id_171),
        bnds_170$1 = [0, [1, [0, _aD_, [0, arg_172, 0]]], bnds_170$0];
       return [1, [0, _aE_, bnds_170$1]];
      case 14:
       var
        inner_180 = param[2],
        reset_id_178 = param[1],
        arg_181 = sexp_of_t$2(inner_180),
        bnds_177 = [0, [1, [0, _aF_, [0, arg_181, 0]]], 0],
        arg_179 = caml_call1(Core[363], reset_id_178),
        bnds_177$0 = [0, [1, [0, _aG_, [0, arg_179, 0]]], bnds_177];
       return [1, [0, _aH_, bnds_177$0]];
      case 15:
       var
        value_183 = param[1],
        arg_184 = sexp_of_t$0(value_183),
        bnds_182 = [0, [1, [0, _aI_, [0, arg_184, 0]]], 0];
       return [1, [0, _aJ_, bnds_182]];
      default:
       var
        t_186 = param[1],
        arg_187 = sexp_of_t$2(t_186),
        bnds_185 = [0, [1, [0, _aK_, [0, arg_187, 0]]], 0];
       return [1, [0, _aL_, bnds_185]];
    }
   }
   function of_computation(computation){
    function helper(current_path, computation){
     function choice_point(choice){
      var _dB_ = caml_call2(Bonsai_Node_path[36], current_path, choice);
      return caml_call1(Bonsai_Node_path[37], _dB_);
     }
     var node_path = finalize(current_path);
     if(typeof computation === "number") return [0, node_path, 1, 0];
     switch(computation[0]){
       case 0:
        var value = computation[1];
        return [0,
                node_path,
                [0,
                 of_value
                  (caml_call1(Bonsai_Node_path[37], current_path), value)],
                0];
       case 1:
        var input = computation[8];
        return [0,
                node_path,
                [1,
                 of_value
                  (caml_call1(Bonsai_Node_path[37], current_path), input)],
                0];
       case 2:
        var input$0 = computation[6];
        return [0,
                node_path,
                [2,
                 of_value
                  (caml_call1(Bonsai_Node_path[37], current_path), input$0)],
                0];
       case 3:
        return [0, node_path, 0, 0];
       case 4:
        var input$1 = computation[1];
        return [0,
                node_path,
                [3,
                 of_value
                  (caml_call1(Bonsai_Node_path[37], current_path), input$1)],
                0];
       case 5:
        var
         here = computation[4],
         into = computation[3],
         via = computation[2],
         from = computation[1],
         _dh_ = helper(choice_point(2), into),
         _di_ = of_type_id(via),
         kind = [5, helper(choice_point(1), from), _di_, _dh_];
        return [0, node_path, kind, here];
       case 6:
        var
         inner = computation[3],
         value$0 = computation[2],
         id = computation[1],
         _dj_ = helper(choice_point(2), inner),
         _dk_ = of_value(choice_point(1), value$0),
         kind$0 = [6, of_type_id(id), _dk_, _dj_];
        return [0, node_path, kind$0, 0];
       case 7:
        var id$0 = computation[1], kind$1 = [7, of_type_id(id$0)];
        return [0, node_path, kind$1, 0];
       case 8:
        var
         by = computation[6],
         data_id = computation[5],
         cmp_id = computation[4],
         key_id = computation[3],
         map = computation[1],
         _dl_ = helper(choice_point(2), by),
         _dm_ = of_type_id(data_id),
         _dn_ = of_type_id(cmp_id),
         _do_ = of_type_id(key_id),
         kind$2 = [8, of_value(choice_point(1), map), _do_, _dn_, _dm_, _dl_];
        return [0, node_path, kind$2, 0];
       case 9:
        var
         by$0 = computation[9],
         data_id$0 = computation[8],
         model_cmp_id = computation[7],
         model_key_id = computation[6],
         io_key_id = computation[4],
         map$0 = computation[1],
         _dp_ = helper(choice_point(2), by$0),
         _dq_ = of_type_id(data_id$0),
         _dr_ = of_type_id(model_cmp_id),
         _ds_ = of_type_id(model_key_id),
         _dt_ = of_type_id(io_key_id),
         kind$3 =
           [9, of_value(choice_point(1), map$0), _dt_, _ds_, _dr_, _dq_, _dp_];
        return [0, node_path, kind$3, 0];
       case 10:
        var
         map$1 = computation[1],
         kind$4 =
           [10,
            of_value(caml_call1(Bonsai_Node_path[37], current_path), map$1)];
        return [0, node_path, kind$4, 0];
       case 11:
        var
         arms = computation[2],
         index = [0, 1],
         match = computation[1],
         _du_ =
           caml_call3
            (Core_Map[59],
             arms,
             0,
             function(param, computation, acc){
              index[1]++;
              return [0, helper(choice_point(index[1]), computation), acc];
             }),
         _dv_ = caml_call1(Core_List[57], _du_),
         kind$5 = [11, of_value(choice_point(1), match), _dv_];
        return [0, node_path, kind$5, 0];
       case 12:
        var t = computation[1];
        if(caml_call1(Core_Lazy[35], t)){
         var _dw_ = runtime.caml_obj_tag(t);
         a:
         if(250 === _dw_)
          var _dx_ = t[1];
         else{
          if(246 !== _dw_ && 244 !== _dw_){var _dx_ = t; break a;}
          var _dx_ = caml_call1(CamlinternalLazy[2], t);
         }
         var
          potentially_evaluated =
            [0, helper(caml_call1(Bonsai_Node_path[37], current_path), _dx_)];
        }
        else
         var potentially_evaluated = 0;
        return [0, node_path, [12, potentially_evaluated], 0];
       case 13:
        var
         inner$0 = computation[6],
         inject_id = computation[4],
         wrapper_model = computation[1],
         _dy_ =
           helper(caml_call1(Bonsai_Node_path[37], current_path), inner$0),
         _dz_ = of_type_id(inject_id),
         kind$6 = [13, of_model_type_id(wrapper_model[3]), _dz_, _dy_];
        return [0, node_path, kind$6, 0];
       case 14:
        var
         inner$1 = computation[2],
         reset_id = computation[1],
         _dA_ =
           helper(caml_call1(Bonsai_Node_path[37], current_path), inner$1),
         kind$7 = [14, of_type_id(reset_id), _dA_];
        return [0, node_path, kind$7, 0];
       default:
        var
         value$1 = computation[1],
         kind$8 =
           [15,
            of_value(caml_call1(Bonsai_Node_path[37], current_path), value$1)];
        return [0, node_path, kind$8, 0];
     }
    }
    return helper
            (caml_call1(Bonsai_Node_path[37], Bonsai_Node_path[35]),
             computation);
   }
   var letrec_function_context$2 = [];
   caml_update_dummy(letrec_function_context$2, [0, error_source_190]);
   var
    _aM_ = [0, cst_Leaf0],
    _aN_ = [0, cst_Path],
    _aO_ = [0, cst_value$2],
    _aP_ = [0, cst_Return],
    _aQ_ = [0, cst_input$2],
    _aR_ = [0, cst_Leaf01],
    _aS_ = [0, cst_input$2],
    _aT_ = [0, cst_Leaf1],
    _aU_ = [0, cst_input$2],
    _aV_ = [0, cst_Leaf_incr],
    _aW_ = [0, cst_t$3],
    _aX_ = [0, cst_Model_cutoff],
    _aY_ = [0, cst_into$0],
    _aZ_ = [0, cst_via$0],
    _a0_ = [0, cst_from$0],
    _a1_ = [0, cst_Sub],
    _a2_ = [0, cst_inner$2],
    _a3_ = [0, cst_value$2],
    _a4_ = [0, cst_id$2],
    _a5_ = [0, cst_Store],
    _a6_ = [0, cst_id$2],
    _a7_ = [0, cst_Fetch],
    _a8_ = [0, cst_by$1],
    _a9_ = [0, cst_data_id$1],
    _a__ = [0, cst_cmp_id$0],
    _a$_ = [0, cst_key_id$0],
    _ba_ = [0, cst_map$2],
    _bb_ = [0, cst_Assoc],
    _bc_ = [0, cst_by$1],
    _bd_ = [0, cst_data_id$1],
    _be_ = [0, cst_model_cmp_id$0],
    _bf_ = [0, cst_model_key_id$0],
    _bg_ = [0, cst_io_key_id$0],
    _bh_ = [0, cst_map$2],
    _bi_ = [0, cst_Assoc_on],
    _bj_ = [0, cst_map$2],
    _bk_ = [0, cst_Assoc_simpl],
    _bl_ = [0, cst_arms$0],
    _bm_ = [0, cst_match$0],
    _bn_ = [0, cst_Switch],
    _bo_ = [0, cst_t$3],
    _bp_ = [0, cst_Lazy],
    _bq_ = [0, cst_inner$2],
    _br_ = [0, cst_inject_id$0],
    _bs_ = [0, cst_model_id$0],
    _bt_ = [0, cst_Wrap],
    _bu_ = [0, cst_reset_id$0],
    _bv_ = [0, cst_inner$2],
    _bw_ = [0, cst_With_model_resetter],
    _bx_ = [0, cst_value$2],
    _by_ = [0, cst_Lifecycle],
    _bz_ = [0, cst_t$3],
    _bA_ = [0, cst_Identity],
    _bB_ = [12, 0];
   function sexp_of_t$3(param){
    if(typeof param === "number") return 0 === param ? _aM_ : _aN_;
    switch(param[0]){
      case 0:
       var
        value_227 = param[1],
        arg_228 = sexp_of_t$1(value_227),
        bnds_226 = [0, [1, [0, _aO_, [0, arg_228, 0]]], 0];
       return [1, [0, _aP_, bnds_226]];
      case 1:
       var
        input_230 = param[1],
        arg_231 = sexp_of_t$1(input_230),
        bnds_229 = [0, [1, [0, _aQ_, [0, arg_231, 0]]], 0];
       return [1, [0, _aR_, bnds_229]];
      case 2:
       var
        input_233 = param[1],
        arg_234 = sexp_of_t$1(input_233),
        bnds_232 = [0, [1, [0, _aS_, [0, arg_234, 0]]], 0];
       return [1, [0, _aT_, bnds_232]];
      case 3:
       var
        input_236 = param[1],
        arg_237 = sexp_of_t$1(input_236),
        bnds_235 = [0, [1, [0, _aU_, [0, arg_237, 0]]], 0];
       return [1, [0, _aV_, bnds_235]];
      case 4:
       var
        t_239 = param[1],
        arg_240 = sexp_of_t$3(t_239),
        bnds_238 = [0, [1, [0, _aW_, [0, arg_240, 0]]], 0];
       return [1, [0, _aX_, bnds_238]];
      case 5:
       var
        into_246 = param[3],
        via_244 = param[2],
        from_242 = param[1],
        arg_247 = sexp_of_t$3(into_246),
        bnds_241 = [0, [1, [0, _aY_, [0, arg_247, 0]]], 0],
        arg_245 = caml_call1(sexp_of_t, via_244),
        bnds_241$0 = [0, [1, [0, _aZ_, [0, arg_245, 0]]], bnds_241],
        arg_243 = sexp_of_t$3(from_242),
        bnds_241$1 = [0, [1, [0, _a0_, [0, arg_243, 0]]], bnds_241$0];
       return [1, [0, _a1_, bnds_241$1]];
      case 6:
       var
        inner_253 = param[3],
        value_251 = param[2],
        id_249 = param[1],
        arg_254 = sexp_of_t$3(inner_253),
        bnds_248 = [0, [1, [0, _a2_, [0, arg_254, 0]]], 0],
        arg_252 = sexp_of_t$1(value_251),
        bnds_248$0 = [0, [1, [0, _a3_, [0, arg_252, 0]]], bnds_248],
        arg_250 = caml_call1(sexp_of_t, id_249),
        bnds_248$1 = [0, [1, [0, _a4_, [0, arg_250, 0]]], bnds_248$0];
       return [1, [0, _a5_, bnds_248$1]];
      case 7:
       var
        id_256 = param[1],
        arg_257 = caml_call1(sexp_of_t, id_256),
        bnds_255 = [0, [1, [0, _a6_, [0, arg_257, 0]]], 0];
       return [1, [0, _a7_, bnds_255]];
      case 8:
       var
        by_267 = param[5],
        data_id_265 = param[4],
        cmp_id_263 = param[3],
        key_id_261 = param[2],
        map_259 = param[1],
        arg_268 = sexp_of_t$3(by_267),
        bnds_258 = [0, [1, [0, _a8_, [0, arg_268, 0]]], 0],
        arg_266 = caml_call1(sexp_of_t, data_id_265),
        bnds_258$0 = [0, [1, [0, _a9_, [0, arg_266, 0]]], bnds_258],
        arg_264 = caml_call1(sexp_of_t, cmp_id_263),
        bnds_258$1 = [0, [1, [0, _a__, [0, arg_264, 0]]], bnds_258$0],
        arg_262 = caml_call1(sexp_of_t, key_id_261),
        bnds_258$2 = [0, [1, [0, _a$_, [0, arg_262, 0]]], bnds_258$1],
        arg_260 = sexp_of_t$1(map_259),
        bnds_258$3 = [0, [1, [0, _ba_, [0, arg_260, 0]]], bnds_258$2];
       return [1, [0, _bb_, bnds_258$3]];
      case 9:
       var
        by_280 = param[6],
        data_id_278 = param[5],
        model_cmp_id_276 = param[4],
        model_key_id_274 = param[3],
        io_key_id_272 = param[2],
        map_270 = param[1],
        arg_281 = sexp_of_t$3(by_280),
        bnds_269 = [0, [1, [0, _bc_, [0, arg_281, 0]]], 0],
        arg_279 = caml_call1(sexp_of_t, data_id_278),
        bnds_269$0 = [0, [1, [0, _bd_, [0, arg_279, 0]]], bnds_269],
        arg_277 = caml_call1(sexp_of_t, model_cmp_id_276),
        bnds_269$1 = [0, [1, [0, _be_, [0, arg_277, 0]]], bnds_269$0],
        arg_275 = caml_call1(sexp_of_t, model_key_id_274),
        bnds_269$2 = [0, [1, [0, _bf_, [0, arg_275, 0]]], bnds_269$1],
        arg_273 = caml_call1(sexp_of_t, io_key_id_272),
        bnds_269$3 = [0, [1, [0, _bg_, [0, arg_273, 0]]], bnds_269$2],
        arg_271 = sexp_of_t$1(map_270),
        bnds_269$4 = [0, [1, [0, _bh_, [0, arg_271, 0]]], bnds_269$3];
       return [1, [0, _bi_, bnds_269$4]];
      case 10:
       var
        map_283 = param[1],
        arg_284 = sexp_of_t$1(map_283),
        bnds_282 = [0, [1, [0, _bj_, [0, arg_284, 0]]], 0];
       return [1, [0, _bk_, bnds_282]];
      case 11:
       var
        arms_288 = param[2],
        match_286 = param[1],
        arg_289 = caml_call2(Core[431], sexp_of_t$3, arms_288),
        bnds_285 = [0, [1, [0, _bl_, [0, arg_289, 0]]], 0],
        arg_287 = sexp_of_t$1(match_286),
        bnds_285$0 = [0, [1, [0, _bm_, [0, arg_287, 0]]], bnds_285];
       return [1, [0, _bn_, bnds_285$0]];
      case 12:
       var
        t_291 = param[1],
        arg_292 = caml_call2(Core[466], sexp_of_t$3, t_291),
        bnds_290 = [0, [1, [0, _bo_, [0, arg_292, 0]]], 0];
       return [1, [0, _bp_, bnds_290]];
      case 13:
       var
        inner_298 = param[3],
        inject_id_296 = param[2],
        model_id_294 = param[1],
        arg_299 = sexp_of_t$3(inner_298),
        bnds_293 = [0, [1, [0, _bq_, [0, arg_299, 0]]], 0],
        arg_297 = caml_call1(sexp_of_t, inject_id_296),
        bnds_293$0 = [0, [1, [0, _br_, [0, arg_297, 0]]], bnds_293],
        arg_295 = caml_call1(sexp_of_t, model_id_294),
        bnds_293$1 = [0, [1, [0, _bs_, [0, arg_295, 0]]], bnds_293$0];
       return [1, [0, _bt_, bnds_293$1]];
      case 14:
       var
        reset_id_303 = param[2],
        inner_301 = param[1],
        arg_304 = caml_call1(sexp_of_t, reset_id_303),
        bnds_300 = [0, [1, [0, _bu_, [0, arg_304, 0]]], 0],
        arg_302 = sexp_of_t$3(inner_301),
        bnds_300$0 = [0, [1, [0, _bv_, [0, arg_302, 0]]], bnds_300];
       return [1, [0, _bw_, bnds_300$0]];
      case 15:
       var
        value_306 = param[1],
        arg_307 = sexp_of_t$1(value_306),
        bnds_305 = [0, [1, [0, _bx_, [0, arg_307, 0]]], 0];
       return [1, [0, _by_, bnds_305]];
      default:
       var
        t_309 = param[1],
        arg_310 = sexp_of_t$3(t_309),
        bnds_308 = [0, [1, [0, _bz_, [0, arg_310, 0]]], 0];
       return [1, [0, _bA_, bnds_308]];
    }
   }
   function of_complete$0(complete){
    var match = complete[2];
    if(typeof match === "number") return 0 === match ? 0 : 1;
    switch(match[0]){
      case 0:
       var value = match[1]; return [0, of_complete(value)];
      case 1:
       var input = match[1]; return [1, of_complete(input)];
      case 2:
       var input$0 = match[1]; return [2, of_complete(input$0)];
      case 3:
       var input$1 = match[1]; return [3, of_complete(input$1)];
      case 4:
       var t = match[1]; return [4, of_complete$0(t)];
      case 5:
       var
        into = match[3],
        via = match[2],
        from = match[1],
        _dc_ = of_complete$0(into);
       return [5, of_complete$0(from), via, _dc_];
      case 6:
       var
        inner = match[3],
        value$0 = match[2],
        id = match[1],
        _dd_ = of_complete$0(inner);
       return [6, id, of_complete(value$0), _dd_];
      case 7:
       var id$0 = match[1]; return [7, id$0];
      case 8:
       var
        by = match[5],
        data_id = match[4],
        cmp_id = match[3],
        key_id = match[2],
        map = match[1],
        _de_ = of_complete$0(by);
       return [8, of_complete(map), key_id, cmp_id, data_id, _de_];
      case 9:
       var
        by$0 = match[6],
        data_id$0 = match[5],
        model_cmp_id = match[4],
        model_key_id = match[3],
        io_key_id = match[2],
        map$0 = match[1],
        _df_ = of_complete$0(by$0);
       return [9,
               of_complete(map$0),
               io_key_id,
               model_key_id,
               model_cmp_id,
               data_id$0,
               _df_];
      case 10:
       var map$1 = match[1]; return [10, of_complete(map$1)];
      case 11:
       var
        arms = match[2],
        match$0 = match[1],
        _dg_ = caml_call2(Core_List[50], arms, of_complete$0);
       return [11, of_complete(match$0), _dg_];
      case 12:
       var match$1 = match[1];
       if(! match$1) return _bB_;
       var t$0 = match$1[1];
       return [12, [0, of_complete$0(t$0)]];
      case 13:
       var inner$0 = match[3], inject_id = match[2], model_id = match[1];
       return [13, model_id, inject_id, of_complete$0(inner$0)];
      case 14:
       var inner$1 = match[2], reset_id = match[1];
       return [14, of_complete$0(inner$1), reset_id];
      case 15:
       var value$1 = match[1]; return [15, of_complete(value$1)];
      default: var t$1 = match[1]; return [16, of_complete$0(t$1)];
    }
   }
   function minimal_sexp_of_t$0(t){return sexp_of_t$3(of_complete$0(t));}
   function inputs$0(t){
    var match = t[2];
    if(typeof match === "number") return 0 === match ? 0 : 0;
    switch(match[0]){
      case 0:
       var value = match[1]; return [0, value, 0];
      case 1:
       var input = match[1]; return [0, input, 0];
      case 2:
       var input$0 = match[1]; return [0, input$0, 0];
      case 3:
       var input$1 = match[1]; return [0, input$1, 0];
      case 4:
       return 0;
      case 5:
       return 0;
      case 6:
       var value$0 = match[2]; return [0, value$0, 0];
      case 7:
       return 0;
      case 8:
       var map = match[1]; return [0, map, 0];
      case 9:
       var map$0 = match[1]; return [0, map$0, 0];
      case 10:
       var map$1 = match[1]; return [0, map$1, 0];
      case 11:
       return [0, match[1], 0];
      case 12:
       return 0;
      case 13:
       return 0;
      case 14:
       return 0;
      case 15:
       var value$1 = match[1]; return [0, value$1, 0];
      default: return 0;
    }
   }
   function children(t){
    var match = t[2];
    if(typeof match === "number") return 0 === match ? 0 : 0;
    switch(match[0]){
      case 0:
       return 0;
      case 1:
       return 0;
      case 2:
       return 0;
      case 3:
       return 0;
      case 4:
       var t$0 = match[1]; return [0, t$0, 0];
      case 5:
       var into = match[3], from = match[1]; return [0, from, [0, into, 0]];
      case 6:
       var inner = match[3]; return [0, inner, 0];
      case 7:
       return 0;
      case 8:
       var by = match[5]; return [0, by, 0];
      case 9:
       var by$0 = match[6]; return [0, by$0, 0];
      case 10:
       return 0;
      case 11:
       return 0;
      case 12:
       var match$0 = match[1];
       if(! match$0) return 0;
       var t$1 = match$0[1];
       return [0, t$1, 0];
      case 13:
       var inner$0 = match[3]; return [0, inner$0, 0];
      case 14:
       var inner$1 = match[2]; return [0, inner$1, 0];
      case 15:
       return 0;
      default: var t$2 = match[1]; return [0, t$2, 0];
    }
   }
   var map = [];
   caml_update_dummy
    (map,
     [0,
      0,
      function(_cS_){
       var
        _cT_ = caml_call2(CamlinternalOO[8], _cS_, _b_),
        _cU_ = _cT_[1],
        _cV_ = _cT_[2],
        _cW_ = _cT_[3],
        _cX_ = _cT_[4],
        _cY_ = _cT_[5],
        _cZ_ = _cT_[6],
        _c0_ = _cT_[7],
        _c1_ = _cT_[8],
        _c2_ = _cT_[9],
        _c3_ = _cT_[10],
        _c4_ = _cT_[11];
       caml_call2
        (CamlinternalOO[11],
         _cS_,
         [0,
          _c3_,
          function(self_1, param){
           var
            here = param[3],
            kind = param[2],
            node_path = param[1],
            _da_ = caml_call1(self_1[1][1 + _cY_], self_1),
            node_path$0 =
              caml_call3(self_1[1][1 + _c0_], self_1, _da_, node_path),
            kind$0 = caml_call2(self_1[1][1 + _c2_], self_1, kind),
            _db_ = caml_call1(self_1[1][1 + _cW_], self_1),
            here$0 = caml_call3(self_1[1][1 + _cX_], self_1, _db_, here);
           return [0, node_path$0, kind$0, here$0];
          },
          _c2_,
          function(self_1, x){
           if(typeof x === "number") return 0 === x ? 0 : 1;
           switch(x[0]){
             case 0:
              var
               value = x[1],
               value$0 = caml_call2(self_1[1][1 + _cV_], self_1, value);
              return [0, value$0];
             case 1:
              var
               input = x[1],
               input$0 = caml_call2(self_1[1][1 + _cV_], self_1, input);
              return [1, input$0];
             case 2:
              var
               input$1 = x[1],
               input$2 = caml_call2(self_1[1][1 + _cV_], self_1, input$1);
              return [2, input$2];
             case 3:
              var
               input$3 = x[1],
               input$4 = caml_call2(self_1[1][1 + _cV_], self_1, input$3);
              return [3, input$4];
             case 4:
              var t = x[1], t$0 = caml_call2(self_1[1][1 + _c3_], self_1, t);
              return [4, t$0];
             case 5:
              var
               into = x[3],
               via = x[2],
               from = x[1],
               from$0 = caml_call2(self_1[1][1 + _c3_], self_1, from),
               via$0 = caml_call2(self_1[1][1 + _c1_], self_1, via),
               into$0 = caml_call2(self_1[1][1 + _c3_], self_1, into);
              return [5, from$0, via$0, into$0];
             case 6:
              var
               inner = x[3],
               value$1 = x[2],
               id = x[1],
               id$0 = caml_call2(self_1[1][1 + _c1_], self_1, id),
               value$2 = caml_call2(self_1[1][1 + _cV_], self_1, value$1),
               inner$0 = caml_call2(self_1[1][1 + _c3_], self_1, inner);
              return [6, id$0, value$2, inner$0];
             case 7:
              var
               id$1 = x[1],
               id$2 = caml_call2(self_1[1][1 + _c1_], self_1, id$1);
              return [7, id$2];
             case 8:
              var
               by = x[5],
               data_id = x[4],
               cmp_id = x[3],
               key_id = x[2],
               map = x[1],
               map$0 = caml_call2(self_1[1][1 + _cV_], self_1, map),
               key_id$0 = caml_call2(self_1[1][1 + _c1_], self_1, key_id),
               cmp_id$0 = caml_call2(self_1[1][1 + _c1_], self_1, cmp_id),
               data_id$0 = caml_call2(self_1[1][1 + _c1_], self_1, data_id),
               by$0 = caml_call2(self_1[1][1 + _c3_], self_1, by);
              return [8, map$0, key_id$0, cmp_id$0, data_id$0, by$0];
             case 9:
              var
               by$1 = x[6],
               data_id$1 = x[5],
               model_cmp_id = x[4],
               model_key_id = x[3],
               io_key_id = x[2],
               map$1 = x[1],
               map$2 = caml_call2(self_1[1][1 + _cV_], self_1, map$1),
               io_key_id$0 =
                 caml_call2(self_1[1][1 + _c1_], self_1, io_key_id),
               model_key_id$0 =
                 caml_call2(self_1[1][1 + _c1_], self_1, model_key_id),
               model_cmp_id$0 =
                 caml_call2(self_1[1][1 + _c1_], self_1, model_cmp_id),
               data_id$2 = caml_call2(self_1[1][1 + _c1_], self_1, data_id$1),
               by$2 = caml_call2(self_1[1][1 + _c3_], self_1, by$1);
              return [9,
                      map$2,
                      io_key_id$0,
                      model_key_id$0,
                      model_cmp_id$0,
                      data_id$2,
                      by$2];
             case 10:
              var
               map$3 = x[1],
               map$4 = caml_call2(self_1[1][1 + _cV_], self_1, map$3);
              return [10, map$4];
             case 11:
              var
               arms = x[2],
               match = caml_call2(self_1[1][1 + _cV_], self_1, x[1]),
               _c__ = caml_call1(self_1[1][1 + _c3_], self_1),
               arms$0 = caml_call3(self_1[1][1 + _cZ_], self_1, _c__, arms);
              return [11, match, arms$0];
             case 12:
              var
               t$1 = x[1],
               _c$_ = caml_call1(self_1[1][1 + _c3_], self_1),
               t$2 = caml_call3(self_1[1][1 + _cX_], self_1, _c$_, t$1);
              return [12, t$2];
             case 13:
              var
               inner$1 = x[3],
               inject_id = x[2],
               model_id = x[1],
               model_id$0 = caml_call2(self_1[1][1 + _c1_], self_1, model_id),
               inject_id$0 =
                 caml_call2(self_1[1][1 + _c1_], self_1, inject_id),
               inner$2 = caml_call2(self_1[1][1 + _c3_], self_1, inner$1);
              return [13, model_id$0, inject_id$0, inner$2];
             case 14:
              var
               inner$3 = x[2],
               reset_id = x[1],
               reset_id$0 = caml_call2(self_1[1][1 + _c1_], self_1, reset_id),
               inner$4 = caml_call2(self_1[1][1 + _c3_], self_1, inner$3);
              return [14, reset_id$0, inner$4];
             case 15:
              var
               value$3 = x[1],
               value$4 = caml_call2(self_1[1][1 + _cV_], self_1, value$3);
              return [15, value$4];
             default:
              var
               t$3 = x[1],
               t$4 = caml_call2(self_1[1][1 + _c3_], self_1, t$3);
              return [16, t$4];
           }
          },
          _cV_,
          function(self_1, param){
           var
            id = param[4],
            here = param[3],
            kind = param[2],
            node_path = param[1],
            _c8_ = caml_call1(self_1[1][1 + _cY_], self_1),
            node_path$0 =
              caml_call3(self_1[1][1 + _c0_], self_1, _c8_, node_path),
            kind$0 = caml_call2(self_1[1][1 + _cU_], self_1, kind),
            _c9_ = caml_call1(self_1[1][1 + _cW_], self_1),
            here$0 = caml_call3(self_1[1][1 + _cX_], self_1, _c9_, here),
            id$0 = caml_call2(self_1[1][1 + _c1_], self_1, id);
           return [0, node_path$0, kind$0, here$0, id$0];
          },
          _cU_,
          function(self_1, x){
           if(typeof x === "number")
            switch(x){
              case 0:
               return 0;
              case 1:
               return 1;
              case 2:
               return 2;
              default: return 3;
            }
           if(0 === x[0]){
            var
             added_by_let_syntax = x[2],
             t = x[1],
             t$0 = caml_call2(self_1[1][1 + _cV_], self_1, t),
             added_by_let_syntax$0 =
               caml_call2(self_1[1][1 + _c4_], self_1, added_by_let_syntax);
            return [0, t$0, added_by_let_syntax$0];
           }
           var
            inputs = x[1],
            _c7_ = caml_call1(self_1[1][1 + _cV_], self_1),
            inputs$0 = caml_call3(self_1[1][1 + _cZ_], self_1, _c7_, inputs);
           return [1, inputs$0];
          }]);
       return function(_c6_, _c5_){
        return caml_call2(CamlinternalOO[24], _c5_, _cS_);};
      },
      0,
      0]);
   var fold = [];
   caml_update_dummy
    (fold,
     [0,
      0,
      function(_cw_){
       var
        _cx_ = caml_call2(CamlinternalOO[8], _cw_, _b_),
        _cy_ = _cx_[1],
        _cz_ = _cx_[2],
        _cA_ = _cx_[3],
        _cB_ = _cx_[4],
        _cC_ = _cx_[5],
        _cD_ = _cx_[6],
        _cE_ = _cx_[7],
        _cF_ = _cx_[8],
        _cG_ = _cx_[9],
        _cH_ = _cx_[10],
        _cI_ = _cx_[11];
       caml_call2
        (CamlinternalOO[11],
         _cw_,
         [0,
          _cH_,
          function(self_2, param, acc){
           var
            here = param[3],
            kind = param[2],
            node_path = param[1],
            _cQ_ = caml_call1(self_2[1][1 + _cC_], self_2),
            acc$0 =
              caml_call4(self_2[1][1 + _cE_], self_2, _cQ_, node_path, acc),
            acc$1 = caml_call3(self_2[1][1 + _cG_], self_2, kind, acc$0),
            _cR_ = caml_call1(self_2[1][1 + _cA_], self_2),
            acc$2 = caml_call4(self_2[1][1 + _cB_], self_2, _cR_, here, acc$1);
           return acc$2;
          },
          _cG_,
          function(self_2, x, acc){
           if(typeof x === "number") return 0 === x ? acc : acc;
           switch(x[0]){
             case 0:
              var value = x[1];
              return caml_call3(self_2[1][1 + _cz_], self_2, value, acc);
             case 1:
              var input = x[1];
              return caml_call3(self_2[1][1 + _cz_], self_2, input, acc);
             case 2:
              var input$0 = x[1];
              return caml_call3(self_2[1][1 + _cz_], self_2, input$0, acc);
             case 3:
              var input$1 = x[1];
              return caml_call3(self_2[1][1 + _cz_], self_2, input$1, acc);
             case 4:
              var t = x[1];
              return caml_call3(self_2[1][1 + _cH_], self_2, t, acc);
             case 5:
              var
               into = x[3],
               via = x[2],
               from = x[1],
               acc$0 = caml_call3(self_2[1][1 + _cH_], self_2, from, acc),
               acc$1 = caml_call3(self_2[1][1 + _cF_], self_2, via, acc$0),
               acc$2 = caml_call3(self_2[1][1 + _cH_], self_2, into, acc$1);
              return acc$2;
             case 6:
              var
               inner = x[3],
               value$0 = x[2],
               id = x[1],
               acc$3 = caml_call3(self_2[1][1 + _cF_], self_2, id, acc),
               acc$4 = caml_call3(self_2[1][1 + _cz_], self_2, value$0, acc$3),
               acc$5 = caml_call3(self_2[1][1 + _cH_], self_2, inner, acc$4);
              return acc$5;
             case 7:
              var id$0 = x[1];
              return caml_call3(self_2[1][1 + _cF_], self_2, id$0, acc);
             case 8:
              var
               by = x[5],
               data_id = x[4],
               cmp_id = x[3],
               key_id = x[2],
               map = x[1],
               acc$6 = caml_call3(self_2[1][1 + _cz_], self_2, map, acc),
               acc$7 = caml_call3(self_2[1][1 + _cF_], self_2, key_id, acc$6),
               acc$8 = caml_call3(self_2[1][1 + _cF_], self_2, cmp_id, acc$7),
               acc$9 = caml_call3(self_2[1][1 + _cF_], self_2, data_id, acc$8),
               acc$10 = caml_call3(self_2[1][1 + _cH_], self_2, by, acc$9);
              return acc$10;
             case 9:
              var
               by$0 = x[6],
               data_id$0 = x[5],
               model_cmp_id = x[4],
               model_key_id = x[3],
               io_key_id = x[2],
               map$0 = x[1],
               acc$11 = caml_call3(self_2[1][1 + _cz_], self_2, map$0, acc),
               acc$12 =
                 caml_call3(self_2[1][1 + _cF_], self_2, io_key_id, acc$11),
               acc$13 =
                 caml_call3(self_2[1][1 + _cF_], self_2, model_key_id, acc$12),
               acc$14 =
                 caml_call3(self_2[1][1 + _cF_], self_2, model_cmp_id, acc$13),
               acc$15 =
                 caml_call3(self_2[1][1 + _cF_], self_2, data_id$0, acc$14),
               acc$16 = caml_call3(self_2[1][1 + _cH_], self_2, by$0, acc$15);
              return acc$16;
             case 10:
              var map$1 = x[1];
              return caml_call3(self_2[1][1 + _cz_], self_2, map$1, acc);
             case 11:
              var
               arms = x[2],
               acc$17 = caml_call3(self_2[1][1 + _cz_], self_2, x[1], acc),
               _cO_ = caml_call1(self_2[1][1 + _cH_], self_2),
               acc$18 =
                 caml_call4(self_2[1][1 + _cD_], self_2, _cO_, arms, acc$17);
              return acc$18;
             case 12:
              var t$0 = x[1], _cP_ = caml_call1(self_2[1][1 + _cH_], self_2);
              return caml_call4(self_2[1][1 + _cB_], self_2, _cP_, t$0, acc);
             case 13:
              var
               inner$0 = x[3],
               inject_id = x[2],
               model_id = x[1],
               acc$19 = caml_call3(self_2[1][1 + _cF_], self_2, model_id, acc),
               acc$20 =
                 caml_call3(self_2[1][1 + _cF_], self_2, inject_id, acc$19),
               acc$21 =
                 caml_call3(self_2[1][1 + _cH_], self_2, inner$0, acc$20);
              return acc$21;
             case 14:
              var
               inner$1 = x[2],
               reset_id = x[1],
               acc$22 = caml_call3(self_2[1][1 + _cF_], self_2, reset_id, acc),
               acc$23 =
                 caml_call3(self_2[1][1 + _cH_], self_2, inner$1, acc$22);
              return acc$23;
             case 15:
              var value$1 = x[1];
              return caml_call3(self_2[1][1 + _cz_], self_2, value$1, acc);
             default:
              var t$1 = x[1];
              return caml_call3(self_2[1][1 + _cH_], self_2, t$1, acc);
           }
          },
          _cz_,
          function(self_2, param, acc){
           var
            id = param[4],
            here = param[3],
            kind = param[2],
            node_path = param[1],
            _cM_ = caml_call1(self_2[1][1 + _cC_], self_2),
            acc$0 =
              caml_call4(self_2[1][1 + _cE_], self_2, _cM_, node_path, acc),
            acc$1 = caml_call3(self_2[1][1 + _cy_], self_2, kind, acc$0),
            _cN_ = caml_call1(self_2[1][1 + _cA_], self_2),
            acc$2 = caml_call4(self_2[1][1 + _cB_], self_2, _cN_, here, acc$1),
            acc$3 = caml_call3(self_2[1][1 + _cF_], self_2, id, acc$2);
           return acc$3;
          },
          _cy_,
          function(self_2, x, acc){
           if(typeof x === "number")
            switch(x){
              case 0:
               return acc;
              case 1:
               return acc;
              case 2:
               return acc;
              default: return acc;
            }
           if(0 === x[0]){
            var
             added_by_let_syntax = x[2],
             t = x[1],
             acc$0 = caml_call3(self_2[1][1 + _cz_], self_2, t, acc),
             acc$1 =
               caml_call3
                (self_2[1][1 + _cI_], self_2, added_by_let_syntax, acc$0);
            return acc$1;
           }
           var inputs = x[1], _cL_ = caml_call1(self_2[1][1 + _cz_], self_2);
           return caml_call4(self_2[1][1 + _cD_], self_2, _cL_, inputs, acc);
          }]);
       return function(_cK_, _cJ_){
        return caml_call2(CamlinternalOO[24], _cJ_, _cw_);};
      },
      0,
      0]);
   var
    fold$0 =
      caml_call2
       (CamlinternalOO[19],
        _c_,
        function(_cb_){
         var
          _cc_ = caml_call2(CamlinternalOO[8], _cb_, _b_),
          _cd_ = _cc_[3],
          _ce_ = _cc_[4],
          _cf_ = _cc_[5],
          _cg_ = _cc_[6],
          _ch_ = _cc_[7],
          _ci_ = _cc_[8],
          _cj_ = _cc_[11],
          _ck_ =
            caml_call6(CamlinternalOO[18], _cb_, 0, _a_, shared, fold, 1)[1];
         caml_call2
          (CamlinternalOO[11],
           _cb_,
           [0,
            _cd_,
            function(self_3, param){return function(_cv_){return _cv_;};},
            _ce_,
            function(self_3, f, o, acc){
             var _cu_ = caml_call1(Core_Fn[6], f);
             return caml_call3(Core_Option[39], o, acc, _cu_);
            },
            _cf_,
            function(self_3, param){return function(_ct_){return _ct_;};},
            _cg_,
            function(self_3, f, l, acc){
             var _cs_ = caml_call1(Core_Fn[6], f);
             return caml_call3(Core_List[20], l, acc, _cs_);
            },
            _ch_,
            function(self_3, _cq_, param){
             return function(_cr_){return _cr_;};
            },
            _ci_,
            function(self_3, param){return function(_cp_){return _cp_;};},
            _cj_,
            function(self_3, param){return function(_co_){return _co_;};}]);
         return function(_cm_, _cl_){
          var _cn_ = caml_call2(CamlinternalOO[24], _cl_, _cb_);
          caml_call1(_ck_, _cn_);
          return caml_call3(CamlinternalOO[26], _cl_, _cn_, _cb_);};
        }),
    map$0 =
      caml_call2
       (CamlinternalOO[19],
        _c_,
        function(_bW_){
         var
          _bX_ = caml_call2(CamlinternalOO[8], _bW_, _b_),
          _bY_ = _bX_[3],
          _bZ_ = _bX_[4],
          _b0_ = _bX_[5],
          _b1_ = _bX_[6],
          _b2_ = _bX_[7],
          _b3_ = _bX_[8],
          _b4_ = _bX_[11],
          _b5_ =
            caml_call6(CamlinternalOO[18], _bW_, 0, _a_, shared, map, 1)[1];
         caml_call2
          (CamlinternalOO[11],
           _bW_,
           [0,
            _bY_,
            function(self_5){return function(_ca_){return _ca_;};},
            _bZ_,
            function(self_5, f, x){return caml_call2(Core_Option[30], x, f);},
            _b0_,
            function(self_5){return function(_b$_){return _b$_;};},
            _b1_,
            function(self_5, f, x){return caml_call2(Core_List[50], x, f);},
            _b2_,
            function(self_5, f, x){return caml_call2(Core_Lazy[25], x, f);},
            _b3_,
            function(self_5){return function(_b__){return _b__;};},
            _b4_,
            function(self_5){return function(_b9_){return _b9_;};}]);
         return function(_b7_, _b6_){
          var _b8_ = caml_call2(CamlinternalOO[24], _b6_, _bW_);
          caml_call1(_b5_, _b8_);
          return caml_call3(CamlinternalOO[26], _b6_, _b8_, _bW_);};
        }),
    _bC_ = [0, 0],
    _bD_ = [0, 0];
   function sanitize_for_testing(t){
    if(! _bD_[1]){
     var
      _bK_ = caml_call1(CamlinternalOO[16], _c_),
      _bL_ = caml_call2(CamlinternalOO[8], _bK_, _b_)[8],
      _bM_ = caml_call6(CamlinternalOO[18], _bK_, 0, 0, _d_, fold$0, 0),
      _bO_ = _bM_[5],
      _bN_ = _bM_[1];
     caml_call3
      (CamlinternalOO[10],
       _bK_,
       _bL_,
       function(self_7, id, min_uid){
        var _bV_ = caml_call2(Core[95], min_uid, id);
        return caml_call2(caml_call1(_bO_, self_7), id, _bV_);
       });
     caml_call1(CamlinternalOO[17], _bK_);
     _bD_[1] =
      function(_bT_){
       var _bU_ = caml_call2(CamlinternalOO[24], 0, _bK_);
       caml_call2(_bN_, _bT_[2], _bU_);
       return caml_call3(CamlinternalOO[26], 0, _bU_, _bK_);
      };
    }
    var
     find_minimum_ids = caml_call1(_bD_[1], [0, 0, fold$0[4]]),
     min_uid =
       caml_call3
        (caml_get_public_method(find_minimum_ids, 381242055, 1),
         find_minimum_ids,
         t,
         Core_Int[43]),
     min_uid$0 = caml_call2(Core[89], min_uid, Core_Int[43]) ? 0 : min_uid;
    if(! _bC_[1]){
     var
      _bE_ = caml_call1(CamlinternalOO[16], _c_),
      _bF_ = caml_call2(CamlinternalOO[3], _bE_, cst),
      _bG_ = caml_call2(CamlinternalOO[8], _bE_, _b_)[8],
      _bH_ = caml_call6(CamlinternalOO[18], _bE_, 0, 0, _d_, map$0, 0),
      _bJ_ = _bH_[5],
      _bI_ = _bH_[1];
     caml_call3
      (CamlinternalOO[10],
       _bE_,
       _bG_,
       function(self_8, id){
        var env = self_8[1 + _bF_], _bS_ = id - env[1] | 0;
        return caml_call1(caml_call1(_bJ_, self_8), _bS_);
       });
     caml_call1(CamlinternalOO[17], _bE_);
     _bC_[1] =
      function(_bP_){
       var _bQ_ = _bP_[1], _bR_ = caml_call2(CamlinternalOO[24], 0, _bE_);
       caml_call2(_bI_, _bP_[2], _bR_);
       _bR_[1 + _bF_] = _bQ_;
       return caml_call3(CamlinternalOO[26], 0, _bR_, _bE_);
      };
    }
    var
     replace_old_uids_with_sanitize =
       caml_call1(_bC_[1], [0, [0, min_uid$0], map$0[4]]);
    return caml_call2
            (caml_get_public_method
              (replace_old_uids_with_sanitize, 381242055, 2),
             replace_old_uids_with_sanitize,
             t);
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Skeleton);
   var
    Bonsai_Skeleton =
      [0,
       [0,
        hash_fold_t,
        hash,
        t_of_sexp,
        sexp_of_t,
        compare,
        to_int,
        of_type_id,
        of_model_type_id,
        of_int],
       [0,
        sexp_of_t$0,
        sexp_of_kind,
        t_of_sexp$0,
        kind_of_sexp,
        of_value$0,
        minimal_sexp_of_t,
        inputs,
        to_string_hum],
       [0,
        sexp_of_t$2,
        sexp_of_kind$0,
        t_of_sexp$1,
        kind_of_sexp$0,
        of_computation,
        sanitize_for_testing,
        minimal_sexp_of_t$0,
        inputs$0,
        children],
       [0, fold$0, map$0]];
   runtime.caml_register_global(546, Bonsai_Skeleton, cst_Bonsai_Skeleton);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__To_dot
//# unitInfo: Requires: Base__Buffer, Bonsai__Pre_process, Bonsai__Skeleton, Core, Core__Char, Core__Hashtbl, Core__Int, Core__List, Core__Option, Core__Source_code_position, Core__String, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$8 = "",
    cst_Bonsai_To_dot = "Bonsai__To_dot",
    cst_Mrecord$1 = "Mrecord",
    cst_bonsai = "bonsai",
    cst_const$1 = "const",
    cst_leaf$0 = "leaf",
    cst_oval$1 = "oval",
    cst_src_to_dot_ml = "src/to_dot.ml",
    cst_width_1_height_1 = "width=.1, height=.1",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$7 = ";",
    cst$5 = "_",
    cst$6 = cst$8,
    color = "#FFDD94",
    cst$4 = cst$8,
    cst$3 = cst$8,
    cst = cst$8,
    cst$2 = cst$8,
    cst$0 = '"; ',
    cst$1 = cst$8,
    Core_List = global_data.Core__List,
    Base_Buffer = global_data.Base__Buffer,
    Bonsai_Skeleton = global_data.Bonsai__Skeleton,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Bonsai_Pre_process = global_data.Bonsai__Pre_process,
    Core = global_data.Core,
    Core_Char = global_data.Core__Char,
    Core_String = global_data.Core__String,
    Assert_failure = global_data.Assert_failure,
    Core_Int = global_data.Core__Int,
    Stdlib_String = global_data.Stdlib__String,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Core_Option = global_data.Core__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_To_dot);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], cst_src_to_dot_ml);
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "to_dot.ml");
   var
    of_string = Core_String[129],
    to_string = Core_String[130],
    _a_ = Core_String[70],
    cst_named = "named_",
    _b_ = [0, '"', 0],
    cst_tooltip = ', tooltip = "',
    _c_ = [0, "]", 0],
    cst_fillcolor = '"; fillcolor = "',
    cst_label = '", label = "',
    cst_shape = ', shape = "',
    cst_style_filled = "[ style=filled",
    cst_D0E6A5 = "#D0E6A5",
    cst_state_machine = "{state machine}",
    cst_Mrecord = cst_Mrecord$1,
    _d_ = [0, cst_leaf$0],
    cst_000000 = "#000000",
    cst_circle = "circle",
    _e_ = [0, cst_width_1_height_1],
    cst_86E3CE = "#86E3CE",
    cst_Mrecord$0 = cst_Mrecord$1,
    cst_oval = cst_oval$1,
    cst_FFFFFF = "#FFFFFF",
    cst_subst = "subst",
    cst_oval$0 = cst_oval$1,
    _f_ = [0, cst_width_1_height_1],
    _g_ = [0, cst_src_to_dot_ml, 79, 2],
    cst_dir_none = " [dir=none];",
    _h_ =
      [0, [2, 0, [11, " -> ", [2, 0, [2, 0, [12, 10, 0]]]]], "%s -> %s%s\n"],
    cst_named$0 = "named",
    cst_const = cst_const$1,
    cst_const$0 = cst_const$1,
    cst_exception = "exception",
    cst_incr = "incr",
    cst_cutoff = "cutoff",
    cst_mapn = "mapn",
    cst_leaf = cst_leaf$0,
    cst_leaf0 = "leaf0",
    cst_path = "path",
    cst_read = "read",
    cst_leaf_incr = "leaf_incr",
    cst_model_cutoff = "model_cutoff",
    cst_dyn_set = "dyn_set",
    cst_fetch = "fetch",
    cst_assoc = "assoc",
    cst_assoc_on = "assoc_on",
    cst_assoc_simpl = "assoc_simpl",
    cst_switch = "switch",
    cst_forced_lazy = "forced_lazy",
    cst_lazy = "lazy",
    cst_wrap = "wrap",
    cst_with_model_resetter = "with_model_resetter",
    cst_life_cycle = "life_cycle",
    cst_identity = "identity",
    _i_ = [0, [11, "digraph {\n", [2, 0, [12, 125, 0]]], "digraph {\n%s}"];
   function basic_shape(opt, tooltip, shape, label, color, param){
    var other = opt ? opt[1] : cst$3;
    if(tooltip)
     var
      tooltip$0 = tooltip[1],
      tooltip$1 =
        caml_call2
         (Stdlib_String[7], cst, [0, cst_tooltip, [0, tooltip$0, _b_]]);
    else
     var tooltip$1 = cst$2;
    return caml_call2
            (Stdlib_String[7],
             cst$1,
             [0,
              cst_style_filled,
              [0,
               tooltip$1,
               [0,
                cst_shape,
                [0,
                 shape,
                 [0,
                  cst_label,
                  [0,
                   label,
                   [0, cst_fillcolor, [0, color, [0, cst$0, [0, other, _c_]]]]]]]]]]);
   }
   function register(state, kind$1, name){
    if
     (!
      caml_call2
       (Core_String[20],
        name,
        function(c){
         var _s_ = caml_call1(Core_Char[18], c);
         return _s_ ? _s_ : caml_call2(Core_Char[50], c, 95);
        }))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
    var
     _q_ = [0, name, [0, cst$5, [0, caml_call1(Core_Int[84], state[1]), 0]]],
     s = caml_call2(Stdlib_String[7], cst$6, _q_);
    caml_call2(Base_Buffer[16], state[3], s);
    caml_call2(Base_Buffer[15], state[3], 32);
    if(typeof kind$1 === "number")
     var
      _r_ =
        0 === kind$1
         ? basic_shape(0, _d_, cst_Mrecord, cst_state_machine, cst_D0E6A5, 0)
         : basic_shape(_e_, 0, cst_circle, cst$4, cst_000000, 0);
    else
     switch(kind$1[0]){
       case 0:
        var
         kind = kind$1[1],
         _r_ = basic_shape(0, 0, cst_Mrecord$0, kind, cst_86E3CE, 0);
        break;
       case 1:
        var
         here = kind$1[2],
         kind$0 = kind$1[1],
         tooltip =
           caml_call2(Core_Option[30], here, Core_Source_code_position[2]),
         _r_ = basic_shape(0, tooltip, cst_oval, kind$0, color, 0);
        break;
       default:
        var
         here$0 = kind$1[1],
         tooltip$0 =
           caml_call2(Core_Option[30], here$0, Core_Source_code_position[2]),
         _r_ =
           basic_shape(_f_, tooltip$0, cst_oval$0, cst_subst, cst_FFFFFF, 0);
     }
    caml_call2(Base_Buffer[16], state[3], _r_);
    caml_call2(Base_Buffer[15], state[3], 10);
    state[1] = state[1] + 1 | 0;
    return caml_call1(of_string, s);
   }
   function arrow(state, from, to){
    var
     arrow_string = caml_call2(_a_, to, cst_named) ? cst_dir_none : cst$7,
     _o_ = caml_call1(to_string, to),
     _p_ = caml_call1(to_string, from);
    return caml_call5(Core[235], state[3], _h_, _p_, _o_, arrow_string);
   }
   function arrow_from_many(state, to, l){
    caml_call2
     (Core_List[19], l, function(from){return arrow(state, from, to);});
    return to;
   }
   function register_named(state, shape, name){
    return caml_call3
            (Core_Hashtbl[53],
             state[2],
             name,
             function(param){return register(state, shape, cst_named$0);});
   }
   function follow_skeleton_value(state, param){
    var id = param[4], here = param[3], value = param[2];
    function register$0(s){return register(state, [1, s, here], s);}
    var shape = [1, cst_const$0, here];
    if(typeof value === "number")
     switch(value){
       case 0:
        return caml_call3
                (Core_Hashtbl[53],
                 state[2],
                 id,
                 function(param){return register(state, shape, cst_const);});
       case 1:
        return register$0(cst_exception);
       case 2:
        return register$0(cst_incr);
       default: return register_named(state, [2, here], id);
     }
    if(0 === value[0]){
     var
      t = value[1],
      me = register$0(cst_cutoff),
      them = follow_skeleton_value(state, t);
     arrow(state, them, me);
     return me;
    }
    var
     inputs = value[1],
     _n_ =
       caml_call2
        (Core_List[50],
         inputs,
         function(value){return follow_skeleton_value(state, value);});
    return arrow_from_many(state, register$0(cst_mapn), _n_);
   }
   function follow_dynamic_skeleton_leaf(state, input){
    var me = register(state, 0, cst_leaf), match = input[2];
    if(typeof match === "number"){if(0 === match) return me;}
    else if(1 === match[0]){
     var inputs = match[1];
     return arrow_from_many
             (state,
              me,
              caml_call2
               (Core_List[50],
                inputs,
                function(value){return follow_skeleton_value(state, value);}));
    }
    arrow(state, follow_skeleton_value(state, input), me);
    return me;
   }
   function follow_skeleton_computation(state, computation){
    var computation$0 = computation;
    for(;;){
     var
      register_computation =
        function(kind){return register(state, [0, kind], kind);},
      match = computation$0[2];
     if(typeof match === "number")
      return 0 === match
              ? register(state, 0, cst_leaf0)
              : register_computation(cst_path);
     switch(match[0]){
       case 0:
        var value = match[1], me = register_computation(cst_read);
        arrow(state, follow_skeleton_value(state, value), me);
        return me;
       case 1:
        var input = match[1];
        return follow_dynamic_skeleton_leaf(state, input);
       case 2:
        var input$0 = match[1];
        return follow_dynamic_skeleton_leaf(state, input$0);
       case 3:
        return register_computation(cst_leaf_incr);
       case 4:
        var t = match[1], me$0 = register_computation(cst_model_cutoff);
        arrow(state, follow_skeleton_computation(state, t), me$0);
        return me$0;
       case 5:
        var
         computation$1 = match[3],
         via = match[2],
         from = match[1],
         _m_ = register_named(state, [2, computation$0[3]], via);
        arrow(state, follow_skeleton_computation(state, from), _m_);
        computation$0 = computation$1;
        break;
       case 6:
        var
         computation$2 = match[3],
         value$0 = match[2],
         id = match[1],
         me$1 = register_computation(cst_dyn_set);
        arrow(state, follow_skeleton_value(state, value$0), me$1);
        arrow(state, me$1, register_named(state, 2, id));
        computation$0 = computation$2;
        break;
       case 7:
        var id$0 = match[1], me$2 = register_computation(cst_fetch);
        arrow(state, register_named(state, 2, id$0), me$2);
        return me$2;
       case 8:
        var
         by = match[5],
         map = match[1],
         me$3 = register_computation(cst_assoc);
        arrow(state, follow_skeleton_computation(state, by), me$3);
        arrow(state, follow_skeleton_value(state, map), me$3);
        return me$3;
       case 9:
        var
         by$0 = match[6],
         map$0 = match[1],
         me$4 = register_computation(cst_assoc_on);
        arrow(state, follow_skeleton_computation(state, by$0), me$4);
        arrow(state, follow_skeleton_value(state, map$0), me$4);
        return me$4;
       case 10:
        var map$1 = match[1], me$5 = register_computation(cst_assoc_simpl);
        arrow(state, follow_skeleton_value(state, map$1), me$5);
        return me$5;
       case 11:
        var
         arms = match[2],
         match$0 = match[1],
         me$6 = register_computation(cst_switch);
        arrow(state, follow_skeleton_value(state, match$0), me$6);
        caml_call2
         (Core_List[19],
          arms,
          function(t){
           return arrow(state, follow_skeleton_computation(state, t), me$6);
          });
        return me$6;
       case 12:
        var match$1 = match[1];
        if(! match$1) return register_computation(cst_lazy);
        var t$0 = match$1[1], me$7 = register_computation(cst_forced_lazy);
        arrow(state, follow_skeleton_computation(state, t$0), me$7);
        return me$7;
       case 13:
        var inner = match[3], me$8 = register_computation(cst_wrap);
        arrow(state, follow_skeleton_computation(state, inner), me$8);
        return me$8;
       case 14:
        var
         inner$0 = match[2],
         reset_id = match[1],
         me$9 = register_computation(cst_with_model_resetter);
        arrow(state, me$9, register_named(state, 1, reset_id));
        arrow(state, follow_skeleton_computation(state, inner$0), me$9);
        return me$9;
       case 15:
        var value$1 = match[1], me$10 = register_computation(cst_life_cycle);
        arrow(state, follow_skeleton_value(state, value$1), me$10);
        return me$10;
       default:
        var t$1 = match[1], me$11 = register_computation(cst_identity);
        arrow(state, follow_skeleton_computation(state, t$1), me$11);
        return me$11;
     }
    }
   }
   function to_dot(opt, t){
    var
     pre_process = opt ? opt[1] : 1,
     _j_ = caml_call1(Base_Buffer[2], 2014),
     _k_ = Bonsai_Skeleton[1],
     state =
       [0,
        0,
        caml_call3(Core_Hashtbl[4], 0, 0, [0, _k_[5], _k_[4], _k_[2]]),
        _j_],
     computation = pre_process ? caml_call1(Bonsai_Pre_process[1], t) : t,
     skeleton_computation = caml_call1(Bonsai_Skeleton[3][5], computation);
    follow_skeleton_computation(state, skeleton_computation);
    var _l_ = caml_call1(Base_Buffer[3], state[3]);
    return caml_call2(Core[259], _i_, _l_);
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_To_dot);
   var Bonsai_To_dot = [0, to_dot];
   runtime.caml_register_global(85, Bonsai_To_dot, cst_Bonsai_To_dot);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Linter
//# unitInfo: Requires: Bonsai__Skeleton, CamlinternalOO, Core__List, Core__Option, Core__Source_code_position, Core__String, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Linter = "Bonsai__Linter",
    cst_bonsai = "bonsai",
    cst_bool = "bool",
    cst_computation = "computation",
    cst_computation_kind = "computation_kind",
    cst_id = "id",
    cst_lazy = "lazy_",
    cst_list = "list",
    cst_node_path = "node_path",
    cst_option = "option",
    cst_source_code_position = "source_code_position",
    cst_value = "value",
    cst_value_kind = "value_kind";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = ": ",
    cst$0 = "",
    _a_ =
      [0,
       cst_value_kind,
       cst_value,
       cst_source_code_position,
       cst_option,
       cst_node_path,
       cst_list,
       cst_lazy,
       cst_id,
       cst_computation_kind,
       cst_computation,
       cst_bool],
    _b_ =
      [0,
       cst_bool,
       cst_list,
       cst_computation_kind,
       cst_lazy,
       cst_id,
       cst_node_path,
       cst_value_kind,
       cst_computation,
       cst_option,
       cst_value,
       cst_source_code_position],
    shared =
      [0,
       cst_bool,
       cst_computation,
       cst_computation_kind,
       cst_id,
       cst_lazy,
       cst_list,
       cst_node_path,
       cst_option,
       cst_source_code_position,
       cst_value,
       cst_value_kind],
    Core_List = global_data.Core__List,
    Bonsai_Skeleton = global_data.Bonsai__Skeleton,
    Core_Source_code_position = global_data.Core__Source_code_position,
    CamlinternalOO = global_data.CamlinternalOO,
    Core_Option = global_data.Core__Option,
    Core_String = global_data.Core__String,
    Stdlib_String = global_data.Stdlib__String,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Linter);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/linter.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "linter.ml");
   function to_string(param){
    var
     here = param[2],
     message = param[1],
     _r_ =
       [0,
        caml_call1(Core_Source_code_position[2], here),
        [0, cst, [0, message, 0]]];
    return caml_call2(Stdlib_String[7], cst$0, _r_);
   }
   function relative_to(base, t){
    if(! caml_call2(Core_String[138], base[1], t[2][1])) return t;
    var _q_ = t[2];
    return [0, t[1], [0, _q_[1], t[2][2] - base[2] | 0, _q_[3], _q_[4]]];
   }
   function value_is_constant(param){
    var param$0 = param;
    for(;;){
     var kind = param$0[2];
     if(typeof kind === "number") return 1 < kind ? 0 : 1;
     if(0 !== kind[0]){
      var inputs = kind[1];
      return caml_call2(Core_List[24], inputs, value_is_constant);
     }
     var t = kind[1];
     param$0 = t;
    }
   }
   var
    _c_ = caml_call1(CamlinternalOO[16], _b_),
    _d_ = caml_call2(CamlinternalOO[8], _c_, _a_)[2],
    _e_ =
      caml_call6
       (CamlinternalOO[18], _c_, 0, 0, shared, Bonsai_Skeleton[4][1], 1),
    cst_unfolded_constant = "unfolded constant",
    _g_ = _e_[11],
    _f_ = _e_[1];
   caml_call3
    (CamlinternalOO[10],
     _c_,
     _d_,
     function(self_1, value, param){
      var
       here = param[2],
       warnings = param[1],
       here$0 = caml_call2(Core_Option[35], value[3], here),
       match = value[2];
      if(typeof match === "number")
       var is_unfolded_constant = 0;
      else if(0 === match[0])
       var t = match[1], is_unfolded_constant = value_is_constant(t);
      else
       var
        inputs = match[1],
        is_unfolded_constant =
          caml_call2(Core_List[24], inputs, value_is_constant);
      return is_unfolded_constant
              ? [0, [0, [0, cst_unfolded_constant, here$0], warnings], here$0]
              : caml_call2
                (caml_call1(_g_, self_1), value, [0, warnings, here$0]);
     });
   caml_call1(CamlinternalOO[17], _c_);
   var _h_ = caml_call2(CamlinternalOO[24], 0, _c_);
   caml_call1(_f_, _h_);
   var
    unfolded_constants_linter = caml_call3(CamlinternalOO[26], 0, _h_, _c_),
    _i_ = caml_call1(CamlinternalOO[16], _b_),
    _j_ = caml_call2(CamlinternalOO[8], _i_, _a_)[10],
    _k_ =
      caml_call6
       (CamlinternalOO[18], _i_, 0, 0, shared, Bonsai_Skeleton[4][1], 1),
    cst_state_machine1_can_be_opti =
      "state_machine1 can be optimized to a state_machine0",
    _m_ = _k_[3],
    _l_ = _k_[1];
   caml_call3
    (CamlinternalOO[10],
     _i_,
     _j_,
     function(self_2, computation, param){
      var
       here = param[2],
       warnings = param[1],
       here$0 = caml_call2(Core_Option[35], computation[3], here),
       match = computation[2];
      a:
      {
       if(typeof match !== "number" && 2 === match[0]){
        var
         input = match[1],
         _p_ =
           value_is_constant(input)
            ? [0, [0, cst_state_machine1_can_be_opti, here$0], warnings]
            : warnings,
         warnings$0 = _p_;
        break a;
       }
       var warnings$0 = warnings;
      }
      return caml_call2
              (caml_call1(_m_, self_2), computation, [0, warnings$0, here$0]);
     });
   caml_call1(CamlinternalOO[17], _i_);
   var _n_ = caml_call2(CamlinternalOO[24], 0, _i_);
   caml_call1(_l_, _n_);
   var
    state_machine1_to_state_machin =
      caml_call3(CamlinternalOO[26], 0, _n_, _i_),
    _o_ = [0, "_none_", 0, 0, 0];
   function list_warnings(computation){
    var
     computation$0 = caml_call1(Bonsai_Skeleton[3][5], computation),
     default_location = caml_call1(Core_Source_code_position[3], _o_),
     linters =
       [0, unfolded_constants_linter, [0, state_machine1_to_state_machin, 0]];
    return caml_call3
            (Core_List[20],
             linters,
             0,
             function(warnings, linter){
              var
               warnings$0 =
                 caml_call3
                   (runtime.caml_get_public_method(linter, 381242055, 3),
                    linter,
                    computation$0,
                    [0, warnings, default_location])
                  [1];
              return warnings$0;
             });
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Linter);
   var Bonsai_Linter = [0, [0, to_string, relative_to], list_warnings];
   runtime.caml_register_global(26, Bonsai_Linter, cst_Bonsai_Linter);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Legacy_api_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Legacy_api_intf = "Bonsai__Legacy_api_intf",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Legacy_api_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/legacy_api_intf.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "legacy_api_intf.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Legacy_api_intf);
   var Bonsai_Legacy_api_intf = [0];
   runtime.caml_register_global
    (11, Bonsai_Legacy_api_intf, cst_Bonsai_Legacy_api_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Legacy_api
//# unitInfo: Requires: Bonsai__Proc, Bonsai__Proc_min, Bonsai__Value, Core, Core__Tuple, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Legacy_api = "Bonsai__Legacy_api",
    cst_bonsai = "bonsai",
    cst_src_legacy_api_ml = "src/legacy_api.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ui_incr = global_data.Ui_incr,
    Bonsai_Proc = global_data.Bonsai__Proc,
    Bonsai_Proc_min = global_data.Bonsai__Proc_min,
    Bonsai_Value = global_data.Bonsai__Value,
    Core_Tuple = global_data.Core__Tuple,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Legacy_api);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], cst_src_legacy_api_ml);
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "legacy_api.ml");
   function const$0(x, param){return caml_call1(Bonsai_Proc[16], x);}
   var input = Bonsai_Proc[1];
   function pure(f, i){
    var _am_ = caml_call2(Bonsai_Proc[48][3], i, f);
    return caml_call1(Bonsai_Proc[1], _am_);
   }
   function compose(a, b, i){
    var _al_ = caml_call1(a, i);
    return caml_call3(Bonsai_Proc[14][2][1], 0, _al_, b);
   }
   function map(a, f, i){
    var _aj_ = caml_call1(a, i);
    return caml_call3
            (Bonsai_Proc[14][2][1],
             0,
             _aj_,
             function(x){
              var _ak_ = caml_call2(Bonsai_Proc[48][3], x, f);
              return caml_call1(Bonsai_Proc[1], _ak_);
             });
   }
   function map_input(a, f, i){
    return caml_call1(a, caml_call2(Bonsai_Proc[48][3], i, f));
   }
   var
    of_module = Bonsai_Proc[21],
    _a_ = [0, "action"],
    cst_An_action_sent_to_a_state_ =
      "An action sent to a [state_machine1] has been dropped because its input was not present. This happens when the [state_machine1] is inactive when it receives a message.",
    cst_src_legacy_api_ml_42_12 = "src/legacy_api.ml:42:12",
    _b_ = [0, [0, cst_src_legacy_api_ml, 54, 1372, 1374]],
    _c_ = [0, [0, cst_src_legacy_api_ml, 53, 1351, 1353]],
    _d_ = [0, cst_src_legacy_api_ml, 67, 2],
    _e_ = [0, cst_src_legacy_api_ml, 67, 1695, 1697],
    _f_ = [0, [0, cst_src_legacy_api_ml, 67, 1695, 1697]];
   function state_machine
   (model, Action, here, default_model, apply_action, input){
    return caml_call6
            (Bonsai_Proc[7],
             model,
             Action,
             0,
             default_model,
             function(inject, schedule_event, input, model, action){
              if(input){
               var input$0 = input[1];
               return caml_call5
                       (apply_action,
                        inject,
                        schedule_event,
                        input$0,
                        model,
                        action);
              }
              var
               _ag_ =
                 [0, [1, [0, _a_, [0, caml_call1(Action[1], action), 0]]], 0],
               _ah_ =
                 [0,
                  caml_call1
                   (Sexplib0_Sexp_conv[7], cst_An_action_sent_to_a_state_),
                  _ag_],
               _ai_ =
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7], cst_src_legacy_api_ml_42_12),
                   _ah_]];
              caml_call2(Core[251], 0, _ai_);
              return model;
             },
             input);
   }
   function both(a, b, i){
    var _ad_ = caml_call1(a, i);
    return caml_call3
            (Bonsai_Proc[14][2][1],
             _c_,
             _ad_,
             function(a){
              var _ae_ = caml_call1(b, i);
              return caml_call3
                      (Bonsai_Proc[14][2][1],
                       _b_,
                       _ae_,
                       function(b){
                        var _af_ = caml_call2(Bonsai_Proc[48][4], a, b);
                        return caml_call1(Bonsai_Proc[14][1], _af_);
                       });
             });
   }
   function enum$0(m, which, handle, input){
    function with$0(key){return caml_call2(handle, key, input);}
    var match = caml_call2(Bonsai_Proc[48][3], input, which);
    return caml_call3(Bonsai_Proc[19], m, match, with$0);
   }
   function if$0(choose, then, else$0, input){
    var
     cond = caml_call2(Bonsai_Proc[48][3], input, choose),
     _ab_ = caml_call1(Bonsai_Proc[14][2][3], cond);
    return caml_call3
            (Bonsai_Proc[14][2][1],
             _f_,
             _ab_,
             function(pattern_syntax_003){
              var
               _ac_ =
                 caml_call3
                  (Bonsai_Proc[14][2][4],
                   0,
                   pattern_syntax_003,
                   function(param){return param ? 0 : 1;});
              return caml_call4
                      (Bonsai_Proc[14][2][2],
                       _e_,
                       _ac_,
                       2,
                       function(param){
                        if(0 === param) return caml_call1(then, input);
                        if(1 === param) return caml_call1(else$0, input);
                        throw caml_maybe_attach_backtrace
                               ([0, Assert_failure, _d_], 1);
                       });
             });
   }
   function assoc_input(comparator, f, input){
    return caml_call3
            (Bonsai_Proc[9], comparator, input, function(param){return f;});
   }
   function associ_input(comparator, f, input){
    return caml_call3
            (Bonsai_Proc[9],
             comparator,
             input,
             function(key, data){
              return caml_call1(f, caml_call2(Bonsai_Proc[48][4], key, data));
             });
   }
   function associ_input_with_extra(comparator, f, input){
    var
     extra =
       caml_call3
        (Bonsai_Proc[14][2][4],
         0,
         input,
         function(param){
          var pattern_syntax_004 = param[2];
          return pattern_syntax_004;
         }),
     input$0 =
       caml_call3
        (Bonsai_Proc[14][2][4],
         0,
         input,
         function(param){
          var pattern_syntax_005 = param[1];
          return pattern_syntax_005;
         });
    return caml_call3
            (Bonsai_Proc[9],
             comparator,
             input$0,
             function(key, data){
              var
               _$_ = caml_call2(Bonsai_Proc[14][5], Core_Tuple[2][5], key),
               _aa_ = caml_call2(Bonsai_Proc[14][4], _$_, data);
              return caml_call1
                      (f, caml_call2(Bonsai_Proc[14][4], _aa_, extra));
             });
   }
   var
    Map = [0, assoc_input, associ_input, associ_input_with_extra],
    _g_ = [0, [0, cst_src_legacy_api_ml, 94, 2402, 2406]],
    _h_ = [0, [0, cst_src_legacy_api_ml, 100, 2528, 2532]],
    _i_ = [0, [0, cst_src_legacy_api_ml, 107, 2686, 2690]],
    _j_ = [0, [0, cst_src_legacy_api_ml, 106, 2657, 2661]],
    _k_ = [0, [0, cst_src_legacy_api_ml, 112, 2785, 2789]],
    _l_ = [0, [0, cst_src_legacy_api_ml, 117, 2877, 2881]],
    _m_ = [0, [0, cst_src_legacy_api_ml, 123, 2993, 2997]],
    _n_ = [0, [0, cst_src_legacy_api_ml, 122, 2966, 2970]],
    _o_ = [0, [0, cst_src_legacy_api_ml, 130, 3174, 3178]],
    _p_ = [0, [0, cst_src_legacy_api_ml, 128, 3103, 3107]],
    _q_ = [0, [0, cst_src_legacy_api_ml, 137, 3378, 3382]],
    _r_ = [0, [0, cst_src_legacy_api_ml, 135, 3310, 3314]];
   function arr(f){return function(___){return pure(f, ___);};}
   function symbol(a, f){return function(_Z_){return map(a, f, _Z_);};}
   function symbol$0(a, f){
    return function(_Y_){return map_input(a, f, _Y_);};
   }
   function first(f, i){
    var
     fst =
       caml_call3
        (Bonsai_Proc[14][2][4],
         0,
         i,
         function(param){
          var pattern_syntax_006 = param[1];
          return pattern_syntax_006;
         }),
     snd =
       caml_call3
        (Bonsai_Proc[14][2][4],
         0,
         i,
         function(param){
          var pattern_syntax_007 = param[2];
          return pattern_syntax_007;
         }),
     _W_ = caml_call1(f, fst);
    return caml_call3
            (Bonsai_Proc[14][2][1],
             _g_,
             _W_,
             function(out){
              var _X_ = caml_call2(Bonsai_Proc[48][4], out, snd);
              return caml_call1(Bonsai_Proc[14][1], _X_);
             });
   }
   function second(f, i){
    var
     fst =
       caml_call3
        (Bonsai_Proc[14][2][4],
         0,
         i,
         function(param){
          var pattern_syntax_009 = param[1];
          return pattern_syntax_009;
         }),
     snd =
       caml_call3
        (Bonsai_Proc[14][2][4],
         0,
         i,
         function(param){
          var pattern_syntax_010 = param[2];
          return pattern_syntax_010;
         }),
     _U_ = caml_call1(f, snd);
    return caml_call3
            (Bonsai_Proc[14][2][1],
             _h_,
             _U_,
             function(out){
              var _V_ = caml_call2(Bonsai_Proc[48][4], fst, out);
              return caml_call1(Bonsai_Proc[14][1], _V_);
             });
   }
   function symbol$1(f1, f2, i){
    var
     fst =
       caml_call3
        (Bonsai_Proc[14][2][4],
         0,
         i,
         function(param){
          var pattern_syntax_012 = param[1];
          return pattern_syntax_012;
         }),
     snd =
       caml_call3
        (Bonsai_Proc[14][2][4],
         0,
         i,
         function(param){
          var pattern_syntax_013 = param[2];
          return pattern_syntax_013;
         }),
     _R_ = caml_call1(f1, fst);
    return caml_call3
            (Bonsai_Proc[14][2][1],
             _j_,
             _R_,
             function(out1){
              var _S_ = caml_call1(f2, snd);
              return caml_call3
                      (Bonsai_Proc[14][2][1],
                       _i_,
                       _S_,
                       function(out2){
                        var _T_ = caml_call2(Bonsai_Proc[48][4], out1, out2);
                        return caml_call1(Bonsai_Proc[14][1], _T_);
                       });
             });
   }
   function extend_first(f, i){
    var _P_ = caml_call1(f, i);
    return caml_call3
            (Bonsai_Proc[14][2][1],
             _k_,
             _P_,
             function(out){
              var _Q_ = caml_call2(Bonsai_Proc[48][4], out, i);
              return caml_call1(Bonsai_Proc[14][1], _Q_);
             });
   }
   function extend_second(f, i){
    var _N_ = caml_call1(f, i);
    return caml_call3
            (Bonsai_Proc[14][2][1],
             _l_,
             _N_,
             function(out){
              var _O_ = caml_call2(Bonsai_Proc[48][4], i, out);
              return caml_call1(Bonsai_Proc[14][1], _O_);
             });
   }
   function fanout(f1, f2, i){
    var _K_ = caml_call1(f1, i);
    return caml_call3
            (Bonsai_Proc[14][2][1],
             _n_,
             _K_,
             function(out1){
              var _L_ = caml_call1(f2, i);
              return caml_call3
                      (Bonsai_Proc[14][2][1],
                       _m_,
                       _L_,
                       function(out2){
                        var _M_ = caml_call2(Bonsai_Proc[48][4], out1, out2);
                        return caml_call1(Bonsai_Proc[14][1], _M_);
                       });
             });
   }
   function partial_compose_first(f1, f2, i){
    var _H_ = caml_call1(f1, i);
    return caml_call3
            (Bonsai_Proc[14][2][1],
             _p_,
             _H_,
             function(out1){
              var
               out1$0 =
                 caml_call3
                  (Bonsai_Proc[14][2][4],
                   0,
                   out1,
                   function(param){
                    var pattern_syntax_021 = param[2];
                    return pattern_syntax_021;
                   }),
               shared =
                 caml_call3
                  (Bonsai_Proc[14][2][4],
                   0,
                   out1,
                   function(param){
                    var pattern_syntax_022 = param[1];
                    return pattern_syntax_022;
                   }),
               _I_ = caml_call1(f2, caml_call2(Bonsai_Proc[48][4], i, shared));
              return caml_call3
                      (Bonsai_Proc[14][2][1],
                       _o_,
                       _I_,
                       function(out2){
                        var _J_ = caml_call2(Bonsai_Proc[48][4], out1$0, out2);
                        return caml_call1(Bonsai_Proc[14][1], _J_);
                       });
             });
   }
   function pipe(f1, into, via, finalize, i){
    var _B_ = caml_call1(f1, i);
    return caml_call3
            (Bonsai_Proc[14][2][1],
             _r_,
             _B_,
             function(r1){
              var
               _C_ = caml_call2(Bonsai_Proc[14][5], via, i),
               intermediate = caml_call2(Bonsai_Proc[14][4], _C_, r1),
               _D_ = caml_call1(into, intermediate);
              return caml_call3
                      (Bonsai_Proc[14][2][1],
                       _q_,
                       _D_,
                       function(r2){
                        var
                         _E_ = caml_call2(Bonsai_Proc[14][5], finalize, i),
                         _F_ = caml_call2(Bonsai_Proc[14][4], _E_, r1),
                         _G_ = caml_call2(Bonsai_Proc[14][4], _F_, r2);
                        return caml_call1(Bonsai_Proc[14][1], _G_);
                       });
             });
   }
   function of_incr(i, param){
    var
     _z_ = caml_call1(Bonsai_Value[24], i),
     _A_ = caml_call1(Bonsai_Proc[49][1], _z_);
    return caml_call1(Bonsai_Proc[1], _A_);
   }
   function of_module$0(component, default_model, input){
    var input$0 = caml_call1(Bonsai_Proc[49][2], input);
    return caml_call3
            (Bonsai_Proc_min[4][3], component, default_model, input$0);
   }
   function pure$0(f){
    var _x_ = Bonsai_Proc[36][4];
    return function(_y_){return caml_call2(_x_, _y_, f);};
   }
   function map$0(a, f){
    var _v_ = pure$0(f);
    return function(_w_){return compose(a, _v_, _w_);};
   }
   function value_cutoff(cutoff){
    return map$0
            (input,
             function(input){
              var
               input$0 =
                 caml_call2(Ui_incr[12], input, function(_u_){return _u_;});
              caml_call2(Ui_incr[61], input$0, cutoff);
              return input$0;
             });
   }
   function symbol_map(a, f){return function(_t_){return map(a, f, _t_);};}
   function symbol$2(f, a){
    return function(_s_){return map_input(a, f, _s_);};
   }
   var
    Infix = [0, compose, symbol_map, symbol$2],
    symbol$3 = Infix[1],
    symbol_map$0 = Infix[2],
    symbol$4 = Infix[3];
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Legacy_api);
   var
    Bonsai_Legacy_api =
      [0,
       const$0,
       input,
       pure,
       compose,
       map,
       map_input,
       of_module,
       both,
       state_machine,
       enum$0,
       if$0,
       Map,
       arr,
       symbol,
       symbol$0,
       first,
       second,
       symbol$1,
       extend_first,
       extend_second,
       fanout,
       symbol$1,
       fanout,
       partial_compose_first,
       pipe,
       [0, of_incr, of_module$0, map$0, pure$0, value_cutoff],
       Infix,
       [0,
        const$0,
        symbol$3,
        symbol_map$0,
        symbol$4,
        [0, const$0, map, both, Infix]]];
   runtime.caml_register_global(39, Bonsai_Legacy_api, cst_Bonsai_Legacy_api);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Graph_info
//# unitInfo: Requires: Base__Option, Bin_prot__Common, Bin_prot__Shape, Bin_shape, Bonsai__Node_path, Bonsai__Transform, CamlinternalLazy, Core, Core__Hashtbl, Core__Int, Core__Map, Core__Option, Core__Source_code_position, Core__Stable, Core__String, Core__Type_equal, Expect_test_collector, Expect_test_common__File, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_record, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    cst_122924cb491f2c00727ae98b5c = " 122924cb491f2c00727ae98b5c47f343 ",
    cst_127c33aa3895110d2fdd1b3c35 = " 127c33aa3895110d2fdd1b3c356bf5c3 ",
    cst_658b469ca44e941e792dc74fb3 = "658b469ca44e941e792dc74fb3fd54d9",
    cst_Bonsai_Graph_info = "Bonsai__Graph_info",
    cst_bonsai = "bonsai",
    cst_dag$3 = "dag",
    cst_here$2 = "here",
    cst_id$0 = "id",
    cst_info$3 = "info",
    cst_node_type$2 = "node_type",
    cst_pos_bol$0 = "pos_bol",
    cst_pos_cnum$0 = "pos_cnum",
    cst_pos_fname$0 = "pos_fname",
    cst_pos_lnum$0 = "pos_lnum",
    cst_src_graph_info_ml$5 = "src/graph_info.ml",
    cst_src_graph_info_ml_Node_inf$0 = "src/graph_info.ml.Node_info.t",
    cst_src_graph_info_ml_Stable_N$2 =
      "src/graph_info.ml.Stable.Node_info.V1.t",
    cst_src_graph_info_ml_Stable_N$1 =
      "src/graph_info.ml.Stable.Node_info.V2.t",
    cst_src_graph_info_ml_Stable_V$4 = "src/graph_info.ml.Stable.V1.t",
    cst_src_graph_info_ml_Stable_V$3 = "src/graph_info.ml.Stable.V2.t",
    cst_src_graph_info_ml_Stable_V$2 = "src/graph_info.ml.Stable.V3.t",
    cst_src_graph_info_ml_t$0 = "src/graph_info.ml.t",
    cst_t = "t",
    cst_tree$3 = "tree",
    caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "~",
    error_source_002 = cst_src_graph_info_ml_Stable_N$2,
    error_source_014 = cst_src_graph_info_ml_Stable_N$1,
    error_source_031 = cst_src_graph_info_ml_Stable_V$4,
    error_source_051 = cst_src_graph_info_ml_Stable_V$3,
    error_source_071 = cst_src_graph_info_ml_Stable_V$2,
    error_source_081 = "src/graph_info.ml.Source_code_position.t",
    error_source_093 = cst_src_graph_info_ml_Node_inf$0,
    error_source_101 = cst_src_graph_info_ml_t$0,
    Core = global_data.Core,
    Base_Option = global_data.Base__Option,
    Core_Map = global_data.Core__Map,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Core_Type_equal = global_data.Core__Type_equal,
    Bonsai_Transform = global_data.Bonsai__Transform,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Bonsai_Node_path = global_data.Bonsai__Node_path,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Stdlib = global_data.Stdlib,
    Expect_test_common_File = global_data.Expect_test_common__File,
    Core_Stable = global_data.Core__Stable,
    Core_String = global_data.Core__String,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Core_Option = global_data.Core__Option,
    Core_Int = global_data.Core__Int,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Graph_info);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], cst_src_graph_info_ml$5);
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "graph_info.ml");
   var
    cst_here = cst_here$2,
    cst_node_type = cst_node_type$2,
    _a_ = [0, cst_here$2],
    _b_ = [0, cst_node_type$2];
   function t_of_sexp(x_003){
    var
     _cu_ =
       [0,
        cst_here,
        1,
        caml_call1
         (Core_Option[71][1][12], Core_Source_code_position[37][1][11]),
        0];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_002,
             [0, cst_node_type, 1, Core_String[167][1][17], _cu_],
             function(param){
              return param !== cst_here$2
                      ? param !== cst_node_type$2 ? -1 : 0
                      : 1;
             },
             0,
             function(param){
              var here = param[2][1], node_type = param[1];
              return [0, node_type, here];
             },
             x_003);
   }
   function sexp_of_t(param){
    var
     here_007 = param[2],
     node_type_005 = param[1],
     arg_008 =
       caml_call2
        (Core_Option[71][1][13],
         Core_Source_code_position[37][1][12],
         here_007),
     bnds_004 = [0, [1, [0, _a_, [0, arg_008, 0]]], 0],
     arg_006 = caml_call1(Core_String[167][1][18], node_type_005),
     bnds_004$0 = [0, [1, [0, _b_, [0, arg_006, 0]]], bnds_004];
    return [1, bnds_004$0];
   }
   var
    _c_ =
      [0,
       [0,
        cst_here$2,
        caml_call1(Core_Option[71][1][1], Core_Source_code_position[37][1][6])],
       0],
    _d_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0, [0, cst_node_type$2, Core_String[167][1][12]], _c_]),
    _e_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _d_], 0],
    _f_ = caml_call1(Bin_shape[4][1], "src/graph_info.ml:6:6"),
    group = caml_call2(Bin_prot_Shape[2], _f_, _e_),
    _g_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _g_), 0);
   function bin_size_t(param){
    var
     v2 = param[2],
     v1 = param[1],
     _cs_ = caml_call1(Core_String[167][1][8], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _cs_),
     _ct_ =
       caml_call2
        (Core_Option[71][1][2], Core_Source_code_position[37][1][2], v2);
    return caml_call2(Bin_prot_Common[23], size, _ct_);
   }
   function bin_write_t(buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core_String[167][1][9], buf, pos, v1);
    return caml_call4
            (Core_Option[71][1][3],
             Core_Source_code_position[37][1][3],
             buf,
             pos$0,
             v2);
   }
   var
    bin_writer_t = [0, bin_size_t, bin_write_t],
    cst_src_graph_info_ml_Stable_N = cst_src_graph_info_ml_Stable_N$2;
   function bin_read_t(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_graph_info_ml_Stable_N, pos_ref[1]);
   }
   function bin_read_t$0(buf, pos_ref){
    var
     v_node_type = caml_call2(Core_String[167][1][10], buf, pos_ref),
     v_here =
       caml_call2
        (caml_call1
          (Core_Option[71][1][4], Core_Source_code_position[37][1][4]),
         buf,
         pos_ref);
    return [0, v_node_type, v_here];
   }
   var
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
   function compare(a_009, b_010){
    if(a_009 === b_010) return 0;
    var n = caml_call2(Core_String[167][1][16], a_009[1], b_010[1]);
    return 0 === n
            ? caml_call3
              (Core_Option[71][1][9],
               function(a_011, b_012){
                return caml_call2
                        (Core_Source_code_position[37][1][10], a_011, b_012);
               },
               a_009[2],
               b_010[2])
            : n;
   }
   var
    Expect_test_collector$0 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_graph_info_ml = cst_src_graph_info_ml$5,
    _h_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_graph_info_ml$5),
       14,
       331,
       348,
       386],
    _i_ =
      [0,
       [0,
        [0, cst$0],
        [1, cst_127c33aa3895110d2fdd1b3c35],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_graph_info_ml$5),
         14,
         331,
         341,
         347],
        _h_],
       0],
    _j_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_graph_info_ml$5),
       12,
       265,
       271,
       387],
    _k_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_658b469ca44e941e792dc74fb3);
   caml_call9
    (Expect_test_collector$0[3],
     _k_,
     _j_,
     cst_src_graph_info_ml$5,
     0,
     0,
     _i_,
     0,
     Inline_test_config,
     function(param){
      var
       _cp_ = caml_call1(Bin_prot_Shape[15], bin_shape_t),
       _cq_ = caml_call1(Bin_shape[19][4], _cp_);
      caml_call1(Stdlib[46], _cq_);
      var
       _cr_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_graph_info_ml),
          14,
          331,
          341,
          347];
      return caml_call1(Expect_test_collector$0[1], _cr_);
     });
   var
    cst_id = cst_id$0,
    cst_here$0 = cst_here$2,
    cst_node_type$0 = cst_node_type$2,
    _l_ = [0, cst_id$0],
    _m_ = [0, cst_here$2],
    _n_ = [0, cst_node_type$2];
   function t_of_sexp$0(x_015){
    var
     _cm_ = [0, cst_id, 1, Core_Int[125][1][12], 0],
     _cn_ =
       [0,
        cst_here$0,
        1,
        caml_call1
         (Core_Option[71][1][12], Core_Source_code_position[37][1][11]),
        _cm_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_014,
             [0, cst_node_type$0, 1, Core_String[167][1][17], _cn_],
             function(param){
              return param !== cst_here$2
                      ? param
                        !== cst_id$0
                        ? param !== cst_node_type$2 ? -1 : 0
                        : 2
                      : 1;
             },
             0,
             function(param){
              var
               _co_ = param[2],
               id = _co_[2][1],
               here = _co_[1],
               node_type = param[1];
              return [0, node_type, here, id];
             },
             x_015);
   }
   function sexp_of_t$0(param){
    var
     id_021 = param[3],
     here_019 = param[2],
     node_type_017 = param[1],
     arg_022 = caml_call1(Core_Int[125][1][13], id_021),
     bnds_016 = [0, [1, [0, _l_, [0, arg_022, 0]]], 0],
     arg_020 =
       caml_call2
        (Core_Option[71][1][13],
         Core_Source_code_position[37][1][12],
         here_019),
     bnds_016$0 = [0, [1, [0, _m_, [0, arg_020, 0]]], bnds_016],
     arg_018 = caml_call1(Core_String[167][1][18], node_type_017),
     bnds_016$1 = [0, [1, [0, _n_, [0, arg_018, 0]]], bnds_016$0];
    return [1, bnds_016$1];
   }
   function compare$0(a_023, b_024){
    if(a_023 === b_024) return 0;
    var n = caml_call2(Core_String[167][1][16], a_023[1], b_024[1]);
    if(0 !== n) return n;
    var
     n$0 =
       caml_call3
        (Core_Option[71][1][9],
         function(a_025, b_026){
          return caml_call2
                  (Core_Source_code_position[37][1][10], a_025, b_026);
         },
         a_023[2],
         b_024[2]);
    return 0 === n$0
            ? caml_call2(Core_Int[125][1][11], a_023[3], b_024[3])
            : n$0;
   }
   var
    _o_ = [0, [0, cst_id$0, Core_Int[125][1][7]], 0],
    _p_ =
      [0,
       [0,
        cst_here$2,
        caml_call1(Core_Option[71][1][1], Core_Source_code_position[37][1][6])],
       _o_],
    _q_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0, [0, cst_node_type$2, Core_String[167][1][12]], _p_]),
    _r_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _q_], 0],
    _s_ = caml_call1(Bin_shape[4][1], "src/graph_info.ml:19:6"),
    group$0 = caml_call2(Bin_prot_Shape[2], _s_, _r_),
    _t_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t$0 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _t_), 0);
   function bin_size_t$0(param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _cj_ = caml_call1(Core_String[167][1][8], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _cj_),
     _ck_ =
       caml_call2
        (Core_Option[71][1][2], Core_Source_code_position[37][1][2], v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _ck_),
     _cl_ = caml_call1(Core_Int[125][1][3], v3);
    return caml_call2(Bin_prot_Common[23], size$0, _cl_);
   }
   function bin_write_t$0(buf, pos, param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core_String[167][1][9], buf, pos, v1),
     pos$1 =
       caml_call4
        (Core_Option[71][1][3],
         Core_Source_code_position[37][1][3],
         buf,
         pos$0,
         v2);
    return caml_call3(Core_Int[125][1][4], buf, pos$1, v3);
   }
   var
    bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0],
    cst_src_graph_info_ml_Stable_N$0 = cst_src_graph_info_ml_Stable_N$1;
   function bin_read_t$1(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_graph_info_ml_Stable_N$0,
             pos_ref[1]);
   }
   function bin_read_t$2(buf, pos_ref){
    var
     v_node_type = caml_call2(Core_String[167][1][10], buf, pos_ref),
     v_here =
       caml_call2
        (caml_call1
          (Core_Option[71][1][4], Core_Source_code_position[37][1][4]),
         buf,
         pos_ref),
     v_id = caml_call2(Core_Int[125][1][5], buf, pos_ref);
    return [0, v_node_type, v_here, v_id];
   }
   var
    bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
    bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0],
    Expect_test_collector$1 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_graph_info_ml$0 = cst_src_graph_info_ml$5,
    _u_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_graph_info_ml$5),
       28,
       731,
       748,
       786],
    _v_ =
      [0,
       [0,
        [0, cst$0],
        [1, " da0e8001d1f5692d5a56c26e18c81a01 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_graph_info_ml$5),
         28,
         731,
         741,
         747],
        _u_],
       0],
    _w_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_graph_info_ml$5),
       26,
       665,
       671,
       787],
    _x_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_658b469ca44e941e792dc74fb3);
   caml_call9
    (Expect_test_collector$1[3],
     _x_,
     _w_,
     cst_src_graph_info_ml$5,
     0,
     0,
     _v_,
     0,
     Inline_test_config,
     function(param){
      var
       _cg_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$0),
       _ch_ = caml_call1(Bin_shape[19][4], _cg_);
      caml_call1(Stdlib[46], _ch_);
      var
       _ci_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_graph_info_ml$0),
          28,
          731,
          741,
          747];
      return caml_call1(Expect_test_collector$1[1], _ci_);
     });
   function to_v1(t){
    var here = t[2], node_type = t[1];
    return [0, node_type, here];
   }
   function of_v1(t){
    var here = t[2], node_type = t[1];
    return [0, node_type, here, -1];
   }
   var
    _y_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, bin_shape_t], 0],
    _z_ = caml_call1(Bin_shape[4][1], "src/graph_info.ml:36:6"),
    group$1 = caml_call2(Bin_prot_Shape[2], _z_, _y_),
    _A_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t$1 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$1, _A_), 0),
    Expect_test_collector$2 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_graph_info_ml$1 = cst_src_graph_info_ml$5,
    _B_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_graph_info_ml$5),
       40,
       1021,
       1038,
       1076],
    _C_ =
      [0,
       [0,
        [0, cst$0],
        [1, cst_127c33aa3895110d2fdd1b3c35],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_graph_info_ml$5),
         40,
         1021,
         1031,
         1037],
        _B_],
       0],
    _D_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_graph_info_ml$5),
       38,
       955,
       961,
       1077],
    _E_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_658b469ca44e941e792dc74fb3);
   caml_call9
    (Expect_test_collector$2[3],
     _E_,
     _D_,
     cst_src_graph_info_ml$5,
     0,
     0,
     _C_,
     0,
     Inline_test_config,
     function(param){
      var
       _cd_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$1),
       _ce_ = caml_call1(Bin_shape[19][4], _cd_);
      caml_call1(Stdlib[46], _ce_);
      var
       _cf_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_graph_info_ml$1),
          40,
          1021,
          1031,
          1037];
      return caml_call1(Expect_test_collector$2[1], _cf_);
     });
   var
    _F_ =
      [0,
       [0,
        cst_info$3,
        caml_call1(Bonsai_Node_path[39][1][13][1], bin_shape_t)],
       0],
    _G_ = caml_call1(Core_Stable[149], Bonsai_Node_path[39][1][5]),
    _H_ =
      [0,
       [0, cst_dag$3, caml_call1(Bonsai_Node_path[39][1][13][1], _G_)],
       _F_],
    _I_ =
      [0,
       [0,
        cst_tree$3,
        caml_call1(Bonsai_Node_path[39][1][13][1], Bonsai_Node_path[39][1][5])],
       _H_],
    _J_ = caml_call1(Bin_prot_Shape[4], _I_),
    _K_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _J_], 0],
    _L_ = caml_call1(Bin_shape[4][1], "src/graph_info.ml:49:4"),
    group$2 = caml_call2(Bin_prot_Shape[2], _L_, _K_),
    _M_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t$2 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$2, _M_), 0);
   function bin_size_t$1(param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _b$_ =
       caml_call2
        (Bonsai_Node_path[39][1][13][2], Bonsai_Node_path[39][1][1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _b$_),
     _ca_ = caml_call1(Core_Stable[18], Bonsai_Node_path[39][1][1]),
     _cb_ = caml_call2(Bonsai_Node_path[39][1][13][2], _ca_, v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _cb_),
     _cc_ = caml_call2(Bonsai_Node_path[39][1][13][2], bin_size_t, v3);
    return caml_call2(Bin_prot_Common[23], size$0, _cc_);
   }
   function bin_write_t$1(buf, pos, param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 =
       caml_call4
        (Bonsai_Node_path[39][1][13][3],
         Bonsai_Node_path[39][1][2],
         buf,
         pos,
         v1),
     _b__ = caml_call1(Core_Stable[151], Bonsai_Node_path[39][1][2]),
     pos$1 = caml_call4(Bonsai_Node_path[39][1][13][3], _b__, buf, pos$0, v2);
    return caml_call4
            (Bonsai_Node_path[39][1][13][3], bin_write_t, buf, pos$1, v3);
   }
   var
    bin_writer_t$1 = [0, bin_size_t$1, bin_write_t$1],
    cst_src_graph_info_ml_Stable_V = cst_src_graph_info_ml_Stable_V$4;
   function bin_read_t$3(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_graph_info_ml_Stable_V, pos_ref[1]);
   }
   function bin_read_t$4(buf, pos_ref){
    var
     v_tree =
       caml_call2
        (caml_call1
          (Bonsai_Node_path[39][1][13][4], Bonsai_Node_path[39][1][3]),
         buf,
         pos_ref),
     _b9_ = caml_call1(Core_Stable[153], Bonsai_Node_path[39][1][3]),
     v_dag =
       caml_call2
        (caml_call1(Bonsai_Node_path[39][1][13][4], _b9_), buf, pos_ref),
     v_info =
       caml_call2
        (caml_call1(Bonsai_Node_path[39][1][13][4], bin_read_t$0),
         buf,
         pos_ref);
    return [0, v_tree, v_dag, v_info];
   }
   var
    bin_reader_t$1 = [0, bin_read_t$4, bin_read_t$3],
    bin_t$1 = [0, bin_shape_t$2, bin_writer_t$1, bin_reader_t$1],
    cst_info = cst_info$3,
    cst_dag = cst_dag$3,
    cst_tree = cst_tree$3,
    _N_ = [0, cst_info$3],
    _O_ = [0, cst_dag$3],
    _P_ = [0, cst_tree$3];
   function t_of_sexp$1(x_032){
    var
     _b4_ =
       [0,
        cst_info,
        1,
        caml_call1(Bonsai_Node_path[39][1][13][10], t_of_sexp),
        0],
     _b5_ = caml_call1(Core_Stable[280], Bonsai_Node_path[39][1][10]),
     _b6_ =
       [0,
        cst_dag,
        1,
        caml_call1(Bonsai_Node_path[39][1][13][10], _b5_),
        _b4_],
     _b7_ =
       [0,
        cst_tree,
        1,
        caml_call1
         (Bonsai_Node_path[39][1][13][10], Bonsai_Node_path[39][1][10]),
        _b6_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_031,
             _b7_,
             function(param){
              return param !== cst_dag$3
                      ? param !== cst_info$3 ? param !== cst_tree$3 ? -1 : 0 : 2
                      : 1;
             },
             0,
             function(param){
              var
               _b8_ = param[2],
               info = _b8_[2][1],
               dag = _b8_[1],
               tree = param[1];
              return [0, tree, dag, info];
             },
             x_032);
   }
   function sexp_of_t$1(param){
    var
     info_038 = param[3],
     dag_036 = param[2],
     tree_034 = param[1],
     arg_039 =
       caml_call2(Bonsai_Node_path[39][1][13][11], sexp_of_t, info_038),
     bnds_033 = [0, [1, [0, _N_, [0, arg_039, 0]]], 0],
     _b3_ = caml_call1(Core_Stable[279], Bonsai_Node_path[39][1][11]),
     arg_037 = caml_call2(Bonsai_Node_path[39][1][13][11], _b3_, dag_036),
     bnds_033$0 = [0, [1, [0, _O_, [0, arg_037, 0]]], bnds_033],
     arg_035 =
       caml_call2
        (Bonsai_Node_path[39][1][13][11],
         Bonsai_Node_path[39][1][11],
         tree_034),
     bnds_033$1 = [0, [1, [0, _P_, [0, arg_035, 0]]], bnds_033$0];
    return [1, bnds_033$1];
   }
   var
    Expect_test_collector$3 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_graph_info_ml$2 = cst_src_graph_info_ml$5,
    _Q_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_graph_info_ml$5),
       58,
       1478,
       1493,
       1531],
    _R_ =
      [0,
       [0,
        [0, cst$0],
        [1, cst_122924cb491f2c00727ae98b5c],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_graph_info_ml$5),
         58,
         1478,
         1486,
         1492],
        _Q_],
       0],
    _S_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_graph_info_ml$5),
       56,
       1416,
       1420,
       1532],
    _T_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_658b469ca44e941e792dc74fb3);
   caml_call9
    (Expect_test_collector$3[3],
     _T_,
     _S_,
     cst_src_graph_info_ml$5,
     0,
     0,
     _R_,
     0,
     Inline_test_config,
     function(param){
      var
       _b0_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$2),
       _b1_ = caml_call1(Bin_shape[19][4], _b0_);
      caml_call1(Stdlib[46], _b1_);
      var
       _b2_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_graph_info_ml$2),
          58,
          1478,
          1486,
          1492];
      return caml_call1(Expect_test_collector$3[1], _b2_);
     });
   var
    _U_ =
      [0,
       [0,
        cst_info$3,
        caml_call1(Bonsai_Node_path[39][1][13][1], bin_shape_t$0)],
       0],
    _V_ = caml_call1(Core_Stable[149], Bonsai_Node_path[39][1][5]),
    _W_ =
      [0,
       [0, cst_dag$3, caml_call1(Bonsai_Node_path[39][1][13][1], _V_)],
       _U_],
    _X_ =
      [0,
       [0,
        cst_tree$3,
        caml_call1(Bonsai_Node_path[39][1][13][1], Bonsai_Node_path[39][1][5])],
       _W_],
    _Y_ = caml_call1(Bin_prot_Shape[4], _X_),
    _Z_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _Y_], 0],
    ___ = caml_call1(Bin_shape[4][1], "src/graph_info.ml:63:4"),
    group$3 = caml_call2(Bin_prot_Shape[2], ___, _Z_),
    _$_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t$3 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$3, _$_), 0);
   function bin_size_t$2(param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _bW_ =
       caml_call2
        (Bonsai_Node_path[39][1][13][2], Bonsai_Node_path[39][1][1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _bW_),
     _bX_ = caml_call1(Core_Stable[18], Bonsai_Node_path[39][1][1]),
     _bY_ = caml_call2(Bonsai_Node_path[39][1][13][2], _bX_, v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _bY_),
     _bZ_ = caml_call2(Bonsai_Node_path[39][1][13][2], bin_size_t$0, v3);
    return caml_call2(Bin_prot_Common[23], size$0, _bZ_);
   }
   function bin_write_t$2(buf, pos, param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 =
       caml_call4
        (Bonsai_Node_path[39][1][13][3],
         Bonsai_Node_path[39][1][2],
         buf,
         pos,
         v1),
     _bV_ = caml_call1(Core_Stable[151], Bonsai_Node_path[39][1][2]),
     pos$1 = caml_call4(Bonsai_Node_path[39][1][13][3], _bV_, buf, pos$0, v2);
    return caml_call4
            (Bonsai_Node_path[39][1][13][3], bin_write_t$0, buf, pos$1, v3);
   }
   var
    bin_writer_t$2 = [0, bin_size_t$2, bin_write_t$2],
    cst_src_graph_info_ml_Stable_V$0 = cst_src_graph_info_ml_Stable_V$3;
   function bin_read_t$5(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_graph_info_ml_Stable_V$0,
             pos_ref[1]);
   }
   function bin_read_t$6(buf, pos_ref){
    var
     v_tree =
       caml_call2
        (caml_call1
          (Bonsai_Node_path[39][1][13][4], Bonsai_Node_path[39][1][3]),
         buf,
         pos_ref),
     _bU_ = caml_call1(Core_Stable[153], Bonsai_Node_path[39][1][3]),
     v_dag =
       caml_call2
        (caml_call1(Bonsai_Node_path[39][1][13][4], _bU_), buf, pos_ref),
     v_info =
       caml_call2
        (caml_call1(Bonsai_Node_path[39][1][13][4], bin_read_t$2),
         buf,
         pos_ref);
    return [0, v_tree, v_dag, v_info];
   }
   var
    bin_reader_t$2 = [0, bin_read_t$6, bin_read_t$5],
    bin_t$2 = [0, bin_shape_t$3, bin_writer_t$2, bin_reader_t$2],
    cst_info$0 = cst_info$3,
    cst_dag$0 = cst_dag$3,
    cst_tree$0 = cst_tree$3,
    _aa_ = [0, cst_info$3],
    _ab_ = [0, cst_dag$3],
    _ac_ = [0, cst_tree$3];
   function t_of_sexp$2(x_052){
    var
     _bP_ =
       [0,
        cst_info$0,
        1,
        caml_call1(Bonsai_Node_path[39][1][13][10], t_of_sexp$0),
        0],
     _bQ_ = caml_call1(Core_Stable[280], Bonsai_Node_path[39][1][10]),
     _bR_ =
       [0,
        cst_dag$0,
        1,
        caml_call1(Bonsai_Node_path[39][1][13][10], _bQ_),
        _bP_],
     _bS_ =
       [0,
        cst_tree$0,
        1,
        caml_call1
         (Bonsai_Node_path[39][1][13][10], Bonsai_Node_path[39][1][10]),
        _bR_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_051,
             _bS_,
             function(param){
              return param !== cst_dag$3
                      ? param !== cst_info$3 ? param !== cst_tree$3 ? -1 : 0 : 2
                      : 1;
             },
             0,
             function(param){
              var
               _bT_ = param[2],
               info = _bT_[2][1],
               dag = _bT_[1],
               tree = param[1];
              return [0, tree, dag, info];
             },
             x_052);
   }
   function sexp_of_t$2(param){
    var
     info_058 = param[3],
     dag_056 = param[2],
     tree_054 = param[1],
     arg_059 =
       caml_call2(Bonsai_Node_path[39][1][13][11], sexp_of_t$0, info_058),
     bnds_053 = [0, [1, [0, _aa_, [0, arg_059, 0]]], 0],
     _bO_ = caml_call1(Core_Stable[279], Bonsai_Node_path[39][1][11]),
     arg_057 = caml_call2(Bonsai_Node_path[39][1][13][11], _bO_, dag_056),
     bnds_053$0 = [0, [1, [0, _ab_, [0, arg_057, 0]]], bnds_053],
     arg_055 =
       caml_call2
        (Bonsai_Node_path[39][1][13][11],
         Bonsai_Node_path[39][1][11],
         tree_054),
     bnds_053$1 = [0, [1, [0, _ac_, [0, arg_055, 0]]], bnds_053$0];
    return [1, bnds_053$1];
   }
   var
    Expect_test_collector$4 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_graph_info_ml$3 = cst_src_graph_info_ml$5,
    _ad_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_graph_info_ml$5),
       72,
       1923,
       1938,
       1976],
    _ae_ =
      [0,
       [0,
        [0, cst$0],
        [1, " ca80280d86a032bbd663626d8558fe6f "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_graph_info_ml$5),
         72,
         1923,
         1931,
         1937],
        _ad_],
       0],
    _af_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_graph_info_ml$5),
       70,
       1861,
       1865,
       1977],
    _ag_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_658b469ca44e941e792dc74fb3);
   caml_call9
    (Expect_test_collector$4[3],
     _ag_,
     _af_,
     cst_src_graph_info_ml$5,
     0,
     0,
     _ae_,
     0,
     Inline_test_config,
     function(param){
      var
       _bL_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$3),
       _bM_ = caml_call1(Bin_shape[19][4], _bL_);
      caml_call1(Stdlib[46], _bM_);
      var
       _bN_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_graph_info_ml$3),
          72,
          1923,
          1931,
          1937];
      return caml_call1(Expect_test_collector$4[1], _bN_);
     });
   function of_v1$0(t){
    var info = t[3], dag = t[2], tree = t[1];
    return [0, tree, dag, caml_call2(Core_Map[55], info, of_v1)];
   }
   function to_v1$0(t){
    var info = t[3], dag = t[2], tree = t[1];
    return [0, tree, dag, caml_call2(Core_Map[55], info, to_v1)];
   }
   var
    _ah_ =
      [0,
       [0,
        cst_info$3,
        caml_call1(Bonsai_Node_path[39][1][13][1], bin_shape_t$1)],
       0],
    _ai_ = caml_call1(Core_Stable[149], Bonsai_Node_path[39][1][5]),
    _aj_ =
      [0,
       [0, cst_dag$3, caml_call1(Bonsai_Node_path[39][1][13][1], _ai_)],
       _ah_],
    _ak_ =
      [0,
       [0,
        cst_tree$3,
        caml_call1(Bonsai_Node_path[39][1][13][1], Bonsai_Node_path[39][1][5])],
       _aj_],
    _al_ = caml_call1(Bin_prot_Shape[4], _ak_),
    _am_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _al_], 0],
    _an_ = caml_call1(Bin_shape[4][1], "src/graph_info.ml:87:4"),
    group$4 = caml_call2(Bin_prot_Shape[2], _an_, _am_),
    _ao_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t$4 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$4, _ao_), 0);
   function bin_size_t$3(param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _bH_ =
       caml_call2
        (Bonsai_Node_path[39][1][13][2], Bonsai_Node_path[39][1][1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _bH_),
     _bI_ = caml_call1(Core_Stable[18], Bonsai_Node_path[39][1][1]),
     _bJ_ = caml_call2(Bonsai_Node_path[39][1][13][2], _bI_, v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _bJ_),
     _bK_ = caml_call2(Bonsai_Node_path[39][1][13][2], bin_size_t, v3);
    return caml_call2(Bin_prot_Common[23], size$0, _bK_);
   }
   function bin_write_t$3(buf, pos, param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 =
       caml_call4
        (Bonsai_Node_path[39][1][13][3],
         Bonsai_Node_path[39][1][2],
         buf,
         pos,
         v1),
     _bG_ = caml_call1(Core_Stable[151], Bonsai_Node_path[39][1][2]),
     pos$1 = caml_call4(Bonsai_Node_path[39][1][13][3], _bG_, buf, pos$0, v2);
    return caml_call4
            (Bonsai_Node_path[39][1][13][3], bin_write_t, buf, pos$1, v3);
   }
   var
    bin_writer_t$3 = [0, bin_size_t$3, bin_write_t$3],
    cst_src_graph_info_ml_Stable_V$1 = cst_src_graph_info_ml_Stable_V$2;
   function bin_read_t$7(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_src_graph_info_ml_Stable_V$1,
             pos_ref[1]);
   }
   function bin_read_t$8(buf, pos_ref){
    var
     v_tree =
       caml_call2
        (caml_call1
          (Bonsai_Node_path[39][1][13][4], Bonsai_Node_path[39][1][3]),
         buf,
         pos_ref),
     _bF_ = caml_call1(Core_Stable[153], Bonsai_Node_path[39][1][3]),
     v_dag =
       caml_call2
        (caml_call1(Bonsai_Node_path[39][1][13][4], _bF_), buf, pos_ref),
     v_info =
       caml_call2
        (caml_call1(Bonsai_Node_path[39][1][13][4], bin_read_t$0),
         buf,
         pos_ref);
    return [0, v_tree, v_dag, v_info];
   }
   var
    bin_reader_t$3 = [0, bin_read_t$8, bin_read_t$7],
    bin_t$3 = [0, bin_shape_t$4, bin_writer_t$3, bin_reader_t$3],
    cst_info$1 = cst_info$3,
    cst_dag$1 = cst_dag$3,
    cst_tree$1 = cst_tree$3,
    _ap_ = [0, cst_info$3],
    _aq_ = [0, cst_dag$3],
    _ar_ = [0, cst_tree$3];
   function t_of_sexp$3(x_072){
    var
     _bA_ =
       [0,
        cst_info$1,
        1,
        caml_call1(Bonsai_Node_path[39][1][13][10], t_of_sexp),
        0],
     _bB_ = caml_call1(Core_Stable[280], Bonsai_Node_path[39][1][10]),
     _bC_ =
       [0,
        cst_dag$1,
        1,
        caml_call1(Bonsai_Node_path[39][1][13][10], _bB_),
        _bA_],
     _bD_ =
       [0,
        cst_tree$1,
        1,
        caml_call1
         (Bonsai_Node_path[39][1][13][10], Bonsai_Node_path[39][1][10]),
        _bC_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_071,
             _bD_,
             function(param){
              return param !== cst_dag$3
                      ? param !== cst_info$3 ? param !== cst_tree$3 ? -1 : 0 : 2
                      : 1;
             },
             0,
             function(param){
              var
               _bE_ = param[2],
               info = _bE_[2][1],
               dag = _bE_[1],
               tree = param[1];
              return [0, tree, dag, info];
             },
             x_072);
   }
   function sexp_of_t$3(param){
    var
     info_078 = param[3],
     dag_076 = param[2],
     tree_074 = param[1],
     arg_079 =
       caml_call2(Bonsai_Node_path[39][1][13][11], sexp_of_t, info_078),
     bnds_073 = [0, [1, [0, _ap_, [0, arg_079, 0]]], 0],
     _bz_ = caml_call1(Core_Stable[279], Bonsai_Node_path[39][1][11]),
     arg_077 = caml_call2(Bonsai_Node_path[39][1][13][11], _bz_, dag_076),
     bnds_073$0 = [0, [1, [0, _aq_, [0, arg_077, 0]]], bnds_073],
     arg_075 =
       caml_call2
        (Bonsai_Node_path[39][1][13][11],
         Bonsai_Node_path[39][1][11],
         tree_074),
     bnds_073$1 = [0, [1, [0, _ar_, [0, arg_075, 0]]], bnds_073$0];
    return [1, bnds_073$1];
   }
   var
    Expect_test_collector$5 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_graph_info_ml$4 = cst_src_graph_info_ml$5,
    _as_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_graph_info_ml$5),
       96,
       2588,
       2603,
       2641],
    _at_ =
      [0,
       [0,
        [0, cst$0],
        [1, cst_122924cb491f2c00727ae98b5c],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_graph_info_ml$5),
         96,
         2588,
         2596,
         2602],
        _as_],
       0],
    _au_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_graph_info_ml$5),
       94,
       2526,
       2530,
       2642],
    _av_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_658b469ca44e941e792dc74fb3);
   caml_call9
    (Expect_test_collector$5[3],
     _av_,
     _au_,
     cst_src_graph_info_ml$5,
     0,
     0,
     _at_,
     0,
     Inline_test_config,
     function(param){
      var
       _bw_ = caml_call1(Bin_prot_Shape[15], bin_shape_t$4),
       _bx_ = caml_call1(Bin_shape[19][4], _bw_);
      caml_call1(Stdlib[46], _bx_);
      var
       _by_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_graph_info_ml$4),
          96,
          2588,
          2596,
          2602];
      return caml_call1(Expect_test_collector$5[1], _by_);
     });
   var
    cst_pos_cnum = cst_pos_cnum$0,
    cst_pos_bol = cst_pos_bol$0,
    cst_pos_lnum = cst_pos_lnum$0,
    cst_pos_fname = cst_pos_fname$0,
    _aw_ = [0, cst_pos_cnum$0],
    _ax_ = [0, cst_pos_bol$0],
    _ay_ = [0, cst_pos_lnum$0],
    _az_ = [0, cst_pos_fname$0];
   function of_v2(t){
    var info = t[3], dag = t[2], tree = t[1];
    return [0, tree, dag, caml_call2(Core_Map[55], info, to_v1)];
   }
   function to_v2(t){
    var info = t[3], dag = t[2], tree = t[1];
    return [0, tree, dag, caml_call2(Core_Map[55], info, of_v1)];
   }
   function t_of_sexp$4(x_082){
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_081,
             [0,
              cst_pos_fname,
              1,
              Core[485],
              [0,
               cst_pos_lnum,
               1,
               Core[364],
               [0,
                cst_pos_bol,
                1,
                Core[364],
                [0, cst_pos_cnum, 1, Core[364], 0]]]],
             function(param){
              return param !== cst_pos_bol$0
                      ? param
                        !== cst_pos_cnum$0
                        ? param
                          !== cst_pos_fname$0
                          ? param !== cst_pos_lnum$0 ? -1 : 1
                          : 0
                        : 3
                      : 2;
             },
             0,
             function(param){
              var
               _bu_ = param[2],
               _bv_ = _bu_[2],
               pos_cnum = _bv_[2][1],
               pos_bol = _bv_[1],
               pos_lnum = _bu_[1],
               pos_fname = param[1];
              return [0, pos_fname, pos_lnum, pos_bol, pos_cnum];
             },
             x_082);
   }
   function sexp_of_t$4(param){
    var
     pos_cnum_090 = param[4],
     pos_bol_088 = param[3],
     pos_lnum_086 = param[2],
     pos_fname_084 = param[1],
     arg_091 = caml_call1(Core[363], pos_cnum_090),
     bnds_083 = [0, [1, [0, _aw_, [0, arg_091, 0]]], 0],
     arg_089 = caml_call1(Core[363], pos_bol_088),
     bnds_083$0 = [0, [1, [0, _ax_, [0, arg_089, 0]]], bnds_083],
     arg_087 = caml_call1(Core[363], pos_lnum_086),
     bnds_083$1 = [0, [1, [0, _ay_, [0, arg_087, 0]]], bnds_083$0],
     arg_085 = caml_call1(Core[484], pos_fname_084),
     bnds_083$2 = [0, [1, [0, _az_, [0, arg_085, 0]]], bnds_083$1];
    return [1, bnds_083$2];
   }
   var
    _aA_ =
      caml_call1
       (Bin_prot_Shape[4],
        [0,
         [0, cst_pos_fname$0, Core[471]],
         [0,
          [0, cst_pos_lnum$0, Core[350]],
          [0,
           [0, cst_pos_bol$0, Core[350]],
           [0, [0, cst_pos_cnum$0, Core[350]], 0]]]]),
    _aB_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _aA_], 0],
    _aC_ = caml_call1(Bin_shape[4][1], "src/graph_info.ml:117:2"),
    group$5 = caml_call2(Bin_prot_Shape[2], _aC_, _aB_),
    _aD_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t$5 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$5, _aD_), 0),
    cst_here$1 = cst_here$2,
    cst_node_type$1 = cst_node_type$2,
    _aE_ = [0, cst_here$2],
    _aF_ = [0, cst_node_type$2];
   function bin_size_t$4(param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _bq_ = caml_call1(Core[472], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _bq_),
     _br_ = caml_call1(Core[351], v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _br_),
     _bs_ = caml_call1(Core[351], v3),
     size$1 = caml_call2(Bin_prot_Common[23], size$0, _bs_),
     _bt_ = caml_call1(Core[351], v4);
    return caml_call2(Bin_prot_Common[23], size$1, _bt_);
   }
   function bin_write_t$4(buf, pos, param){
    var
     v4 = param[4],
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core[473], buf, pos, v1),
     pos$1 = caml_call3(Core[352], buf, pos$0, v2),
     pos$2 = caml_call3(Core[352], buf, pos$1, v3);
    return caml_call3(Core[352], buf, pos$2, v4);
   }
   function bin_read_t$9(buf, pos_ref){
    var
     v_pos_fname = caml_call2(Core[475], buf, pos_ref),
     v_pos_lnum = caml_call2(Core[354], buf, pos_ref),
     v_pos_bol = caml_call2(Core[354], buf, pos_ref),
     v_pos_cnum = caml_call2(Core[354], buf, pos_ref);
    return [0, v_pos_fname, v_pos_lnum, v_pos_bol, v_pos_cnum];
   }
   function t_of_sexp$5(x_094){
    var _bp_ = [0, cst_here$1, 1, caml_call1(Core[467], t_of_sexp$4), 0];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_093,
             [0, cst_node_type$1, 1, Core[485], _bp_],
             function(param){
              return param !== cst_here$2
                      ? param !== cst_node_type$2 ? -1 : 0
                      : 1;
             },
             0,
             function(param){
              var here = param[2][1], node_type = param[1];
              return [0, node_type, here];
             },
             x_094);
   }
   function sexp_of_t$5(param){
    var
     here_098 = param[2],
     node_type_096 = param[1],
     arg_099 = caml_call2(Core[466], sexp_of_t$4, here_098),
     bnds_095 = [0, [1, [0, _aE_, [0, arg_099, 0]]], 0],
     arg_097 = caml_call1(Core[484], node_type_096),
     bnds_095$0 = [0, [1, [0, _aF_, [0, arg_097, 0]]], bnds_095];
    return [1, bnds_095$0];
   }
   var
    _aG_ = [0, [0, cst_here$2, caml_call1(Core[454], bin_shape_t$5)], 0],
    _aH_ =
      caml_call1
       (Bin_prot_Shape[4], [0, [0, cst_node_type$2, Core[471]], _aG_]),
    _aI_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _aH_], 0],
    _aJ_ = caml_call1(Bin_shape[4][1], "src/graph_info.ml:127:2"),
    group$6 = caml_call2(Bin_prot_Shape[2], _aJ_, _aI_),
    _aK_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t$6 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$6, _aK_), 0);
   function bin_size_t$5(param){
    var
     v2 = param[2],
     v1 = param[1],
     _bn_ = caml_call1(Core[472], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _bn_),
     _bo_ = caml_call2(Core[455], bin_size_t$4, v2);
    return caml_call2(Bin_prot_Common[23], size, _bo_);
   }
   function bin_write_t$5(buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Core[473], buf, pos, v1);
    return caml_call4(Core[456], bin_write_t$4, buf, pos$0, v2);
   }
   var
    bin_writer_t$4 = [0, bin_size_t$5, bin_write_t$5],
    cst_src_graph_info_ml_Node_inf = cst_src_graph_info_ml_Node_inf$0;
   function bin_read_t$10(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_graph_info_ml_Node_inf, pos_ref[1]);
   }
   function bin_read_t$11(buf, pos_ref){
    var
     v_node_type = caml_call2(Core[475], buf, pos_ref),
     v_here = caml_call2(caml_call1(Core[458], bin_read_t$9), buf, pos_ref);
    return [0, v_node_type, v_here];
   }
   var
    bin_reader_t$4 = [0, bin_read_t$11, bin_read_t$10],
    bin_t$4 = [0, bin_shape_t$6, bin_writer_t$4, bin_reader_t$4],
    cst_constant = "constant",
    cst_incr = "incr",
    cst_named = "named",
    cst_both = "both",
    cst_cutoff = "cutoff",
    cst_map = "map",
    cst_map2 = "map2",
    cst_map3 = "map3",
    cst_map4 = "map4",
    cst_map5 = "map5",
    cst_map6 = "map6",
    cst_map7 = "map7",
    cst_exception = "exception",
    cst_path = "path",
    cst_return = "return",
    cst_leaf01 = "leaf01",
    cst_leaf1 = "leaf1",
    cst_leaf0 = "leaf0",
    cst_leaf_incr = "leaf_incr",
    cst_sub = "sub",
    cst_store = "store",
    cst_fetch = "fetch",
    cst_assoc = "assoc",
    cst_assoc_on = "assoc_on",
    cst_assoc_simpl = "assoc_simpl",
    cst_switch = "switch",
    cst_lazy = "lazy",
    cst_wrap = "wrap",
    cst_with_model_resetter = "with_model_resetter",
    cst_lifecycle = "lifecycle";
   function of_value(param){
    var here = param[2], value = param[1];
    switch(value[0]){
      case 0:
       var node_type = cst_constant; break;
      case 1:
       var node_type = cst_incr; break;
      case 2:
       var node_type = cst_named; break;
      case 3:
       var node_type = cst_both; break;
      case 4:
       var node_type = cst_cutoff; break;
      case 5:
       var node_type = cst_map; break;
      case 6:
       var node_type = cst_map2; break;
      case 7:
       var node_type = cst_map3; break;
      case 8:
       var node_type = cst_map4; break;
      case 9:
       var node_type = cst_map5; break;
      case 10:
       var node_type = cst_map6; break;
      case 11:
       var node_type = cst_map7; break;
      default: var node_type = cst_exception;
    }
    return [0, node_type, here];
   }
   function of_computation(computation){
    a:
    {
     if(typeof computation !== "number")
      switch(computation[0]){
        case 5:
         var here$0 = computation[4], here = here$0; break a;
        case 11:
         var here$1 = computation[3], here = [0, here$1]; break a;
      }
     var here = 0;
    }
    if(typeof computation === "number")
     var node_type = cst_path;
    else
     switch(computation[0]){
       case 0:
        var node_type = cst_return; break;
       case 1:
        var node_type = cst_leaf01; break;
       case 2:
        var node_type = cst_leaf1; break;
       case 3:
        var node_type = cst_leaf0; break;
       case 4:
        var node_type = cst_leaf_incr; break;
       case 5:
        var node_type = cst_sub; break;
       case 6:
        var node_type = cst_store; break;
       case 7:
        var node_type = cst_fetch; break;
       case 8:
        var node_type = cst_assoc; break;
       case 9:
        var node_type = cst_assoc_on; break;
       case 10:
        var node_type = cst_assoc_simpl; break;
       case 11:
        var node_type = cst_switch; break;
       case 12:
        var node_type = cst_lazy; break;
       case 13:
        var node_type = cst_wrap; break;
       case 14:
        var node_type = cst_with_model_resetter; break;
       default: var node_type = cst_lifecycle;
     }
    return [0, node_type, here];
   }
   var
    _aL_ =
      [0,
       [0, cst_info$3, caml_call1(Bonsai_Node_path[31][43], bin_shape_t$6)],
       0],
    _aM_ = caml_call1(Core[419], Bonsai_Node_path[5]),
    _aN_ =
      [0, [0, cst_dag$3, caml_call1(Bonsai_Node_path[31][43], _aM_)], _aL_],
    _aO_ =
      [0,
       [0,
        cst_tree$3,
        caml_call1(Bonsai_Node_path[31][43], Bonsai_Node_path[5])],
       _aN_],
    _aP_ = caml_call1(Bin_prot_Shape[4], _aO_),
    _aQ_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _aP_], 0],
    _aR_ = caml_call1(Bin_shape[4][1], "src/graph_info.ml:184:0"),
    group$7 = caml_call2(Bin_prot_Shape[2], _aR_, _aQ_),
    _aS_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t$7 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$7, _aS_), 0);
   function bin_size_t$6(param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     _bj_ = caml_call2(Bonsai_Node_path[31][44], Bonsai_Node_path[1], v1),
     size = caml_call2(Bin_prot_Common[23], 0, _bj_),
     _bk_ = caml_call1(Core[420], Bonsai_Node_path[1]),
     _bl_ = caml_call2(Bonsai_Node_path[31][44], _bk_, v2),
     size$0 = caml_call2(Bin_prot_Common[23], size, _bl_),
     _bm_ = caml_call2(Bonsai_Node_path[31][44], bin_size_t$5, v3);
    return caml_call2(Bin_prot_Common[23], size$0, _bm_);
   }
   function bin_write_t$6(buf, pos, param){
    var
     v3 = param[3],
     v2 = param[2],
     v1 = param[1],
     pos$0 =
       caml_call4(Bonsai_Node_path[31][45], Bonsai_Node_path[2], buf, pos, v1),
     _bi_ = caml_call1(Core[421], Bonsai_Node_path[2]),
     pos$1 = caml_call4(Bonsai_Node_path[31][45], _bi_, buf, pos$0, v2);
    return caml_call4(Bonsai_Node_path[31][45], bin_write_t$5, buf, pos$1, v3);
   }
   var
    bin_writer_t$5 = [0, bin_size_t$6, bin_write_t$6],
    cst_src_graph_info_ml_t = cst_src_graph_info_ml_t$0;
   function bin_read_t$12(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_graph_info_ml_t, pos_ref[1]);
   }
   function bin_read_t$13(buf, pos_ref){
    var
     v_tree =
       caml_call2
        (caml_call1(Bonsai_Node_path[31][46], Bonsai_Node_path[3]),
         buf,
         pos_ref),
     _bh_ = caml_call1(Core[423], Bonsai_Node_path[3]),
     v_dag =
       caml_call2(caml_call1(Bonsai_Node_path[31][46], _bh_), buf, pos_ref),
     v_info =
       caml_call2
        (caml_call1(Bonsai_Node_path[31][46], bin_read_t$11), buf, pos_ref);
    return [0, v_tree, v_dag, v_info];
   }
   var
    bin_reader_t$5 = [0, bin_read_t$13, bin_read_t$12],
    bin_t$5 = [0, bin_shape_t$7, bin_writer_t$5, bin_reader_t$5],
    cst_info$2 = cst_info$3,
    cst_dag$2 = cst_dag$3,
    cst_tree$2 = cst_tree$3,
    _aT_ = [0, cst_info$3],
    _aU_ = [0, cst_dag$3],
    _aV_ = [0, cst_tree$3];
   function t_of_sexp$6(x_102){
    var
     _bc_ =
       [0,
        cst_info$2,
        1,
        caml_call1(Bonsai_Node_path[31][41], t_of_sexp$5),
        0],
     _bd_ = caml_call1(Core[432], Bonsai_Node_path[9]),
     _be_ =
       [0, cst_dag$2, 1, caml_call1(Bonsai_Node_path[31][41], _bd_), _bc_],
     _bf_ =
       [0,
        cst_tree$2,
        1,
        caml_call1(Bonsai_Node_path[31][41], Bonsai_Node_path[9]),
        _be_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_101,
             _bf_,
             function(param){
              return param !== cst_dag$3
                      ? param !== cst_info$3 ? param !== cst_tree$3 ? -1 : 0 : 2
                      : 1;
             },
             0,
             function(param){
              var
               _bg_ = param[2],
               info = _bg_[2][1],
               dag = _bg_[1],
               tree = param[1];
              return [0, tree, dag, info];
             },
             x_102);
   }
   function sexp_of_t$6(param){
    var
     info_108 = param[3],
     dag_106 = param[2],
     tree_104 = param[1],
     arg_109 = caml_call2(Bonsai_Node_path[31][42], sexp_of_t$5, info_108),
     bnds_103 = [0, [1, [0, _aT_, [0, arg_109, 0]]], 0],
     _bb_ = caml_call1(Core[431], Bonsai_Node_path[10]),
     arg_107 = caml_call2(Bonsai_Node_path[31][42], _bb_, dag_106),
     bnds_103$0 = [0, [1, [0, _aU_, [0, arg_107, 0]]], bnds_103],
     arg_105 =
       caml_call2(Bonsai_Node_path[31][42], Bonsai_Node_path[10], tree_104),
     bnds_103$1 = [0, [1, [0, _aV_, [0, arg_105, 0]]], bnds_103$0];
    return [1, bnds_103$1];
   }
   var
    empty =
      [0,
       Bonsai_Node_path[31][4],
       Bonsai_Node_path[31][4],
       Bonsai_Node_path[31][4]],
    cst_src_graph_info_ml_218_41 = "src/graph_info.ml:218:41",
    cst_BUG = "BUG";
   function value_map(param, state, value){
    var
     current_path = param[4],
     parent_path = param[3],
     var_from_parent = param[2],
     recurse = param[1],
     add_dag_relationship = state[3],
     add_tree_relationship = state[2],
     environment = state[1],
     node_info = of_value(value);
    if(typeof var_from_parent !== "number")
     if(0 === var_from_parent[0]){
      var var_from_parent$0 = var_from_parent[1];
      caml_call3
       (Core_Hashtbl[36], environment, var_from_parent$0, current_path);
     }
     else{
      var snd = var_from_parent[2], fst = var_from_parent[1];
      caml_call3(Core_Hashtbl[36], environment, fst, current_path);
      caml_call3(Core_Hashtbl[36], environment, snd, current_path);
     }
    caml_call3(add_tree_relationship, current_path, parent_path, node_info);
    caml_call2(add_dag_relationship, current_path, parent_path);
    if(2 === value[1][0]){
     var
      _a__ = caml_call1(Core_Type_equal[8][2], value[3]),
      match = caml_call2(Core_Hashtbl[55], environment, _a__);
     if(match){
      var named_id = match[1];
      caml_call2(add_dag_relationship, named_id, current_path);
     }
     else{
      var
       _a$_ =
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_src_graph_info_ml_218_41),
          0],
       _ba_ = [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_BUG), _a$_]];
      caml_call2(Core[250], 0, _ba_);
     }
    }
    return caml_call2(recurse, state, value);
   }
   function computation_map(param, state, computation){
    var
     current_path = param[4],
     parent_path = param[3],
     var_from_parent = param[2],
     recurse = param[1],
     add_dag_relationship = state[3],
     add_tree_relationship = state[2],
     environment = state[1],
     node_info = of_computation(computation);
    caml_call3(add_tree_relationship, current_path, parent_path, node_info);
    caml_call2(add_dag_relationship, current_path, parent_path);
    if(typeof var_from_parent !== "number")
     if(0 === var_from_parent[0]){
      var var_from_parent$0 = var_from_parent[1];
      caml_call3
       (Core_Hashtbl[36], environment, var_from_parent$0, current_path);
     }
     else{
      var snd = var_from_parent[2], fst = var_from_parent[1];
      caml_call3(Core_Hashtbl[36], environment, fst, current_path);
      caml_call3(Core_Hashtbl[36], environment, snd, current_path);
     }
    var recursed = caml_call2(recurse, state, computation);
    if(typeof recursed !== "number" && 7 === recursed[0]){
     var
      v_id = recursed[1],
      uid = caml_call1(Core_Type_equal[8][2], v_id),
      match = caml_call2(Core_Hashtbl[55], environment, uid);
     if(match){
      var named_id = match[1];
      caml_call2(add_dag_relationship, named_id, current_path);
     }
     return computation;
    }
    return recursed;
   }
   function iter_graph_updates(t, on_update){
    var graph_info = [0, empty];
    function add_dag_relationship(from, to){
     var _a6_ = caml_obj_tag(to);
     a:
     if(250 === _a6_)
      var to$0 = to[1];
     else{
      if(246 !== _a6_ && 244 !== _a6_){var to$0 = to; break a;}
      var to$0 = caml_call1(CamlinternalLazy[2], to);
     }
     var _a7_ = caml_obj_tag(from);
     a:
     if(250 === _a7_)
      var from$0 = from[1];
     else{
      if(246 !== _a7_ && 244 !== _a7_){var from$0 = from; break a;}
      var from$0 = caml_call1(CamlinternalLazy[2], from);
     }
     var
      gm = graph_info[1],
      _a8_ = gm[3],
      _a9_ = caml_call3(Core_Map[37], gm[2], from$0, to$0);
     graph_info[1] = [0, gm[1], _a9_, _a8_];
     return caml_call1(on_update, graph_info[1]);
    }
    function add_tree_relationship(from, to, from_info){
     var _a2_ = caml_obj_tag(to);
     a:
     if(250 === _a2_)
      var to$0 = to[1];
     else{
      if(246 !== _a2_ && 244 !== _a2_){var to$0 = to; break a;}
      var to$0 = caml_call1(CamlinternalLazy[2], to);
     }
     var _a3_ = caml_obj_tag(from);
     a:
     if(250 === _a3_)
      var from$0 = from[1];
     else{
      if(246 !== _a3_ && 244 !== _a3_){var from$0 = from; break a;}
      var from$0 = caml_call1(CamlinternalLazy[2], from);
     }
     var
      gm = graph_info[1],
      _a4_ = caml_call3(Core_Map[35], gm[3], from$0, from_info),
      _a5_ = gm[2];
     graph_info[1] =
      [0, caml_call3(Core_Map[35], gm[1], from$0, to$0), _a5_, _a4_];
     return caml_call1(on_update, graph_info[1]);
    }
    var environment = caml_call3(Core_Type_equal[8][11][31][5], 0, 0, 0);
    return caml_call4
            (Bonsai_Transform[4],
             [0, computation_map],
             [0, value_map],
             [0, environment, add_tree_relationship, add_dag_relationship],
             t);
   }
   function pull_source_locations_from_nea(t){
    var info = [0, t[3]];
    function find_and_update_nearest_here(key){
     var _aW_ = caml_call2(Core_Map[42], info[1], key);
     return caml_call2
             (Base_Option[27][4][2],
              _aW_,
              function(param){
               var here = param[2], node_type = param[1];
               if(here)
                var here$0 = here[1], here$1 = [0, here$0];
               else
                var
                 _aX_ = caml_call2(Core_Map[42], t[1], key),
                 here$1 =
                   caml_call2
                    (Base_Option[27][4][2],
                     _aX_,
                     function(parent){
                      var _aY_ = find_and_update_nearest_here(parent);
                      return caml_call2
                              (Base_Option[27][4][3],
                               _aY_,
                               function(here){
                                var _aZ_ = here[4], _a0_ = here[3], _a1_ = here[2];
                                return [0,
                                        caml_call2(Core[17], cst, here[1]),
                                        _a1_,
                                        _a0_,
                                        _aZ_];
                               });
                     });
               info[1] =
                caml_call3(Core_Map[36], info[1], key, [0, node_type, here$1]);
               return here$1;
              });
    }
    function update_nearest_here(key){
     find_and_update_nearest_here(key);
     return 0;
    }
    caml_call2(Core_Map[47], info[1], update_nearest_here);
    return info[1];
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Graph_info);
   var
    Bonsai_Graph_info =
      [0,
       [0,
        t_of_sexp$5,
        sexp_of_t$5,
        bin_size_t$5,
        bin_write_t$5,
        bin_read_t$11,
        bin_read_t$10,
        bin_shape_t$6,
        bin_writer_t$4,
        bin_reader_t$4,
        bin_t$4,
        of_computation,
        of_value],
       bin_size_t$6,
       bin_write_t$6,
       bin_read_t$13,
       bin_read_t$12,
       bin_shape_t$7,
       bin_writer_t$5,
       bin_reader_t$5,
       bin_t$5,
       t_of_sexp$6,
       sexp_of_t$6,
       empty,
       iter_graph_updates,
       pull_source_locations_from_nea,
       [0,
        [0,
         [0,
          t_of_sexp,
          sexp_of_t,
          bin_size_t,
          bin_write_t,
          bin_read_t$0,
          bin_read_t,
          bin_shape_t,
          bin_writer_t,
          bin_reader_t,
          bin_t,
          compare],
         [0,
          t_of_sexp$0,
          sexp_of_t$0,
          bin_size_t$0,
          bin_write_t$0,
          bin_read_t$2,
          bin_read_t$1,
          bin_shape_t$0,
          bin_writer_t$0,
          bin_reader_t$0,
          bin_t$0,
          compare$0,
          to_v1,
          of_v1],
         [0, of_v1, to_v1]],
        [0,
         t_of_sexp$1,
         sexp_of_t$1,
         bin_size_t$1,
         bin_write_t$1,
         bin_read_t$4,
         bin_read_t$3,
         bin_shape_t$2,
         bin_writer_t$1,
         bin_reader_t$1,
         bin_t$1],
        [0,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$6,
         bin_read_t$5,
         bin_shape_t$3,
         bin_writer_t$2,
         bin_reader_t$2,
         bin_t$2,
         t_of_sexp$2,
         sexp_of_t$2,
         to_v1$0,
         of_v1$0],
        [0,
         bin_size_t$3,
         bin_write_t$3,
         bin_read_t$8,
         bin_read_t$7,
         bin_shape_t$4,
         bin_writer_t$3,
         bin_reader_t$3,
         bin_t$3,
         t_of_sexp$3,
         sexp_of_t$3,
         to_v2,
         of_v2]]];
   runtime.caml_register_global(249, Bonsai_Graph_info, cst_Bonsai_Graph_info);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Instrumentation
//# unitInfo: Requires: Bonsai__Graph_info, Bonsai__Node_path, Bonsai__Transform, CamlinternalLazy, Core__String, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$6 = "",
    cst$7 = "##",
    cst_Bonsai_Instrumentation = "Bonsai__Instrumentation",
    cst_bonsai = "bonsai",
    caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$3 = cst$6,
    cst$4 = cst$6,
    cst$5 = cst$6,
    cst$2 = cst$7,
    cst = " ",
    cst$0 = cst$7,
    cst$1 = cst$6,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Bonsai_Graph_info = global_data.Bonsai__Graph_info,
    Stdlib_String = global_data.Stdlib__String,
    Bonsai_Transform = global_data.Bonsai__Transform,
    Core_String = global_data.Core__String,
    Bonsai_Node_path = global_data.Bonsai__Node_path,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Instrumentation);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/instrumentation.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "instrumentation.ml");
   var
    _a_ = [0, "-compute", 0],
    _b_ = [0, "-apply_action", 0],
    _c_ = [0, "-by", 0];
   function to_string(param){
    var
     node_type = param[2],
     id = param[1],
     _i_ =
       [0,
        cst$0,
        [0, node_type, [0, cst, [0, caml_call1(Bonsai_Node_path[34], id), 0]]]];
    return caml_call2(Stdlib_String[7], cst$1, _i_);
   }
   function extract_node_path_from_entry_l(label){
    if(! caml_call2(Core_String[70], label, cst$2)) return 0;
    var match = caml_call2(Core_String[75], label, 32);
    if(match){
     var _h_ = match[2];
     if(_h_ && ! _h_[2]){
      var node_path = _h_[1];
      return [0, caml_call1(Bonsai_Node_path[33], node_path)];
     }
    }
    return 0;
   }
   function instrument_computation(t, start_timer, stop_timer){
    function computation_map(context, param, computation){
     var node_info = caml_call1(Bonsai_Graph_info[1][11], computation);
     function entry_label(node_type){
      var _f_ = context[4], _g_ = caml_obj_tag(_f_);
      a:
      if(250 === _g_)
       var current_path = _f_[1];
      else{
       if(246 !== _g_ && 244 !== _g_){var current_path = _f_; break a;}
       var current_path = caml_call1(CamlinternalLazy[2], _f_);
      }
      return to_string([0, current_path, node_type]);
     }
     var
      compute_label =
        entry_label
         (caml_call2(Stdlib_String[7], cst$3, [0, node_info[1], _a_])),
      apply_action_label =
        entry_label
         (caml_call2(Stdlib_String[7], cst$4, [0, node_info[1], _b_])),
      by_label =
        entry_label
         (caml_call2(Stdlib_String[7], cst$5, [0, node_info[1], _c_])),
      recursed = caml_call2(context[1], 0, computation);
     if(typeof recursed !== "number")
      switch(recursed[0]){
        case 2:
         var apply_action = recursed[4];
         return [2,
                 recursed[1],
                 recursed[2],
                 recursed[3],
                 function
                 (inject_dynamic,
                  inject_static,
                  schedule_event,
                  input,
                  model$0,
                  action){
                  caml_call1(start_timer, apply_action_label);
                  var
                   model =
                     caml_call6
                      (apply_action,
                       inject_dynamic,
                       inject_static,
                       schedule_event,
                       input,
                       model$0,
                       action);
                  caml_call1(stop_timer, apply_action_label);
                  return model;
                 },
                 recursed[5],
                 recursed[6]];
        case 3:
         var apply_action$0 = recursed[3];
         return [3,
                 recursed[1],
                 recursed[2],
                 function
                 (inject_dynamic,
                  inject_static,
                  schedule_event,
                  model$0,
                  action){
                  caml_call1(start_timer, apply_action_label);
                  var
                   model =
                     caml_call5
                      (apply_action$0,
                       inject_dynamic,
                       inject_static,
                       schedule_event,
                       model$0,
                       action);
                  caml_call1(stop_timer, apply_action_label);
                  return model;
                 },
                 recursed[4]];
        case 4:
         var
          compute =
            function(clock, input){
             caml_call1(start_timer, compute_label);
             var computed = caml_call2(recursed[3], clock, input);
             caml_call1(stop_timer, compute_label);
             return computed;
            };
         return [4, recursed[1], recursed[2], compute];
        case 7:
         return recursed;
        case 10:
         var
          by =
            function(path, key, value){
             caml_call1(start_timer, by_label);
             var by = caml_call3(recursed[2], path, key, value);
             caml_call1(stop_timer, by_label);
             return by;
            };
         return [10, recursed[1], by];
      }
     return recursed;
    }
    function value_map(context, param, wrapped_value){
     var
      id = wrapped_value[3],
      here = wrapped_value[2],
      value = wrapped_value[1],
      _d_ = context[4],
      _e_ = caml_obj_tag(_d_);
     a:
     if(250 === _e_)
      var current_path = _d_[1];
     else{
      if(246 !== _e_ && 244 !== _e_){var current_path = _d_; break a;}
      var current_path = caml_call1(CamlinternalLazy[2], _d_);
     }
     var
      node_info = caml_call1(Bonsai_Graph_info[1][12], wrapped_value),
      entry_label = to_string([0, current_path, node_info[1]]);
     switch(value[0]){
       case 5:
        var
         f =
           function(a){
            caml_call1(start_timer, entry_label);
            var x = caml_call1(value[2], a);
            caml_call1(stop_timer, entry_label);
            return x;
           },
         value$0 = [5, value[1], f];
        break;
       case 6:
        var
         f$0 =
           function(a, b){
            caml_call1(start_timer, entry_label);
            var x = caml_call2(value[3], a, b);
            caml_call1(stop_timer, entry_label);
            return x;
           },
         value$0 = [6, value[1], value[2], f$0];
        break;
       case 7:
        var
         f$1 =
           function(a, b, c){
            caml_call1(start_timer, entry_label);
            var x = caml_call3(value[4], a, b, c);
            caml_call1(stop_timer, entry_label);
            return x;
           },
         value$0 = [7, value[1], value[2], value[3], f$1];
        break;
       case 8:
        var
         f$2 =
           function(a, b, c, d){
            caml_call1(start_timer, entry_label);
            var x = caml_call4(value[5], a, b, c, d);
            caml_call1(stop_timer, entry_label);
            return x;
           },
         value$0 = [8, value[1], value[2], value[3], value[4], f$2];
        break;
       case 9:
        var
         f$3 =
           function(a, b, c, d, e){
            caml_call1(start_timer, entry_label);
            var x = caml_call5(value[6], a, b, c, d, e);
            caml_call1(stop_timer, entry_label);
            return x;
           },
         value$0 = [9, value[1], value[2], value[3], value[4], value[5], f$3];
        break;
       case 10:
        var
         f$4 =
           function(a, b, c, d, e, f){
            caml_call1(start_timer, entry_label);
            var x = caml_call6(value[7], a, b, c, d, e, f);
            caml_call1(stop_timer, entry_label);
            return x;
           },
         value$0 =
           [10,
            value[1],
            value[2],
            value[3],
            value[4],
            value[5],
            value[6],
            f$4];
        break;
       case 11:
        var
         f$5 =
           function(a, b, c, d, e, f, g){
            caml_call1(start_timer, entry_label);
            var x = caml_call7(value[8], a, b, c, d, e, f, g);
            caml_call1(stop_timer, entry_label);
            return x;
           },
         value$0 =
           [11,
            value[1],
            value[2],
            value[3],
            value[4],
            value[5],
            value[6],
            value[7],
            f$5];
        break;
       default: var value$0 = value;
     }
     return caml_call2(context[1], 0, [0, value$0, here, id]);
    }
    return caml_call4
            (Bonsai_Transform[4], [0, computation_map], [0, value_map], 0, t);
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Instrumentation);
   var
    Bonsai_Instrumentation =
      [0, instrument_computation, extract_node_path_from_entry_l];
   runtime.caml_register_global
    (27, Bonsai_Instrumentation, cst_Bonsai_Instrumentation);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Import_stable
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Bonsai_Import_stable = [0];
   runtime.caml_register_global
    (0, Bonsai_Import_stable, "Bonsai__Import_stable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai__Eval
//# unitInfo: Requires: Base__Option, Bonsai__Environment, Bonsai__Import, Bonsai__Input, Bonsai__Lifecycle, Bonsai__Meta, Bonsai__Path, Bonsai__Snapshot, Bonsai__Value, Core, Core__Lazy, Core__Map, Core__Nothing, Core__Option, Core__Sexp, Core__Type_equal, Expect_test_collector, Incr_map, Incremental, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Ui_incr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_Eval = "Bonsai__Eval",
    cst_bonsai = "bonsai",
    cst_src_eval_ml = "src/eval.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bonsai_Path = global_data.Bonsai__Path,
    Assert_failure = global_data.Assert_failure,
    Ui_incr = global_data.Ui_incr,
    Bonsai_Value = global_data.Bonsai__Value,
    Bonsai_Input = global_data.Bonsai__Input,
    Bonsai_Snapshot = global_data.Bonsai__Snapshot,
    Bonsai_Environment = global_data.Bonsai__Environment,
    Core_Nothing = global_data.Core__Nothing,
    Core_Option = global_data.Core__Option,
    Core = global_data.Core,
    Bonsai_Meta = global_data.Bonsai__Meta,
    Core_Type_equal = global_data.Core__Type_equal,
    Core_Map = global_data.Core__Map,
    Core_Sexp = global_data.Core__Sexp,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Incremental = global_data.Incremental,
    Incr_map = global_data.Incr_map,
    Bonsai_Import = global_data.Bonsai__Import,
    Base_Option = global_data.Base__Option,
    Core_Lazy = global_data.Core__Lazy,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bonsai_Lifecycle = global_data.Bonsai__Lifecycle;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_Eval);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], cst_src_eval_ml);
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "eval.ml");
   function unusable_static_apply_action(_bd_, _bc_, param, model){return Core_Nothing[3];
   }
   function unusable_dynamic_apply_action(_bb_, _ba_, param, input, model){return Core_Nothing[3];
   }
   caml_call2(Ui_incr[4][7], Ui_incr[4][3], 1024);
   var
    do_nothing_lifecycle = caml_call1(Ui_incr[11], Bonsai_Lifecycle[1][2]),
    _a_ = [0, "path"],
    cst_BUG_Bonsai_Path_t_should_b =
      "BUG: [Bonsai.Path.t] should be unique for all components, but duplicate paths were discovered.";
   function raise_duplicate_path(path){
    var
     _a__ = [0, [1, [0, _a_, [0, caml_call1(Bonsai_Path[2], path), 0]]], 0],
     _a$_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_BUG_Bonsai_Path_t_should_b),
         _a__]];
    return caml_call1(Core[255], _a$_);
   }
   function merge_lifecycles(a, b){
    return caml_call6
            (Incr_map[26],
             0,
             0,
             0,
             a,
             b,
             function(key, param){
              var _a9_ = param[1];
              if(737457313 === _a9_) return raise_duplicate_path(key);
              if(847852583 <= _a9_){var a = param[2]; return [0, a];}
              var a$0 = param[2];
              return [0, a$0];
             });
   }
   function unzip3_mapi(map, f){
    var
     match =
       caml_call5
        (Incr_map[31],
         0,
         0,
         0,
         map,
         function(key, data){
          var
           match = caml_call2(f, key, data),
           c = match[3],
           b = match[2],
           a = match[1],
           bc = caml_call2(Ui_incr[42], b, c);
          caml_call2(Bonsai_Import[4], 13, bc);
          return [0, a, bc];
         }),
     second_and_third = match[2],
     first = match[1],
     match$0 = caml_call4(Incr_map[29], 0, 0, 0, second_and_third),
     third = match$0[2],
     second = match$0[1];
    return [0, first, second, third];
   }
   var
    unit_model = caml_call1(Ui_incr[11], 0),
    _b_ = [0, "action"],
    _c_ = [0, "index"],
    cst_an_action_inside_of_Bonsai =
      "an action inside of Bonsai.switch has been dropped because the computation is no longer active",
    _d_ = [0, 0],
    _e_ = [0, cst_src_eval_ml, 1337, 8],
    _f_ = [0, cst_src_eval_ml, 1337, 8];
   function gather(param){
    if(typeof param === "number"){
     var
      run =
        function(_a8_, path, _a7_, _a6_, _a5_, param){
         var result = caml_call1(Ui_incr[11], path);
         caml_call2(Bonsai_Import[4], 12, result);
         return caml_call3(Bonsai_Snapshot[5], Bonsai_Input[2], 0, result);
        };
     return [0,
             [0,
              Bonsai_Meta[1][3],
              Bonsai_Meta[4][3],
              Bonsai_Meta[2][3],
              Bonsai_Meta[2][3],
              unusable_static_apply_action,
              unusable_dynamic_apply_action,
              run,
              Bonsai_Import[8]]];
    }
    switch(param[0]){
      case 0:
       var
        value = param[1],
        run$0 =
          function(environment, _a4_, _a3_, _a2_, _a1_, param){
           var result = caml_call2(Bonsai_Value[23], environment, value);
           return caml_call3(Bonsai_Snapshot[5], Bonsai_Input[2], 0, result);
          };
       return [0,
               [0,
                Bonsai_Meta[1][3],
                Bonsai_Meta[4][3],
                Bonsai_Meta[2][3],
                Bonsai_Meta[2][3],
                unusable_static_apply_action,
                unusable_dynamic_apply_action,
                run$0,
                Bonsai_Import[8]]];
      case 1:
       var
        input = param[8],
        reset = param[7],
        apply_static = param[6],
        apply_dynamic = param[5],
        static_action = param[4],
        dynamic_action = param[3],
        input_id = param[2],
        model = param[1],
        run$1 =
          function
          (environment, _aZ_, param, model, inject_dynamic, inject_static){
           var
            input$0 = caml_call2(Bonsai_Value[23], environment, input),
            result =
              caml_call2
               (Ui_incr[78][4][6],
                model,
                function(model){
                 return [0, model, inject_dynamic, inject_static];
                }),
            _a0_ = caml_call1(Bonsai_Input[1], input$0);
           return caml_call3(Bonsai_Snapshot[5], _a0_, 0, result);
          };
       return [0,
               [0,
                model,
                input_id,
                dynamic_action,
                static_action,
                apply_static,
                apply_dynamic,
                run$1,
                reset]];
      case 2:
       var
        input$0 = param[6],
        reset$0 = param[5],
        apply_action = param[4],
        dynamic_action$0 = param[3],
        input_id$0 = param[2],
        model$0 = param[1],
        run$2 =
          function(environment, _aX_, _aW_, model, inject_dynamic, param){
           var
            input = caml_call2(Bonsai_Value[23], environment, input$0),
            result =
              caml_call2
               (Ui_incr[78][4][6],
                model,
                function(model){return [0, model, inject_dynamic];}),
            _aY_ = caml_call1(Bonsai_Input[1], input);
           return caml_call3(Bonsai_Snapshot[5], _aY_, 0, result);
          };
       return [0,
               [0,
                model$0,
                input_id$0,
                dynamic_action$0,
                Bonsai_Meta[2][3],
                unusable_static_apply_action,
                apply_action,
                run$2,
                reset$0]];
      case 3:
       var
        reset$1 = param[4],
        apply_action$0 = param[3],
        static_action$0 = param[2],
        model$1 = param[1],
        run$3 =
          function(_aV_, _aU_, _aT_, model, param, inject_static){
           var
            result =
              caml_call2
               (Ui_incr[78][4][6],
                model,
                function(model){return [0, model, inject_static];});
           return caml_call3(Bonsai_Snapshot[5], Bonsai_Input[2], 0, result);
          };
       return [0,
               [0,
                model$1,
                Bonsai_Meta[4][3],
                Bonsai_Meta[2][3],
                static_action$0,
                apply_action$0,
                unusable_dynamic_apply_action,
                run$3,
                reset$1]];
      case 4:
       var
        compute = param[3],
        input_id$1 = param[2],
        input$1 = param[1],
        run$4 =
          function(environment, _aR_, clock, _aQ_, _aP_, param){
           var
            input = caml_call2(Bonsai_Value[23], environment, input$1),
            result = caml_call2(compute, clock, input),
            _aS_ = caml_call1(Bonsai_Input[1], input);
           return caml_call3(Bonsai_Snapshot[5], _aS_, 0, result);
          };
       return [0,
               [0,
                Bonsai_Meta[1][3],
                input_id$1,
                Bonsai_Meta[2][3],
                Bonsai_Meta[2][3],
                unusable_static_apply_action,
                unusable_dynamic_apply_action,
                run$4,
                Bonsai_Import[8]]];
      case 5:
       var
        here = param[4],
        into = param[3],
        via = param[2],
        from = param[1],
        info_from = gather(from)[1],
        info_into = gather(into)[1],
        same_model = Bonsai_Meta[1][1][2],
        same_action = Bonsai_Meta[2][1][2],
        _g_ = caml_call2(same_model, info_from[1][3], Bonsai_Meta[1][3][3]),
        from_stateless =
          caml_call2
           (Base_Option[27][4][2],
            _g_,
            function(a){
             var
              _aN_ = caml_call2(same_action, info_from[3], Bonsai_Meta[2][3]);
             return caml_call2
                     (Base_Option[27][4][2],
                      _aN_,
                      function(b){
                       var
                        _aO_ =
                          caml_call2(same_action, info_from[4], Bonsai_Meta[2][3]);
                       return caml_call2
                               (Base_Option[27][4][2],
                                _aO_,
                                function(c){return [0, [0, a, b, c]];});
                      });
            });
       if(from_stateless)
        var
         from_stateless$0 = from_stateless[1],
         into_stateless = 0,
         from_stateless$1 = [0, from_stateless$0];
       else
        var
         _h_ = caml_call2(same_model, info_into[1][3], Bonsai_Meta[1][3][3]),
         into_stateless$0 =
           caml_call2
            (Base_Option[27][4][2],
             _h_,
             function(a){
              var
               _aL_ = caml_call2(same_action, info_into[3], Bonsai_Meta[2][3]);
              return caml_call2
                      (Base_Option[27][4][2],
                       _aL_,
                       function(b){
                        var
                         _aM_ =
                           caml_call2(same_action, info_into[4], Bonsai_Meta[2][3]);
                        return caml_call2
                                (Base_Option[27][4][2],
                                 _aM_,
                                 function(c){return [0, [0, a, b, c]];});
                       });
             }),
         into_stateless = into_stateless$0,
         from_stateless$1 = 0;
       if(from_stateless$1){
        var
         run$5 =
           function
           (environment, path, clock, model, inject_dynamic, inject_static){
            var
             path$0 = caml_call2(Bonsai_Path[26], path, 0),
             from =
               caml_call6
                (info_from[7],
                 environment,
                 path$0,
                 clock,
                 unit_model,
                 Core_Nothing[3],
                 Core_Nothing[3]);
            caml_call2(Bonsai_Snapshot[6], here, from);
            var
             from_result = caml_call1(Bonsai_Snapshot[2], from),
             environment$0 =
               caml_call3
                (Bonsai_Environment[2], environment, via, from_result),
             path$1 = caml_call2(Bonsai_Path[26], path, 1),
             into =
               caml_call6
                (info_into[7],
                 environment$0,
                 path$1,
                 clock,
                 model,
                 inject_dynamic,
                 inject_static),
             result = caml_call1(Bonsai_Snapshot[2], into),
             _aJ_ = caml_call1(Bonsai_Snapshot[3], into),
             _aK_ = caml_call1(Bonsai_Snapshot[3], from),
             lifecycle =
               caml_call3(Core_Option[50], _aK_, _aJ_, merge_lifecycles),
             input = caml_call1(Bonsai_Snapshot[1], into);
            return caml_call3(Bonsai_Snapshot[5], input, lifecycle, result);
           };
        return [0,
                [0,
                 info_into[1],
                 info_into[2],
                 info_into[3],
                 info_into[4],
                 info_into[5],
                 info_into[6],
                 run$5,
                 info_into[8]]];
       }
       if(into_stateless){
        var
         run$6 =
           function
           (environment, path, clock, model, inject_dynamic, inject_static){
            var
             path$0 = caml_call2(Bonsai_Path[26], path, 0),
             from =
               caml_call6
                (info_from[7],
                 environment,
                 path$0,
                 clock,
                 model,
                 inject_dynamic,
                 inject_static);
            caml_call2(Bonsai_Snapshot[6], here, from);
            var
             from_result = caml_call1(Bonsai_Snapshot[2], from),
             environment$0 =
               caml_call3
                (Bonsai_Environment[2], environment, via, from_result),
             path$1 = caml_call2(Bonsai_Path[26], path, 1),
             into =
               caml_call6
                (info_into[7],
                 environment$0,
                 path$1,
                 clock,
                 unit_model,
                 Core_Nothing[3],
                 Core_Nothing[3]),
             result = caml_call1(Bonsai_Snapshot[2], into),
             _aH_ = caml_call1(Bonsai_Snapshot[3], into),
             _aI_ = caml_call1(Bonsai_Snapshot[3], from),
             lifecycle =
               caml_call3(Core_Option[50], _aI_, _aH_, merge_lifecycles),
             input = caml_call1(Bonsai_Snapshot[1], from);
            return caml_call3(Bonsai_Snapshot[5], input, lifecycle, result);
           };
        return [0,
                [0,
                 info_from[1],
                 info_from[2],
                 info_from[3],
                 info_from[4],
                 info_from[5],
                 info_from[6],
                 run$6,
                 info_from[8]]];
       }
       var
        reset$2 =
          function(inject_dynamic, inject_static, schedule_event, param){
           var model_into = param[2], model_from = param[1];
           function inject_static$0(action){
            return caml_call1(inject_static, [0, action]);
           }
           function inject_dynamic$0(action){
            return caml_call1(inject_dynamic, [0, action]);
           }
           var
            model_from$0 =
              caml_call4
               (info_from[8],
                inject_dynamic$0,
                inject_static$0,
                schedule_event,
                model_from);
           function inject_static$1(action){
            return caml_call1(inject_static, [1, action]);
           }
           function inject_dynamic$1(action){
            return caml_call1(inject_dynamic, [1, action]);
           }
           var
            model_into$0 =
              caml_call4
               (info_into[8],
                inject_dynamic$1,
                inject_static$1,
                schedule_event,
                model_into);
           return [0, model_from$0, model_into$0];
          },
        apply_static$0 =
          function(inject_dynamic, inject_static, schedule_event, _aG_, param){
           var model_into = _aG_[2], model_from = _aG_[1];
           if(0 === param[0]){
            var
             action = param[1],
             inject_static$0 =
               function(action){
                return caml_call1(inject_static, [0, action]);
               },
             inject_dynamic$0 =
               function(action){
                return caml_call1(inject_dynamic, [0, action]);
               },
             model_from$0 =
               caml_call5
                (info_from[5],
                 inject_dynamic$0,
                 inject_static$0,
                 schedule_event,
                 model_from,
                 action);
            return [0, model_from$0, model_into];
           }
           var action$0 = param[1];
           function inject_static$1(action){
            return caml_call1(inject_static, [1, action]);
           }
           function inject_dynamic$1(action){
            return caml_call1(inject_dynamic, [1, action]);
           }
           var
            model_into$0 =
              caml_call5
               (info_into[5],
                inject_dynamic$1,
                inject_static$1,
                schedule_event,
                model_into,
                action$0);
           return [0, model_from, model_into$0];
          },
        apply_dynamic$0 =
          function
          (inject_dynamic, inject_static, schedule_event, input, _aB_, param){
           var model_into = _aB_[2], model_from = _aB_[1];
           if(0 === param[0]){
            var
             action = param[1],
             inject_static$0 =
               function(action){
                return caml_call1(inject_static, [0, action]);
               },
             inject_dynamic$0 =
               function(action){
                return caml_call1(inject_dynamic, [0, action]);
               },
             _aC_ =
               caml_call2
                (Core_Option[30], input, function(_aF_){return _aF_[1];}),
             model_from$0 =
               caml_call6
                (info_from[6],
                 inject_dynamic$0,
                 inject_static$0,
                 schedule_event,
                 _aC_,
                 model_from,
                 action);
            return [0, model_from$0, model_into];
           }
           var action$0 = param[1];
           function inject_static$1(action){
            return caml_call1(inject_static, [1, action]);
           }
           function inject_dynamic$1(action){
            return caml_call1(inject_dynamic, [1, action]);
           }
           var
            _aD_ =
              caml_call2
               (Core_Option[30], input, function(_aE_){return _aE_[2];}),
            model_into$0 =
              caml_call6
               (info_into[6],
                inject_dynamic$1,
                inject_static$1,
                schedule_event,
                _aD_,
                model_into,
                action$0);
           return [0, model_from, model_into$0];
          },
        run$7 =
          function
          (environment, path, clock, model, inject_dynamic, inject_static){
           function inject_dynamic$0(effect){
            return caml_call1(inject_dynamic, [0, effect]);
           }
           function inject_static$0(effect){
            return caml_call1(inject_static, [0, effect]);
           }
           var
            model$0 =
              caml_call2(Ui_incr[12], model, function(_aA_){return _aA_[1];}),
            path$0 = caml_call2(Bonsai_Path[26], path, 0),
            from =
              caml_call6
               (info_from[7],
                environment,
                path$0,
                clock,
                model$0,
                inject_dynamic$0,
                inject_static$0);
           caml_call2(Bonsai_Snapshot[6], here, from);
           var
            from_result = caml_call1(Bonsai_Snapshot[2], from),
            environment$0 =
              caml_call3(Bonsai_Environment[2], environment, via, from_result);
           function inject_dynamic$1(effect){
            return caml_call1(inject_dynamic, [1, effect]);
           }
           function inject_static$1(effect){
            return caml_call1(inject_static, [1, effect]);
           }
           var
            model$1 =
              caml_call2(Ui_incr[12], model, function(_az_){return _az_[2];}),
            path$1 = caml_call2(Bonsai_Path[26], path, 1),
            into =
              caml_call6
               (info_into[7],
                environment$0,
                path$1,
                clock,
                model$1,
                inject_dynamic$1,
                inject_static$1),
            result = caml_call1(Bonsai_Snapshot[2], into),
            _av_ = caml_call1(Bonsai_Snapshot[3], into),
            _aw_ = caml_call1(Bonsai_Snapshot[3], from),
            lifecycle =
              caml_call3(Core_Option[50], _aw_, _av_, merge_lifecycles),
            _ax_ = caml_call1(Bonsai_Snapshot[1], into),
            _ay_ = caml_call1(Bonsai_Snapshot[1], from),
            input = caml_call2(Bonsai_Input[4], _ay_, _ax_);
           return caml_call3(Bonsai_Snapshot[5], input, lifecycle, result);
          },
        model$2 = caml_call2(Bonsai_Meta[1][4], info_from[1], info_into[1]),
        dynamic_action$1 =
          caml_call2(Bonsai_Meta[2][4], info_from[3], info_into[3]),
        static_action$1 =
          caml_call2(Bonsai_Meta[2][4], info_from[4], info_into[4]),
        input$2 = caml_call2(Bonsai_Meta[4][4], info_from[2], info_into[2]);
       return [0,
               [0,
                model$2,
                input$2,
                dynamic_action$1,
                static_action$1,
                apply_static$0,
                apply_dynamic$0,
                run$7,
                reset$2]];
      case 6:
       var
        inner = param[3],
        value$0 = param[2],
        id = param[1],
        gathered = gather(inner)[1],
        run$8 =
          function
          (environment, path, clock, model, inject_dynamic, inject_static){
           var
            value = caml_call2(Bonsai_Value[23], environment, value$0),
            environment$0 =
              caml_call3(Bonsai_Environment[3], environment, id, value);
           return caml_call6
                   (gathered[7],
                    environment$0,
                    path,
                    clock,
                    model,
                    inject_dynamic,
                    inject_static);
          };
       return [0,
               [0,
                gathered[1],
                gathered[2],
                gathered[3],
                gathered[4],
                gathered[5],
                gathered[6],
                run$8,
                gathered[8]]];
      case 7:
       var
        for_some = param[3],
        default$0 = param[2],
        id$0 = param[1],
        run$9 =
          function(environment, _au_, _at_, _as_, _ar_, param){
           var match = caml_call2(Bonsai_Environment[4], environment, id$0);
           if(match)
            var
             x = match[1],
             result =
               caml_call2
                (Ui_incr[12], x, function(a){return caml_call1(for_some, a);});
           else
            var result = caml_call1(Ui_incr[11], default$0);
           return caml_call3(Bonsai_Snapshot[5], Bonsai_Input[2], 0, result);
          };
       return [0,
               [0,
                Bonsai_Meta[1][3],
                Bonsai_Meta[4][3],
                Bonsai_Meta[2][3],
                Bonsai_Meta[2][3],
                unusable_static_apply_action,
                unusable_dynamic_apply_action,
                run$9,
                Bonsai_Import[8]]];
      case 8:
       var
        by = param[6],
        data_id = param[5],
        cmp_id = param[4],
        key_id = param[3],
        key_comparator = param[2],
        map = param[1],
        match = gather(by)[1],
        reset$3 = match[8],
        run$10 = match[7],
        apply_dynamic$1 = match[6],
        apply_static$1 = match[5],
        static_action$2 = match[4],
        dynamic_action$2 = match[3],
        input_info = match[2],
        model_info = match[1],
        run$11 =
          function
          (environment, path, clock, model, inject_dynamic, inject_static){
           var
            map_input = caml_call2(Bonsai_Value[23], environment, map),
            input_and_models_map =
              caml_call6
               (Incr_map[26],
                0,
                0,
                0,
                map_input,
                model,
                function(_ap_, param){
                 var _aq_ = param[1];
                 if(737457313 === _aq_){
                  var input_and_models = param[2];
                  return [0, input_and_models];
                 }
                 if(847852583 > _aq_) return 0;
                 var input = param[2];
                 return [0, [0, input, model_info[1]]];
                }),
            _ah_ = caml_call2(Bonsai_Path[1][2], key_comparator[3][1], key_id),
            create_keyed = caml_call1(Core[261], _ah_),
            match =
              unzip3_mapi
               (input_and_models_map,
                function(key, input_and_model){
                 caml_call2(Bonsai_Import[4], 6, input_and_model);
                 var
                  _ak_ = [0, caml_call1(create_keyed, key)],
                  path$0 = caml_call2(Bonsai_Path[26], path, _ak_),
                  model =
                    caml_call2
                     (Ui_incr[78][4][6],
                      input_and_model,
                      function(param){
                       var pattern_syntax_010 = param[2];
                       return pattern_syntax_010;
                      }),
                  value =
                    caml_call2
                     (Ui_incr[78][4][6],
                      input_and_model,
                      function(param){
                       var pattern_syntax_011 = param[1];
                       return pattern_syntax_011;
                      }),
                  key_incr = caml_call1(Ui_incr[10], key);
                 caml_call2(Bonsai_Import[4], 7, key_incr);
                 caml_call2(Bonsai_Import[4], 8, value);
                 var
                  _al_ =
                    caml_call3
                     (Bonsai_Environment[2], environment, key_id, key_incr),
                  environment$0 =
                    caml_call3(Bonsai_Environment[2], _al_, data_id, value);
                 function inject_dynamic$0(action){
                  return caml_call1(inject_dynamic, [0, key, action]);
                 }
                 function inject_static$0(action){
                  return caml_call1(inject_static, [0, key, action]);
                 }
                 var
                  snapshot =
                    caml_call6
                     (run$10,
                      environment$0,
                      path$0,
                      clock,
                      model,
                      inject_dynamic$0,
                      inject_static$0),
                  _am_ = caml_call1(Bonsai_Snapshot[4], snapshot),
                  _an_ = caml_call1(Bonsai_Snapshot[1], snapshot),
                  _ao_ = caml_call1(Bonsai_Input[3], _an_);
                 return [0,
                         caml_call1(Bonsai_Snapshot[2], snapshot),
                         _ao_,
                         _am_];
                }),
            lifecycle_map = match[3],
            input_map = match[2],
            results_map = match[1];
           caml_call2(Bonsai_Import[4], 9, results_map);
           caml_call2(Bonsai_Import[4], 10, lifecycle_map);
           caml_call2(Bonsai_Import[4], 11, input_map);
           var
            lifecycle =
              caml_call8
               (Incr_map[42],
                0,
                0,
                0,
                0,
                lifecycle_map,
                Bonsai_Path[23][5],
                function(param, key, data, acc){
                 return caml_call3
                         (Core_Map[41],
                          acc,
                          key,
                          function(param){
                           return param ? raise_duplicate_path(key) : data;
                          });
                },
                function(_aj_, key, param, acc){
                 return caml_call2(Core_Map[45], acc, key);
                });
           caml_call2(Bonsai_Import[4], 10, lifecycle);
           var _ai_ = caml_call1(Bonsai_Input[1], input_map);
           return caml_call3
                   (Bonsai_Snapshot[5], _ai_, [0, lifecycle], results_map);
          },
        apply_static$2 =
          function
          (inject_dynamic, inject_static, schedule_event, model, param){
           var action = param[2], id = param[1];
           function inject_dynamic$0(a){
            return caml_call1(inject_dynamic, [0, id, a]);
           }
           function inject_static$0(a){
            return caml_call1(inject_static, [0, id, a]);
           }
           var
            _af_ = model_info[1],
            _ag_ = caml_call2(Core_Map[42], model, id),
            specific_model = caml_call2(Core_Option[35], _ag_, _af_),
            data =
              caml_call5
               (apply_static$1,
                inject_dynamic$0,
                inject_static$0,
                schedule_event,
                specific_model,
                action);
           return caml_call2(model_info[2], data, model_info[1])
                   ? caml_call2(Core_Map[45], model, id)
                   : caml_call3(Core_Map[36], model, id, data);
          },
        apply_dynamic$2 =
          function
          (inject_dynamic, inject_static, schedule_event, input, model, param){
           var
            action = param[2],
            id = param[1],
            input$0 =
              caml_call2
               (Core_Option[28],
                input,
                function(input){return caml_call2(Core_Map[42], input, id);});
           function inject_dynamic$0(a){
            return caml_call1(inject_dynamic, [0, id, a]);
           }
           function inject_static$0(a){
            return caml_call1(inject_static, [0, id, a]);
           }
           var
            _ad_ = model_info[1],
            _ae_ = caml_call2(Core_Map[42], model, id),
            specific_model = caml_call2(Core_Option[35], _ae_, _ad_),
            data =
              caml_call6
               (apply_dynamic$1,
                inject_dynamic$0,
                inject_static$0,
                schedule_event,
                input$0,
                specific_model,
                action);
           return caml_call2(model_info[2], data, model_info[1])
                   ? caml_call2(Core_Map[45], model, id)
                   : caml_call3(Core_Map[36], model, id, data);
          },
        reset$4 =
          function(inject_dynamic, inject_static, schedule_event, model){
           return caml_call2
                   (Core_Map[67],
                    model,
                    function(id, data){
                     function inject_dynamic$0(a){
                      return caml_call1(inject_dynamic, [0, id, a]);
                     }
                     function inject_static$0(a){
                      return caml_call1(inject_static, [0, id, a]);
                     }
                     var
                      new_model =
                        caml_call4
                         (reset$3,
                          inject_dynamic$0,
                          inject_static$0,
                          schedule_event,
                          data);
                     return caml_call2(model_info[2], new_model, model_info[1])
                             ? 0
                             : [0, new_model];
                    });
          },
        _i_ = caml_call2(Bonsai_Meta[2][5], key_id, static_action$2),
        _j_ = caml_call2(Bonsai_Meta[2][5], key_id, dynamic_action$2),
        _k_ = caml_call3(Bonsai_Meta[4][5], key_id, cmp_id, input_info);
       return [0,
               [0,
                caml_call4
                 (Bonsai_Meta[1][5],
                  key_comparator,
                  key_id,
                  cmp_id,
                  model_info),
                _k_,
                _j_,
                _i_,
                apply_static$2,
                apply_dynamic$2,
                run$11,
                reset$4]];
      case 9:
       var
        get_model_key = param[10],
        by$0 = param[9],
        data_id$0 = param[8],
        model_cmp_id = param[7],
        model_key_id = param[6],
        io_cmp_id = param[5],
        io_key_id = param[4],
        model_comparator = param[3],
        io_comparator = param[2],
        map$0 = param[1],
        model_key_comparator = model_comparator[3],
        match$0 = gather(by$0)[1],
        reset$5 = match$0[8],
        run$12 = match$0[7],
        apply_dynamic$3 = match$0[6],
        apply_static$3 = match$0[5],
        static_action$3 = match$0[4],
        dynamic_action$3 = match$0[3],
        input_info$0 = match$0[2],
        model_info$0 = match$0[1],
        run$13 =
          function
          (environment, path, clock, model, inject_dynamic, inject_static){
           var
            map_input = caml_call2(Bonsai_Value[23], environment, map$0),
            model_lookup =
              caml_call4(Incr_map[54][1], 0, 0, model, model_key_comparator),
            _X_ =
              caml_call2(Bonsai_Path[1][2], io_comparator[3][1], io_key_id),
            create_keyed = caml_call1(Core[261], _X_),
            match =
              unzip3_mapi
               (map_input,
                function(key, value){
                 var
                  ___ = [0, caml_call1(create_keyed, key)],
                  path$0 = caml_call2(Bonsai_Path[26], path, ___),
                  key_incr = caml_call1(Ui_incr[10], key);
                 caml_call2(Bonsai_Import[4], 7, key_incr);
                 caml_call2(Bonsai_Import[4], 8, value);
                 var
                  _$_ =
                    caml_call3
                     (Bonsai_Environment[2], environment, io_key_id, key_incr),
                  environment$0 =
                    caml_call3(Bonsai_Environment[2], _$_, data_id$0, value),
                  model_key =
                    caml_call2
                     (Ui_incr[78][4][6],
                      value,
                      function(value){
                       return caml_call2(get_model_key, key, value);
                      }),
                  _aa_ = caml_call1(Ui_incr[60][4], model_key_comparator[1]);
                 caml_call2(Ui_incr[61], model_key, _aa_);
                 var
                  pattern_syntax_012 =
                    caml_call2
                     (Ui_incr[78][4][1],
                      model_key,
                      function(model_key){
                       function inject_dynamic$0(action){
                        return caml_call1
                                (inject_dynamic, [0, key, model_key, action]);
                       }
                       function inject_static$0(action){
                        return caml_call1
                                (inject_static, [0, key, model_key, action]);
                       }
                       var
                        _ab_ = caml_call2(Incr_map[54][2], model_lookup, model_key),
                        model =
                          caml_call2
                           (Ui_incr[78][4][6],
                            _ab_,
                            function(param){
                             if(! param) return model_info$0[1];
                             var model = param[1][2];
                             return model;
                            }),
                        snapshot =
                          caml_call6
                           (run$12,
                            environment$0,
                            path$0,
                            clock,
                            model,
                            inject_dynamic$0,
                            inject_static$0),
                        let_syntax_018 = caml_call1(Bonsai_Snapshot[2], snapshot),
                        _ac_ = caml_call1(Bonsai_Snapshot[1], snapshot),
                        let_syntax_019 = caml_call1(Bonsai_Input[3], _ac_),
                        let_syntax_020 = caml_call1(Bonsai_Snapshot[4], snapshot);
                       return caml_call4
                               (Ui_incr[78][4][8],
                                let_syntax_018,
                                let_syntax_019,
                                let_syntax_020,
                                function(result, input, lifecycle){
                                 return [0, result, input, lifecycle];
                                });
                      }),
                  input_map =
                    caml_call2
                     (Ui_incr[78][4][6],
                      pattern_syntax_012,
                      function(param){
                       var pattern_syntax_013 = param[2];
                       return pattern_syntax_013;
                      }),
                  lifecycle_map =
                    caml_call2
                     (Ui_incr[78][4][6],
                      pattern_syntax_012,
                      function(param){
                       var pattern_syntax_014 = param[3];
                       return pattern_syntax_014;
                      }),
                  results_map =
                    caml_call2
                     (Ui_incr[78][4][6],
                      pattern_syntax_012,
                      function(param){
                       var pattern_syntax_015 = param[1];
                       return pattern_syntax_015;
                      });
                 return [0, results_map, input_map, lifecycle_map];
                }),
            lifecycle_map = match[3],
            input_map = match[2],
            results_map = match[1];
           caml_call2(Bonsai_Import[4], 9, results_map);
           caml_call2(Bonsai_Import[4], 10, lifecycle_map);
           var
            lifecycle =
              caml_call8
               (Incr_map[42],
                0,
                0,
                0,
                0,
                lifecycle_map,
                Bonsai_Path[23][5],
                function(param, key, data, acc){
                 return caml_call3
                         (Core_Map[41],
                          acc,
                          key,
                          function(param){
                           return param ? raise_duplicate_path(key) : data;
                          });
                },
                function(_Z_, key, param, acc){
                 return caml_call2(Core_Map[45], acc, key);
                });
           caml_call2(Bonsai_Import[4], 10, lifecycle);
           var _Y_ = caml_call1(Bonsai_Input[1], input_map);
           return caml_call3
                   (Bonsai_Snapshot[5], _Y_, [0, lifecycle], results_map);
          },
        apply_static$4 =
          function
          (inject_dynamic, inject_static, schedule_event, model, param){
           var action = param[3], model_id = param[2], input_id = param[1];
           function inject_dynamic$0(a){
            return caml_call1(inject_dynamic, [0, input_id, model_id, a]);
           }
           function inject_static$0(a){
            return caml_call1(inject_static, [0, input_id, model_id, a]);
           }
           var match = caml_call2(Core_Map[42], model, model_id);
           if(match)
            var model$0 = match[1][2], specific_model = model$0;
           else
            var specific_model = model_info$0[1];
           var
            new_model =
              caml_call5
               (apply_static$3,
                inject_dynamic$0,
                inject_static$0,
                schedule_event,
                specific_model,
                action);
           return caml_call2(model_info$0[2], new_model, model_info$0[1])
                   ? caml_call2(Core_Map[45], model, model_id)
                   : caml_call3
                     (Core_Map[36], model, model_id, [0, input_id, new_model]);
          },
        apply_dynamic$4 =
          function
          (inject_dynamic, inject_static, schedule_event, input, model, param){
           var
            action = param[3],
            model_id = param[2],
            input_id = param[1],
            input$0 =
              caml_call2
               (Core_Option[28],
                input,
                function(input){
                 return caml_call2(Core_Map[42], input, input_id);
                });
           function inject_dynamic$0(a){
            return caml_call1(inject_dynamic, [0, input_id, model_id, a]);
           }
           function inject_static$0(a){
            return caml_call1(inject_static, [0, input_id, model_id, a]);
           }
           var match = caml_call2(Core_Map[42], model, model_id);
           if(match)
            var model$0 = match[1][2], specific_model = model$0;
           else
            var specific_model = model_info$0[1];
           var
            new_model =
              caml_call6
               (apply_dynamic$3,
                inject_dynamic$0,
                inject_static$0,
                schedule_event,
                input$0,
                specific_model,
                action);
           return caml_call2(model_info$0[2], new_model, model_info$0[1])
                   ? caml_call2(Core_Map[45], model, model_id)
                   : caml_call3
                     (Core_Map[36], model, model_id, [0, input_id, new_model]);
          },
        reset$6 =
          function(inject_dynamic, inject_static, schedule_event, model){
           return caml_call2
                   (Core_Map[67],
                    model,
                    function(model_id, param){
                     var model = param[2], input_id = param[1];
                     function inject_dynamic$0(a){
                      return caml_call1
                              (inject_dynamic, [0, input_id, model_id, a]);
                     }
                     function inject_static$0(a){
                      return caml_call1(inject_static, [0, input_id, model_id, a]);
                     }
                     var
                      new_model =
                        caml_call4
                         (reset$5,
                          inject_dynamic$0,
                          inject_static$0,
                          schedule_event,
                          model);
                     return caml_call2
                              (model_info$0[2], new_model, model_info$0[1])
                             ? 0
                             : [0, [0, input_id, new_model]];
                    });
          },
        _l_ =
          caml_call3
           (Bonsai_Meta[2][6], io_key_id, model_key_id, static_action$3),
        _m_ =
          caml_call3
           (Bonsai_Meta[2][6], io_key_id, model_key_id, dynamic_action$3),
        _n_ =
          caml_call3(Bonsai_Meta[4][5], io_key_id, io_cmp_id, input_info$0);
       return [0,
               [0,
                caml_call6
                 (Bonsai_Meta[1][6],
                  model_comparator,
                  io_comparator,
                  model_key_id,
                  io_key_id,
                  model_cmp_id,
                  model_info$0),
                _n_,
                _m_,
                _l_,
                apply_static$4,
                apply_dynamic$4,
                run$13,
                reset$6]];
      case 10:
       var
        by$1 = param[2],
        map$1 = param[1],
        run$14 =
          function(environment, path, _W_, _V_, _U_, param){
           var
            map_input = caml_call2(Bonsai_Value[23], environment, map$1),
            result =
              caml_call4
               (Incr_map[3],
                0,
                0,
                map_input,
                function(key, data){return caml_call3(by$1, path, key, data);});
           return caml_call3(Bonsai_Snapshot[5], Bonsai_Input[2], 0, result);
          };
       return [0,
               [0,
                Bonsai_Meta[1][3],
                Bonsai_Meta[4][3],
                Bonsai_Meta[2][3],
                Bonsai_Meta[2][3],
                unusable_static_apply_action,
                unusable_dynamic_apply_action,
                run$14,
                Bonsai_Import[8]]];
      case 11:
       var
        arms = param[2],
        match$1 = param[1],
        gathered$0 = caml_call2(Core_Map[55], arms, gather),
        run$15 =
          function
          (environment, path, clock, model, inject_dynamic, inject_static){
           var
            index = caml_call2(Bonsai_Value[23], environment, match$1),
            pattern_syntax_024 =
              caml_call2
               (Ui_incr[78][4][1],
                index,
                function(index){
                 var
                  path$0 = caml_call2(Bonsai_Path[26], path, [1, index]),
                  match = caml_call2(Core_Map[43], gathered$0, index)[1],
                  run = match[7],
                  static_action_info = match[4],
                  dynamic_action_info = match[3],
                  input_info = match[2],
                  model_info = match[1],
                  chosen_model =
                    caml_call2
                     (Incremental[10],
                      model,
                      function(map){
                       var
                        match = caml_call2(Bonsai_Meta[3][3], map, index),
                        info = match[2],
                        model = match[1],
                        equal =
                          caml_call2(Bonsai_Meta[1][1][3], info[3], model_info[3]);
                       return caml_call2(Core_Type_equal[5], equal, model);
                      });
                 function inject_dynamic$0(action){
                  return caml_call1
                          (inject_dynamic, [0, action, dynamic_action_info, index]);
                 }
                 function inject_static$0(action){
                  return caml_call1
                          (inject_static, [0, action, static_action_info, index]);
                 }
                 var
                  snapshot =
                    caml_call6
                     (run,
                      environment,
                      path$0,
                      clock,
                      chosen_model,
                      inject_dynamic$0,
                      inject_static$0),
                  _S_ = caml_call1(Bonsai_Snapshot[1], snapshot),
                  _T_ = caml_call1(Bonsai_Input[3], _S_),
                  input =
                    caml_call2
                     (Ui_incr[78][4][6],
                      _T_,
                      function(input){return [0, input, input_info, index];}),
                  let_syntax_030 = caml_call1(Bonsai_Snapshot[2], snapshot),
                  let_syntax_031 = caml_call1(Bonsai_Snapshot[4], snapshot);
                 return caml_call4
                         (Ui_incr[78][4][8],
                          let_syntax_030,
                          let_syntax_031,
                          input,
                          function(result, lifecycle, input){
                           return [0, result, input, lifecycle];
                          });
                }),
            input =
              caml_call2
               (Ui_incr[78][4][6],
                pattern_syntax_024,
                function(param){
                 var pattern_syntax_025 = param[2];
                 return pattern_syntax_025;
                }),
            lifecycle =
              caml_call2
               (Ui_incr[78][4][6],
                pattern_syntax_024,
                function(param){
                 var pattern_syntax_026 = param[3];
                 return pattern_syntax_026;
                }),
            result =
              caml_call2
               (Ui_incr[78][4][6],
                pattern_syntax_024,
                function(param){
                 var pattern_syntax_027 = param[1];
                 return pattern_syntax_027;
                }),
            input$0 = caml_call1(Bonsai_Input[1], input);
           return caml_call3
                   (Bonsai_Snapshot[5], input$0, [0, lifecycle], result);
          },
        apply_static$5 =
          function
          (inject_dynamic, inject_static, schedule_event, model, action){
           var
            index = action[3],
            action_type_id = action[2],
            action$0 = action[1],
            match = caml_call2(Bonsai_Meta[3][3], model, index),
            chosen_model_info = match[2],
            chosen_model = match[1];
           function inject_static$0(action){
            return caml_call1
                    (inject_static, [0, action, action_type_id, index]);
           }
           var
            match$0 = caml_call2(Core_Map[43], gathered$0, index)[1],
            apply_static = match$0[5],
            am = match$0[4],
            dm = match$0[3],
            tm = match$0[1];
           caml_call2(Bonsai_Meta[1][1][3], tm[3], chosen_model_info[3]);
           caml_call2(Bonsai_Meta[2][1][3], am, action_type_id);
           function inject_dynamic$0(action){
            return caml_call1(inject_dynamic, [0, action, dm, index]);
           }
           var
            new_model =
              caml_call5
               (apply_static,
                inject_dynamic$0,
                inject_static$0,
                schedule_event,
                chosen_model,
                action$0),
            new_model$0 = caml_call2(Bonsai_Meta[1][2][3], tm, new_model);
           return caml_call3(Bonsai_Meta[3][4], model, index, new_model$0);
          },
        apply_dynamic$5 =
          function
          (inject_dynamic, inject_static, schedule_event, input, model, param){
           var
            index = param[3],
            action_type_id = param[2],
            action = param[1],
            match = caml_call2(Core_Map[43], gathered$0, index)[1],
            apply_dynamic = match[6],
            am = match[4],
            dm = match[3],
            im = match[2],
            tm = match[1],
            match$0 = caml_call2(Bonsai_Meta[3][3], model, index),
            chosen_model_info = match$0[2],
            chosen_model = match$0[1],
            match$1 = caml_call2(Bonsai_Meta[2][1][2], action_type_id, dm),
            match$2 =
              caml_call2(Bonsai_Meta[1][1][2], chosen_model_info[3], tm[3]);
           if(match$1 && match$2){
            var
             inject_static$0 =
               function(action){
                return caml_call1(inject_static, [0, action, am, index]);
               },
             inject_dynamic$0 =
               function(action){
                return caml_call1(inject_dynamic, [0, action, dm, index]);
               };
            if(input){
             var
              match$3 = input[1],
              index$0 = match$3[3],
              chosen_input_info = match$3[2],
              chosen_input = match$3[1],
              match$4 = caml_call2(Core[89], index, index$0);
             a:
             {
              var
               match$5 = caml_call2(Bonsai_Meta[4][1], chosen_input_info, im);
              if(match$4 && match$5){
               var
                _O_ =
                  caml_call6
                   (apply_dynamic,
                    inject_dynamic$0,
                    inject_static$0,
                    schedule_event,
                    [0, chosen_input],
                    chosen_model,
                    action);
               break a;
              }
              var
               _O_ =
                 caml_call6
                  (apply_dynamic,
                   inject_dynamic$0,
                   inject_static$0,
                   schedule_event,
                   0,
                   chosen_model,
                   action);
             }
             var new_model = _O_;
            }
            else
             var
              new_model =
                caml_call6
                 (apply_dynamic,
                  inject_dynamic$0,
                  inject_static$0,
                  schedule_event,
                  0,
                  chosen_model,
                  action);
            var new_model$0 = caml_call2(Bonsai_Meta[1][2][3], tm, new_model);
            return caml_call3(Bonsai_Meta[3][4], model, index, new_model$0);
           }
           var
            action$0 =
              caml_call2(Bonsai_Meta[2][1][5], action_type_id, action),
            _P_ =
              [0,
               [1, [0, _b_, [0, caml_call1(Core_Sexp[90], action$0), 0]]],
               0],
            _Q_ =
              [0, [1, [0, _c_, [0, caml_call1(Core[363], index), 0]]], _P_],
            _R_ =
              [1,
               [0,
                caml_call1
                 (Sexplib0_Sexp_conv[7], cst_an_action_inside_of_Bonsai),
                _Q_]];
           caml_call2(Core[251], 0, _R_);
           return model;
          },
        reset$7 =
          function(inject_dynamic, inject_static, schedule_event, model){
           function f(index, model){
            var
             chosen_model_info = model[2],
             chosen_model = model[1],
             match = caml_call2(Core_Map[43], gathered$0, index)[1],
             reset = match[8],
             am = match[4],
             dm = match[3],
             tm = match[1];
            function inject_static$0(action){
             return caml_call1(inject_static, [0, action, am, index]);
            }
            function inject_dynamic$0(action){
             return caml_call1(inject_dynamic, [0, action, dm, index]);
            }
            caml_call2(Bonsai_Meta[1][1][3], tm[3], chosen_model_info[3]);
            var
             new_model =
               caml_call4
                (reset,
                 inject_dynamic$0,
                 inject_static$0,
                 schedule_event,
                 chosen_model);
            return caml_call2(Bonsai_Meta[1][2][3], tm, new_model);
           }
           var
            _M_ = caml_call1(Bonsai_Meta[3][5], model),
            _N_ = caml_call2(Core_Map[56], _M_, f);
           return caml_call1(Bonsai_Meta[3][6], _N_);
          },
        models =
          caml_call2
           (Core_Map[55],
            gathered$0,
            function(param){
             var model = param[1][1];
             return caml_call2(Bonsai_Meta[1][2][3], model, model[1]);
            }),
        _o_ = caml_call1(Bonsai_Meta[3][6], models),
        model$3 = caml_call1(Bonsai_Meta[3][7], _o_);
       return [0,
               [0,
                model$3,
                Bonsai_Meta[4][7][2],
                Bonsai_Meta[2][2][2],
                Bonsai_Meta[2][2][2],
                apply_static$5,
                apply_dynamic$5,
                run$15,
                reset$7]];
      case 12:
       var
        lazy_computation = param[1],
        dynamic_action$4 = Bonsai_Meta[2][2][1],
        static_action$4 = Bonsai_Meta[2][2][1],
        model$4 = Bonsai_Meta[1][2][4],
        gathered$1 = caml_call2(Core_Lazy[25], lazy_computation, gather),
        run$16 =
          function
          (environment, path, clock, model, inject_dynamic, inject_static){
           var
            match = caml_call1(Core[242], gathered$1)[1],
            run = match[7],
            static_action_info = match[4],
            dynamic_action_info = match[3],
            input_info = match[2],
            model_info = match[1],
            input_model =
              caml_call2
               (Ui_incr[78][4][6],
                model,
                function(model){
                 var
                  _L_ =
                    caml_call2(Bonsai_Meta[1][2][3], model_info, model_info[1]),
                  match = caml_call2(Core_Option[35], model, _L_),
                  info = match[2],
                  model$0 = match[1],
                  witness =
                    caml_call2(Bonsai_Meta[1][1][3], info[3], model_info[3]);
                 return caml_call2(Core_Type_equal[5], witness, model$0);
                });
           function inject_dynamic$0(action){
            return caml_call1
                    (inject_dynamic, [0, action, dynamic_action_info, 0]);
           }
           function inject_static$0(action){
            return caml_call1
                    (inject_static, [0, action, static_action_info, 0]);
           }
           var
            snapshot =
              caml_call6
               (run,
                environment,
                path,
                clock,
                input_model,
                inject_dynamic$0,
                inject_static$0),
            _I_ = caml_call1(Bonsai_Snapshot[1], snapshot),
            input =
              caml_call2
               (Bonsai_Input[5],
                _I_,
                function(input){return [0, input, input_info, 0];}),
            _J_ = caml_call1(Bonsai_Snapshot[2], snapshot),
            _K_ = caml_call1(Bonsai_Snapshot[3], snapshot);
           return caml_call3(Bonsai_Snapshot[5], input, _K_, _J_);
          },
        apply_static$6 =
          function
          (inject_dynamic, inject_static, schedule_event, model, action){
           var
            match = caml_call1(Core[242], gathered$1)[1],
            apply_static = match[5],
            static_action_info = match[4],
            dynamic_action_info = match[3],
            model_info = match[1];
           function inject_dynamic$0(action){
            return caml_call1
                    (inject_dynamic, [0, action, dynamic_action_info, 0]);
           }
           function inject_static$0(action){
            return caml_call1
                    (inject_static, [0, action, static_action_info, 0]);
           }
           var
            action_type_id = action[2],
            action$0 = action[1],
            _H_ = caml_call2(Bonsai_Meta[1][2][3], model_info, model_info[1]),
            match$0 = caml_call2(Core_Option[35], model, _H_),
            chosen_model_info = match$0[2],
            chosen_model = match$0[1];
           caml_call2
            (Bonsai_Meta[2][1][3], action_type_id, static_action_info);
           caml_call2
            (Bonsai_Meta[1][1][3], chosen_model_info[3], model_info[3]);
           var
            new_model =
              caml_call5
               (apply_static,
                inject_dynamic$0,
                inject_static$0,
                schedule_event,
                chosen_model,
                action$0);
           return [0, caml_call2(Bonsai_Meta[1][2][3], model_info, new_model)];
          },
        apply_dynamic$6 =
          function
          (inject_dynamic,
           inject_static,
           schedule_event,
           input,
           model,
           action){
           var
            match = caml_call1(Core[242], gathered$1)[1],
            apply_dynamic = match[6],
            static_action_info = match[4],
            dynamic_action_info = match[3],
            input_info = match[2],
            model_info = match[1];
           function inject_dynamic$0(action){
            return caml_call1
                    (inject_dynamic, [0, action, dynamic_action_info, 0]);
           }
           function inject_static$0(action){
            return caml_call1
                    (inject_static, [0, action, static_action_info, 0]);
           }
           var
            action_type_id = action[2],
            action$0 = action[1],
            _G_ = caml_call2(Bonsai_Meta[1][2][3], model_info, model_info[1]),
            match$0 = caml_call2(Core_Option[35], model, _G_),
            chosen_model_info = match$0[2],
            chosen_model = match$0[1];
           caml_call2
            (Bonsai_Meta[2][1][3], action_type_id, dynamic_action_info);
           caml_call2
            (Bonsai_Meta[1][1][3], chosen_model_info[3], model_info[3]);
           if(input){
            var
             match$1 = input[1],
             input_type_id = match$1[2],
             input$0 = match$1[1];
            caml_call2(Bonsai_Meta[4][2], input_type_id, input_info);
            var
             new_model =
               caml_call6
                (apply_dynamic,
                 inject_dynamic$0,
                 inject_static$0,
                 schedule_event,
                 [0, input$0],
                 chosen_model,
                 action$0);
           }
           else
            var
             new_model =
               caml_call6
                (apply_dynamic,
                 inject_dynamic$0,
                 inject_static$0,
                 schedule_event,
                 0,
                 chosen_model,
                 action$0);
           return [0, caml_call2(Bonsai_Meta[1][2][3], model_info, new_model)];
          },
        reset$8 =
          function(inject_dynamic$0, inject_static$0, schedule_event, model){
           if(! model) return 0;
           var
            model$0 = model[1],
            match = caml_call1(Core[242], gathered$1)[1],
            reset = match[8],
            static_action_info = match[4],
            dynamic_action_info = match[3],
            model_info = match[1];
           function inject_dynamic(action){
            return caml_call1
                    (inject_dynamic$0, [0, action, dynamic_action_info, 0]);
           }
           function inject_static(action){
            return caml_call1
                    (inject_static$0, [0, action, static_action_info, 0]);
           }
           var chosen_model_info = model$0[2], chosen_model = model$0[1];
           caml_call2
            (Bonsai_Meta[1][1][3], chosen_model_info[3], model_info[3]);
           var
            new_model =
              caml_call4
               (reset,
                inject_dynamic,
                inject_static,
                schedule_event,
                chosen_model);
           return [0, caml_call2(Bonsai_Meta[1][2][3], model_info, new_model)];
          };
       return [0,
               [0,
                model$4,
                Bonsai_Meta[4][7][1],
                dynamic_action$4,
                static_action$4,
                apply_static$6,
                apply_dynamic$6,
                run$16,
                reset$8]];
      case 13:
       var
        reset_me = param[8],
        dynamic_apply_action = param[7],
        inner$0 = param[6],
        model_id = param[5],
        inject_id = param[4],
        result_id = param[3],
        action_id = param[2],
        wrapper_model = param[1],
        match$2 = gather(inner$0)[1],
        reset$9 = match$2[8],
        run$17 = match$2[7],
        apply_dynamic$7 = match$2[6],
        apply_static$7 = match$2[5],
        inner_static_action = match$2[4],
        inner_dynamic_action = match$2[3],
        inner_input = match$2[2],
        inner_model = match$2[1],
        run$18 =
          function
          (environment, path, clock, model, inject_dynamic, inject_static){
           var
            inner_model =
              caml_call2
               (Ui_incr[78][4][6],
                model,
                function(param){
                 var pattern_syntax_037 = param[2];
                 return pattern_syntax_037;
                }),
            outer_model =
              caml_call2
               (Ui_incr[78][4][6],
                model,
                function(param){
                 var pattern_syntax_038 = param[1];
                 return pattern_syntax_038;
                });
           function dynamic_inject_outer(a){
            return caml_call1(inject_dynamic, [0, a]);
           }
           function dynamic_inject_inner(a){
            return caml_call1(inject_dynamic, [1, a]);
           }
           var
            _A_ = caml_call1(Ui_incr[11], dynamic_inject_outer),
            _B_ =
              caml_call3
               (Bonsai_Environment[2], environment, model_id, outer_model),
            environment$0 =
              caml_call3(Bonsai_Environment[2], _B_, inject_id, _A_),
            inner_snapshot =
              caml_call6
               (run$17,
                environment$0,
                path,
                clock,
                inner_model,
                dynamic_inject_inner,
                inject_static),
            inner_result = caml_call1(Bonsai_Snapshot[2], inner_snapshot),
            _C_ = caml_call1(Bonsai_Snapshot[2], inner_snapshot),
            _D_ = caml_call1(Bonsai_Input[1], _C_),
            _E_ = caml_call1(Bonsai_Snapshot[1], inner_snapshot),
            input = caml_call2(Bonsai_Input[4], _E_, _D_),
            _F_ = caml_call1(Bonsai_Snapshot[3], inner_snapshot);
           return caml_call3(Bonsai_Snapshot[5], input, _F_, inner_result);
          },
        dynamic_action$5 =
          caml_call2(Bonsai_Meta[2][4], action_id, inner_dynamic_action),
        model$5 = caml_call2(Bonsai_Meta[1][4], wrapper_model, inner_model),
        apply_static$8 =
          function
          (inject_dynamic, inject_static, schedule_event, param, action){
           var m2 = param[2], m1 = param[1];
           function inject_dynamic$0(a){
            return caml_call1(inject_dynamic, [1, a]);
           }
           return [0,
                   m1,
                   caml_call5
                    (apply_static$7,
                     inject_dynamic$0,
                     inject_static,
                     schedule_event,
                     m2,
                     action)];
          },
        apply_dynamic$8 =
          function
          (inject_dynamic,
           inject_static,
           schedule_event,
           input,
           param,
           action){
           var inner_model = param[2], outer_model = param[1];
           function dynamic_inject_outer(a){
            return caml_call1(inject_dynamic, [0, a]);
           }
           function dynamic_inject_inner(a){
            return caml_call1(inject_dynamic, [1, a]);
           }
           if(0 === action[0]){
            var
             action_outer = action[1],
             _x_ =
               caml_call2
                (Core_Option[30], input, function(_z_){return _z_[2];}),
             new_outer_model =
               caml_call6
                (dynamic_apply_action,
                 dynamic_inject_outer,
                 Core_Nothing[3],
                 schedule_event,
                 _x_,
                 outer_model,
                 action_outer);
            return [0, new_outer_model, inner_model];
           }
           var
            action_inner = action[1],
            new_inner_model =
              caml_call6
               (apply_dynamic$7,
                dynamic_inject_inner,
                inject_static,
                schedule_event,
                caml_call2
                 (Core_Option[30], input, function(_y_){return _y_[1];}),
                inner_model,
                action_inner);
           return [0, outer_model, new_inner_model];
          },
        reset$10 =
          function(inject_dynamic, inject_static, schedule_event, param){
           var inner_model = param[2], outer_model = param[1];
           function inject_dynamic$0(a){
            return caml_call1(inject_dynamic, [0, a]);
           }
           var
            outer_model$0 =
              caml_call4
               (reset_me,
                inject_dynamic$0,
                Core_Nothing[3],
                schedule_event,
                outer_model);
           function inject_dynamic$1(a){
            return caml_call1(inject_dynamic, [1, a]);
           }
           var
            inner_model$0 =
              caml_call4
               (reset$9,
                inject_dynamic$1,
                inject_static,
                schedule_event,
                inner_model);
           return [0, outer_model$0, inner_model$0];
          };
       return [0,
               [0,
                model$5,
                caml_call2(Bonsai_Meta[4][4], inner_input, result_id),
                dynamic_action$5,
                inner_static_action,
                apply_static$8,
                apply_dynamic$8,
                run$18,
                reset$10]];
      case 14:
       var
        inner$1 = param[2],
        reset_id = param[1],
        match$3 = gather(inner$1)[1],
        reset$11 = match$3[8],
        run$19 = match$3[7],
        apply_dynamic$9 = match$3[6],
        apply_static$9 = match$3[5],
        static_action$5 = match$3[4],
        dynamic_action$6 = match$3[3],
        input$3 = match$3[2],
        model$6 = match$3[1],
        run$20 =
          function
          (environment, path, clock, model, inject_dynamic, inject_static){
           var reset_event = caml_call1(inject_static, _d_);
           function inject_static$0(a){
            return caml_call1(inject_static, [1, a]);
           }
           var
            _u_ = caml_call1(Ui_incr[11], reset_event),
            environment$0 =
              caml_call3(Bonsai_Environment[2], environment, reset_id, _u_),
            snapshot =
              caml_call6
               (run$19,
                environment$0,
                path,
                clock,
                model,
                inject_dynamic,
                inject_static$0),
            result = caml_call1(Bonsai_Snapshot[2], snapshot),
            _v_ = caml_call1(Bonsai_Snapshot[3], snapshot),
            _w_ = caml_call1(Bonsai_Snapshot[1], snapshot);
           return caml_call3(Bonsai_Snapshot[5], _w_, _v_, result);
          },
        static_action$6 =
          caml_call2(Bonsai_Meta[2][4], Bonsai_Meta[2][1][7], static_action$5),
        apply_static$10 =
          function(inject_dynamic, inject_static, schedule_event, m){
           function inject_static$0(a){
            return caml_call1(inject_static, [1, a]);
           }
           return function(param){
            if(0 === param[0])
             return caml_call4
                     (reset$11,
                      inject_dynamic,
                      inject_static$0,
                      schedule_event,
                      m);
            var a = param[1];
            return caml_call5
                    (apply_static$9,
                     inject_dynamic,
                     inject_static$0,
                     schedule_event,
                     m,
                     a);};
          },
        apply_dynamic$10 =
          function(inject_dynamic, inject_static, schedule_event, i, m){
           function inject_static$0(a){
            return caml_call1(inject_static, [1, a]);
           }
           return caml_call5
                   (apply_dynamic$9,
                    inject_dynamic,
                    inject_static$0,
                    schedule_event,
                    i,
                    m);
          },
        reset$12 =
          function(inject_dynamic, inject_static, schedule_event, m){
           function inject_static$0(a){
            return caml_call1(inject_static, [1, a]);
           }
           return caml_call4
                   (reset$11,
                    inject_dynamic,
                    inject_static$0,
                    schedule_event,
                    m);
          };
       return [0,
               [0,
                model$6,
                input$3,
                dynamic_action$6,
                static_action$6,
                apply_static$10,
                apply_dynamic$10,
                run$20,
                reset$12]];
      default:
       var
        lifecycle = param[1],
        run$21 =
          function(environment, path, _r_, _q_, _p_, param){
           var
            pattern_syntax_039 =
              caml_call2(Bonsai_Value[23], environment, lifecycle),
            _s_ =
              caml_call2
               (Ui_incr[78][4][6],
                pattern_syntax_039,
                function(param){return param ? 0 : 1;}),
            lifecycle$0 =
              caml_call2
               (Ui_incr[78][4][1],
                _s_,
                function(param){
                 if(0 === param){
                  var
                   lifecycle =
                     caml_call2
                      (Ui_incr[78][4][6],
                       pattern_syntax_039,
                       function(param){
                        if(! param)
                         throw caml_maybe_attach_backtrace
                                ([0, Assert_failure, _e_], 1);
                        var pattern_syntax_040 = param[1];
                        return pattern_syntax_040;
                       });
                  return caml_call2
                          (Ui_incr[78][4][6],
                           lifecycle,
                           function(lifecycle){
                            return caml_call2(Bonsai_Path[23][6], path, lifecycle);
                           });
                 }
                 if(1 === param) return do_nothing_lifecycle;
                 throw caml_maybe_attach_backtrace
                        ([0, Assert_failure, _f_], 1);
                }),
            _t_ = caml_call1(Ui_incr[11], 0);
           return caml_call3
                   (Bonsai_Snapshot[5], Bonsai_Input[2], [0, lifecycle$0], _t_);
          };
       return [0,
               [0,
                Bonsai_Meta[1][3],
                Bonsai_Meta[4][3],
                Bonsai_Meta[2][3],
                Bonsai_Meta[2][3],
                unusable_static_apply_action,
                unusable_dynamic_apply_action,
                run$21,
                Bonsai_Import[8]]];
    }
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_Eval);
   var Bonsai_Eval = [0, gather];
   runtime.caml_register_global(40, Bonsai_Eval, cst_Bonsai_Eval);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai
//# unitInfo: Requires: Bonsai__Annotate_incr, Bonsai__Eval, Bonsai__Instrumentation, Bonsai__Legacy_api, Bonsai__Map0, Bonsai__Pre_process, Bonsai__Proc, Bonsai__Proc_min, Bonsai__To_dot, Bonsai__Value, Bonsai__Var, Core, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_effect
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai = "Bonsai",
    cst_bonsai = "bonsai";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Ui_effect = global_data.Ui_effect,
    Bonsai_To_dot = global_data.Bonsai__To_dot,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bonsai_Proc = global_data.Bonsai__Proc,
    Bonsai_Eval = global_data.Bonsai__Eval,
    Bonsai_Pre_process = global_data.Bonsai__Pre_process,
    Bonsai_Instrumentation = global_data.Bonsai__Instrumentation,
    Bonsai_Annotate_incr = global_data.Bonsai__Annotate_incr,
    Bonsai_Legacy_api = global_data.Bonsai__Legacy_api,
    Bonsai_Map0 = global_data.Bonsai__Map0,
    Bonsai_Proc_min = global_data.Bonsai__Proc_min,
    Bonsai_Var = global_data.Bonsai__Var,
    Bonsai_Value = global_data.Bonsai__Value;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai);
   caml_call1(Expect_test_collector[6][1], "src/bonsai.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai, "bonsai.ml");
   var
    Private = [0],
    Stable = [0, Private],
    include = Bonsai_Proc[49],
    conceal_value = include[1],
    reveal_value = include[2],
    conceal_computation = include[3],
    reveal_computation = include[4],
    path = Bonsai_Proc[13],
    gather = Bonsai_Eval[1],
    pre_process = Bonsai_Pre_process[1],
    state_machine01 = Bonsai_Proc[5],
    thunk = Bonsai_Proc[38],
    assoc_on = Bonsai_Proc[10],
    Expert = [0, state_machine01, thunk, assoc_on],
    _a_ = Bonsai_Proc[48],
    Computation = Bonsai_Proc[47],
    Memo = Bonsai_Proc[46],
    Clock = Bonsai_Proc[45],
    Dynamic_scope = Bonsai_Proc[44],
    assoc_list = Bonsai_Proc[43],
    assoc_set = Bonsai_Proc[42],
    previous_value = Bonsai_Proc[41],
    most_recent_value_satisfying = Bonsai_Proc[40],
    most_recent_some = Bonsai_Proc[39],
    freeze = Bonsai_Proc[37],
    Incr = Bonsai_Proc[36],
    Effect_throttling = Bonsai_Proc[35],
    Edge = Bonsai_Proc[34],
    yoink = Bonsai_Proc[33],
    path_id = Bonsai_Proc[32],
    state_opt = Bonsai_Proc[31],
    toggle = Bonsai_Proc[30],
    toggle$0 = Bonsai_Proc[29],
    Toggle = Bonsai_Proc[28],
    state = Bonsai_Proc[27],
    actor0 = Bonsai_Proc[26],
    actor1 = Bonsai_Proc[25],
    of_module0 = Bonsai_Proc[24],
    of_module2 = Bonsai_Proc[22],
    of_module1 = Bonsai_Proc[21],
    scope_model = Bonsai_Proc[20],
    enum$0 = Bonsai_Proc[19],
    with_model_resetter = Bonsai_Proc[18],
    with_model_resetter$0 = Bonsai_Proc[17],
    const$0 = Bonsai_Proc[16],
    pure = Bonsai_Proc[15],
    Let_syntax = Bonsai_Proc[14],
    wrap = Bonsai_Proc[12],
    lazy = Bonsai_Proc[11],
    assoc = Bonsai_Proc[9],
    state_machine0 = Bonsai_Proc[8],
    state_machine1 = Bonsai_Proc[7],
    sub = Bonsai_Proc[2],
    read = Bonsai_Proc[1],
    For_open = [0];
   function to_dot(pre_process, c){
    var _z_ = caml_call1(reveal_computation, c);
    return caml_call2(Bonsai_To_dot[1], pre_process, _z_);
   }
   var
    instrument_computation = Bonsai_Instrumentation[1],
    enable_incremental_annotations = Bonsai_Annotate_incr[1],
    disable_incremental_annotation = Bonsai_Annotate_incr[2];
   function on_change(v, f){
    var
     _y_ =
       caml_call3
        (Let_syntax[2][4],
         0,
         v,
         function(v){caml_call1(f, v); return Ui_effect[1];});
    return caml_call1(Edge[4], _y_);
   }
   function on_change_print_s(v, sexp_of){
    return on_change
            (v,
             function(a){
              var _x_ = caml_call1(sexp_of, a);
              return caml_call2(Core[250], 0, _x_);
             });
   }
   var
    const$1 = Bonsai_Legacy_api[1],
    input = Bonsai_Legacy_api[2],
    pure$0 = Bonsai_Legacy_api[3],
    compose = Bonsai_Legacy_api[4],
    map = Bonsai_Legacy_api[5],
    map_input = Bonsai_Legacy_api[6],
    of_module = Bonsai_Legacy_api[7],
    both = Bonsai_Legacy_api[8],
    state_machine = Bonsai_Legacy_api[9],
    enum$1 = Bonsai_Legacy_api[10],
    if$0 = Bonsai_Legacy_api[11],
    Map = Bonsai_Legacy_api[12],
    arr = Bonsai_Legacy_api[13],
    symbol = Bonsai_Legacy_api[14],
    symbol$0 = Bonsai_Legacy_api[15],
    first = Bonsai_Legacy_api[16],
    second = Bonsai_Legacy_api[17],
    split = Bonsai_Legacy_api[18],
    extend_first = Bonsai_Legacy_api[19],
    extend_second = Bonsai_Legacy_api[20],
    fanout = Bonsai_Legacy_api[21],
    symbol$1 = Bonsai_Legacy_api[22],
    symbol$2 = Bonsai_Legacy_api[23],
    partial_compose_first = Bonsai_Legacy_api[24],
    pipe = Bonsai_Legacy_api[25],
    With_incr = Bonsai_Legacy_api[26],
    Infix = Bonsai_Legacy_api[27],
    Let_syntax$0 = Bonsai_Legacy_api[28],
    Arrow_deprecated =
      [0,
       const$1,
       input,
       pure$0,
       compose,
       map,
       map_input,
       of_module,
       both,
       state_machine,
       enum$1,
       if$0,
       Map,
       arr,
       symbol,
       symbol$0,
       first,
       second,
       split,
       extend_first,
       extend_second,
       fanout,
       symbol$1,
       symbol$2,
       partial_compose_first,
       pipe,
       With_incr,
       Infix,
       Let_syntax$0],
    _b_ = _a_[25],
    _c_ = _a_[20],
    _d_ = _a_[19],
    _e_ = _a_[18],
    _f_ = _a_[17],
    _g_ = _a_[16],
    _h_ = _a_[12],
    _i_ = _a_[11],
    _j_ = _a_[10],
    _k_ = _a_[9],
    _l_ = _a_[8],
    _m_ = _a_[7],
    _n_ = _a_[6],
    _o_ = _a_[5],
    _p_ = _a_[4],
    _q_ = _a_[3],
    _r_ = _a_[2];
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai);
   var
    _s_ = Let_syntax[2],
    _t_ = Effect_throttling[1],
    _u_ = Edge[7],
    _v_ = Computation[22],
    _w_ = _v_[6],
    Bonsai =
      [0,
       [0,
        _r_,
        _q_,
        _p_,
        _o_,
        _n_,
        _m_,
        _l_,
        _k_,
        _j_,
        _i_,
        _h_,
        Bonsai_Value[13],
        _g_,
        _f_,
        _e_,
        _d_,
        _c_,
        _b_],
       [0,
        Computation[1],
        Computation[2],
        Computation[3],
        Computation[4],
        Computation[5],
        Computation[6],
        Computation[7],
        Computation[8],
        Computation[11],
        Computation[17],
        Computation[20],
        Computation[9],
        Computation[21],
        Computation[18],
        Computation[19],
        [0,
         _v_[1],
         _v_[2],
         _v_[3],
         _v_[4],
         _v_[5],
         [0, _w_[1], _w_[2], _w_[3], _w_[5], _w_[6], _w_[7], _w_[8], _w_[9]]],
        Computation[12],
        Computation[13],
        Computation[14],
        Computation[15],
        Computation[16]],
       For_open,
       Bonsai_Var,
       read,
       const$0,
       path_id,
       pure,
       Bonsai_Proc_min[8],
       state,
       state_opt,
       toggle,
       Toggle,
       toggle$0,
       state_machine0,
       state_machine1,
       actor0,
       actor1,
       of_module0,
       of_module1,
       of_module2,
       freeze,
       lazy,
       scope_model,
       most_recent_some,
       most_recent_value_satisfying,
       previous_value,
       assoc,
       assoc_set,
       assoc_list,
       enum$0,
       wrap,
       with_model_resetter,
       with_model_resetter$0,
       yoink,
       sub,
       [0, Clock[1], Clock[2], Clock[3], Clock[4], Clock[15], Clock[5]],
       [0,
        Edge[6],
        Edge[5],
        Edge[2],
        Edge[1],
        Edge[4],
        Edge[3],
        [0, _u_[1], _u_[4], _u_[3]]],
       [0, Memo[2], Memo[3]],
       [0, [0, _t_[1], _t_[2], _t_[3], _t_[5], _t_[6]], Effect_throttling[2]],
       [0,
        Dynamic_scope[5],
        Dynamic_scope[6],
        Dynamic_scope[8],
        Dynamic_scope[9],
        Dynamic_scope[3],
        Dynamic_scope[7]],
       [0, Incr[1], Incr[4], Incr[6], Incr[5]],
       [0,
        Let_syntax[1],
        Let_syntax[3],
        Let_syntax[4],
        Let_syntax[5],
        [0,
         _s_[1],
         _s_[7],
         _s_[2],
         _s_[4],
         _s_[3],
         _s_[5],
         _s_[6],
         _s_[8],
         _s_[9],
         _s_[10],
         _s_[11],
         _s_[12]]],
       [0,
        on_change,
        on_change_print_s,
        instrument_computation,
        to_dot,
        enable_incremental_annotations,
        disable_incremental_annotation],
       [0,
        reveal_value,
        conceal_value,
        reveal_computation,
        conceal_computation,
        path,
        gather,
        pre_process],
       Expert,
       Bonsai_Map0,
       Arrow_deprecated,
       Stable];
   runtime.caml_register_global(24, Bonsai, cst_Bonsai);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
