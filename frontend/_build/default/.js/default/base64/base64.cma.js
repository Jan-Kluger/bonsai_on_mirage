// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Base64__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base64 = [0];
   runtime.caml_register_global(0, Base64, "Base64__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base64__Unsafe
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base64_Unsafe = [0];
   runtime.caml_register_global(0, Base64_Unsafe, "Base64__Unsafe");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base64
//# unitInfo: Requires: Stdlib, Stdlib__Array, Stdlib__Bytes, Stdlib__Char, Stdlib__Format, Stdlib__String, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Invalid_bounds = "Invalid bounds",
    cst_Malformed_input = "Malformed input",
    cst_Too_much_input = "Too much input",
    cst_Wrong_padding = "Wrong padding",
    caml_bytes_set16 = runtime.caml_bytes_set16,
    caml_check_bound = runtime.caml_check_bound,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get16 = runtime.caml_string_get16,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Sys = global_data.Stdlib__Sys,
    cst_Length_of_alphabet_must_be = "Length of alphabet must be 64",
    cst_Alphabet_can_not_contain_p =
      "Alphabet can not contain padding character";
   function symbol(x, y){
    if(y < 1) throw caml_maybe_attach_backtrace(Stdlib[13], 1);
    return 0 < x ? 1 + runtime.caml_div(x - 1 | 0, y) | 0 : 0;
   }
   function unsafe_set_uint8(t, off, v){
    runtime.caml_bytes_unsafe_set(t, off, caml_call1(Stdlib_Char[1], v));
   }
   function make_alphabet(alphabet){
    if(64 !== caml_ml_string_length(alphabet))
     caml_call1(Stdlib[1], cst_Length_of_alphabet_must_be);
    if(caml_call2(Stdlib_String[15], alphabet, 61))
     caml_call1(Stdlib[1], cst_Alphabet_can_not_contain_p);
    var
     emap =
       caml_call2
        (Stdlib_Array[1],
         caml_ml_string_length(alphabet),
         function(i){return runtime.caml_string_get(alphabet, i);}),
     dmap = runtime.caml_make_vect(256, -1);
    caml_call2
     (Stdlib_String[31],
      function(idx, chr){
       caml_check_bound(dmap, chr)[1 + chr] = idx;
       return 0;
      },
      alphabet);
    return [0, emap, dmap];
   }
   function length_alphabet(param){
    var emap = param[1];
    return emap.length - 1;
   }
   function alphabet(param){
    var emap = param[1];
    return caml_call2
            (Stdlib_String[2],
             emap.length - 1,
             function(i){
              var _y_ = caml_check_bound(emap, i)[1 + i];
              return caml_call1(Stdlib_Char[1], _y_);
             });
   }
   var
    default_alphabet =
      make_alphabet
       ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"),
    uri_safe_alphabet =
      make_alphabet
       ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"),
    _e_ = [0, [11, cst_Invalid_bounds, 0], cst_Invalid_bounds],
    _f_ = [0, [11, cst_Wrong_padding, 0], cst_Wrong_padding],
    _g_ = [0, [11, cst_Malformed_input, 0], cst_Malformed_input],
    _h_ = [0, [11, cst_Too_much_input, 0], cst_Too_much_input],
    _c_ = [0, "src/base64.ml", 157, 15],
    _b_ = [0, [11, cst_Invalid_bounds, 0], cst_Invalid_bounds],
    cst_Base64_Out_of_bounds = "Base64.Out_of_bounds",
    cst_Base64_Too_much_input = "Base64.Too_much_input",
    unsafe_set_be_uint16 =
      Stdlib_Sys[11]
       ? function(t, off, v){caml_bytes_set16(t, off, v);}
       : function
        (t, off, v){
         caml_bytes_set16(t, off, runtime.caml_bswap16(v));
        },
    Out_of_bounds = [248, cst_Base64_Out_of_bounds, caml_fresh_oo_id(0)],
    Too_much_input = [248, cst_Base64_Too_much_input, caml_fresh_oo_id(0)];
   function get_uint8(t, off){
    var
     _w_ = off < 0 ? 1 : 0,
     _x_ = _w_ || (caml_ml_string_length(t) <= off ? 1 : 0);
    if(_x_) throw caml_maybe_attach_backtrace(Out_of_bounds, 1);
    return caml_string_unsafe_get(t, off);
   }
   var padding = 61;
   function error_msgf(fmt){
    return caml_call2
            (Stdlib_Format[149],
             function(err){return [1, [0, 3854881, err]];},
             fmt);
   }
   function _a_(pad, param, opt, len, input){
    var emap = param[1], off = opt ? opt[1] : 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = caml_ml_string_length(input) - off | 0;
    if
     (0 <= len$1
      && 0 <= off && (caml_ml_string_length(input) - len$1 | 0) >= off){
     var
      n = symbol(len$1, 3) * 4 | 0,
      res = caml_create_bytes(n),
      emit =
        function(b1, b2, b3, i){
         var i$0 = (b1 << 4 | b2 >>> 4 | 0) & 63, i$1 = (b1 >>> 2 | 0) & 63;
         unsafe_set_be_uint16(res, i, emap[1 + i$1] << 8 | emap[1 + i$0]);
         var i$2 = b3 & 63, i$3 = (b2 << 2 | b3 >>> 6 | 0) & 63;
         return unsafe_set_be_uint16
                 (res, i + 2 | 0, emap[1 + i$3] << 8 | emap[1 + i$2]);
        };
     a:
     b:
     {
      c:
      {
       var j = 0, i = 0;
       for(;;){
        if(i === len$1) break b;
        if(i === (len$1 - 1 | 0)) break c;
        if(i === (len$1 - 2 | 0)) break;
        var
         off$3 = (off + i | 0) + 2 | 0,
         off$4 = (off + i | 0) + 1 | 0,
         off$5 = off + i | 0;
        emit
         (caml_string_unsafe_get(input, off$5),
          caml_string_unsafe_get(input, off$4),
          caml_string_unsafe_get(input, off$3),
          j);
        var i$0 = i + 3 | 0, j$0 = j + 4 | 0;
        j = j$0;
        i = i$0;
       }
       var off$1 = (off + i | 0) + 1 | 0, off$2 = off + i | 0;
       emit
        (caml_string_unsafe_get(input, off$2),
         caml_string_unsafe_get(input, off$1),
         0,
         j);
       break a;
      }
      var off$0 = off + i | 0;
      emit(caml_string_unsafe_get(input, off$0), 0, 0, j);
      break a;
     }
     var pad_to_write = (3 - (len$1 % 3 | 0) | 0) % 3 | 0;
     if(! pad)
      return [0,
              [0, caml_call1(Stdlib_Bytes[44], res), 0, n - pad_to_write | 0]];
     var i$1 = pad_to_write;
     for(;;){
      if(0 === i$1) return [0, [0, caml_call1(Stdlib_Bytes[44], res), 0, n]];
      unsafe_set_uint8(res, n - i$1 | 0, padding);
      var i$2 = i$1 - 1 | 0;
      i$1 = i$2;
     }
    }
    return error_msgf(_b_);
   }
   function encode(_v_, opt, off, len, input){
    var
     pad = _v_ ? _v_[1] : 1,
     alphabet = opt ? opt[1] : default_alphabet,
     err = _a_(pad, alphabet, off, len, input);
    if(0 !== err[0]) return err;
    var match = err[1], len$0 = match[3], off$0 = match[2], res = match[1];
    return [0, caml_call3(Stdlib_String[16], res, off$0, len$0)];
   }
   function encode_string(pad, alphabet, input){
    var match = encode(pad, alphabet, 0, 0, input);
    if(0 !== match[0])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    var res = match[1];
    return res;
   }
   function encode_sub(_u_, opt, off, len, input){
    var pad = _u_ ? _u_[1] : 1, alphabet = opt ? opt[1] : default_alphabet;
    return _a_(pad, alphabet, off, len, input);
   }
   function encode_exn(pad, alphabet, off, len, input){
    var match = encode(pad, alphabet, off, len, input);
    if(0 === match[0]){var v = match[1]; return v;}
    var err = match[1][2];
    return caml_call1(Stdlib[1], err);
   }
   function _d_(_i_, param, opt, len, input){
    var
     invalid_pad_overflow = _i_ ? _i_[1] : 1,
     dmap = param[2],
     off = opt ? opt[1] : 0;
    if(len)
     var len$0 = len[1], len$1 = len$0;
    else
     var len$1 = caml_ml_string_length(input) - off | 0;
    if
     (0 <= len$1
      && 0 <= off && (caml_ml_string_length(input) - len$1 | 0) >= off){
     var
      n = symbol(len$1, 4) * 4 | 0,
      n$0 = symbol(n, 4) * 3 | 0,
      res = caml_create_bytes(n$0),
      get_uint8_or_padding =
        invalid_pad_overflow
         ? function
          (t, i){
           if(len$1 <= i) throw caml_maybe_attach_backtrace(Out_of_bounds, 1);
           return get_uint8(t, off + i | 0);
          }
         : function
          (t, i){
           try{
            var _s_ = i < len$1 ? get_uint8(t, off + i | 0) : padding;
            return _s_;
           }
           catch(_t_){
            var _r_ = caml_wrap_exception(_t_);
            if(_r_ === Out_of_bounds) return padding;
            throw caml_maybe_attach_backtrace(_r_, 0);
           }
          },
      dmap$0 =
        function(i){
         var x = dmap[1 + i];
         if(x === -1) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
         return x;
        },
      only_padding =
        function(pad, idx){
         var pad$0 = [0, pad + 3 | 0], idx$0 = [0, idx];
         for(;;){
          if((idx$0[1] + 4 | 0) >= len$1) break;
          var
           _p_ =
             15677 !== caml_string_get16(input, off + idx$0[1] | 0) ? 1 : 0,
           _q_ =
             _p_
             ||
              (15677
                !== caml_string_get16(input, (off + idx$0[1] | 0) + 2 | 0)
                ? 1
                : 0);
          if(_q_) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          idx$0[1] = idx$0[1] + 4 | 0;
          pad$0[1] = pad$0[1] + 3 | 0;
         }
         for(;;){
          if(idx$0[1] >= len$1) return pad$0[1];
          var off$0 = off + idx$0[1] | 0;
          if(caml_string_unsafe_get(input, off$0) !== 61)
           throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          idx$0[1]++;
         }
        };
     try{
      a:
      {
       b:
       {
        var off$1 = 0, i = 0;
        for(;;){
         if(i === n){var pad$4 = 0; break a;}
         var x$0 = get_uint8_or_padding(input, i + 3 | 0);
         c:
         try{var pad$3 = 0, _m_ = dmap$0(x$0), pad = pad$3, d = _m_;}
         catch(exn$0){
          var exn = caml_wrap_exception(exn$0);
          if(exn === Stdlib[8] && x$0 === 61){var pad = 1, d = 0; break c;}
          throw caml_maybe_attach_backtrace(exn, 0);
         }
         var x$1 = get_uint8_or_padding(input, i + 2 | 0);
         c:
         try{var _l_ = dmap$0(x$1), pad$0 = pad, c = _l_;}
         catch(exn){
          var exn$0 = caml_wrap_exception(exn);
          if(exn$0 === Stdlib[8] && x$1 === 61 && 1 === pad){var pad$0 = 2, c = 0; break c;}
          throw caml_maybe_attach_backtrace(exn$0, 0);
         }
         var x$2 = get_uint8_or_padding(input, i + 1 | 0);
         c:
         try{var _k_ = dmap$0(x$2), pad$1 = pad$0, b = _k_;}
         catch(exn){
          var exn$1 = caml_wrap_exception(exn);
          if(exn$1 === Stdlib[8] && x$2 === 61 && 2 === pad$0){var pad$1 = 3, b = 0; break c;}
          throw caml_maybe_attach_backtrace(exn$1, 0);
         }
         var x$3 = get_uint8_or_padding(input, i);
         c:
         try{var _j_ = dmap$0(x$3), pad$2 = pad$1, a = _j_;}
         catch(exn){
          var exn$2 = caml_wrap_exception(exn);
          if(exn$2 === Stdlib[8] && x$3 === 61 && 3 === pad$1){var pad$2 = 4, a = 0; break c;}
          throw caml_maybe_attach_backtrace(exn$2, 0);
         }
         var x = a << 18 | b << 12 | c << 6 | d, v = x >>> 8 | 0;
         c:
         if(0 <= off$1 && caml_ml_bytes_length(res) >= (off$1 + 1 | 0)){
          if(0 <= off$1 && caml_ml_bytes_length(res) >= (off$1 + 2 | 0)){unsafe_set_be_uint16(res, off$1, v); break c;}
          unsafe_set_uint8(res, off$1, v >>> 8 | 0);
          break c;
         }
         var v$0 = x & 255, off$0 = off$1 + 2 | 0;
         c:
         if(0 <= off$0 && caml_ml_bytes_length(res) > off$0){unsafe_set_uint8(res, off$0, v$0); break c;}
         if((i + 4 | 0) === n) break b;
         if(0 !== pad$2) break;
         var i$0 = i + 4 | 0, j = off$1 + 3 | 0;
         off$1 = j;
         i = i$0;
        }
        if(4 === pad$2){var pad$4 = only_padding(3, i + 4 | 0); break a;}
        if(1 === invalid_pad_overflow)
         throw caml_maybe_attach_backtrace(Too_much_input, 1);
        var pad$4 = only_padding(pad$2, i + 4 | 0);
        break a;
       }
       var pad$4 = 0 === pad$2 ? 0 : 4 === pad$2 ? 3 : pad$2;
      }
     }
     catch(_o_){
      var _n_ = caml_wrap_exception(_o_);
      if(_n_ === Out_of_bounds) return error_msgf(_f_);
      if(_n_ === Stdlib[8]) return error_msgf(_g_);
      if(_n_ === Too_much_input) return error_msgf(_h_);
      throw caml_maybe_attach_backtrace(_n_, 0);
     }
     return 0 === pad$4
             ? [0, [0, caml_call1(Stdlib_Bytes[44], res), 0, n$0]]
             : [0, [0, caml_call1(Stdlib_Bytes[44], res), 0, n$0 - pad$4 | 0]];
    }
    return error_msgf(_e_);
   }
   function decode(pad, opt, off, len, input){
    var
     alphabet = opt ? opt[1] : default_alphabet,
     err = _d_(pad, alphabet, off, len, input);
    if(0 !== err[0]) return err;
    var match = err[1], len$0 = match[3], off$0 = match[2], res = match[1];
    return [0, caml_call3(Stdlib_String[16], res, off$0, len$0)];
   }
   function decode_sub(pad, opt, off, len, input){
    var alphabet = opt ? opt[1] : default_alphabet;
    return _d_(pad, alphabet, off, len, input);
   }
   function decode_exn(pad, alphabet, off, len, input){
    var match = decode(pad, alphabet, off, len, input);
    if(0 === match[0]){var res = match[1]; return res;}
    var err = match[1][2];
    return caml_call1(Stdlib[1], err);
   }
   var
    Base64 =
      [0,
       default_alphabet,
       uri_safe_alphabet,
       make_alphabet,
       length_alphabet,
       alphabet,
       decode_exn,
       decode_sub,
       decode,
       encode,
       encode_string,
       encode_sub,
       encode_exn];
   runtime.caml_register_global(20, Base64, "Base64");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
