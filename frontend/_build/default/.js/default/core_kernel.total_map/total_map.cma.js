// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Total_map__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Total_map = [0];
   runtime.caml_register_global(0, Total_map, "Total_map__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Total_map__Import
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Total_map_Import = "Total_map__Import",
    cst_total_map = "total_map";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Total_map_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_total_map);
   caml_call1(Expect_test_collector[6][1], "total_map/src/import.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_total_map, "import.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_total_map);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Total_map_Import);
   var Total_map_Import = [0];
   runtime.caml_register_global(11, Total_map_Import, cst_Total_map_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Total_map__Enumeration_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Total_map_Enumeration_intf = "Total_map__Enumeration_intf",
    cst_total_map = "total_map";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Total_map_Enumeration_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_total_map);
   caml_call1
    (Expect_test_collector[6][1], "total_map/src/enumeration_intf.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_total_map, "enumeration_intf.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_total_map);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Total_map_Enumeration_intf);
   var Total_map_Enumeration_intf = [0];
   runtime.caml_register_global
    (11, Total_map_Enumeration_intf, cst_Total_map_Enumeration_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Total_map__Enumeration
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Total_map_Enumeration = "Total_map__Enumeration",
    cst_total_map = "total_map";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Total_map_Enumeration);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_total_map);
   caml_call1(Expect_test_collector[6][1], "total_map/src/enumeration.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_total_map, "enumeration.ml");
   function Make(T){var enumeration = [0, T[1]]; return [0, enumeration];}
   function make(all){var enumeration = [0, all]; return [0, enumeration];}
   caml_call1(Ppx_inline_test_lib[6], cst_total_map);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Total_map_Enumeration);
   var Total_map_Enumeration = [0, Make, make];
   runtime.caml_register_global
    (11, Total_map_Enumeration, cst_Total_map_Enumeration);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Total_map__Total_map_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Total_map_Total_map_intf = "Total_map__Total_map_intf",
    cst_total_map = "total_map";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Total_map_Total_map_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_total_map);
   caml_call1(Expect_test_collector[6][1], "total_map/src/total_map_intf.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_total_map, "total_map_intf.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_total_map);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Total_map_Total_map_intf);
   var Total_map_Total_map_intf = [0];
   runtime.caml_register_global
    (11, Total_map_Total_map_intf, cst_Total_map_Total_map_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Total_map
//# unitInfo: Requires: Base__Applicative, Bin_prot__Shape, Bin_prot__Utils, Bin_shape, Core, Core__Comparable, Core__List, Core__Map, Core__Set, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Total_map__Enumeration, Total_map__Total_map_intf, Validate
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Total_map = "Total_map",
    cst_a$3 = "a",
    cst_t$2 = "t",
    cst_total_map = "total_map",
    cst_total_map_src_total_map_ml$3 = "total_map/src/total_map.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Core_Comparable = global_data.Core__Comparable,
    Total_map_Enumeration = global_data.Total_map__Enumeration,
    Core_Map = global_data.Core__Map,
    Core_Set = global_data.Core__Set,
    Validate = global_data.Validate,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_prot_Utils = global_data.Bin_prot__Utils,
    Core_List = global_data.Core__List,
    Base_Applicative = global_data.Base__Applicative,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Total_map);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_total_map);
   caml_call1(Expect_test_collector[6][1], cst_total_map_src_total_map_ml$3);
   caml_call2(Ppx_inline_test_lib[5], cst_total_map, "total_map.ml");
   var
    cst_a = cst_a$3,
    cst_total_map_src_total_map_ml = "total_map/src/total_map.ml:24:25",
    cst_a$0 = cst_a$3,
    cst_t = cst_t$2,
    cst_total_map_src_total_map_ml$0 = "total_map/src/total_map.ml:24:6",
    cst_t$0 = cst_t$2,
    cst_Key_was_not_provided_in_th =
      "Key was not provided in the enumeration given to [Total_map.Make]",
    _a_ = [0, cst_total_map_src_total_map_ml$3, 56, 1636, 1646];
   function Make_with_witnesses(Key){
    var
     t_of_sexp = Key[1],
     sexp_of_t = Key[2],
     bin_size_t = Key[3],
     bin_write_t = Key[4],
     bin_read_t = Key[5],
     bin_read_t$0 = Key[6],
     bin_shape_t = Key[7],
     bin_writer_t = Key[8],
     bin_reader_t = Key[9],
     bin_t = Key[10],
     compare = Key[11],
     all = Key[12],
     comparator = Key[13],
     enumeration = Key[14],
     include =
       caml_call1
        (Core_Comparable[25][1][1],
         [0,
          Key[3],
          Key[4],
          Key[5],
          Key[6],
          Key[7],
          Key[8],
          Key[9],
          Key[10],
          Key[11],
          Key[1],
          Key[2],
          Key[13]]),
     Map = include[1],
     Key$0 =
       [0,
        t_of_sexp,
        sexp_of_t,
        bin_size_t,
        bin_write_t,
        bin_read_t,
        bin_read_t$0,
        bin_shape_t,
        bin_writer_t,
        bin_reader_t,
        bin_t,
        compare,
        all,
        comparator,
        enumeration,
        Map],
     _W_ = caml_call1(Bin_shape[3][1], cst_a),
     _X_ = caml_call1(Bin_shape[4][1], cst_total_map_src_total_map_ml),
     _Y_ = caml_call2(Bin_prot_Shape[11], _X_, _W_),
     _Z_ = caml_call1(Key$0[15][1], _Y_),
     ___ = [0, caml_call1(Bin_shape[3][1], cst_a$0), 0],
     _$_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), ___, _Z_], 0],
     _aa_ = caml_call1(Bin_shape[4][1], cst_total_map_src_total_map_ml$0),
     group = caml_call2(Bin_prot_Shape[2], _aa_, _$_);
    function bin_shape_t$0(a){
     var _ag_ = caml_call1(Bin_shape[2][1], cst_t$0);
     return caml_call1(caml_call2(Bin_prot_Shape[10], group, _ag_), [0, a, 0]);
    }
    function bin_size_t$0(size_of_a, v){
     return caml_call2(Key$0[15][2], size_of_a, v);
    }
    function bin_write_t$0(write_a, buf, pos, v){
     return caml_call4(Key$0[15][3], write_a, buf, pos, v);
    }
    function bin_writer_t$0(bin_writer_a){
     return [0,
             function(v){return bin_size_t$0(bin_writer_a[1], v);},
             function(v){
              var _ad_ = bin_writer_a[2];
              return function(_ae_, _af_){
               return bin_write_t$0(_ad_, v, _ae_, _af_);};
             }];
    }
    function bin_read_t$1(of_a, buf, pos_ref, vint){
     return caml_call3(caml_call1(Key$0[15][5], of_a), buf, pos_ref, vint);
    }
    function bin_read_t$2(of_a, buf, pos_ref){
     return caml_call2(caml_call1(Key$0[15][4], of_a), buf, pos_ref);
    }
    function bin_reader_t$0(bin_reader_a){
     return [0,
             function(buf, pos_ref){
              return bin_read_t$2(bin_reader_a[1], buf, pos_ref);
             },
             function(buf, pos_ref, vtag){
              return bin_read_t$1(bin_reader_a[1], buf, pos_ref, vtag);
             }];
    }
    function bin_t$0(bin_a){
     var _ab_ = bin_reader_t$0(bin_a[3]), _ac_ = bin_writer_t$0(bin_a[2]);
     return [0, bin_shape_t$0(bin_a[1]), _ac_, _ab_];
    }
    var t_of_sexp$0 = Key$0[15][10], sexp_of_t$0 = Key$0[15][11];
    function compare$0(cmp_a, a_006, b_007){
     return caml_call3
             (Key$0[15][9],
              function(a_008, b_009){return caml_call2(cmp_a, a_008, b_009);},
              a_006,
              b_007);
    }
    return [0,
            Key$0,
            bin_shape_t$0,
            bin_size_t$0,
            bin_write_t$0,
            bin_writer_t$0,
            bin_read_t$1,
            bin_read_t$2,
            bin_reader_t$0,
            bin_t$0,
            t_of_sexp$0,
            sexp_of_t$0,
            compare$0];
   }
   function to_map(t){return t;}
   function key_not_in_enumeration(t, key){
    var _V_ = caml_call1(Core_Map[2], t)[2];
    return caml_call5
            (Core[241], 0, _a_, cst_Key_was_not_provided_in_th, key, _V_);
   }
   function change(t, k, f){
    return caml_call3
            (Core_Map[41],
             t,
             k,
             function(param){
              if(! param) return key_not_in_enumeration(t, k);
              var x = param[1];
              return caml_call1(f, x);
             });
   }
   function find(t, k){
    try{var _T_ = caml_call2(Core_Map[43], t, k); return _T_;}
    catch(_U_){return key_not_in_enumeration(t, k);}
   }
   function pair(t1, t2, key, param){
    var _S_ = param[1];
    if(737457313 !== _S_)
     return 847852583 <= _S_
             ? key_not_in_enumeration(t2, key)
             : key_not_in_enumeration(t1, key);
    var match = param[2], v2 = match[2], v1 = match[1];
    return [0, v1, v2];
   }
   function iter2(t1, t2, f){
    return caml_call3
            (Core_Map[54],
             t1,
             t2,
             function(key, data){
              var
               match = pair(t1, t2, key, data),
               v2 = match[2],
               v1 = match[1];
              return caml_call3(f, key, v1, v2);
             });
   }
   function fold2(t1, t2, init, f){
    return caml_call4
            (Core_Map[62],
             t1,
             t2,
             init,
             function(key, data, acc){
              var
               match = pair(t1, t2, key, data),
               v2 = match[2],
               v1 = match[1];
              return caml_call4(f, key, v1, v2, acc);
             });
   }
   function map2(t1, t2, f){
    return caml_call3
            (Core_Map[81],
             t1,
             t2,
             function(key, v){
              var match = pair(t1, t2, key, v), v2 = match[2], v1 = match[1];
              return [0, caml_call2(f, v1, v2)];
             });
   }
   function set(t, key, data){return caml_call3(Core_Map[36], t, key, data);}
   function Sequence3(A){
    function sequence(t){
     var
      _O_ = caml_call1(Core_Map[2], t),
      _P_ = caml_call1(Core_Map[118][1], _O_),
      _Q_ = caml_call1(A[1], _P_),
      _R_ = caml_call2(Core_Map[78], 0, t);
     return caml_call3
             (Core_List[20],
              _R_,
              _Q_,
              function(acc, param){
               var data = param[2], key = param[1];
               return caml_call3
                       (A[9],
                        acc,
                        data,
                        function(acc, data){
                         return caml_call3(Core_Map[36], acc, key, data);
                        });
              });
    }
    return [0, sequence];
   }
   function Sequence2(_N_){
    return Sequence3(caml_call1(Base_Applicative[5], _N_));
   }
   function Sequence(_M_){
    return Sequence2(caml_call1(Base_Applicative[2], _M_));
   }
   var
    combine_errors = Core_Map[72],
    data = Core_Map[77],
    for_all = Core_Map[91],
    for_alli = Core_Map[92],
    iter = Core_Map[48],
    iter_keys = Core_Map[47],
    iteri = Core_Map[49],
    map = Core_Map[55],
    mapi = Core_Map[56],
    fold = Core_Map[59],
    fold_right = Core_Map[61],
    to_alist = Core_Map[78],
    cst_a$1 = cst_a$3,
    cst_total_map_src_total_map_ml$1 = "total_map/src/total_map.ml:165:14",
    cst_a$2 = cst_a$3,
    cst_t$1 = cst_t$2,
    cst_total_map_src_total_map_ml$2 = "total_map/src/total_map.ml:165:2",
    cst_map_from_serialization_has =
      "map from serialization has keys not provided in the enumeration",
    cst_map_from_serialization_doe =
      "map from serialization doesn't have keys it should have";
   function Make_plain_with_witnesses(Key){
    var
     sexp_of_t = Key[1],
     all = Key[3],
     enumeration = Key[5],
     include = caml_call1(Core_Comparable[13], [0, Key[1], Key[4]]),
     compare = include[8],
     comparator = include[16],
     Map = include[21],
     Key$0 =
       [0,
        sexp_of_t,
        all,
        enumeration,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        compare,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        comparator,
        ,
        ,
        ,
        ,
        Map],
     sexp_of_t$0 = Key$0[24][4];
    function compare$0(cmp_a, a_012, b_013){
     return caml_call3
             (Key$0[24][2],
              function(a_014, b_015){return caml_call2(cmp_a, a_014, b_015);},
              a_012,
              b_013);
    }
    function equal(cmp_a, a_016, b_017){
     return caml_call3
             (Key$0[24][3],
              function(a_018, b_019){return caml_call2(cmp_a, a_018, b_019);},
              a_016,
              b_017);
    }
    function create(f){
     return caml_call3
             (Core_List[20],
              Key$0[2],
              Key$0[24][5],
              function(t, key){
               var _L_ = caml_call1(f, key);
               return caml_call3(Core_Map[36], t, key, _L_);
              });
    }
    function create_const(x){return create(function(param){return x;});}
    function apply(t1, t2){
     return map2(t1, t2, function(f, x){return caml_call1(f, x);});
    }
    var
     map$0 = [0, -198771759, map],
     include$0 =
       caml_call1(Base_Applicative[6], [0, create_const, apply, map$0]),
     return$0 = include$0[1],
     map$1 = include$0[2],
     both = include$0[3],
     symbol = include$0[4],
     symbol$0 = include$0[5],
     symbol$1 = include$0[6],
     symbol_map = include$0[7],
     apply$0 = include$0[8],
     map2$0 = include$0[9],
     map3 = include$0[10],
     all$0 = include$0[11],
     all_unit = include$0[12],
     Applicative_infix = include$0[13];
    return [0,
            Key$0,
            sexp_of_t$0,
            compare$0,
            equal,
            create,
            create_const,
            return$0,
            map$1,
            both,
            symbol,
            symbol$0,
            symbol$1,
            symbol_map,
            apply$0,
            map2$0,
            map3,
            all$0,
            all_unit,
            Applicative_infix];
   }
   function Make_with_witnesses$0(Key){
    var
     t_of_sexp = Key[1],
     sexp_of_t = Key[2],
     bin_size_t = Key[3],
     bin_write_t = Key[4],
     bin_read_t = Key[5],
     bin_read_t$0 = Key[6],
     bin_shape_t = Key[7],
     bin_writer_t = Key[8],
     bin_reader_t = Key[9],
     bin_t = Key[10],
     all = Key[12],
     enumeration = Key[14],
     include =
       caml_call1
        (Core_Comparable[16],
         [0,
          Key[3],
          Key[4],
          Key[5],
          Key[6],
          Key[7],
          Key[8],
          Key[9],
          Key[10],
          Key[1],
          Key[2],
          Key[13]]),
     compare = include[8],
     comparator = include[20],
     Map = include[21],
     Set = include[22],
     Key$0 =
       [0,
        t_of_sexp,
        sexp_of_t,
        bin_size_t,
        bin_write_t,
        bin_read_t,
        bin_read_t$0,
        bin_shape_t,
        bin_writer_t,
        bin_reader_t,
        bin_t,
        all,
        enumeration,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        compare,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        comparator,
        Map,
        Set],
     t_of_sexp$0 = Key$0[33][41],
     _x_ = caml_call1(Bin_shape[3][1], cst_a$1),
     _y_ = caml_call1(Bin_shape[4][1], cst_total_map_src_total_map_ml$1),
     _z_ = caml_call2(Bin_prot_Shape[11], _y_, _x_),
     _A_ = caml_call1(Key$0[33][43], _z_),
     _B_ = [0, caml_call1(Bin_shape[3][1], cst_a$2), 0],
     _C_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), _B_, _A_], 0],
     _D_ = caml_call1(Bin_shape[4][1], cst_total_map_src_total_map_ml$2);
    caml_call2(Bin_prot_Shape[2], _D_, _C_);
    var
     _E_ =
       Make_plain_with_witnesses
        ([0, Key$0[2], Key$0[20], Key$0[11], Key$0[32], Key$0[12]]),
     Applicative_infix = _E_[19],
     all_unit = _E_[18],
     all$0 = _E_[17],
     map3 = _E_[16],
     map2 = _E_[15],
     apply = _E_[14],
     symbol_map = _E_[13],
     symbol = _E_[12],
     symbol$0 = _E_[11],
     symbol$1 = _E_[10],
     both = _E_[9],
     map = _E_[8],
     return$0 = _E_[7],
     create_const = _E_[6],
     create = _E_[5],
     equal = _E_[4],
     compare$0 = _E_[3],
     sexp_of_t$0 = _E_[2],
     all_set = caml_call1(Key$0[34][7], Key$0[11]);
    function validate_map_from_serializatio(map){
     var
      keys = caml_call1(Core_Map[114], map),
      keys_minus_all = caml_call2(Core_Set[17], keys, all_set),
      all_minus_keys = caml_call2(Core_Set[17], all_set, keys),
      _G_ = 0,
      _H_ =
        caml_call1(Core_Set[10], all_minus_keys)
         ? Validate[1]
         : caml_call3
           (Validate[3],
            cst_map_from_serialization_doe,
            all_minus_keys,
            Key$0[34][27]),
      _I_ = [0, _H_, _G_],
      _J_ =
        caml_call1(Core_Set[10], keys_minus_all)
         ? Validate[1]
         : caml_call3
           (Validate[3],
            cst_map_from_serialization_has,
            keys_minus_all,
            Key$0[34][27]),
      _K_ = caml_call1(Validate[7], [0, _J_, _I_]);
     return caml_call1(Validate[17], _K_);
    }
    function t_of_sexp$1(a_of_sexp, sexp){
     var t = caml_call2(t_of_sexp$0, a_of_sexp, sexp);
     validate_map_from_serializatio(t);
     return t;
    }
    function to_binable(x){return x;}
    function of_binable(x){validate_map_from_serializatio(x); return x;}
    var
     _F_ = Key$0[33],
     include$0 =
       caml_call1
        (Bin_prot_Utils[12],
         [0,
          [0, _F_[43], _F_[44], _F_[45], _F_[46], _F_[47]],
          to_binable,
          of_binable]),
     bin_shape_t$0 = include$0[1],
     bin_size_t$0 = include$0[2],
     bin_write_t$0 = include$0[3],
     bin_read_t$1 = include$0[4],
     bin_read_t$2 = include$0[5],
     bin_writer_t$0 = include$0[6],
     bin_reader_t$0 = include$0[7],
     bin_t$0 = include$0[8];
    return [0,
            Key$0,
            sexp_of_t$0,
            compare$0,
            equal,
            create,
            create_const,
            return$0,
            map,
            both,
            symbol$1,
            symbol$0,
            symbol,
            symbol_map,
            apply,
            map2,
            map3,
            all$0,
            all_unit,
            Applicative_infix,
            ,
            ,
            t_of_sexp$1,
            bin_shape_t$0,
            bin_size_t$0,
            bin_write_t$0,
            bin_read_t$1,
            bin_read_t$2,
            bin_writer_t$0,
            bin_reader_t$0,
            bin_t$0];
   }
   function Make_plain(Key){
    var
     sexp_of_t = Key[1],
     all = Key[3],
     _w_ = caml_call1(Core_Comparable[11], [0, Key[2], Key[1]]),
     compare = _w_[8],
     comparator = _w_[16],
     include = caml_call1(Total_map_Enumeration[1], [0, Key[3]]),
     enumeration = include[1];
    return Make_plain_with_witnesses
            ([0, sexp_of_t, compare, all, comparator, enumeration]);
   }
   function Make(Key){
    var
     t_of_sexp = Key[1],
     sexp_of_t = Key[2],
     bin_size_t = Key[3],
     bin_write_t = Key[4],
     bin_read_t = Key[5],
     bin_read_t$0 = Key[6],
     bin_shape_t = Key[7],
     bin_writer_t = Key[8],
     bin_reader_t = Key[9],
     bin_t = Key[10],
     all = Key[12],
     _v_ =
       caml_call1
        (Core_Comparable[15],
         [0,
          Key[3],
          Key[4],
          Key[5],
          Key[6],
          Key[7],
          Key[8],
          Key[9],
          Key[10],
          Key[11],
          Key[1],
          Key[2]]),
     compare = _v_[8],
     comparator = _v_[20],
     include = caml_call1(Total_map_Enumeration[1], [0, Key[12]]),
     enumeration = include[1];
    return Make_with_witnesses$0
            ([0,
              t_of_sexp,
              sexp_of_t,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              compare,
              all,
              comparator,
              enumeration]);
   }
   caml_call1(Ppx_inline_test_lib[6], cst_total_map);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Total_map);
   var
    Total_map =
      [0,
       to_map,
       map,
       mapi,
       map2,
       iter_keys,
       iter,
       iteri,
       iter2,
       fold,
       fold_right,
       fold2,
       set,
       to_alist,
       find,
       change,
       combine_errors,
       data,
       for_all,
       for_alli,
       Sequence,
       Sequence2,
       Sequence3,
       function(_s_){
        var _t_ = Make_plain(_s_), _u_ = _t_[1];
        return [0,
                [0, _u_[1], _u_[11], _u_[2]],
                _t_[2],
                _t_[3],
                _t_[4],
                _t_[7],
                _t_[8],
                _t_[9],
                _t_[10],
                _t_[11],
                _t_[12],
                _t_[13],
                _t_[14],
                _t_[15],
                _t_[16],
                _t_[17],
                _t_[18],
                _t_[19],
                _t_[5],
                _t_[6]];
       },
       function(Key){
        var Total_map = Make_plain(Key), _r_ = Total_map[1];
        return [0,
                [0,
                 [0, _r_[1], _r_[11], _r_[2]],
                 Total_map[2],
                 Total_map[3],
                 Total_map[4],
                 Total_map[7],
                 Total_map[8],
                 Total_map[9],
                 Total_map[10],
                 Total_map[11],
                 Total_map[12],
                 Total_map[13],
                 Total_map[14],
                 Total_map[15],
                 Total_map[16],
                 Total_map[17],
                 Total_map[18],
                 Total_map[19],
                 Total_map[5],
                 Total_map[6]]];
       },
       function(_o_){
        var _p_ = Make_plain_with_witnesses(_o_), _q_ = _p_[1];
        return [0,
                [0, _q_[1], _q_[11], _q_[2], _q_[19], _q_[3]],
                _p_[2],
                _p_[3],
                _p_[4],
                _p_[7],
                _p_[8],
                _p_[9],
                _p_[10],
                _p_[11],
                _p_[12],
                _p_[13],
                _p_[14],
                _p_[15],
                _p_[16],
                _p_[17],
                _p_[18],
                _p_[19],
                _p_[5],
                _p_[6]];
       },
       function(Key){
        var Total_map = Make_plain_with_witnesses(Key), _n_ = Total_map[1];
        return [0,
                [0,
                 [0, _n_[1], _n_[11], _n_[2], _n_[19], _n_[3]],
                 Total_map[2],
                 Total_map[3],
                 Total_map[4],
                 Total_map[7],
                 Total_map[8],
                 Total_map[9],
                 Total_map[10],
                 Total_map[11],
                 Total_map[12],
                 Total_map[13],
                 Total_map[14],
                 Total_map[15],
                 Total_map[16],
                 Total_map[17],
                 Total_map[18],
                 Total_map[19],
                 Total_map[5],
                 Total_map[6]]];
       },
       function(_k_){
        var _l_ = Make(_k_), _m_ = _l_[1];
        return [0,
                [0,
                 _m_[1],
                 _m_[2],
                 _m_[3],
                 _m_[4],
                 _m_[5],
                 _m_[6],
                 _m_[7],
                 _m_[8],
                 _m_[9],
                 _m_[10],
                 _m_[20],
                 _m_[11]],
                _l_[3],
                _l_[4],
                _l_[7],
                _l_[8],
                _l_[9],
                _l_[10],
                _l_[11],
                _l_[12],
                _l_[13],
                _l_[14],
                _l_[15],
                _l_[16],
                _l_[17],
                _l_[18],
                _l_[19],
                _l_[5],
                _l_[6],
                _l_[22],
                _l_[2],
                _l_[23],
                _l_[24],
                _l_[25],
                _l_[26],
                _l_[27],
                _l_[28],
                _l_[29],
                _l_[30]];
       },
       function(Key){
        var Total_map = Make(Key), _j_ = Total_map[1];
        return [0,
                [0,
                 [0,
                  _j_[1],
                  _j_[2],
                  _j_[3],
                  _j_[4],
                  _j_[5],
                  _j_[6],
                  _j_[7],
                  _j_[8],
                  _j_[9],
                  _j_[10],
                  _j_[20],
                  _j_[11]],
                 Total_map[3],
                 Total_map[4],
                 Total_map[7],
                 Total_map[8],
                 Total_map[9],
                 Total_map[10],
                 Total_map[11],
                 Total_map[12],
                 Total_map[13],
                 Total_map[14],
                 Total_map[15],
                 Total_map[16],
                 Total_map[17],
                 Total_map[18],
                 Total_map[19],
                 Total_map[5],
                 Total_map[6],
                 Total_map[22],
                 Total_map[2],
                 Total_map[23],
                 Total_map[24],
                 Total_map[25],
                 Total_map[26],
                 Total_map[27],
                 Total_map[28],
                 Total_map[29],
                 Total_map[30]]];
       },
       function(_g_){
        var _h_ = Make_with_witnesses$0(_g_), _i_ = _h_[1];
        return [0,
                [0,
                 _i_[1],
                 _i_[2],
                 _i_[3],
                 _i_[4],
                 _i_[5],
                 _i_[6],
                 _i_[7],
                 _i_[8],
                 _i_[9],
                 _i_[10],
                 _i_[20],
                 _i_[11],
                 _i_[32],
                 _i_[12]],
                _h_[3],
                _h_[4],
                _h_[7],
                _h_[8],
                _h_[9],
                _h_[10],
                _h_[11],
                _h_[12],
                _h_[13],
                _h_[14],
                _h_[15],
                _h_[16],
                _h_[17],
                _h_[18],
                _h_[19],
                _h_[5],
                _h_[6],
                _h_[22],
                _h_[2],
                _h_[23],
                _h_[24],
                _h_[25],
                _h_[26],
                _h_[27],
                _h_[28],
                _h_[29],
                _h_[30]];
       },
       function(Key){
        var Total_map = Make_with_witnesses$0(Key), _f_ = Total_map[1];
        return [0,
                [0,
                 [0,
                  _f_[1],
                  _f_[2],
                  _f_[3],
                  _f_[4],
                  _f_[5],
                  _f_[6],
                  _f_[7],
                  _f_[8],
                  _f_[9],
                  _f_[10],
                  _f_[20],
                  _f_[11],
                  _f_[32],
                  _f_[12]],
                 Total_map[3],
                 Total_map[4],
                 Total_map[7],
                 Total_map[8],
                 Total_map[9],
                 Total_map[10],
                 Total_map[11],
                 Total_map[12],
                 Total_map[13],
                 Total_map[14],
                 Total_map[15],
                 Total_map[16],
                 Total_map[17],
                 Total_map[18],
                 Total_map[19],
                 Total_map[5],
                 Total_map[6],
                 Total_map[22],
                 Total_map[2],
                 Total_map[23],
                 Total_map[24],
                 Total_map[25],
                 Total_map[26],
                 Total_map[27],
                 Total_map[28],
                 Total_map[29],
                 Total_map[30]]];
       },
       [0,
        [0,
         function(_c_){
          var _d_ = Make_with_witnesses(_c_), _e_ = _d_[1];
          return [0,
                  [0,
                   _e_[1],
                   _e_[2],
                   _e_[3],
                   _e_[4],
                   _e_[5],
                   _e_[6],
                   _e_[7],
                   _e_[8],
                   _e_[9],
                   _e_[10],
                   _e_[11],
                   _e_[12],
                   _e_[13],
                   _e_[14]],
                  _d_[2],
                  _d_[3],
                  _d_[4],
                  _d_[7],
                  _d_[6],
                  _d_[5],
                  _d_[8],
                  _d_[9],
                  _d_[10],
                  _d_[11],
                  _d_[12]];
         },
         function(Key){
          var Total_map = Make_with_witnesses(Key), _b_ = Total_map[1];
          return [0,
                  [0,
                   [0,
                    _b_[1],
                    _b_[2],
                    _b_[3],
                    _b_[4],
                    _b_[5],
                    _b_[6],
                    _b_[7],
                    _b_[8],
                    _b_[9],
                    _b_[10],
                    _b_[11],
                    _b_[12],
                    _b_[13],
                    _b_[14]],
                   Total_map[2],
                   Total_map[3],
                   Total_map[4],
                   Total_map[7],
                   Total_map[6],
                   Total_map[5],
                   Total_map[8],
                   Total_map[9],
                   Total_map[10],
                   Total_map[11],
                   Total_map[12]]];
         }]]];
   runtime.caml_register_global(38, Total_map, cst_Total_map);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
