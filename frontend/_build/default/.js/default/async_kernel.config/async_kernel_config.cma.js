// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Async_kernel_config
//# unitInfo: Requires: Base__Field, Base__Word_size, Core, Core__Error, Core__Int, Core__List, Core__Option, Core__Result, Core__Sexp, Core__Sexpable, Core__String, Core__Time_ns, Core__Validated, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record, Stdlib__Sys, Thread_pool_cpu_affinity, Timing_wheel
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "\n",
    cst_ASYNC_CONFIG = "ASYNC_CONFIG",
    cst_All = "All",
    cst_Async_kernel_config$0 = "Async_kernel_config",
    cst_Call_abort = "Call_abort",
    cst_Call_gcore = "Call_gcore",
    cst_Clock = "Clock",
    cst_Default = "Default",
    cst_Do_not_watch = "Do_not_watch",
    cst_Epoll = "Epoll",
    cst_Epoll_if_timerfd = "Epoll_if_timerfd",
    cst_Fd = "Fd",
    cst_File_descr_watcher = "File_descr_watcher",
    cst_Finalizers = "Finalizers",
    cst_Interruptor = "Interruptor",
    cst_Monitor = "Monitor",
    cst_Monitor_send_exn = "Monitor_send_exn",
    cst_Parallel = "Parallel",
    cst_Reader = "Reader",
    cst_Scheduler = "Scheduler",
    cst_Select = "Select",
    cst_Shutdown = "Shutdown",
    cst_Thread_pool = "Thread_pool",
    cst_Thread_safe = "Thread_safe",
    cst_Watch = "Watch",
    cst_Writer = "Writer",
    cst_abort_after_thread_pool_st$0 = "abort_after_thread_pool_stuck_for",
    cst_all = "all",
    cst_async_kernel_config$0 = "async_kernel_config",
    cst_call_abort = "call_abort",
    cst_call_gcore = "call_gcore",
    cst_check_invariants$0 = "check_invariants",
    cst_clock = "clock",
    cst_config_async_kernel_config = "config/async_kernel_config.ml",
    cst_default$0 = "default",
    cst_detect_invalid_access_from$0 = "detect_invalid_access_from_thread",
    cst_do_not_watch = "do_not_watch",
    cst_dump_core_on_job_delay$0 = "dump_core_on_job_delay",
    cst_dump_if_delayed_by$0 = "dump_if_delayed_by",
    cst_epoll = "epoll",
    cst_epoll_if_timerfd = "epoll_if_timerfd",
    cst_epoll_max_ready_events$0 = "epoll_max_ready_events",
    cst_fd = "fd",
    cst_file_descr_watcher$0 = "file_descr_watcher",
    cst_finalizers = "finalizers",
    cst_how_to_dump$0 = "how_to_dump",
    cst_interruptor = "interruptor",
    cst_max_inter_cycle_timeout$0 = "max_inter_cycle_timeout",
    cst_max_num_jobs_per_priority_$0 = "max_num_jobs_per_priority_per_cycle",
    cst_max_num_open_file_descrs$0 = "max_num_open_file_descrs",
    cst_max_num_threads$0 = "max_num_threads",
    cst_min_inter_cycle_timeout$0 = "min_inter_cycle_timeout",
    cst_monitor = "monitor",
    cst_monitor_send_exn = "monitor_send_exn",
    cst_parallel = "parallel",
    cst_print_debug_messages_for$0 = "print_debug_messages_for",
    cst_reader = "reader",
    cst_record_backtraces$0 = "record_backtraces",
    cst_report_thread_pool_stuck_f$0 = "report_thread_pool_stuck_for",
    cst_scheduler = "scheduler",
    cst_select = "select",
    cst_shutdown = "shutdown",
    cst_thread_pool = "thread_pool",
    cst_thread_pool_cpu_affinity$0 = "thread_pool_cpu_affinity",
    cst_thread_safe = "thread_safe",
    cst_timing_wheel_config$0 = "timing_wheel_config",
    cst_watch = "watch",
    cst_writer = "writer",
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_string_compare = runtime.caml_string_compare;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = ")",
    cst$1 = cst$2,
    cst = "    ",
    level_bits = [0, 14, [0, 15, [0, 9, [0, 6, 0]]]],
    level_bits$0 = [0, 10, [0, 10, [0, 9, 0]]],
    here = [0, cst_config_async_kernel_config, 12, 227, 242],
    here$0 = [0, cst_config_async_kernel_config, 19, 381, 396],
    here$1 = [0, cst_config_async_kernel_config, 26, 548, 563],
    here$2 = [0, cst_config_async_kernel_config, 34, 726, 743],
    here$3 = [0, cst_config_async_kernel_config, 45, 946, 961],
    here$4 = [0, cst_config_async_kernel_config, 52, 1103, 1118],
    error_source_003 =
      "config/async_kernel_config.ml.Dump_core_on_job_delay.How_to_dump.t",
    error_source_006 =
      "config/async_kernel_config.ml.Dump_core_on_job_delay.watch",
    error_source_015 =
      "config/async_kernel_config.ml.Dump_core_on_job_delay.t",
    error_source_028 = "config/async_kernel_config.ml.Debug_tag.T.t",
    list =
      caml_list_of_js_array
       ([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]),
    error_source_036 = "config/async_kernel_config.ml.File_descr_watcher.T.t",
    list$0 = [0, 0, [0, 1, [0, 2, 0]]],
    error_source_039 = "config/async_kernel_config.ml.t",
    empty = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    environment_variable = cst_ASYNC_CONFIG,
    Base_Field = global_data.Base__Field,
    Core_Option = global_data.Core__Option,
    Core_List = global_data.Core__List,
    Core_Sexp = global_data.Core__Sexp,
    Core = global_data.Core,
    Core_String = global_data.Core__String,
    Core_Int = global_data.Core__Int,
    Timing_wheel = global_data.Timing_wheel,
    Thread_pool_cpu_affinity = global_data.Thread_pool_cpu_affinity,
    Core_Time_ns = global_data.Core__Time_ns,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Validated = global_data.Core__Validated,
    Core_Sexpable = global_data.Core__Sexpable,
    Base_Word_size = global_data.Base__Word_size,
    Core_Result = global_data.Core__Result,
    Core_Error = global_data.Core__Error;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_kernel_config$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_kernel_config$0);
   caml_call1(Expect_test_collector[6][1], cst_config_async_kernel_config);
   caml_call2
    (Ppx_inline_test_lib[5],
     cst_async_kernel_config$0,
     "async_kernel_config.ml");
   var
    sec = Core_Time_ns[1][81],
    concat = Core_String[45],
    t_of_sexp = Core_Int[81],
    sexp_of_t = Core_Int[82],
    validate = Core_Int[114],
    Epoll_max_ready_events =
      caml_call1(Core_Validated[2], [0, t_of_sexp, sexp_of_t, here, validate]),
    include = Core_Time_ns[1],
    t_of_sexp$0 = include[9],
    sexp_of_t$0 = include[10],
    validate$0 = Core_Time_ns[1][43],
    Max_inter_cycle_timeout =
      caml_call1
       (Core_Validated[2], [0, t_of_sexp$0, sexp_of_t$0, here$0, validate$0]),
    include$0 = Core_Time_ns[1],
    t_of_sexp$1 = include$0[9],
    sexp_of_t$1 = include$0[10],
    validate$1 = Core_Time_ns[1][43],
    Min_inter_cycle_timeout =
      caml_call1
       (Core_Validated[2], [0, t_of_sexp$1, sexp_of_t$1, here$1, validate$1]),
    t_of_sexp$2 = Core_Int[81],
    sexp_of_t$2 = Core_Int[82],
    validate$2 = Core_Int[114],
    include$1 =
      caml_call1
       (Core_Validated[2], [0, t_of_sexp$2, sexp_of_t$2, here$2, validate$2]),
    t_of_sexp$3 = include$1[1],
    sexp_of_t$3 = include$1[2],
    create = include$1[3],
    create_exn = include$1[4],
    raw = include$1[5],
    create_stable_witness = include$1[6],
    type_equal = include$1[7],
    default$0 = caml_call1(create_exn, 65536);
   function equal(t1, t2){return t1 === t2 ? 1 : 0;}
   var
    t_of_sexp$4 = Core_Int[81],
    sexp_of_t$4 = Core_Int[82],
    validate$3 = Core_Int[114],
    Max_num_threads =
      caml_call1
       (Core_Validated[2], [0, t_of_sexp$4, sexp_of_t$4, here$3, validate$3]),
    t_of_sexp$5 = Core_Int[81],
    sexp_of_t$5 = Core_Int[82],
    validate$4 = Core_Int[114],
    Max_num_jobs_per_priority_per_ =
      caml_call1
       (Core_Validated[2], [0, t_of_sexp$5, sexp_of_t$5, here$4, validate$4]),
    _a_ = [0, cst_Default],
    _b_ = [0, cst_Call_abort],
    _c_ = [0, cst_Call_gcore];
   function t_of_sexp$6(sexp_004){
    a:
    {
     if(0 === sexp_004[0]){
      var _bv_ = sexp_004[1];
      b:
      if(_bv_ !== cst_Call_abort){
       c:
       if(_bv_ !== cst_Call_gcore){
        if(_bv_ !== cst_Default){
         if(_bv_ === cst_call_abort) break b;
         if(_bv_ === cst_call_gcore) break c;
         if(_bv_ !== cst_default$0) break a;
        }
        return 0;
       }
       return 2;
      }
      return 1;
     }
     var _bw_ = sexp_004[1];
     if(! _bw_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_004);
     var _bx_ = _bw_[1];
     if(0 !== _bx_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_003, sexp_004);
     var _by_ = _bx_[1];
     b:
     if(_by_ !== cst_Call_abort){
      c:
      if(_by_ !== cst_Call_gcore){
       if(_by_ !== cst_Default){
        if(_by_ === cst_call_abort) break b;
        if(_by_ === cst_call_gcore) break c;
        if(_by_ !== cst_default$0) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_004);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_003, sexp_004);
   }
   function sexp_of_t$6(param){
    switch(param){case 0: return _a_;case 1: return _b_;default: return _c_;
    }
   }
   var
    How_to_dump = [0, t_of_sexp$6, sexp_of_t$6],
    cst_how_to_dump = cst_how_to_dump$0,
    cst_dump_if_delayed_by = cst_dump_if_delayed_by$0,
    _d_ = [0, cst_how_to_dump$0],
    _e_ = [0, cst_dump_if_delayed_by$0],
    _f_ = [0, cst_Watch],
    _g_ = [0, cst_Do_not_watch],
    _h_ = [0, cst_All],
    _i_ = [0, cst_Clock],
    _j_ = [0, cst_Fd],
    _k_ = [0, cst_File_descr_watcher],
    _l_ = [0, cst_Finalizers],
    _m_ = [0, cst_Interruptor],
    _n_ = [0, cst_Monitor],
    _o_ = [0, cst_Monitor_send_exn],
    _p_ = [0, cst_Parallel],
    _q_ = [0, cst_Reader],
    _r_ = [0, cst_Scheduler],
    _s_ = [0, cst_Shutdown],
    _t_ = [0, cst_Thread_pool],
    _u_ = [0, cst_Thread_safe],
    _v_ = [0, cst_Writer];
   function watch_of_sexp(x_007){
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_006,
             [0,
              cst_dump_if_delayed_by,
              1,
              Core_Time_ns[1][9],
              [0, cst_how_to_dump, 1, How_to_dump[1], 0]],
             function(param){
              return param !== cst_dump_if_delayed_by$0
                      ? param !== cst_how_to_dump$0 ? -1 : 1
                      : 0;
             },
             0,
             function(param){
              var how_to_dump = param[2][1], dump_if_delayed_by = param[1];
              return [0, dump_if_delayed_by, how_to_dump];
             },
             x_007);
   }
   function sexp_of_watch(param){
    var
     how_to_dump_011 = param[2],
     dump_if_delayed_by_009 = param[1],
     arg_012 = caml_call1(How_to_dump[2], how_to_dump_011),
     bnds_008 = [0, [1, [0, _d_, [0, arg_012, 0]]], 0],
     arg_010 = caml_call1(Core_Time_ns[1][10], dump_if_delayed_by_009),
     bnds_008$0 = [0, [1, [0, _e_, [0, arg_010, 0]]], bnds_008];
    return [1, bnds_008$0];
   }
   function t_of_sexp$7(sexp_017){
    a:
    {
     if(0 === sexp_017[0]){
      var _bs_ = sexp_017[1];
      b:
      if(_bs_ !== cst_Do_not_watch){
       if(_bs_ !== cst_Watch){
        if(_bs_ === cst_do_not_watch) break b;
        if(_bs_ !== cst_watch) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_015, sexp_017);
      }
      return 0;
     }
     var _bt_ = sexp_017[1];
     if(! _bt_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_015, sexp_017);
     var _bu_ = _bt_[1];
     if(0 !== _bu_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_015, sexp_017);
     var tag_018 = _bu_[1];
     b:
     if(tag_018 !== cst_Do_not_watch){
      if(tag_018 !== cst_Watch){
       if(tag_018 === cst_do_not_watch) break b;
       if(tag_018 !== cst_watch) break a;
      }
      var sexp_args_019 = _bt_[2];
      if(sexp_args_019 && ! sexp_args_019[2]){
       var arg0_020 = sexp_args_019[1], res0_021 = watch_of_sexp(arg0_020);
       return [0, res0_021];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_015,
               tag_018,
               sexp_017);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_015, sexp_017);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_015, sexp_017);
   }
   function sexp_of_t$7(param){
    if(! param) return _g_;
    var arg0_022 = param[1], res0_023 = sexp_of_watch(arg0_022);
    return [1, [0, _f_, [0, res0_023, 0]]];
   }
   function t_of_sexp$8(sexp_029){
    a:
    {
     if(0 === sexp_029[0]){
      var _bi_ = sexp_029[1], _bj_ = caml_string_compare(_bi_, cst_all);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              j:
              {
               k:
               {
                l:
                {
                 m:
                 {
                  n:
                  {
                   o:
                   {
                    if(0 <= _bj_){
                     if(0 >= _bj_) break h;
                     var _bk_ = caml_string_compare(_bi_, cst_parallel);
                     if(0 <= _bk_){
                      if(0 >= _bk_) break o;
                      if(_bi_ === cst_reader) break n;
                      if(_bi_ === cst_scheduler) break m;
                      if(_bi_ === cst_shutdown) break l;
                      if(_bi_ === cst_thread_pool) break k;
                      if(_bi_ === cst_thread_safe) break j;
                      if(_bi_ !== cst_writer) break a;
                      break i;
                     }
                     if(_bi_ === cst_clock) break g;
                     if(_bi_ === cst_fd) break f;
                     if(_bi_ === cst_file_descr_watcher$0) break e;
                     if(_bi_ === cst_finalizers) break d;
                     if(_bi_ === cst_interruptor) break c;
                     if(_bi_ === cst_monitor) break b;
                     if(_bi_ !== cst_monitor_send_exn) break a;
                    }
                    else{
                     var _bl_ = caml_string_compare(_bi_, cst_Monitor_send_exn);
                     if(0 > _bl_){
                      if(_bi_ === cst_All) break h;
                      if(_bi_ === cst_Clock) break g;
                      if(_bi_ === cst_Fd) break f;
                      if(_bi_ === cst_File_descr_watcher) break e;
                      if(_bi_ === cst_Finalizers) break d;
                      if(_bi_ === cst_Interruptor) break c;
                      if(_bi_ !== cst_Monitor) break a;
                      break b;
                     }
                     if(0 < _bl_){
                      if(_bi_ === cst_Parallel) break o;
                      if(_bi_ === cst_Reader) break n;
                      if(_bi_ === cst_Scheduler) break m;
                      if(_bi_ === cst_Shutdown) break l;
                      if(_bi_ === cst_Thread_pool) break k;
                      if(_bi_ === cst_Thread_safe) break j;
                      if(_bi_ !== cst_Writer) break a;
                      break i;
                     }
                    }
                    return 7;
                   }
                   return 8;
                  }
                  return 9;
                 }
                 return 10;
                }
                return 11;
               }
               return 12;
              }
              return 13;
             }
             return 14;
            }
            return 0;
           }
           return 1;
          }
          return 2;
         }
         return 3;
        }
        return 4;
       }
       return 5;
      }
      return 6;
     }
     var _bm_ = sexp_029[1];
     if(! _bm_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_028, sexp_029);
     var _bn_ = _bm_[1];
     if(0 !== _bn_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_028, sexp_029);
     var _bo_ = _bn_[1], _bp_ = caml_string_compare(_bo_, cst_all);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 n:
                 {
                  o:
                  {
                   if(0 <= _bp_){
                    if(0 >= _bp_) break h;
                    var _bq_ = caml_string_compare(_bo_, cst_parallel);
                    if(0 <= _bq_){
                     if(0 >= _bq_) break o;
                     if(_bo_ === cst_reader) break n;
                     if(_bo_ === cst_scheduler) break m;
                     if(_bo_ === cst_shutdown) break l;
                     if(_bo_ === cst_thread_pool) break k;
                     if(_bo_ === cst_thread_safe) break j;
                     if(_bo_ !== cst_writer) break a;
                     break i;
                    }
                    if(_bo_ === cst_clock) break g;
                    if(_bo_ === cst_fd) break f;
                    if(_bo_ === cst_file_descr_watcher$0) break e;
                    if(_bo_ === cst_finalizers) break d;
                    if(_bo_ === cst_interruptor) break c;
                    if(_bo_ === cst_monitor) break b;
                    if(_bo_ !== cst_monitor_send_exn) break a;
                   }
                   else{
                    var _br_ = caml_string_compare(_bo_, cst_Monitor_send_exn);
                    if(0 > _br_){
                     if(_bo_ === cst_All) break h;
                     if(_bo_ === cst_Clock) break g;
                     if(_bo_ === cst_Fd) break f;
                     if(_bo_ === cst_File_descr_watcher) break e;
                     if(_bo_ === cst_Finalizers) break d;
                     if(_bo_ === cst_Interruptor) break c;
                     if(_bo_ !== cst_Monitor) break a;
                     break b;
                    }
                    if(0 < _br_){
                     if(_bo_ === cst_Parallel) break o;
                     if(_bo_ === cst_Reader) break n;
                     if(_bo_ === cst_Scheduler) break m;
                     if(_bo_ === cst_Shutdown) break l;
                     if(_bo_ === cst_Thread_pool) break k;
                     if(_bo_ === cst_Thread_safe) break j;
                     if(_bo_ !== cst_Writer) break a;
                     break i;
                    }
                   }
                   return caml_call2
                           (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
                  }
                  return caml_call2
                          (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
                 }
                 return caml_call2
                         (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
                }
                return caml_call2
                        (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
               }
               return caml_call2
                       (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_028, sexp_029);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_028, sexp_029);
   }
   function sexp_of_t$8(param){
    switch(param){
      case 0:
       return _h_;
      case 1:
       return _i_;
      case 2:
       return _j_;
      case 3:
       return _k_;
      case 4:
       return _l_;
      case 5:
       return _m_;
      case 6:
       return _n_;
      case 7:
       return _o_;
      case 8:
       return _p_;
      case 9:
       return _q_;
      case 10:
       return _r_;
      case 11:
       return _s_;
      case 12:
       return _t_;
      case 13:
       return _u_;
      default: return _v_;
    }
   }
   function equal$0(x_030, x_031){
    return 0 === runtime.caml_int_compare(x_030, x_031) ? 1 : 0;
   }
   var
    include$2 = caml_call1(Core_Sexpable[1], [0, t_of_sexp$8, sexp_of_t$8]),
    to_string = include$2[2],
    _w_ = [0, cst_Epoll_if_timerfd],
    _x_ = [0, cst_Epoll],
    _y_ = [0, cst_Select];
   function t_of_sexp$9(sexp_037){
    a:
    {
     if(0 === sexp_037[0]){
      var _be_ = sexp_037[1];
      b:
      if(_be_ !== cst_Epoll){
       c:
       if(_be_ !== cst_Epoll_if_timerfd){
        if(_be_ !== cst_Select){
         if(_be_ === cst_epoll) break b;
         if(_be_ === cst_epoll_if_timerfd) break c;
         if(_be_ !== cst_select) break a;
        }
        return 2;
       }
       return 0;
      }
      return 1;
     }
     var _bf_ = sexp_037[1];
     if(! _bf_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_036, sexp_037);
     var _bg_ = _bf_[1];
     if(0 !== _bg_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_036, sexp_037);
     var _bh_ = _bg_[1];
     b:
     if(_bh_ !== cst_Epoll){
      c:
      if(_bh_ !== cst_Epoll_if_timerfd){
       if(_bh_ !== cst_Select){
        if(_bh_ === cst_epoll) break b;
        if(_bh_ === cst_epoll_if_timerfd) break c;
        if(_bh_ !== cst_select) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[3], error_source_036, sexp_037);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[3], error_source_036, sexp_037);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_036, sexp_037);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_036, sexp_037);
   }
   function sexp_of_t$9(param){
    switch(param){case 0: return _w_;case 1: return _x_;default: return _y_;
    }
   }
   var
    T = [0, t_of_sexp$9, sexp_of_t$9],
    t_of_sexp$10 = T[1],
    sexp_of_t$10 = T[2],
    include$3 = caml_call1(Core_Sexpable[1], T),
    to_string$0 = include$3[2];
   function timing_wheel_config(r){return r[16];}
   function thread_pool_cpu_affinity(r){return r[15];}
   function report_thread_pool_stuck_for(r){return r[14];}
   function record_backtraces(r){return r[13];}
   function print_debug_messages_for(r){return r[12];}
   function min_inter_cycle_timeout(r){return r[11];}
   function max_num_jobs_per_priority_per_(r){return r[10];}
   function max_num_threads(r){return r[9];}
   function max_num_open_file_descrs(r){return r[8];}
   function max_inter_cycle_timeout(r){return r[7];}
   function file_descr_watcher(r){return r[6];}
   function epoll_max_ready_events(r){return r[5];}
   function dump_core_on_job_delay(r){return r[4];}
   function detect_invalid_access_from_thr(r){return r[3];}
   function check_invariants(r){return r[2];}
   function abort_after_thread_pool_stuck_(r){return r[1];}
   var
    timing_wheel_config$0 =
      [0,
       function(param){return 0;},
       cst_timing_wheel_config$0,
       0,
       timing_wheel_config,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                v];
       }],
    thread_pool_cpu_affinity$0 =
      [0,
       function(param){return 0;},
       cst_thread_pool_cpu_affinity$0,
       0,
       thread_pool_cpu_affinity,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                v,
                r[16]];
       }],
    report_thread_pool_stuck_for$0 =
      [0,
       function(param){return 0;},
       cst_report_thread_pool_stuck_f$0,
       0,
       report_thread_pool_stuck_for,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                v,
                r[15],
                r[16]];
       }],
    record_backtraces$0 =
      [0,
       function(param){return 0;},
       cst_record_backtraces$0,
       0,
       record_backtraces,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                v,
                r[14],
                r[15],
                r[16]];
       }],
    print_debug_messages_for$0 =
      [0,
       function(param){return 0;},
       cst_print_debug_messages_for$0,
       0,
       print_debug_messages_for,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                v,
                r[13],
                r[14],
                r[15],
                r[16]];
       }],
    min_inter_cycle_timeout$0 =
      [0,
       function(param){return 0;},
       cst_min_inter_cycle_timeout$0,
       0,
       min_inter_cycle_timeout,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                v,
                r[12],
                r[13],
                r[14],
                r[15],
                r[16]];
       }],
    max_num_jobs_per_priority_per_$0 =
      [0,
       function(param){return 0;},
       cst_max_num_jobs_per_priority_$0,
       0,
       max_num_jobs_per_priority_per_,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                v,
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16]];
       }],
    max_num_threads$0 =
      [0,
       function(param){return 0;},
       cst_max_num_threads$0,
       0,
       max_num_threads,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                v,
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16]];
       }],
    max_num_open_file_descrs$0 =
      [0,
       function(param){return 0;},
       cst_max_num_open_file_descrs$0,
       0,
       max_num_open_file_descrs,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                v,
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16]];
       }],
    max_inter_cycle_timeout$0 =
      [0,
       function(param){return 0;},
       cst_max_inter_cycle_timeout$0,
       0,
       max_inter_cycle_timeout,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                v,
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16]];
       }],
    file_descr_watcher$0 =
      [0,
       function(param){return 0;},
       cst_file_descr_watcher$0,
       0,
       file_descr_watcher,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                v,
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16]];
       }],
    epoll_max_ready_events$0 =
      [0,
       function(param){return 0;},
       cst_epoll_max_ready_events$0,
       0,
       epoll_max_ready_events,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                v,
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16]];
       }],
    dump_core_on_job_delay$0 =
      [0,
       function(param){return 0;},
       cst_dump_core_on_job_delay$0,
       0,
       dump_core_on_job_delay,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                v,
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16]];
       }],
    detect_invalid_access_from_thr$0 =
      [0,
       function(param){return 0;},
       cst_detect_invalid_access_from$0,
       0,
       detect_invalid_access_from_thr,
       function(r, v){
        return [0,
                r[1],
                r[2],
                v,
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16]];
       }],
    check_invariants$0 =
      [0,
       function(param){return 0;},
       cst_check_invariants$0,
       0,
       check_invariants,
       function(r, v){
        return [0,
                r[1],
                v,
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16]];
       }],
    abort_after_thread_pool_stuck_$0 =
      [0,
       function(param){return 0;},
       cst_abort_after_thread_pool_st$0,
       0,
       abort_after_thread_pool_stuck_,
       function(r, v){
        return [0,
                v,
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16]];
       }],
    _z_ = [0, cst_timing_wheel_config$0],
    _A_ = [0, cst_thread_pool_cpu_affinity$0],
    _B_ = [0, cst_report_thread_pool_stuck_f$0],
    _C_ = [0, cst_record_backtraces$0],
    _D_ = [0, cst_print_debug_messages_for$0],
    _E_ = [0, cst_min_inter_cycle_timeout$0],
    _F_ = [0, cst_max_num_jobs_per_priority_$0],
    _G_ = [0, cst_max_num_threads$0],
    _H_ = [0, cst_max_num_open_file_descrs$0],
    _I_ = [0, cst_max_inter_cycle_timeout$0],
    _J_ = [0, cst_file_descr_watcher$0],
    _K_ = [0, cst_epoll_max_ready_events$0],
    _L_ = [0, cst_dump_core_on_job_delay$0],
    _M_ = [0, cst_detect_invalid_access_from$0],
    _N_ = [0, cst_check_invariants$0],
    _O_ = [0, cst_abort_after_thread_pool_st$0];
   function sexp_of_t$11(param){
    var
     timing_wheel_config_102 = param[16],
     thread_pool_cpu_affinity_098 = param[15],
     report_thread_pool_stuck_for_0 = param[14],
     record_backtraces_090 = param[13],
     print_debug_messages_for_086 = param[12],
     min_inter_cycle_timeout_082 = param[11],
     max_num_jobs_per_priority_per_ = param[10],
     max_num_threads_074 = param[9],
     max_num_open_file_descrs_070 = param[8],
     max_inter_cycle_timeout_066 = param[7],
     file_descr_watcher_062 = param[6],
     epoll_max_ready_events_058 = param[5],
     dump_core_on_job_delay_054 = param[4],
     detect_invalid_access_from_thr = param[3],
     check_invariants_046 = param[2],
     abort_after_thread_pool_stuck_ = param[1],
     bnds_041 = 0;
    if(timing_wheel_config_102)
     var
      v_103 = timing_wheel_config_102[1],
      arg_105 = caml_call1(Timing_wheel[8][2], v_103),
      bnd_104 = [1, [0, _z_, [0, arg_105, 0]]],
      bnds_041$0 = [0, bnd_104, bnds_041];
    else
     var bnds_041$0 = bnds_041;
    if(thread_pool_cpu_affinity_098)
     var
      v_099 = thread_pool_cpu_affinity_098[1],
      arg_101 = caml_call1(Thread_pool_cpu_affinity[3], v_099),
      bnd_100 = [1, [0, _A_, [0, arg_101, 0]]],
      bnds_041$1 = [0, bnd_100, bnds_041$0];
    else
     var bnds_041$1 = bnds_041$0;
    if(report_thread_pool_stuck_for_0)
     var
      v_095 = report_thread_pool_stuck_for_0[1],
      arg_097 = caml_call1(Core_Time_ns[1][10], v_095),
      bnd_096 = [1, [0, _B_, [0, arg_097, 0]]],
      bnds_041$2 = [0, bnd_096, bnds_041$1];
    else
     var bnds_041$2 = bnds_041$1;
    if(record_backtraces_090)
     var
      v_091 = record_backtraces_090[1],
      arg_093 = caml_call1(Core[309], v_091),
      bnd_092 = [1, [0, _C_, [0, arg_093, 0]]],
      bnds_041$3 = [0, bnd_092, bnds_041$2];
    else
     var bnds_041$3 = bnds_041$2;
    if(print_debug_messages_for_086)
     var
      v_087 = print_debug_messages_for_086[1],
      arg_089 = caml_call2(Core[431], sexp_of_t$8, v_087),
      bnd_088 = [1, [0, _D_, [0, arg_089, 0]]],
      bnds_041$4 = [0, bnd_088, bnds_041$3];
    else
     var bnds_041$4 = bnds_041$3;
    if(min_inter_cycle_timeout_082)
     var
      v_083 = min_inter_cycle_timeout_082[1],
      arg_085 = caml_call1(Min_inter_cycle_timeout[2], v_083),
      bnd_084 = [1, [0, _E_, [0, arg_085, 0]]],
      bnds_041$5 = [0, bnd_084, bnds_041$4];
    else
     var bnds_041$5 = bnds_041$4;
    if(max_num_jobs_per_priority_per_)
     var
      v_079 = max_num_jobs_per_priority_per_[1],
      arg_081 = caml_call1(Max_num_jobs_per_priority_per_[2], v_079),
      bnd_080 = [1, [0, _F_, [0, arg_081, 0]]],
      bnds_041$6 = [0, bnd_080, bnds_041$5];
    else
     var bnds_041$6 = bnds_041$5;
    if(max_num_threads_074)
     var
      v_075 = max_num_threads_074[1],
      arg_077 = caml_call1(Max_num_threads[2], v_075),
      bnd_076 = [1, [0, _G_, [0, arg_077, 0]]],
      bnds_041$7 = [0, bnd_076, bnds_041$6];
    else
     var bnds_041$7 = bnds_041$6;
    if(max_num_open_file_descrs_070)
     var
      v_071 = max_num_open_file_descrs_070[1],
      arg_073 = caml_call1(sexp_of_t$3, v_071),
      bnd_072 = [1, [0, _H_, [0, arg_073, 0]]],
      bnds_041$8 = [0, bnd_072, bnds_041$7];
    else
     var bnds_041$8 = bnds_041$7;
    if(max_inter_cycle_timeout_066)
     var
      v_067 = max_inter_cycle_timeout_066[1],
      arg_069 = caml_call1(Max_inter_cycle_timeout[2], v_067),
      bnd_068 = [1, [0, _I_, [0, arg_069, 0]]],
      bnds_041$9 = [0, bnd_068, bnds_041$8];
    else
     var bnds_041$9 = bnds_041$8;
    if(file_descr_watcher_062)
     var
      v_063 = file_descr_watcher_062[1],
      arg_065 = caml_call1(sexp_of_t$10, v_063),
      bnd_064 = [1, [0, _J_, [0, arg_065, 0]]],
      bnds_041$10 = [0, bnd_064, bnds_041$9];
    else
     var bnds_041$10 = bnds_041$9;
    if(epoll_max_ready_events_058)
     var
      v_059 = epoll_max_ready_events_058[1],
      arg_061 = caml_call1(Epoll_max_ready_events[2], v_059),
      bnd_060 = [1, [0, _K_, [0, arg_061, 0]]],
      bnds_041$11 = [0, bnd_060, bnds_041$10];
    else
     var bnds_041$11 = bnds_041$10;
    if(dump_core_on_job_delay_054)
     var
      v_055 = dump_core_on_job_delay_054[1],
      arg_057 = sexp_of_t$7(v_055),
      bnd_056 = [1, [0, _L_, [0, arg_057, 0]]],
      bnds_041$12 = [0, bnd_056, bnds_041$11];
    else
     var bnds_041$12 = bnds_041$11;
    if(detect_invalid_access_from_thr)
     var
      v_051 = detect_invalid_access_from_thr[1],
      arg_053 = caml_call1(Core[309], v_051),
      bnd_052 = [1, [0, _M_, [0, arg_053, 0]]],
      bnds_041$13 = [0, bnd_052, bnds_041$12];
    else
     var bnds_041$13 = bnds_041$12;
    if(check_invariants_046)
     var
      v_047 = check_invariants_046[1],
      arg_049 = caml_call1(Core[309], v_047),
      bnd_048 = [1, [0, _N_, [0, arg_049, 0]]],
      bnds_041$14 = [0, bnd_048, bnds_041$13];
    else
     var bnds_041$14 = bnds_041$13;
    if(abort_after_thread_pool_stuck_)
     var
      v_043 = abort_after_thread_pool_stuck_[1],
      arg_045 = caml_call1(Core_Time_ns[1][10], v_043),
      bnd_044 = [1, [0, _O_, [0, arg_045, 0]]],
      bnds_041$15 = [0, bnd_044, bnds_041$14];
    else
     var bnds_041$15 = bnds_041$14;
    return [1, bnds_041$15];
   }
   function create$0
   (abort_after_thread_pool_stuck_,
    check_invariants,
    detect_invalid_access_from_thr,
    dump_core_on_job_delay,
    epoll_max_ready_events,
    file_descr_watcher,
    max_inter_cycle_timeout,
    max_num_open_file_descrs,
    max_num_threads,
    max_num_jobs_per_priority_per_,
    min_inter_cycle_timeout,
    print_debug_messages_for,
    record_backtraces,
    report_thread_pool_stuck_for,
    thread_pool_cpu_affinity,
    timing_wheel_config,
    param){
    return [0,
            abort_after_thread_pool_stuck_,
            check_invariants,
            detect_invalid_access_from_thr,
            dump_core_on_job_delay,
            epoll_max_ready_events,
            file_descr_watcher,
            max_inter_cycle_timeout,
            max_num_open_file_descrs,
            max_num_threads,
            max_num_jobs_per_priority_per_,
            min_inter_cycle_timeout,
            print_debug_messages_for,
            record_backtraces,
            report_thread_pool_stuck_for,
            thread_pool_cpu_affinity,
            timing_wheel_config];
   }
   function default_timing_wheel_config_fo(word_size){
    if(word_size)
     var
      level_bits$1 = level_bits,
      alarm_precision =
        caml_call2(Timing_wheel[1][13], Timing_wheel[1][10], 3);
    else
     var
      alarm_precision$0 = Timing_wheel[1][10],
      level_bits$1 = level_bits$0,
      alarm_precision = alarm_precision$0;
    var _bd_ = [0, caml_call2(Timing_wheel[7][5], 0, level_bits$1)];
    return caml_call4(Timing_wheel[8][4], 0, _bd_, alarm_precision, 0);
   }
   var
    default_timing_wheel_config =
      default_timing_wheel_config_fo(Base_Word_size[3]),
    _P_ = [0, caml_call1(sec, 1.)],
    _Q_ = caml_call1(sec, 0.),
    _R_ = [0, caml_call1(Min_inter_cycle_timeout[4], _Q_)],
    _S_ = [0, caml_call1(Max_num_jobs_per_priority_per_[4], 500)],
    _T_ = [0, caml_call1(Max_num_threads[4], 50)],
    _U_ = caml_call1(sec, 0.05),
    _V_ = [0, caml_call1(Max_inter_cycle_timeout[4], _U_)],
    _W_ = [0, caml_call1(Epoll_max_ready_events[4], 256)],
    default$1 =
      [0,
       [0, caml_call1(sec, 60.)],
       [0, 0],
       [0, 0],
       [0, 0],
       _W_,
       [0, 0],
       _V_,
       [0, default$0],
       _T_,
       _S_,
       _R_,
       [0, 0],
       [0, 0],
       _P_,
       [0, 0],
       [0, default_timing_wheel_config]],
    _X_ = default$1[16],
    _Y_ = caml_call1(Core_Int[104][7], [0, 0, [0, 1, [0, 2, 0]]]),
    _Z_ = [0, [0, caml_call1(Thread_pool_cpu_affinity[1][4], _Y_)]],
    example =
      [0,
       default$1[1],
       default$1[2],
       default$1[3],
       default$1[4],
       default$1[5],
       default$1[6],
       default$1[7],
       default$1[8],
       default$1[9],
       default$1[10],
       default$1[11],
       [0, [0, 2, [0, 10, 0]]],
       default$1[13],
       default$1[14],
       _Z_,
       _X_],
    ___ =
      [0,
       "\n  This is used to adjust the time/space tradeoff in the timing wheel\n  used to implement Async's clock.  Time is split into intervals of\n  size [alarm_precision], and alarms with times in the same interval\n  fire in the same cycle.  Level [i] in the timing wheel has an\n  array of size [2^b], where [b] is the [i]'th entry in [level_bits].\n",
       0],
    _$_ =
      [0,
       "\n   Whether and how threads in the thread pool should be affinitized to CPUs.\n",
       0],
    _aa_ =
      [0,
       "\n  By default, Async will print a message to stderr every second if\n  the thread pool is stuck for longer than this.\n",
       0],
    _ab_ =
      [0,
       "\n  If true, this will cause Async to keep in the execution context the\n  history of stack backtraces (obtained via [Backtrace.get]) that led\n  to the current job.  If an Async job has an unhandled exception,\n  this backtrace history will be recorded in the exception.  In\n  particular the history will appear in an unhandled exception that\n  reaches the main monitor.  This can have a substantial performance\n  impact, both in running time and space usage.\n",
       0],
    _ac_ =
      [0,
       "\n  Turning on debug messages will substantially slow down most programs.\n",
       0],
    _ad_ = [0, cst$2, 0],
    cst_A_list_of_tags_specifying_ =
      "\n  A list of tags specifying which Async functions should print debug\n  messages to stderr.  Each tag identifies a group of related Async\n  functions.  The tag [all] means to print debug messages for all\n  functions.  Allowed values are:\n\n",
    _ae_ =
      [0,
       "\n  The minimum timeout the scheduler will pass to the OS when it checks\n  for I/O between cycles.  This is zero by default.  Setting it to a\n  nonzero value is used to increase thread fairness between the scheduler\n  and other threads.  A plausible setting is 1us.  This is also\n  configurable in OCaml via [Scheduler.set_min_inter_cycle_timeout].\n",
       0],
    _af_ =
      [0,
       "\n  The maximum number of jobs that will be done at each priority within\n  each Async cycle.  This limits how many jobs the scheduler will run\n  before pausing to check for I/O.\n",
       0],
    _ag_ =
      [0,
       "\n  The maximum number of threads that Async will create to do blocking\n  system calls and handle calls to [In_thread.run].\n",
       0],
    _ah_ =
      [0,
       "\n  The maximum number of open file descriptors allowed at any one time.",
       0],
    _ai_ = [0, " [ulimit -n -H]", 0],
    cst_min = "min ",
    _aj_ =
      [0,
       "\n  The maximum amount of time the scheduler will pause between cycles\n  when it has no jobs and is going to wait for I/O.  In principle one\n  doesn't need this, and we could use an infinite timeout.  We instead\n  use a small timeout (by default), to be more robust to bugs that\n  could prevent Async from waking up and servicing events.  For\n  example, as of 2013-01, the OCaml runtime has a bug that causes it\n  to not necessarily run an OCaml signal handler in a timely manner.\n  This in turn can cause a simple Async program that is waiting on a\n  signal to hang, when in fact it should handle the signal.\n\n  We use 50ms as the default timeout, because it is infrequent enough\n  to have a negligible performance impact, and frequent enough that\n  the latency would typically be not noticeable.  Also, 50ms is what\n  the OCaml ticker thread uses.\n",
       0],
    _ak_ = [0, ".\n", 0],
    _al_ = [0, ", "],
    cst_This_determines_what_OS_su =
      "\n  This determines what OS subsystem Async uses to watch file descriptors for being ready.\n  The default is to use [epoll] if timerfd's are supported and if not, use [select].\n\n  Allowed values are:",
    _am_ =
      [0,
       "\n  The maximum number of ready events that Async's call to [Epoll.wait]\n  will handle.\n",
       0],
    _an_ =
      [0,
       "\n  Can be set to [Do_not_watch] or:\n\n    (Watch ((dump_if_delayed_by SPAN) (how_to_dump HOW)))\n\n  If set to [Watch], then on program start this will start a regular\n  Async job that increments a counter, and a C thread that will\n  detect if that job is delayed by [dump_if_delayed_by], and if so,\n  will core dump the program.  If available, [/usr/bin/gcore] is\n  used by default to dump the core, which should allow the program\n  to continue running.  Otherwise, [abort] will be called from C,\n  which will kill the program while causing a core dump.  One can\n  force [abort] or [gcore] via [how_to_dump], which should be one of:\n  [Call_abort], [Call_gcore], or [Default].\n",
       0],
    _ao_ =
      [0,
       "\n  If true, causes Async routines to check if they are being accessed\n  from some thread other than the thread currently holding the Async\n  lock, which is not allowed and can lead to very confusing behavior.\n",
       0],
    _ap_ =
      [0,
       "\n  If true, causes Async to regularly check invariants of its internal\n  data structures.  This can substantially slow down your program.\n",
       0],
    _aq_ =
      [0,
       "\n  By default, Async will send an exception to the toplevel monitor\n  if it detects that the thread pool is stuck for longer than this.\n",
       0],
    cst_default = " (default ",
    cst_Here_is_an_explanation_of_ =
      "\n\nHere is an explanation of each field.\n",
    cst_environment_variable_affec =
      " environment variable affects Async\nin various ways.  Its value should be a sexp of the following form,\nwhere all fields are optional:\n\n",
    cst_The = "The ",
    _ar_ = [0, [2, 0, [10, 0]], "%s%!"];
   function usage(param){
    function field(to_sexp, description, ac, field){
     var
      _bb_ = caml_call2(Base_Field[3], field, default$1),
      _bc_ = caml_call1(to_sexp, caml_call4(Core_Option[36], 0, 0, 0, _bb_));
     return [0, [0, caml_call1(Base_Field[2], field), _bc_, description], ac];
    }
    var
     _aT_ = Timing_wheel[8][2],
     _aU_ = Thread_pool_cpu_affinity[3],
     _aV_ = Core_Time_ns[1][10],
     _aW_ = Core[309],
     _aX_ =
       [0,
        cst_A_list_of_tags_specifying_,
        [0,
         caml_call2
          (concat,
           0,
           caml_call2
            (Core_List[50],
             list,
             function(d){
              return caml_call2
                      (concat, 0, [0, cst, [0, caml_call1(to_string, d), _ad_]]);
             })),
         _ac_]],
     _aY_ = Min_inter_cycle_timeout[2],
     _aZ_ = Max_num_jobs_per_priority_per_[2],
     _a0_ = Max_num_threads[2],
     _a1_ = Max_inter_cycle_timeout[2],
     _a2_ =
       [0,
        cst_This_determines_what_OS_su,
        [0,
         caml_call2
          (concat, _al_, caml_call2(Core_List[50], list$0, to_string$0)),
         _ak_]],
     _a3_ = Epoll_max_ready_events[2],
     _a4_ = Core[309],
     _a5_ = Core[309],
     fields =
       field
        (_aT_,
         ___,
         field
          (_aU_,
           _$_,
           field
            (_aV_,
             _aa_,
             field
              (_aW_,
               _ab_,
               field
                (function(x_106){
                  return caml_call2(Core[431], sexp_of_t$8, x_106);
                 },
                 _aX_,
                 field
                  (_aY_,
                   _ae_,
                   field
                    (_aZ_,
                     _af_,
                     field
                      (_a0_,
                       _ag_,
                       field
                        (function(default$0){
                          var
                           _a$_ = caml_call1(raw, default$0),
                           _ba_ =
                             caml_call2
                              (concat,
                               0,
                               [0, cst_min, [0, caml_call2(Core_Int[14], 0, _a$_), _ai_]]);
                          return caml_call1(Core[484], _ba_);
                         },
                         _ah_,
                         field
                          (_a1_,
                           _aj_,
                           field
                            (sexp_of_t$10,
                             _a2_,
                             field
                              (_a3_,
                               _am_,
                               field
                                (sexp_of_t$7,
                                 _an_,
                                 field
                                  (_a4_,
                                   _ao_,
                                   field
                                    (_a5_,
                                     _ap_,
                                     field
                                      (Core_Time_ns[1][10],
                                       _aq_,
                                       0,
                                       abort_after_thread_pool_stuck_$0),
                                     check_invariants$0),
                                   detect_invalid_access_from_thr$0),
                                 dump_core_on_job_delay$0),
                               epoll_max_ready_events$0),
                             file_descr_watcher$0),
                           max_inter_cycle_timeout$0),
                         max_num_open_file_descrs$0),
                       max_num_threads$0),
                     max_num_jobs_per_priority_per_$0),
                   min_inter_cycle_timeout$0),
                 print_debug_messages_for$0),
               record_backtraces$0),
             report_thread_pool_stuck_for$0),
           thread_pool_cpu_affinity$0),
         timing_wheel_config$0),
     _a6_ =
       caml_call2
        (Core_List[77],
         fields,
         function(_a__, param){
          var name2 = param[1], name1 = _a__[1];
          return caml_call2(Core_String[139], name1, name2);
         }),
     _a7_ =
       [0,
        cst_Here_is_an_explanation_of_,
        [0,
         caml_call2
          (concat,
           0,
           caml_call2
            (Core_List[50],
             _a6_,
             function(param){
              var
               description = param[3],
               default$0 = param[2],
               name = param[1];
              return caml_call2
                      (concat,
                       0,
                       [0,
                        cst$1,
                        [0,
                         name,
                         [0,
                          cst_default,
                          [0,
                           caml_call1(Core_Sexp[83], default$0),
                           [0, cst$0, description]]]]]);
             })),
         0]],
     _a8_ = sexp_of_t$11(example),
     _a9_ =
       caml_call2
        (concat,
         0,
         [0,
          cst_The,
          [0,
           environment_variable,
           [0,
            cst_environment_variable_affec,
            [0, caml_call2(Core_Sexp[81], 0, _a8_), _a7_]]]]);
    caml_call2(Core[237], _ar_, _a9_);
    return caml_call1(Core[82], 1);
   }
   var
    match =
      caml_call1
       (Core_Option[52],
        function(param){return runtime.caml_sys_getenv(cst_ASYNC_CONFIG);}),
    _as_ = [0, "<no task id>"],
    cst_timing_wheel_config = cst_timing_wheel_config$0,
    cst_thread_pool_cpu_affinity = cst_thread_pool_cpu_affinity$0,
    cst_report_thread_pool_stuck_f = cst_report_thread_pool_stuck_f$0,
    cst_record_backtraces = cst_record_backtraces$0,
    cst_print_debug_messages_for = cst_print_debug_messages_for$0,
    cst_min_inter_cycle_timeout = cst_min_inter_cycle_timeout$0,
    cst_max_num_jobs_per_priority_ = cst_max_num_jobs_per_priority_$0,
    cst_max_num_threads = cst_max_num_threads$0,
    cst_max_num_open_file_descrs = cst_max_num_open_file_descrs$0,
    cst_max_inter_cycle_timeout = cst_max_inter_cycle_timeout$0,
    cst_file_descr_watcher = cst_file_descr_watcher$0,
    cst_epoll_max_ready_events = cst_epoll_max_ready_events$0,
    cst_dump_core_on_job_delay = cst_dump_core_on_job_delay$0,
    cst_detect_invalid_access_from = cst_detect_invalid_access_from$0,
    cst_check_invariants = cst_check_invariants$0,
    cst_abort_after_thread_pool_st = cst_abort_after_thread_pool_st$0,
    _au_ =
      [0,
       [11, "invalid value for ", [2, 0, [11, " environment variable", 0]]],
       "invalid value for %s environment variable"],
    _az_ = [0, [2, 0, [11, "\n\n", 0]], "%s\n\n"],
    cst_async_kernel_config = cst_async_kernel_config$0,
    cst_Async_kernel_config = cst_Async_kernel_config$0;
   if(match){
    var string = match[1];
    if(string !== ""){
     var
      match$0 =
        caml_call1
         (Core_Result[48],
          function(param){
           var
            x_040 = caml_call1(Core_Sexp[73], string),
            _aD_ =
              [0,
               cst_record_backtraces,
               5,
               Core[310],
               [0,
                cst_report_thread_pool_stuck_f,
                5,
                Core_Time_ns[1][9],
                [0,
                 cst_thread_pool_cpu_affinity,
                 5,
                 Thread_pool_cpu_affinity[2],
                 [0, cst_timing_wheel_config, 5, Timing_wheel[8][1], 0]]]],
            _aE_ =
              [0,
               cst_print_debug_messages_for,
               5,
               caml_call1(Core[432], t_of_sexp$8),
               _aD_];
           return caml_call6
                   (Sexplib0_Sexp_conv_record[3],
                    error_source_039,
                    [0,
                     cst_abort_after_thread_pool_st,
                     5,
                     Core_Time_ns[1][9],
                     [0,
                      cst_check_invariants,
                      5,
                      Core[310],
                      [0,
                       cst_detect_invalid_access_from,
                       5,
                       Core[310],
                       [0,
                        cst_dump_core_on_job_delay,
                        5,
                        t_of_sexp$7,
                        [0,
                         cst_epoll_max_ready_events,
                         5,
                         Epoll_max_ready_events[1],
                         [0,
                          cst_file_descr_watcher,
                          5,
                          t_of_sexp$10,
                          [0,
                           cst_max_inter_cycle_timeout,
                           5,
                           Max_inter_cycle_timeout[1],
                           [0,
                            cst_max_num_open_file_descrs,
                            5,
                            t_of_sexp$3,
                            [0,
                             cst_max_num_threads,
                             5,
                             Max_num_threads[1],
                             [0,
                              cst_max_num_jobs_per_priority_,
                              5,
                              Max_num_jobs_per_priority_per_[1],
                              [0,
                               cst_min_inter_cycle_timeout,
                               5,
                               Min_inter_cycle_timeout[1],
                               _aE_]]]]]]]]]]],
                    function(param){
                     var
                      switch$0 =
                        caml_string_compare(param, cst_max_num_open_file_descrs$0);
                     if(0 <= switch$0){
                      if(0 >= switch$0) return 7;
                      if(param === cst_max_num_threads$0) return 8;
                      if(param === cst_min_inter_cycle_timeout$0) return 10;
                      if(param === cst_print_debug_messages_for$0) return 11;
                      if(param === cst_record_backtraces$0) return 12;
                      if(param === cst_report_thread_pool_stuck_f$0) return 13;
                      if(param === cst_thread_pool_cpu_affinity$0) return 14;
                      if(param === cst_timing_wheel_config$0) return 15;
                     }
                     else{
                      if(param === cst_abort_after_thread_pool_st$0) return 0;
                      if(param === cst_check_invariants$0) return 1;
                      if(param === cst_detect_invalid_access_from$0) return 2;
                      if(param === cst_dump_core_on_job_delay$0) return 3;
                      if(param === cst_epoll_max_ready_events$0) return 4;
                      if(param === cst_file_descr_watcher$0) return 5;
                      if(param === cst_max_inter_cycle_timeout$0) return 6;
                      if(param === cst_max_num_jobs_per_priority_$0) return 9;
                     }
                     return -1;
                    },
                    0,
                    function(param){
                     var
                      _aF_ = param[2],
                      _aG_ = _aF_[2],
                      _aH_ = _aG_[2],
                      _aI_ = _aH_[2],
                      _aJ_ = _aI_[2],
                      _aK_ = _aJ_[2],
                      _aL_ = _aK_[2],
                      _aM_ = _aL_[2],
                      _aN_ = _aM_[2],
                      _aO_ = _aN_[2],
                      _aP_ = _aO_[2],
                      _aQ_ = _aP_[2],
                      _aR_ = _aQ_[2],
                      _aS_ = _aR_[2],
                      timing_wheel_config = _aS_[2][1],
                      thread_pool_cpu_affinity = _aS_[1],
                      report_thread_pool_stuck_for = _aR_[1],
                      record_backtraces = _aQ_[1],
                      print_debug_messages_for = _aP_[1],
                      min_inter_cycle_timeout = _aO_[1],
                      max_num_jobs_per_priority_per_ = _aN_[1],
                      max_num_threads = _aM_[1],
                      max_num_open_file_descrs = _aL_[1],
                      max_inter_cycle_timeout = _aK_[1],
                      file_descr_watcher = _aJ_[1],
                      epoll_max_ready_events = _aI_[1],
                      dump_core_on_job_delay = _aH_[1],
                      detect_invalid_access_from_thr = _aG_[1],
                      check_invariants = _aF_[1],
                      abort_after_thread_pool_stuck_ = param[1];
                     return [0,
                             abort_after_thread_pool_stuck_,
                             check_invariants,
                             detect_invalid_access_from_thr,
                             dump_core_on_job_delay,
                             epoll_max_ready_events,
                             file_descr_watcher,
                             max_inter_cycle_timeout,
                             max_num_open_file_descrs,
                             max_num_threads,
                             max_num_jobs_per_priority_per_,
                             min_inter_cycle_timeout,
                             print_debug_messages_for,
                             record_backtraces,
                             report_thread_pool_stuck_for,
                             thread_pool_cpu_affinity,
                             timing_wheel_config];
                    },
                    x_040);
          });
     if(0 === match$0[0])
      var t = match$0[1], t$0 = t;
     else{
      var
       exn = match$0[1],
       _at_ = Core[539],
       _av_ = caml_call2(Core[259], _au_, environment_variable),
       _aw_ = caml_call5(Core_Error[17], 0, 0, _av_, exn, _at_),
       _ax_ = caml_call1(Core_Error[6], _aw_),
       _ay_ = caml_call2(Core_Sexp[81], 0, _ax_);
      caml_call2(Core[237], _az_, _ay_);
      var t$0 = usage(0);
     }
     var t$1 = t$0;
    }
    else
     var t$1 = usage(0);
    var t$2 = t$1;
   }
   else
    var t$2 = empty;
   function print_debug_messages_for$1(tag){
    var match = t$2[12];
    if(! match) return 0;
    var l = match[1];
    return caml_call3(Core_List[16], l, tag, equal$0);
   }
   var all = print_debug_messages_for$1(0);
   function debug(tag){return all ? all : print_debug_messages_for$1(tag);}
   var
    clock = debug(1),
    fd = debug(2),
    file_descr_watcher$1 = debug(3),
    finalizers = debug(4),
    interruptor = debug(5),
    monitor = debug(6),
    monitor_send_exn = debug(7),
    parallel = debug(8),
    reader = debug(9),
    scheduler = debug(10),
    shutdown = debug(11),
    thread_pool = debug(12),
    thread_safe = debug(13),
    writer = debug(14);
   function symbol(field){
    var
     _aA_ = caml_call2(Base_Field[3], field, default$1),
     _aB_ = caml_call4(Core_Option[36], 0, 0, 0, _aA_),
     _aC_ = caml_call2(Base_Field[3], field, t$2);
    return caml_call2(Core_Option[35], _aC_, _aB_);
   }
   var
    abort_after_thread_pool_stuck_$1 =
      symbol(abort_after_thread_pool_stuck_$0),
    check_invariants$1 = symbol(check_invariants$0),
    detect_invalid_access_from_thr$1 =
      symbol(detect_invalid_access_from_thr$0),
    epoll_max_ready_events$1 = symbol(epoll_max_ready_events$0),
    thread_pool_cpu_affinity$1 = symbol(thread_pool_cpu_affinity$0),
    file_descr_watcher$2 = symbol(file_descr_watcher$0),
    max_inter_cycle_timeout$1 = symbol(max_inter_cycle_timeout$0),
    max_num_open_file_descrs$1 = symbol(max_num_open_file_descrs$0),
    max_num_threads$1 = symbol(max_num_threads$0),
    max_num_jobs_per_priority_per_$1 =
      symbol(max_num_jobs_per_priority_per_$0),
    min_inter_cycle_timeout$1 = symbol(min_inter_cycle_timeout$0),
    record_backtraces$1 = symbol(record_backtraces$0),
    report_thread_pool_stuck_for$1 = symbol(report_thread_pool_stuck_for$0),
    timing_wheel_config$1 = symbol(timing_wheel_config$0),
    dump_core_on_job_delay$1 = symbol(dump_core_on_job_delay$0),
    t$3 =
      [0,
       [0, abort_after_thread_pool_stuck_$1],
       [0, check_invariants$1],
       [0, detect_invalid_access_from_thr$1],
       [0, dump_core_on_job_delay$1],
       [0, epoll_max_ready_events$1],
       [0, file_descr_watcher$2],
       [0, max_inter_cycle_timeout$1],
       [0, max_num_open_file_descrs$1],
       [0, max_num_threads$1],
       [0, max_num_jobs_per_priority_per_$1],
       [0, min_inter_cycle_timeout$1],
       t$2[12],
       [0, record_backtraces$1],
       [0, report_thread_pool_stuck_for$1],
       [0, thread_pool_cpu_affinity$1],
       [0, timing_wheel_config$1]],
    task_id = [0, function(param){return _as_;}];
   caml_call1(Ppx_inline_test_lib[6], cst_async_kernel_config);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_kernel_config);
   var
    Async_kernel_config =
      [0,
       Epoll_max_ready_events,
       Max_inter_cycle_timeout,
       Min_inter_cycle_timeout,
       Max_num_threads,
       Max_num_jobs_per_priority_per_,
       [0,
        t_of_sexp$3,
        sexp_of_t$3,
        create,
        create_exn,
        raw,
        create_stable_witness,
        type_equal,
        equal,
        default$0],
       [0,
        How_to_dump,
        sexp_of_watch,
        watch_of_sexp,
        t_of_sexp$7,
        sexp_of_t$7],
       [0, sexp_of_t$8],
       [0, sexp_of_t$10],
       sexp_of_t$11,
       create$0,
       t$3,
       environment_variable,
       [0,
        clock,
        fd,
        file_descr_watcher$1,
        finalizers,
        interruptor,
        monitor,
        monitor_send_exn,
        parallel,
        reader,
        scheduler,
        shutdown,
        thread_pool,
        thread_safe,
        writer],
       abort_after_thread_pool_stuck_$1,
       check_invariants$1,
       detect_invalid_access_from_thr$1,
       dump_core_on_job_delay$1,
       thread_pool_cpu_affinity$1,
       epoll_max_ready_events$1,
       file_descr_watcher$2,
       max_inter_cycle_timeout$1,
       max_num_jobs_per_priority_per_$1,
       max_num_open_file_descrs$1,
       max_num_threads$1,
       min_inter_cycle_timeout$1,
       record_backtraces$1,
       report_thread_pool_stuck_for$1,
       timing_wheel_config$1,
       default_timing_wheel_config_fo,
       task_id];
   runtime.caml_register_global
    (279, Async_kernel_config, cst_Async_kernel_config$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
