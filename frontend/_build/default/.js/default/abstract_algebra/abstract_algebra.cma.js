// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Abstract_algebra
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Abstract_algebra = "Abstract_algebra",
    cst_abstract_algebra = "abstract_algebra";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Abstract_algebra);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_abstract_algebra);
   caml_call1(Expect_test_collector[6][1], "src/abstract_algebra.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_abstract_algebra, "abstract_algebra.ml");
   var Commutative_group = [0], Vector_space = [0];
   caml_call1(Ppx_inline_test_lib[6], cst_abstract_algebra);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Abstract_algebra);
   var Abstract_algebra = [0, Commutative_group, Vector_space];
   runtime.caml_register_global(11, Abstract_algebra, cst_Abstract_algebra);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3RfYWxnZWJyYS5jbWEuanMiLCJzZWN0aW9ucyI6W3sib2Zmc2V0Ijp7ImxpbmUiOjksImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3RfYWxnZWJyYS5jbWEuanMiLCJuYW1lcyI6WyJydW50aW1lIiwiY3N0X0Fic3RyYWN0X2FsZ2VicmEiLCJjc3RfYWJzdHJhY3RfYWxnZWJyYSIsImNhbWxfY2FsbDEiLCJmIiwiYTAiLCJjYW1sX2NhbGwyIiwiYTEiLCJnbG9iYWxfZGF0YSIsIlBweF9tb2R1bGVfdGltZXJfcnVudGltZSIsIlBweF9iZW5jaF9saWJfQmVuY2htYXJrX2FjY3VtdSIsIkV4cGVjdF90ZXN0X2NvbGxlY3RvciIsIlBweF9pbmxpbmVfdGVzdF9saWIiLCJDb21tdXRhdGl2ZV9ncm91cCIsIlZlY3Rvcl9zcGFjZSIsIkFic3RyYWN0X2FsZ2VicmEiXSwic291cmNlcyI6WyIvYnVpbHRpbi9ibGFja2JveC5tbCIsIi9Vc2Vycy95YW5uaWNrLy5vcGFtL2JvbnNhaS1mcm9udGVuZC9saWIvYWJzdHJhY3RfYWxnZWJyYS9hYnN0cmFjdF9hbGdlYnJhLm1sIl0sIm1hcHBpbmdzIjoiSUFBQUEsVUFBQTtBQUFBLElBQUFDLHVCQUFBO0FBQUEsSUFBQUMsdUJBQUE7QUFBQSxZQUFBQyxXQUFBQyxHQUFBQztBQUFBQSxJQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsWUFBQUMsV0FBQUYsR0FBQUMsSUFBQUU7QUFBQUEsSUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQUMsY0FBQTtBQUFBLElBQUFDLDJCQUFBO0FBQUEsSUFBQUM7QUFBQUEsTUFBQTtBQUFBLElBQUFDLHdCQUFBO0FBQUEsSUFBQUMsc0JBQUE7QUFBQSxHQ0NBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxPQUFBQyxvQkFBQSxLQUFBQyxlQUFBO0FBQUEsR0FnQ0c7QUFBQTtBQUFBO0FBQUE7QUFBQSxPQUFBQyxtQkFBQTtBQUFBO0FBQUE7QUFBQSxFRGpDSCIsInNvdXJjZXNDb250ZW50IjpbIigqIGdlbmVyYXRlZCBjb2RlICopIiwiXG5vcGVuIEJhc2VcblxubW9kdWxlIENvbW11dGF0aXZlX2dyb3VwID0gc3RydWN0XG4gICgqKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIGludGVyZmFjZSBzaG91bGQgaGF2ZSB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG5cbiAgICAgICsgYXNzb2NpYXRpdml0eTogWyhhICsgYikgKyBjID0gYSArIChiICsgYyldXG4gICAgICArIGlkZW50aXR5OiBbemVybyArIGEgPSBhICsgemVybyA9IGFdXG4gICAgICArIGludmVyc2VzOiBnaXZlbiBhbnkgW2FdIHRoZXJlIGV4aXN0cyBhICh1bmlxdWUpIGVsdCBbYl0gc3VjaCB0aGF0IFthICsgYiA9IGIgKyBhID1cbiAgICAgIHplcm9dXG4gICAgICArIGNvbW11dGF0aXZpdHk6IFthICsgYiA9IGIgKyBhXVxuICAqKVxuXG4gIG1vZHVsZSB0eXBlIFdpdGhvdXRfc2V4cCA9IHNpZ1xuICAgIHR5cGUgdFxuXG4gICAgdmFsIHplcm8gOiB0XG4gICAgdmFsICgrKSAgOiB0IC0+IHQgLT4gdFxuICAgIHZhbCAoLSkgIDogdCAtPiB0IC0+IHRcbiAgZW5kXG5cbiAgbW9kdWxlIHR5cGUgUyA9IHNpZ1xuICAgIHR5cGUgdCBbQEBkZXJpdmluZyBzZXhwXVxuICAgIGluY2x1ZGUgV2l0aG91dF9zZXhwIHdpdGggdHlwZSB0IDo9IHRcbiAgZW5kXG5lbmRcblxubW9kdWxlIFZlY3Rvcl9zcGFjZSA9IHN0cnVjdFxuICBtb2R1bGUgdHlwZSBTID0gc2lnXG4gICAgdHlwZSB0XG4gICAgaW5jbHVkZSBDb21tdXRhdGl2ZV9ncm91cC5TIHdpdGggdHlwZSB0IDo9IHRcbiAgICB2YWwgc2NhbGUgOiB0IC0+IGZsb2F0IC0+IHRcbiAgZW5kXG5lbmRcbiJdLCJpZ25vcmVMaXN0IjpbMF19fV19
