// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Async_durable__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Async_durable = [0];
   runtime.caml_register_global(0, Async_durable, "Async_durable__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_durable__Durable
//# unitInfo: Requires: Async_kernel, Async_kernel__Async_kernel_scheduler, Async_kernel__Deferred_or_error, Bus, Core, Core__Bool, Core__Or_error, Expect_test_collector, Expect_test_common__File, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    cst_create_counter_1_fix_count =
      " ((!create_counter 1) (!fix_counter 1)) ",
    cst_create_counter_2_fix_count =
      " ((!create_counter 2) (!fix_counter 0)) ",
    cst_create_counter = "!create_counter",
    cst_fix_counter = "!fix_counter",
    cst_Async_durable_Durable = "Async_durable__Durable",
    cst_async_durable = "async_durable",
    cst_e1eb3df59a4e1078e897966357$4 = "e1eb3df59a4e1078e897966357558ce2",
    cst_src_durable_ml$24 = "src/durable.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$0,
    Core = global_data.Core,
    Expect_test_common_File = global_data.Expect_test_common__File,
    Async_kernel = global_data.Async_kernel,
    Core_Or_error = global_data.Core__Or_error,
    Async_kernel_Async_kernel_sche =
      global_data.Async_kernel__Async_kernel_scheduler,
    Expect_test_config = global_data.Expect_test_config,
    Expect_test_collector = global_data.Expect_test_collector,
    Inline_test_config = global_data.Inline_test_config,
    Bus = global_data.Bus,
    Assert_failure = global_data.Assert_failure,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Core_Bool = global_data.Core__Bool,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_durable_Durable);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_durable);
   caml_call1(Expect_test_collector[6][1], cst_src_durable_ml$24);
   caml_call2(Ppx_inline_test_lib[5], cst_async_durable, "durable.ml");
   var
    _a_ = [0, cst_src_durable_ml$24, 27, 592, 600],
    cst_Initial_durable_value_is_b = "Initial durable value is broken.",
    _b_ = [0, cst_src_durable_ml$24, 58, 8],
    _c_ = [0, [0, cst_src_durable_ml$24, 56, 1352, 1396]],
    cst_Durable_value_was_broken_i =
      "Durable value was broken immediately after being created or rebuilt.",
    _d_ = [0, 0],
    _e_ = [0, "!pass"],
    cst_src_durable_ml = cst_src_durable_ml$24,
    cst_src_durable_ml$0 = cst_src_durable_ml$24,
    cst_src_durable_ml$1 = cst_src_durable_ml$24,
    _f_ = [1, " (!pass true) "],
    _g_ = [0, cst$0],
    cst_src_durable_ml$2 = cst_src_durable_ml$24,
    cst_src_durable_ml$3 = cst_src_durable_ml$24,
    cst_e1eb3df59a4e1078e897966357 = cst_e1eb3df59a4e1078e897966357$4,
    _h_ = [0, 0],
    _i_ = [0, cst_fix_counter],
    _j_ = [0, cst_create_counter],
    cst_src_durable_ml$4 = cst_src_durable_ml$24,
    cst_src_durable_ml$5 = cst_src_durable_ml$24,
    cst_src_durable_ml$6 = cst_src_durable_ml$24,
    _k_ = [1, cst_create_counter_1_fix_count],
    _l_ = [0, cst$0],
    cst_src_durable_ml$7 = cst_src_durable_ml$24,
    cst_src_durable_ml$8 = cst_src_durable_ml$24,
    cst_e1eb3df59a4e1078e897966357$0 = cst_e1eb3df59a4e1078e897966357$4,
    _m_ = [0, cst_fix_counter],
    _n_ = [0, cst_create_counter],
    cst_src_durable_ml$9 = cst_src_durable_ml$24,
    cst_src_durable_ml$10 = cst_src_durable_ml$24,
    cst_src_durable_ml$11 = cst_src_durable_ml$24,
    _o_ = [1, cst_create_counter_1_fix_count],
    _p_ = [0, cst$0],
    cst_src_durable_ml$12 = cst_src_durable_ml$24,
    cst_src_durable_ml$13 = cst_src_durable_ml$24,
    cst_e1eb3df59a4e1078e897966357$1 = cst_e1eb3df59a4e1078e897966357$4,
    _q_ = [0, cst_fix_counter],
    _r_ = [0, cst_create_counter],
    cst_src_durable_ml$14 = cst_src_durable_ml$24,
    cst_src_durable_ml$15 = cst_src_durable_ml$24,
    cst_src_durable_ml$16 = cst_src_durable_ml$24,
    _s_ = [1, cst_create_counter_2_fix_count],
    _t_ = [0, cst$0],
    cst_src_durable_ml$17 = cst_src_durable_ml$24,
    cst_src_durable_ml$18 = cst_src_durable_ml$24,
    cst_e1eb3df59a4e1078e897966357$2 = cst_e1eb3df59a4e1078e897966357$4,
    _u_ = [0, cst_fix_counter],
    _v_ = [0, cst_create_counter],
    cst_src_durable_ml$19 = cst_src_durable_ml$24,
    cst_src_durable_ml$20 = cst_src_durable_ml$24,
    cst_src_durable_ml$21 = cst_src_durable_ml$24,
    _w_ = [1, cst_create_counter_2_fix_count],
    _x_ = [0, cst$0],
    cst_src_durable_ml$22 = cst_src_durable_ml$24,
    cst_src_durable_ml$23 = cst_src_durable_ml$24,
    cst_e1eb3df59a4e1078e897966357$3 = cst_e1eb3df59a4e1078e897966357$4;
   function create(to_create, to_check_broken, to_rebuild, param){
    return [0,
            0,
            to_create,
            to_check_broken,
            0,
            caml_call5(Bus[7], 0, _a_, 0, 1, function(_av_){return 0;}),
            to_rebuild];
   }
   function is_broken_and_update_mvar(t, durable){
    var is_broken = caml_call1(t[3], durable);
    if(caml_call2(Core_Bool[24], t[4], is_broken))
     caml_call2(Bus[12], t[5], 1 - is_broken);
    t[4] = 1 - is_broken;
    return is_broken;
   }
   function create_or_fail(to_create, is_broken, to_rebuild, param){
    var
     t = create(to_create, is_broken, to_rebuild, 0),
     _at_ = caml_call1(t[2], 0);
    return caml_call2
            (Async_kernel[17],
             _at_,
             function(dur){
              if(is_broken_and_update_mvar(t, dur)){
               var
                _au_ =
                  caml_call1
                   (Core_Or_error[41], cst_Initial_durable_value_is_b);
               return caml_call1(Async_kernel[19], _au_);
              }
              t[1] = [1, dur];
              return caml_call1(Async_kernel[19], [0, t]);
             });
   }
   function with$0(t, f){
    function build(building){
     var
      building$0 =
        caml_call6
         (Async_kernel_Deferred_or_error[39],
          0,
          0,
          0,
          _c_,
          0,
          function(param){
           var _ap_ = caml_call1(building, 0);
           return caml_call2
                   (Async_kernel[22][3],
                    _ap_,
                    function(result){
                     var _aq_ = t[1];
                     a:
                     {
                      if(typeof _aq_ !== "number" && 0 === _aq_[0]){var _ar_ = 1; break a;}
                      var _ar_ = 0;
                     }
                     if(! _ar_)
                      throw caml_maybe_attach_backtrace
                             ([0, Assert_failure, _b_], 1);
                     if(0 === result[0])
                      var durable = result[1], _as_ = [1, durable];
                     else
                      var _as_ = 0;
                     t[1] = _as_;
                     return result;
                    });
          });
     t[1] = [0, building$0];
     return building$0;
    }
    var match = t[1];
    function _am_(durable){
     if(! is_broken_and_update_mvar(t, durable))
      return caml_call1(f, durable);
     var _ao_ = caml_call1(Core_Or_error[41], cst_Durable_value_was_broken_i);
     return caml_call1(Async_kernel[19], _ao_);
    }
    if(typeof match === "number")
     var _an_ = build(t[2]);
    else if(0 === match[0])
     var durable = match[1], _an_ = durable;
    else{
     var durable$0 = match[1];
     if(is_broken_and_update_mvar(t, durable$0)){
      var match$0 = t[6];
      if(match$0)
       var
        to_rebuild = match$0[1],
        _al_ = function(param){return caml_call1(to_rebuild, durable$0);};
      else
       var _al_ = t[2];
      var _an_ = build(_al_);
     }
     else
      var _an_ = caml_call1(Async_kernel[19], [0, durable$0]);
    }
    return caml_call2(Async_kernel[17], _an_, _am_);
   }
   function is_intact_bus(t){return caml_call1(Bus[6], t[5]);}
   caml_call8
    (Ppx_inline_test_lib[9],
     Inline_test_config,
     cst,
     0,
     cst_src_durable_ml$24,
     99,
     0,
     2585,
     function(param){
      function go(param){
       return caml_call1(Async_kernel_Async_kernel_sche[33][1], 0);
      }
      var create_counter = [0, 0], fix_counter = [0, 0];
      function is_broken(t){return t[1];}
      function create$0(param){
       return caml_call1(Async_kernel[19], [0, [0, 0]]);
      }
      function create$1(param){
       create_counter[1] = create_counter[1] + 1 | 0;
       return create$0(0);
      }
      function fix(t){
       fix_counter[1] = fix_counter[1] + 1 | 0;
       return create$0(0);
      }
      function create$2(use_fix, now){
       var to_rebuild = use_fix ? [0, fix] : 0;
       if(now){
        var
         _ai_ = Core[249],
         _aj_ = create_or_fail(create$1, is_broken, to_rebuild, 0);
        return caml_call2(Async_kernel[21], _aj_, _ai_);
       }
       var _ak_ = create(create$1, is_broken, to_rebuild, 0);
       return caml_call1(Async_kernel[19], _ak_);
      }
      function poke(t){
       with$0(t, function(t){return caml_call1(Async_kernel[19], _d_);});
       return 0;
      }
      var
       Expect_test_collector$0 =
         caml_call1(Expect_test_collector[2], Expect_test_config),
       _y_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_durable_ml$0),
          154,
          3874,
          3889,
          3907],
       _z_ =
         [0,
          [0,
           _g_,
           _f_,
           [0,
            caml_call1(Expect_test_common_File[1][6], cst_src_durable_ml$1),
            154,
            3874,
            3882,
            3888],
           _y_],
          0],
       _A_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_durable_ml$3),
          145,
          3627,
          3631,
          3908],
       _B_ =
         caml_call1
          (Expect_test_common_File[4][3], cst_e1eb3df59a4e1078e897966357);
      caml_call9
       (Expect_test_collector$0[3],
        _B_,
        _A_,
        cst_src_durable_ml$2,
        0,
        0,
        _z_,
        0,
        Inline_test_config,
        function(param){
         var pass = [0, 0], _ae_ = create$2(0, 1);
         caml_call2
          (Async_kernel[16],
           _ae_,
           function(t){
            var _ah_ = t[1];
            if(typeof _ah_ !== "number" && 1 === _ah_[0]){pass[1] = 1; return 0;}
            return 0;
           });
         go(0);
         var _af_ = [1, [0, _e_, [0, caml_call1(Core[309], pass[1]), 0]]];
         caml_call2(Core[250], 0, _af_);
         var
          _ag_ =
            [0,
             caml_call1(Expect_test_common_File[1][6], cst_src_durable_ml),
             154,
             3874,
             3882,
             3888];
         return caml_call1(Expect_test_collector$0[1], _ag_);
        });
      function build_break_poke(use_fix, now){
       create_counter[1] = 0;
       fix_counter[1] = 0;
       var _ac_ = create$2(use_fix, now);
       caml_call2
        (Async_kernel[16],
         _ac_,
         function(t){
          var
           _ad_ =
             with$0
              (t,
               function(fragile){
                fragile[1] = 1;
                return caml_call1(Async_kernel[19], _h_);
               });
          return caml_call2
                  (Async_kernel[16],
                   _ad_,
                   function(result){
                    caml_call1(Core_Or_error[36], result);
                    poke(t);
                    poke(t);
                    return poke(t);
                   });
         });
       return go(0);
      }
      var
       Expect_test_collector$1 =
         caml_call1(Expect_test_collector[2], Expect_test_config),
       _C_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_durable_ml$5),
          175,
          4378,
          4393,
          4437],
       _D_ =
         [0,
          [0,
           _l_,
           _k_,
           [0,
            caml_call1(Expect_test_common_File[1][6], cst_src_durable_ml$6),
            175,
            4378,
            4386,
            4392],
           _C_],
          0],
       _E_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_durable_ml$8),
          172,
          4235,
          4239,
          4438],
       _F_ =
         caml_call1
          (Expect_test_common_File[4][3], cst_e1eb3df59a4e1078e897966357$0);
      caml_call9
       (Expect_test_collector$1[3],
        _F_,
        _E_,
        cst_src_durable_ml$7,
        0,
        0,
        _D_,
        0,
        Inline_test_config,
        function(param){
         build_break_poke(1, 1);
         var
          _$_ =
            [0,
             [1, [0, _i_, [0, caml_call1(Core[363], fix_counter[1]), 0]]],
             0],
          _aa_ =
            [1,
             [0,
              [1, [0, _j_, [0, caml_call1(Core[363], create_counter[1]), 0]]],
              _$_]];
         caml_call2(Core[250], 0, _aa_);
         var
          _ab_ =
            [0,
             caml_call1(Expect_test_common_File[1][6], cst_src_durable_ml$4),
             175,
             4378,
             4386,
             4392];
         return caml_call1(Expect_test_collector$1[1], _ab_);
        });
      var
       Expect_test_collector$2 =
         caml_call1(Expect_test_collector[2], Expect_test_config),
       _G_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_durable_ml$10),
          181,
          4591,
          4606,
          4650],
       _H_ =
         [0,
          [0,
           _p_,
           _o_,
           [0,
            caml_call1(Expect_test_common_File[1][6], cst_src_durable_ml$11),
            181,
            4591,
            4599,
            4605],
           _G_],
          0],
       _I_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_durable_ml$13),
          178,
          4447,
          4451,
          4651],
       _J_ =
         caml_call1
          (Expect_test_common_File[4][3], cst_e1eb3df59a4e1078e897966357$1);
      caml_call9
       (Expect_test_collector$2[3],
        _J_,
        _I_,
        cst_src_durable_ml$12,
        0,
        0,
        _H_,
        0,
        Inline_test_config,
        function(param){
         build_break_poke(1, 0);
         var
          _Y_ =
            [0,
             [1, [0, _m_, [0, caml_call1(Core[363], fix_counter[1]), 0]]],
             0],
          _Z_ =
            [1,
             [0,
              [1, [0, _n_, [0, caml_call1(Core[363], create_counter[1]), 0]]],
              _Y_]];
         caml_call2(Core[250], 0, _Z_);
         var
          ___ =
            [0,
             caml_call1(Expect_test_common_File[1][6], cst_src_durable_ml$9),
             181,
             4591,
             4599,
             4605];
         return caml_call1(Expect_test_collector$2[1], ___);
        });
      var
       Expect_test_collector$3 =
         caml_call1(Expect_test_collector[2], Expect_test_config),
       _K_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_durable_ml$15),
          187,
          4804,
          4819,
          4863],
       _L_ =
         [0,
          [0,
           _t_,
           _s_,
           [0,
            caml_call1(Expect_test_common_File[1][6], cst_src_durable_ml$16),
            187,
            4804,
            4812,
            4818],
           _K_],
          0],
       _M_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_durable_ml$18),
          184,
          4660,
          4664,
          4864],
       _N_ =
         caml_call1
          (Expect_test_common_File[4][3], cst_e1eb3df59a4e1078e897966357$2);
      caml_call9
       (Expect_test_collector$3[3],
        _N_,
        _M_,
        cst_src_durable_ml$17,
        0,
        0,
        _L_,
        0,
        Inline_test_config,
        function(param){
         build_break_poke(0, 1);
         var
          _V_ =
            [0,
             [1, [0, _q_, [0, caml_call1(Core[363], fix_counter[1]), 0]]],
             0],
          _W_ =
            [1,
             [0,
              [1, [0, _r_, [0, caml_call1(Core[363], create_counter[1]), 0]]],
              _V_]];
         caml_call2(Core[250], 0, _W_);
         var
          _X_ =
            [0,
             caml_call1(Expect_test_common_File[1][6], cst_src_durable_ml$14),
             187,
             4804,
             4812,
             4818];
         return caml_call1(Expect_test_collector$3[1], _X_);
        });
      var
       Expect_test_collector$4 =
         caml_call1(Expect_test_collector[2], Expect_test_config),
       _O_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_durable_ml$20),
          193,
          5018,
          5033,
          5077],
       _P_ =
         [0,
          [0,
           _x_,
           _w_,
           [0,
            caml_call1(Expect_test_common_File[1][6], cst_src_durable_ml$21),
            193,
            5018,
            5026,
            5032],
           _O_],
          0],
       _Q_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_durable_ml$23),
          190,
          4873,
          4877,
          5078],
       _R_ =
         caml_call1
          (Expect_test_common_File[4][3], cst_e1eb3df59a4e1078e897966357$3);
      caml_call9
       (Expect_test_collector$4[3],
        _R_,
        _Q_,
        cst_src_durable_ml$22,
        0,
        0,
        _P_,
        0,
        Inline_test_config,
        function(param){
         build_break_poke(0, 0);
         var
          _S_ =
            [0,
             [1, [0, _u_, [0, caml_call1(Core[363], fix_counter[1]), 0]]],
             0],
          _T_ =
            [1,
             [0,
              [1, [0, _v_, [0, caml_call1(Core[363], create_counter[1]), 0]]],
              _S_]];
         caml_call2(Core[250], 0, _T_);
         var
          _U_ =
            [0,
             caml_call1(Expect_test_common_File[1][6], cst_src_durable_ml$19),
             193,
             5018,
             5026,
             5032];
         return caml_call1(Expect_test_collector$4[1], _U_);
        });
      return 0;
     });
   caml_call1(Ppx_inline_test_lib[6], cst_async_durable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_durable_Durable);
   var
    Async_durable_Durable = [0, create, create_or_fail, with$0, is_intact_bus];
   runtime.caml_register_global
    (80, Async_durable_Durable, cst_Async_durable_Durable);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_durable__Durable_state_rpc
//# unitInfo: Requires: Async_durable__Durable, Async_kernel, Async_kernel__Pipe, Async_kernel__Time_source, Async_rpc_kernel__Rpc, Core__Error, Core__Queue, Core__Time_float, Core__Time_ns, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_durable_Durable_stat = "Async_durable__Durable_state_rpc",
    cst_async_durable = "async_durable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_kernel = global_data.Async_kernel,
    Async_kernel_Time_source = global_data.Async_kernel__Time_source,
    Core_Queue = global_data.Core__Queue,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Core_Time_float = global_data.Core__Time_float,
    Core_Time_ns = global_data.Core__Time_ns,
    Async_durable_Durable = global_data.Async_durable__Durable,
    Core_Error = global_data.Core__Error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_durable_Durable_stat);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_durable);
   caml_call1(Expect_test_collector[6][1], "src/durable_state_rpc.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_async_durable, "durable_state_rpc.ml");
   var
    _a_ = [0, "Attempting_new_connection"],
    _b_ = [0, "Lost_connection"],
    _c_ = [0, "Connection_success"],
    _d_ = [0, "Failed_to_connect"],
    _e_ = [0, "Rpc_error"],
    _f_ = [0, "Update"],
    _g_ = [0, "State"];
   function sexp_of_t
   (of_state_001, of_update_002, of_error_003, of_metadata_004, param){
    if(typeof param === "number") return 0 === param ? _a_ : _b_;
    switch(param[0]){
      case 0:
       var
        arg0_005 = param[1],
        res0_006 = caml_call1(of_metadata_004, arg0_005);
       return [1, [0, _c_, [0, res0_006, 0]]];
      case 1:
       var
        arg0_007 = param[1],
        res0_008 = caml_call1(Core_Error[6], arg0_007);
       return [1, [0, _d_, [0, res0_008, 0]]];
      case 2:
       var arg0_009 = param[1], res0_010 = caml_call1(of_error_003, arg0_009);
       return [1, [0, _e_, [0, res0_010, 0]]];
      case 3:
       var
        arg0_011 = param[1],
        res0_012 = caml_call1(of_update_002, arg0_011);
       return [1, [0, _f_, [0, res0_012, 0]]];
      default:
       var arg0_013 = param[1], res0_014 = caml_call1(of_state_001, arg0_013);
       return [1, [0, _g_, [0, res0_014, 0]]];
    }
   }
   var Update = [0, sexp_of_t];
   function subscription_active(t){
    return 1 - caml_call1(Async_kernel_Pipe[17], t[1]);
   }
   function write(t, update){
    var _o_ = subscription_active(t);
    return _o_ ? caml_call2(Async_kernel_Pipe[28], t[1], update) : _o_;
   }
   function try_to_get_fresh_pipe(t){
    write(t, 0);
    var _n_ = caml_call2(Async_durable_Durable[3], t[2], t[4]);
    return caml_call2
            (Async_kernel[22][3],
             _n_,
             function(param){
              if(0 !== param[0]){
               var err = param[1];
               return [1, [0, -232504248, err]];
              }
              var result = param[1];
              if(0 === result[0]){
               var result$0 = result[1];
               return [0, result$0];
              }
              var e = result[1];
              return [1, [0, 457412494, e]];
             });
   }
   function subscribe(t){
    if(! subscription_active(t))
     return caml_call1(Async_kernel[19], 253848672);
    var _l_ = try_to_get_fresh_pipe(t);
    return caml_call2
            (Async_kernel[22][2],
             _l_,
             function(param){
              if(0 === param[0]){
               var
                match = param[1],
                id = match[3],
                pipe = match[2],
                state = match[1];
               write(t, [0, id]);
               write(t, [4, state]);
               return caml_call1(Async_kernel[19], [0, 17724, pipe]);
              }
              var err = param[1];
              if(457412494 <= err[1]){
               var e = err[2];
               write(t, [2, e]);
              }
              else{var e$0 = err[2]; write(t, [1, e$0]);}
              var _m_ = caml_call2(Async_kernel_Time_source[29], t[5], t[3]);
              return caml_call2
                      (Async_kernel[22][2],
                       _m_,
                       function(param){return subscribe(t);});
             });
   }
   function handle_update_pipe(t, deferred_pipe){
    return caml_call2
            (Async_kernel[16],
             deferred_pipe,
             function(param){
              if(typeof param === "number") return 0;
              var
               pipe = param[2],
               _j_ =
                 caml_call4
                  (Async_kernel_Pipe[53],
                   0,
                   pipe,
                   t[1],
                   function(updates){
                    var
                     _k_ =
                       caml_call2
                        (Core_Queue[50],
                         updates,
                         function(update){return [3, update];});
                    return caml_call1(Async_kernel[19], _k_);
                   });
              return caml_call2
                      (Async_kernel[16],
                       _j_,
                       function(param){
                        write(t, 1);
                        return handle_update_pipe(t, subscribe(t));
                       });
             });
   }
   function create_internal(opt, connection, dispatch, resubscribe_delay){
    var
     time_source = opt ? opt[1] : caml_call1(Async_kernel_Time_source[10], 0),
     match = caml_call3(Async_kernel_Pipe[7], 0, 0, 0),
     updates_writer = match[2],
     updates_reader = match[1],
     _i_ = caml_call1(Core_Time_float[84][88], resubscribe_delay),
     resubscribe_delay$0 = caml_call1(Core_Time_ns[1][81], _i_),
     t =
       [0,
        updates_writer,
        connection,
        resubscribe_delay$0,
        dispatch,
        time_source];
    return [0, updates_reader, t];
   }
   function create(time_source, connection, dispatch, resubscribe_delay){
    var
     match =
       create_internal(time_source, connection, dispatch, resubscribe_delay),
     t = match[2],
     updates_reader = match[1];
    handle_update_pipe(t, subscribe(t));
    return updates_reader;
   }
   function create_or_fail
   (time_source, connection, dispatch, resubscribe_delay){
    var
     match =
       create_internal(time_source, connection, dispatch, resubscribe_delay),
     t = match[2],
     updates_reader = match[1],
     _h_ = try_to_get_fresh_pipe(t);
    return caml_call2
            (Async_kernel[22][3],
             _h_,
             function(param){
              if(0 === param[0]){
               var
                match = param[1],
                id = match[3],
                fresh_pipe = match[2],
                new_state = match[1];
               write(t, [0, id]);
               write(t, [4, new_state]);
               handle_update_pipe
                (t, caml_call1(Async_kernel[19], [0, 17724, fresh_pipe]));
               return [0, [0, updates_reader]];
              }
              var match$0 = param[1];
              if(457412494 <= match$0[1]){
               var e = match$0[2];
               return [0, [1, e]];
              }
              var e$0 = match$0[2];
              return [1, e$0];
             });
   }
   function create$0(time_source, connection, rpc, query, resubscribe_delay){
    function dispatch(conn){
     return caml_call4(Async_rpc_kernel_Rpc[9][10], 0, rpc, conn, query);
    }
    return create(time_source, connection, dispatch, resubscribe_delay);
   }
   function create_versioned
   (time_source, connection, rpc_module, query, resubscribe_delay){
    function dispatch(conn){return caml_call2(rpc_module[1], conn, query);}
    return create(time_source, connection, dispatch, resubscribe_delay);
   }
   function create_versioned$0
   (time_source, connection, rpc_module, query, resubscribe_delay){
    function dispatch(conn){return caml_call2(rpc_module[1], conn, query);}
    return create(time_source, connection, dispatch, resubscribe_delay);
   }
   function create_or_fail$0
   (time_source, connection, rpc, query, resubscribe_delay){
    function dispatch(conn){
     return caml_call4(Async_rpc_kernel_Rpc[9][10], 0, rpc, conn, query);
    }
    return create_or_fail
            (time_source, connection, dispatch, resubscribe_delay);
   }
   function create_or_fail_versioned
   (time_source, connection, rpc_module, query, resubscribe_delay){
    function dispatch(conn){return caml_call2(rpc_module[1], conn, query);}
    return create_or_fail
            (time_source, connection, dispatch, resubscribe_delay);
   }
   function create_or_fail_versioned$0
   (time_source, connection, rpc_module, query, resubscribe_delay){
    function dispatch(conn){return caml_call2(rpc_module[1], conn, query);}
    return create_or_fail
            (time_source, connection, dispatch, resubscribe_delay);
   }
   caml_call1(Ppx_inline_test_lib[6], cst_async_durable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_durable_Durable_stat);
   var
    Async_durable_Durable_state_rp =
      [0,
       Update,
       create$0,
       create_or_fail$0,
       create_versioned,
       create_versioned$0,
       create_or_fail_versioned,
       create_or_fail_versioned$0,
       [0, create, create_or_fail]];
   runtime.caml_register_global
    (27, Async_durable_Durable_state_rp, cst_Async_durable_Durable_stat);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_durable__Durable_pipe_rpc
//# unitInfo: Requires: Async_durable__Durable_state_rpc, Async_kernel, Async_kernel__Pipe, Async_rpc_kernel__Rpc, Core__Result, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_durable_Durable_pipe = "Async_durable__Durable_pipe_rpc",
    cst_async_durable = "async_durable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Result = global_data.Core__Result,
    Async_kernel = global_data.Async_kernel,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_durable_Durable_state_rp =
      global_data.Async_durable__Durable_state_rpc,
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_durable_Durable_pipe);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_durable);
   caml_call1(Expect_test_collector[6][1], "src/durable_pipe_rpc.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_async_durable, "durable_pipe_rpc.ml");
   var Update = [0], _a_ = [0, 0], _b_ = [0, 1];
   function filter_map_update(update){
    if(typeof update === "number") return 0 === update ? _a_ : _b_;
    switch(update[0]){
      case 0:
       var metadata = update[1]; return [0, [0, metadata]];
      case 1:
       var e = update[1]; return [0, [1, e]];
      case 2:
       var e$0 = update[1]; return [0, [2, e$0]];
      case 3:
       var r = update[1]; return [0, [3, r]];
      default: return 0;
    }
   }
   function create(time_source, connection, rpc, query, resubscribe_delay){
    function dispatch(conn){
     function _O_(param){
      var id = param[2], pipe = param[1];
      return [0, 0, pipe, id];
     }
     var
      _P_ = Core_Result[39],
      _Q_ = caml_call4(Async_rpc_kernel_Rpc[8][10], 0, rpc, conn, query);
     return caml_call2
             (Async_kernel[18],
              _Q_,
              function(_R_){return caml_call2(_P_, _R_, _O_);});
    }
    var
     _N_ =
       caml_call4
        (Async_durable_Durable_state_rp[8][1],
         time_source,
         connection,
         dispatch,
         resubscribe_delay);
    return caml_call3(Async_kernel_Pipe[61], 0, _N_, filter_map_update);
   }
   function create_versioned
   (time_source, connection, rpc_module, query, resubscribe_delay){
    function dispatch(conn){
     function _J_(param){
      var id = param[2], pipe = param[1];
      return [0, 0, pipe, id];
     }
     var _K_ = Core_Result[39], _L_ = caml_call2(rpc_module[1], conn, query);
     return caml_call2
             (Async_kernel[18],
              _L_,
              function(_M_){return caml_call2(_K_, _M_, _J_);});
    }
    var
     _I_ =
       caml_call4
        (Async_durable_Durable_state_rp[8][1],
         time_source,
         connection,
         dispatch,
         resubscribe_delay);
    return caml_call3(Async_kernel_Pipe[61], 0, _I_, filter_map_update);
   }
   function create_versioned$0
   (time_source, connection, rpc_module, query, resubscribe_delay){
    function dispatch(conn){
     function _E_(param){
      var id = param[2], pipe = param[1];
      return [0, 0, pipe, id];
     }
     var _F_ = Core_Result[39], _G_ = caml_call2(rpc_module[1], conn, query);
     return caml_call2
             (Async_kernel[18],
              _G_,
              function(_H_){return caml_call2(_F_, _H_, _E_);});
    }
    var
     _D_ =
       caml_call4
        (Async_durable_Durable_state_rp[8][1],
         time_source,
         connection,
         dispatch,
         resubscribe_delay);
    return caml_call3(Async_kernel_Pipe[61], 0, _D_, filter_map_update);
   }
   function create_or_fail
   (time_source, connection, rpc, query, resubscribe_delay){
    function dispatch(conn){
     function _z_(param){
      var id = param[2], pipe = param[1];
      return [0, 0, pipe, id];
     }
     var
      _A_ = Core_Result[39],
      _B_ = caml_call4(Async_rpc_kernel_Rpc[8][10], 0, rpc, conn, query);
     return caml_call2
             (Async_kernel[18],
              _B_,
              function(_C_){return caml_call2(_A_, _C_, _z_);});
    }
    var _u_ = Async_kernel_Pipe[61];
    function _v_(eta){return caml_call3(_u_, 0, eta, filter_map_update);}
    var
     _w_ = Core_Result[39],
     _x_ =
       caml_call4
        (Async_durable_Durable_state_rp[8][2],
         time_source,
         connection,
         dispatch,
         resubscribe_delay);
    return caml_call2
            (Async_kernel[18],
             _x_,
             function(_y_){return caml_call2(_w_, _y_, _v_);});
   }
   function create_or_fail_versioned
   (time_source, connection, rpc_module, query, resubscribe_delay){
    function dispatch(conn){
     function _q_(param){
      var id = param[2], pipe = param[1];
      return [0, 0, pipe, id];
     }
     var _r_ = Core_Result[39], _s_ = caml_call2(rpc_module[1], conn, query);
     return caml_call2
             (Async_kernel[18],
              _s_,
              function(_t_){return caml_call2(_r_, _t_, _q_);});
    }
    var _l_ = Async_kernel_Pipe[61];
    function _m_(eta){return caml_call3(_l_, 0, eta, filter_map_update);}
    var
     _n_ = Core_Result[39],
     _o_ =
       caml_call4
        (Async_durable_Durable_state_rp[8][2],
         time_source,
         connection,
         dispatch,
         resubscribe_delay);
    return caml_call2
            (Async_kernel[18],
             _o_,
             function(_p_){return caml_call2(_n_, _p_, _m_);});
   }
   function create_or_fail_versioned$0
   (time_source, connection, rpc_module, query, resubscribe_delay){
    function dispatch(conn){
     function _h_(param){
      var id = param[2], pipe = param[1];
      return [0, 0, pipe, id];
     }
     var _i_ = Core_Result[39], _j_ = caml_call2(rpc_module[1], conn, query);
     return caml_call2
             (Async_kernel[18],
              _j_,
              function(_k_){return caml_call2(_i_, _k_, _h_);});
    }
    var _c_ = Async_kernel_Pipe[61];
    function _d_(eta){return caml_call3(_c_, 0, eta, filter_map_update);}
    var
     _e_ = Core_Result[39],
     _f_ =
       caml_call4
        (Async_durable_Durable_state_rp[8][2],
         time_source,
         connection,
         dispatch,
         resubscribe_delay);
    return caml_call2
            (Async_kernel[18],
             _f_,
             function(_g_){return caml_call2(_e_, _g_, _d_);});
   }
   caml_call1(Ppx_inline_test_lib[6], cst_async_durable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_durable_Durable_pipe);
   var
    Async_durable_Durable_pipe_rpc =
      [0,
       Update,
       create,
       create_or_fail,
       create_versioned,
       create_versioned$0,
       create_or_fail_versioned,
       create_or_fail_versioned$0];
   runtime.caml_register_global
    (18, Async_durable_Durable_pipe_rpc, cst_Async_durable_Durable_pipe);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_durable__Durable_subscription
//# unitInfo: Requires: Async_durable__Durable_pipe_rpc, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_durable_Durable_subs = "Async_durable__Durable_subscription",
    cst_async_durable = "async_durable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_durable_Durable_pipe_rpc =
      global_data.Async_durable__Durable_pipe_rpc;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_durable_Durable_subs);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_durable);
   caml_call1(Expect_test_collector[6][1], "src/durable_subscription.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_async_durable, "durable_subscription.ml");
   var
    create = Async_durable_Durable_pipe_rpc[2],
    create_or_fail = Async_durable_Durable_pipe_rpc[3];
   caml_call1(Ppx_inline_test_lib[6], cst_async_durable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_durable_Durable_subs);
   var
    Async_durable_Durable_subscrip =
      [0, Async_durable_Durable_pipe_rpc[1], create, create_or_fail];
   runtime.caml_register_global
    (12, Async_durable_Durable_subscrip, cst_Async_durable_Durable_subs);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Async_durable
//# unitInfo: Requires: Async_durable__Durable, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Async_durable = "Async_durable",
    cst_async_durable = "async_durable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_durable_Durable = global_data.Async_durable__Durable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Async_durable);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_async_durable);
   caml_call1(Expect_test_collector[6][1], "src/async_durable.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_async_durable, "async_durable.ml");
   var
    create = Async_durable_Durable[1],
    create_or_fail = Async_durable_Durable[2],
    with$0 = Async_durable_Durable[3],
    is_intact_bus = Async_durable_Durable[4];
   caml_call1(Ppx_inline_test_lib[6], cst_async_durable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Async_durable);
   var Async_durable = [0, create, create_or_fail, with$0, is_intact_bus];
   runtime.caml_register_global(12, Async_durable, cst_Async_durable);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
