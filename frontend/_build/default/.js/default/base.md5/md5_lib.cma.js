// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Md5_lib
//# unitInfo: Requires: Stdlib__Digest
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_Digest = global_data.Stdlib__Digest,
    Assert_failure = global_data.Assert_failure,
    empty = caml_call1(Stdlib_Digest[3], cst);
   function make(s){return s === empty ? empty : s;}
   var
    compare = runtime.caml_compare,
    _a_ = [0, "md5/src/md5_lib.ml", 16, 22];
   function to_binary(s){return s;}
   function of_binary_exn(s){
    if(runtime.caml_ml_string_length(s) === 16) return make(s);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   var to_hex = Stdlib_Digest[11];
   function of_hex_exn(s){return make(caml_call1(Stdlib_Digest[13], s));}
   function string(s){return make(caml_call1(Stdlib_Digest[3], s));}
   function bytes(s){return make(caml_call1(Stdlib_Digest[4], s));}
   function subbytes(bytes, pos, len){
    return make(caml_call3(Stdlib_Digest[6], bytes, pos, len));
   }
   var
    Md5_lib =
      [0,
       compare,
       16,
       to_binary,
       of_binary_exn,
       make,
       to_hex,
       of_hex_exn,
       string,
       bytes,
       subbytes];
   runtime.caml_register_global(4, Md5_lib, "Md5_lib");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWQ1X2xpYi5jbWEuanMiLCJzZWN0aW9ucyI6W3sib2Zmc2V0Ijp7ImxpbmUiOjksImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWQ1X2xpYi5jbWEuanMiLCJuYW1lcyI6WyJydW50aW1lIiwiY2FtbF9tYXliZV9hdHRhY2hfYmFja3RyYWNlIiwiY2FtbF9jYWxsMSIsImYiLCJhMCIsImNhbWxfY2FsbDMiLCJhMSIsImEyIiwiZ2xvYmFsX2RhdGEiLCJjc3QiLCJTdGRsaWJfRGlnZXN0IiwiQXNzZXJ0X2ZhaWx1cmUiLCJlbXB0eSIsIm1ha2UiLCJzIiwiY29tcGFyZSIsInRvX2JpbmFyeSIsIm9mX2JpbmFyeV9leG4iLCJ0b19oZXgiLCJvZl9oZXhfZXhuIiwic3RyaW5nIiwiYnl0ZXMiLCJzdWJieXRlcyIsInBvcyIsImxlbiIsIk1kNV9saWIiXSwic291cmNlcyI6WyIvYnVpbHRpbi9ibGFja2JveC5tbCIsIi9Vc2Vycy95YW5uaWNrLy5vcGFtL2JvbnNhaS1mcm9udGVuZC9saWIvYmFzZS9tZDUvbWQ1X2xpYi5tbCJdLCJtYXBwaW5ncyI6IklBQUFBLFVBQUE7QUFBQSxJQUFBQyw4QkFBQTtBQUFBLFlBQUFDLFdBQUFDLEdBQUFDO0FBQUFBLElBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUFBQyxXQUFBRixHQUFBQyxJQUFBRSxJQUFBQztBQUFBQSxJQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBQyxjQUFBO0FBQUEsSUFBQUMsTUFBQTtBQUFBLElBQUFDLGdCQUFBO0FBQUEsSUFBQUMsaUJBQUE7QUFBQSxJQUFBQyxRQ0dZO0FBQUEsWUFBQUMsS0FBQUMsR0FFRSw4QkFHVDtBQUFBO0FBQUEsSUFBQUMsVUFMdUI7QUFBQTtBQUFBLFlBQUFDLFVBQUFGLEdBV1YsU0FBQztBQUFBLFlBQUFHLGNBQUFIO0FBQUFBLElBQ0csNENBQW1DLGNBQU07QUFBQSxJQUF6QztBQUFBLEdBQXlDO0FBQUEsT0FBQUksU0FabkM7QUFBQSxZQUFBQyxXQUFBTCxHQWdCSixPQUFtQixLQUFuQixpQ0FBbUI7QUFBQSxZQUFBTSxPQUFBTixHQUV2QixPQUFpQixLQUFqQixnQ0FBaUI7QUFBQSxZQUFBTyxNQUFBUCxHQUVsQixPQUFnQixLQUFoQixnQ0FBZ0I7QUFBQSxZQUFBUSxTQUFBRCxPQUFBRSxLQUFBQztBQUFBQSxJQUVDLE9BQStCLEtBQS9CLDhDQUErQjtBQUFBO0FBQUE7QUFBQSxJQUFBQztBQUFBQSxNQXRCdkM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFREg1QiIsInNvdXJjZXNDb250ZW50IjpbIigqIGdlbmVyYXRlZCBjb2RlICopIiwidHlwZSB0ID0gc3RyaW5nXG5cbigqIFNoYXJlIHRoZSBkaWdlc3Qgb2YgdGhlIGVtcHR5IHN0cmluZyAqKVxubGV0IGVtcHR5ID0gRGlnZXN0LnN0cmluZyBcIlwiXG5sZXQgbWFrZSBzID1cbiAgaWYgcyA9IGVtcHR5IHRoZW5cbiAgICBlbXB0eVxuICBlbHNlXG4gICAgc1xuXG5sZXQgY29tcGFyZSA9IGNvbXBhcmVcblxubGV0IGxlbmd0aCA9IDE2XG5cbmxldCB0b19iaW5hcnkgcyA9IHNcbmxldCBvZl9iaW5hcnlfZXhuIHMgPSBhc3NlcnQgKFN0cmluZy5sZW5ndGggcyA9IGxlbmd0aCk7IG1ha2Ugc1xubGV0IHVuc2FmZV9vZl9iaW5hcnkgPSBtYWtlXG5cbmxldCB0b19oZXggPSBEaWdlc3QudG9faGV4XG5sZXQgb2ZfaGV4X2V4biBzID0gbWFrZSAoRGlnZXN0LmZyb21faGV4IHMpXG5cbmxldCBzdHJpbmcgcyA9IG1ha2UgKERpZ2VzdC5zdHJpbmcgcylcblxubGV0IGJ5dGVzIHMgPSBtYWtlIChEaWdlc3QuYnl0ZXMgcylcblxubGV0IHN1YmJ5dGVzIGJ5dGVzIH5wb3MgfmxlbiA9IG1ha2UgKERpZ2VzdC5zdWJieXRlcyBieXRlcyBwb3MgbGVuKVxuIl0sImlnbm9yZUxpc3QiOlswXX19XX0=
