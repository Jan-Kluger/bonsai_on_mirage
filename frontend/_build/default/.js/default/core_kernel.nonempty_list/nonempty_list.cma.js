// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Nonempty_list
//# unitInfo: Requires: Base, Base__Indexed_container, Base__Monad, Base__Sequence, Base_quickcheck__Generator, Base_quickcheck__Observer, Base_quickcheck__Shrinker, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Core, Core__Binable, Core__Bool, Core__Command_internal, Core__Comparator, Core__Fn, Core__List, Core__Map, Core__Or_error, Core__Result, Core__Sequence, Core__Sexpable, Core__Stable, Expect_test_collector, Expect_test_common__File, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Reversed_list, Sexplib0__Sexp_conv, Stable_witness, Stdlib, Typerep_lib__Make_typename, Typerep_lib__Std, Typerep_lib__Typename, Validate
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst$1 = "::",
    cst_Nonempty_list = "Nonempty_list",
    cst_a = "a",
    cst_bb4c551905c64839d260711a8e = "bb4c551905c64839d260711a8ee5e34d",
    cst_nonempty_list = "nonempty_list",
    cst_nonempty_list_src_nonempty$6 = "nonempty_list/src/nonempty_list.ml",
    cst_nonempty_list_src_nonempty$5 =
      "nonempty_list/src/nonempty_list.ml.T'.t",
    cst_t$3 = "t";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$1,
    name = cst_nonempty_list_src_nonempty$5,
    cst$0 = cst$1,
    name$0 = "nonempty_list/src/nonempty_list.ml.Option.t",
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Core_Command_internal = global_data.Core__Command_internal,
    Core_Fn = global_data.Core__Fn,
    Core_List = global_data.Core__List,
    Reversed_list = global_data.Reversed_list,
    Validate = global_data.Validate,
    Core_Or_error = global_data.Core__Or_error,
    Core_Result = global_data.Core__Result,
    Core_Sequence = global_data.Core__Sequence,
    Core_Map = global_data.Core__Map,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Typerep_lib_Typename = global_data.Typerep_lib__Typename,
    Typerep_lib_Std = global_data.Typerep_lib__Std,
    Base_quickcheck_Shrinker = global_data.Base_quickcheck__Shrinker,
    Base_Sequence = global_data.Base__Sequence,
    Base = global_data.Base,
    Base_quickcheck_Observer = global_data.Base_quickcheck__Observer,
    Base_quickcheck_Generator = global_data.Base_quickcheck__Generator,
    Core_Stable = global_data.Core__Stable,
    Stdlib = global_data.Stdlib,
    Expect_test_common_File = global_data.Expect_test_common__File,
    Stable_witness = global_data.Stable_witness,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Binable = global_data.Core__Binable,
    Core_Sexpable = global_data.Core__Sexpable,
    Expect_test_config = global_data.Expect_test_config,
    Inline_test_config = global_data.Inline_test_config,
    Typerep_lib_Make_typename = global_data.Typerep_lib__Make_typename,
    Core_Comparator = global_data.Core__Comparator,
    Base_Indexed_container = global_data.Base__Indexed_container,
    Base_Monad = global_data.Base__Monad;
   caml_call1(Ppx_module_timer_runtime[4], cst_Nonempty_list);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_nonempty_list);
   caml_call1(Expect_test_collector[6][1], cst_nonempty_list_src_nonempty$6);
   caml_call2(Ppx_inline_test_lib[5], cst_nonempty_list, "nonempty_list.ml");
   var
    cst_Nonempty_list_of_list_exn_ = "Nonempty_list.of_list_exn: empty list";
   function compare(cmp_a, a_001, b_002){
    if(a_001 === b_002) return 0;
    var
     b_006 = b_002[2],
     b_004 = b_002[1],
     a_005 = a_001[2],
     a_003 = a_001[1],
     n = caml_call2(cmp_a, a_003, b_004);
    return 0 === n
            ? caml_call3
              (Core_Stable[377],
               function(a_007, b_008){return caml_call2(cmp_a, a_007, b_008);},
               a_005,
               b_006)
            : n;
   }
   function equal(cmp_a, a_009, b_010){
    if(a_009 === b_010) return 1;
    var
     b_014 = b_010[2],
     b_012 = b_010[1],
     a_013 = a_009[2],
     a_011 = a_009[1],
     _bm_ = caml_call2(cmp_a, a_011, b_012);
    return _bm_
            ? caml_call3
              (Core_Stable[390],
               function(a_015, b_016){return caml_call2(cmp_a, a_015, b_016);},
               a_013,
               b_014)
            : _bm_;
   }
   function hash_fold_t(hash_fold_a, hsv, arg){
    var a1 = arg[2], a0 = arg[1], hsv$0 = caml_call2(hash_fold_a, hsv, a0);
    return caml_call3(Core_Stable[228], hash_fold_a, hsv$0, a1);
   }
   function to_list(param){
    var tl = param[2], hd = param[1];
    return [0, hd, tl];
   }
   function of_list_exn(param){
    if(param){var tl = param[2], hd = param[1]; return [0, hd, tl];}
    var
     _bl_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Nonempty_list_of_list_exn_);
    return caml_call1(Core[255], _bl_);
   }
   var
    _a_ = caml_call1(Bin_shape[3][1], cst_a),
    _b_ =
      caml_call1(Bin_shape[4][1], "nonempty_list/src/nonempty_list.ml:19:18"),
    _c_ = caml_call2(Bin_prot_Shape[11], _b_, _a_),
    _d_ = caml_call1(Core_Stable[149], _c_),
    _e_ = [0, caml_call1(Bin_shape[3][1], cst_a), 0],
    _f_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$3), _e_, _d_], 0],
    _g_ =
      caml_call1(Bin_shape[4][1], "nonempty_list/src/nonempty_list.ml:19:6"),
    group = caml_call2(Bin_prot_Shape[2], _g_, _f_),
    cst_t = cst_t$3;
   function bin_shape_t(a){
    var _bk_ = caml_call1(Bin_shape[2][1], cst_t);
    return caml_call1(caml_call2(Bin_prot_Shape[10], group, _bk_), [0, a, 0]);
   }
   function bin_size_t(size_of_a, v){
    return caml_call2(Core_Stable[18], size_of_a, v);
   }
   function bin_write_t(write_a, buf, pos, v){
    return caml_call4(Core_Stable[151], write_a, buf, pos, v);
   }
   function bin_read_t(of_a, buf, pos_ref, vint){
    return caml_call3(caml_call1(Core_Stable[154], of_a), buf, pos_ref, vint);
   }
   function bin_read_t$0(of_a, buf, pos_ref){
    return caml_call2(caml_call1(Core_Stable[153], of_a), buf, pos_ref);
   }
   var t_of_sexp = Core_Stable[280], sexp_of_t = Core_Stable[279];
   function stable_witness(a_stable_witness){return Stable_witness[6];}
   var
    caller_identity =
      caml_call1(Bin_shape[5][1], "9a63aaee-82e0-11ea-8fb6-aa00005c6184"),
    _h_ =
      caml_call1
       (caml_call1
         (Core_Binable[16][2][2],
          [0, bin_shape_t, bin_size_t, bin_write_t, bin_read_t$0, bin_read_t]),
        [0, to_list, of_list_exn, caller_identity]),
    bin_shape_t$0 = _h_[1],
    bin_size_t$0 = _h_[2],
    bin_write_t$0 = _h_[3],
    bin_read_t$1 = _h_[4],
    bin_read_t$2 = _h_[5],
    bin_writer_t = _h_[6],
    bin_reader_t = _h_[7],
    bin_t = _h_[8],
    include =
      caml_call1
       (caml_call1(Core_Sexpable[2][2][1], [0, t_of_sexp, sexp_of_t]),
        [0, to_list, of_list_exn]),
    t_of_sexp$0 = include[1],
    sexp_of_t$0 = include[2];
   function t_sexp_grammar(param){return [2, [0, param, [1, param]]];}
   function stable_witness$0(witness){
    return caml_call4
            (caml_call1(caml_call1(Stable_witness[3], [0]), [0])[1],
             stable_witness,
             of_list_exn,
             to_list,
             witness);
   }
   var
    Expect_test_collector$0 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_nonempty_list_src_nonempty = cst_nonempty_list_src_nonempty$6,
    _i_ =
      [0,
       caml_call1
        (Expect_test_common_File[1][6], cst_nonempty_list_src_nonempty$6),
       60,
       1541,
       1556,
       1594],
    _j_ =
      [0,
       [0,
        [0, cst$2],
        [1, " eaa5c1535ea5c1691291b3bdbbd7b014 "],
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_nonempty_list_src_nonempty$6),
         60,
         1541,
         1549,
         1555],
        _i_],
       0],
    _k_ =
      [0,
       caml_call1
        (Expect_test_common_File[1][6], cst_nonempty_list_src_nonempty$6),
       58,
       1475,
       1479,
       1595],
    _l_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_bb4c551905c64839d260711a8e);
   caml_call9
    (Expect_test_collector$0[3],
     _l_,
     _k_,
     cst_nonempty_list_src_nonempty$6,
     0,
     0,
     _j_,
     0,
     Inline_test_config,
     function(param){
      var
       _bg_ = caml_call1(bin_shape_t$0, Core_Stable[79]),
       _bh_ = caml_call1(Bin_prot_Shape[15], _bg_),
       _bi_ = caml_call1(Bin_shape[19][4], _bh_);
      caml_call1(Stdlib[46], _bi_);
      var
       _bj_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_nonempty_list_src_nonempty),
          60,
          1541,
          1549,
          1555];
      return caml_call1(Expect_test_collector$0[1], _bj_);
     });
   function compare$0(cmp_a, a_022, b_023){
    if(a_022 === b_023) return 0;
    var
     b_027 = b_023[2],
     b_025 = b_023[1],
     a_026 = a_022[2],
     a_024 = a_022[1],
     n = caml_call2(cmp_a, a_024, b_025);
    return 0 === n
            ? caml_call3
              (Core_Stable[377],
               function(a_028, b_029){return caml_call2(cmp_a, a_028, b_029);},
               a_026,
               b_027)
            : n;
   }
   function equal$0(cmp_a, a_030, b_031){
    if(a_030 === b_031) return 1;
    var
     b_035 = b_031[2],
     b_033 = b_031[1],
     a_034 = a_030[2],
     a_032 = a_030[1],
     _bf_ = caml_call2(cmp_a, a_032, b_033);
    return _bf_
            ? caml_call3
              (Core_Stable[390],
               function(a_036, b_037){return caml_call2(cmp_a, a_036, b_037);},
               a_034,
               b_035)
            : _bf_;
   }
   function hash_fold_t$0(hash_fold_a, hsv, arg){
    var a1 = arg[2], a0 = arg[1], hsv$0 = caml_call2(hash_fold_a, hsv, a0);
    return caml_call3(Core_Stable[228], hash_fold_a, hsv$0, a1);
   }
   var
    _m_ = caml_call1(Bin_shape[3][1], cst_a),
    _n_ =
      caml_call1(Bin_shape[4][1], "nonempty_list/src/nonempty_list.ml:78:15"),
    _o_ = caml_call2(Bin_prot_Shape[11], _n_, _m_),
    _p_ = [0, [0, "tl", caml_call1(Core_Stable[149], _o_)], 0],
    _q_ = caml_call1(Bin_shape[3][1], cst_a),
    _r_ =
      caml_call1(Bin_shape[4][1], "nonempty_list/src/nonempty_list.ml:77:15"),
    _s_ = [0, [0, "hd", caml_call2(Bin_prot_Shape[11], _r_, _q_)], _p_],
    _t_ = caml_call1(Bin_prot_Shape[4], _s_),
    _u_ = [0, caml_call1(Bin_shape[3][1], cst_a), 0],
    _v_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$3), _u_, _t_], 0],
    _w_ =
      caml_call1(Bin_shape[4][1], "nonempty_list/src/nonempty_list.ml:76:6"),
    group$0 = caml_call2(Bin_prot_Shape[2], _w_, _v_),
    cst_t$0 = cst_t$3,
    cst_nonempty_list_src_nonempty$0 =
      "nonempty_list/src/nonempty_list.ml.Stable.V2.Record_format.t";
   function bin_shape_t$1(a){
    var _be_ = caml_call1(Bin_shape[2][1], cst_t$0);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$0, _be_), [0, a, 0]);
   }
   function bin_size_t$1(size_of_a, param){
    var
     v2 = param[2],
     v1 = param[1],
     _bc_ = caml_call1(size_of_a, v1),
     size = caml_call2(Bin_prot_Common[23], 0, _bc_),
     _bd_ = caml_call2(Core_Stable[18], size_of_a, v2);
    return caml_call2(Bin_prot_Common[23], size, _bd_);
   }
   function bin_write_t$1(write_a, buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(write_a, buf, pos, v1);
    return caml_call4(Core_Stable[151], write_a, buf, pos$0, v2);
   }
   function bin_read_t$3(of_a, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_nonempty_list_src_nonempty$0,
             pos_ref[1]);
   }
   function bin_read_t$4(of_a, buf, pos_ref){
    var
     v_hd = caml_call2(of_a, buf, pos_ref),
     v_tl = caml_call2(caml_call1(Core_Stable[153], of_a), buf, pos_ref);
    return [0, v_hd, v_tl];
   }
   function stable_witness$1(a_stable_witness){return Stable_witness[6];}
   function of_nonempty_list(param){
    var tl = param[2], hd = param[1];
    return [0, hd, tl];
   }
   function to_nonempty_list(param){
    var tl = param[2], hd = param[1];
    return [0, hd, tl];
   }
   var
    include$0 =
      caml_call1
       (caml_call1
         (Core_Binable[16][2][1],
          [0,
           bin_shape_t$1,
           bin_size_t$1,
           bin_write_t$1,
           bin_read_t$4,
           bin_read_t$3]),
        [0, of_nonempty_list, to_nonempty_list]),
    bin_shape_t$2 = include$0[1],
    bin_size_t$2 = include$0[2],
    bin_write_t$2 = include$0[3],
    bin_read_t$5 = include$0[4],
    bin_read_t$6 = include$0[5],
    bin_writer_t$0 = include$0[6],
    bin_reader_t$0 = include$0[7],
    bin_t$0 = include$0[8];
   function stable_witness$2(witness){
    return caml_call4
            (caml_call1(caml_call1(Stable_witness[3], [0]), [0])[1],
             stable_witness$1,
             to_nonempty_list,
             of_nonempty_list,
             witness);
   }
   var
    Expect_test_collector$1 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_nonempty_list_src_nonempty$1 = cst_nonempty_list_src_nonempty$6,
    _x_ =
      [0,
       caml_call1
        (Expect_test_common_File[1][6], cst_nonempty_list_src_nonempty$6),
       108,
       2792,
       2807,
       2845],
    _y_ =
      [0,
       [0,
        [0, cst$2],
        [1, " 2aede2e9b03754f5dfa5f1a61877b330 "],
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_nonempty_list_src_nonempty$6),
         108,
         2792,
         2800,
         2806],
        _x_],
       0],
    _z_ =
      [0,
       caml_call1
        (Expect_test_common_File[1][6], cst_nonempty_list_src_nonempty$6),
       106,
       2726,
       2730,
       2846],
    _A_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_bb4c551905c64839d260711a8e);
   caml_call9
    (Expect_test_collector$1[3],
     _A_,
     _z_,
     cst_nonempty_list_src_nonempty$6,
     0,
     0,
     _y_,
     0,
     Inline_test_config,
     function(param){
      var
       _a__ = caml_call1(bin_shape_t$2, Core_Stable[79]),
       _a$_ = caml_call1(Bin_prot_Shape[15], _a__),
       _ba_ = caml_call1(Bin_shape[19][4], _a$_);
      caml_call1(Stdlib[46], _ba_);
      var
       _bb_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_nonempty_list_src_nonempty$1),
          108,
          2792,
          2800,
          2806];
      return caml_call1(Expect_test_collector$1[1], _bb_);
     });
   function compare$1(cmp_a, a_042, b_043){
    if(a_042 === b_043) return 0;
    var
     b_047 = b_043[2],
     b_045 = b_043[1],
     a_046 = a_042[2],
     a_044 = a_042[1],
     n = caml_call2(cmp_a, a_044, b_045);
    return 0 === n
            ? caml_call3
              (Core_Stable[377],
               function(a_048, b_049){return caml_call2(cmp_a, a_048, b_049);},
               a_046,
               b_047)
            : n;
   }
   function equal$1(cmp_a, a_050, b_051){
    if(a_050 === b_051) return 1;
    var
     b_055 = b_051[2],
     b_053 = b_051[1],
     a_054 = a_050[2],
     a_052 = a_050[1],
     _a9_ = caml_call2(cmp_a, a_052, b_053);
    return _a9_
            ? caml_call3
              (Core_Stable[390],
               function(a_056, b_057){return caml_call2(cmp_a, a_056, b_057);},
               a_054,
               b_055)
            : _a9_;
   }
   var
    _B_ = caml_call1(Bin_shape[3][1], cst_a),
    _C_ =
      caml_call1(Bin_shape[4][1], "nonempty_list/src/nonempty_list.ml:123:23"),
    _D_ = caml_call2(Bin_prot_Shape[11], _C_, _B_),
    _E_ = [0, caml_call1(Core_Stable[149], _D_), 0],
    _F_ = caml_call1(Bin_shape[3][1], cst_a),
    _G_ =
      caml_call1(Bin_shape[4][1], "nonempty_list/src/nonempty_list.ml:123:18"),
    _H_ = [0, caml_call2(Bin_prot_Shape[11], _G_, _F_), _E_],
    _I_ = caml_call1(Bin_prot_Shape[3], _H_),
    _J_ = [0, caml_call1(Bin_shape[3][1], cst_a), 0],
    _K_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$3), _J_, _I_], 0],
    _L_ =
      caml_call1(Bin_shape[4][1], "nonempty_list/src/nonempty_list.ml:123:6"),
    group$1 = caml_call2(Bin_prot_Shape[2], _L_, _K_),
    cst_t$1 = cst_t$3,
    cst_nonempty_list_src_nonempty$2 =
      "nonempty_list/src/nonempty_list.ml.Stable.V1.Pair_format.t";
   function bin_shape_t$3(a){
    var _a8_ = caml_call1(Bin_shape[2][1], cst_t$1);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$1, _a8_), [0, a, 0]);
   }
   function bin_size_t$3(size_of_a, param){
    var
     v2 = param[2],
     v1 = param[1],
     _a6_ = caml_call1(size_of_a, v1),
     size = caml_call2(Bin_prot_Common[23], 0, _a6_),
     _a7_ = caml_call2(Core_Stable[18], size_of_a, v2);
    return caml_call2(Bin_prot_Common[23], size, _a7_);
   }
   function bin_write_t$3(write_a, buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(write_a, buf, pos, v1);
    return caml_call4(Core_Stable[151], write_a, buf, pos$0, v2);
   }
   function bin_read_t$7(of_a, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_nonempty_list_src_nonempty$2,
             pos_ref[1]);
   }
   function bin_read_t$8(of_a, buf, pos_ref){
    var
     v1 = caml_call2(of_a, buf, pos_ref),
     v2 = caml_call2(caml_call1(Core_Stable[153], of_a), buf, pos_ref);
    return [0, v1, v2];
   }
   function stable_witness$3(a_stable_witness){return Stable_witness[6];}
   function of_nonempty_list$0(param){
    var tl = param[2], hd = param[1];
    return [0, hd, tl];
   }
   function to_nonempty_list$0(param){
    var tl = param[2], hd = param[1];
    return [0, hd, tl];
   }
   var
    include$1 =
      caml_call1
       (caml_call1
         (Core_Binable[16][2][1],
          [0,
           bin_shape_t$3,
           bin_size_t$3,
           bin_write_t$3,
           bin_read_t$8,
           bin_read_t$7]),
        [0, of_nonempty_list$0, to_nonempty_list$0]),
    bin_shape_t$4 = include$1[1],
    bin_size_t$4 = include$1[2],
    bin_write_t$4 = include$1[3],
    bin_read_t$9 = include$1[4],
    bin_read_t$10 = include$1[5],
    bin_writer_t$1 = include$1[6],
    bin_reader_t$1 = include$1[7],
    bin_t$1 = include$1[8];
   function stable_witness$4(witness){
    return caml_call4
            (caml_call1(caml_call1(Stable_witness[3], [0]), [0])[1],
             stable_witness$3,
             to_nonempty_list$0,
             of_nonempty_list$0,
             witness);
   }
   var
    Expect_test_collector$2 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_nonempty_list_src_nonempty$3 = cst_nonempty_list_src_nonempty$6,
    _M_ =
      [0,
       caml_call1
        (Expect_test_common_File[1][6], cst_nonempty_list_src_nonempty$6),
       151,
       3958,
       3973,
       4011],
    _N_ =
      [0,
       [0,
        [0, cst$2],
        [1, " f27871ef428aef2925f18d6be687bf9c "],
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_nonempty_list_src_nonempty$6),
         151,
         3958,
         3966,
         3972],
        _M_],
       0],
    _O_ =
      [0,
       caml_call1
        (Expect_test_common_File[1][6], cst_nonempty_list_src_nonempty$6),
       149,
       3892,
       3896,
       4012],
    _P_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_bb4c551905c64839d260711a8e);
   caml_call9
    (Expect_test_collector$2[3],
     _P_,
     _O_,
     cst_nonempty_list_src_nonempty$6,
     0,
     0,
     _N_,
     0,
     Inline_test_config,
     function(param){
      var
       _a2_ = caml_call1(bin_shape_t$4, Core_Stable[79]),
       _a3_ = caml_call1(Bin_prot_Shape[15], _a2_),
       _a4_ = caml_call1(Bin_shape[19][4], _a3_);
      caml_call1(Stdlib[46], _a4_);
      var
       _a5_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_nonempty_list_src_nonempty$3),
          151,
          3958,
          3966,
          3972];
      return caml_call1(Expect_test_collector$2[1], _a5_);
     });
   function compare$2(cmp_a, a_066, b_067){
    if(a_066 === b_067) return 0;
    var
     b_071 = b_067[2],
     b_069 = b_067[1],
     a_070 = a_066[2],
     a_068 = a_066[1],
     n = caml_call2(cmp_a, a_068, b_069);
    return 0 === n
            ? caml_call3
              (Core[427],
               function(a_072, b_073){return caml_call2(cmp_a, a_072, b_073);},
               a_070,
               b_071)
            : n;
   }
   function equal$2(cmp_a, a_074, b_075){
    if(a_074 === b_075) return 1;
    var
     b_079 = b_075[2],
     b_077 = b_075[1],
     a_078 = a_074[2],
     a_076 = a_074[1],
     _a1_ = caml_call2(cmp_a, a_076, b_077);
    return _a1_
            ? caml_call3
              (Core[428],
               function(a_080, b_081){return caml_call2(cmp_a, a_080, b_081);},
               a_078,
               b_079)
            : _a1_;
   }
   function hash_fold_t$1(hash_fold_a, hsv, arg){
    var a1 = arg[2], a0 = arg[1], hsv$0 = caml_call2(hash_fold_a, hsv, a0);
    return caml_call3(Core[430], hash_fold_a, hsv$0, a1);
   }
   function quickcheck_generator(generator_091){
    var
     _aY_ =
       [0,
        [0,
         1.,
         caml_call1
          (Base_quickcheck_Generator[123],
           function(size_092, random_093){
            var
             _aZ_ = caml_call1(Core[128], generator_091),
             _a0_ =
               caml_call3
                (Base_quickcheck_Generator[124], _aZ_, size_092, random_093);
            return [0,
                    caml_call3
                     (Base_quickcheck_Generator[124],
                      generator_091,
                      size_092,
                      random_093),
                    _a0_];
           })],
        0];
    return caml_call1(Base_quickcheck_Generator[60], _aY_);
   }
   function quickcheck_observer(observer_085){
    return caml_call1
            (Base_quickcheck_Observer[36],
             function(x_086, size_087, hash_088){
              var
               x_090 = x_086[2],
               x_089 = x_086[1],
               hash_088$0 = caml_call2(Base[122], hash_088, 0),
               hash_088$1 =
                 caml_call4
                  (Base_quickcheck_Observer[37],
                   observer_085,
                   x_089,
                   size_087,
                   hash_088$0),
               _aX_ = caml_call1(Core[133], observer_085),
               hash_088$2 =
                 caml_call4
                  (Base_quickcheck_Observer[37],
                   _aX_,
                   x_090,
                   size_087,
                   hash_088$1);
              return hash_088$2;
             });
   }
   function quickcheck_shrinker(shrinker_082){
    return caml_call1
            (Base_quickcheck_Shrinker[36],
             function(param){
              var
               x_084 = param[2],
               x_083 = param[1],
               _aS_ = caml_call1(Core[138], shrinker_082),
               _aT_ = caml_call2(Base_quickcheck_Shrinker[37], _aS_, x_084),
               _aU_ =
                 [0,
                  caml_call2
                   (Base_Sequence[32],
                    _aT_,
                    function(x_084){return [0, x_083, x_084];}),
                  0],
               _aV_ =
                 caml_call2(Base_quickcheck_Shrinker[37], shrinker_082, x_083),
               _aW_ =
                 [0,
                  caml_call2
                   (Base_Sequence[32],
                    _aV_,
                    function(x_083){return [0, x_083, x_084];}),
                  _aU_];
              return caml_call1(Base_Sequence[68], _aW_);
             });
   }
   var
    Typename_of_t = caml_call1(Typerep_lib_Make_typename[2], [0, name]),
    typename_of_t = Typename_of_t[2];
   function typerep_of_t(of_a){
    var name_of_t = caml_call1(Typename_of_t[1], of_a);
    return [9,
            [0,
             name_of_t,
             [0,
              [246,
               function(param){
                var
                 _aP_ = caml_call2(Typerep_lib_Typename[1], 0, 0),
                 _aQ_ = caml_call1(Core[434], of_a),
                 _aR_ =
                   [0,
                    cst,
                    caml_call2(Core[269], of_a, _aQ_),
                    2,
                    0,
                    0,
                    0,
                    _aP_,
                    [0,
                     function(param){
                      var v1 = param[2], v0 = param[1];
                      return [0, v0, v1];
                     }]],
                 tag0 = caml_call1(Typerep_lib_Std[1][4][9], _aR_),
                 typename = caml_call1(Typerep_lib_Std[1][1][2], name_of_t),
                 tags = [0, [0, tag0]];
                function value(param){
                 var v1 = param[2], v0 = param[1];
                 return [0, tag0, [0, v0, v1]];
                }
                return [8,
                        caml_call1
                         (Typerep_lib_Std[1][6][7], [0, typename, tags, 0, value])];
               }]]]];
   }
   var
    _Q_ = caml_call1(Bin_shape[3][1], cst_a),
    _R_ =
      caml_call1(Bin_shape[4][1], "nonempty_list/src/nonempty_list.ml:161:46"),
    _S_ = caml_call2(Bin_prot_Shape[11], _R_, _Q_),
    _T_ = [0, caml_call1(Core[419], _S_), 0],
    _U_ = caml_call1(Bin_shape[3][1], cst_a),
    _V_ =
      caml_call1(Bin_shape[4][1], "nonempty_list/src/nonempty_list.ml:161:41"),
    _W_ =
      [0, [0, cst$0, [0, caml_call2(Bin_prot_Shape[11], _V_, _U_), _T_]], 0],
    _X_ = caml_call1(Bin_prot_Shape[5], _W_),
    _Y_ = [0, caml_call1(Bin_shape[3][1], cst_a), 0],
    _Z_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$3), _Y_, _X_], 0],
    ___ =
      caml_call1(Bin_shape[4][1], "nonempty_list/src/nonempty_list.ml:161:2"),
    group$2 = caml_call2(Bin_prot_Shape[2], ___, _Z_),
    cst_t$2 = cst_t$3,
    cst_nonempty_list_src_nonempty$4 = cst_nonempty_list_src_nonempty$5,
    _$_ = [1, cst_nonempty_list_src_nonempty$5],
    cst_empty_list = "empty list";
   function bin_shape_t$5(a){
    var _aO_ = caml_call1(Bin_shape[2][1], cst_t$2);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$2, _aO_), [0, a, 0]);
   }
   function bin_size_t$5(size_of_a, param){
    var
     v2 = param[2],
     v1 = param[1],
     _aM_ = caml_call1(size_of_a, v1),
     size = caml_call2(Bin_prot_Common[23], 1, _aM_),
     _aN_ = caml_call2(Core[420], size_of_a, v2);
    return caml_call2(Bin_prot_Common[23], size, _aN_);
   }
   function bin_write_t$5(write_a, buf, pos, param){
    var
     v2 = param[2],
     v1 = param[1],
     pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0),
     pos$1 = caml_call3(write_a, buf, pos$0, v1);
    return caml_call4(Core[421], write_a, buf, pos$1, v2);
   }
   function bin_writer_t$2(bin_writer_a){
    return [0,
            function(v){return bin_size_t$5(bin_writer_a[1], v);},
            function(v){
             var _aJ_ = bin_writer_a[2];
             return function(_aK_, _aL_){
              return bin_write_t$5(_aJ_, v, _aK_, _aL_);};
            }];
   }
   function bin_read_t$11(of_a, buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19],
             cst_nonempty_list_src_nonempty$4,
             pos_ref[1]);
   }
   function bin_read_t$12(of_a, buf, pos_ref){
    if(0 !== caml_call2(Bin_prot_Read[29], buf, pos_ref))
     return caml_call2(Bin_prot_Common[18], _$_, pos_ref[1]);
    var
     arg_1 = caml_call2(of_a, buf, pos_ref),
     arg_2 = caml_call2(caml_call1(Core[423], of_a), buf, pos_ref);
    return [0, arg_1, arg_2];
   }
   function bin_reader_t$2(bin_reader_a){
    return [0,
            function(buf, pos_ref){
             return bin_read_t$12(bin_reader_a[1], buf, pos_ref);
            },
            function(buf, pos_ref, vtag){
             return bin_read_t$11(bin_reader_a[1], buf, pos_ref, vtag);
            }];
   }
   function bin_t$2(bin_a){
    var _aH_ = bin_reader_t$2(bin_a[3]), _aI_ = bin_writer_t$2(bin_a[2]);
    return [0, bin_shape_t$5(bin_a[1]), _aI_, _aH_];
   }
   function hd(param){var hd = param[1]; return hd;}
   function tl(param){var tl = param[2]; return tl;}
   function of_list(param){
    if(! param) return 0;
    var tl = param[2], hd = param[1];
    return [0, [0, hd, tl]];
   }
   function of_list_error(param){
    if(param){var tl = param[2], hd = param[1]; return [0, [0, hd, tl]];}
    var _aG_ = caml_call1(Sexplib0_Sexp_conv[7], cst_empty_list);
    return caml_call1(Core[239], _aG_);
   }
   function fold(param, init, f){
    var tl = param[2], hd = param[1], _aF_ = caml_call2(f, init, hd);
    return caml_call3(Core_List[20], tl, _aF_, f);
   }
   var
    iter =
      [0,
       -198771759,
       function(param, f){
        var tl = param[2], hd = param[1];
        caml_call1(f, hd);
        return caml_call2(Core_List[19], tl, f);
       }],
    length =
      [0,
       -198771759,
       function(param){
        var tl = param[2];
        return 1 + caml_call1(Core_List[17], tl) | 0;
       }],
    include$2 = caml_call1(Core_Comparator[7], [0, compare$2, sexp_of_t$0]),
    comparator = include$2[1];
   function is_empty(param){return 0;}
   var
    From_indexed_container_make =
      caml_call1
       (Base_Indexed_container[8],
        [0, fold, iter, length, -304398144, -304398144]),
    mem = From_indexed_container_make[1],
    length$0 = From_indexed_container_make[2],
    iter$0 = From_indexed_container_make[4],
    fold$0 = From_indexed_container_make[5],
    fold_result = From_indexed_container_make[6],
    fold_until = From_indexed_container_make[7],
    exists = From_indexed_container_make[8],
    for_all = From_indexed_container_make[9],
    count = From_indexed_container_make[10],
    sum = From_indexed_container_make[11],
    find = From_indexed_container_make[12],
    find_map = From_indexed_container_make[13],
    to_array = From_indexed_container_make[15],
    min_elt = From_indexed_container_make[16],
    max_elt = From_indexed_container_make[17],
    iteri = From_indexed_container_make[19],
    find_mapi = From_indexed_container_make[24],
    findi = From_indexed_container_make[23],
    counti = From_indexed_container_make[22],
    for_alli = From_indexed_container_make[21],
    existsi = From_indexed_container_make[20],
    foldi = From_indexed_container_make[18],
    _aa_ =
      [0,
       [11,
        "Nonempty_list.nth_exn ",
        [4, 0, 0, 0, [11, " called on list of length ", [4, 0, 0, 0, 0]]]],
       "Nonempty_list.nth_exn %d called on list of length %d"];
   function invariant(f, t){return caml_call2(iter$0, t, f);}
   function create(hd, tl){return [0, hd, tl];}
   function singleton(hd){return [0, hd, 0];}
   function cons(x, param){
    var tl = param[2], hd = param[1];
    return [0, x, [0, hd, tl]];
   }
   function nth(param, n){
    var tl = param[2], hd = param[1];
    return 0 === n ? [0, hd] : caml_call2(Core_List[55], tl, n - 1 | 0);
   }
   function nth_exn(t, n){
    var match = nth(t, n);
    if(match){var a = match[1]; return a;}
    var _aE_ = caml_call1(length$0, t);
    return caml_call4(Core[244], _aa_, n, _aE_, 0);
   }
   function mapi(param, f){
    var tl = param[2], hd = param[1], hd$0 = caml_call2(f, 0, hd);
    return [0,
            hd$0,
            caml_call2
             (Core_List[41],
              tl,
              function(i, x){return caml_call2(f, i + 1 | 0, x);})];
   }
   function filter_map(param, f){
    var tl = param[2], hd = param[1], match = caml_call1(f, hd);
    if(! match) return caml_call2(Core_List[12], tl, f);
    var hd$0 = match[1];
    return [0, hd$0, caml_call2(Core_List[12], tl, f)];
   }
   function filter_mapi(param, f){
    var tl = param[2], hd = param[1], hd$0 = caml_call2(f, 0, hd);
    function f$0(i, x){return caml_call2(f, i + 1 | 0, x);}
    if(! hd$0) return caml_call2(Core_List[43], tl, f$0);
    var hd$1 = hd$0[1];
    return [0, hd$1, caml_call2(Core_List[43], tl, f$0)];
   }
   function filter(param, f){
    var tl = param[2], hd = param[1];
    return caml_call1(f, hd)
            ? [0, hd, caml_call2(Core_List[11], tl, f)]
            : caml_call2(Core_List[11], tl, f);
   }
   function filteri(param, f){
    var tl = param[2], hd = param[1], include_hd = caml_call2(f, 0, hd);
    function f$0(i, x){return caml_call2(f, i + 1 | 0, x);}
    return include_hd
            ? [0, hd, caml_call2(Core_List[42], tl, f$0)]
            : caml_call2(Core_List[42], tl, f$0);
   }
   function reduce(param, f){
    var tl = param[2], hd = param[1];
    return caml_call3(Core_List[20], tl, hd, f);
   }
   function reverse(param){
    var tl = param[2], hd = param[1], acc = 0, x = hd, xs = tl;
    for(;;){
     if(! xs) return [0, x, acc];
     var ys = xs[2], y = xs[1], acc$0 = [0, x, acc];
     acc = acc$0;
     x = y;
     xs = ys;
    }
   }
   function append(param, l){
    var tl = param[2], hd = param[1];
    return [0, hd, caml_call2(Core_List[9], tl, l)];
   }
   function return$0(hd){return [0, hd, 0];}
   var
    map =
      [0,
       -198771759,
       function(t, f){
        return mapi(t, function(param, x){return caml_call1(f, x);});
       }];
   function bind(param, f){
    var tl = param[2], hd = param[1], f_hd = caml_call1(f, hd);
    return append
            (f_hd,
             caml_call2
              (Core_List[13],
               tl,
               function(x){return to_list(caml_call1(f, x));}));
   }
   var
    include$3 = caml_call1(Base_Monad[1], [0, bind, return$0, map]),
    symbol_bind = include$3[1],
    symbol_map = include$3[2],
    Monad_infix = include$3[3],
    bind$0 = include$3[4],
    return$1 = include$3[5],
    map$0 = include$3[6],
    join = include$3[7],
    ignore_m = include$3[8],
    all = include$3[9],
    all_unit = include$3[10],
    Let_syntax = include$3[11],
    _ab_ =
      [0,
       [11, "Nonempty_list.init ", [4, 0, 0, 0, 0]],
       "Nonempty_list.init %d"];
   function unzip(param){
    var
     tl = param[2],
     match = param[1],
     hd2 = match[2],
     hd1 = match[1],
     match$0 = caml_call1(Core_List[101], tl),
     tl2 = match$0[2],
     tl1 = match$0[1];
    return [0, [0, hd1, tl1], [0, hd2, tl2]];
   }
   function concat(t){
    return caml_call2(bind$0, t, function(_aD_){return _aD_;});
   }
   function zip(t1, t2){
    var
     _aB_ = to_list(t2),
     _aC_ = to_list(t1),
     match = caml_call2(Core_List[103], _aC_, _aB_);
    if(! match) return 0;
    var x = match[1];
    return [0, of_list_exn(x)];
   }
   function zip_exn(t1, t2){
    var _az_ = to_list(t2), _aA_ = to_list(t1);
    return of_list_exn(caml_call2(Core_List[104], _aA_, _az_));
   }
   function last(param){
    var tl = param[2], hd = param[1];
    return caml_call3
            (Core_List[20], tl, hd, function(param, elt){return elt;});
   }
   function drop_last(param){
    var tl = param[2], hd = param[1], match = caml_call1(Core_List[136], tl);
    if(! match) return 0;
    var l = match[1];
    return [0, hd, l];
   }
   function to_sequence(t){
    var _ay_ = to_list(t);
    return caml_call1(Core_Sequence[109], _ay_);
   }
   function sort(t, compare){
    var _ax_ = to_list(t);
    return of_list_exn(caml_call2(Core_List[77], _ax_, compare));
   }
   function stable_sort(t, compare){
    var _aw_ = to_list(t);
    return of_list_exn(caml_call2(Core_List[78], _aw_, compare));
   }
   function dedup_and_sort(compare, t){
    var _av_ = to_list(t);
    return of_list_exn(caml_call2(Core_List[120], _av_, compare));
   }
   function min_elt$0(param, compare){
    var tl = param[2], hd = param[1];
    return caml_call3
            (Core_List[20],
             tl,
             hd,
             function(min, elt){
              var _au_ = caml_call2(compare, min, elt);
              return caml_call2(Core[90], _au_, 0) ? elt : min;
             });
   }
   function max_elt$0(t, compare){
    return min_elt$0(t, function(x, y){return caml_call2(compare, y, x);});
   }
   function map_add_multi(map, key, data){
    return caml_call3
            (Core_Map[41],
             map,
             key,
             function(param){
              if(! param) return singleton(data);
              var t = param[1];
              return cons(data, t);
             });
   }
   function map_of_container_multi(fold, container, comparator){
    return caml_call3
            (fold,
             container,
             caml_call1(Core_Map[4], comparator),
             function(acc, param){
              var data = param[2], key = param[1];
              return map_add_multi(acc, key, data);
             });
   }
   function map_of_alist_multi(alist){
    var _as_ = Core_List[20];
    return function(_at_){return map_of_container_multi(_as_, alist, _at_);};
   }
   function map_of_sequence_multi(sequence){
    var _aq_ = Core_Sequence[18];
    return function(_ar_){
     return map_of_container_multi(_aq_, sequence, _ar_);};
   }
   function fold_right(param, acc, f){
    var
     tl = param[2],
     hd = param[1],
     acc$0 = caml_call3(Core_List[99], tl, f, acc);
    return caml_call2(f, hd, acc$0);
   }
   function folding_map(param, init, f){
    var
     tl = param[2],
     hd = param[1],
     match = caml_call2(f, init, hd),
     hd$0 = match[2],
     acc = match[1];
    return [0, hd$0, caml_call3(Core_List[88], tl, acc, f)];
   }
   function fold_map(param, acc, f){
    var
     tl = param[2],
     hd = param[1],
     match = caml_call2(f, acc, hd),
     hd$0 = match[2],
     acc$0 = match[1],
     match$0 = caml_call3(Core_List[90], tl, acc$0, f),
     tl$0 = match$0[2],
     acc$1 = match$0[1];
    return [0, acc$1, [0, hd$0, tl$0]];
   }
   function combine_errors(t){
    var _ap_ = to_list(t), match = caml_call1(Core_Result[42], _ap_);
    if(0 === match[0]){var oks = match[1]; return [0, of_list_exn(oks)];}
    var errors = match[1];
    return [1, of_list_exn(errors)];
   }
   function combine_errors_unit(t){
    var _ao_ = to_list(t), ok = caml_call1(Core_Result[43], _ao_);
    if(0 === ok[0]) return ok;
    var errors = ok[1];
    return [1, of_list_exn(errors)];
   }
   function combine_or_errors(t){
    var _an_ = to_list(t), e = caml_call1(Core_Or_error[51], _an_);
    if(0 !== e[0]) return e;
    var oks = e[1];
    return [0, of_list_exn(oks)];
   }
   function combine_or_errors_unit(t){
    var _am_ = to_list(t);
    return caml_call1(Core_Or_error[52], _am_);
   }
   function validate(name, check, t){
    var _al_ = to_list(t);
    return caml_call3(Validate[29], name, check, _al_);
   }
   function validate_indexed(check, t){
    var _ak_ = to_list(t);
    return caml_call2(Validate[28], check, _ak_);
   }
   function rev_append(xs, acc){
    var xs$0 = xs, acc$0 = acc;
    for(;;){
     if(! xs$0) return acc$0;
     var tl = xs$0[2], hd = xs$0[1], acc$1 = cons(hd, acc$0);
     xs$0 = tl;
     acc$0 = acc$1;
    }
   }
   function init(n, f){
    if(caml_call2(Core[91], n, 1)) caml_call3(Core[244], _ab_, n, 0);
    var
     tl =
       caml_call2
        (Core_List[40],
         n - 1 | 0,
         function(i){return caml_call1(f, i + 1 | 0);}),
     hd = caml_call1(f, 0);
    return [0, hd, tl];
   }
   function to_rev_list(param){
    var tl = param[2], hd = param[1];
    return [0, hd, tl];
   }
   function rev_append$0(param, xs){
    var tl = param[2], hd = param[1];
    return rev_append(tl, [0, hd, xs]);
   }
   function rev(t){return rev_append$0(t, 0);}
   function rev_mapi(param, f){
    var
     tl$0 = param[2],
     hd$0 = param[1],
     acc$1 = [0, caml_call2(f, 0, hd$0), 0],
     i = 1,
     xs = tl$0,
     acc = acc$1;
    for(;;){
     if(! xs) return acc;
     var
      tl = xs[2],
      hd = xs[1],
      acc$0 = cons(caml_call2(f, i, hd), acc),
      i$0 = i + 1 | 0;
     i = i$0;
     xs = tl;
     acc = acc$0;
    }
   }
   function rev_map(t, f){
    return rev_mapi(t, function(param, x){return caml_call1(f, x);});
   }
   function cons$0(x, t){return [0, x, to_rev_list(t)];}
   function sexp_of_t$1(sexp_of_a, t){
    var _aj_ = to_rev_list(t);
    return caml_call2(Reversed_list[9][1], sexp_of_a, _aj_);
   }
   var With_sexp_of = [0, sexp_of_t$1];
   function sexp_of_t$2(sexp_of_a, t){
    var _ai_ = to_rev_list(t);
    return caml_call2(Reversed_list[10][1], sexp_of_a, _ai_);
   }
   var With_rev_sexp_of = [0, sexp_of_t$2], _ac_ = [0, 0];
   function rev$0(param){
    var tl = param[2], hd = param[1], _ah_ = caml_call1(Core_Fn[6], cons$0);
    return caml_call3(Core_List[20], tl, [0, hd, 0], _ah_);
   }
   function flag(arg_type){
    var _ag_ = caml_call1(Core_Command_internal[19][32], arg_type);
    return caml_call2
            (Core_Command_internal[19][41],
             _ag_,
             function(param){
              var more = param[2], one = param[1];
              return [0, one, more];
             });
   }
   function comma_separated_argtype
   (key, strip_whitespace, unique_values, arg_type){
    var
     _af_ =
       caml_call5
        (Core_Command_internal[18][9],
         _ac_,
         0,
         strip_whitespace,
         unique_values,
         arg_type);
    return caml_call3(Core_Command_internal[18][3], key, _af_, of_list_exn);
   }
   function compare$3(cmp_a, a_094, b_095){
    return caml_call3
            (Core[427],
             function(a_096, b_097){return caml_call2(cmp_a, a_096, b_097);},
             a_094,
             b_095);
   }
   function equal$3(cmp_a, a_098, b_099){
    return caml_call3
            (Core[428],
             function(a_100, b_101){return caml_call2(cmp_a, a_100, b_101);},
             a_098,
             b_099);
   }
   var t_of_sexp$1 = Core[432], sexp_of_t$3 = Core[431];
   function t_sexp_grammar$0(a_sexp_grammar){
    return caml_call1(Core[433], a_sexp_grammar);
   }
   var hash_fold_t$2 = Core[430];
   function quickcheck_generator$0(generator_109){return caml_call1(Core[128], generator_109);
   }
   function quickcheck_observer$0(observer_108){return caml_call1(Core[133], observer_108);
   }
   function quickcheck_shrinker$0(shrinker_107){return caml_call1(Core[138], shrinker_107);
   }
   var
    Typename_of_t$0 = caml_call1(Typerep_lib_Make_typename[2], [0, name$0]),
    typename_of_t$0 = Typename_of_t$0[2];
   function typerep_of_t$0(of_a){
    var name_of_t = caml_call1(Typename_of_t$0[1], of_a);
    return [9,
            [0,
             name_of_t,
             [0, [246, function(_ae_){return caml_call1(Core[434], of_a);}]]]];
   }
   var
    none = 0,
    cst_Nonempty_list_Option_value =
      "Nonempty_list.Option.value_exn: empty list";
   function some(value){return value;}
   function unchecked_value(t){return t;}
   function is_none(t){return t === 0 ? 1 : 0;}
   function is_some(t){return 1 - (t === 0 ? 1 : 0);}
   function of_option(param){
    if(! param) return none;
    var value = param[1];
    return value;
   }
   function value_exn(l){
    if(l) return l;
    var
     _ad_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Nonempty_list_Option_value);
    return caml_call1(Core[255], _ad_);
   }
   function value(t, default$0){
    return runtime.caml_csel_value(t === 0 ? 1 : 0, default$0, t);
   }
   var
    Optional_syntax = [0, is_none, unchecked_value],
    Optional_syntax$0 = [0, Optional_syntax];
   caml_call1(Ppx_inline_test_lib[6], cst_nonempty_list);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Nonempty_list);
   var
    Nonempty_list =
      [0,
       compare$2,
       equal$2,
       t_of_sexp$0,
       sexp_of_t$0,
       t_sexp_grammar,
       hash_fold_t$1,
       quickcheck_generator,
       quickcheck_observer,
       quickcheck_shrinker,
       typerep_of_t,
       typename_of_t,
       bin_shape_t$5,
       bin_size_t$5,
       bin_write_t$5,
       bin_read_t$12,
       bin_read_t$11,
       bin_writer_t$2,
       bin_reader_t$2,
       bin_t$2,
       comparator,
       invariant,
       symbol_bind,
       symbol_map,
       Monad_infix,
       bind$0,
       return$1,
       map$0,
       join,
       ignore_m,
       all,
       all_unit,
       Let_syntax,
       mem,
       length$0,
       is_empty,
       iter$0,
       fold$0,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       foldi,
       existsi,
       for_alli,
       counti,
       findi,
       find_mapi,
       create,
       init,
       of_list,
       of_list_error,
       of_list_exn,
       singleton,
       cons,
       hd,
       tl,
       nth,
       nth_exn,
       reduce,
       reverse,
       append,
       unzip,
       zip,
       zip_exn,
       mapi,
       filter,
       filteri,
       filter_map,
       filter_mapi,
       concat,
       bind$0,
       last,
       drop_last,
       to_sequence,
       sort,
       stable_sort,
       dedup_and_sort,
       iteri,
       fold_right,
       folding_map,
       fold_map,
       min_elt$0,
       max_elt$0,
       map_add_multi,
       map_of_alist_multi,
       map_of_sequence_multi,
       combine_errors,
       combine_errors_unit,
       combine_or_errors,
       combine_or_errors_unit,
       validate_indexed,
       validate,
       flag,
       comma_separated_argtype,
       [0,
        compare$3,
        equal$3,
        t_of_sexp$1,
        sexp_of_t$3,
        t_sexp_grammar$0,
        hash_fold_t$2,
        quickcheck_generator$0,
        quickcheck_observer$0,
        quickcheck_shrinker$0,
        typerep_of_t$0,
        typename_of_t$0,
        none,
        some,
        is_none,
        is_some,
        value,
        value_exn,
        unchecked_value,
        of_list,
        of_option,
        Optional_syntax$0],
       [0,
        cons$0,
        to_rev_list,
        rev,
        rev_append$0,
        rev_map,
        rev_mapi,
        With_sexp_of,
        With_rev_sexp_of],
       rev$0,
       rev_append,
       [0,
        bin_shape_t$0,
        bin_size_t$0,
        bin_write_t$0,
        bin_read_t$1,
        bin_read_t$2,
        bin_writer_t,
        bin_reader_t,
        bin_t,
        compare,
        equal,
        hash_fold_t,
        t_of_sexp$0,
        sexp_of_t$0,
        t_sexp_grammar],
       [0,
        [0,
         bin_shape_t$0,
         bin_size_t$0,
         bin_write_t$0,
         bin_read_t$1,
         bin_read_t$2,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         compare,
         equal,
         t_of_sexp$0,
         sexp_of_t$0,
         t_sexp_grammar,
         hash_fold_t,
         stable_witness$0],
        [0,
         bin_shape_t$2,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$5,
         bin_read_t$6,
         bin_writer_t$0,
         bin_reader_t$0,
         bin_t$0,
         compare$0,
         equal$0,
         t_of_sexp$0,
         sexp_of_t$0,
         hash_fold_t$0,
         stable_witness$2],
        [0,
         bin_shape_t$4,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$9,
         bin_read_t$10,
         bin_writer_t$1,
         bin_reader_t$1,
         bin_t$1,
         compare$1,
         equal$1,
         t_of_sexp$0,
         sexp_of_t$0,
         stable_witness$4]]];
   runtime.caml_register_global(118, Nonempty_list, cst_Nonempty_list);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
