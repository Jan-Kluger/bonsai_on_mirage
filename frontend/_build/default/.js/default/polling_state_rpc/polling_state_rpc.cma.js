// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Polling_state_rpc
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_kernel__Deferred_or_error, Async_kernel__Ivar, Async_kernel__Mvar, Async_kernel__Throttle, Async_rpc_kernel__Rpc, Base__Exn, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Bus, Core, Core__Bag, Core__Error, Core__Hashtbl, Core__Option, Core__Or_error, Core__Sexp, Core__Unique_id, Expect_test_collector, Expect_test_common__File, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_BUG$3 = "BUG",
    cst_Fresh = "Fresh",
    cst_Polling_state_rpc = "Polling_state_rpc",
    cst_Update = "Update",
    cst_ee66f16f1cce4a4277f152b0de = "ee66f16f1cce4a4277f152b0de3d77ba",
    cst_pair$0 = "pair",
    cst_polling_state_rpc = "polling_state_rpc",
    cst_query = "query",
    cst_response = "response",
    cst_rpc_name = "rpc_name",
    cst_rpc_version = "rpc_version",
    cst_src_polling_state_rpc_ml$2 = "src/polling_state_rpc.ml",
    cst_src_polling_state_rpc_ml_R$2 =
      "src/polling_state_rpc.ml.Request.Stable.t",
    cst_src_polling_state_rpc_ml_R$1 =
      "src/polling_state_rpc.ml.Response.pair",
    cst_t$1 = "t",
    cst_update = "update";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    tag = "exception thrown from inside of polling-state-rpc bus handler",
    Core = global_data.Core,
    Core_Sexp = global_data.Core__Sexp,
    Core_Error = global_data.Core__Error,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Bus = global_data.Bus,
    Async_kernel_Throttle = global_data.Async_kernel__Throttle,
    Core_Or_error = global_data.Core__Or_error,
    Async_kernel = global_data.Async_kernel,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Async_kernel_Mvar = global_data.Async_kernel__Mvar,
    Core_Option = global_data.Core__Option,
    Stdlib = global_data.Stdlib,
    Base_Exn = global_data.Base__Exn,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Expect_test_common_File = global_data.Expect_test_common__File,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Core_Bag = global_data.Core__Bag,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Unique_id = global_data.Core__Unique_id,
    Expect_test_config = global_data.Expect_test_config,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Polling_state_rpc);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_polling_state_rpc);
   caml_call1(Expect_test_collector[6][1], cst_src_polling_state_rpc_ml$2);
   caml_call2
    (Ppx_inline_test_lib[5], cst_polling_state_rpc, "polling_state_rpc.ml");
   var
    include = caml_call1(Core_Unique_id[1], 0),
    bin_size_t = include[1],
    bin_write_t = include[2],
    bin_read_t = include[3],
    bin_shape_t = include[5],
    equal = include[19],
    of_int_exn = include[41],
    create = include[45],
    forget = caml_call1(of_int_exn, -1),
    Query_dispatch_id = caml_call1(Core_Unique_id[1], 0),
    Client_id = caml_call1(Core_Unique_id[1], 0),
    dummy = 0;
   function find_by_connection(t, connection){
    var
     _bv_ =
       caml_call2
        (Core_Bag[15],
         t,
         function(param){
          var conn = param[1];
          return connection === conn ? 1 : 0;
         });
    return caml_call2(Core_Option[30], _bv_, function(_bw_){return _bw_[2];});
   }
   function find
   (t, connection_state, connection, client_id, create_client_state){
    var match = find_by_connection(t[1], connection);
    if(match)
     var per_connection = match[1], per_connection$0 = per_connection;
    else{
     var
      result = caml_call3(Client_id[38][5], 0, 0, 0),
      elt = caml_call2(Core_Bag[23], t[1], [0, connection, result]),
      _bt_ = caml_call1(Async_rpc_kernel_Rpc[5][11], connection);
     caml_call2
      (Async_kernel_Deferred[4],
       _bt_,
       function(param){
        caml_call2
         (Core_Hashtbl[20],
          result,
          function(param){
           var client_state = param[3];
           return caml_call1(t[2], client_state);
          });
        return caml_call2(Core_Bag[26], t[1], elt);
       });
     var per_connection$0 = result;
    }
    return caml_call3
            (Core_Hashtbl[53],
             per_connection$0,
             client_id,
             function(param){
              var _bu_ = caml_call1(create_client_state, connection_state);
              return [0, 0, caml_call1(Async_kernel_Ivar[12], 0), _bu_];
             });
   }
   function trigger_cancel(per_client){
    caml_call2(Async_kernel_Ivar[14], per_client[2], 0);
    per_client[2] = caml_call1(Async_kernel_Ivar[12], 0);
   }
   var
    _a_ = [0, [0, "Cancel_ongoing", [0, Client_id[5], 0]], 0],
    _b_ = [0, [0, "client_id", Client_id[5]], 0],
    _c_ = caml_call1(Bin_shape[3][1], cst_query),
    _d_ = caml_call1(Bin_shape[4][1], "src/polling_state_rpc.ml:136:20"),
    _e_ = [0, [0, cst_query, caml_call2(Bin_prot_Shape[11], _d_, _c_)], _b_],
    _f_ = [0, [0, "last_seqnum", caml_call1(Core[454], bin_shape_t)], _e_],
    _g_ = [0, [0, "Query", [0, caml_call1(Bin_prot_Shape[4], _f_), 0]], _a_],
    _h_ = caml_call1(Bin_prot_Shape[5], _g_),
    _i_ = [0, caml_call1(Bin_shape[3][1], cst_query), 0],
    _j_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), _i_, _h_], 0],
    _k_ = caml_call1(Bin_shape[4][1], "src/polling_state_rpc.ml:133:4"),
    group = caml_call2(Bin_prot_Shape[2], _k_, _j_),
    cst_t = cst_t$1;
   function bin_shape_t$0(query){
    var _bs_ = caml_call1(Bin_shape[2][1], cst_t);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group, _bs_), [0, query, 0]);
   }
   var
    Expect_test_collector$0 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_polling_state_rpc_ml = cst_src_polling_state_rpc_ml$2,
    _m_ =
      [0,
       caml_call1
        (Expect_test_common_File[1][6], cst_src_polling_state_rpc_ml$2),
       144,
       4643,
       4658,
       4696],
    _n_ =
      [0,
       [0,
        [0, cst],
        [1, " 4eb554fadd7eded37e4da89efd208c52 "],
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_src_polling_state_rpc_ml$2),
         144,
         4643,
         4651,
         4657],
        _m_],
       0],
    _o_ =
      [0,
       caml_call1
        (Expect_test_common_File[1][6], cst_src_polling_state_rpc_ml$2),
       142,
       4576,
       4580,
       4697],
    _p_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_ee66f16f1cce4a4277f152b0de);
   caml_call9
    (Expect_test_collector$0[3],
     _p_,
     _o_,
     cst_src_polling_state_rpc_ml$2,
     0,
     0,
     _n_,
     0,
     Inline_test_config,
     function(param){
      var
       _bo_ = bin_shape_t$0(Core[521]),
       _bp_ = caml_call1(Bin_prot_Shape[15], _bo_),
       _bq_ = caml_call1(Bin_shape[19][4], _bp_);
      caml_call1(Core[31], _bq_);
      var
       _br_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_src_polling_state_rpc_ml),
          144,
          4643,
          4651,
          4657];
      return caml_call1(Expect_test_collector$0[1], _br_);
     });
   var
    _q_ = caml_call1(Bin_shape[3][1], cst_update),
    _r_ = caml_call1(Bin_shape[4][1], "src/polling_state_rpc.ml:167:16"),
    _s_ =
      [0,
       [0, cst_Update, [0, caml_call2(Bin_prot_Shape[11], _r_, _q_), 0]],
       0],
    _t_ = caml_call1(Bin_shape[3][1], cst_response),
    _u_ = caml_call1(Bin_shape[4][1], "src/polling_state_rpc.ml:166:15"),
    _v_ =
      [0,
       [0, cst_Fresh, [0, caml_call2(Bin_prot_Shape[11], _u_, _t_), 0]],
       _s_],
    _w_ = caml_call1(Bin_prot_Shape[5], _v_),
    _x_ = [0, caml_call1(Bin_shape[3][1], cst_update), 0],
    _y_ = [0, caml_call1(Bin_shape[3][1], cst_response), _x_],
    _z_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), _y_, _w_], 0],
    _A_ = caml_call1(Bin_shape[4][1], "src/polling_state_rpc.ml:165:2"),
    group$0 = caml_call2(Bin_prot_Shape[2], _A_, _z_),
    cst_t$0 = cst_t$1;
   function bin_shape_t$1(response, update){
    var _bn_ = caml_call1(Bin_shape[2][1], cst_t$0);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$0, _bn_),
             [0, response, [0, update, 0]]);
   }
   var
    Expect_test_collector$1 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_polling_state_rpc_ml$0 = cst_src_polling_state_rpc_ml$2,
    _C_ =
      [0,
       caml_call1
        (Expect_test_common_File[1][6], cst_src_polling_state_rpc_ml$2),
       172,
       5660,
       5673,
       5711],
    _D_ =
      [0,
       [0,
        [0, cst],
        [1, " 13ef8c5223a0ea284c72512be32e5c09 "],
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_src_polling_state_rpc_ml$2),
         172,
         5660,
         5666,
         5672],
        _C_],
       0],
    _E_ =
      [0,
       caml_call1
        (Expect_test_common_File[1][6], cst_src_polling_state_rpc_ml$2),
       170,
       5588,
       5590,
       5712],
    _F_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_ee66f16f1cce4a4277f152b0de);
   caml_call9
    (Expect_test_collector$1[3],
     _F_,
     _E_,
     cst_src_polling_state_rpc_ml$2,
     0,
     0,
     _D_,
     0,
     Inline_test_config,
     function(param){
      var
       _bm_ = bin_shape_t$1(Core[350], Core[471]),
       _bj_ = caml_call1(Bin_prot_Shape[15], _bm_),
       _bk_ = caml_call1(Bin_shape[19][4], _bj_);
      caml_call1(Core[31], _bk_);
      var
       _bl_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_src_polling_state_rpc_ml$0),
          172,
          5660,
          5666,
          5672];
      return caml_call1(Expect_test_collector$1[1], _bl_);
     });
   var
    _G_ = caml_call1(Bin_shape[3][1], cst_update),
    _H_ = caml_call1(Bin_shape[4][1], "src/polling_state_rpc.ml:178:33"),
    _I_ = caml_call2(Bin_prot_Shape[11], _H_, _G_),
    _J_ = caml_call1(Bin_shape[3][1], cst_response),
    _K_ = caml_call1(Bin_shape[4][1], "src/polling_state_rpc.ml:178:22"),
    _L_ =
      [0,
       [0, "new_seqnum", bin_shape_t],
       [0,
        [0,
         cst_response,
         bin_shape_t$1(caml_call2(Bin_prot_Shape[11], _K_, _J_), _I_)],
        0]],
    _M_ =
      [0,
       [0, "Response", [0, caml_call1(Bin_prot_Shape[4], _L_), 0]],
       [0, [0, "Cancellation_successful", 0], 0]],
    _N_ = caml_call1(Bin_prot_Shape[5], _M_),
    _O_ = [0, caml_call1(Bin_shape[3][1], cst_update), 0],
    _P_ = [0, caml_call1(Bin_shape[3][1], cst_response), _O_],
    _Q_ = [0, [0, caml_call1(Bin_shape[2][1], cst_pair$0), _P_, _N_], 0],
    _R_ = caml_call1(Bin_shape[4][1], "src/polling_state_rpc.ml:175:2"),
    group$1 = caml_call2(Bin_prot_Shape[2], _R_, _Q_),
    cst_pair = cst_pair$0;
   function bin_shape_pair(response, update){
    var _bi_ = caml_call1(Bin_shape[2][1], cst_pair);
    return caml_call1
            (caml_call2(Bin_prot_Shape[10], group$1, _bi_),
             [0, response, [0, update, 0]]);
   }
   var
    Expect_test_collector$2 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    cst_src_polling_state_rpc_ml$1 = cst_src_polling_state_rpc_ml$2,
    _T_ =
      [0,
       caml_call1
        (Expect_test_common_File[1][6], cst_src_polling_state_rpc_ml$2),
       185,
       5986,
       5999,
       6037],
    _U_ =
      [0,
       [0,
        [0, cst],
        [1, " 8bc63a85561d87b693d15e78c64e1008 "],
        [0,
         caml_call1
          (Expect_test_common_File[1][6], cst_src_polling_state_rpc_ml$2),
         185,
         5986,
         5992,
         5998],
        _T_],
       0],
    _V_ =
      [0,
       caml_call1
        (Expect_test_common_File[1][6], cst_src_polling_state_rpc_ml$2),
       183,
       5911,
       5913,
       6038],
    _W_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_ee66f16f1cce4a4277f152b0de);
   caml_call9
    (Expect_test_collector$2[3],
     _W_,
     _V_,
     cst_src_polling_state_rpc_ml$2,
     0,
     0,
     _U_,
     0,
     Inline_test_config,
     function(param){
      var
       _bh_ = bin_shape_pair(Core[350], Core[471]),
       _be_ = caml_call1(Bin_prot_Shape[15], _bh_),
       _bf_ = caml_call1(Bin_shape[19][4], _be_);
      caml_call1(Core[31], _bf_);
      var
       _bg_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_src_polling_state_rpc_ml$1),
          185,
          5986,
          5992,
          5998];
      return caml_call1(Expect_test_collector$2[1], _bg_);
     });
   var
    cst_src_polling_state_rpc_ml_R = cst_src_polling_state_rpc_ml_R$2,
    _l_ = [1, cst_src_polling_state_rpc_ml_R$2],
    _B_ = [1, "src/polling_state_rpc.ml.Response.t"],
    cst_src_polling_state_rpc_ml_R$0 = cst_src_polling_state_rpc_ml_R$1,
    _S_ = [1, cst_src_polling_state_rpc_ml_R$1],
    cst_this_request_was_cancelled = "this request was cancelled",
    _X_ = [0, cst_rpc_version],
    _Y_ = [0, cst_rpc_name],
    cst_A_polling_state_RPC_client =
      "A polling state RPC client has requested diffs from a seqnum that the server does not have, so the server is sending a fresh response instead. This likely means that the client had trouble receiving the last RPC response.",
    cst_src_polling_state_rpc_ml_2 = "src/polling_state_rpc.ml:280:21",
    _Z_ = [0, cst_rpc_version],
    ___ = [0, cst_rpc_name],
    cst_A_polling_state_RPC_client$0 =
      "A polling state RPC client has requested a fresh response, but the server expected it to have the seqnum of the latest diffs. The server will send a fresh response as requested. This likely means that the client had trouble receiving the last RPC response.",
    cst_src_polling_state_rpc_ml_2$0 = "src/polling_state_rpc.ml:294:18",
    _$_ = [0, cst_src_polling_state_rpc_ml$2, 377, 13474, 13506],
    _aa_ = [0, 1],
    cst_regular_response_caused_by = "regular response caused by cancellation",
    cst_src_polling_state_rpc_ml_4 = "src/polling_state_rpc.ml:446:27",
    cst_BUG = cst_BUG$3,
    _ab_ = [0, 0],
    cst_cancellation_caused_by_reg = "cancellation caused by regular request",
    cst_src_polling_state_rpc_ml_4$0 = "src/polling_state_rpc.ml:467:22",
    cst_BUG$0 = cst_BUG$3,
    cst_Request_aborted = "Request aborted",
    cst_redispatch_called_before_a =
      "[redispatch] called before a query was set or a regular dispatch had completed",
    _ac_ = [0, 1],
    cst_Regular_response_caused_by =
      "Regular response caused by forget request. This can also happen if the server is old and does not support forget requests, in which case this is not a bug.",
    cst_src_polling_state_rpc_ml_5 = "src/polling_state_rpc.ml:528:16",
    cst_BUG$1 = cst_BUG$3,
    _ad_ = [0, 0],
    cst_received_an_update_without =
      "received an update without receiving any previous values",
    cst_src_polling_state_rpc_ml_5$0 = "src/polling_state_rpc.ml:548:21",
    cst_BUG$2 = cst_BUG$3,
    _ae_ = [0, cst_src_polling_state_rpc_ml$2, 553, 20848, 20856],
    _af_ = [0, 1],
    _ag_ = [0, 1],
    _ah_ = [0, cst_Fresh],
    _ai_ = [0, cst_Update];
   function name(param){
    var underlying_rpc = param[3];
    return caml_call1(Async_rpc_kernel_Rpc[6][2], underlying_rpc);
   }
   function create$0(name, version, query_equal, bin_query$0, M){
    var
     bin_update = M[9][9],
     bin_response$0 = M[8],
     bin_reader_update = bin_update[3],
     bin_reader_response = bin_response$0[3],
     bin_writer_update = bin_update[2],
     bin_writer_response = bin_response$0[2],
     bin_response =
       [0,
        bin_shape_pair(bin_response$0[1], bin_update[1]),
        [0,
         function(v){
          var
           size_of_update = bin_writer_update[1],
           size_of_response = bin_writer_response[1];
          if(! v) return 1;
          var
           v2 = v[2],
           v1$1 = v[1],
           _bc_ = caml_call1(bin_size_t, v1$1),
           size = caml_call2(Bin_prot_Common[23], 1, _bc_);
          if(0 === v2[0])
           var
            v1 = v2[1],
            _ba_ = caml_call1(size_of_response, v1),
            _bd_ = caml_call2(Bin_prot_Common[23], 1, _ba_);
          else
           var
            v1$0 = v2[1],
            _bb_ = caml_call1(size_of_update, v1$0),
            _bd_ = caml_call2(Bin_prot_Common[23], 1, _bb_);
          return caml_call2(Bin_prot_Common[23], size, _bd_);
         },
         function(buf){
          var
           write_update = bin_writer_update[2],
           write_response = bin_writer_response[2];
          return function(pos$3, param){
           if(! param) return caml_call3(Bin_prot_Write[30], buf, pos$3, 1);
           var
            v2 = param[2],
            v1$1 = param[1],
            pos$1 = caml_call3(Bin_prot_Write[30], buf, pos$3, 0),
            pos$2 = caml_call3(bin_write_t, buf, pos$1, v1$1);
           if(0 === v2[0]){
            var
             v1 = v2[1],
             pos = caml_call3(Bin_prot_Write[30], buf, pos$2, 0);
            return caml_call3(write_response, buf, pos, v1);
           }
           var
            v1$0 = v2[1],
            pos$0 = caml_call3(Bin_prot_Write[30], buf, pos$2, 1);
           return caml_call3(write_update, buf, pos$0, v1$0);};
         }],
        [0,
         function(buf, pos_ref){
          var
           of_update = bin_reader_update[1],
           of_response = bin_reader_response[1],
           match$0 = caml_call2(Bin_prot_Read[29], buf, pos_ref);
          if(0 !== match$0)
           return 1 === match$0
                   ? 0
                   : caml_call2(Bin_prot_Common[18], _S_, pos_ref[1]);
          var
           v_new_seqnum = caml_call2(bin_read_t, buf, pos_ref),
           match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
          if(0 === match)
           var
            arg_1 = caml_call2(of_response, buf, pos_ref),
            v_response = [0, arg_1];
          else if(1 === match)
           var
            arg_1$0 = caml_call2(of_update, buf, pos_ref),
            v_response = [1, arg_1$0];
          else
           var v_response = caml_call2(Bin_prot_Common[18], _B_, pos_ref[1]);
          return [0, v_new_seqnum, v_response];
         },
         function(buf, pos_ref, vtag){
          return caml_call2
                  (Bin_prot_Common[19],
                   cst_src_polling_state_rpc_ml_R$0,
                   pos_ref[1]);
         }]],
     bin_reader_query = bin_query$0[3],
     bin_writer_query = bin_query$0[2],
     bin_query =
       [0,
        bin_shape_t$0(bin_query$0[1]),
        [0,
         function(v){
          var size_of_query = bin_writer_query[1];
          if(0 === v[0]){
           var
            v3 = v[3],
            v2 = v[2],
            v1 = v[1],
            _a8_ = caml_call2(Core[455], bin_size_t, v1),
            size = caml_call2(Bin_prot_Common[23], 1, _a8_),
            _a9_ = caml_call1(size_of_query, v2),
            size$0 = caml_call2(Bin_prot_Common[23], size, _a9_),
            _a__ = caml_call1(Client_id[1], v3);
           return caml_call2(Bin_prot_Common[23], size$0, _a__);
          }
          var v1$0 = v[1], _a$_ = caml_call1(Client_id[1], v1$0);
          return caml_call2(Bin_prot_Common[23], 1, _a$_);
         },
         function(buf){
          var write_query = bin_writer_query[2];
          return function(pos$3, param){
           if(0 === param[0]){
            var
             v3 = param[3],
             v2 = param[2],
             v1 = param[1],
             pos = caml_call3(Bin_prot_Write[30], buf, pos$3, 0),
             pos$0 = caml_call4(Core[456], bin_write_t, buf, pos, v1),
             pos$1 = caml_call3(write_query, buf, pos$0, v2);
            return caml_call3(Client_id[2], buf, pos$1, v3);
           }
           var
            v1$0 = param[1],
            pos$2 = caml_call3(Bin_prot_Write[30], buf, pos$3, 1);
           return caml_call3(Client_id[2], buf, pos$2, v1$0);};
         }],
        [0,
         function(buf, pos_ref){
          var
           of_query = bin_reader_query[1],
           match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
          if(0 === match){
           var
            v_last_seqnum =
              caml_call2(caml_call1(Core[458], bin_read_t), buf, pos_ref),
            v_query = caml_call2(of_query, buf, pos_ref),
            v_client_id = caml_call2(Client_id[3], buf, pos_ref);
           return [0, v_last_seqnum, v_query, v_client_id];
          }
          if(1 !== match)
           return caml_call2(Bin_prot_Common[18], _l_, pos_ref[1]);
          var arg_1 = caml_call2(Client_id[3], buf, pos_ref);
          return [1, arg_1];
         },
         function(buf, pos_ref, vtag){
          return caml_call2
                  (Bin_prot_Common[19],
                   cst_src_polling_state_rpc_ml_R,
                   pos_ref[1]);
         }]];
    return [0,
            M,
            query_equal,
            caml_call4
             (Async_rpc_kernel_Rpc[6][1],
              name,
              version,
              bin_query,
              bin_response)];
   }
   function implement_with_client_state
   (on_client_and_server_out_of_sy,
    create_client_state,
    opt,
    for_first_request,
    t,
    f){
    var
     on_client_forgotten = opt ? opt[1] : function(_a7_){return 0;},
     underlying_rpc = t[3],
     query_equal = t[2],
     response_module = t[1],
     for_first_request$0 = caml_call2(Core_Option[35], for_first_request, f),
     cache = [0, caml_call1(Core_Bag[22], 0), on_client_forgotten];
    return caml_call3
            (Async_rpc_kernel_Rpc[6][9],
             0,
             underlying_rpc,
             function(param, request){
              var connection = param[2], connection_state = param[1];
              a:
              if(0 === request[0]){
               var last_seqnum = request[1];
               if(last_seqnum){
                var
                 client_id = request[3],
                 query = request[2],
                 last_seqnum$0 = last_seqnum[1];
                if(caml_call2(equal, last_seqnum$0, forget)){
                 var match$0 = [2, query, client_id];
                 break a;
                }
               }
               var
                client_id$0 = request[3],
                query$0 = request[2],
                match$0 = [0, last_seqnum, query$0, client_id$0];
              }
              else
               var client_id$1 = request[1], match$0 = [1, client_id$1];
              switch(match$0[0]){
                case 0:
                 var
                  client_id$2 = match$0[3],
                  query$1 = match$0[2],
                  last_seqnum$1 = match$0[1],
                  per_client =
                    find
                     (cache,
                      connection_state,
                      connection,
                      client_id$2,
                      create_client_state),
                  match = per_client[1];
                 if(match){
                  var _aU_ = match[1], prev_seqnum = _aU_[2], prev = _aU_[1];
                  if(last_seqnum$1){
                   var last_seqnum$2 = last_seqnum$1[1];
                   if(caml_call2(equal, prev_seqnum, last_seqnum$2))
                    var _aV_ = [0, prev];
                   else{
                    var
                     rpc_name =
                       caml_call1(Async_rpc_kernel_Rpc[6][2], underlying_rpc),
                     rpc_version =
                       caml_call1(Async_rpc_kernel_Rpc[6][3], underlying_rpc),
                     _a0_ =
                       [0,
                        [1, [0, _X_, [0, caml_call1(Core[363], rpc_version), 0]]],
                        0],
                     _a1_ =
                       [0,
                        [1, [0, _Y_, [0, caml_call1(Core[484], rpc_name), 0]]],
                        _a0_],
                     _a2_ =
                       [0,
                        caml_call1
                         (Sexplib0_Sexp_conv[7], cst_A_polling_state_RPC_client),
                        _a1_];
                    caml_call1
                     (on_client_and_server_out_of_sy,
                      [1,
                       [0,
                        caml_call1
                         (Sexplib0_Sexp_conv[7], cst_src_polling_state_rpc_ml_2),
                        _a2_]]);
                    var _aV_ = 0;
                   }
                   var _aW_ = _aV_;
                  }
                  else{
                   var
                    rpc_name$0 =
                      caml_call1(Async_rpc_kernel_Rpc[6][2], underlying_rpc),
                    rpc_version$0 =
                      caml_call1(Async_rpc_kernel_Rpc[6][3], underlying_rpc),
                    _a3_ =
                      [0,
                       [1, [0, _Z_, [0, caml_call1(Core[363], rpc_version$0), 0]]],
                       0],
                    _a4_ =
                      [0,
                       [1, [0, ___, [0, caml_call1(Core[484], rpc_name$0), 0]]],
                       _a3_],
                    _a5_ =
                      [0,
                       caml_call1
                        (Sexplib0_Sexp_conv[7], cst_A_polling_state_RPC_client$0),
                       _a4_];
                   caml_call1
                    (on_client_and_server_out_of_sy,
                     [1,
                      [0,
                       caml_call1
                        (Sexplib0_Sexp_conv[7], cst_src_polling_state_rpc_ml_2$0),
                       _a5_]]);
                   var _aW_ = 0;
                  }
                  var prev$0 = _aW_;
                 }
                 else
                  var prev$0 = 0;
                 var client_state = per_client[3];
                 if(prev$0)
                  var
                   prev$1 = prev$0[1],
                   prev_response = prev$1[2],
                   prev_query = prev$1[1],
                   _aX_ =
                     function(param){
                      var userdata = param[2], response = param[1];
                      return [0, response, userdata];
                     },
                   f$0 =
                     caml_call2(query_equal, prev_query, query$1)
                      ? f
                      : for_first_request$0,
                   _aS_ =
                     caml_call3(f$0, connection_state, client_state, query$1),
                   _aT_ =
                     caml_call2
                      (Async_kernel[22][3],
                       _aS_,
                       function(new$0){
                        var
                         diff = caml_call2(response_module[11], prev_response, new$0);
                        return [0, [1, diff], new$0];
                       }),
                   response = caml_call2(Async_kernel[22][3], _aT_, _aX_);
                 else
                  var
                   _aQ_ =
                     caml_call3
                      (for_first_request$0,
                       connection_state,
                       client_state,
                       query$1),
                   _aR_ =
                     caml_call2
                      (Async_kernel[22][3],
                       _aQ_,
                       function(response){return [0, response, response];}),
                   response =
                     caml_call2
                      (Async_kernel[22][3],
                       _aR_,
                       function(param){
                        var userdata = param[2], response = param[1];
                        return [0, [0, response], userdata];
                       });
                 var
                  _aP_ = caml_call1(Async_kernel_Ivar[18], per_client[2]),
                  _aY_ =
                    [0,
                     caml_call2
                      (Async_kernel[4],
                       _aP_,
                       function(param){return -1006147983;}),
                     0],
                  _aZ_ =
                    [0,
                     caml_call2
                      (Async_kernel[4],
                       response,
                       function(r){return [0, -71406943, r];}),
                     _aY_],
                  response_or_cancelled = caml_call1(Async_kernel[5], _aZ_);
                 return caml_call2
                         (Async_kernel[22][3],
                          response_or_cancelled,
                          function(param){
                           if(typeof param === "number")
                            return caml_call1
                                    (Base_Exn[6],
                                     [0, Stdlib[7], cst_this_request_was_cancelled]);
                           var
                            match = param[2],
                            userdata = match[2],
                            response = match[1],
                            data = [0, query$1, userdata],
                            new_seqnum = caml_call1(create, 0);
                           per_client[1] = [0, [0, data, new_seqnum]];
                           trigger_cancel(per_client);
                           return [0, new_seqnum, response];
                          });
                case 1:
                 var
                  client_id$3 = match$0[1],
                  per_client$0 =
                    find
                     (cache,
                      connection_state,
                      connection,
                      client_id$3,
                      create_client_state);
                 trigger_cancel(per_client$0);
                 return caml_call1(Async_kernel[19], 0);
                default:
                 var
                  client_id$4 = match$0[2],
                  _aO_ = find_by_connection(cache[1], connection);
                 caml_call2
                  (Core_Option[42],
                   _aO_,
                   function(per_connection){
                    var
                     _a6_ =
                       caml_call2(Core_Hashtbl[63], per_connection, client_id$4);
                    return caml_call2
                            (Core_Option[42],
                             _a6_,
                             function(per_client){
                              caml_call1(cache[2], per_client[3]);
                              return caml_call2(Async_kernel_Ivar[14], per_client[2], 0);
                             });
                   });
                 return caml_call1(Async_kernel[19], 0);
              }
             });
   }
   function implement(on_client_and_server_out_of_sy, for_first_request, t, f){
    var
     for_first_request$0 =
       caml_call2
        (Core_Option[30],
         for_first_request,
         function(f, connection_state, client_state, query){return caml_call2(f, connection_state, query);
         });
    function f$0(connection_state, client_state, query){return caml_call2(f, connection_state, query);
    }
    return implement_with_client_state
            (on_client_and_server_out_of_sy,
             function(param){return 0;},
             0,
             for_first_request$0,
             t,
             f$0);
   }
   function implement_via_bus
   (on_client_and_server_out_of_sy,
    create_client_state,
    on_client_forgotten,
    rpc,
    f){
    return implement_with_client_state
            (on_client_and_server_out_of_sy,
             function(connection_state){
              var _aN_ = caml_call1(create_client_state, connection_state);
              return [0,
                      caml_call1(Async_kernel_Mvar[4], 0),
                      [0, function(param){return 0;}],
                      _aN_];
             },
             caml_call2
              (Core_Option[30],
               on_client_forgotten,
               function(on_client_forgotten, param){
                var client_state = param[3];
                return caml_call1(on_client_forgotten, client_state);
               }),
             [0,
              function(connection_state, param, query){
               var
                client_state = param[3],
                unsubscribe = param[2],
                most_recent_unsent_response = param[1];
               caml_call1(Async_kernel_Mvar[14], most_recent_unsent_response);
               caml_call1(unsubscribe[1], 0);
               var
                bus = caml_call3(f, connection_state, client_state, query),
                subscriber =
                  caml_call6
                   (Bus[19],
                    0,
                    0,
                    0,
                    bus,
                    _$_,
                    function(response){
                     return caml_call2
                             (Async_kernel_Mvar[7],
                              most_recent_unsent_response,
                              response);
                    });
               unsubscribe[1] =
                function(param){return caml_call2(Bus[23], bus, subscriber);};
               return caml_call1
                       (Async_kernel_Mvar[13], most_recent_unsent_response);
              }],
             rpc,
             function(connection_state, param, query){
              var most_recent_unsent_response = param[1];
              return caml_call1
                      (Async_kernel_Mvar[13], most_recent_unsent_response);
             });
   }
   function dispatch_underlying(t, connection, request){
    switch(request[0]){
      case 0:
       var
        client_id = request[3],
        query = request[2],
        last_seqnum = request[1],
        _aM_ = [0, last_seqnum, query, client_id];
       break;
      case 1:
       var client_id$0 = request[1], _aM_ = [1, client_id$0]; break;
      default:
       var
        client_id$1 = request[2],
        query$0 = request[1],
        _aM_ = [0, [0, forget], query$0, client_id$1];
    }
    return caml_call4(Async_rpc_kernel_Rpc[6][13], 0, t[11], connection, _aM_);
   }
   function dispatch(t, connection, query){
    t[2] = [0, query];
    var
     last_seqnum = t[1],
     client_id = t[7],
     _aH_ =
       dispatch_underlying(t, connection, [0, last_seqnum, query, client_id]);
    return caml_call2
            (Async_kernel[22][2],
             _aH_,
             function(response){
              if(0 !== response[0]){
               var e = response[1];
               return caml_call1(Async_kernel[19], [1, e]);
              }
              var match = response[1];
              if(match){
               var
                response$0 = match[2],
                new_seqnum = match[1],
                new_out = caml_call3(t[12], t[4], query, response$0);
               t[1] = [0, new_seqnum];
               t[4] = [0, new_out];
               caml_call3(Bus[14], t[8], query, new_out);
               return caml_call1(Async_kernel[19], [0, new_out]);
              }
              var
               _aI_ =
                 [0,
                  caml_call1
                   (Sexplib0_Sexp_conv[7], cst_cancellation_caused_by_reg),
                  0],
               _aJ_ =
                 [0,
                  caml_call1
                   (Sexplib0_Sexp_conv[7], cst_src_polling_state_rpc_ml_4$0),
                  _aI_],
               _aK_ =
                 [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_BUG$0), _aJ_]],
               _aL_ = caml_call1(Core_Or_error[40], _aK_);
              return caml_call1(Async_kernel[19], _aL_);
             });
   }
   function collapse_sequencer_error(param){
    if(typeof param === "number")
     return [1, caml_call1(Core_Error[12], cst_Request_aborted)];
    if(17724 <= param[1]){
     var result_or_error = param[2];
     return result_or_error;
    }
    var exn = param[2];
    return [1, caml_call2(Core_Error[25], 0, exn)];
   }
   function dispatch$0(param, connection, query){
    var
     t = param[1],
     query_dispatch_id = caml_call1(Query_dispatch_id[45], 0);
    t[3] = query_dispatch_id;
    var
     _az_ =
       caml_call2
        (Async_kernel_Throttle[8],
         t[6],
         function(param){
          var match = t[2];
          if(! match) return Async_kernel_Deferred_or_error[37];
          var
           q = match[1],
           _aB_ = caml_call1(Async_kernel_Throttle[14], t[5]);
          if(caml_call2(Core[89], _aB_, 0))
           return Async_kernel_Deferred_or_error[37];
          if(caml_call2(t[10], query, q))
           return Async_kernel_Deferred_or_error[37];
          caml_call1(Async_kernel_Throttle[17], t[5]);
          var _aC_ = dispatch_underlying(t, connection, [1, t[7]]);
          return caml_call2
                  (Async_kernel[22][2],
                   _aC_,
                   function(cancel_response){
                    var _aD_ = caml_call1(Async_kernel_Throttle[20], t[5]);
                    return caml_call2
                            (Async_kernel[22][3],
                             _aD_,
                             function(param){
                              t[5] = caml_call2(Async_kernel_Throttle[21][2], _aa_, 0);
                              if(0 !== cancel_response[0]){
                               var e = cancel_response[1];
                               return [1, e];
                              }
                              if(! cancel_response[1]) return _ab_;
                              var
                               _aE_ =
                                 [0,
                                  caml_call1
                                   (Sexplib0_Sexp_conv[7], cst_regular_response_caused_by),
                                  0],
                               _aF_ =
                                 [0,
                                  caml_call1
                                   (Sexplib0_Sexp_conv[7], cst_src_polling_state_rpc_ml_4),
                                  _aE_],
                               _aG_ =
                                 [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_BUG), _aF_]];
                              return caml_call1(Core_Or_error[40], _aG_);
                             });
                   });
         });
    return caml_call2
            (Async_kernel_Deferred_or_error[19][4][2],
             _az_,
             function(param){
              var
               _aA_ =
                 caml_call2(Query_dispatch_id[19], t[3], query_dispatch_id)
                  ? caml_call2
                    (Async_kernel_Throttle[7],
                     t[5],
                     function(param){return dispatch(t, connection, query);})
                  : caml_call1(Async_kernel[19], -216426513);
              return caml_call2
                      (Async_kernel[21], _aA_, collapse_sequencer_error);
             });
   }
   function redispatch(param, connection){
    var
     t = param[1],
     _ax_ =
       caml_call2
        (Async_kernel_Throttle[7],
         t[5],
         function(param){
          var match = t[2];
          if(match){var q = match[1]; return dispatch(t, connection, q);}
          var
           _ay_ =
             [1, caml_call1(Core_Error[12], cst_redispatch_called_before_a)];
          return caml_call1(Async_kernel_Deferred[12], _ay_);
         });
    return caml_call2(Async_kernel[21], _ax_, collapse_sequencer_error);
   }
   function forget_on_server(param, connection){
    var t = param[1];
    t[3] = caml_call1(Query_dispatch_id[45], 0);
    var match = t[2];
    if(! match) return Async_kernel_Deferred_or_error[37];
    var
     query = match[1],
     _ar_ =
       caml_call2
        (Async_kernel_Throttle[7],
         t[6],
         function(param){
          caml_call1(Async_kernel_Throttle[17], t[5]);
          var _as_ = dispatch_underlying(t, connection, [2, query, t[7]]);
          return caml_call2
                  (Async_kernel[22][2],
                   _as_,
                   function(forget_response){
                    var _at_ = caml_call1(Async_kernel_Throttle[20], t[5]);
                    return caml_call2
                            (Async_kernel[22][3],
                             _at_,
                             function(param){
                              t[5] = caml_call2(Async_kernel_Throttle[21][2], _ac_, 0);
                              if(0 !== forget_response[0]){
                               var e = forget_response[1];
                               return [1, e];
                              }
                              if(! forget_response[1]) return _ad_;
                              var
                               _au_ =
                                 [0,
                                  caml_call1
                                   (Sexplib0_Sexp_conv[7], cst_Regular_response_caused_by),
                                  0],
                               _av_ =
                                 [0,
                                  caml_call1
                                   (Sexplib0_Sexp_conv[7], cst_src_polling_state_rpc_ml_5),
                                  _au_],
                               _aw_ =
                                 [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_BUG$1), _av_]];
                              return caml_call1(Core_Or_error[40], _aw_);
                             });
                   });
         });
    return caml_call2(Async_kernel[21], _ar_, collapse_sequencer_error);
   }
   function query(param){var last_query = param[1][2]; return last_query;}
   function bus(param){var bus = param[1][8]; return caml_call1(Bus[6], bus);}
   function create$1(initial_query, t){
    var underlying_rpc = t[3], query_equal = t[2], response_module = t[1];
    function f(prev, query, param){
     if(0 === param[0]){var r = param[1]; return r;}
     var diffs = param[1];
     if(prev){
      var prev$0 = prev[1];
      return caml_call2(response_module[10], prev$0, diffs);
     }
     var
      _ao_ =
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_received_an_update_without),
         0],
      _ap_ =
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_src_polling_state_rpc_ml_5$0),
         _ao_],
      _aq_ = [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_BUG$2), _ap_]];
     return caml_call1(Core[255], _aq_);
    }
    var
     bus =
       caml_call5
        (Bus[7],
         0,
         _ae_,
         2,
         1,
         function(error){
          var
           _am_ = caml_call2(Core_Error[20], error, tag),
           _an_ = caml_call1(Core_Error[6], _am_);
          return caml_call2(Core[251], 0, _an_);
         }),
     sequencer = caml_call2(Async_kernel_Throttle[21][2], _af_, 0),
     cleaning_sequencer = caml_call2(Async_kernel_Throttle[21][2], _ag_, 0),
     _al_ = caml_call1(Client_id[45], 0);
    return [0,
            [0,
             0,
             initial_query,
             caml_call1(Query_dispatch_id[45], 0),
             0,
             sequencer,
             cleaning_sequencer,
             _al_,
             bus,
             response_module,
             query_equal,
             underlying_rpc,
             f]];
   }
   function sexp_of_t(sexp_of_a, param){
    if(0 === param[0]){
     var a = param[1], _aj_ = caml_call1(sexp_of_a, a);
     return [1, [0, _ah_, [0, caml_call1(Core_Sexp[90], _aj_), 0]]];
    }
    var sexp_of = param[2], t = param[1], _ak_ = caml_call1(sexp_of, t);
    return [1, [0, _ai_, [0, caml_call1(Core_Sexp[90], _ak_), 0]]];
   }
   var Response = [0, sexp_of_t];
   function create_client(initial_query, t, introspect){
    var
     client = create$1(initial_query, t)[1],
     response_module = client[9],
     fold = client[12];
    function new_fold(prev, query, resp){
     if(0 === resp[0])
      var r = resp[1], resp$0 = [0, r];
     else
      var
       diffs = resp[1],
       resp$0 =
         [1,
          diffs,
          function(x_021){
           return caml_call2(Core[431], response_module[9][1][10], x_021);
          }];
     caml_call3(introspect, prev, query, resp$0);
     return caml_call3(fold, prev, query, resp);
    }
    return [0,
            [0,
             client[1],
             client[2],
             client[3],
             client[4],
             client[5],
             client[6],
             client[7],
             client[8],
             client[9],
             client[10],
             client[11],
             new_fold]];
   }
   caml_call1(Ppx_inline_test_lib[6], cst_polling_state_rpc);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Polling_state_rpc);
   var
    Polling_state_rpc =
      [0,
       name,
       create$0,
       implement,
       implement_with_client_state,
       implement_via_bus,
       [0, create$1, dispatch$0, redispatch, forget_on_server, query, bus],
       [0, Response, create_client]];
   runtime.caml_register_global(139, Polling_state_rpc, cst_Polling_state_rpc);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
