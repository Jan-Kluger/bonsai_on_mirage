// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Streamable__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Streamable = [0];
   runtime.caml_register_global(0, Streamable, "Streamable__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Import
//# unitInfo: Requires: Async_rpc_kernel, Core__Sequence, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Import = "Streamable__Import",
    cst_streamable = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Async_rpc_kernel = global_data.Async_rpc_kernel,
    Core_Sequence = global_data.Core__Sequence;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Expect_test_collector[6][1], "src/import.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_streamable, "import.ml");
   var
    Rpc_metadata = Async_rpc_kernel[1],
    Async_rpc_kernel_stable = Async_rpc_kernel[2],
    Async_rpc_kernel_private = Async_rpc_kernel[3],
    bin_shape_t = Core_Sequence[1],
    bin_size_t = Core_Sequence[2],
    bin_write_t = Core_Sequence[3],
    bin_read_t = Core_Sequence[4],
    bin_read_t$0 = Core_Sequence[5],
    bin_writer_t = Core_Sequence[6],
    bin_reader_t = Core_Sequence[7],
    bin_t = Core_Sequence[8],
    Step = Core_Sequence[9],
    Merge_with_duplicates_element = Core_Sequence[10],
    sexp_of_t = Core_Sequence[11],
    equal = Core_Sequence[12],
    compare = Core_Sequence[13],
    mem = Core_Sequence[14],
    length = Core_Sequence[15],
    is_empty = Core_Sequence[16],
    iter = Core_Sequence[17],
    fold = Core_Sequence[18],
    fold_result = Core_Sequence[19],
    fold_until = Core_Sequence[20],
    exists = Core_Sequence[21],
    for_all = Core_Sequence[22],
    count = Core_Sequence[23],
    sum = Core_Sequence[24],
    find = Core_Sequence[25],
    find_map = Core_Sequence[26],
    to_list = Core_Sequence[27],
    to_array = Core_Sequence[28],
    min_elt = Core_Sequence[29],
    max_elt = Core_Sequence[30],
    foldi = Core_Sequence[31],
    iteri = Core_Sequence[32],
    existsi = Core_Sequence[33],
    counti = Core_Sequence[34],
    findi = Core_Sequence[35],
    find_mapi = Core_Sequence[36],
    symbol_bind = Core_Sequence[37],
    symbol_map = Core_Sequence[38],
    bind = Core_Sequence[39],
    return$0 = Core_Sequence[40],
    map = Core_Sequence[41],
    join = Core_Sequence[42],
    ignore_m = Core_Sequence[43],
    all = Core_Sequence[44],
    all_unit = Core_Sequence[45],
    empty = Core_Sequence[46],
    next = Core_Sequence[47],
    unfold_step = Core_Sequence[48],
    unfold = Core_Sequence[49],
    unfold_with = Core_Sequence[50],
    unfold_with_and_finish = Core_Sequence[51],
    nth = Core_Sequence[52],
    nth_exn = Core_Sequence[53],
    folding_map = Core_Sequence[54],
    folding_mapi = Core_Sequence[55],
    mapi = Core_Sequence[56],
    filteri = Core_Sequence[57],
    filter = Core_Sequence[58],
    merge_deduped_and_sorted = Core_Sequence[59],
    merge = Core_Sequence[60],
    merge_sorted = Core_Sequence[61],
    merge_with_duplicates = Core_Sequence[62],
    hd = Core_Sequence[63],
    hd_exn = Core_Sequence[64],
    tl = Core_Sequence[65],
    tl_eagerly_exn = Core_Sequence[66],
    find_exn = Core_Sequence[67],
    for_alli = Core_Sequence[68],
    append = Core_Sequence[69],
    concat = Core_Sequence[70],
    concat_map = Core_Sequence[71],
    concat_mapi = Core_Sequence[72],
    interleave = Core_Sequence[73],
    round_robin = Core_Sequence[74],
    zip = Core_Sequence[75],
    zip_full = Core_Sequence[76],
    reduce_exn = Core_Sequence[77],
    reduce = Core_Sequence[78],
    group = Core_Sequence[79],
    find_consecutive_duplicate = Core_Sequence[80],
    remove_consecutive_duplicates = Core_Sequence[81],
    range = Core_Sequence[82],
    init = Core_Sequence[83],
    filter_map = Core_Sequence[84],
    filter_mapi = Core_Sequence[85],
    filter_opt = Core_Sequence[86],
    sub = Core_Sequence[87],
    take = Core_Sequence[88],
    drop = Core_Sequence[89],
    drop_eagerly = Core_Sequence[90],
    take_while = Core_Sequence[91],
    drop_while = Core_Sequence[92],
    drop_while_option = Core_Sequence[93],
    split_n = Core_Sequence[94],
    chunks_exn = Core_Sequence[95],
    shift_right = Core_Sequence[96],
    shift_right_with_list = Core_Sequence[97],
    shift_left = Core_Sequence[98],
    cartesian_product = Core_Sequence[99],
    interleaved_cartesian_product = Core_Sequence[100],
    intersperse = Core_Sequence[101],
    cycle_list_exn = Core_Sequence[102],
    repeat = Core_Sequence[103],
    singleton = Core_Sequence[104],
    delayed_fold = Core_Sequence[105],
    fold_m = Core_Sequence[106],
    iter_m = Core_Sequence[107],
    to_list_rev = Core_Sequence[108],
    of_list = Core_Sequence[109],
    of_lazy = Core_Sequence[110],
    memoize = Core_Sequence[111],
    force_eagerly = Core_Sequence[112],
    bounded_length = Core_Sequence[113],
    length_is_bounded_by = Core_Sequence[114],
    of_seq = Core_Sequence[115],
    to_seq = Core_Sequence[116],
    merge_all = Core_Sequence[117];
   function cons(x, xs){return caml_call2(shift_right, xs, x);}
   var
    Sequence =
      [0,
       bin_shape_t,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       Step,
       Merge_with_duplicates_element,
       sexp_of_t,
       equal,
       compare,
       mem,
       length,
       is_empty,
       iter,
       fold,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       foldi,
       iteri,
       existsi,
       counti,
       findi,
       find_mapi,
       symbol_bind,
       symbol_map,
       bind,
       return$0,
       map,
       join,
       ignore_m,
       all,
       all_unit,
       empty,
       next,
       unfold_step,
       unfold,
       unfold_with,
       unfold_with_and_finish,
       nth,
       nth_exn,
       folding_map,
       folding_mapi,
       mapi,
       filteri,
       filter,
       merge_deduped_and_sorted,
       merge,
       merge_sorted,
       merge_with_duplicates,
       hd,
       hd_exn,
       tl,
       tl_eagerly_exn,
       find_exn,
       for_alli,
       append,
       concat,
       concat_map,
       concat_mapi,
       interleave,
       round_robin,
       zip,
       zip_full,
       reduce_exn,
       reduce,
       group,
       find_consecutive_duplicate,
       remove_consecutive_duplicates,
       range,
       init,
       filter_map,
       filter_mapi,
       filter_opt,
       sub,
       take,
       drop,
       drop_eagerly,
       take_while,
       drop_while,
       drop_while_option,
       split_n,
       chunks_exn,
       shift_right,
       shift_right_with_list,
       shift_left,
       cartesian_product,
       interleaved_cartesian_product,
       intersperse,
       cycle_list_exn,
       repeat,
       singleton,
       delayed_fold,
       fold_m,
       iter_m,
       to_list_rev,
       of_list,
       of_lazy,
       memoize,
       force_eagerly,
       bounded_length,
       length_is_bounded_by,
       of_seq,
       to_seq,
       merge_all,
       cons];
   caml_call1(Ppx_inline_test_lib[6], cst_streamable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Import);
   var
    Streamable_Import =
      [0,
       Rpc_metadata,
       Async_rpc_kernel_stable,
       Async_rpc_kernel_private,
       Sequence];
   runtime.caml_register_global(13, Streamable_Import, cst_Streamable_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Module_type
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Module_type = "Streamable__Module_type",
    cst_streamable = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Module_type);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Expect_test_collector[6][1], "src/module_type.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_streamable, "module_type.ml");
   function Coerce1(_d_){
    var _e_ = _d_[1], _f_ = _e_[1];
    return [0,
            [0,
             [0,
              _f_[1],
              _f_[2],
              _f_[3],
              _f_[4],
              _f_[5],
              _f_[6],
              _f_[7],
              _f_[8],
              _f_[10]],
             _e_[2],
             _e_[3]],
            _d_[2],
            _d_[3]];
   }
   function Coerce2(_a_){
    var _b_ = _a_[1], _c_ = _b_[1];
    return [0,
            [0,
             [0,
              _c_[1],
              _c_[2],
              _c_[3],
              _c_[4],
              _c_[5],
              _c_[6],
              _c_[7],
              _c_[8]],
             _b_[2],
             _b_[3]],
            _a_[2],
            _a_[3]];
   }
   caml_call1(Ppx_inline_test_lib[6], cst_streamable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Module_type);
   var Streamable_Module_type = [0, Coerce1, Coerce2];
   runtime.caml_register_global
    (11, Streamable_Module_type, cst_Streamable_Module_type);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Remove_t
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Remove_t = "Streamable__Remove_t",
    cst_streamable = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Remove_t);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Expect_test_collector[6][1], "src/remove_t.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_streamable, "remove_t.ml");
   function F(S){
    var Intermediate = S[1], to_parts = S[2], finalize = S[3];
    return [0, S, Intermediate, to_parts, finalize];
   }
   function F_rpc(S){
    var Intermediate = S[1], to_parts = S[2], finalize = S[3];
    return [0, S, Intermediate, to_parts, finalize];
   }
   caml_call1(Ppx_inline_test_lib[6], cst_streamable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Remove_t);
   var Streamable_Remove_t = [0, F, F_rpc];
   runtime.caml_register_global
    (11, Streamable_Remove_t, cst_Streamable_Remove_t);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Main_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Main_intf = "Streamable__Main_intf",
    cst_streamable = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Main_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Expect_test_collector[6][1], "src/main_intf.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_streamable, "main_intf.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_streamable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Main_intf);
   var Streamable_Main_intf = [0];
   runtime.caml_register_global
    (11, Streamable_Main_intf, cst_Streamable_Main_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Main
//# unitInfo: Requires: Base__Sequence, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Utils, Bin_prot__Write, Bin_shape, CamlinternalMod, Core, Core__Fqueue, Core__Hashtbl, Core__List, Core__Map, Core__Option, Core__Queue, Core__Set, Core__Source_code_position, Core__Stack, Expect_test_collector, Nonempty_list, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Streamable__Import, Streamable__Main_intf, Streamable__Remove_t, Total_map
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_859f388a_490a_11e6_b296_cb$1 = "859f388a-490a-11e6-b296-cbd133aa1837",
    cst_A$7 = "A",
    cst_A_part$2 = "A_part",
    cst_A_start = "A_start",
    cst_Add_key$0 = "Add_key",
    cst_Add_part$0 = "Add_part",
    cst_Atom = "Atom",
    cst_B$7 = "B",
    cst_B_part$2 = "B_part",
    cst_B_start = "B_start",
    cst_C$6 = "C",
    cst_C_part$1 = "C_part",
    cst_C_start = "C_start",
    cst_D$5 = "D",
    cst_D_part$0 = "D_part",
    cst_D_start = "D_start",
    cst_E$4 = "E",
    cst_Elt_first_part$0 = "Elt_first_part",
    cst_Elt_later_part$0 = "Elt_later_part",
    cst_Elt_no_parts = "Elt_no_parts",
    cst_Elt_part$1 = "Elt_part",
    cst_Elt_start = "Elt_start",
    cst_F$3 = "F",
    cst_G$2 = "G",
    cst_H$1 = "H",
    cst_I$0 = "I",
    cst_Pop = "Pop",
    cst_Push = "Push",
    cst_Streamable_Main = "Streamable__Main",
    cst_a = "a",
    cst_a_part = "a_part",
    cst_a_start = "a_start",
    cst_add_key = "add_key",
    cst_add_part = "add_part",
    cst_atom = "atom",
    cst_b = "b",
    cst_b_part = "b_part",
    cst_b_start = "b_start",
    cst_c = "c",
    cst_c_part = "c_part",
    cst_c_start = "c_start",
    cst_d = "d",
    cst_d_part = "d_part",
    cst_d_start = "d_start",
    cst_e = "e",
    cst_elt_first_part = "elt_first_part",
    cst_elt_later_part = "elt_later_part",
    cst_elt_no_parts = "elt_no_parts",
    cst_elt_part = "elt_part",
    cst_elt_start = "elt_start",
    cst_f = "f",
    cst_g = "g",
    cst_h = "h",
    cst_i = "i",
    cst_pop = "pop",
    cst_push = "push",
    cst_src_main_ml = "src/main.ml",
    cst_src_main_ml_Stable_Of_key_$0 =
      "src/main.ml.Stable.Of_key_value_intermediate_part.Make.t",
    cst_src_main_ml_Stable_Of_list$2 =
      "src/main.ml.Stable.Of_list_or_sequence_not_packed_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_list$1 =
      "src/main.ml.Stable.Of_list_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_opti$0 =
      "src/main.ml.Stable.Of_option_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_sexp$0 =
      "src/main.ml.Stable.Of_sexps.V1_unpacked.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_tupl$14 =
      "src/main.ml.Stable.Of_tuple2_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_tupl$13 =
      "src/main.ml.Stable.Of_tuple3_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_tupl$12 =
      "src/main.ml.Stable.Of_tuple4_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_tupl$11 =
      "src/main.ml.Stable.Of_tuple5_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_tupl$10 =
      "src/main.ml.Stable.Of_tuple6_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_tupl$9 =
      "src/main.ml.Stable.Of_tuple7_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_tupl$8 =
      "src/main.ml.Stable.Of_tuple8_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_tupl$7 =
      "src/main.ml.Stable.Of_tuple9_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_vari$4 =
      "src/main.ml.Stable.Of_variant2_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_vari$3 =
      "src/main.ml.Stable.Of_variant3_rpc.V1.Intermediate.Part.t",
    cst_src_main_ml_Stable_Of_vari$2 =
      "src/main.ml.Stable.Of_variant4_rpc.V1.Intermediate.Part.t",
    cst_streamable = "streamable",
    cst_t$31 = "t",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    error_source_482 = "src/main.ml.Stable.Of_option.V1.t",
    error_source_457 = "src/main.ml.Stable.Of_list.V1.t",
    error_source_439 =
      "src/main.ml.Stable.Of_list_or_sequence_not_packed.V1.t",
    error_source_407 = "src/main.ml.Stable.Of_variant4.V1.t",
    error_source_382 = "src/main.ml.Stable.Of_variant3.V1.t",
    error_source_364 = "src/main.ml.Stable.Of_variant2.V1.t",
    error_source_297 = "src/main.ml.Stable.Of_tuple9.V1.t",
    error_source_237 = "src/main.ml.Stable.Of_tuple8.V1.t",
    error_source_184 = "src/main.ml.Stable.Of_tuple7.V1.t",
    error_source_138 = "src/main.ml.Stable.Of_tuple6.V1.t",
    error_source_099 = "src/main.ml.Stable.Of_tuple5.V1.t",
    error_source_067 = "src/main.ml.Stable.Of_tuple4.V1.t",
    error_source_042 = "src/main.ml.Stable.Of_tuple3.V1.t",
    error_source_024 = "src/main.ml.Stable.Of_tuple2.V1.t",
    error_source_006 = "src/main.ml.Stable.Of_key_value_store.V1.t",
    error_source_468 = cst_src_main_ml_Stable_Of_sexp$0,
    CamlinternalMod = global_data.CamlinternalMod,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Streamable_Remove_t = global_data.Streamable__Remove_t,
    Core_Set = global_data.Core__Set,
    Core_Fqueue = global_data.Core__Fqueue,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Streamable_Import = global_data.Streamable__Import,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Base_Sequence = global_data.Base__Sequence,
    Core_List = global_data.Core__List,
    Core_Stack = global_data.Core__Stack,
    Core_Queue = global_data.Core__Queue,
    Core = global_data.Core,
    Nonempty_list = global_data.Nonempty_list,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Core_Map = global_data.Core__Map,
    Total_map = global_data.Total_map,
    Bin_prot_Utils = global_data.Bin_prot__Utils,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Option = global_data.Core__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Main);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Expect_test_collector[6][1], cst_src_main_ml);
   caml_call2(Ppx_inline_test_lib[5], cst_streamable, "main.ml");
   var
    cst_859ed728_490a_11e6_a4b5_57 = "859ed728-490a-11e6-a4b5-576fb351e891",
    _a_ = [0, cst_src_main_ml, 163, 10];
   function V1(S, Part_sexp){
    var
     to_parts = S[2],
     finalize = S[3],
     include = S[1],
     Part = include[1],
     create = include[2],
     apply_part = include[3],
     bin_size_t = Part[1],
     bin_write_t = Part[2],
     bin_read_t = Part[3],
     bin_read_t$0 = Part[4],
     bin_shape_t = Part[5],
     bin_writer_t = Part[6],
     bin_reader_t = Part[7],
     bin_t = Part[8],
     t_of_sexp = Part_sexp[1],
     sexp_of_t = Part_sexp[2],
     Part$0 =
       [0,
        bin_size_t,
        bin_write_t,
        bin_read_t,
        bin_read_t$0,
        bin_shape_t,
        bin_writer_t,
        bin_reader_t,
        bin_t,
        t_of_sexp,
        sexp_of_t];
    return [0, [0, Part$0, create, apply_part], to_parts, finalize];
   }
   function V1$0(X){
    var
     bin_read_t = X[1][1][4],
     bin_read_t$0 = X[1][1][3],
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_size_t = X[1][1][1],
     bin_write_t = X[1][1][2],
     bin_writer_t = [0, bin_size_t, bin_write_t],
     _op_ = caml_call1(Bin_shape[5][1], cst_859ed728_490a_11e6_a4b5_57),
     bin_shape_t = caml_call2(Bin_prot_Shape[12], _op_, 0),
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
     create = X[1][2],
     apply_part = X[1][3],
     to_parts = X[2],
     finalize = X[3];
    return [0,
            [0,
             [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t],
             create,
             apply_part],
            to_parts,
            finalize];
   }
   function V1$1(A){
    function create(param){return 0;}
    function apply_part(t, a){
     if(caml_call1(Core_Option[57], t)) return [0, a];
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    }
    var
     Intermediate = [0, A, create, apply_part],
     to_parts = Streamable_Import[4][104];
    function finalize(i){return caml_call4(Core_Option[36], 0, 0, 0, i);}
    return [0, Intermediate, to_parts, finalize];
   }
   var Of_atomic_rpc = [0, V1$1];
   function V1$2(_on_){
    var _oo_ = [0, _on_[9], _on_[10]];
    return V1
            (caml_call1
              (Of_atomic_rpc[1],
               [0,
                _on_[1],
                _on_[2],
                _on_[3],
                _on_[4],
                _on_[5],
                _on_[6],
                _on_[7],
                _on_[8]]),
             _oo_);
   }
   var Of_atomic = [0, V1$2];
   function V1$3(Streamable, X){
    var Intermediate = Streamable[1];
    function to_parts(t){
     var _om_ = caml_call1(X[1], t);
     return caml_call1(Streamable[2], _om_);
    }
    function finalize(i){
     var _ol_ = caml_call1(Streamable[3], i);
     return caml_call1(X[2], _ol_);
    }
    return [0, Intermediate, to_parts, finalize];
   }
   var Of_streamable_rpc = [0, V1$3];
   function V1$4(_og_, _of_){
    var
     _oh_ = _og_[1][1],
     _oj_ = _og_[1],
     _ok_ = _oj_[1],
     _oi_ = [0, _oh_[9], _oh_[10]];
    return V1
            (caml_call1
              (caml_call1
                (Of_streamable_rpc[1],
                 [0,
                  [0,
                   [0,
                    _ok_[1],
                    _ok_[2],
                    _ok_[3],
                    _ok_[4],
                    _ok_[5],
                    _ok_[6],
                    _ok_[7],
                    _ok_[8]],
                   _oj_[2],
                   _oj_[3]],
                  _og_[2],
                  _og_[3]]),
               _of_),
             _oi_);
   }
   var
    Of_streamable = [0, V1$4],
    _b_ = [0, "Intermediate.Part.bin_shape_t"],
    _c_ = [0, "max_part_bin_size"],
    _d_ = [0, "the_part_bin_size"],
    _e_ = [0, "part_index"],
    _f_ = [0, "here"],
    cst_Streamable_intermediate_pa =
      "Streamable intermediate part exceeded size threshold.  Depending on the max size, this might indicate that serialization or transmission will fail.",
    cst_t = cst_t$31,
    cst_src_main_ml_258_10 = "src/main.ml:258:10",
    cst_t$0 = cst_t$31;
   function Checked(Limit, X){
    var
     Intermediate = X[1],
     finalize = X[3],
     here = Limit[2],
     max_part_bin_size = Limit[1];
    function to_parts(t){
     var _n__ = caml_call1(X[2], t);
     return caml_call2
             (Streamable_Import[4][56],
              _n__,
              function(part_index, part){
               var the_part_bin_size = caml_call1(Intermediate[1][1], part);
               if(caml_call2(Core[90], the_part_bin_size, max_part_bin_size)){
                var
                 _n$_ =
                   [0,
                    [1,
                     [0,
                      _b_,
                      [0, caml_call1(Bin_shape[1], Intermediate[1][5]), 0]]],
                    0],
                 _oa_ =
                   [0,
                    [1,
                     [0, _c_, [0, caml_call1(Core[363], max_part_bin_size), 0]]],
                    _n$_],
                 _ob_ =
                   [0,
                    [1,
                     [0, _d_, [0, caml_call1(Core[363], the_part_bin_size), 0]]],
                    _oa_],
                 _oc_ =
                   [0,
                    [1, [0, _e_, [0, caml_call1(Core[363], part_index), 0]]],
                    _ob_],
                 _od_ =
                   [0,
                    [1,
                     [0,
                      _f_,
                      [0, caml_call1(Core_Source_code_position[1], here), 0]]],
                    _oc_],
                 _oe_ =
                   [1,
                    [0,
                     caml_call1
                      (Sexplib0_Sexp_conv[7], cst_Streamable_intermediate_pa),
                     _od_]];
                caml_call1(Core[255], _oe_);
               }
               return part;
              });
    }
    return [0, Intermediate, to_parts, finalize];
   }
   function V1$5(X){
    var
     _n4_ = caml_call1(Core_Fqueue[1], X[1][1][5]),
     _n5_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _n4_], 0],
     _n6_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_258_10),
     group = caml_call2(Bin_prot_Shape[2], _n6_, _n5_),
     _n7_ = caml_call1(Bin_shape[2][1], cst_t$0),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _n7_), 0);
    function bin_size_t(v){return caml_call2(Core_Fqueue[2], X[1][1][1], v);}
    function bin_write_t(buf, pos, v){
     return caml_call4(Core_Fqueue[3], X[1][1][2], buf, pos, v);
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call3
             (caml_call1(Core_Fqueue[5], X[1][1][3]), buf, pos_ref, vint);
    }
    function bin_read_t$0(buf, pos_ref){
     return caml_call2(caml_call1(Core_Fqueue[4], X[1][1][3]), buf, pos_ref);
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
     create = X[1][2];
    function apply_part(inter, part){
     return caml_call3(Core_Fqueue[16], part, inter, X[1][3]);
    }
    var pack_threshold = Ppx_inline_test_lib[1] ? 25 : 131072;
    function to_parts(t){
     var
      init = [0, Core_Fqueue[40], 1 + Bin_prot_Utils[1] | 0],
      _n8_ = caml_call1(X[2], t);
     return caml_call5
             (Streamable_Import[4][51],
              _n8_,
              init,
              function(param, xpart){
               var
                buffered_len = param[2],
                buffered_parts = param[1],
                new_parts = caml_call2(Core_Fqueue[41], buffered_parts, xpart),
                new_len = buffered_len + caml_call1(X[1][1][1], xpart) | 0;
               return caml_call2(Core[87], new_len, pack_threshold)
                       ? [1, new_parts, init]
                       : [0, [0, new_parts, new_len]];
              },
              function(_n9_){return _n9_[1];},
              function(buffered_parts){
               return caml_call1(Core_Fqueue[55], buffered_parts)
                       ? 0
                       : [1, buffered_parts, Core_Fqueue[40]];
              });
    }
    var finalize = X[3];
    return [0,
            [0,
             [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t],
             create,
             apply_part],
            to_parts,
            finalize];
   }
   var Packed_rpc = [0, V1$5];
   function V1$6(X){
    function t_of_sexp(x_002){
     return caml_call2(Core_Fqueue[12], X[1][1][9], x_002);
    }
    function sexp_of_t(x_003){
     return caml_call2(Core_Fqueue[13], X[1][1][10], x_003);
    }
    var _n2_ = X[1], _n3_ = _n2_[1];
    return V1
            (caml_call1
              (Packed_rpc[1],
               [0,
                [0,
                 [0,
                  _n3_[1],
                  _n3_[2],
                  _n3_[3],
                  _n3_[4],
                  _n3_[5],
                  _n3_[6],
                  _n3_[7],
                  _n3_[8]],
                 _n2_[2],
                 _n2_[3]],
                X[2],
                X[3]]),
             [0, t_of_sexp, sexp_of_t]);
   }
   var
    Packed = [0, V1$6],
    cst_Add_part = cst_Add_part$0,
    cst_Add_key = cst_Add_key$0,
    cst_t$1 = cst_t$31,
    cst_src_main_ml_317_6 = "src/main.ml:317:6",
    cst_t$2 = cst_t$31,
    cst_src_main_ml_Stable_Of_key_ = cst_src_main_ml_Stable_Of_key_$0,
    _g_ = [1, cst_src_main_ml_Stable_Of_key_$0],
    _h_ = [0, cst_src_main_ml, 359, 12],
    _i_ = [0, cst_src_main_ml, 363, 24],
    _j_ = [0, cst_Add_key$0],
    _k_ = [0, cst_Add_part$0];
   function V1$7(Key, Data, Store){
    function to_store(param){
     if(! param) return caml_call1(Store[1], 0);
     var
      int$0 = param[3],
      key = param[2],
      store = param[1],
      _n1_ = caml_call1(Data[3], int$0);
     return caml_call3(Store[3], store, key, _n1_);
    }
    var
     _nQ_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          [0, cst_Add_key, [0, Key[5], 0]],
          [0, [0, cst_Add_part, [0, Data[1][1][5], 0]], 0]]),
     _nR_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _nQ_], 0],
     _nS_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_317_6),
     group = caml_call2(Bin_prot_Shape[2], _nS_, _nR_),
     _nT_ = caml_call1(Bin_shape[2][1], cst_t$2),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _nT_), 0);
    function bin_size_t(param){
     if(0 === param[0]){
      var v1 = param[1], _nZ_ = caml_call1(Key[1], v1);
      return caml_call2(Bin_prot_Common[23], 1, _nZ_);
     }
     var v1$0 = param[1], _n0_ = caml_call1(Data[1][1][1], v1$0);
     return caml_call2(Bin_prot_Common[23], 1, _n0_);
    }
    function bin_write_t(buf, pos, param){
     if(0 === param[0]){
      var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
      return caml_call3(Key[2], buf, pos$0, v1);
     }
     var v1$0 = param[1], pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
     return caml_call3(Data[1][1][2], buf, pos$1, v1$0);
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19], cst_src_main_ml_Stable_Of_key_, pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(0 === match){
      var arg_1 = caml_call2(Key[3], buf, pos_ref);
      return [0, arg_1];
     }
     if(1 !== match) return caml_call2(Bin_prot_Common[18], _g_, pos_ref[1]);
     var arg_1$0 = caml_call2(Data[1][1][3], buf, pos_ref);
     return [1, arg_1$0];
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    function add_key(v0){return [0, v0];}
    function add_part(v0){return [1, v0];}
    var
     Part =
       [0,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_writer_t,
        bin_read_t,
        bin_read_t$0,
        bin_reader_t,
        bin_t,
        add_key,
        add_part];
    function create(param){return 0;}
    function apply_part(t, part){
     if(0 === part[0]){
      var key = part[1], store = to_store(t);
      if(caml_call2(Store[2], store, key))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
      return [0, store, key, caml_call1(Data[1][2], 0)];
     }
     var part$0 = part[1];
     if(! t) throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
     var int$0 = t[3], key$0 = t[2], store$0 = t[1];
     return [0, store$0, key$0, caml_call2(Data[1][3], int$0, part$0)];
    }
    var
     Intermediate = [0, to_store, Part, create, apply_part],
     finalize = Intermediate[1];
    function to_parts(t){
     var _nU_ = caml_call1(Store[4], t);
     return caml_call2
             (Streamable_Import[4][71],
              _nU_,
              function(param){
               var
                data = param[2],
                key = param[1],
                _nV_ = Intermediate[2][10],
                _nW_ = caml_call1(Data[2], data),
                _nX_ = caml_call2(Streamable_Import[4][41], _nW_, _nV_),
                _nY_ = Intermediate[2][9].call(null, key);
               return caml_call2(Streamable_Import[4][118], _nY_, _nX_);
              });
    }
    return [0, Intermediate, finalize, to_parts];
   }
   function V1$8(Key, Data, Store){
    var
     _nJ_ = Data[1],
     _nK_ = _nJ_[1],
     Plain =
       V1$7
        ([0,
          Key[1],
          Key[2],
          Key[3],
          Key[4],
          Key[5],
          Key[6],
          Key[7],
          Key[8],
          Key[9],
          Key[11],
          Key[12]],
         [0,
          [0,
           [0,
            _nK_[1],
            _nK_[2],
            _nK_[3],
            _nK_[4],
            _nK_[5],
            _nK_[6],
            _nK_[7],
            _nK_[8]],
           _nJ_[2],
           _nJ_[3]],
          Data[2],
          Data[3]],
         Store);
    function t_of_sexp(sexp_008){
     a:
     {
      if(0 === sexp_008[0]){
       var _nN_ = sexp_008[1];
       b:
       if(_nN_ !== cst_Add_key$0){
        if(_nN_ !== cst_Add_part$0){
         if(_nN_ === cst_add_key) break b;
         if(_nN_ !== cst_add_part) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_006, sexp_008);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_006, sexp_008);
      }
      var _nO_ = sexp_008[1];
      if(! _nO_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_006, sexp_008);
      var _nP_ = _nO_[1];
      if(0 !== _nP_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[6], error_source_006, sexp_008);
      var tag_009 = _nP_[1];
      b:
      if(tag_009 !== cst_Add_key$0){
       if(tag_009 !== cst_Add_part$0){
        if(tag_009 === cst_add_key) break b;
        if(tag_009 !== cst_add_part) break a;
       }
       var sexp_args_015 = _nO_[2];
       if(sexp_args_015 && ! sexp_args_015[2]){
        var
         arg0_016 = sexp_args_015[1],
         res0_017 = caml_call1(Data[1][1][9], arg0_016);
        return [1, res0_017];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_006,
                tag_009,
                sexp_008);
      }
      var sexp_args_010 = _nO_[2];
      if(sexp_args_010 && ! sexp_args_010[2]){
       var
        arg0_011 = sexp_args_010[1],
        res0_012 = caml_call1(Key[10], arg0_011);
       return [0, res0_012];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_006,
               tag_009,
               sexp_008);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[8], error_source_006, sexp_008);
    }
    function sexp_of_t(param){
     if(0 === param[0]){
      var arg0_018 = param[1], res0_019 = caml_call1(Key[11], arg0_018);
      return [1, [0, _j_, [0, res0_019, 0]]];
     }
     var arg0_020 = param[1], res0_021 = caml_call1(Data[1][1][10], arg0_020);
     return [1, [0, _k_, [0, res0_021, 0]]];
    }
    var
     _nL_ = Plain[1],
     _nM_ = _nL_[2],
     include =
       V1
        ([0,
          [0,
           [0,
            _nM_[2],
            _nM_[3],
            _nM_[6],
            _nM_[5],
            _nM_[1],
            _nM_[4],
            _nM_[7],
            _nM_[8]],
           _nL_[3],
           _nL_[4]],
          Plain[3],
          Plain[2]],
         [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, , Intermediate, to_parts, finalize];
   }
   function Map_store(Key, Data){
    function create(param){return caml_call1(Core_Map[4], [0, Key[11]]);}
    var mem = Core_Map[46], set = Core_Map[36];
    function to_sequence(t){return caml_call4(Core_Map[108], 0, 0, 0, t);}
    return [0, create, mem, set, to_sequence];
   }
   function V1$9(Key, Data){
    var
     include = V1$7(Key, Data, Map_store(Key, Data)),
     Intermediate = include[1],
     finalize = include[2],
     to_parts = include[3],
     _nI_ = Intermediate[2];
    return [0,
            [0,
             [0,
              _nI_[2],
              _nI_[3],
              _nI_[6],
              _nI_[5],
              _nI_[1],
              _nI_[4],
              _nI_[7],
              _nI_[8]],
             Intermediate[3],
             Intermediate[4]],
            to_parts,
            finalize];
   }
   function V2(_nG_, _nF_){
    var _nH_ = V1$9(_nG_, _nF_);
    return caml_call1(Packed_rpc[1], _nH_);
   }
   var Of_map_rpc = [0, V1$9, V2];
   function V1$10(Key, Data){
    var
     _nD_ = Data[1],
     _nE_ = _nD_[1],
     include =
       V1$8
        (Key,
         Data,
         Map_store
          ([0,
            Key[1],
            Key[2],
            Key[3],
            Key[4],
            Key[5],
            Key[6],
            Key[7],
            Key[8],
            Key[9],
            Key[11],
            Key[12]],
           [0,
            [0,
             [0,
              _nE_[1],
              _nE_[2],
              _nE_[3],
              _nE_[4],
              _nE_[5],
              _nE_[6],
              _nE_[7],
              _nE_[8]],
             _nD_[2],
             _nD_[3]],
            Data[2],
            Data[3]])),
     Intermediate = include[2],
     to_parts = include[3],
     finalize = include[4];
    return [0, Intermediate, to_parts, finalize];
   }
   function V2$0(_nB_, _nA_){
    var _nC_ = V1$10(_nB_, _nA_);
    return caml_call1(Packed[1], _nC_);
   }
   var
    Of_map = [0, V1$10, V2$0],
    cst_B = cst_B$7,
    cst_A = cst_A$7,
    cst_t$3 = cst_t$31,
    cst_src_main_ml_563_10 = "src/main.ml:563:10",
    cst_t$4 = cst_t$31,
    cst_src_main_ml_Stable_Of_tupl = cst_src_main_ml_Stable_Of_tupl$14,
    _l_ = [1, cst_src_main_ml_Stable_Of_tupl$14];
   function V1$11(Key, Data){
    var
     Key_total_map = caml_call1(Total_map[29], Key),
     to_streamable = Total_map[1];
    function of_streamable(map){
     return caml_call1
             (Key_total_map[17],
              function(key){return caml_call2(Core_Map[43], map, key);});
    }
    var
     _nz_ =
       caml_call1
        (caml_call1
          (Of_map[2],
           [0,
            Key[3],
            Key[4],
            Key[5],
            Key[6],
            Key[7],
            Key[8],
            Key[9],
            Key[10],
            Key[11],
            Key[1],
            Key[2],
            Key[13]]),
         Data),
     include =
       caml_call1
        (caml_call1(Of_streamable[1], _nz_),
         [0, to_streamable, of_streamable]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, , Intermediate, to_parts, finalize];
   }
   function V1$12(Key, Data){
    var
     Key_total_map = caml_call1(Total_map[29], Key),
     to_streamable = Total_map[1];
    function of_streamable(map){
     return caml_call1
             (Key_total_map[17],
              function(key){return caml_call2(Core_Map[43], map, key);});
    }
    var
     _ny_ =
       caml_call1
        (caml_call1
          (Of_map_rpc[2],
           [0,
            Key[3],
            Key[4],
            Key[5],
            Key[6],
            Key[7],
            Key[8],
            Key[9],
            Key[10],
            Key[11],
            Key[2],
            Key[13]]),
         Data),
     include =
       caml_call1
        (caml_call1(Of_streamable_rpc[1], _ny_),
         [0, to_streamable, of_streamable]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, , Intermediate, to_parts, finalize];
   }
   function Hashtbl_store(Key, Data){
    function create(param){
     return caml_call3(Core_Hashtbl[4], 0, 0, [0, Key[10], Key[11], Key[12]]);
    }
    var mem = Core_Hashtbl[30];
    function set(t, key, data){
     caml_call3(Core_Hashtbl[36], t, key, data);
     return t;
    }
    function to_sequence(t){
     var _nx_ = caml_call1(Core_Hashtbl[77], t);
     return caml_call1(Streamable_Import[4][109], _nx_);
    }
    return [0, create, mem, set, to_sequence];
   }
   function V1$13(_nv_, Data){
    var
     Key =
       [0,
        _nv_[2],
        _nv_[3],
        _nv_[4],
        _nv_[5],
        _nv_[6],
        _nv_[7],
        _nv_[8],
        _nv_[9],
        _nv_[12],
        _nv_[10],
        _nv_[11],
        _nv_[1]],
     _nw_ = Hashtbl_store(Key, Data),
     include =
       V1$7
        ([0,
          Key[1],
          Key[2],
          Key[3],
          Key[4],
          Key[5],
          Key[6],
          Key[7],
          Key[8],
          Key[10],
          Key[11],
          Key[9]],
         Data,
         _nw_),
     Intermediate = include[1],
     finalize = include[2],
     to_parts = include[3],
     _nu_ = Intermediate[2];
    return caml_call1
            (Packed_rpc[1],
             [0,
              [0,
               [0,
                _nu_[2],
                _nu_[3],
                _nu_[6],
                _nu_[5],
                _nu_[1],
                _nu_[4],
                _nu_[7],
                _nu_[8]],
               Intermediate[3],
               Intermediate[4]],
              to_parts,
              finalize]);
   }
   function V1$14(_nh_, Data){
    var
     _ni_ = _nh_[12],
     _nj_ = _nh_[10],
     _nl_ = _nh_[13],
     _nm_ = _nh_[9],
     _nn_ = _nh_[8],
     _no_ = _nh_[7],
     _np_ = _nh_[6],
     _nq_ = _nh_[5],
     _nr_ = _nh_[4],
     _ns_ = _nh_[3],
     _nt_ = _nh_[2],
     _nf_ = Data[1],
     _ng_ = _nf_[1],
     _nk_ = _nh_[11],
     include =
       V1$8
        ([0,
          _nt_,
          _ns_,
          _nr_,
          _nq_,
          _np_,
          _no_,
          _nn_,
          _nm_,
          _nj_,
          _nk_,
          _ni_,
          _nl_],
         Data,
         Hashtbl_store
          ([0,
            _nt_,
            _ns_,
            _nr_,
            _nq_,
            _np_,
            _no_,
            _nn_,
            _nm_,
            _nl_,
            _nj_,
            _ni_,
            _nh_[1]],
           [0,
            [0,
             [0,
              _ng_[1],
              _ng_[2],
              _ng_[3],
              _ng_[4],
              _ng_[5],
              _ng_[6],
              _ng_[7],
              _ng_[8]],
             _nf_[2],
             _nf_[3]],
            Data[2],
            Data[3]])),
     Intermediate = include[2],
     to_parts = include[3],
     finalize = include[4];
    return caml_call1(Packed[1], [0, Intermediate, to_parts, finalize]);
   }
   function V1$15(A, B){
    var
     _m3_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          [0, cst_A, [0, A[1][1][5], 0]],
          [0, [0, cst_B, [0, B[1][1][5], 0]], 0]]),
     _m4_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$3), 0, _m3_], 0],
     _m5_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_563_10),
     group = caml_call2(Bin_prot_Shape[2], _m5_, _m4_),
     _m6_ = caml_call1(Bin_shape[2][1], cst_t$4),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _m6_), 0);
    function bin_size_t(param){
     if(0 === param[0]){
      var v1 = param[1], _nd_ = caml_call1(A[1][1][1], v1);
      return caml_call2(Bin_prot_Common[23], 1, _nd_);
     }
     var v1$0 = param[1], _ne_ = caml_call1(B[1][1][1], v1$0);
     return caml_call2(Bin_prot_Common[23], 1, _ne_);
    }
    function bin_write_t(buf, pos, param){
     if(0 === param[0]){
      var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
      return caml_call3(A[1][1][2], buf, pos$0, v1);
     }
     var v1$0 = param[1], pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
     return caml_call3(B[1][1][2], buf, pos$1, v1$0);
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19], cst_src_main_ml_Stable_Of_tupl, pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(0 === match){
      var arg_1 = caml_call2(A[1][1][3], buf, pos_ref);
      return [0, arg_1];
     }
     if(1 !== match) return caml_call2(Bin_prot_Common[18], _l_, pos_ref[1]);
     var arg_1$0 = caml_call2(B[1][1][3], buf, pos_ref);
     return [1, arg_1$0];
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    function a(v0){return [0, v0];}
    function b(v0){return [1, v0];}
    function create(param){
     var _nc_ = caml_call1(B[1][2], 0);
     return [0, caml_call1(A[1][2], 0), _nc_];
    }
    function apply_part(_nb_, param){
     var b = _nb_[2], a = _nb_[1];
     if(0 === param[0]){
      var x = param[1];
      return [0, caml_call2(A[1][3], a, x), b];
     }
     var x$0 = param[1];
     return [0, a, caml_call2(B[1][3], b, x$0)];
    }
    function to_parts(param){
     var
      b$0 = param[2],
      a$0 = param[1],
      _m8_ = caml_call1(B[2], b$0),
      _m9_ = [0, caml_call2(Streamable_Import[4][41], _m8_, b), 0],
      _m__ = caml_call1(A[2], a$0),
      _m$_ = [0, caml_call2(Streamable_Import[4][41], _m__, a), _m9_],
      _na_ = caml_call1(Streamable_Import[4][109], _m$_);
     return caml_call1(Streamable_Import[4][70], _na_);
    }
    function finalize(param){
     var b = param[2], a = param[1], _m7_ = caml_call1(B[3], b);
     return [0, caml_call1(A[3], a), _m7_];
    }
    return [0,
            [0,
             [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t],
             create,
             apply_part],
            to_parts,
            finalize];
   }
   var Of_tuple2_rpc = [0, V1$15], _m_ = [0, cst_A$7], _n_ = [0, cst_B$7];
   function V1$16(A, B){
    var
     _mV_ = B[1],
     _mW_ = _mV_[1],
     _mY_ = A[1],
     _mZ_ = _mY_[1],
     _mX_ =
       [0,
        [0,
         [0,
          _mW_[1],
          _mW_[2],
          _mW_[3],
          _mW_[4],
          _mW_[5],
          _mW_[6],
          _mW_[7],
          _mW_[8]],
         _mV_[2],
         _mV_[3]],
        B[2],
        B[3]],
     Plain =
       caml_call1
        (caml_call1
          (Of_tuple2_rpc[1],
           [0,
            [0,
             [0,
              _mZ_[1],
              _mZ_[2],
              _mZ_[3],
              _mZ_[4],
              _mZ_[5],
              _mZ_[6],
              _mZ_[7],
              _mZ_[8]],
             _mY_[2],
             _mY_[3]],
            A[2],
            A[3]]),
         _mX_);
    function t_of_sexp(sexp_026){
     a:
     {
      if(0 === sexp_026[0]){
       var _m0_ = sexp_026[1];
       b:
       if(_m0_ !== cst_A$7){
        if(_m0_ !== cst_B$7){
         if(_m0_ === cst_a) break b;
         if(_m0_ !== cst_b) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_024, sexp_026);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_024, sexp_026);
      }
      var _m1_ = sexp_026[1];
      if(! _m1_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_024, sexp_026);
      var _m2_ = _m1_[1];
      if(0 !== _m2_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[6], error_source_024, sexp_026);
      var tag_027 = _m2_[1];
      b:
      if(tag_027 !== cst_A$7){
       if(tag_027 !== cst_B$7){
        if(tag_027 === cst_a) break b;
        if(tag_027 !== cst_b) break a;
       }
       var sexp_args_033 = _m1_[2];
       if(sexp_args_033 && ! sexp_args_033[2]){
        var
         arg0_034 = sexp_args_033[1],
         res0_035 = caml_call1(B[1][1][9], arg0_034);
        return [1, res0_035];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_024,
                tag_027,
                sexp_026);
      }
      var sexp_args_028 = _m1_[2];
      if(sexp_args_028 && ! sexp_args_028[2]){
       var
        arg0_029 = sexp_args_028[1],
        res0_030 = caml_call1(A[1][1][9], arg0_029);
       return [0, res0_030];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_024,
               tag_027,
               sexp_026);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[8], error_source_024, sexp_026);
    }
    function sexp_of_t(param){
     if(0 === param[0]){
      var arg0_036 = param[1], res0_037 = caml_call1(A[1][1][10], arg0_036);
      return [1, [0, _m_, [0, res0_037, 0]]];
     }
     var arg0_038 = param[1], res0_039 = caml_call1(B[1][1][10], arg0_038);
     return [1, [0, _n_, [0, res0_039, 0]]];
    }
    var
     include = V1(Plain, [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, Intermediate, to_parts, finalize];
   }
   var
    Of_tuple2 = [0, V1$16],
    cst_C = cst_C$6,
    cst_B$0 = cst_B$7,
    cst_A$0 = cst_A$7,
    cst_t$5 = cst_t$31,
    cst_src_main_ml_633_10 = "src/main.ml:633:10",
    cst_t$6 = cst_t$31,
    cst_src_main_ml_Stable_Of_tupl$0 = cst_src_main_ml_Stable_Of_tupl$13,
    _o_ = [1, cst_src_main_ml_Stable_Of_tupl$13];
   function V1$17(A, B, C){
    var
     _mC_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          [0, cst_A$0, [0, A[1][1][5], 0]],
          [0,
           [0, cst_B$0, [0, B[1][1][5], 0]],
           [0, [0, cst_C, [0, C[1][1][5], 0]], 0]]]),
     _mD_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$5), 0, _mC_], 0],
     _mE_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_633_10),
     group = caml_call2(Bin_prot_Shape[2], _mE_, _mD_),
     _mF_ = caml_call1(Bin_shape[2][1], cst_t$6),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _mF_), 0);
    function bin_size_t(param){
     switch(param[0]){
       case 0:
        var v1 = param[1], _mS_ = caml_call1(A[1][1][1], v1);
        return caml_call2(Bin_prot_Common[23], 1, _mS_);
       case 1:
        var v1$0 = param[1], _mT_ = caml_call1(B[1][1][1], v1$0);
        return caml_call2(Bin_prot_Common[23], 1, _mT_);
       default:
        var v1$1 = param[1], _mU_ = caml_call1(C[1][1][1], v1$1);
        return caml_call2(Bin_prot_Common[23], 1, _mU_);
     }
    }
    function bin_write_t(buf, pos, param){
     switch(param[0]){
       case 0:
        var
         v1 = param[1],
         pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
        return caml_call3(A[1][1][2], buf, pos$0, v1);
       case 1:
        var
         v1$0 = param[1],
         pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
        return caml_call3(B[1][1][2], buf, pos$1, v1$0);
       default:
        var
         v1$1 = param[1],
         pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
        return caml_call3(C[1][1][2], buf, pos$2, v1$1);
     }
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19],
              cst_src_main_ml_Stable_Of_tupl$0,
              pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(2 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _o_, pos_ref[1]);
     switch(match){
       case 0:
        var arg_1 = caml_call2(A[1][1][3], buf, pos_ref); return [0, arg_1];
       case 1:
        var arg_1$0 = caml_call2(B[1][1][3], buf, pos_ref);
        return [1, arg_1$0];
       default:
        var arg_1$1 = caml_call2(C[1][1][3], buf, pos_ref);
        return [2, arg_1$1];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    function a(v0){return [0, v0];}
    function b(v0){return [1, v0];}
    function c(v0){return [2, v0];}
    function create(param){
     var _mQ_ = caml_call1(C[1][2], 0), _mR_ = caml_call1(B[1][2], 0);
     return [0, caml_call1(A[1][2], 0), _mR_, _mQ_];
    }
    function apply_part(_mP_, param){
     var c = _mP_[3], b = _mP_[2], a = _mP_[1];
     switch(param[0]){
       case 0:
        var x = param[1]; return [0, caml_call2(A[1][3], a, x), b, c];
       case 1:
        var x$0 = param[1]; return [0, a, caml_call2(B[1][3], b, x$0), c];
       default:
        var x$1 = param[1]; return [0, a, b, caml_call2(C[1][3], c, x$1)];
     }
    }
    function to_parts(param){
     var
      c$0 = param[3],
      b$0 = param[2],
      a$0 = param[1],
      _mI_ = caml_call1(C[2], c$0),
      _mJ_ = [0, caml_call2(Streamable_Import[4][41], _mI_, c), 0],
      _mK_ = caml_call1(B[2], b$0),
      _mL_ = [0, caml_call2(Streamable_Import[4][41], _mK_, b), _mJ_],
      _mM_ = caml_call1(A[2], a$0),
      _mN_ = [0, caml_call2(Streamable_Import[4][41], _mM_, a), _mL_],
      _mO_ = caml_call1(Streamable_Import[4][109], _mN_);
     return caml_call1(Streamable_Import[4][70], _mO_);
    }
    function finalize(param){
     var
      c = param[3],
      b = param[2],
      a = param[1],
      _mG_ = caml_call1(C[3], c),
      _mH_ = caml_call1(B[3], b);
     return [0, caml_call1(A[3], a), _mH_, _mG_];
    }
    return [0,
            [0,
             [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t],
             create,
             apply_part],
            to_parts,
            finalize];
   }
   var
    Of_tuple3_rpc = [0, V1$17],
    _p_ = [0, cst_A$7],
    _q_ = [0, cst_B$7],
    _r_ = [0, cst_C$6];
   function V1$18(A, B, C){
    var
     _mr_ = C[1],
     _ms_ = _mr_[1],
     _mu_ = B[1],
     _mv_ = _mu_[1],
     _mx_ = A[1],
     _my_ = _mx_[1],
     _mt_ =
       [0,
        [0,
         [0,
          _ms_[1],
          _ms_[2],
          _ms_[3],
          _ms_[4],
          _ms_[5],
          _ms_[6],
          _ms_[7],
          _ms_[8]],
         _mr_[2],
         _mr_[3]],
        C[2],
        C[3]],
     _mw_ =
       [0,
        [0,
         [0,
          _mv_[1],
          _mv_[2],
          _mv_[3],
          _mv_[4],
          _mv_[5],
          _mv_[6],
          _mv_[7],
          _mv_[8]],
         _mu_[2],
         _mu_[3]],
        B[2],
        B[3]],
     Plain =
       caml_call1
        (caml_call1
          (caml_call1
            (Of_tuple3_rpc[1],
             [0,
              [0,
               [0,
                _my_[1],
                _my_[2],
                _my_[3],
                _my_[4],
                _my_[5],
                _my_[6],
                _my_[7],
                _my_[8]],
               _mx_[2],
               _mx_[3]],
              A[2],
              A[3]]),
           _mw_),
         _mt_);
    function t_of_sexp(sexp_044){
     a:
     {
      if(0 === sexp_044[0]){
       var _mz_ = sexp_044[1];
       b:
       if(_mz_ !== cst_A$7){
        c:
        if(_mz_ !== cst_B$7){
         if(_mz_ !== cst_C$6){
          if(_mz_ === cst_a) break b;
          if(_mz_ === cst_b) break c;
          if(_mz_ !== cst_c) break a;
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5], error_source_042, sexp_044);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_042, sexp_044);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_042, sexp_044);
      }
      var _mA_ = sexp_044[1];
      if(! _mA_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_042, sexp_044);
      var _mB_ = _mA_[1];
      if(0 !== _mB_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[6], error_source_042, sexp_044);
      var tag_045 = _mB_[1];
      b:
      if(tag_045 !== cst_A$7){
       c:
       if(tag_045 !== cst_B$7){
        if(tag_045 !== cst_C$6){
         if(tag_045 === cst_a) break b;
         if(tag_045 === cst_b) break c;
         if(tag_045 !== cst_c) break a;
        }
        var sexp_args_056 = _mA_[2];
        if(sexp_args_056 && ! sexp_args_056[2]){
         var
          arg0_057 = sexp_args_056[1],
          res0_058 = caml_call1(C[1][1][9], arg0_057);
         return [2, res0_058];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[4],
                 error_source_042,
                 tag_045,
                 sexp_044);
       }
       var sexp_args_051 = _mA_[2];
       if(sexp_args_051 && ! sexp_args_051[2]){
        var
         arg0_052 = sexp_args_051[1],
         res0_053 = caml_call1(B[1][1][9], arg0_052);
        return [1, res0_053];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_042,
                tag_045,
                sexp_044);
      }
      var sexp_args_046 = _mA_[2];
      if(sexp_args_046 && ! sexp_args_046[2]){
       var
        arg0_047 = sexp_args_046[1],
        res0_048 = caml_call1(A[1][1][9], arg0_047);
       return [0, res0_048];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_042,
               tag_045,
               sexp_044);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[8], error_source_042, sexp_044);
    }
    function sexp_of_t(param){
     switch(param[0]){
       case 0:
        var arg0_059 = param[1], res0_060 = caml_call1(A[1][1][10], arg0_059);
        return [1, [0, _p_, [0, res0_060, 0]]];
       case 1:
        var arg0_061 = param[1], res0_062 = caml_call1(B[1][1][10], arg0_061);
        return [1, [0, _q_, [0, res0_062, 0]]];
       default:
        var arg0_063 = param[1], res0_064 = caml_call1(C[1][1][10], arg0_063);
        return [1, [0, _r_, [0, res0_064, 0]]];
     }
    }
    var
     include = V1(Plain, [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, Intermediate, to_parts, finalize];
   }
   var
    Of_tuple3 = [0, V1$18],
    cst_D = cst_D$5,
    cst_C$0 = cst_C$6,
    cst_B$1 = cst_B$7,
    cst_A$1 = cst_A$7,
    cst_t$7 = cst_t$31,
    cst_src_main_ml_710_10 = "src/main.ml:710:10",
    cst_t$8 = cst_t$31,
    cst_src_main_ml_Stable_Of_tupl$1 = cst_src_main_ml_Stable_Of_tupl$12,
    _s_ = [1, cst_src_main_ml_Stable_Of_tupl$12];
   function V1$19(A, B, C, D){
    var
     _l5_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          [0, cst_A$1, [0, A[1][1][5], 0]],
          [0,
           [0, cst_B$1, [0, B[1][1][5], 0]],
           [0,
            [0, cst_C$0, [0, C[1][1][5], 0]],
            [0, [0, cst_D, [0, D[1][1][5], 0]], 0]]]]),
     _l6_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$7), 0, _l5_], 0],
     _l7_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_710_10),
     group = caml_call2(Bin_prot_Shape[2], _l7_, _l6_),
     _l8_ = caml_call1(Bin_shape[2][1], cst_t$8),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _l8_), 0);
    function bin_size_t(param){
     switch(param[0]){
       case 0:
        var v1 = param[1], _mn_ = caml_call1(A[1][1][1], v1);
        return caml_call2(Bin_prot_Common[23], 1, _mn_);
       case 1:
        var v1$0 = param[1], _mo_ = caml_call1(B[1][1][1], v1$0);
        return caml_call2(Bin_prot_Common[23], 1, _mo_);
       case 2:
        var v1$1 = param[1], _mp_ = caml_call1(C[1][1][1], v1$1);
        return caml_call2(Bin_prot_Common[23], 1, _mp_);
       default:
        var v1$2 = param[1], _mq_ = caml_call1(D[1][1][1], v1$2);
        return caml_call2(Bin_prot_Common[23], 1, _mq_);
     }
    }
    function bin_write_t(buf, pos, param){
     switch(param[0]){
       case 0:
        var
         v1 = param[1],
         pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
        return caml_call3(A[1][1][2], buf, pos$0, v1);
       case 1:
        var
         v1$0 = param[1],
         pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
        return caml_call3(B[1][1][2], buf, pos$1, v1$0);
       case 2:
        var
         v1$1 = param[1],
         pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
        return caml_call3(C[1][1][2], buf, pos$2, v1$1);
       default:
        var
         v1$2 = param[1],
         pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
        return caml_call3(D[1][1][2], buf, pos$3, v1$2);
     }
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19],
              cst_src_main_ml_Stable_Of_tupl$1,
              pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(3 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _s_, pos_ref[1]);
     switch(match){
       case 0:
        var arg_1 = caml_call2(A[1][1][3], buf, pos_ref); return [0, arg_1];
       case 1:
        var arg_1$0 = caml_call2(B[1][1][3], buf, pos_ref);
        return [1, arg_1$0];
       case 2:
        var arg_1$1 = caml_call2(C[1][1][3], buf, pos_ref);
        return [2, arg_1$1];
       default:
        var arg_1$2 = caml_call2(D[1][1][3], buf, pos_ref);
        return [3, arg_1$2];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    function a(v0){return [0, v0];}
    function b(v0){return [1, v0];}
    function c(v0){return [2, v0];}
    function d(v0){return [3, v0];}
    function create(param){
     var
      _mk_ = caml_call1(D[1][2], 0),
      _ml_ = caml_call1(C[1][2], 0),
      _mm_ = caml_call1(B[1][2], 0);
     return [0, caml_call1(A[1][2], 0), _mm_, _ml_, _mk_];
    }
    function apply_part(_mj_, param){
     var d = _mj_[4], c = _mj_[3], b = _mj_[2], a = _mj_[1];
     switch(param[0]){
       case 0:
        var x = param[1]; return [0, caml_call2(A[1][3], a, x), b, c, d];
       case 1:
        var x$0 = param[1]; return [0, a, caml_call2(B[1][3], b, x$0), c, d];
       case 2:
        var x$1 = param[1]; return [0, a, b, caml_call2(C[1][3], c, x$1), d];
       default:
        var x$2 = param[1]; return [0, a, b, c, caml_call2(D[1][3], d, x$2)];
     }
    }
    function to_parts(param){
     var
      d$0 = param[4],
      c$0 = param[3],
      b$0 = param[2],
      a$0 = param[1],
      _ma_ = caml_call1(D[2], d$0),
      _mb_ = [0, caml_call2(Streamable_Import[4][41], _ma_, d), 0],
      _mc_ = caml_call1(C[2], c$0),
      _md_ = [0, caml_call2(Streamable_Import[4][41], _mc_, c), _mb_],
      _me_ = caml_call1(B[2], b$0),
      _mf_ = [0, caml_call2(Streamable_Import[4][41], _me_, b), _md_],
      _mg_ = caml_call1(A[2], a$0),
      _mh_ = [0, caml_call2(Streamable_Import[4][41], _mg_, a), _mf_],
      _mi_ = caml_call1(Streamable_Import[4][109], _mh_);
     return caml_call1(Streamable_Import[4][70], _mi_);
    }
    function finalize(param){
     var
      d = param[4],
      c = param[3],
      b = param[2],
      a = param[1],
      _l9_ = caml_call1(D[3], d),
      _l__ = caml_call1(C[3], c),
      _l$_ = caml_call1(B[3], b);
     return [0, caml_call1(A[3], a), _l$_, _l__, _l9_];
    }
    return [0,
            [0,
             [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t],
             create,
             apply_part],
            to_parts,
            finalize];
   }
   var
    Of_tuple4_rpc = [0, V1$19],
    _t_ = [0, cst_A$7],
    _u_ = [0, cst_B$7],
    _v_ = [0, cst_C$6],
    _w_ = [0, cst_D$5];
   function V1$20(A, B, C, D){
    var
     _lR_ = D[1],
     _lS_ = _lR_[1],
     _lU_ = C[1],
     _lV_ = _lU_[1],
     _lX_ = B[1],
     _lY_ = _lX_[1],
     _l0_ = A[1],
     _l1_ = _l0_[1],
     _lT_ =
       [0,
        [0,
         [0,
          _lS_[1],
          _lS_[2],
          _lS_[3],
          _lS_[4],
          _lS_[5],
          _lS_[6],
          _lS_[7],
          _lS_[8]],
         _lR_[2],
         _lR_[3]],
        D[2],
        D[3]],
     _lW_ =
       [0,
        [0,
         [0,
          _lV_[1],
          _lV_[2],
          _lV_[3],
          _lV_[4],
          _lV_[5],
          _lV_[6],
          _lV_[7],
          _lV_[8]],
         _lU_[2],
         _lU_[3]],
        C[2],
        C[3]],
     _lZ_ =
       [0,
        [0,
         [0,
          _lY_[1],
          _lY_[2],
          _lY_[3],
          _lY_[4],
          _lY_[5],
          _lY_[6],
          _lY_[7],
          _lY_[8]],
         _lX_[2],
         _lX_[3]],
        B[2],
        B[3]],
     Plain =
       caml_call1
        (caml_call1
          (caml_call1
            (caml_call1
              (Of_tuple4_rpc[1],
               [0,
                [0,
                 [0,
                  _l1_[1],
                  _l1_[2],
                  _l1_[3],
                  _l1_[4],
                  _l1_[5],
                  _l1_[6],
                  _l1_[7],
                  _l1_[8]],
                 _l0_[2],
                 _l0_[3]],
                A[2],
                A[3]]),
             _lZ_),
           _lW_),
         _lT_);
    function t_of_sexp(sexp_069){
     a:
     {
      if(0 === sexp_069[0]){
       var _l2_ = sexp_069[1];
       b:
       if(_l2_ !== cst_A$7){
        c:
        if(_l2_ !== cst_B$7){
         d:
         if(_l2_ !== cst_C$6){
          if(_l2_ !== cst_D$5){
           if(_l2_ === cst_a) break b;
           if(_l2_ === cst_b) break c;
           if(_l2_ === cst_c) break d;
           if(_l2_ !== cst_d) break a;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[5], error_source_067, sexp_069);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5], error_source_067, sexp_069);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_067, sexp_069);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_067, sexp_069);
      }
      var _l3_ = sexp_069[1];
      if(! _l3_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_067, sexp_069);
      var _l4_ = _l3_[1];
      if(0 !== _l4_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[6], error_source_067, sexp_069);
      var tag_070 = _l4_[1];
      b:
      if(tag_070 !== cst_A$7){
       c:
       if(tag_070 !== cst_B$7){
        d:
        if(tag_070 !== cst_C$6){
         if(tag_070 !== cst_D$5){
          if(tag_070 === cst_a) break b;
          if(tag_070 === cst_b) break c;
          if(tag_070 === cst_c) break d;
          if(tag_070 !== cst_d) break a;
         }
         var sexp_args_086 = _l3_[2];
         if(sexp_args_086 && ! sexp_args_086[2]){
          var
           arg0_087 = sexp_args_086[1],
           res0_088 = caml_call1(D[1][1][9], arg0_087);
          return [3, res0_088];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[4],
                  error_source_067,
                  tag_070,
                  sexp_069);
        }
        var sexp_args_081 = _l3_[2];
        if(sexp_args_081 && ! sexp_args_081[2]){
         var
          arg0_082 = sexp_args_081[1],
          res0_083 = caml_call1(C[1][1][9], arg0_082);
         return [2, res0_083];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[4],
                 error_source_067,
                 tag_070,
                 sexp_069);
       }
       var sexp_args_076 = _l3_[2];
       if(sexp_args_076 && ! sexp_args_076[2]){
        var
         arg0_077 = sexp_args_076[1],
         res0_078 = caml_call1(B[1][1][9], arg0_077);
        return [1, res0_078];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_067,
                tag_070,
                sexp_069);
      }
      var sexp_args_071 = _l3_[2];
      if(sexp_args_071 && ! sexp_args_071[2]){
       var
        arg0_072 = sexp_args_071[1],
        res0_073 = caml_call1(A[1][1][9], arg0_072);
       return [0, res0_073];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_067,
               tag_070,
               sexp_069);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[8], error_source_067, sexp_069);
    }
    function sexp_of_t(param){
     switch(param[0]){
       case 0:
        var arg0_089 = param[1], res0_090 = caml_call1(A[1][1][10], arg0_089);
        return [1, [0, _t_, [0, res0_090, 0]]];
       case 1:
        var arg0_091 = param[1], res0_092 = caml_call1(B[1][1][10], arg0_091);
        return [1, [0, _u_, [0, res0_092, 0]]];
       case 2:
        var arg0_093 = param[1], res0_094 = caml_call1(C[1][1][10], arg0_093);
        return [1, [0, _v_, [0, res0_094, 0]]];
       default:
        var arg0_095 = param[1], res0_096 = caml_call1(D[1][1][10], arg0_095);
        return [1, [0, _w_, [0, res0_096, 0]]];
     }
    }
    var
     include = V1(Plain, [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, Intermediate, to_parts, finalize];
   }
   var
    Of_tuple4 = [0, V1$20],
    cst_E = cst_E$4,
    cst_D$0 = cst_D$5,
    cst_C$1 = cst_C$6,
    cst_B$2 = cst_B$7,
    cst_A$2 = cst_A$7,
    cst_t$9 = cst_t$31,
    cst_src_main_ml_800_10 = "src/main.ml:800:10",
    cst_t$10 = cst_t$31,
    cst_src_main_ml_Stable_Of_tupl$2 = cst_src_main_ml_Stable_Of_tupl$11,
    _x_ = [1, cst_src_main_ml_Stable_Of_tupl$11];
   function V1$21(A, B, C, D, E){
    var
     _lo_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          [0, cst_A$2, [0, A[1][1][5], 0]],
          [0,
           [0, cst_B$2, [0, B[1][1][5], 0]],
           [0,
            [0, cst_C$1, [0, C[1][1][5], 0]],
            [0,
             [0, cst_D$0, [0, D[1][1][5], 0]],
             [0, [0, cst_E, [0, E[1][1][5], 0]], 0]]]]]),
     _lp_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$9), 0, _lo_], 0],
     _lq_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_800_10),
     group = caml_call2(Bin_prot_Shape[2], _lq_, _lp_),
     _lr_ = caml_call1(Bin_shape[2][1], cst_t$10),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _lr_), 0);
    function bin_size_t(param){
     switch(param[0]){
       case 0:
        var v1 = param[1], _lM_ = caml_call1(A[1][1][1], v1);
        return caml_call2(Bin_prot_Common[23], 1, _lM_);
       case 1:
        var v1$0 = param[1], _lN_ = caml_call1(B[1][1][1], v1$0);
        return caml_call2(Bin_prot_Common[23], 1, _lN_);
       case 2:
        var v1$1 = param[1], _lO_ = caml_call1(C[1][1][1], v1$1);
        return caml_call2(Bin_prot_Common[23], 1, _lO_);
       case 3:
        var v1$2 = param[1], _lP_ = caml_call1(D[1][1][1], v1$2);
        return caml_call2(Bin_prot_Common[23], 1, _lP_);
       default:
        var v1$3 = param[1], _lQ_ = caml_call1(E[1][1][1], v1$3);
        return caml_call2(Bin_prot_Common[23], 1, _lQ_);
     }
    }
    function bin_write_t(buf, pos, param){
     switch(param[0]){
       case 0:
        var
         v1 = param[1],
         pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
        return caml_call3(A[1][1][2], buf, pos$0, v1);
       case 1:
        var
         v1$0 = param[1],
         pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
        return caml_call3(B[1][1][2], buf, pos$1, v1$0);
       case 2:
        var
         v1$1 = param[1],
         pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
        return caml_call3(C[1][1][2], buf, pos$2, v1$1);
       case 3:
        var
         v1$2 = param[1],
         pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
        return caml_call3(D[1][1][2], buf, pos$3, v1$2);
       default:
        var
         v1$3 = param[1],
         pos$4 = caml_call3(Bin_prot_Write[30], buf, pos, 4);
        return caml_call3(E[1][1][2], buf, pos$4, v1$3);
     }
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19],
              cst_src_main_ml_Stable_Of_tupl$2,
              pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(4 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _x_, pos_ref[1]);
     switch(match){
       case 0:
        var arg_1 = caml_call2(A[1][1][3], buf, pos_ref); return [0, arg_1];
       case 1:
        var arg_1$0 = caml_call2(B[1][1][3], buf, pos_ref);
        return [1, arg_1$0];
       case 2:
        var arg_1$1 = caml_call2(C[1][1][3], buf, pos_ref);
        return [2, arg_1$1];
       case 3:
        var arg_1$2 = caml_call2(D[1][1][3], buf, pos_ref);
        return [3, arg_1$2];
       default:
        var arg_1$3 = caml_call2(E[1][1][3], buf, pos_ref);
        return [4, arg_1$3];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    function a(v0){return [0, v0];}
    function b(v0){return [1, v0];}
    function c(v0){return [2, v0];}
    function d(v0){return [3, v0];}
    function e(v0){return [4, v0];}
    function create(param){
     var
      _lI_ = caml_call1(E[1][2], 0),
      _lJ_ = caml_call1(D[1][2], 0),
      _lK_ = caml_call1(C[1][2], 0),
      _lL_ = caml_call1(B[1][2], 0);
     return [0, caml_call1(A[1][2], 0), _lL_, _lK_, _lJ_, _lI_];
    }
    function apply_part(_lH_, param){
     var e = _lH_[5], d = _lH_[4], c = _lH_[3], b = _lH_[2], a = _lH_[1];
     switch(param[0]){
       case 0:
        var x = param[1]; return [0, caml_call2(A[1][3], a, x), b, c, d, e];
       case 1:
        var x$0 = param[1];
        return [0, a, caml_call2(B[1][3], b, x$0), c, d, e];
       case 2:
        var x$1 = param[1];
        return [0, a, b, caml_call2(C[1][3], c, x$1), d, e];
       case 3:
        var x$2 = param[1];
        return [0, a, b, c, caml_call2(D[1][3], d, x$2), e];
       default:
        var x$3 = param[1];
        return [0, a, b, c, d, caml_call2(E[1][3], e, x$3)];
     }
    }
    function to_parts(param){
     var
      e$0 = param[5],
      d$0 = param[4],
      c$0 = param[3],
      b$0 = param[2],
      a$0 = param[1],
      _lw_ = caml_call1(E[2], e$0),
      _lx_ = [0, caml_call2(Streamable_Import[4][41], _lw_, e), 0],
      _ly_ = caml_call1(D[2], d$0),
      _lz_ = [0, caml_call2(Streamable_Import[4][41], _ly_, d), _lx_],
      _lA_ = caml_call1(C[2], c$0),
      _lB_ = [0, caml_call2(Streamable_Import[4][41], _lA_, c), _lz_],
      _lC_ = caml_call1(B[2], b$0),
      _lD_ = [0, caml_call2(Streamable_Import[4][41], _lC_, b), _lB_],
      _lE_ = caml_call1(A[2], a$0),
      _lF_ = [0, caml_call2(Streamable_Import[4][41], _lE_, a), _lD_],
      _lG_ = caml_call1(Streamable_Import[4][109], _lF_);
     return caml_call1(Streamable_Import[4][70], _lG_);
    }
    function finalize(param){
     var
      e = param[5],
      d = param[4],
      c = param[3],
      b = param[2],
      a = param[1],
      _ls_ = caml_call1(E[3], e),
      _lt_ = caml_call1(D[3], d),
      _lu_ = caml_call1(C[3], c),
      _lv_ = caml_call1(B[3], b);
     return [0, caml_call1(A[3], a), _lv_, _lu_, _lt_, _ls_];
    }
    return [0,
            [0,
             [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t],
             create,
             apply_part],
            to_parts,
            finalize];
   }
   var
    Of_tuple5_rpc = [0, V1$21],
    _y_ = [0, cst_A$7],
    _z_ = [0, cst_B$7],
    _A_ = [0, cst_C$6],
    _B_ = [0, cst_D$5],
    _C_ = [0, cst_E$4];
   function V1$22(A, B, C, D, E){
    var
     _k7_ = E[1],
     _k8_ = _k7_[1],
     _k__ = D[1],
     _k$_ = _k__[1],
     _lb_ = C[1],
     _lc_ = _lb_[1],
     _le_ = B[1],
     _lf_ = _le_[1],
     _lh_ = A[1],
     _li_ = _lh_[1],
     _k9_ =
       [0,
        [0,
         [0,
          _k8_[1],
          _k8_[2],
          _k8_[3],
          _k8_[4],
          _k8_[5],
          _k8_[6],
          _k8_[7],
          _k8_[8]],
         _k7_[2],
         _k7_[3]],
        E[2],
        E[3]],
     _la_ =
       [0,
        [0,
         [0,
          _k$_[1],
          _k$_[2],
          _k$_[3],
          _k$_[4],
          _k$_[5],
          _k$_[6],
          _k$_[7],
          _k$_[8]],
         _k__[2],
         _k__[3]],
        D[2],
        D[3]],
     _ld_ =
       [0,
        [0,
         [0,
          _lc_[1],
          _lc_[2],
          _lc_[3],
          _lc_[4],
          _lc_[5],
          _lc_[6],
          _lc_[7],
          _lc_[8]],
         _lb_[2],
         _lb_[3]],
        C[2],
        C[3]],
     _lg_ =
       [0,
        [0,
         [0,
          _lf_[1],
          _lf_[2],
          _lf_[3],
          _lf_[4],
          _lf_[5],
          _lf_[6],
          _lf_[7],
          _lf_[8]],
         _le_[2],
         _le_[3]],
        B[2],
        B[3]],
     Plain =
       caml_call1
        (caml_call1
          (caml_call1
            (caml_call1
              (caml_call1
                (Of_tuple5_rpc[1],
                 [0,
                  [0,
                   [0,
                    _li_[1],
                    _li_[2],
                    _li_[3],
                    _li_[4],
                    _li_[5],
                    _li_[6],
                    _li_[7],
                    _li_[8]],
                   _lh_[2],
                   _lh_[3]],
                  A[2],
                  A[3]]),
               _lg_),
             _ld_),
           _la_),
         _k9_);
    function t_of_sexp(sexp_101){
     a:
     {
      if(0 === sexp_101[0]){
       var _lj_ = sexp_101[1], _lk_ = caml_string_compare(_lj_, cst_a);
       b:
       {
        c:
        {
         d:
         {
          e:
          {
           if(0 <= _lk_){
            if(0 < _lk_){
             if(_lj_ === cst_b) break e;
             if(_lj_ === cst_c) break d;
             if(_lj_ === cst_d) break c;
             if(_lj_ !== cst_e) break a;
             break b;
            }
           }
           else if(_lj_ !== cst_A$7){
            if(_lj_ === cst_B$7) break e;
            if(_lj_ === cst_C$6) break d;
            if(_lj_ === cst_D$5) break c;
            if(_lj_ !== cst_E$4) break a;
            break b;
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5], error_source_099, sexp_101);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[5], error_source_099, sexp_101);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5], error_source_099, sexp_101);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_099, sexp_101);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_099, sexp_101);
      }
      var _ll_ = sexp_101[1];
      if(! _ll_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_099, sexp_101);
      var _lm_ = _ll_[1];
      if(0 !== _lm_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[6], error_source_099, sexp_101);
      var tag_102 = _lm_[1], _ln_ = caml_string_compare(tag_102, cst_a);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          if(0 <= _ln_){
           if(0 < _ln_){
            if(tag_102 === cst_b) break e;
            if(tag_102 === cst_c) break d;
            if(tag_102 === cst_d) break c;
            if(tag_102 !== cst_e) break a;
            break b;
           }
          }
          else if(tag_102 !== cst_A$7){
           if(tag_102 === cst_B$7) break e;
           if(tag_102 === cst_C$6) break d;
           if(tag_102 === cst_D$5) break c;
           if(tag_102 !== cst_E$4) break a;
           break b;
          }
          var sexp_args_103 = _ll_[2];
          if(sexp_args_103 && ! sexp_args_103[2]){
           var
            arg0_104 = sexp_args_103[1],
            res0_105 = caml_call1(A[1][1][9], arg0_104);
           return [0, res0_105];
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4],
                   error_source_099,
                   tag_102,
                   sexp_101);
         }
         var sexp_args_108 = _ll_[2];
         if(sexp_args_108 && ! sexp_args_108[2]){
          var
           arg0_109 = sexp_args_108[1],
           res0_110 = caml_call1(B[1][1][9], arg0_109);
          return [1, res0_110];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[4],
                  error_source_099,
                  tag_102,
                  sexp_101);
        }
        var sexp_args_113 = _ll_[2];
        if(sexp_args_113 && ! sexp_args_113[2]){
         var
          arg0_114 = sexp_args_113[1],
          res0_115 = caml_call1(C[1][1][9], arg0_114);
         return [2, res0_115];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[4],
                 error_source_099,
                 tag_102,
                 sexp_101);
       }
       var sexp_args_118 = _ll_[2];
       if(sexp_args_118 && ! sexp_args_118[2]){
        var
         arg0_119 = sexp_args_118[1],
         res0_120 = caml_call1(D[1][1][9], arg0_119);
        return [3, res0_120];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_099,
                tag_102,
                sexp_101);
      }
      var sexp_args_123 = _ll_[2];
      if(sexp_args_123 && ! sexp_args_123[2]){
       var
        arg0_124 = sexp_args_123[1],
        res0_125 = caml_call1(E[1][1][9], arg0_124);
       return [4, res0_125];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_099,
               tag_102,
               sexp_101);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[8], error_source_099, sexp_101);
    }
    function sexp_of_t(param){
     switch(param[0]){
       case 0:
        var arg0_126 = param[1], res0_127 = caml_call1(A[1][1][10], arg0_126);
        return [1, [0, _y_, [0, res0_127, 0]]];
       case 1:
        var arg0_128 = param[1], res0_129 = caml_call1(B[1][1][10], arg0_128);
        return [1, [0, _z_, [0, res0_129, 0]]];
       case 2:
        var arg0_130 = param[1], res0_131 = caml_call1(C[1][1][10], arg0_130);
        return [1, [0, _A_, [0, res0_131, 0]]];
       case 3:
        var arg0_132 = param[1], res0_133 = caml_call1(D[1][1][10], arg0_132);
        return [1, [0, _B_, [0, res0_133, 0]]];
       default:
        var arg0_134 = param[1], res0_135 = caml_call1(E[1][1][10], arg0_134);
        return [1, [0, _C_, [0, res0_135, 0]]];
     }
    }
    var
     include = V1(Plain, [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, Intermediate, to_parts, finalize];
   }
   var
    Of_tuple5 = [0, V1$22],
    cst_F = cst_F$3,
    cst_E$0 = cst_E$4,
    cst_D$1 = cst_D$5,
    cst_C$2 = cst_C$6,
    cst_B$3 = cst_B$7,
    cst_A$3 = cst_A$7,
    cst_t$11 = cst_t$31,
    cst_src_main_ml_899_10 = "src/main.ml:899:10",
    cst_t$12 = cst_t$31,
    cst_src_main_ml_Stable_Of_tupl$3 = cst_src_main_ml_Stable_Of_tupl$10,
    _D_ = [1, cst_src_main_ml_Stable_Of_tupl$10];
   function V1$23(A, B, C, D, E, F){
    var
     _kz_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          [0, cst_A$3, [0, A[1][1][5], 0]],
          [0,
           [0, cst_B$3, [0, B[1][1][5], 0]],
           [0,
            [0, cst_C$2, [0, C[1][1][5], 0]],
            [0,
             [0, cst_D$1, [0, D[1][1][5], 0]],
             [0,
              [0, cst_E$0, [0, E[1][1][5], 0]],
              [0, [0, cst_F, [0, F[1][1][5], 0]], 0]]]]]]),
     _kA_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$11), 0, _kz_], 0],
     _kB_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_899_10),
     group = caml_call2(Bin_prot_Shape[2], _kB_, _kA_),
     _kC_ = caml_call1(Bin_shape[2][1], cst_t$12),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _kC_), 0);
    function bin_size_t(param){
     switch(param[0]){
       case 0:
        var v1 = param[1], _k1_ = caml_call1(A[1][1][1], v1);
        return caml_call2(Bin_prot_Common[23], 1, _k1_);
       case 1:
        var v1$0 = param[1], _k2_ = caml_call1(B[1][1][1], v1$0);
        return caml_call2(Bin_prot_Common[23], 1, _k2_);
       case 2:
        var v1$1 = param[1], _k3_ = caml_call1(C[1][1][1], v1$1);
        return caml_call2(Bin_prot_Common[23], 1, _k3_);
       case 3:
        var v1$2 = param[1], _k4_ = caml_call1(D[1][1][1], v1$2);
        return caml_call2(Bin_prot_Common[23], 1, _k4_);
       case 4:
        var v1$3 = param[1], _k5_ = caml_call1(E[1][1][1], v1$3);
        return caml_call2(Bin_prot_Common[23], 1, _k5_);
       default:
        var v1$4 = param[1], _k6_ = caml_call1(F[1][1][1], v1$4);
        return caml_call2(Bin_prot_Common[23], 1, _k6_);
     }
    }
    function bin_write_t(buf, pos, param){
     switch(param[0]){
       case 0:
        var
         v1 = param[1],
         pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
        return caml_call3(A[1][1][2], buf, pos$0, v1);
       case 1:
        var
         v1$0 = param[1],
         pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
        return caml_call3(B[1][1][2], buf, pos$1, v1$0);
       case 2:
        var
         v1$1 = param[1],
         pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
        return caml_call3(C[1][1][2], buf, pos$2, v1$1);
       case 3:
        var
         v1$2 = param[1],
         pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
        return caml_call3(D[1][1][2], buf, pos$3, v1$2);
       case 4:
        var
         v1$3 = param[1],
         pos$4 = caml_call3(Bin_prot_Write[30], buf, pos, 4);
        return caml_call3(E[1][1][2], buf, pos$4, v1$3);
       default:
        var
         v1$4 = param[1],
         pos$5 = caml_call3(Bin_prot_Write[30], buf, pos, 5);
        return caml_call3(F[1][1][2], buf, pos$5, v1$4);
     }
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19],
              cst_src_main_ml_Stable_Of_tupl$3,
              pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(5 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _D_, pos_ref[1]);
     switch(match){
       case 0:
        var arg_1 = caml_call2(A[1][1][3], buf, pos_ref); return [0, arg_1];
       case 1:
        var arg_1$0 = caml_call2(B[1][1][3], buf, pos_ref);
        return [1, arg_1$0];
       case 2:
        var arg_1$1 = caml_call2(C[1][1][3], buf, pos_ref);
        return [2, arg_1$1];
       case 3:
        var arg_1$2 = caml_call2(D[1][1][3], buf, pos_ref);
        return [3, arg_1$2];
       case 4:
        var arg_1$3 = caml_call2(E[1][1][3], buf, pos_ref);
        return [4, arg_1$3];
       default:
        var arg_1$4 = caml_call2(F[1][1][3], buf, pos_ref);
        return [5, arg_1$4];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    function a(v0){return [0, v0];}
    function b(v0){return [1, v0];}
    function c(v0){return [2, v0];}
    function d(v0){return [3, v0];}
    function e(v0){return [4, v0];}
    function f(v0){return [5, v0];}
    function create(param){
     var
      _kW_ = caml_call1(F[1][2], 0),
      _kX_ = caml_call1(E[1][2], 0),
      _kY_ = caml_call1(D[1][2], 0),
      _kZ_ = caml_call1(C[1][2], 0),
      _k0_ = caml_call1(B[1][2], 0);
     return [0, caml_call1(A[1][2], 0), _k0_, _kZ_, _kY_, _kX_, _kW_];
    }
    function apply_part(_kV_, param){
     var
      f = _kV_[6],
      e = _kV_[5],
      d = _kV_[4],
      c = _kV_[3],
      b = _kV_[2],
      a = _kV_[1];
     switch(param[0]){
       case 0:
        var x = param[1];
        return [0, caml_call2(A[1][3], a, x), b, c, d, e, f];
       case 1:
        var x$0 = param[1];
        return [0, a, caml_call2(B[1][3], b, x$0), c, d, e, f];
       case 2:
        var x$1 = param[1];
        return [0, a, b, caml_call2(C[1][3], c, x$1), d, e, f];
       case 3:
        var x$2 = param[1];
        return [0, a, b, c, caml_call2(D[1][3], d, x$2), e, f];
       case 4:
        var x$3 = param[1];
        return [0, a, b, c, d, caml_call2(E[1][3], e, x$3), f];
       default:
        var x$4 = param[1];
        return [0, a, b, c, d, e, caml_call2(F[1][3], f, x$4)];
     }
    }
    function to_parts(param){
     var
      f$0 = param[6],
      e$0 = param[5],
      d$0 = param[4],
      c$0 = param[3],
      b$0 = param[2],
      a$0 = param[1],
      _kI_ = caml_call1(F[2], f$0),
      _kJ_ = [0, caml_call2(Streamable_Import[4][41], _kI_, f), 0],
      _kK_ = caml_call1(E[2], e$0),
      _kL_ = [0, caml_call2(Streamable_Import[4][41], _kK_, e), _kJ_],
      _kM_ = caml_call1(D[2], d$0),
      _kN_ = [0, caml_call2(Streamable_Import[4][41], _kM_, d), _kL_],
      _kO_ = caml_call1(C[2], c$0),
      _kP_ = [0, caml_call2(Streamable_Import[4][41], _kO_, c), _kN_],
      _kQ_ = caml_call1(B[2], b$0),
      _kR_ = [0, caml_call2(Streamable_Import[4][41], _kQ_, b), _kP_],
      _kS_ = caml_call1(A[2], a$0),
      _kT_ = [0, caml_call2(Streamable_Import[4][41], _kS_, a), _kR_],
      _kU_ = caml_call1(Streamable_Import[4][109], _kT_);
     return caml_call1(Streamable_Import[4][70], _kU_);
    }
    function finalize(param){
     var
      f = param[6],
      e = param[5],
      d = param[4],
      c = param[3],
      b = param[2],
      a = param[1],
      _kD_ = caml_call1(F[3], f),
      _kE_ = caml_call1(E[3], e),
      _kF_ = caml_call1(D[3], d),
      _kG_ = caml_call1(C[3], c),
      _kH_ = caml_call1(B[3], b);
     return [0, caml_call1(A[3], a), _kH_, _kG_, _kF_, _kE_, _kD_];
    }
    return [0,
            [0,
             [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t],
             create,
             apply_part],
            to_parts,
            finalize];
   }
   var
    Of_tuple6_rpc = [0, V1$23],
    _E_ = [0, cst_A$7],
    _F_ = [0, cst_B$7],
    _G_ = [0, cst_C$6],
    _H_ = [0, cst_D$5],
    _I_ = [0, cst_E$4],
    _J_ = [0, cst_F$3];
   function V1$24(A, B, C, D, E, F){
    var
     _kd_ = F[1],
     _ke_ = _kd_[1],
     _kg_ = E[1],
     _kh_ = _kg_[1],
     _kj_ = D[1],
     _kk_ = _kj_[1],
     _km_ = C[1],
     _kn_ = _km_[1],
     _kp_ = B[1],
     _kq_ = _kp_[1],
     _ks_ = A[1],
     _kt_ = _ks_[1],
     _kf_ =
       [0,
        [0,
         [0,
          _ke_[1],
          _ke_[2],
          _ke_[3],
          _ke_[4],
          _ke_[5],
          _ke_[6],
          _ke_[7],
          _ke_[8]],
         _kd_[2],
         _kd_[3]],
        F[2],
        F[3]],
     _ki_ =
       [0,
        [0,
         [0,
          _kh_[1],
          _kh_[2],
          _kh_[3],
          _kh_[4],
          _kh_[5],
          _kh_[6],
          _kh_[7],
          _kh_[8]],
         _kg_[2],
         _kg_[3]],
        E[2],
        E[3]],
     _kl_ =
       [0,
        [0,
         [0,
          _kk_[1],
          _kk_[2],
          _kk_[3],
          _kk_[4],
          _kk_[5],
          _kk_[6],
          _kk_[7],
          _kk_[8]],
         _kj_[2],
         _kj_[3]],
        D[2],
        D[3]],
     _ko_ =
       [0,
        [0,
         [0,
          _kn_[1],
          _kn_[2],
          _kn_[3],
          _kn_[4],
          _kn_[5],
          _kn_[6],
          _kn_[7],
          _kn_[8]],
         _km_[2],
         _km_[3]],
        C[2],
        C[3]],
     _kr_ =
       [0,
        [0,
         [0,
          _kq_[1],
          _kq_[2],
          _kq_[3],
          _kq_[4],
          _kq_[5],
          _kq_[6],
          _kq_[7],
          _kq_[8]],
         _kp_[2],
         _kp_[3]],
        B[2],
        B[3]],
     Plain =
       caml_call1
        (caml_call1
          (caml_call1
            (caml_call1
              (caml_call1
                (caml_call1
                  (Of_tuple6_rpc[1],
                   [0,
                    [0,
                     [0,
                      _kt_[1],
                      _kt_[2],
                      _kt_[3],
                      _kt_[4],
                      _kt_[5],
                      _kt_[6],
                      _kt_[7],
                      _kt_[8]],
                     _ks_[2],
                     _ks_[3]],
                    A[2],
                    A[3]]),
                 _kr_),
               _ko_),
             _kl_),
           _ki_),
         _kf_);
    function t_of_sexp(sexp_140){
     a:
     {
      if(0 === sexp_140[0]){
       var _ku_ = sexp_140[1], _kv_ = caml_string_compare(_ku_, cst_a);
       b:
       {
        c:
        {
         d:
         {
          e:
          {
           f:
           {
            if(0 <= _kv_){
             if(0 < _kv_){
              if(_ku_ === cst_b) break f;
              if(_ku_ === cst_c) break e;
              if(_ku_ === cst_d) break d;
              if(_ku_ === cst_e) break c;
              if(_ku_ !== cst_f) break a;
              break b;
             }
            }
            else if(_ku_ !== cst_A$7){
             if(_ku_ === cst_B$7) break f;
             if(_ku_ === cst_C$6) break e;
             if(_ku_ === cst_D$5) break d;
             if(_ku_ === cst_E$4) break c;
             if(_ku_ !== cst_F$3) break a;
             break b;
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[5], error_source_138, sexp_140);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5], error_source_138, sexp_140);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[5], error_source_138, sexp_140);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5], error_source_138, sexp_140);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_138, sexp_140);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_138, sexp_140);
      }
      var _kw_ = sexp_140[1];
      if(! _kw_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_138, sexp_140);
      var _kx_ = _kw_[1];
      if(0 !== _kx_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[6], error_source_138, sexp_140);
      var tag_141 = _kx_[1], _ky_ = caml_string_compare(tag_141, cst_a);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           if(0 <= _ky_){
            if(0 < _ky_){
             if(tag_141 === cst_b) break f;
             if(tag_141 === cst_c) break e;
             if(tag_141 === cst_d) break d;
             if(tag_141 === cst_e) break c;
             if(tag_141 !== cst_f) break a;
             break b;
            }
           }
           else if(tag_141 !== cst_A$7){
            if(tag_141 === cst_B$7) break f;
            if(tag_141 === cst_C$6) break e;
            if(tag_141 === cst_D$5) break d;
            if(tag_141 === cst_E$4) break c;
            if(tag_141 !== cst_F$3) break a;
            break b;
           }
           var sexp_args_142 = _kw_[2];
           if(sexp_args_142 && ! sexp_args_142[2]){
            var
             arg0_143 = sexp_args_142[1],
             res0_144 = caml_call1(A[1][1][9], arg0_143);
            return [0, res0_144];
           }
           return caml_call3
                   (Sexplib0_Sexp_conv_error[4],
                    error_source_138,
                    tag_141,
                    sexp_140);
          }
          var sexp_args_147 = _kw_[2];
          if(sexp_args_147 && ! sexp_args_147[2]){
           var
            arg0_148 = sexp_args_147[1],
            res0_149 = caml_call1(B[1][1][9], arg0_148);
           return [1, res0_149];
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4],
                   error_source_138,
                   tag_141,
                   sexp_140);
         }
         var sexp_args_152 = _kw_[2];
         if(sexp_args_152 && ! sexp_args_152[2]){
          var
           arg0_153 = sexp_args_152[1],
           res0_154 = caml_call1(C[1][1][9], arg0_153);
          return [2, res0_154];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[4],
                  error_source_138,
                  tag_141,
                  sexp_140);
        }
        var sexp_args_157 = _kw_[2];
        if(sexp_args_157 && ! sexp_args_157[2]){
         var
          arg0_158 = sexp_args_157[1],
          res0_159 = caml_call1(D[1][1][9], arg0_158);
         return [3, res0_159];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[4],
                 error_source_138,
                 tag_141,
                 sexp_140);
       }
       var sexp_args_162 = _kw_[2];
       if(sexp_args_162 && ! sexp_args_162[2]){
        var
         arg0_163 = sexp_args_162[1],
         res0_164 = caml_call1(E[1][1][9], arg0_163);
        return [4, res0_164];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_138,
                tag_141,
                sexp_140);
      }
      var sexp_args_167 = _kw_[2];
      if(sexp_args_167 && ! sexp_args_167[2]){
       var
        arg0_168 = sexp_args_167[1],
        res0_169 = caml_call1(F[1][1][9], arg0_168);
       return [5, res0_169];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_138,
               tag_141,
               sexp_140);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[8], error_source_138, sexp_140);
    }
    function sexp_of_t(param){
     switch(param[0]){
       case 0:
        var arg0_170 = param[1], res0_171 = caml_call1(A[1][1][10], arg0_170);
        return [1, [0, _E_, [0, res0_171, 0]]];
       case 1:
        var arg0_172 = param[1], res0_173 = caml_call1(B[1][1][10], arg0_172);
        return [1, [0, _F_, [0, res0_173, 0]]];
       case 2:
        var arg0_174 = param[1], res0_175 = caml_call1(C[1][1][10], arg0_174);
        return [1, [0, _G_, [0, res0_175, 0]]];
       case 3:
        var arg0_176 = param[1], res0_177 = caml_call1(D[1][1][10], arg0_176);
        return [1, [0, _H_, [0, res0_177, 0]]];
       case 4:
        var arg0_178 = param[1], res0_179 = caml_call1(E[1][1][10], arg0_178);
        return [1, [0, _I_, [0, res0_179, 0]]];
       default:
        var arg0_180 = param[1], res0_181 = caml_call1(F[1][1][10], arg0_180);
        return [1, [0, _J_, [0, res0_181, 0]]];
     }
    }
    var
     include = V1(Plain, [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, Intermediate, to_parts, finalize];
   }
   var
    Of_tuple6 = [0, V1$24],
    cst_G = cst_G$2,
    cst_F$0 = cst_F$3,
    cst_E$1 = cst_E$4,
    cst_D$2 = cst_D$5,
    cst_C$3 = cst_C$6,
    cst_B$4 = cst_B$7,
    cst_A$4 = cst_A$7,
    cst_t$13 = cst_t$31,
    cst_src_main_ml_1012_10 = "src/main.ml:1012:10",
    cst_t$14 = cst_t$31,
    cst_src_main_ml_Stable_Of_tupl$4 = cst_src_main_ml_Stable_Of_tupl$9,
    _K_ = [1, cst_src_main_ml_Stable_Of_tupl$9];
   function V1$25(A, B, C, D, E, F, G){
    var
     _jC_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          [0, cst_A$4, [0, A[1][1][5], 0]],
          [0,
           [0, cst_B$4, [0, B[1][1][5], 0]],
           [0,
            [0, cst_C$3, [0, C[1][1][5], 0]],
            [0,
             [0, cst_D$2, [0, D[1][1][5], 0]],
             [0,
              [0, cst_E$1, [0, E[1][1][5], 0]],
              [0,
               [0, cst_F$0, [0, F[1][1][5], 0]],
               [0, [0, cst_G, [0, G[1][1][5], 0]], 0]]]]]]]),
     _jD_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$13), 0, _jC_], 0],
     _jE_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_1012_10),
     group = caml_call2(Bin_prot_Shape[2], _jE_, _jD_),
     _jF_ = caml_call1(Bin_shape[2][1], cst_t$14),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _jF_), 0);
    function bin_size_t(param){
     switch(param[0]){
       case 0:
        var v1 = param[1], _j8_ = caml_call1(A[1][1][1], v1);
        return caml_call2(Bin_prot_Common[23], 1, _j8_);
       case 1:
        var v1$0 = param[1], _j9_ = caml_call1(B[1][1][1], v1$0);
        return caml_call2(Bin_prot_Common[23], 1, _j9_);
       case 2:
        var v1$1 = param[1], _j__ = caml_call1(C[1][1][1], v1$1);
        return caml_call2(Bin_prot_Common[23], 1, _j__);
       case 3:
        var v1$2 = param[1], _j$_ = caml_call1(D[1][1][1], v1$2);
        return caml_call2(Bin_prot_Common[23], 1, _j$_);
       case 4:
        var v1$3 = param[1], _ka_ = caml_call1(E[1][1][1], v1$3);
        return caml_call2(Bin_prot_Common[23], 1, _ka_);
       case 5:
        var v1$4 = param[1], _kb_ = caml_call1(F[1][1][1], v1$4);
        return caml_call2(Bin_prot_Common[23], 1, _kb_);
       default:
        var v1$5 = param[1], _kc_ = caml_call1(G[1][1][1], v1$5);
        return caml_call2(Bin_prot_Common[23], 1, _kc_);
     }
    }
    function bin_write_t(buf, pos, param){
     switch(param[0]){
       case 0:
        var
         v1 = param[1],
         pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
        return caml_call3(A[1][1][2], buf, pos$0, v1);
       case 1:
        var
         v1$0 = param[1],
         pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
        return caml_call3(B[1][1][2], buf, pos$1, v1$0);
       case 2:
        var
         v1$1 = param[1],
         pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
        return caml_call3(C[1][1][2], buf, pos$2, v1$1);
       case 3:
        var
         v1$2 = param[1],
         pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
        return caml_call3(D[1][1][2], buf, pos$3, v1$2);
       case 4:
        var
         v1$3 = param[1],
         pos$4 = caml_call3(Bin_prot_Write[30], buf, pos, 4);
        return caml_call3(E[1][1][2], buf, pos$4, v1$3);
       case 5:
        var
         v1$4 = param[1],
         pos$5 = caml_call3(Bin_prot_Write[30], buf, pos, 5);
        return caml_call3(F[1][1][2], buf, pos$5, v1$4);
       default:
        var
         v1$5 = param[1],
         pos$6 = caml_call3(Bin_prot_Write[30], buf, pos, 6);
        return caml_call3(G[1][1][2], buf, pos$6, v1$5);
     }
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19],
              cst_src_main_ml_Stable_Of_tupl$4,
              pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(6 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _K_, pos_ref[1]);
     switch(match){
       case 0:
        var arg_1 = caml_call2(A[1][1][3], buf, pos_ref); return [0, arg_1];
       case 1:
        var arg_1$0 = caml_call2(B[1][1][3], buf, pos_ref);
        return [1, arg_1$0];
       case 2:
        var arg_1$1 = caml_call2(C[1][1][3], buf, pos_ref);
        return [2, arg_1$1];
       case 3:
        var arg_1$2 = caml_call2(D[1][1][3], buf, pos_ref);
        return [3, arg_1$2];
       case 4:
        var arg_1$3 = caml_call2(E[1][1][3], buf, pos_ref);
        return [4, arg_1$3];
       case 5:
        var arg_1$4 = caml_call2(F[1][1][3], buf, pos_ref);
        return [5, arg_1$4];
       default:
        var arg_1$5 = caml_call2(G[1][1][3], buf, pos_ref);
        return [6, arg_1$5];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    function a(v0){return [0, v0];}
    function b(v0){return [1, v0];}
    function c(v0){return [2, v0];}
    function d(v0){return [3, v0];}
    function e(v0){return [4, v0];}
    function f(v0){return [5, v0];}
    function g(v0){return [6, v0];}
    function create(param){
     var
      _j2_ = caml_call1(G[1][2], 0),
      _j3_ = caml_call1(F[1][2], 0),
      _j4_ = caml_call1(E[1][2], 0),
      _j5_ = caml_call1(D[1][2], 0),
      _j6_ = caml_call1(C[1][2], 0),
      _j7_ = caml_call1(B[1][2], 0);
     return [0, caml_call1(A[1][2], 0), _j7_, _j6_, _j5_, _j4_, _j3_, _j2_];
    }
    function apply_part(_j1_, param){
     var
      g = _j1_[7],
      f = _j1_[6],
      e = _j1_[5],
      d = _j1_[4],
      c = _j1_[3],
      b = _j1_[2],
      a = _j1_[1];
     switch(param[0]){
       case 0:
        var x = param[1];
        return [0, caml_call2(A[1][3], a, x), b, c, d, e, f, g];
       case 1:
        var x$0 = param[1];
        return [0, a, caml_call2(B[1][3], b, x$0), c, d, e, f, g];
       case 2:
        var x$1 = param[1];
        return [0, a, b, caml_call2(C[1][3], c, x$1), d, e, f, g];
       case 3:
        var x$2 = param[1];
        return [0, a, b, c, caml_call2(D[1][3], d, x$2), e, f, g];
       case 4:
        var x$3 = param[1];
        return [0, a, b, c, d, caml_call2(E[1][3], e, x$3), f, g];
       case 5:
        var x$4 = param[1];
        return [0, a, b, c, d, e, caml_call2(F[1][3], f, x$4), g];
       default:
        var x$5 = param[1];
        return [0, a, b, c, d, e, f, caml_call2(G[1][3], g, x$5)];
     }
    }
    function to_parts(param){
     var
      g$0 = param[7],
      f$0 = param[6],
      e$0 = param[5],
      d$0 = param[4],
      c$0 = param[3],
      b$0 = param[2],
      a$0 = param[1],
      _jM_ = caml_call1(G[2], g$0),
      _jN_ = [0, caml_call2(Streamable_Import[4][41], _jM_, g), 0],
      _jO_ = caml_call1(F[2], f$0),
      _jP_ = [0, caml_call2(Streamable_Import[4][41], _jO_, f), _jN_],
      _jQ_ = caml_call1(E[2], e$0),
      _jR_ = [0, caml_call2(Streamable_Import[4][41], _jQ_, e), _jP_],
      _jS_ = caml_call1(D[2], d$0),
      _jT_ = [0, caml_call2(Streamable_Import[4][41], _jS_, d), _jR_],
      _jU_ = caml_call1(C[2], c$0),
      _jV_ = [0, caml_call2(Streamable_Import[4][41], _jU_, c), _jT_],
      _jW_ = caml_call1(B[2], b$0),
      _jX_ = [0, caml_call2(Streamable_Import[4][41], _jW_, b), _jV_],
      _jY_ = caml_call1(A[2], a$0),
      _jZ_ = [0, caml_call2(Streamable_Import[4][41], _jY_, a), _jX_],
      _j0_ = caml_call1(Streamable_Import[4][109], _jZ_);
     return caml_call1(Streamable_Import[4][70], _j0_);
    }
    function finalize(param){
     var
      g = param[7],
      f = param[6],
      e = param[5],
      d = param[4],
      c = param[3],
      b = param[2],
      a = param[1],
      _jG_ = caml_call1(G[3], g),
      _jH_ = caml_call1(F[3], f),
      _jI_ = caml_call1(E[3], e),
      _jJ_ = caml_call1(D[3], d),
      _jK_ = caml_call1(C[3], c),
      _jL_ = caml_call1(B[3], b);
     return [0, caml_call1(A[3], a), _jL_, _jK_, _jJ_, _jI_, _jH_, _jG_];
    }
    return [0,
            [0,
             [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t],
             create,
             apply_part],
            to_parts,
            finalize];
   }
   var
    Of_tuple7_rpc = [0, V1$25],
    _L_ = [0, cst_A$7],
    _M_ = [0, cst_B$7],
    _N_ = [0, cst_C$6],
    _O_ = [0, cst_D$5],
    _P_ = [0, cst_E$4],
    _Q_ = [0, cst_F$3],
    _R_ = [0, cst_G$2];
   function V1$26(A, B, C, D, E, F, G){
    var
     _jd_ = G[1],
     _je_ = _jd_[1],
     _jg_ = F[1],
     _jh_ = _jg_[1],
     _jj_ = E[1],
     _jk_ = _jj_[1],
     _jm_ = D[1],
     _jn_ = _jm_[1],
     _jp_ = C[1],
     _jq_ = _jp_[1],
     _js_ = B[1],
     _jt_ = _js_[1],
     _jv_ = A[1],
     _jw_ = _jv_[1],
     _jf_ =
       [0,
        [0,
         [0,
          _je_[1],
          _je_[2],
          _je_[3],
          _je_[4],
          _je_[5],
          _je_[6],
          _je_[7],
          _je_[8]],
         _jd_[2],
         _jd_[3]],
        G[2],
        G[3]],
     _ji_ =
       [0,
        [0,
         [0,
          _jh_[1],
          _jh_[2],
          _jh_[3],
          _jh_[4],
          _jh_[5],
          _jh_[6],
          _jh_[7],
          _jh_[8]],
         _jg_[2],
         _jg_[3]],
        F[2],
        F[3]],
     _jl_ =
       [0,
        [0,
         [0,
          _jk_[1],
          _jk_[2],
          _jk_[3],
          _jk_[4],
          _jk_[5],
          _jk_[6],
          _jk_[7],
          _jk_[8]],
         _jj_[2],
         _jj_[3]],
        E[2],
        E[3]],
     _jo_ =
       [0,
        [0,
         [0,
          _jn_[1],
          _jn_[2],
          _jn_[3],
          _jn_[4],
          _jn_[5],
          _jn_[6],
          _jn_[7],
          _jn_[8]],
         _jm_[2],
         _jm_[3]],
        D[2],
        D[3]],
     _jr_ =
       [0,
        [0,
         [0,
          _jq_[1],
          _jq_[2],
          _jq_[3],
          _jq_[4],
          _jq_[5],
          _jq_[6],
          _jq_[7],
          _jq_[8]],
         _jp_[2],
         _jp_[3]],
        C[2],
        C[3]],
     _ju_ =
       [0,
        [0,
         [0,
          _jt_[1],
          _jt_[2],
          _jt_[3],
          _jt_[4],
          _jt_[5],
          _jt_[6],
          _jt_[7],
          _jt_[8]],
         _js_[2],
         _js_[3]],
        B[2],
        B[3]],
     Plain =
       caml_call1
        (caml_call1
          (caml_call1
            (caml_call1
              (caml_call1
                (caml_call1
                  (caml_call1
                    (Of_tuple7_rpc[1],
                     [0,
                      [0,
                       [0,
                        _jw_[1],
                        _jw_[2],
                        _jw_[3],
                        _jw_[4],
                        _jw_[5],
                        _jw_[6],
                        _jw_[7],
                        _jw_[8]],
                       _jv_[2],
                       _jv_[3]],
                      A[2],
                      A[3]]),
                   _ju_),
                 _jr_),
               _jo_),
             _jl_),
           _ji_),
         _jf_);
    function t_of_sexp(sexp_186){
     a:
     {
      if(0 === sexp_186[0]){
       var _jx_ = sexp_186[1], _jy_ = caml_string_compare(_jx_, cst_a);
       b:
       {
        c:
        {
         d:
         {
          e:
          {
           f:
           {
            g:
            {
             if(0 <= _jy_){
              if(0 < _jy_){
               if(_jx_ === cst_b) break g;
               if(_jx_ === cst_c) break f;
               if(_jx_ === cst_d) break e;
               if(_jx_ === cst_e) break d;
               if(_jx_ === cst_f) break c;
               if(_jx_ !== cst_g) break a;
               break b;
              }
             }
             else if(_jx_ !== cst_A$7){
              if(_jx_ === cst_B$7) break g;
              if(_jx_ === cst_C$6) break f;
              if(_jx_ === cst_D$5) break e;
              if(_jx_ === cst_E$4) break d;
              if(_jx_ === cst_F$3) break c;
              if(_jx_ !== cst_G$2) break a;
              break b;
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5], error_source_184, sexp_186);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[5], error_source_184, sexp_186);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5], error_source_184, sexp_186);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[5], error_source_184, sexp_186);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5], error_source_184, sexp_186);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_184, sexp_186);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_184, sexp_186);
      }
      var _jz_ = sexp_186[1];
      if(! _jz_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_184, sexp_186);
      var _jA_ = _jz_[1];
      if(0 !== _jA_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[6], error_source_184, sexp_186);
      var tag_187 = _jA_[1], _jB_ = caml_string_compare(tag_187, cst_a);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            if(0 <= _jB_){
             if(0 < _jB_){
              if(tag_187 === cst_b) break g;
              if(tag_187 === cst_c) break f;
              if(tag_187 === cst_d) break e;
              if(tag_187 === cst_e) break d;
              if(tag_187 === cst_f) break c;
              if(tag_187 !== cst_g) break a;
              break b;
             }
            }
            else if(tag_187 !== cst_A$7){
             if(tag_187 === cst_B$7) break g;
             if(tag_187 === cst_C$6) break f;
             if(tag_187 === cst_D$5) break e;
             if(tag_187 === cst_E$4) break d;
             if(tag_187 === cst_F$3) break c;
             if(tag_187 !== cst_G$2) break a;
             break b;
            }
            var sexp_args_188 = _jz_[2];
            if(sexp_args_188 && ! sexp_args_188[2]){
             var
              arg0_189 = sexp_args_188[1],
              res0_190 = caml_call1(A[1][1][9], arg0_189);
             return [0, res0_190];
            }
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],
                     error_source_184,
                     tag_187,
                     sexp_186);
           }
           var sexp_args_193 = _jz_[2];
           if(sexp_args_193 && ! sexp_args_193[2]){
            var
             arg0_194 = sexp_args_193[1],
             res0_195 = caml_call1(B[1][1][9], arg0_194);
            return [1, res0_195];
           }
           return caml_call3
                   (Sexplib0_Sexp_conv_error[4],
                    error_source_184,
                    tag_187,
                    sexp_186);
          }
          var sexp_args_198 = _jz_[2];
          if(sexp_args_198 && ! sexp_args_198[2]){
           var
            arg0_199 = sexp_args_198[1],
            res0_200 = caml_call1(C[1][1][9], arg0_199);
           return [2, res0_200];
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4],
                   error_source_184,
                   tag_187,
                   sexp_186);
         }
         var sexp_args_203 = _jz_[2];
         if(sexp_args_203 && ! sexp_args_203[2]){
          var
           arg0_204 = sexp_args_203[1],
           res0_205 = caml_call1(D[1][1][9], arg0_204);
          return [3, res0_205];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[4],
                  error_source_184,
                  tag_187,
                  sexp_186);
        }
        var sexp_args_208 = _jz_[2];
        if(sexp_args_208 && ! sexp_args_208[2]){
         var
          arg0_209 = sexp_args_208[1],
          res0_210 = caml_call1(E[1][1][9], arg0_209);
         return [4, res0_210];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[4],
                 error_source_184,
                 tag_187,
                 sexp_186);
       }
       var sexp_args_213 = _jz_[2];
       if(sexp_args_213 && ! sexp_args_213[2]){
        var
         arg0_214 = sexp_args_213[1],
         res0_215 = caml_call1(F[1][1][9], arg0_214);
        return [5, res0_215];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_184,
                tag_187,
                sexp_186);
      }
      var sexp_args_218 = _jz_[2];
      if(sexp_args_218 && ! sexp_args_218[2]){
       var
        arg0_219 = sexp_args_218[1],
        res0_220 = caml_call1(G[1][1][9], arg0_219);
       return [6, res0_220];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_184,
               tag_187,
               sexp_186);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[8], error_source_184, sexp_186);
    }
    function sexp_of_t(param){
     switch(param[0]){
       case 0:
        var arg0_221 = param[1], res0_222 = caml_call1(A[1][1][10], arg0_221);
        return [1, [0, _L_, [0, res0_222, 0]]];
       case 1:
        var arg0_223 = param[1], res0_224 = caml_call1(B[1][1][10], arg0_223);
        return [1, [0, _M_, [0, res0_224, 0]]];
       case 2:
        var arg0_225 = param[1], res0_226 = caml_call1(C[1][1][10], arg0_225);
        return [1, [0, _N_, [0, res0_226, 0]]];
       case 3:
        var arg0_227 = param[1], res0_228 = caml_call1(D[1][1][10], arg0_227);
        return [1, [0, _O_, [0, res0_228, 0]]];
       case 4:
        var arg0_229 = param[1], res0_230 = caml_call1(E[1][1][10], arg0_229);
        return [1, [0, _P_, [0, res0_230, 0]]];
       case 5:
        var arg0_231 = param[1], res0_232 = caml_call1(F[1][1][10], arg0_231);
        return [1, [0, _Q_, [0, res0_232, 0]]];
       default:
        var arg0_233 = param[1], res0_234 = caml_call1(G[1][1][10], arg0_233);
        return [1, [0, _R_, [0, res0_234, 0]]];
     }
    }
    var
     include = V1(Plain, [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, Intermediate, to_parts, finalize];
   }
   var
    Of_tuple7 = [0, V1$26],
    cst_H = cst_H$1,
    cst_G$0 = cst_G$2,
    cst_F$1 = cst_F$3,
    cst_E$2 = cst_E$4,
    cst_D$3 = cst_D$5,
    cst_C$4 = cst_C$6,
    cst_B$5 = cst_B$7,
    cst_A$5 = cst_A$7,
    cst_t$15 = cst_t$31,
    cst_src_main_ml_1139_10 = "src/main.ml:1139:10",
    cst_t$16 = cst_t$31,
    cst_src_main_ml_Stable_Of_tupl$5 = cst_src_main_ml_Stable_Of_tupl$8,
    _S_ = [1, cst_src_main_ml_Stable_Of_tupl$8];
   function V1$27(A, B, C, D, E, F, G, H){
    var
     _ix_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          [0, cst_A$5, [0, A[1][1][5], 0]],
          [0,
           [0, cst_B$5, [0, B[1][1][5], 0]],
           [0,
            [0, cst_C$4, [0, C[1][1][5], 0]],
            [0,
             [0, cst_D$3, [0, D[1][1][5], 0]],
             [0,
              [0, cst_E$2, [0, E[1][1][5], 0]],
              [0,
               [0, cst_F$1, [0, F[1][1][5], 0]],
               [0,
                [0, cst_G$0, [0, G[1][1][5], 0]],
                [0, [0, cst_H, [0, H[1][1][5], 0]], 0]]]]]]]]),
     _iy_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$15), 0, _ix_], 0],
     _iz_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_1139_10),
     group = caml_call2(Bin_prot_Shape[2], _iz_, _iy_),
     _iA_ = caml_call1(Bin_shape[2][1], cst_t$16),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _iA_), 0);
    function bin_size_t(param){
     switch(param[0]){
       case 0:
        var v1 = param[1], _i7_ = caml_call1(A[1][1][1], v1);
        return caml_call2(Bin_prot_Common[23], 1, _i7_);
       case 1:
        var v1$0 = param[1], _i8_ = caml_call1(B[1][1][1], v1$0);
        return caml_call2(Bin_prot_Common[23], 1, _i8_);
       case 2:
        var v1$1 = param[1], _i9_ = caml_call1(C[1][1][1], v1$1);
        return caml_call2(Bin_prot_Common[23], 1, _i9_);
       case 3:
        var v1$2 = param[1], _i__ = caml_call1(D[1][1][1], v1$2);
        return caml_call2(Bin_prot_Common[23], 1, _i__);
       case 4:
        var v1$3 = param[1], _i$_ = caml_call1(E[1][1][1], v1$3);
        return caml_call2(Bin_prot_Common[23], 1, _i$_);
       case 5:
        var v1$4 = param[1], _ja_ = caml_call1(F[1][1][1], v1$4);
        return caml_call2(Bin_prot_Common[23], 1, _ja_);
       case 6:
        var v1$5 = param[1], _jb_ = caml_call1(G[1][1][1], v1$5);
        return caml_call2(Bin_prot_Common[23], 1, _jb_);
       default:
        var v1$6 = param[1], _jc_ = caml_call1(H[1][1][1], v1$6);
        return caml_call2(Bin_prot_Common[23], 1, _jc_);
     }
    }
    function bin_write_t(buf, pos, param){
     switch(param[0]){
       case 0:
        var
         v1 = param[1],
         pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
        return caml_call3(A[1][1][2], buf, pos$0, v1);
       case 1:
        var
         v1$0 = param[1],
         pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
        return caml_call3(B[1][1][2], buf, pos$1, v1$0);
       case 2:
        var
         v1$1 = param[1],
         pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
        return caml_call3(C[1][1][2], buf, pos$2, v1$1);
       case 3:
        var
         v1$2 = param[1],
         pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
        return caml_call3(D[1][1][2], buf, pos$3, v1$2);
       case 4:
        var
         v1$3 = param[1],
         pos$4 = caml_call3(Bin_prot_Write[30], buf, pos, 4);
        return caml_call3(E[1][1][2], buf, pos$4, v1$3);
       case 5:
        var
         v1$4 = param[1],
         pos$5 = caml_call3(Bin_prot_Write[30], buf, pos, 5);
        return caml_call3(F[1][1][2], buf, pos$5, v1$4);
       case 6:
        var
         v1$5 = param[1],
         pos$6 = caml_call3(Bin_prot_Write[30], buf, pos, 6);
        return caml_call3(G[1][1][2], buf, pos$6, v1$5);
       default:
        var
         v1$6 = param[1],
         pos$7 = caml_call3(Bin_prot_Write[30], buf, pos, 7);
        return caml_call3(H[1][1][2], buf, pos$7, v1$6);
     }
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19],
              cst_src_main_ml_Stable_Of_tupl$5,
              pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(7 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _S_, pos_ref[1]);
     switch(match){
       case 0:
        var arg_1 = caml_call2(A[1][1][3], buf, pos_ref); return [0, arg_1];
       case 1:
        var arg_1$0 = caml_call2(B[1][1][3], buf, pos_ref);
        return [1, arg_1$0];
       case 2:
        var arg_1$1 = caml_call2(C[1][1][3], buf, pos_ref);
        return [2, arg_1$1];
       case 3:
        var arg_1$2 = caml_call2(D[1][1][3], buf, pos_ref);
        return [3, arg_1$2];
       case 4:
        var arg_1$3 = caml_call2(E[1][1][3], buf, pos_ref);
        return [4, arg_1$3];
       case 5:
        var arg_1$4 = caml_call2(F[1][1][3], buf, pos_ref);
        return [5, arg_1$4];
       case 6:
        var arg_1$5 = caml_call2(G[1][1][3], buf, pos_ref);
        return [6, arg_1$5];
       default:
        var arg_1$6 = caml_call2(H[1][1][3], buf, pos_ref);
        return [7, arg_1$6];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    function a(v0){return [0, v0];}
    function b(v0){return [1, v0];}
    function c(v0){return [2, v0];}
    function d(v0){return [3, v0];}
    function e(v0){return [4, v0];}
    function f(v0){return [5, v0];}
    function g(v0){return [6, v0];}
    function h(v0){return [7, v0];}
    function create(param){
     var
      _i0_ = caml_call1(H[1][2], 0),
      _i1_ = caml_call1(G[1][2], 0),
      _i2_ = caml_call1(F[1][2], 0),
      _i3_ = caml_call1(E[1][2], 0),
      _i4_ = caml_call1(D[1][2], 0),
      _i5_ = caml_call1(C[1][2], 0),
      _i6_ = caml_call1(B[1][2], 0);
     return [0,
             caml_call1(A[1][2], 0),
             _i6_,
             _i5_,
             _i4_,
             _i3_,
             _i2_,
             _i1_,
             _i0_];
    }
    function apply_part(_iZ_, param){
     var
      h = _iZ_[8],
      g = _iZ_[7],
      f = _iZ_[6],
      e = _iZ_[5],
      d = _iZ_[4],
      c = _iZ_[3],
      b = _iZ_[2],
      a = _iZ_[1];
     switch(param[0]){
       case 0:
        var x = param[1];
        return [0, caml_call2(A[1][3], a, x), b, c, d, e, f, g, h];
       case 1:
        var x$0 = param[1];
        return [0, a, caml_call2(B[1][3], b, x$0), c, d, e, f, g, h];
       case 2:
        var x$1 = param[1];
        return [0, a, b, caml_call2(C[1][3], c, x$1), d, e, f, g, h];
       case 3:
        var x$2 = param[1];
        return [0, a, b, c, caml_call2(D[1][3], d, x$2), e, f, g, h];
       case 4:
        var x$3 = param[1];
        return [0, a, b, c, d, caml_call2(E[1][3], e, x$3), f, g, h];
       case 5:
        var x$4 = param[1];
        return [0, a, b, c, d, e, caml_call2(F[1][3], f, x$4), g, h];
       case 6:
        var x$5 = param[1];
        return [0, a, b, c, d, e, f, caml_call2(G[1][3], g, x$5), h];
       default:
        var x$6 = param[1];
        return [0, a, b, c, d, e, f, g, caml_call2(H[1][3], h, x$6)];
     }
    }
    function to_parts(param){
     var
      h$0 = param[8],
      g$0 = param[7],
      f$0 = param[6],
      e$0 = param[5],
      d$0 = param[4],
      c$0 = param[3],
      b$0 = param[2],
      a$0 = param[1],
      _iI_ = caml_call1(H[2], h$0),
      _iJ_ = [0, caml_call2(Streamable_Import[4][41], _iI_, h), 0],
      _iK_ = caml_call1(G[2], g$0),
      _iL_ = [0, caml_call2(Streamable_Import[4][41], _iK_, g), _iJ_],
      _iM_ = caml_call1(F[2], f$0),
      _iN_ = [0, caml_call2(Streamable_Import[4][41], _iM_, f), _iL_],
      _iO_ = caml_call1(E[2], e$0),
      _iP_ = [0, caml_call2(Streamable_Import[4][41], _iO_, e), _iN_],
      _iQ_ = caml_call1(D[2], d$0),
      _iR_ = [0, caml_call2(Streamable_Import[4][41], _iQ_, d), _iP_],
      _iS_ = caml_call1(C[2], c$0),
      _iT_ = [0, caml_call2(Streamable_Import[4][41], _iS_, c), _iR_],
      _iU_ = caml_call1(B[2], b$0),
      _iV_ = [0, caml_call2(Streamable_Import[4][41], _iU_, b), _iT_],
      _iW_ = caml_call1(A[2], a$0),
      _iX_ = [0, caml_call2(Streamable_Import[4][41], _iW_, a), _iV_],
      _iY_ = caml_call1(Streamable_Import[4][109], _iX_);
     return caml_call1(Streamable_Import[4][70], _iY_);
    }
    function finalize(param){
     var
      h = param[8],
      g = param[7],
      f = param[6],
      e = param[5],
      d = param[4],
      c = param[3],
      b = param[2],
      a = param[1],
      _iB_ = caml_call1(H[3], h),
      _iC_ = caml_call1(G[3], g),
      _iD_ = caml_call1(F[3], f),
      _iE_ = caml_call1(E[3], e),
      _iF_ = caml_call1(D[3], d),
      _iG_ = caml_call1(C[3], c),
      _iH_ = caml_call1(B[3], b);
     return [0, caml_call1(A[3], a), _iH_, _iG_, _iF_, _iE_, _iD_, _iC_, _iB_];
    }
    return [0,
            [0,
             [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t],
             create,
             apply_part],
            to_parts,
            finalize];
   }
   var
    Of_tuple8_rpc = [0, V1$27],
    _T_ = [0, cst_A$7],
    _U_ = [0, cst_B$7],
    _V_ = [0, cst_C$6],
    _W_ = [0, cst_D$5],
    _X_ = [0, cst_E$4],
    _Y_ = [0, cst_F$3],
    _Z_ = [0, cst_G$2],
    ___ = [0, cst_H$1];
   function V1$28(A, B, C, D, E, F, G, H){
    var
     _h7_ = H[1],
     _h8_ = _h7_[1],
     _h__ = G[1],
     _h$_ = _h__[1],
     _ib_ = F[1],
     _ic_ = _ib_[1],
     _ie_ = E[1],
     _if_ = _ie_[1],
     _ih_ = D[1],
     _ii_ = _ih_[1],
     _ik_ = C[1],
     _il_ = _ik_[1],
     _in_ = B[1],
     _io_ = _in_[1],
     _iq_ = A[1],
     _ir_ = _iq_[1],
     _h9_ =
       [0,
        [0,
         [0,
          _h8_[1],
          _h8_[2],
          _h8_[3],
          _h8_[4],
          _h8_[5],
          _h8_[6],
          _h8_[7],
          _h8_[8]],
         _h7_[2],
         _h7_[3]],
        H[2],
        H[3]],
     _ia_ =
       [0,
        [0,
         [0,
          _h$_[1],
          _h$_[2],
          _h$_[3],
          _h$_[4],
          _h$_[5],
          _h$_[6],
          _h$_[7],
          _h$_[8]],
         _h__[2],
         _h__[3]],
        G[2],
        G[3]],
     _id_ =
       [0,
        [0,
         [0,
          _ic_[1],
          _ic_[2],
          _ic_[3],
          _ic_[4],
          _ic_[5],
          _ic_[6],
          _ic_[7],
          _ic_[8]],
         _ib_[2],
         _ib_[3]],
        F[2],
        F[3]],
     _ig_ =
       [0,
        [0,
         [0,
          _if_[1],
          _if_[2],
          _if_[3],
          _if_[4],
          _if_[5],
          _if_[6],
          _if_[7],
          _if_[8]],
         _ie_[2],
         _ie_[3]],
        E[2],
        E[3]],
     _ij_ =
       [0,
        [0,
         [0,
          _ii_[1],
          _ii_[2],
          _ii_[3],
          _ii_[4],
          _ii_[5],
          _ii_[6],
          _ii_[7],
          _ii_[8]],
         _ih_[2],
         _ih_[3]],
        D[2],
        D[3]],
     _im_ =
       [0,
        [0,
         [0,
          _il_[1],
          _il_[2],
          _il_[3],
          _il_[4],
          _il_[5],
          _il_[6],
          _il_[7],
          _il_[8]],
         _ik_[2],
         _ik_[3]],
        C[2],
        C[3]],
     _ip_ =
       [0,
        [0,
         [0,
          _io_[1],
          _io_[2],
          _io_[3],
          _io_[4],
          _io_[5],
          _io_[6],
          _io_[7],
          _io_[8]],
         _in_[2],
         _in_[3]],
        B[2],
        B[3]],
     Plain =
       caml_call1
        (caml_call1
          (caml_call1
            (caml_call1
              (caml_call1
                (caml_call1
                  (caml_call1
                    (caml_call1
                      (Of_tuple8_rpc[1],
                       [0,
                        [0,
                         [0,
                          _ir_[1],
                          _ir_[2],
                          _ir_[3],
                          _ir_[4],
                          _ir_[5],
                          _ir_[6],
                          _ir_[7],
                          _ir_[8]],
                         _iq_[2],
                         _iq_[3]],
                        A[2],
                        A[3]]),
                     _ip_),
                   _im_),
                 _ij_),
               _ig_),
             _id_),
           _ia_),
         _h9_);
    function t_of_sexp(sexp_239){
     a:
     {
      if(0 === sexp_239[0]){
       var _is_ = sexp_239[1], _it_ = caml_string_compare(_is_, cst_a);
       b:
       {
        c:
        {
         d:
         {
          e:
          {
           f:
           {
            g:
            {
             h:
             {
              if(0 <= _it_){
               if(0 < _it_){
                if(_is_ === cst_b) break h;
                if(_is_ === cst_c) break g;
                if(_is_ === cst_d) break f;
                if(_is_ === cst_e) break e;
                if(_is_ === cst_f) break d;
                if(_is_ === cst_g) break c;
                if(_is_ !== cst_h) break a;
                break b;
               }
              }
              else if(_is_ !== cst_A$7){
               if(_is_ === cst_B$7) break h;
               if(_is_ === cst_C$6) break g;
               if(_is_ === cst_D$5) break f;
               if(_is_ === cst_E$4) break e;
               if(_is_ === cst_F$3) break d;
               if(_is_ === cst_G$2) break c;
               if(_is_ !== cst_H$1) break a;
               break b;
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[5], error_source_237, sexp_239);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5], error_source_237, sexp_239);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[5], error_source_237, sexp_239);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5], error_source_237, sexp_239);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[5], error_source_237, sexp_239);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5], error_source_237, sexp_239);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_237, sexp_239);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_237, sexp_239);
      }
      var _iu_ = sexp_239[1];
      if(! _iu_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_237, sexp_239);
      var _iv_ = _iu_[1];
      if(0 !== _iv_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[6], error_source_237, sexp_239);
      var tag_240 = _iv_[1], _iw_ = caml_string_compare(tag_240, cst_a);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             if(0 <= _iw_){
              if(0 < _iw_){
               if(tag_240 === cst_b) break h;
               if(tag_240 === cst_c) break g;
               if(tag_240 === cst_d) break f;
               if(tag_240 === cst_e) break e;
               if(tag_240 === cst_f) break d;
               if(tag_240 === cst_g) break c;
               if(tag_240 !== cst_h) break a;
               break b;
              }
             }
             else if(tag_240 !== cst_A$7){
              if(tag_240 === cst_B$7) break h;
              if(tag_240 === cst_C$6) break g;
              if(tag_240 === cst_D$5) break f;
              if(tag_240 === cst_E$4) break e;
              if(tag_240 === cst_F$3) break d;
              if(tag_240 === cst_G$2) break c;
              if(tag_240 !== cst_H$1) break a;
              break b;
             }
             var sexp_args_241 = _iu_[2];
             if(sexp_args_241 && ! sexp_args_241[2]){
              var
               arg0_242 = sexp_args_241[1],
               res0_243 = caml_call1(A[1][1][9], arg0_242);
              return [0, res0_243];
             }
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],
                      error_source_237,
                      tag_240,
                      sexp_239);
            }
            var sexp_args_246 = _iu_[2];
            if(sexp_args_246 && ! sexp_args_246[2]){
             var
              arg0_247 = sexp_args_246[1],
              res0_248 = caml_call1(B[1][1][9], arg0_247);
             return [1, res0_248];
            }
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],
                     error_source_237,
                     tag_240,
                     sexp_239);
           }
           var sexp_args_251 = _iu_[2];
           if(sexp_args_251 && ! sexp_args_251[2]){
            var
             arg0_252 = sexp_args_251[1],
             res0_253 = caml_call1(C[1][1][9], arg0_252);
            return [2, res0_253];
           }
           return caml_call3
                   (Sexplib0_Sexp_conv_error[4],
                    error_source_237,
                    tag_240,
                    sexp_239);
          }
          var sexp_args_256 = _iu_[2];
          if(sexp_args_256 && ! sexp_args_256[2]){
           var
            arg0_257 = sexp_args_256[1],
            res0_258 = caml_call1(D[1][1][9], arg0_257);
           return [3, res0_258];
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4],
                   error_source_237,
                   tag_240,
                   sexp_239);
         }
         var sexp_args_261 = _iu_[2];
         if(sexp_args_261 && ! sexp_args_261[2]){
          var
           arg0_262 = sexp_args_261[1],
           res0_263 = caml_call1(E[1][1][9], arg0_262);
          return [4, res0_263];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[4],
                  error_source_237,
                  tag_240,
                  sexp_239);
        }
        var sexp_args_266 = _iu_[2];
        if(sexp_args_266 && ! sexp_args_266[2]){
         var
          arg0_267 = sexp_args_266[1],
          res0_268 = caml_call1(F[1][1][9], arg0_267);
         return [5, res0_268];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[4],
                 error_source_237,
                 tag_240,
                 sexp_239);
       }
       var sexp_args_271 = _iu_[2];
       if(sexp_args_271 && ! sexp_args_271[2]){
        var
         arg0_272 = sexp_args_271[1],
         res0_273 = caml_call1(G[1][1][9], arg0_272);
        return [6, res0_273];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_237,
                tag_240,
                sexp_239);
      }
      var sexp_args_276 = _iu_[2];
      if(sexp_args_276 && ! sexp_args_276[2]){
       var
        arg0_277 = sexp_args_276[1],
        res0_278 = caml_call1(H[1][1][9], arg0_277);
       return [7, res0_278];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_237,
               tag_240,
               sexp_239);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[8], error_source_237, sexp_239);
    }
    function sexp_of_t(param){
     switch(param[0]){
       case 0:
        var arg0_279 = param[1], res0_280 = caml_call1(A[1][1][10], arg0_279);
        return [1, [0, _T_, [0, res0_280, 0]]];
       case 1:
        var arg0_281 = param[1], res0_282 = caml_call1(B[1][1][10], arg0_281);
        return [1, [0, _U_, [0, res0_282, 0]]];
       case 2:
        var arg0_283 = param[1], res0_284 = caml_call1(C[1][1][10], arg0_283);
        return [1, [0, _V_, [0, res0_284, 0]]];
       case 3:
        var arg0_285 = param[1], res0_286 = caml_call1(D[1][1][10], arg0_285);
        return [1, [0, _W_, [0, res0_286, 0]]];
       case 4:
        var arg0_287 = param[1], res0_288 = caml_call1(E[1][1][10], arg0_287);
        return [1, [0, _X_, [0, res0_288, 0]]];
       case 5:
        var arg0_289 = param[1], res0_290 = caml_call1(F[1][1][10], arg0_289);
        return [1, [0, _Y_, [0, res0_290, 0]]];
       case 6:
        var arg0_291 = param[1], res0_292 = caml_call1(G[1][1][10], arg0_291);
        return [1, [0, _Z_, [0, res0_292, 0]]];
       default:
        var arg0_293 = param[1], res0_294 = caml_call1(H[1][1][10], arg0_293);
        return [1, [0, ___, [0, res0_294, 0]]];
     }
    }
    var
     include = V1(Plain, [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, Intermediate, to_parts, finalize];
   }
   var
    Of_tuple8 = [0, V1$28],
    cst_I = cst_I$0,
    cst_H$0 = cst_H$1,
    cst_G$1 = cst_G$2,
    cst_F$2 = cst_F$3,
    cst_E$3 = cst_E$4,
    cst_D$4 = cst_D$5,
    cst_C$5 = cst_C$6,
    cst_B$6 = cst_B$7,
    cst_A$6 = cst_A$7,
    cst_t$17 = cst_t$31,
    cst_src_main_ml_1275_10 = "src/main.ml:1275:10",
    cst_t$18 = cst_t$31,
    cst_src_main_ml_Stable_Of_tupl$6 = cst_src_main_ml_Stable_Of_tupl$7,
    _$_ = [1, cst_src_main_ml_Stable_Of_tupl$7];
   function V1$29(A, B, C, D, E, F, G, H, I){
    var
     _hk_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          [0, cst_A$6, [0, A[1][1][5], 0]],
          [0,
           [0, cst_B$6, [0, B[1][1][5], 0]],
           [0,
            [0, cst_C$5, [0, C[1][1][5], 0]],
            [0,
             [0, cst_D$4, [0, D[1][1][5], 0]],
             [0,
              [0, cst_E$3, [0, E[1][1][5], 0]],
              [0,
               [0, cst_F$2, [0, F[1][1][5], 0]],
               [0,
                [0, cst_G$1, [0, G[1][1][5], 0]],
                [0,
                 [0, cst_H$0, [0, H[1][1][5], 0]],
                 [0, [0, cst_I, [0, I[1][1][5], 0]], 0]]]]]]]]]),
     _hl_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$17), 0, _hk_], 0],
     _hm_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_1275_10),
     group = caml_call2(Bin_prot_Shape[2], _hm_, _hl_),
     _hn_ = caml_call1(Bin_shape[2][1], cst_t$18),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _hn_), 0);
    function bin_size_t(param){
     switch(param[0]){
       case 0:
        var v1 = param[1], _hY_ = caml_call1(A[1][1][1], v1);
        return caml_call2(Bin_prot_Common[23], 1, _hY_);
       case 1:
        var v1$0 = param[1], _hZ_ = caml_call1(B[1][1][1], v1$0);
        return caml_call2(Bin_prot_Common[23], 1, _hZ_);
       case 2:
        var v1$1 = param[1], _h0_ = caml_call1(C[1][1][1], v1$1);
        return caml_call2(Bin_prot_Common[23], 1, _h0_);
       case 3:
        var v1$2 = param[1], _h1_ = caml_call1(D[1][1][1], v1$2);
        return caml_call2(Bin_prot_Common[23], 1, _h1_);
       case 4:
        var v1$3 = param[1], _h2_ = caml_call1(E[1][1][1], v1$3);
        return caml_call2(Bin_prot_Common[23], 1, _h2_);
       case 5:
        var v1$4 = param[1], _h3_ = caml_call1(F[1][1][1], v1$4);
        return caml_call2(Bin_prot_Common[23], 1, _h3_);
       case 6:
        var v1$5 = param[1], _h4_ = caml_call1(G[1][1][1], v1$5);
        return caml_call2(Bin_prot_Common[23], 1, _h4_);
       case 7:
        var v1$6 = param[1], _h5_ = caml_call1(H[1][1][1], v1$6);
        return caml_call2(Bin_prot_Common[23], 1, _h5_);
       default:
        var v1$7 = param[1], _h6_ = caml_call1(I[1][1][1], v1$7);
        return caml_call2(Bin_prot_Common[23], 1, _h6_);
     }
    }
    function bin_write_t(buf, pos, param){
     switch(param[0]){
       case 0:
        var
         v1 = param[1],
         pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
        return caml_call3(A[1][1][2], buf, pos$0, v1);
       case 1:
        var
         v1$0 = param[1],
         pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
        return caml_call3(B[1][1][2], buf, pos$1, v1$0);
       case 2:
        var
         v1$1 = param[1],
         pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
        return caml_call3(C[1][1][2], buf, pos$2, v1$1);
       case 3:
        var
         v1$2 = param[1],
         pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
        return caml_call3(D[1][1][2], buf, pos$3, v1$2);
       case 4:
        var
         v1$3 = param[1],
         pos$4 = caml_call3(Bin_prot_Write[30], buf, pos, 4);
        return caml_call3(E[1][1][2], buf, pos$4, v1$3);
       case 5:
        var
         v1$4 = param[1],
         pos$5 = caml_call3(Bin_prot_Write[30], buf, pos, 5);
        return caml_call3(F[1][1][2], buf, pos$5, v1$4);
       case 6:
        var
         v1$5 = param[1],
         pos$6 = caml_call3(Bin_prot_Write[30], buf, pos, 6);
        return caml_call3(G[1][1][2], buf, pos$6, v1$5);
       case 7:
        var
         v1$6 = param[1],
         pos$7 = caml_call3(Bin_prot_Write[30], buf, pos, 7);
        return caml_call3(H[1][1][2], buf, pos$7, v1$6);
       default:
        var
         v1$7 = param[1],
         pos$8 = caml_call3(Bin_prot_Write[30], buf, pos, 8);
        return caml_call3(I[1][1][2], buf, pos$8, v1$7);
     }
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19],
              cst_src_main_ml_Stable_Of_tupl$6,
              pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(8 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _$_, pos_ref[1]);
     switch(match){
       case 0:
        var arg_1 = caml_call2(A[1][1][3], buf, pos_ref); return [0, arg_1];
       case 1:
        var arg_1$0 = caml_call2(B[1][1][3], buf, pos_ref);
        return [1, arg_1$0];
       case 2:
        var arg_1$1 = caml_call2(C[1][1][3], buf, pos_ref);
        return [2, arg_1$1];
       case 3:
        var arg_1$2 = caml_call2(D[1][1][3], buf, pos_ref);
        return [3, arg_1$2];
       case 4:
        var arg_1$3 = caml_call2(E[1][1][3], buf, pos_ref);
        return [4, arg_1$3];
       case 5:
        var arg_1$4 = caml_call2(F[1][1][3], buf, pos_ref);
        return [5, arg_1$4];
       case 6:
        var arg_1$5 = caml_call2(G[1][1][3], buf, pos_ref);
        return [6, arg_1$5];
       case 7:
        var arg_1$6 = caml_call2(H[1][1][3], buf, pos_ref);
        return [7, arg_1$6];
       default:
        var arg_1$7 = caml_call2(I[1][1][3], buf, pos_ref);
        return [8, arg_1$7];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    function a(v0){return [0, v0];}
    function b(v0){return [1, v0];}
    function c(v0){return [2, v0];}
    function d(v0){return [3, v0];}
    function e(v0){return [4, v0];}
    function f(v0){return [5, v0];}
    function g(v0){return [6, v0];}
    function h(v0){return [7, v0];}
    function i(v0){return [8, v0];}
    function create(param){
     var
      _hQ_ = caml_call1(I[1][2], 0),
      _hR_ = caml_call1(H[1][2], 0),
      _hS_ = caml_call1(G[1][2], 0),
      _hT_ = caml_call1(F[1][2], 0),
      _hU_ = caml_call1(E[1][2], 0),
      _hV_ = caml_call1(D[1][2], 0),
      _hW_ = caml_call1(C[1][2], 0),
      _hX_ = caml_call1(B[1][2], 0);
     return [0,
             caml_call1(A[1][2], 0),
             _hX_,
             _hW_,
             _hV_,
             _hU_,
             _hT_,
             _hS_,
             _hR_,
             _hQ_];
    }
    function apply_part(_hP_, param){
     var
      i = _hP_[9],
      h = _hP_[8],
      g = _hP_[7],
      f = _hP_[6],
      e = _hP_[5],
      d = _hP_[4],
      c = _hP_[3],
      b = _hP_[2],
      a = _hP_[1];
     switch(param[0]){
       case 0:
        var x = param[1];
        return [0, caml_call2(A[1][3], a, x), b, c, d, e, f, g, h, i];
       case 1:
        var x$0 = param[1];
        return [0, a, caml_call2(B[1][3], b, x$0), c, d, e, f, g, h, i];
       case 2:
        var x$1 = param[1];
        return [0, a, b, caml_call2(C[1][3], c, x$1), d, e, f, g, h, i];
       case 3:
        var x$2 = param[1];
        return [0, a, b, c, caml_call2(D[1][3], d, x$2), e, f, g, h, i];
       case 4:
        var x$3 = param[1];
        return [0, a, b, c, d, caml_call2(E[1][3], e, x$3), f, g, h, i];
       case 5:
        var x$4 = param[1];
        return [0, a, b, c, d, e, caml_call2(F[1][3], f, x$4), g, h, i];
       case 6:
        var x$5 = param[1];
        return [0, a, b, c, d, e, f, caml_call2(G[1][3], g, x$5), h, i];
       case 7:
        var x$6 = param[1];
        return [0, a, b, c, d, e, f, g, caml_call2(H[1][3], h, x$6), i];
       default:
        var x$7 = param[1];
        return [0, a, b, c, d, e, f, g, h, caml_call2(I[1][3], i, x$7)];
     }
    }
    function to_parts(param){
     var
      i$0 = param[9],
      h$0 = param[8],
      g$0 = param[7],
      f$0 = param[6],
      e$0 = param[5],
      d$0 = param[4],
      c$0 = param[3],
      b$0 = param[2],
      a$0 = param[1],
      _hw_ = caml_call1(I[2], i$0),
      _hx_ = [0, caml_call2(Streamable_Import[4][41], _hw_, i), 0],
      _hy_ = caml_call1(H[2], h$0),
      _hz_ = [0, caml_call2(Streamable_Import[4][41], _hy_, h), _hx_],
      _hA_ = caml_call1(G[2], g$0),
      _hB_ = [0, caml_call2(Streamable_Import[4][41], _hA_, g), _hz_],
      _hC_ = caml_call1(F[2], f$0),
      _hD_ = [0, caml_call2(Streamable_Import[4][41], _hC_, f), _hB_],
      _hE_ = caml_call1(E[2], e$0),
      _hF_ = [0, caml_call2(Streamable_Import[4][41], _hE_, e), _hD_],
      _hG_ = caml_call1(D[2], d$0),
      _hH_ = [0, caml_call2(Streamable_Import[4][41], _hG_, d), _hF_],
      _hI_ = caml_call1(C[2], c$0),
      _hJ_ = [0, caml_call2(Streamable_Import[4][41], _hI_, c), _hH_],
      _hK_ = caml_call1(B[2], b$0),
      _hL_ = [0, caml_call2(Streamable_Import[4][41], _hK_, b), _hJ_],
      _hM_ = caml_call1(A[2], a$0),
      _hN_ = [0, caml_call2(Streamable_Import[4][41], _hM_, a), _hL_],
      _hO_ = caml_call1(Streamable_Import[4][109], _hN_);
     return caml_call1(Streamable_Import[4][70], _hO_);
    }
    function finalize(param){
     var
      i = param[9],
      h = param[8],
      g = param[7],
      f = param[6],
      e = param[5],
      d = param[4],
      c = param[3],
      b = param[2],
      a = param[1],
      _ho_ = caml_call1(I[3], i),
      _hp_ = caml_call1(H[3], h),
      _hq_ = caml_call1(G[3], g),
      _hr_ = caml_call1(F[3], f),
      _hs_ = caml_call1(E[3], e),
      _ht_ = caml_call1(D[3], d),
      _hu_ = caml_call1(C[3], c),
      _hv_ = caml_call1(B[3], b);
     return [0,
             caml_call1(A[3], a),
             _hv_,
             _hu_,
             _ht_,
             _hs_,
             _hr_,
             _hq_,
             _hp_,
             _ho_];
    }
    return [0,
            [0,
             [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t],
             create,
             apply_part],
            to_parts,
            finalize];
   }
   var
    Of_tuple9_rpc = [0, V1$29],
    _aa_ = [0, cst_A$7],
    _ab_ = [0, cst_B$7],
    _ac_ = [0, cst_C$6],
    _ad_ = [0, cst_D$5],
    _ae_ = [0, cst_E$4],
    _af_ = [0, cst_F$3],
    _ag_ = [0, cst_G$2],
    _ah_ = [0, cst_H$1],
    _ai_ = [0, cst_I$0];
   function V1$30(A, B, C, D, E, F, G, H, I){
    var
     _gR_ = I[1],
     _gS_ = _gR_[1],
     _gU_ = H[1],
     _gV_ = _gU_[1],
     _gX_ = G[1],
     _gY_ = _gX_[1],
     _g0_ = F[1],
     _g1_ = _g0_[1],
     _g3_ = E[1],
     _g4_ = _g3_[1],
     _g6_ = D[1],
     _g7_ = _g6_[1],
     _g9_ = C[1],
     _g__ = _g9_[1],
     _ha_ = B[1],
     _hb_ = _ha_[1],
     _hd_ = A[1],
     _he_ = _hd_[1],
     _gT_ =
       [0,
        [0,
         [0,
          _gS_[1],
          _gS_[2],
          _gS_[3],
          _gS_[4],
          _gS_[5],
          _gS_[6],
          _gS_[7],
          _gS_[8]],
         _gR_[2],
         _gR_[3]],
        I[2],
        I[3]],
     _gW_ =
       [0,
        [0,
         [0,
          _gV_[1],
          _gV_[2],
          _gV_[3],
          _gV_[4],
          _gV_[5],
          _gV_[6],
          _gV_[7],
          _gV_[8]],
         _gU_[2],
         _gU_[3]],
        H[2],
        H[3]],
     _gZ_ =
       [0,
        [0,
         [0,
          _gY_[1],
          _gY_[2],
          _gY_[3],
          _gY_[4],
          _gY_[5],
          _gY_[6],
          _gY_[7],
          _gY_[8]],
         _gX_[2],
         _gX_[3]],
        G[2],
        G[3]],
     _g2_ =
       [0,
        [0,
         [0,
          _g1_[1],
          _g1_[2],
          _g1_[3],
          _g1_[4],
          _g1_[5],
          _g1_[6],
          _g1_[7],
          _g1_[8]],
         _g0_[2],
         _g0_[3]],
        F[2],
        F[3]],
     _g5_ =
       [0,
        [0,
         [0,
          _g4_[1],
          _g4_[2],
          _g4_[3],
          _g4_[4],
          _g4_[5],
          _g4_[6],
          _g4_[7],
          _g4_[8]],
         _g3_[2],
         _g3_[3]],
        E[2],
        E[3]],
     _g8_ =
       [0,
        [0,
         [0,
          _g7_[1],
          _g7_[2],
          _g7_[3],
          _g7_[4],
          _g7_[5],
          _g7_[6],
          _g7_[7],
          _g7_[8]],
         _g6_[2],
         _g6_[3]],
        D[2],
        D[3]],
     _g$_ =
       [0,
        [0,
         [0,
          _g__[1],
          _g__[2],
          _g__[3],
          _g__[4],
          _g__[5],
          _g__[6],
          _g__[7],
          _g__[8]],
         _g9_[2],
         _g9_[3]],
        C[2],
        C[3]],
     _hc_ =
       [0,
        [0,
         [0,
          _hb_[1],
          _hb_[2],
          _hb_[3],
          _hb_[4],
          _hb_[5],
          _hb_[6],
          _hb_[7],
          _hb_[8]],
         _ha_[2],
         _ha_[3]],
        B[2],
        B[3]],
     Plain =
       caml_call1
        (caml_call1
          (caml_call1
            (caml_call1
              (caml_call1
                (caml_call1
                  (caml_call1
                    (caml_call1
                      (caml_call1
                        (Of_tuple9_rpc[1],
                         [0,
                          [0,
                           [0,
                            _he_[1],
                            _he_[2],
                            _he_[3],
                            _he_[4],
                            _he_[5],
                            _he_[6],
                            _he_[7],
                            _he_[8]],
                           _hd_[2],
                           _hd_[3]],
                          A[2],
                          A[3]]),
                       _hc_),
                     _g$_),
                   _g8_),
                 _g5_),
               _g2_),
             _gZ_),
           _gW_),
         _gT_);
    function t_of_sexp(sexp_299){
     a:
     {
      if(0 === sexp_299[0]){
       var _hf_ = sexp_299[1], _hg_ = caml_string_compare(_hf_, cst_a);
       b:
       {
        c:
        {
         d:
         {
          e:
          {
           f:
           {
            g:
            {
             h:
             {
              i:
              {
               if(0 <= _hg_){
                if(0 < _hg_){
                 if(_hf_ === cst_b) break i;
                 if(_hf_ === cst_c) break h;
                 if(_hf_ === cst_d) break g;
                 if(_hf_ === cst_e) break f;
                 if(_hf_ === cst_f) break e;
                 if(_hf_ === cst_g) break d;
                 if(_hf_ === cst_h) break c;
                 if(_hf_ !== cst_i) break a;
                 break b;
                }
               }
               else if(_hf_ !== cst_A$7){
                if(_hf_ === cst_B$7) break i;
                if(_hf_ === cst_C$6) break h;
                if(_hf_ === cst_D$5) break g;
                if(_hf_ === cst_E$4) break f;
                if(_hf_ === cst_F$3) break e;
                if(_hf_ === cst_G$2) break d;
                if(_hf_ === cst_H$1) break c;
                if(_hf_ !== cst_I$0) break a;
                break b;
               }
               return caml_call2
                       (Sexplib0_Sexp_conv_error[5], error_source_297, sexp_299);
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[5], error_source_297, sexp_299);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5], error_source_297, sexp_299);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[5], error_source_297, sexp_299);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5], error_source_297, sexp_299);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[5], error_source_297, sexp_299);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5], error_source_297, sexp_299);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_297, sexp_299);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_297, sexp_299);
      }
      var _hh_ = sexp_299[1];
      if(! _hh_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_297, sexp_299);
      var _hi_ = _hh_[1];
      if(0 !== _hi_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[6], error_source_297, sexp_299);
      var tag_300 = _hi_[1], _hj_ = caml_string_compare(tag_300, cst_a);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              if(0 <= _hj_){
               if(0 < _hj_){
                if(tag_300 === cst_b) break i;
                if(tag_300 === cst_c) break h;
                if(tag_300 === cst_d) break g;
                if(tag_300 === cst_e) break f;
                if(tag_300 === cst_f) break e;
                if(tag_300 === cst_g) break d;
                if(tag_300 === cst_h) break c;
                if(tag_300 !== cst_i) break a;
                break b;
               }
              }
              else if(tag_300 !== cst_A$7){
               if(tag_300 === cst_B$7) break i;
               if(tag_300 === cst_C$6) break h;
               if(tag_300 === cst_D$5) break g;
               if(tag_300 === cst_E$4) break f;
               if(tag_300 === cst_F$3) break e;
               if(tag_300 === cst_G$2) break d;
               if(tag_300 === cst_H$1) break c;
               if(tag_300 !== cst_I$0) break a;
               break b;
              }
              var sexp_args_301 = _hh_[2];
              if(sexp_args_301 && ! sexp_args_301[2]){
               var
                arg0_302 = sexp_args_301[1],
                res0_303 = caml_call1(A[1][1][9], arg0_302);
               return [0, res0_303];
              }
              return caml_call3
                      (Sexplib0_Sexp_conv_error[4],
                       error_source_297,
                       tag_300,
                       sexp_299);
             }
             var sexp_args_306 = _hh_[2];
             if(sexp_args_306 && ! sexp_args_306[2]){
              var
               arg0_307 = sexp_args_306[1],
               res0_308 = caml_call1(B[1][1][9], arg0_307);
              return [1, res0_308];
             }
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],
                      error_source_297,
                      tag_300,
                      sexp_299);
            }
            var sexp_args_311 = _hh_[2];
            if(sexp_args_311 && ! sexp_args_311[2]){
             var
              arg0_312 = sexp_args_311[1],
              res0_313 = caml_call1(C[1][1][9], arg0_312);
             return [2, res0_313];
            }
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],
                     error_source_297,
                     tag_300,
                     sexp_299);
           }
           var sexp_args_316 = _hh_[2];
           if(sexp_args_316 && ! sexp_args_316[2]){
            var
             arg0_317 = sexp_args_316[1],
             res0_318 = caml_call1(D[1][1][9], arg0_317);
            return [3, res0_318];
           }
           return caml_call3
                   (Sexplib0_Sexp_conv_error[4],
                    error_source_297,
                    tag_300,
                    sexp_299);
          }
          var sexp_args_321 = _hh_[2];
          if(sexp_args_321 && ! sexp_args_321[2]){
           var
            arg0_322 = sexp_args_321[1],
            res0_323 = caml_call1(E[1][1][9], arg0_322);
           return [4, res0_323];
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4],
                   error_source_297,
                   tag_300,
                   sexp_299);
         }
         var sexp_args_326 = _hh_[2];
         if(sexp_args_326 && ! sexp_args_326[2]){
          var
           arg0_327 = sexp_args_326[1],
           res0_328 = caml_call1(F[1][1][9], arg0_327);
          return [5, res0_328];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[4],
                  error_source_297,
                  tag_300,
                  sexp_299);
        }
        var sexp_args_331 = _hh_[2];
        if(sexp_args_331 && ! sexp_args_331[2]){
         var
          arg0_332 = sexp_args_331[1],
          res0_333 = caml_call1(G[1][1][9], arg0_332);
         return [6, res0_333];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[4],
                 error_source_297,
                 tag_300,
                 sexp_299);
       }
       var sexp_args_336 = _hh_[2];
       if(sexp_args_336 && ! sexp_args_336[2]){
        var
         arg0_337 = sexp_args_336[1],
         res0_338 = caml_call1(H[1][1][9], arg0_337);
        return [7, res0_338];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_297,
                tag_300,
                sexp_299);
      }
      var sexp_args_341 = _hh_[2];
      if(sexp_args_341 && ! sexp_args_341[2]){
       var
        arg0_342 = sexp_args_341[1],
        res0_343 = caml_call1(I[1][1][9], arg0_342);
       return [8, res0_343];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_297,
               tag_300,
               sexp_299);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[8], error_source_297, sexp_299);
    }
    function sexp_of_t(param){
     switch(param[0]){
       case 0:
        var arg0_344 = param[1], res0_345 = caml_call1(A[1][1][10], arg0_344);
        return [1, [0, _aa_, [0, res0_345, 0]]];
       case 1:
        var arg0_346 = param[1], res0_347 = caml_call1(B[1][1][10], arg0_346);
        return [1, [0, _ab_, [0, res0_347, 0]]];
       case 2:
        var arg0_348 = param[1], res0_349 = caml_call1(C[1][1][10], arg0_348);
        return [1, [0, _ac_, [0, res0_349, 0]]];
       case 3:
        var arg0_350 = param[1], res0_351 = caml_call1(D[1][1][10], arg0_350);
        return [1, [0, _ad_, [0, res0_351, 0]]];
       case 4:
        var arg0_352 = param[1], res0_353 = caml_call1(E[1][1][10], arg0_352);
        return [1, [0, _ae_, [0, res0_353, 0]]];
       case 5:
        var arg0_354 = param[1], res0_355 = caml_call1(F[1][1][10], arg0_354);
        return [1, [0, _af_, [0, res0_355, 0]]];
       case 6:
        var arg0_356 = param[1], res0_357 = caml_call1(G[1][1][10], arg0_356);
        return [1, [0, _ag_, [0, res0_357, 0]]];
       case 7:
        var arg0_358 = param[1], res0_359 = caml_call1(H[1][1][10], arg0_358);
        return [1, [0, _ah_, [0, res0_359, 0]]];
       default:
        var arg0_360 = param[1], res0_361 = caml_call1(I[1][1][10], arg0_360);
        return [1, [0, _ai_, [0, res0_361, 0]]];
     }
    }
    var
     include = V1(Plain, [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, Intermediate, to_parts, finalize];
   }
   var
    Of_tuple9 = [0, V1$30],
    cst_B_part = cst_B_part$2,
    _aj_ = [0, cst_B_start, 0],
    cst_A_part = cst_A_part$2,
    _ak_ = [0, cst_A_start, 0],
    cst_t$19 = cst_t$31,
    cst_src_main_ml_1383_10 = "src/main.ml:1383:10",
    cst_t$20 = cst_t$31,
    cst_src_main_ml_Stable_Of_vari = cst_src_main_ml_Stable_Of_vari$4,
    _al_ = [1, cst_src_main_ml_Stable_Of_vari$4],
    _am_ = [0, cst_src_main_ml, 1399, 31],
    _an_ = [0, cst_src_main_ml, 1415, 32],
    _ao_ = [0, cst_A_start],
    _ap_ = [0, cst_B_start],
    _aq_ = [0, cst_A_part$2],
    _ar_ = [0, cst_B_part$2],
    cst_C_part = cst_C_part$1,
    _as_ = [0, cst_C_start, 0],
    cst_B_part$0 = cst_B_part$2,
    _at_ = [0, cst_B_start, 0],
    cst_A_part$0 = cst_A_part$2,
    _au_ = [0, cst_A_start, 0],
    cst_t$21 = cst_t$31,
    cst_src_main_ml_1456_10 = "src/main.ml:1456:10",
    cst_t$22 = cst_t$31,
    cst_src_main_ml_Stable_Of_vari$0 = cst_src_main_ml_Stable_Of_vari$3,
    _av_ = [1, cst_src_main_ml_Stable_Of_vari$3],
    _aw_ = [0, cst_src_main_ml, 1476, 31],
    _ax_ = [0, cst_src_main_ml, 1496, 32],
    _ay_ = [0, cst_A_start],
    _az_ = [0, cst_B_start],
    _aA_ = [0, cst_C_start],
    _aB_ = [0, cst_A_part$2],
    _aC_ = [0, cst_B_part$2],
    _aD_ = [0, cst_C_part$1],
    cst_D_part = cst_D_part$0,
    _aE_ = [0, cst_D_start, 0],
    cst_C_part$0 = cst_C_part$1,
    _aF_ = [0, cst_C_start, 0],
    cst_B_part$1 = cst_B_part$2,
    _aG_ = [0, cst_B_start, 0],
    cst_A_part$1 = cst_A_part$2,
    _aH_ = [0, cst_A_start, 0],
    cst_t$23 = cst_t$31,
    cst_src_main_ml_1542_10 = "src/main.ml:1542:10",
    cst_t$24 = cst_t$31,
    cst_src_main_ml_Stable_Of_vari$1 = cst_src_main_ml_Stable_Of_vari$2,
    _aI_ = [1, cst_src_main_ml_Stable_Of_vari$2],
    _aJ_ = [0, cst_src_main_ml, 1566, 31],
    _aK_ = [0, cst_src_main_ml, 1590, 32],
    _aL_ = [0, cst_A_start],
    _aM_ = [0, cst_B_start],
    _aN_ = [0, cst_C_start],
    _aO_ = [0, cst_D_start],
    _aP_ = [0, cst_A_part$2],
    _aQ_ = [0, cst_B_part$2],
    _aR_ = [0, cst_C_part$1],
    _aS_ = [0, cst_D_part$0],
    cst_Elt_later_part = cst_Elt_later_part$0,
    cst_Elt_first_part = cst_Elt_first_part$0,
    _aT_ = [0, cst_Elt_no_parts, 0],
    cst_t$25 = cst_t$31,
    cst_src_main_ml_1636_10 = "src/main.ml:1636:10",
    cst_t$26 = cst_t$31,
    cst_src_main_ml_Stable_Of_list = cst_src_main_ml_Stable_Of_list$2,
    _aU_ = [1, cst_src_main_ml_Stable_Of_list$2],
    _aV_ = [0, cst_src_main_ml, 1655, 30],
    _aW_ = [0, cst_Elt_no_parts],
    _aX_ = [0, cst_Elt_first_part$0],
    _aY_ = [0, cst_Elt_later_part$0],
    cst_Elt_part = cst_Elt_part$1,
    _aZ_ = [0, cst_Elt_start, 0],
    cst_t$27 = cst_t$31,
    cst_src_main_ml_1713_10 = "src/main.ml:1713:10",
    cst_t$28 = cst_t$31,
    cst_src_main_ml_Stable_Of_list$0 = cst_src_main_ml_Stable_Of_list$1,
    _a0_ = [1, cst_src_main_ml_Stable_Of_list$1],
    _a1_ = [0, cst_src_main_ml, 1732, 33];
   function V1$31(A, B){
    var
     _gF_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          _ak_,
          [0,
           [0, cst_A_part, [0, A[1][1][5], 0]],
           [0, _aj_, [0, [0, cst_B_part, [0, B[1][1][5], 0]], 0]]]]),
     _gG_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$19), 0, _gF_], 0],
     _gH_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_1383_10),
     group = caml_call2(Bin_prot_Shape[2], _gH_, _gG_),
     _gI_ = caml_call1(Bin_shape[2][1], cst_t$20),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _gI_), 0);
    function bin_size_t(param){
     if(typeof param === "number") return 1;
     if(0 === param[0]){
      var v1 = param[1], _gP_ = caml_call1(A[1][1][1], v1);
      return caml_call2(Bin_prot_Common[23], 1, _gP_);
     }
     var v1$0 = param[1], _gQ_ = caml_call1(B[1][1][1], v1$0);
     return caml_call2(Bin_prot_Common[23], 1, _gQ_);
    }
    function bin_write_t(buf, pos, param){
     if(typeof param === "number")
      return 0 === param
              ? caml_call3(Bin_prot_Write[30], buf, pos, 0)
              : caml_call3(Bin_prot_Write[30], buf, pos, 2);
     if(0 === param[0]){
      var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
      return caml_call3(A[1][1][2], buf, pos$0, v1);
     }
     var v1$0 = param[1], pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
     return caml_call3(B[1][1][2], buf, pos$1, v1$0);
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19], cst_src_main_ml_Stable_Of_vari, pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(3 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _al_, pos_ref[1]);
     switch(match){
       case 0:
        return 0;
       case 1:
        var arg_1 = caml_call2(A[1][1][3], buf, pos_ref); return [0, arg_1];
       case 2:
        return 1;
       default:
        var arg_1$0 = caml_call2(B[1][1][3], buf, pos_ref);
        return [1, arg_1$0];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    function a_part(v0){return [0, v0];}
    function b_part(v0){return [1, v0];}
    var
     Part =
       [0,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_writer_t,
        bin_read_t,
        bin_read_t$0,
        bin_reader_t,
        bin_t,
        0,
        a_part,
        1,
        b_part];
    function create(param){return 0;}
    function apply_part(t, part){
     if(typeof t === "number"){
      if(typeof part === "number")
       return part ? [1, caml_call1(B[1][2], 0)] : [0, caml_call1(A[1][2], 0)];
     }
     else
      if(0 === t[0]){
       if(typeof part !== "number" && 0 === part[0]){
        var x = part[1], a = t[1];
        return [0, caml_call2(A[1][3], a, x)];
       }
      }
      else if(typeof part !== "number" && 1 === part[0]){
       var x$0 = part[1], b = t[1];
       return [1, caml_call2(B[1][3], b, x$0)];
      }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _am_], 1);
    }
    var Intermediate = [0, Part, create, apply_part];
    function to_parts(param){
     if(66 <= param[1]){
      var
       b = param[2],
       _gJ_ = Intermediate[1][12],
       _gK_ = caml_call1(B[2], b),
       _gL_ = caml_call2(Streamable_Import[4][41], _gK_, _gJ_);
      return caml_call2(Streamable_Import[4][118], Intermediate[1][11], _gL_);
     }
     var
      a = param[2],
      _gM_ = Intermediate[1][10],
      _gN_ = caml_call1(A[2], a),
      _gO_ = caml_call2(Streamable_Import[4][41], _gN_, _gM_);
     return caml_call2(Streamable_Import[4][118], Intermediate[1][9], _gO_);
    }
    function finalize(param){
     if(typeof param === "number")
      throw caml_maybe_attach_backtrace([0, Assert_failure, _an_], 1);
     if(0 === param[0]){
      var a = param[1];
      return [0, 65, caml_call1(A[3], a)];
     }
     var b = param[1];
     return [0, 66, caml_call1(B[3], b)];
    }
    return [0, Intermediate, to_parts, finalize];
   }
   function V1$32(A, B){
    var
     _gw_ = B[1],
     _gx_ = _gw_[1],
     _gy_ = A[1],
     _gz_ = _gy_[1],
     Plain =
       V1$31
        ([0,
          [0,
           [0,
            _gz_[1],
            _gz_[2],
            _gz_[3],
            _gz_[4],
            _gz_[5],
            _gz_[6],
            _gz_[7],
            _gz_[8]],
           _gy_[2],
           _gy_[3]],
          A[2],
          A[3]],
         [0,
          [0,
           [0,
            _gx_[1],
            _gx_[2],
            _gx_[3],
            _gx_[4],
            _gx_[5],
            _gx_[6],
            _gx_[7],
            _gx_[8]],
           _gw_[2],
           _gw_[3]],
          B[2],
          B[3]]);
    function t_of_sexp(sexp_366){
     a:
     {
      if(0 === sexp_366[0]){
       var _gC_ = sexp_366[1];
       b:
       if(_gC_ !== cst_A_part$2){
        c:
        if(_gC_ !== cst_A_start){
         d:
         if(_gC_ !== cst_B_part$2){
          if(_gC_ !== cst_B_start){
           if(_gC_ === cst_a_part) break b;
           if(_gC_ === cst_a_start) break c;
           if(_gC_ === cst_b_part) break d;
           if(_gC_ !== cst_b_start) break a;
          }
          return 1;
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5], error_source_364, sexp_366);
        }
        return 0;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_364, sexp_366);
      }
      var _gD_ = sexp_366[1];
      if(! _gD_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_364, sexp_366);
      var _gE_ = _gD_[1];
      if(0 !== _gE_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[6], error_source_364, sexp_366);
      var tag_367 = _gE_[1];
      b:
      if(tag_367 !== cst_A_part$2){
       c:
       if(tag_367 !== cst_A_start){
        d:
        if(tag_367 !== cst_B_part$2){
         if(tag_367 !== cst_B_start){
          if(tag_367 === cst_a_part) break b;
          if(tag_367 === cst_a_start) break c;
          if(tag_367 === cst_b_part) break d;
          if(tag_367 !== cst_b_start) break a;
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[3], error_source_364, sexp_366);
        }
        var sexp_args_373 = _gD_[2];
        if(sexp_args_373 && ! sexp_args_373[2]){
         var
          arg0_374 = sexp_args_373[1],
          res0_375 = caml_call1(B[1][1][9], arg0_374);
         return [1, res0_375];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[4],
                 error_source_364,
                 tag_367,
                 sexp_366);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[3], error_source_364, sexp_366);
      }
      var sexp_args_368 = _gD_[2];
      if(sexp_args_368 && ! sexp_args_368[2]){
       var
        arg0_369 = sexp_args_368[1],
        res0_370 = caml_call1(A[1][1][9], arg0_369);
       return [0, res0_370];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_364,
               tag_367,
               sexp_366);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[8], error_source_364, sexp_366);
    }
    function sexp_of_t(param){
     if(typeof param === "number") return 0 === param ? _ao_ : _ap_;
     if(0 === param[0]){
      var arg0_376 = param[1], res0_377 = caml_call1(A[1][1][10], arg0_376);
      return [1, [0, _aq_, [0, res0_377, 0]]];
     }
     var arg0_378 = param[1], res0_379 = caml_call1(B[1][1][10], arg0_378);
     return [1, [0, _ar_, [0, res0_379, 0]]];
    }
    var
     _gA_ = Plain[1],
     _gB_ = _gA_[1],
     include =
       V1
        ([0,
          [0,
           [0,
            _gB_[2],
            _gB_[3],
            _gB_[6],
            _gB_[5],
            _gB_[1],
            _gB_[4],
            _gB_[7],
            _gB_[8]],
           _gA_[2],
           _gA_[3]],
          Plain[2],
          Plain[3]],
         [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, , Intermediate, to_parts, finalize];
   }
   function V1$33(A, B, C){
    var
     _gg_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          _au_,
          [0,
           [0, cst_A_part$0, [0, A[1][1][5], 0]],
           [0,
            _at_,
            [0,
             [0, cst_B_part$0, [0, B[1][1][5], 0]],
             [0, _as_, [0, [0, cst_C_part, [0, C[1][1][5], 0]], 0]]]]]]),
     _gh_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$21), 0, _gg_], 0],
     _gi_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_1456_10),
     group = caml_call2(Bin_prot_Shape[2], _gi_, _gh_),
     _gj_ = caml_call1(Bin_shape[2][1], cst_t$22),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _gj_), 0);
    function bin_size_t(param){
     if(typeof param === "number") return 1;
     switch(param[0]){
       case 0:
        var v1 = param[1], _gt_ = caml_call1(A[1][1][1], v1);
        return caml_call2(Bin_prot_Common[23], 1, _gt_);
       case 1:
        var v1$0 = param[1], _gu_ = caml_call1(B[1][1][1], v1$0);
        return caml_call2(Bin_prot_Common[23], 1, _gu_);
       default:
        var v1$1 = param[1], _gv_ = caml_call1(C[1][1][1], v1$1);
        return caml_call2(Bin_prot_Common[23], 1, _gv_);
     }
    }
    function bin_write_t(buf, pos, param){
     if(typeof param === "number")
      switch(param){
        case 0:
         return caml_call3(Bin_prot_Write[30], buf, pos, 0);
        case 1:
         return caml_call3(Bin_prot_Write[30], buf, pos, 2);
        default: return caml_call3(Bin_prot_Write[30], buf, pos, 4);
      }
     switch(param[0]){
       case 0:
        var
         v1 = param[1],
         pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
        return caml_call3(A[1][1][2], buf, pos$0, v1);
       case 1:
        var
         v1$0 = param[1],
         pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
        return caml_call3(B[1][1][2], buf, pos$1, v1$0);
       default:
        var
         v1$1 = param[1],
         pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 5);
        return caml_call3(C[1][1][2], buf, pos$2, v1$1);
     }
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19],
              cst_src_main_ml_Stable_Of_vari$0,
              pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(5 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _av_, pos_ref[1]);
     switch(match){
       case 0:
        return 0;
       case 1:
        var arg_1 = caml_call2(A[1][1][3], buf, pos_ref); return [0, arg_1];
       case 2:
        return 1;
       case 3:
        var arg_1$0 = caml_call2(B[1][1][3], buf, pos_ref);
        return [1, arg_1$0];
       case 4:
        return 2;
       default:
        var arg_1$1 = caml_call2(C[1][1][3], buf, pos_ref);
        return [2, arg_1$1];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    function a_part(v0){return [0, v0];}
    function b_part(v0){return [1, v0];}
    function c_part(v0){return [2, v0];}
    var
     Part =
       [0,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_writer_t,
        bin_read_t,
        bin_read_t$0,
        bin_reader_t,
        bin_t,
        0,
        a_part,
        1,
        b_part,
        2,
        c_part];
    function create(param){return 0;}
    function apply_part(t, part){
     if(typeof t === "number"){
      if(typeof part === "number")
       switch(part){
         case 0:
          return [0, caml_call1(A[1][2], 0)];
         case 1:
          return [1, caml_call1(B[1][2], 0)];
         default: return [2, caml_call1(C[1][2], 0)];
       }
     }
     else
      switch(t[0]){
        case 0:
         if(typeof part !== "number" && 0 === part[0]){
          var x = part[1], a = t[1];
          return [0, caml_call2(A[1][3], a, x)];
         }
         break;
        case 1:
         if(typeof part !== "number" && 1 === part[0]){
          var x$0 = part[1], b = t[1];
          return [1, caml_call2(B[1][3], b, x$0)];
         }
         break;
        default:
         if(typeof part !== "number" && 2 === part[0]){
          var x$1 = part[1], c = t[1];
          return [2, caml_call2(C[1][3], c, x$1)];
         }
      }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _aw_], 1);
    }
    var Intermediate = [0, Part, create, apply_part];
    function to_parts(param){
     switch(param[1] - 65 | 0){
       case 0:
        var
         a = param[2],
         _gk_ = Intermediate[1][10],
         _gl_ = caml_call1(A[2], a),
         _gm_ = caml_call2(Streamable_Import[4][41], _gl_, _gk_);
        return caml_call2(Streamable_Import[4][118], Intermediate[1][9], _gm_);
       case 1:
        var
         b = param[2],
         _gn_ = Intermediate[1][12],
         _go_ = caml_call1(B[2], b),
         _gp_ = caml_call2(Streamable_Import[4][41], _go_, _gn_);
        return caml_call2
                (Streamable_Import[4][118], Intermediate[1][11], _gp_);
       default:
        var
         c = param[2],
         _gq_ = Intermediate[1][14],
         _gr_ = caml_call1(C[2], c),
         _gs_ = caml_call2(Streamable_Import[4][41], _gr_, _gq_);
        return caml_call2
                (Streamable_Import[4][118], Intermediate[1][13], _gs_);
     }
    }
    function finalize(param){
     if(typeof param === "number")
      throw caml_maybe_attach_backtrace([0, Assert_failure, _ax_], 1);
     switch(param[0]){
       case 0:
        var a = param[1]; return [0, 65, caml_call1(A[3], a)];
       case 1:
        var b = param[1]; return [0, 66, caml_call1(B[3], b)];
       default: var c = param[1]; return [0, 67, caml_call1(C[3], c)];
     }
    }
    return [0, Intermediate, to_parts, finalize];
   }
   function V1$34(A, B, C){
    var
     _f5_ = C[1],
     _f6_ = _f5_[1],
     _f7_ = B[1],
     _f8_ = _f7_[1],
     _f9_ = A[1],
     _f__ = _f9_[1],
     Plain =
       V1$33
        ([0,
          [0,
           [0,
            _f__[1],
            _f__[2],
            _f__[3],
            _f__[4],
            _f__[5],
            _f__[6],
            _f__[7],
            _f__[8]],
           _f9_[2],
           _f9_[3]],
          A[2],
          A[3]],
         [0,
          [0,
           [0,
            _f8_[1],
            _f8_[2],
            _f8_[3],
            _f8_[4],
            _f8_[5],
            _f8_[6],
            _f8_[7],
            _f8_[8]],
           _f7_[2],
           _f7_[3]],
          B[2],
          B[3]],
         [0,
          [0,
           [0,
            _f6_[1],
            _f6_[2],
            _f6_[3],
            _f6_[4],
            _f6_[5],
            _f6_[6],
            _f6_[7],
            _f6_[8]],
           _f5_[2],
           _f5_[3]],
          C[2],
          C[3]]);
    function t_of_sexp(sexp_384){
     a:
     {
      if(0 === sexp_384[0]){
       var _gb_ = sexp_384[1], _gc_ = caml_string_compare(_gb_, cst_a_part);
       b:
       {
        c:
        {
         d:
         {
          e:
          {
           f:
           {
            if(0 <= _gc_){
             if(0 < _gc_){
              if(_gb_ === cst_a_start) break f;
              if(_gb_ === cst_b_part) break e;
              if(_gb_ === cst_b_start) break d;
              if(_gb_ === cst_c_part) break c;
              if(_gb_ !== cst_c_start) break a;
              break b;
             }
            }
            else if(_gb_ !== cst_A_part$2){
             if(_gb_ === cst_A_start) break f;
             if(_gb_ === cst_B_part$2) break e;
             if(_gb_ === cst_B_start) break d;
             if(_gb_ === cst_C_part$1) break c;
             if(_gb_ !== cst_C_start) break a;
             break b;
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[5], error_source_382, sexp_384);
           }
           return 0;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[5], error_source_382, sexp_384);
         }
         return 1;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_382, sexp_384);
       }
       return 2;
      }
      var _gd_ = sexp_384[1];
      if(! _gd_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_382, sexp_384);
      var _ge_ = _gd_[1];
      if(0 !== _ge_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[6], error_source_382, sexp_384);
      var tag_385 = _ge_[1], _gf_ = caml_string_compare(tag_385, cst_a_part);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           if(0 <= _gf_){
            if(0 < _gf_){
             if(tag_385 === cst_a_start) break f;
             if(tag_385 === cst_b_part) break e;
             if(tag_385 === cst_b_start) break d;
             if(tag_385 === cst_c_part) break c;
             if(tag_385 !== cst_c_start) break a;
             break b;
            }
           }
           else if(tag_385 !== cst_A_part$2){
            if(tag_385 === cst_A_start) break f;
            if(tag_385 === cst_B_part$2) break e;
            if(tag_385 === cst_B_start) break d;
            if(tag_385 === cst_C_part$1) break c;
            if(tag_385 !== cst_C_start) break a;
            break b;
           }
           var sexp_args_386 = _gd_[2];
           if(sexp_args_386 && ! sexp_args_386[2]){
            var
             arg0_387 = sexp_args_386[1],
             res0_388 = caml_call1(A[1][1][9], arg0_387);
            return [0, res0_388];
           }
           return caml_call3
                   (Sexplib0_Sexp_conv_error[4],
                    error_source_382,
                    tag_385,
                    sexp_384);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[3], error_source_382, sexp_384);
         }
         var sexp_args_391 = _gd_[2];
         if(sexp_args_391 && ! sexp_args_391[2]){
          var
           arg0_392 = sexp_args_391[1],
           res0_393 = caml_call1(B[1][1][9], arg0_392);
          return [1, res0_393];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[4],
                  error_source_382,
                  tag_385,
                  sexp_384);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[3], error_source_382, sexp_384);
       }
       var sexp_args_396 = _gd_[2];
       if(sexp_args_396 && ! sexp_args_396[2]){
        var
         arg0_397 = sexp_args_396[1],
         res0_398 = caml_call1(C[1][1][9], arg0_397);
        return [2, res0_398];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_382,
                tag_385,
                sexp_384);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[3], error_source_382, sexp_384);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[8], error_source_382, sexp_384);
    }
    function sexp_of_t(param){
     if(typeof param === "number")
      switch(param){
        case 0:
         return _ay_;
        case 1:
         return _az_;
        default: return _aA_;
      }
     switch(param[0]){
       case 0:
        var arg0_399 = param[1], res0_400 = caml_call1(A[1][1][10], arg0_399);
        return [1, [0, _aB_, [0, res0_400, 0]]];
       case 1:
        var arg0_401 = param[1], res0_402 = caml_call1(B[1][1][10], arg0_401);
        return [1, [0, _aC_, [0, res0_402, 0]]];
       default:
        var arg0_403 = param[1], res0_404 = caml_call1(C[1][1][10], arg0_403);
        return [1, [0, _aD_, [0, res0_404, 0]]];
     }
    }
    var
     _f$_ = Plain[1],
     _ga_ = _f$_[1],
     include =
       V1
        ([0,
          [0,
           [0,
            _ga_[2],
            _ga_[3],
            _ga_[6],
            _ga_[5],
            _ga_[1],
            _ga_[4],
            _ga_[7],
            _ga_[8]],
           _f$_[2],
           _f$_[3]],
          Plain[2],
          Plain[3]],
         [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, , Intermediate, to_parts, finalize];
   }
   function V1$35(A, B, C, D){
    var
     _fL_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          _aH_,
          [0,
           [0, cst_A_part$1, [0, A[1][1][5], 0]],
           [0,
            _aG_,
            [0,
             [0, cst_B_part$1, [0, B[1][1][5], 0]],
             [0,
              _aF_,
              [0,
               [0, cst_C_part$0, [0, C[1][1][5], 0]],
               [0, _aE_, [0, [0, cst_D_part, [0, D[1][1][5], 0]], 0]]]]]]]]),
     _fM_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$23), 0, _fL_], 0],
     _fN_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_1542_10),
     group = caml_call2(Bin_prot_Shape[2], _fN_, _fM_),
     _fO_ = caml_call1(Bin_shape[2][1], cst_t$24),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _fO_), 0);
    function bin_size_t(param){
     if(typeof param === "number") return 1;
     switch(param[0]){
       case 0:
        var v1 = param[1], _f1_ = caml_call1(A[1][1][1], v1);
        return caml_call2(Bin_prot_Common[23], 1, _f1_);
       case 1:
        var v1$0 = param[1], _f2_ = caml_call1(B[1][1][1], v1$0);
        return caml_call2(Bin_prot_Common[23], 1, _f2_);
       case 2:
        var v1$1 = param[1], _f3_ = caml_call1(C[1][1][1], v1$1);
        return caml_call2(Bin_prot_Common[23], 1, _f3_);
       default:
        var v1$2 = param[1], _f4_ = caml_call1(D[1][1][1], v1$2);
        return caml_call2(Bin_prot_Common[23], 1, _f4_);
     }
    }
    function bin_write_t(buf, pos, param){
     if(typeof param === "number")
      switch(param){
        case 0:
         return caml_call3(Bin_prot_Write[30], buf, pos, 0);
        case 1:
         return caml_call3(Bin_prot_Write[30], buf, pos, 2);
        case 2:
         return caml_call3(Bin_prot_Write[30], buf, pos, 4);
        default: return caml_call3(Bin_prot_Write[30], buf, pos, 6);
      }
     switch(param[0]){
       case 0:
        var
         v1 = param[1],
         pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
        return caml_call3(A[1][1][2], buf, pos$0, v1);
       case 1:
        var
         v1$0 = param[1],
         pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
        return caml_call3(B[1][1][2], buf, pos$1, v1$0);
       case 2:
        var
         v1$1 = param[1],
         pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 5);
        return caml_call3(C[1][1][2], buf, pos$2, v1$1);
       default:
        var
         v1$2 = param[1],
         pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 7);
        return caml_call3(D[1][1][2], buf, pos$3, v1$2);
     }
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19],
              cst_src_main_ml_Stable_Of_vari$1,
              pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(7 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _aI_, pos_ref[1]);
     switch(match){
       case 0:
        return 0;
       case 1:
        var arg_1 = caml_call2(A[1][1][3], buf, pos_ref); return [0, arg_1];
       case 2:
        return 1;
       case 3:
        var arg_1$0 = caml_call2(B[1][1][3], buf, pos_ref);
        return [1, arg_1$0];
       case 4:
        return 2;
       case 5:
        var arg_1$1 = caml_call2(C[1][1][3], buf, pos_ref);
        return [2, arg_1$1];
       case 6:
        return 3;
       default:
        var arg_1$2 = caml_call2(D[1][1][3], buf, pos_ref);
        return [3, arg_1$2];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    function a_part(v0){return [0, v0];}
    function b_part(v0){return [1, v0];}
    function c_part(v0){return [2, v0];}
    function d_part(v0){return [3, v0];}
    var
     Part =
       [0,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_writer_t,
        bin_read_t,
        bin_read_t$0,
        bin_reader_t,
        bin_t,
        0,
        a_part,
        1,
        b_part,
        2,
        c_part,
        3,
        d_part];
    function create(param){return 0;}
    function apply_part(t, part){
     if(typeof t === "number"){
      if(typeof part === "number")
       switch(part){
         case 0:
          return [0, caml_call1(A[1][2], 0)];
         case 1:
          return [1, caml_call1(B[1][2], 0)];
         case 2:
          return [2, caml_call1(C[1][2], 0)];
         default: return [3, caml_call1(D[1][2], 0)];
       }
     }
     else
      switch(t[0]){
        case 0:
         if(typeof part !== "number" && 0 === part[0]){
          var x = part[1], a = t[1];
          return [0, caml_call2(A[1][3], a, x)];
         }
         break;
        case 1:
         if(typeof part !== "number" && 1 === part[0]){
          var x$0 = part[1], b = t[1];
          return [1, caml_call2(B[1][3], b, x$0)];
         }
         break;
        case 2:
         if(typeof part !== "number" && 2 === part[0]){
          var x$1 = part[1], c = t[1];
          return [2, caml_call2(C[1][3], c, x$1)];
         }
         break;
        default:
         if(typeof part !== "number" && 3 === part[0]){
          var x$2 = part[1], d = t[1];
          return [3, caml_call2(D[1][3], d, x$2)];
         }
      }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _aJ_], 1);
    }
    var Intermediate = [0, Part, create, apply_part];
    function to_parts(param){
     switch(param[1] - 65 | 0){
       case 0:
        var
         a = param[2],
         _fP_ = Intermediate[1][10],
         _fQ_ = caml_call1(A[2], a),
         _fR_ = caml_call2(Streamable_Import[4][41], _fQ_, _fP_);
        return caml_call2(Streamable_Import[4][118], Intermediate[1][9], _fR_);
       case 1:
        var
         b = param[2],
         _fS_ = Intermediate[1][12],
         _fT_ = caml_call1(B[2], b),
         _fU_ = caml_call2(Streamable_Import[4][41], _fT_, _fS_);
        return caml_call2
                (Streamable_Import[4][118], Intermediate[1][11], _fU_);
       case 2:
        var
         c = param[2],
         _fV_ = Intermediate[1][14],
         _fW_ = caml_call1(C[2], c),
         _fX_ = caml_call2(Streamable_Import[4][41], _fW_, _fV_);
        return caml_call2
                (Streamable_Import[4][118], Intermediate[1][13], _fX_);
       default:
        var
         d = param[2],
         _fY_ = Intermediate[1][16],
         _fZ_ = caml_call1(D[2], d),
         _f0_ = caml_call2(Streamable_Import[4][41], _fZ_, _fY_);
        return caml_call2
                (Streamable_Import[4][118], Intermediate[1][15], _f0_);
     }
    }
    function finalize(param){
     if(typeof param === "number")
      throw caml_maybe_attach_backtrace([0, Assert_failure, _aK_], 1);
     switch(param[0]){
       case 0:
        var a = param[1]; return [0, 65, caml_call1(A[3], a)];
       case 1:
        var b = param[1]; return [0, 66, caml_call1(B[3], b)];
       case 2:
        var c = param[1]; return [0, 67, caml_call1(C[3], c)];
       default: var d = param[1]; return [0, 68, caml_call1(D[3], d)];
     }
    }
    return [0, Intermediate, to_parts, finalize];
   }
   function V1$36(A, B, C, D){
    var
     _fw_ = D[1],
     _fx_ = _fw_[1],
     _fy_ = C[1],
     _fz_ = _fy_[1],
     _fA_ = B[1],
     _fB_ = _fA_[1],
     _fC_ = A[1],
     _fD_ = _fC_[1],
     Plain =
       V1$35
        ([0,
          [0,
           [0,
            _fD_[1],
            _fD_[2],
            _fD_[3],
            _fD_[4],
            _fD_[5],
            _fD_[6],
            _fD_[7],
            _fD_[8]],
           _fC_[2],
           _fC_[3]],
          A[2],
          A[3]],
         [0,
          [0,
           [0,
            _fB_[1],
            _fB_[2],
            _fB_[3],
            _fB_[4],
            _fB_[5],
            _fB_[6],
            _fB_[7],
            _fB_[8]],
           _fA_[2],
           _fA_[3]],
          B[2],
          B[3]],
         [0,
          [0,
           [0,
            _fz_[1],
            _fz_[2],
            _fz_[3],
            _fz_[4],
            _fz_[5],
            _fz_[6],
            _fz_[7],
            _fz_[8]],
           _fy_[2],
           _fy_[3]],
          C[2],
          C[3]],
         [0,
          [0,
           [0,
            _fx_[1],
            _fx_[2],
            _fx_[3],
            _fx_[4],
            _fx_[5],
            _fx_[6],
            _fx_[7],
            _fx_[8]],
           _fw_[2],
           _fw_[3]],
          D[2],
          D[3]]);
    function t_of_sexp(sexp_409){
     a:
     {
      if(0 === sexp_409[0]){
       var _fG_ = sexp_409[1], _fH_ = caml_string_compare(_fG_, cst_a_part);
       b:
       {
        c:
        {
         d:
         {
          e:
          {
           f:
           {
            g:
            {
             h:
             {
              if(0 <= _fH_){
               if(0 < _fH_){
                if(_fG_ === cst_a_start) break h;
                if(_fG_ === cst_b_part) break g;
                if(_fG_ === cst_b_start) break f;
                if(_fG_ === cst_c_part) break e;
                if(_fG_ === cst_c_start) break d;
                if(_fG_ === cst_d_part) break c;
                if(_fG_ !== cst_d_start) break a;
                break b;
               }
              }
              else if(_fG_ !== cst_A_part$2){
               if(_fG_ === cst_A_start) break h;
               if(_fG_ === cst_B_part$2) break g;
               if(_fG_ === cst_B_start) break f;
               if(_fG_ === cst_C_part$1) break e;
               if(_fG_ === cst_C_start) break d;
               if(_fG_ === cst_D_part$0) break c;
               if(_fG_ !== cst_D_start) break a;
               break b;
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[5], error_source_407, sexp_409);
             }
             return 0;
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[5], error_source_407, sexp_409);
           }
           return 1;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[5], error_source_407, sexp_409);
         }
         return 2;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_407, sexp_409);
       }
       return 3;
      }
      var _fI_ = sexp_409[1];
      if(! _fI_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_407, sexp_409);
      var _fJ_ = _fI_[1];
      if(0 !== _fJ_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[6], error_source_407, sexp_409);
      var tag_410 = _fJ_[1], _fK_ = caml_string_compare(tag_410, cst_a_part);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             if(0 <= _fK_){
              if(0 < _fK_){
               if(tag_410 === cst_a_start) break h;
               if(tag_410 === cst_b_part) break g;
               if(tag_410 === cst_b_start) break f;
               if(tag_410 === cst_c_part) break e;
               if(tag_410 === cst_c_start) break d;
               if(tag_410 === cst_d_part) break c;
               if(tag_410 !== cst_d_start) break a;
               break b;
              }
             }
             else if(tag_410 !== cst_A_part$2){
              if(tag_410 === cst_A_start) break h;
              if(tag_410 === cst_B_part$2) break g;
              if(tag_410 === cst_B_start) break f;
              if(tag_410 === cst_C_part$1) break e;
              if(tag_410 === cst_C_start) break d;
              if(tag_410 === cst_D_part$0) break c;
              if(tag_410 !== cst_D_start) break a;
              break b;
             }
             var sexp_args_411 = _fI_[2];
             if(sexp_args_411 && ! sexp_args_411[2]){
              var
               arg0_412 = sexp_args_411[1],
               res0_413 = caml_call1(A[1][1][9], arg0_412);
              return [0, res0_413];
             }
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],
                      error_source_407,
                      tag_410,
                      sexp_409);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[3], error_source_407, sexp_409);
           }
           var sexp_args_416 = _fI_[2];
           if(sexp_args_416 && ! sexp_args_416[2]){
            var
             arg0_417 = sexp_args_416[1],
             res0_418 = caml_call1(B[1][1][9], arg0_417);
            return [1, res0_418];
           }
           return caml_call3
                   (Sexplib0_Sexp_conv_error[4],
                    error_source_407,
                    tag_410,
                    sexp_409);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[3], error_source_407, sexp_409);
         }
         var sexp_args_421 = _fI_[2];
         if(sexp_args_421 && ! sexp_args_421[2]){
          var
           arg0_422 = sexp_args_421[1],
           res0_423 = caml_call1(C[1][1][9], arg0_422);
          return [2, res0_423];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[4],
                  error_source_407,
                  tag_410,
                  sexp_409);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[3], error_source_407, sexp_409);
       }
       var sexp_args_426 = _fI_[2];
       if(sexp_args_426 && ! sexp_args_426[2]){
        var
         arg0_427 = sexp_args_426[1],
         res0_428 = caml_call1(D[1][1][9], arg0_427);
        return [3, res0_428];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_407,
                tag_410,
                sexp_409);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[3], error_source_407, sexp_409);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[8], error_source_407, sexp_409);
    }
    function sexp_of_t(param){
     if(typeof param === "number")
      switch(param){
        case 0:
         return _aL_;
        case 1:
         return _aM_;
        case 2:
         return _aN_;
        default: return _aO_;
      }
     switch(param[0]){
       case 0:
        var arg0_429 = param[1], res0_430 = caml_call1(A[1][1][10], arg0_429);
        return [1, [0, _aP_, [0, res0_430, 0]]];
       case 1:
        var arg0_431 = param[1], res0_432 = caml_call1(B[1][1][10], arg0_431);
        return [1, [0, _aQ_, [0, res0_432, 0]]];
       case 2:
        var arg0_433 = param[1], res0_434 = caml_call1(C[1][1][10], arg0_433);
        return [1, [0, _aR_, [0, res0_434, 0]]];
       default:
        var arg0_435 = param[1], res0_436 = caml_call1(D[1][1][10], arg0_435);
        return [1, [0, _aS_, [0, res0_436, 0]]];
     }
    }
    var
     _fE_ = Plain[1],
     _fF_ = _fE_[1],
     include =
       V1
        ([0,
          [0,
           [0,
            _fF_[2],
            _fF_[3],
            _fF_[6],
            _fF_[5],
            _fF_[1],
            _fF_[4],
            _fF_[7],
            _fF_[8]],
           _fE_[2],
           _fE_[3]],
          Plain[2],
          Plain[3]],
         [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, , Intermediate, to_parts, finalize];
   }
   function V1$37(T, X){
    var
     _fk_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          _aT_,
          [0,
           [0, cst_Elt_first_part, [0, X[1][1][5], 0]],
           [0, [0, cst_Elt_later_part, [0, X[1][1][5], 0]], 0]]]),
     _fl_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$25), 0, _fk_], 0],
     _fm_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_1636_10),
     group = caml_call2(Bin_prot_Shape[2], _fm_, _fl_),
     _fn_ = caml_call1(Bin_shape[2][1], cst_t$26),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _fn_), 0);
    function bin_size_t(param){
     if(typeof param === "number") return 1;
     if(0 === param[0]){
      var v1 = param[1], _fu_ = caml_call1(X[1][1][1], v1);
      return caml_call2(Bin_prot_Common[23], 1, _fu_);
     }
     var v1$0 = param[1], _fv_ = caml_call1(X[1][1][1], v1$0);
     return caml_call2(Bin_prot_Common[23], 1, _fv_);
    }
    function bin_write_t(buf, pos, param){
     if(typeof param === "number")
      return caml_call3(Bin_prot_Write[30], buf, pos, 0);
     if(0 === param[0]){
      var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
      return caml_call3(X[1][1][2], buf, pos$0, v1);
     }
     var v1$0 = param[1], pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
     return caml_call3(X[1][1][2], buf, pos$1, v1$0);
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19], cst_src_main_ml_Stable_Of_list, pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(2 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _aU_, pos_ref[1]);
     switch(match){
       case 0:
        return 0;
       case 1:
        var arg_1 = caml_call2(X[1][1][3], buf, pos_ref); return [0, arg_1];
       default:
        var arg_1$0 = caml_call2(X[1][1][3], buf, pos_ref);
        return [1, arg_1$0];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    function elt_first_part(v0){return [0, v0];}
    function elt_later_part(v0){return [1, v0];}
    var
     Part =
       [0,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_writer_t,
        bin_read_t,
        bin_read_t$0,
        bin_reader_t,
        bin_t,
        0,
        elt_first_part,
        elt_later_part];
    function create(param){return 0;}
    function force(param){
     if(! param) return 0;
     var match = param[1], x_int = match[2], xs = match[1];
     return [0, caml_call1(X[3], x_int), xs];
    }
    function elt_start(t){
     var _ft_ = caml_call1(X[1][2], 0);
     return [0, [0, force(t), _ft_]];
    }
    function elt_part(t, part){
     if(! t) throw caml_maybe_attach_backtrace([0, Assert_failure, _aV_], 1);
     var match = t[1], int$0 = match[2], xs = match[1];
     return [0, [0, xs, caml_call2(X[1][3], int$0, part)]];
    }
    function apply_part(t, p){
     if(typeof p === "number") return elt_start(t);
     if(0 === p[0]){var part = p[1]; return elt_part(elt_start(t), part);}
     var part$0 = p[1];
     return elt_part(t, part$0);
    }
    var Intermediate = [0, Part, create, force, , , apply_part];
    function finalize(t){
     var
      _fr_ = Intermediate[3].call(null, t),
      _fs_ = caml_call1(Core_List[57], _fr_);
     return caml_call1(T[2], _fs_);
    }
    function to_parts(xs){
     var _fo_ = caml_call1(T[1], xs);
     return caml_call2
             (Streamable_Import[4][71],
              _fo_,
              function(x){
               var
                xparts = caml_call1(X[2], x),
                match = caml_call1(Streamable_Import[4][47], xparts);
               if(! match)
                return caml_call1
                        (Streamable_Import[4][104], Intermediate[1][9]);
               var
                match$0 = match[1],
                tl = match$0[2],
                hd = match$0[1],
                _fp_ =
                  caml_call2
                   (Streamable_Import[4][41], tl, Intermediate[1][11]),
                _fq_ = Intermediate[1][10].call(null, hd);
               return caml_call2(Streamable_Import[4][118], _fq_, _fp_);
              });
    }
    return [0, Intermediate, finalize, to_parts];
   }
   function V1$38(T, X){
    var
     _fd_ = X[1],
     _fe_ = _fd_[1],
     Plain =
       V1$37
        (T,
         [0,
          [0,
           [0,
            _fe_[1],
            _fe_[2],
            _fe_[3],
            _fe_[4],
            _fe_[5],
            _fe_[6],
            _fe_[7],
            _fe_[8]],
           _fd_[2],
           _fd_[3]],
          X[2],
          X[3]]);
    function t_of_sexp(sexp_441){
     a:
     {
      if(0 === sexp_441[0]){
       var _fh_ = sexp_441[1];
       b:
       if(_fh_ !== cst_Elt_first_part$0){
        c:
        if(_fh_ !== cst_Elt_later_part$0){
         if(_fh_ !== cst_Elt_no_parts){
          if(_fh_ === cst_elt_first_part) break b;
          if(_fh_ === cst_elt_later_part) break c;
          if(_fh_ !== cst_elt_no_parts) break a;
         }
         return 0;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_439, sexp_441);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_439, sexp_441);
      }
      var _fi_ = sexp_441[1];
      if(! _fi_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_439, sexp_441);
      var _fj_ = _fi_[1];
      if(0 !== _fj_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[6], error_source_439, sexp_441);
      var tag_442 = _fj_[1];
      b:
      if(tag_442 !== cst_Elt_first_part$0){
       c:
       if(tag_442 !== cst_Elt_later_part$0){
        if(tag_442 !== cst_Elt_no_parts){
         if(tag_442 === cst_elt_first_part) break b;
         if(tag_442 === cst_elt_later_part) break c;
         if(tag_442 !== cst_elt_no_parts) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[3], error_source_439, sexp_441);
       }
       var sexp_args_448 = _fi_[2];
       if(sexp_args_448 && ! sexp_args_448[2]){
        var
         arg0_449 = sexp_args_448[1],
         res0_450 = caml_call1(X[1][1][9], arg0_449);
        return [1, res0_450];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_439,
                tag_442,
                sexp_441);
      }
      var sexp_args_443 = _fi_[2];
      if(sexp_args_443 && ! sexp_args_443[2]){
       var
        arg0_444 = sexp_args_443[1],
        res0_445 = caml_call1(X[1][1][9], arg0_444);
       return [0, res0_445];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_439,
               tag_442,
               sexp_441);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[8], error_source_439, sexp_441);
    }
    function sexp_of_t(param){
     if(typeof param === "number") return _aW_;
     if(0 === param[0]){
      var arg0_451 = param[1], res0_452 = caml_call1(X[1][1][10], arg0_451);
      return [1, [0, _aX_, [0, res0_452, 0]]];
     }
     var arg0_453 = param[1], res0_454 = caml_call1(X[1][1][10], arg0_453);
     return [1, [0, _aY_, [0, res0_454, 0]]];
    }
    var
     _ff_ = Plain[1],
     _fg_ = _ff_[1],
     include =
       V1
        ([0,
          [0,
           [0,
            _fg_[2],
            _fg_[3],
            _fg_[6],
            _fg_[5],
            _fg_[1],
            _fg_[4],
            _fg_[7],
            _fg_[8]],
           _ff_[2],
           _ff_[6]],
          Plain[3],
          Plain[2]],
         [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return [0, , Intermediate, to_parts, finalize];
   }
   function V1$39(X){
    var
     _e4_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0, _aZ_, [0, [0, cst_Elt_part, [0, X[1][1][5], 0]], 0]]),
     _e5_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$27), 0, _e4_], 0],
     _e6_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_1713_10),
     group = caml_call2(Bin_prot_Shape[2], _e6_, _e5_),
     _e7_ = caml_call1(Bin_shape[2][1], cst_t$28),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _e7_), 0);
    function bin_size_t(param){
     if(! param) return 1;
     var v1 = param[1], _fc_ = caml_call1(X[1][1][1], v1);
     return caml_call2(Bin_prot_Common[23], 1, _fc_);
    }
    function bin_write_t(buf, pos, param){
     if(! param) return caml_call3(Bin_prot_Write[30], buf, pos, 0);
     var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
     return caml_call3(X[1][1][2], buf, pos$0, v1);
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19],
              cst_src_main_ml_Stable_Of_list$0,
              pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(0 === match) return 0;
     if(1 !== match) return caml_call2(Bin_prot_Common[18], _a0_, pos_ref[1]);
     var arg_1 = caml_call2(X[1][1][3], buf, pos_ref);
     return [0, arg_1];
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    function elt_part(v0){return [0, v0];}
    var
     Part =
       [0,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_writer_t,
        bin_read_t,
        bin_read_t$0,
        bin_reader_t,
        bin_t,
        0,
        elt_part];
    function create(param){return 0;}
    function force(param){
     if(! param) return 0;
     var match = param[1], x_int = match[2], xs = match[1];
     return [0, caml_call1(X[3], x_int), xs];
    }
    function apply_part(t, p){
     if(! p){
      var _fb_ = caml_call1(X[1][2], 0);
      return [0, [0, force(t), _fb_]];
     }
     var p$0 = p[1];
     if(! t) throw caml_maybe_attach_backtrace([0, Assert_failure, _a1_], 1);
     var match = t[1], int$0 = match[2], xs = match[1];
     return [0, [0, xs, caml_call2(X[1][3], int$0, p$0)]];
    }
    var Intermediate = [0, Part, create, force, apply_part];
    function finalize(t){
     var _fa_ = Intermediate[3].call(null, t);
     return caml_call1(Core_List[57], _fa_);
    }
    function to_parts(xs){
     var _e8_ = caml_call1(Streamable_Import[4][109], xs);
     return caml_call2
             (Streamable_Import[4][71],
              _e8_,
              function(x){
               var
                _e9_ = Intermediate[1][10],
                _e__ = caml_call1(X[2], x),
                _e$_ = caml_call2(Streamable_Import[4][41], _e__, _e9_);
               return caml_call2
                       (Streamable_Import[4][118], Intermediate[1][9], _e$_);
              });
    }
    return [0, Intermediate, finalize, to_parts];
   }
   function V2$1(_e0_){
    var _e1_ = V1$39(_e0_), _e2_ = _e1_[1], _e3_ = _e2_[1];
    return caml_call1
            (Packed_rpc[1],
             [0,
              [0,
               [0,
                _e3_[2],
                _e3_[3],
                _e3_[6],
                _e3_[5],
                _e3_[1],
                _e3_[4],
                _e3_[7],
                _e3_[8]],
               _e2_[2],
               _e2_[4]],
              _e1_[3],
              _e1_[2]]);
   }
   var to_sequence = Streamable_Import[4][109];
   function of_list(x){return x;}
   var
    _a2_ = [0, to_sequence, of_list],
    _a3_ = [0, cst_Elt_part$1],
    _a4_ = [0, cst_Elt_start];
   function V3(_eW_){
    var _eZ_ = V1$37(_a2_, _eW_), _eX_ = _eZ_[1], _eY_ = _eX_[1];
    return caml_call1
            (Packed_rpc[1],
             [0,
              [0,
               [0,
                _eY_[2],
                _eY_[3],
                _eY_[6],
                _eY_[5],
                _eY_[1],
                _eY_[4],
                _eY_[7],
                _eY_[8]],
               _eX_[2],
               _eX_[6]],
              _eZ_[3],
              _eZ_[2]]);
   }
   function V2$2(X){
    var
     _eP_ = X[1],
     _eQ_ = _eP_[1],
     Plain =
       V1$39
        ([0,
          [0,
           [0,
            _eQ_[1],
            _eQ_[2],
            _eQ_[3],
            _eQ_[4],
            _eQ_[5],
            _eQ_[6],
            _eQ_[7],
            _eQ_[8]],
           _eP_[2],
           _eP_[3]],
          X[2],
          X[3]]);
    function t_of_sexp(sexp_459){
     a:
     {
      if(0 === sexp_459[0]){
       var _eT_ = sexp_459[1];
       b:
       if(_eT_ !== cst_Elt_part$1){
        if(_eT_ !== cst_Elt_start){
         if(_eT_ === cst_elt_part) break b;
         if(_eT_ !== cst_elt_start) break a;
        }
        return 0;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_457, sexp_459);
      }
      var _eU_ = sexp_459[1];
      if(! _eU_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_457, sexp_459);
      var _eV_ = _eU_[1];
      if(0 !== _eV_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[6], error_source_457, sexp_459);
      var tag_460 = _eV_[1];
      b:
      if(tag_460 !== cst_Elt_part$1){
       if(tag_460 !== cst_Elt_start){
        if(tag_460 === cst_elt_part) break b;
        if(tag_460 !== cst_elt_start) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[3], error_source_457, sexp_459);
      }
      var sexp_args_461 = _eU_[2];
      if(sexp_args_461 && ! sexp_args_461[2]){
       var
        arg0_462 = sexp_args_461[1],
        res0_463 = caml_call1(X[1][1][9], arg0_462);
       return [0, res0_463];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_457,
               tag_460,
               sexp_459);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[8], error_source_457, sexp_459);
    }
    function sexp_of_t(param){
     if(! param) return _a4_;
     var arg0_464 = param[1], res0_465 = caml_call1(X[1][1][10], arg0_464);
     return [1, [0, _a3_, [0, res0_465, 0]]];
    }
    var
     _eR_ = Plain[1],
     _eS_ = _eR_[1],
     include =
       V1
        ([0,
          [0,
           [0,
            _eS_[2],
            _eS_[3],
            _eS_[6],
            _eS_[5],
            _eS_[1],
            _eS_[4],
            _eS_[7],
            _eS_[8]],
           _eR_[2],
           _eR_[4]],
          Plain[3],
          Plain[2]],
         [0, t_of_sexp, sexp_of_t]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3];
    return caml_call1(Packed[1], [0, Intermediate, to_parts, finalize]);
   }
   var to_sequence$0 = Streamable_Import[4][109];
   function of_list$0(x){return x;}
   var _a5_ = [0, to_sequence$0, of_list$0];
   function V3$0(_eN_){
    var _eO_ = V1$38(_a5_, _eN_);
    return caml_call1(Packed[1], [0, _eO_[2], _eO_[3], _eO_[4]]);
   }
   function V1$40(A){
    var
     to_streamable = Nonempty_list[46],
     of_streamable = Nonempty_list[60],
     M = [0, to_streamable, of_streamable],
     _eL_ = V3(A),
     _eM_ = caml_call1(caml_call1(Of_streamable_rpc[1], _eL_), M),
     include = caml_call1(Streamable_Remove_t[2], _eM_),
     Intermediate = include[2],
     to_parts = include[3],
     finalize = include[4];
    return [0, , , Intermediate, to_parts, finalize];
   }
   function V1$41(A){
    var
     to_streamable = Nonempty_list[46],
     of_streamable = Nonempty_list[60],
     M = [0, to_streamable, of_streamable],
     _eJ_ = V3$0(A),
     _eK_ = caml_call1(caml_call1(Of_streamable[1], _eJ_), M),
     include = caml_call1(Streamable_Remove_t[1], _eK_),
     Intermediate = include[2],
     to_parts = include[3],
     finalize = include[4];
    return [0, , , Intermediate, to_parts, finalize];
   }
   function create(param){
    var _eI_ = caml_call2(Core_Queue[62], 0, 0);
    return [0, caml_call1(Core_Stack[23], 0), _eI_];
   }
   var
    _a6_ =
      caml_call1
       (Bin_prot_Shape[5],
        [0,
         [0, cst_Atom, [0, Core[471], 0]],
         [0, [0, cst_Push, 0], [0, [0, cst_Pop, 0], 0]]]),
    _a7_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$31), 0, _a6_], 0],
    _a8_ = caml_call1(Bin_shape[4][1], "src/main.ml:1834:10"),
    group = caml_call2(Bin_prot_Shape[2], _a8_, _a7_),
    _a9_ = caml_call1(Bin_shape[2][1], cst_t$31),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _a9_), 0);
   function bin_size_t(param){
    if(typeof param === "number") return 1;
    var v1 = param[1], _eH_ = caml_call1(Core[472], v1);
    return caml_call2(Bin_prot_Common[23], 1, _eH_);
   }
   function bin_write_t(buf, pos, param){
    if(typeof param === "number")
     return param
             ? caml_call3(Bin_prot_Write[30], buf, pos, 2)
             : caml_call3(Bin_prot_Write[30], buf, pos, 1);
    var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
    return caml_call3(Core[473], buf, pos$0, v1);
   }
   var
    bin_writer_t = [0, bin_size_t, bin_write_t],
    cst_src_main_ml_Stable_Of_sexp = cst_src_main_ml_Stable_Of_sexp$0,
    _a__ = [1, cst_src_main_ml_Stable_Of_sexp$0];
   function bin_read_t(buf, pos_ref, vint){
    return caml_call2
            (Bin_prot_Common[19], cst_src_main_ml_Stable_Of_sexp, pos_ref[1]);
   }
   function bin_read_t$0(buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(2 < match >>> 0)
     return caml_call2(Bin_prot_Common[18], _a__, pos_ref[1]);
    switch(match){
      case 0:
       var arg_1 = caml_call2(Core[475], buf, pos_ref); return [0, arg_1];
      case 1:
       return 0;
      default: return 1;
    }
   }
   var
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
    _a$_ = [0, cst_Pop],
    _ba_ = [0, cst_Push],
    _bb_ = [0, cst_Atom],
    _bc_ = [0, cst_src_main_ml, 1856, 8];
   function t_of_sexp(sexp_470){
    a:
    {
     if(0 === sexp_470[0]){
      var _eE_ = sexp_470[1];
      b:
      if(_eE_ !== cst_Atom){
       c:
       if(_eE_ !== cst_Pop){
        if(_eE_ !== cst_Push){
         if(_eE_ === cst_atom) break b;
         if(_eE_ === cst_pop) break c;
         if(_eE_ !== cst_push) break a;
        }
        return 0;
       }
       return 1;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5], error_source_468, sexp_470);
     }
     var _eF_ = sexp_470[1];
     if(! _eF_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_468, sexp_470);
     var _eG_ = _eF_[1];
     if(0 !== _eG_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_468, sexp_470);
     var tag_471 = _eG_[1];
     b:
     if(tag_471 !== cst_Atom){
      c:
      if(tag_471 !== cst_Pop){
       if(tag_471 !== cst_Push){
        if(tag_471 === cst_atom) break b;
        if(tag_471 === cst_pop) break c;
        if(tag_471 !== cst_push) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[3], error_source_468, sexp_470);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[3], error_source_468, sexp_470);
     }
     var sexp_args_472 = _eF_[2];
     if(sexp_args_472 && ! sexp_args_472[2]){
      var
       arg0_473 = sexp_args_472[1],
       res0_474 = caml_call1(Core[485], arg0_473);
      return [0, res0_474];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4],
              error_source_468,
              tag_471,
              sexp_470);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_468, sexp_470);
   }
   function sexp_of_t(param){
    if(typeof param === "number") return param ? _a$_ : _ba_;
    var arg0_475 = param[1], res0_476 = caml_call1(Core[484], arg0_475);
    return [1, [0, _bb_, [0, res0_476, 0]]];
   }
   function apply_part(t, part){
    if(typeof part === "number")
     if(part){
      var top = [1, caml_call1(Core_Queue[26], t[2])];
      t[2] = caml_call1(Core_Stack[27], t[1]);
      caml_call2(Core_Queue[41], t[2], top);
     }
     else{
      caml_call2(Core_Stack[25], t[1], t[2]);
      t[2] = caml_call2(Core_Queue[62], 0, 0);
     }
    else{var atom = part[1]; caml_call2(Core_Queue[41], t[2], [0, atom]);}
    return t;
   }
   function finalize(param){
    var stack = param[1], queue = param[2];
    if(caml_call1(Core_Stack[7], stack))
     return caml_call1(Core_Queue[26], queue);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _bc_], 1);
   }
   function yield$0(part){return caml_call1(Base_Sequence[112][12], part);}
   function parts_of_sexp(param){
    if(0 === param[0]){var x = param[1]; return yield$0([0, x]);}
    var xs = param[1], _eB_ = yield$0(0);
    return caml_call2
            (Base_Sequence[112][3][4][2],
             _eB_,
             function(param){
              var _eC_ = parts_of_sexps(xs);
              return caml_call2
                      (Base_Sequence[112][3][4][2],
                       _eC_,
                       function(param){
                        var _eD_ = yield$0(1);
                        return caml_call2
                                (Base_Sequence[112][3][4][2],
                                 _eD_,
                                 function(param){
                                  return caml_call1(Base_Sequence[112][3][1], 0);
                                 });
                       });
             });
   }
   function parts_of_sexps(xs){
    var _eA_ = caml_call2(Core_List[50], xs, parts_of_sexp);
    return caml_call1(Base_Sequence[112][11], _eA_);
   }
   function to_parts(t){
    var _ez_ = parts_of_sexps(t);
    return caml_call1(Base_Sequence[112][14], _ez_);
   }
   var
    V1_unpacked =
      [0,
       [0,
        [0,
         bin_size_t,
         bin_write_t,
         bin_read_t$0,
         bin_read_t,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         t_of_sexp,
         sexp_of_t],
        create,
        apply_part],
       to_parts,
       finalize],
    V1$42 = caml_call1(Packed[1], V1_unpacked),
    _bd_ = [0, cst_src_main_ml, 1892, 23];
   function V1$43(Sexpable){
    function to_streamable(x){return [0, caml_call1(Sexpable[2], x), 0];}
    function of_streamable(param){
     if(param && ! param[2]){
      var x = param[1];
      return caml_call1(Sexpable[1], x);
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _bd_], 1);
    }
    return caml_call1
            (caml_call1(Of_streamable[1], V1$42),
             [0, to_streamable, of_streamable]);
   }
   var
    Of_sexpable = [0, V1$43],
    cst_Elt_part$0 = cst_Elt_part$1,
    _be_ = [0, cst_Elt_start, 0],
    cst_t$29 = cst_t$31,
    cst_src_main_ml_1905_10 = "src/main.ml:1905:10",
    cst_t$30 = cst_t$31,
    cst_src_main_ml_Stable_Of_opti = cst_src_main_ml_Stable_Of_opti$0,
    _bf_ = [1, cst_src_main_ml_Stable_Of_opti$0],
    _bg_ = [0, cst_src_main_ml, 1921, 29],
    _bh_ = [0, cst_src_main_ml, 1917, 25],
    _bi_ = [0, cst_src_main_ml, 1959, 28],
    _bl_ = [0, cst_src_main_ml, 2000, 28];
   function V1$44(X){
    var
     _er_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0, _be_, [0, [0, cst_Elt_part$0, [0, X[1][1][5], 0]], 0]]),
     _es_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$29), 0, _er_], 0],
     _et_ = caml_call1(Bin_shape[4][1], cst_src_main_ml_1905_10),
     group = caml_call2(Bin_prot_Shape[2], _et_, _es_),
     _eu_ = caml_call1(Bin_shape[2][1], cst_t$30),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _eu_), 0);
    function bin_size_t(param){
     if(! param) return 1;
     var v1 = param[1], _ey_ = caml_call1(X[1][1][1], v1);
     return caml_call2(Bin_prot_Common[23], 1, _ey_);
    }
    function bin_write_t(buf, pos, param){
     if(! param) return caml_call3(Bin_prot_Write[30], buf, pos, 0);
     var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
     return caml_call3(X[1][1][2], buf, pos$0, v1);
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19], cst_src_main_ml_Stable_Of_opti, pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(0 === match) return 0;
     if(1 !== match) return caml_call2(Bin_prot_Common[18], _bf_, pos_ref[1]);
     var arg_1 = caml_call2(X[1][1][3], buf, pos_ref);
     return [0, arg_1];
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    function elt_part(v0){return [0, v0];}
    var
     Part =
       [0,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_writer_t,
        bin_read_t,
        bin_read_t$0,
        bin_reader_t,
        bin_t,
        0,
        elt_part];
    function create(param){return 0;}
    function apply_part(t, param){
     if(param){
      var p = param[1];
      if(! t) throw caml_maybe_attach_backtrace([0, Assert_failure, _bg_], 1);
      var x_int = t[1];
      return [0, caml_call2(X[1][3], x_int, p)];
     }
     if(t) throw caml_maybe_attach_backtrace([0, Assert_failure, _bh_], 1);
     return [0, caml_call1(X[1][2], 0)];
    }
    var Intermediate = [0, Part, create, apply_part];
    function finalize(param){
     if(! param) return 0;
     var x_int = param[1];
     return [0, caml_call1(X[3], x_int)];
    }
    function to_parts(param){
     if(! param) return Streamable_Import[4][46];
     var
      x = param[1],
      _ev_ = Intermediate[1][10],
      _ew_ = caml_call1(X[2], x),
      _ex_ = caml_call2(Streamable_Import[4][41], _ew_, _ev_);
     return caml_call2(Streamable_Import[4][118], Intermediate[1][9], _ex_);
    }
    return [0, Intermediate, finalize, to_parts];
   }
   function V2$3(X){
    function to_streamable(param){
     if(! param) return 0;
     var x = param[1];
     return [0, x, 0];
    }
    function of_streamable(param){
     if(! param) return 0;
     if(param[2])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _bi_], 1);
     var x = param[1];
     return [0, x];
    }
    var
     _eq_ = V1$37(_a2_, X),
     _en_ = _eq_[1],
     _eo_ = _en_[1],
     _ep_ =
       caml_call1
        (caml_call1
          (Of_streamable_rpc[1],
           [0,
            [0,
             [0,
              _eo_[2],
              _eo_[3],
              _eo_[6],
              _eo_[5],
              _eo_[1],
              _eo_[4],
              _eo_[7],
              _eo_[8]],
             _en_[2],
             _en_[6]],
            _eq_[3],
            _eq_[2]]),
         [0, to_streamable, of_streamable]),
     include = caml_call1(Streamable_Remove_t[2], _ep_),
     Intermediate = include[2],
     to_parts = include[3],
     finalize = include[4];
    return [0, , Intermediate, to_parts, finalize];
   }
   function V2$4(X){
    function to_streamable(param){
     if(! param) return 0;
     var x = param[1];
     return [0, x, 0];
    }
    function of_streamable(param){
     if(! param) return 0;
     if(param[2])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _bl_], 1);
     var x = param[1];
     return [0, x];
    }
    var
     _em_ = V1$38(_a5_, X),
     _el_ =
       caml_call1
        (caml_call1(Of_streamable[1], [0, _em_[2], _em_[3], _em_[4]]),
         [0, to_streamable, of_streamable]),
     include = caml_call1(Streamable_Remove_t[1], _el_),
     Intermediate = include[2],
     to_parts = include[3],
     finalize = include[4];
    return [0, , Intermediate, to_parts, finalize];
   }
   function V1$45(A, B){
    function to_streamable(param){
     if(0 === param[0]){var x = param[1]; return [0, 65, x];}
     var x$0 = param[1];
     return [0, 66, x$0];
    }
    function of_streamable(param){
     if(66 <= param[1]){var x = param[2]; return [1, x];}
     var x$0 = param[2];
     return [0, x$0];
    }
    var
     _ek_ = V1$31(A, B),
     _eh_ = _ek_[1],
     _ei_ = _eh_[1],
     _ej_ =
       caml_call1
        (caml_call1
          (Of_streamable_rpc[1],
           [0,
            [0,
             [0,
              _ei_[2],
              _ei_[3],
              _ei_[6],
              _ei_[5],
              _ei_[1],
              _ei_[4],
              _ei_[7],
              _ei_[8]],
             _eh_[2],
             _eh_[3]],
            _ek_[2],
            _ek_[3]]),
         [0, to_streamable, of_streamable]),
     include = caml_call1(Streamable_Remove_t[2], _ej_),
     Intermediate = include[2],
     to_parts = include[3],
     finalize = include[4];
    return [0, , Intermediate, to_parts, finalize];
   }
   function V1$46(A, B){
    function to_streamable(param){
     if(0 === param[0]){var x = param[1]; return [0, 65, x];}
     var x$0 = param[1];
     return [0, 66, x$0];
    }
    function of_streamable(param){
     if(66 <= param[1]){var x = param[2]; return [1, x];}
     var x$0 = param[2];
     return [0, x$0];
    }
    var
     _eg_ = V1$32(A, B),
     _ef_ =
       caml_call1
        (caml_call1(Of_streamable[1], [0, _eg_[2], _eg_[3], _eg_[4]]),
         [0, to_streamable, of_streamable]),
     include = caml_call1(Streamable_Remove_t[1], _ef_),
     Intermediate = include[2],
     to_parts = include[3],
     finalize = include[4];
    return [0, , Intermediate, to_parts, finalize];
   }
   function Common(A){
    var
     to_streamable = Core_Fqueue[50],
     of_streamable = Core_Fqueue[51],
     M = [0, to_streamable, of_streamable];
    return [0, M];
   }
   function V3$1(A){
    var
     M = Common(A)[1],
     _ed_ = V3(A),
     _ee_ = caml_call1(caml_call1(Of_streamable_rpc[1], _ed_), M),
     include = caml_call1(Streamable_Remove_t[2], _ee_),
     Intermediate = include[2],
     to_parts = include[3],
     finalize = include[4];
    return [0, , , Intermediate, to_parts, finalize];
   }
   function Common$0(A){
    var
     to_streamable = Core_Fqueue[50],
     of_streamable = Core_Fqueue[51],
     M = [0, to_streamable, of_streamable];
    return [0, M];
   }
   function V3$2(A){
    var
     M = Common$0(A)[1],
     _eb_ = V3$0(A),
     _ec_ = caml_call1(caml_call1(Of_streamable[1], _eb_), M),
     include = caml_call1(Streamable_Remove_t[1], _ec_),
     Intermediate = include[2],
     to_parts = include[3],
     finalize = include[4];
    return [0, , , Intermediate, to_parts, finalize];
   }
   function Common$1(Key){
    var
     to_streamable = Core_Set[39],
     of_streamable = caml_call1(Core_Set[3][4], Key[11]),
     M = [0, to_streamable, of_streamable],
     K =
       caml_call1
        (Of_atomic_rpc[1],
         [0, Key[1], Key[2], Key[3], Key[4], Key[5], Key[6], Key[7], Key[8]]);
    return [0, M, K];
   }
   function V3$3(Key){
    var
     C = Common$1(Key),
     _d__ = C[1],
     _d$_ = V3(C[2]),
     _ea_ = caml_call1(caml_call1(Of_streamable_rpc[1], _d$_), _d__),
     include = caml_call1(Streamable_Remove_t[2], _ea_),
     Intermediate = include[2],
     to_parts = include[3],
     finalize = include[4];
    return [0, , , , , Intermediate, to_parts, finalize];
   }
   function Common$2(Key){
    var
     to_streamable = Core_Set[39],
     of_streamable = caml_call1(Core_Set[3][4], Key[12]),
     M = [0, to_streamable, of_streamable],
     K =
       caml_call1
        (Of_atomic[1],
         [0,
          Key[1],
          Key[2],
          Key[3],
          Key[4],
          Key[5],
          Key[6],
          Key[7],
          Key[8],
          Key[10],
          Key[11]]);
    return [0, M, K];
   }
   function V3$4(Key){
    var
     C = Common$2(Key),
     _d7_ = C[1],
     _d8_ = V3$0(C[2]),
     _d9_ = caml_call1(caml_call1(Of_streamable[1], _d8_), _d7_),
     include = caml_call1(Streamable_Remove_t[1], _d9_),
     Intermediate = include[2],
     to_parts = include[3],
     finalize = include[4];
    return [0, , , , , Intermediate, to_parts, finalize];
   }
   function to_sequence$1(x){return x;}
   var
    of_list$1 = Streamable_Import[4][109],
    _bm_ = [0, to_sequence$1, of_list$1];
   function V1$47(_d3_){
    var _d6_ = V1$37(_bm_, _d3_), _d4_ = _d6_[1], _d5_ = _d4_[1];
    return caml_call1
            (Packed_rpc[1],
             [0,
              [0,
               [0,
                _d5_[2],
                _d5_[3],
                _d5_[6],
                _d5_[5],
                _d5_[1],
                _d5_[4],
                _d5_[7],
                _d5_[8]],
               _d4_[2],
               _d4_[6]],
              _d6_[3],
              _d6_[2]]);
   }
   function to_sequence$2(x){return x;}
   var
    of_list$2 = Streamable_Import[4][109],
    _bn_ = [0, to_sequence$2, of_list$2],
    _bo_ = [0, [0, [0, [0, [0, [0, 0, 0, 0, 0]], 0, 0]], 0, 0]],
    _bp_ = [0, cst_src_main_ml, 2211, 70],
    cst_859f388a_490a_11e6_b296_cb = cst_859f388a_490a_11e6_b296_cb$1,
    _bq_ = [0, [0, [0, [0, [0, [0, 0, 0, 0, 0]], 0, 0]], 0, 0]];
   function V1$48(_d1_){
    var _d2_ = V1$38(_bn_, _d1_);
    return caml_call1(Packed[1], [0, _d2_[2], _d2_[3], _d2_[4]]);
   }
   function V1$49(T, F){
    var
     M_only_functions = caml_call2(CamlinternalMod[1], _bp_, _bo_),
     M = V1$0(M_only_functions),
     Intermediate = M[1],
     to_parts = M[2],
     finalize = M[3],
     M_t = [0, Intermediate, to_parts, finalize],
     Rec = caml_call1(F, M_t),
     include = Rec[1][1],
     bin_size_t = include[1],
     bin_write_t = include[2],
     bin_read_t = include[3],
     bin_read_t$0 = include[4],
     bin_writer_t = include[6],
     bin_reader_t = include[7],
     bin_t = include[8],
     _dX_ = [0, Rec[1][1][5], 0],
     _dY_ = caml_call1(Bin_shape[5][1], cst_859f388a_490a_11e6_b296_cb),
     bin_shape_t = caml_call2(Bin_prot_Shape[12], _dY_, _dX_),
     create = Rec[1][2],
     apply_part = Rec[1][3],
     to_parts$0 = Rec[2],
     finalize$0 = Rec[3],
     M0 =
       [0,
        [0,
         [0,
          bin_size_t,
          bin_write_t,
          bin_read_t,
          bin_read_t$0,
          bin_shape_t,
          bin_writer_t,
          bin_reader_t,
          bin_t],
         create,
         apply_part],
        to_parts$0,
        finalize$0],
     _dZ_ = M0[1],
     _d0_ = _dZ_[1];
    caml_call3
     (CamlinternalMod[2],
      _bq_,
      M_only_functions,
      [0,
       [0, [0, _d0_[1], _d0_[2], _d0_[3], _d0_[4]], _dZ_[2], _dZ_[3]],
       M0[2],
       M0[3]]);
    var
     include$0 = caml_call1(Streamable_Remove_t[2], M0),
     Intermediate$0 = include$0[2],
     to_parts$1 = include$0[3],
     finalize$1 = include$0[4];
    return [0, Intermediate$0, to_parts$1, finalize$1];
   }
   var
    Fixpoint_rpc = [0, V1$49],
    _br_ = [0, [0, [0, [0, [0, [0, 0, 0, 0, 0, 0, 0]], 0, 0]], 0, 0]],
    _bs_ = [0, cst_src_main_ml, 2258, 66],
    cst_859f388a_490a_11e6_b296_cb$0 = cst_859f388a_490a_11e6_b296_cb$1,
    _bt_ = [0, [0, [0, [0, [0, [0, 0, 0, 0, 0, 0, 0]], 0, 0]], 0, 0]];
   function V1$50(T, F){
    var
     M_only_functions = caml_call2(CamlinternalMod[1], _bs_, _br_),
     _dP_ = M_only_functions[1][1],
     _dR_ = M_only_functions[1],
     _dS_ = _dR_[1],
     _dQ_ = [0, _dP_[1], _dP_[2]],
     include =
       V1$0
        ([0,
          [0, [0, _dS_[3], _dS_[4], _dS_[5], _dS_[6]], _dR_[2], _dR_[3]],
          M_only_functions[2],
          M_only_functions[3]]),
     Intermediate = include[1],
     to_parts = include[2],
     finalize = include[3],
     M = V1([0, Intermediate, to_parts, finalize], _dQ_),
     Intermediate$0 = M[1],
     to_parts$0 = M[2],
     finalize$0 = M[3],
     M_t = [0, Intermediate$0, to_parts$0, finalize$0],
     Rec = caml_call1(F, M_t),
     include$0 = Rec[1][1],
     bin_size_t = include$0[1],
     bin_write_t = include$0[2],
     bin_read_t = include$0[3],
     bin_read_t$0 = include$0[4],
     bin_writer_t = include$0[6],
     bin_reader_t = include$0[7],
     bin_t = include$0[8],
     t_of_sexp = include$0[9],
     sexp_of_t = include$0[10],
     _dT_ = [0, Rec[1][1][5], 0],
     _dU_ = caml_call1(Bin_shape[5][1], cst_859f388a_490a_11e6_b296_cb$0),
     bin_shape_t = caml_call2(Bin_prot_Shape[12], _dU_, _dT_),
     create = Rec[1][2],
     apply_part = Rec[1][3],
     to_parts$1 = Rec[2],
     finalize$1 = Rec[3],
     M0 =
       [0,
        [0,
         [0,
          bin_size_t,
          bin_write_t,
          bin_read_t,
          bin_read_t$0,
          bin_shape_t,
          bin_writer_t,
          bin_reader_t,
          bin_t,
          t_of_sexp,
          sexp_of_t],
         create,
         apply_part],
        to_parts$1,
        finalize$1],
     _dV_ = M0[1],
     _dW_ = _dV_[1];
    caml_call3
     (CamlinternalMod[2],
      _bt_,
      M_only_functions,
      [0,
       [0,
        [0, _dW_[9], _dW_[10], _dW_[1], _dW_[2], _dW_[3], _dW_[4]],
        _dV_[2],
        _dV_[3]],
       M0[2],
       M0[3]]);
    var
     include$1 = caml_call1(Streamable_Remove_t[1], M0),
     Intermediate$1 = include$1[2],
     to_parts$2 = include$1[3],
     finalize$2 = include$1[4];
    return [0, Intermediate$1, to_parts$2, finalize$2];
   }
   var Fixpoint = [0, V1$50], V1$51 = [0];
   caml_call1(Ppx_inline_test_lib[6], cst_streamable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Main);
   var
    _bj_ = [0, cst_Elt_part$1],
    _bk_ = [0, cst_Elt_start],
    Streamable_Main =
      [0,
       Of_atomic[1],
       Of_atomic_rpc[1],
       Of_map[2],
       Of_map_rpc[2],
       function(_dN_, _dM_){
        var _dO_ = V1$11(_dN_, _dM_);
        return [0, _dO_[2], _dO_[3], _dO_[4]];
       },
       function(_dK_, _dJ_){
        var _dL_ = V1$12(_dK_, _dJ_);
        return [0, _dL_[2], _dL_[3], _dL_[4]];
       },
       function(_dG_){
        var
         _dH_ =
           [0,
            _dG_[13],
            _dG_[1],
            _dG_[2],
            _dG_[3],
            _dG_[4],
            _dG_[5],
            _dG_[6],
            _dG_[7],
            _dG_[8],
            _dG_[11],
            _dG_[10],
            _dG_[12],
            _dG_[9]];
        return function(_dI_){return V1$14(_dH_, _dI_);};
       },
       function(_dD_){
        var
         _dE_ =
           [0,
            _dD_[12],
            _dD_[1],
            _dD_[2],
            _dD_[3],
            _dD_[4],
            _dD_[5],
            _dD_[6],
            _dD_[7],
            _dD_[8],
            _dD_[10],
            _dD_[11],
            _dD_[9]];
        return function(_dF_){return V1$13(_dE_, _dF_);};
       },
       function(_dB_){
        var _dC_ = V3$4(_dB_);
        return [0, _dC_[5], _dC_[6], _dC_[7]];
       },
       function(_dz_){
        var _dA_ = V3$3(_dz_);
        return [0, _dA_[5], _dA_[6], _dA_[7]];
       },
       Of_tuple2[1],
       Of_tuple2_rpc[1],
       Of_tuple3[1],
       Of_tuple3_rpc[1],
       Of_tuple4[1],
       Of_tuple4_rpc[1],
       Of_tuple5[1],
       Of_tuple5_rpc[1],
       Of_tuple6[1],
       Of_tuple6_rpc[1],
       Of_tuple7[1],
       Of_tuple7_rpc[1],
       Of_tuple8[1],
       Of_tuple8_rpc[1],
       Of_tuple9[1],
       Of_tuple9_rpc[1],
       function(_dx_, _dw_){
        var _dy_ = V1$32(_dx_, _dw_);
        return [0, _dy_[2], _dy_[3], _dy_[4]];
       },
       function(_ds_, _dr_){
        var _dt_ = V1$31(_ds_, _dr_), _du_ = _dt_[1], _dv_ = _du_[1];
        return [0,
                [0,
                 [0,
                  _dv_[2],
                  _dv_[3],
                  _dv_[6],
                  _dv_[5],
                  _dv_[1],
                  _dv_[4],
                  _dv_[7],
                  _dv_[8]],
                 _du_[2],
                 _du_[3]],
                _dt_[2],
                _dt_[3]];
       },
       function(_dp_, _do_, _dn_){
        var _dq_ = V1$34(_dp_, _do_, _dn_);
        return [0, _dq_[2], _dq_[3], _dq_[4]];
       },
       function(_dj_, _di_, _dh_){
        var _dk_ = V1$33(_dj_, _di_, _dh_), _dl_ = _dk_[1], _dm_ = _dl_[1];
        return [0,
                [0,
                 [0,
                  _dm_[2],
                  _dm_[3],
                  _dm_[6],
                  _dm_[5],
                  _dm_[1],
                  _dm_[4],
                  _dm_[7],
                  _dm_[8]],
                 _dl_[2],
                 _dl_[3]],
                _dk_[2],
                _dk_[3]];
       },
       function(_df_, _de_, _dd_, _dc_){
        var _dg_ = V1$36(_df_, _de_, _dd_, _dc_);
        return [0, _dg_[2], _dg_[3], _dg_[4]];
       },
       function(_c__, _c9_, _c8_, _c7_){
        var
         _c$_ = V1$35(_c__, _c9_, _c8_, _c7_),
         _da_ = _c$_[1],
         _db_ = _da_[1];
        return [0,
                [0,
                 [0,
                  _db_[2],
                  _db_[3],
                  _db_[6],
                  _db_[5],
                  _db_[1],
                  _db_[4],
                  _db_[7],
                  _db_[8]],
                 _da_[2],
                 _da_[3]],
                _c$_[2],
                _c$_[3]];
       },
       V3$0,
       V3,
       function(_c5_){
        var _c6_ = V1$41(_c5_);
        return [0, _c6_[3], _c6_[4], _c6_[5]];
       },
       function(_c3_){
        var _c4_ = V1$40(_c3_);
        return [0, _c4_[3], _c4_[4], _c4_[5]];
       },
       function(_c1_){
        var _c2_ = V2$4(_c1_);
        return [0, _c2_[2], _c2_[3], _c2_[4]];
       },
       function(_cZ_){
        var _c0_ = V2$3(_cZ_);
        return [0, _c0_[2], _c0_[3], _c0_[4]];
       },
       function(_cX_, _cW_){
        var _cY_ = V1$46(_cX_, _cW_);
        return [0, _cY_[2], _cY_[3], _cY_[4]];
       },
       function(_cU_, _cT_){
        var _cV_ = V1$45(_cU_, _cT_);
        return [0, _cV_[2], _cV_[3], _cV_[4]];
       },
       function(_cR_){
        var _cS_ = V3$2(_cR_);
        return [0, _cS_[3], _cS_[4], _cS_[5]];
       },
       function(_cP_){
        var _cQ_ = V3$1(_cP_);
        return [0, _cQ_[3], _cQ_[4], _cQ_[5]];
       },
       V1$48,
       V1$47,
       Of_streamable[1],
       Of_streamable_rpc[1],
       Of_sexpable[1],
       Fixpoint[1],
       Fixpoint_rpc[1],
       Checked,
       Packed[1],
       Packed_rpc[1],
       [0,
        Checked,
        Packed,
        Packed_rpc,
        Fixpoint,
        Fixpoint_rpc,
        Of_atomic,
        Of_atomic_rpc,
        [0,
         function(A){
          var
           M = Common$0(A)[1],
           _cN_ = V2$2(A),
           _cO_ = caml_call1(caml_call1(Of_streamable[1], _cN_), M),
           include = caml_call1(Streamable_Remove_t[1], _cO_),
           Intermediate = include[2],
           to_parts = include[3],
           finalize = include[4];
          return [0, Intermediate, to_parts, finalize];
         },
         function(_cL_){
          var _cM_ = V3$2(_cL_);
          return [0, _cM_[3], _cM_[4], _cM_[5]];
         }],
        [0,
         function(A){
          var
           M = Common(A)[1],
           _cJ_ = V2$1(A),
           _cK_ = caml_call1(caml_call1(Of_streamable_rpc[1], _cJ_), M),
           include = caml_call1(Streamable_Remove_t[2], _cK_),
           Intermediate = include[2],
           to_parts = include[3],
           finalize = include[4];
          return [0, Intermediate, to_parts, finalize];
         },
         function(_cH_){
          var _cI_ = V3$1(_cH_);
          return [0, _cI_[3], _cI_[4], _cI_[5]];
         }],
        [0,
         function(_cE_){
          var
           _cF_ =
             [0,
              _cE_[13],
              _cE_[1],
              _cE_[2],
              _cE_[3],
              _cE_[4],
              _cE_[5],
              _cE_[6],
              _cE_[7],
              _cE_[8],
              _cE_[11],
              _cE_[10],
              _cE_[12],
              _cE_[9]];
          return function(_cG_){return V1$14(_cF_, _cG_);};
         }],
        [0,
         function(_cB_){
          var
           _cC_ =
             [0,
              _cB_[12],
              _cB_[1],
              _cB_[2],
              _cB_[3],
              _cB_[4],
              _cB_[5],
              _cB_[6],
              _cB_[7],
              _cB_[8],
              _cB_[10],
              _cB_[11],
              _cB_[9]];
          return function(_cD_){return V1$13(_cC_, _cD_);};
         }],
        [0, V2$2, V3$0],
        [0, V2$1, V3],
        [0,
         function(_cz_){
          var _cA_ = V1$41(_cz_);
          return [0, _cA_[3], _cA_[4], _cA_[5]];
         }],
        [0,
         function(_cx_){
          var _cy_ = V1$40(_cx_);
          return [0, _cy_[3], _cy_[4], _cy_[5]];
         }],
        Of_map,
        Of_map_rpc,
        [0,
         function(_cv_, _cu_){
          var _cw_ = V1$11(_cv_, _cu_);
          return [0, _cw_[2], _cw_[3], _cw_[4]];
         }],
        [0,
         function(_cs_, _cr_){
          var _ct_ = V1$12(_cs_, _cr_);
          return [0, _ct_[2], _ct_[3], _ct_[4]];
         }],
        [0,
         function(X){
          var
           _ck_ = X[1],
           _cl_ = _ck_[1],
           Plain =
             V1$44
              ([0,
                [0,
                 [0,
                  _cl_[1],
                  _cl_[2],
                  _cl_[3],
                  _cl_[4],
                  _cl_[5],
                  _cl_[6],
                  _cl_[7],
                  _cl_[8]],
                 _ck_[2],
                 _ck_[3]],
                X[2],
                X[3]]);
          function t_of_sexp(sexp_484){
           a:
           {
            if(0 === sexp_484[0]){
             var _co_ = sexp_484[1];
             b:
             if(_co_ !== cst_Elt_part$1){
              if(_co_ !== cst_Elt_start){
               if(_co_ === cst_elt_part) break b;
               if(_co_ !== cst_elt_start) break a;
              }
              return 0;
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5], error_source_482, sexp_484);
            }
            var _cp_ = sexp_484[1];
            if(! _cp_)
             return caml_call2
                     (Sexplib0_Sexp_conv_error[7], error_source_482, sexp_484);
            var _cq_ = _cp_[1];
            if(0 !== _cq_[0])
             return caml_call2
                     (Sexplib0_Sexp_conv_error[6], error_source_482, sexp_484);
            var tag_485 = _cq_[1];
            b:
            if(tag_485 !== cst_Elt_part$1){
             if(tag_485 !== cst_Elt_start){
              if(tag_485 === cst_elt_part) break b;
              if(tag_485 !== cst_elt_start) break a;
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[3], error_source_482, sexp_484);
            }
            var sexp_args_486 = _cp_[2];
            if(sexp_args_486 && ! sexp_args_486[2]){
             var
              arg0_487 = sexp_args_486[1],
              res0_488 = caml_call1(X[1][1][9], arg0_487);
             return [0, res0_488];
            }
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],
                     error_source_482,
                     tag_485,
                     sexp_484);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[8], error_source_482, sexp_484);
          }
          function sexp_of_t(param){
           if(! param) return _bk_;
           var
            arg0_489 = param[1],
            res0_490 = caml_call1(X[1][1][10], arg0_489);
           return [1, [0, _bj_, [0, res0_490, 0]]];
          }
          var
           _cm_ = Plain[1],
           _cn_ = _cm_[1],
           include =
             V1
              ([0,
                [0,
                 [0,
                  _cn_[2],
                  _cn_[3],
                  _cn_[6],
                  _cn_[5],
                  _cn_[1],
                  _cn_[4],
                  _cn_[7],
                  _cn_[8]],
                 _cm_[2],
                 _cm_[3]],
                Plain[3],
                Plain[2]],
               [0, t_of_sexp, sexp_of_t]),
           Intermediate = include[1],
           to_parts = include[2],
           finalize = include[3];
          return [0, Intermediate, to_parts, finalize];
         },
         function(_ci_){
          var _cj_ = V2$4(_ci_);
          return [0, _cj_[2], _cj_[3], _cj_[4]];
         }],
        [0,
         function(_ce_){
          var _cf_ = V1$44(_ce_), _cg_ = _cf_[1], _ch_ = _cg_[1];
          return [0,
                  [0,
                   [0,
                    _ch_[2],
                    _ch_[3],
                    _ch_[6],
                    _ch_[5],
                    _ch_[1],
                    _ch_[4],
                    _ch_[7],
                    _ch_[8]],
                   _cg_[2],
                   _cg_[3]],
                  _cf_[3],
                  _cf_[2]];
         },
         function(_cc_){
          var _cd_ = V2$3(_cc_);
          return [0, _cd_[2], _cd_[3], _cd_[4]];
         }],
        [0,
         function(_ca_, _b$_){
          var _cb_ = V1$46(_ca_, _b$_);
          return [0, _cb_[2], _cb_[3], _cb_[4]];
         }],
        [0,
         function(_b9_, _b8_){
          var _b__ = V1$45(_b9_, _b8_);
          return [0, _b__[2], _b__[3], _b__[4]];
         }],
        [0,
         function(Key){
          var
           C = Common$2(Key),
           _b5_ = C[1],
           _b6_ = V2$2(C[2]),
           _b7_ = caml_call1(caml_call1(Of_streamable[1], _b6_), _b5_),
           include = caml_call1(Streamable_Remove_t[1], _b7_),
           Intermediate = include[2],
           to_parts = include[3],
           finalize = include[4];
          return [0, Intermediate, to_parts, finalize];
         },
         function(_b3_){
          var _b4_ = V3$4(_b3_);
          return [0, _b4_[5], _b4_[6], _b4_[7]];
         }],
        [0,
         function(Key){
          var
           C = Common$1(Key),
           _b0_ = C[1],
           _b1_ = V2$1(C[2]),
           _b2_ = caml_call1(caml_call1(Of_streamable_rpc[1], _b1_), _b0_),
           include = caml_call1(Streamable_Remove_t[2], _b2_),
           Intermediate = include[2],
           to_parts = include[3],
           finalize = include[4];
          return [0, Intermediate, to_parts, finalize];
         },
         function(_bY_){
          var _bZ_ = V3$3(_bY_);
          return [0, _bZ_[5], _bZ_[6], _bZ_[7]];
         }],
        [0, V1$48],
        [0, V1$47],
        Of_streamable,
        Of_streamable_rpc,
        Of_tuple2,
        Of_tuple2_rpc,
        Of_tuple3,
        Of_tuple3_rpc,
        Of_tuple4,
        Of_tuple4_rpc,
        Of_tuple5,
        Of_tuple5_rpc,
        Of_tuple6,
        Of_tuple6_rpc,
        Of_tuple7,
        Of_tuple7_rpc,
        Of_tuple8,
        Of_tuple8_rpc,
        Of_tuple9,
        Of_tuple9_rpc,
        [0,
         function(_bW_, _bV_){
          var _bX_ = V1$32(_bW_, _bV_);
          return [0, _bX_[2], _bX_[3], _bX_[4]];
         }],
        [0,
         function(_bR_, _bQ_){
          var _bS_ = V1$31(_bR_, _bQ_), _bT_ = _bS_[1], _bU_ = _bT_[1];
          return [0,
                  [0,
                   [0,
                    _bU_[2],
                    _bU_[3],
                    _bU_[6],
                    _bU_[5],
                    _bU_[1],
                    _bU_[4],
                    _bU_[7],
                    _bU_[8]],
                   _bT_[2],
                   _bT_[3]],
                  _bS_[2],
                  _bS_[3]];
         }],
        [0,
         function(_bO_, _bN_, _bM_){
          var _bP_ = V1$34(_bO_, _bN_, _bM_);
          return [0, _bP_[2], _bP_[3], _bP_[4]];
         }],
        [0,
         function(_bI_, _bH_, _bG_){
          var _bJ_ = V1$33(_bI_, _bH_, _bG_), _bK_ = _bJ_[1], _bL_ = _bK_[1];
          return [0,
                  [0,
                   [0,
                    _bL_[2],
                    _bL_[3],
                    _bL_[6],
                    _bL_[5],
                    _bL_[1],
                    _bL_[4],
                    _bL_[7],
                    _bL_[8]],
                   _bK_[2],
                   _bK_[3]],
                  _bJ_[2],
                  _bJ_[3]];
         }],
        [0,
         function(_bE_, _bD_, _bC_, _bB_){
          var _bF_ = V1$36(_bE_, _bD_, _bC_, _bB_);
          return [0, _bF_[2], _bF_[3], _bF_[4]];
         }],
        [0,
         function(_bx_, _bw_, _bv_, _bu_){
          var
           _by_ = V1$35(_bx_, _bw_, _bv_, _bu_),
           _bz_ = _by_[1],
           _bA_ = _bz_[1];
          return [0,
                  [0,
                   [0,
                    _bA_[2],
                    _bA_[3],
                    _bA_[6],
                    _bA_[5],
                    _bA_[1],
                    _bA_[4],
                    _bA_[7],
                    _bA_[8]],
                   _bz_[2],
                   _bz_[3]],
                  _by_[2],
                  _by_[3]];
         }],
        Of_sexpable,
        V1$51]];
   runtime.caml_register_global(779, Streamable_Main, cst_Streamable_Main);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__State_rpc_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_State_rpc_intf = "Streamable__State_rpc_intf",
    cst_streamable = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_State_rpc_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Expect_test_collector[6][1], "src/state_rpc_intf.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_streamable, "state_rpc_intf.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_streamable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_State_rpc_intf);
   var Streamable_State_rpc_intf = [0];
   runtime.caml_register_global
    (11, Streamable_State_rpc_intf, cst_Streamable_State_rpc_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__State_rpc
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_kernel__Deferred_or_error, Async_kernel__Ivar, Async_kernel__Pipe, Async_rpc_kernel__Rpc, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Core, Core__Error, Core__List, Core__Or_error, Core__Queue, Core__Result, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Streamable__State_rpc_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_State_rpc_incom$0 =
      "Streamable.State_rpc: incomplete state message",
    cst_Streamable_State_rpc_incom =
      "Streamable.State_rpc: incomplete update message",
    cst_Streamable_State_rpc = "Streamable__State_rpc",
    cst_a = "a",
    cst_error$1 = "error",
    cst_query$1 = "query",
    cst_response$1 = "response",
    cst_src_state_rpc_ml_Response_$0 = "src/state_rpc.ml.Response.t",
    cst_state_part = "state_part",
    cst_streamable = "streamable",
    cst_t$1 = "t",
    cst_update_part = "update_part";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Core_Result = global_data.Core__Result,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Core_Or_error = global_data.Core__Or_error,
    Core_Queue = global_data.Core__Queue,
    Async_kernel = global_data.Async_kernel,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Core_Error = global_data.Core__Error,
    Core_List = global_data.Core__List,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_State_rpc);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Expect_test_collector[6][1], "src/state_rpc.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_streamable, "state_rpc.ml");
   var
    _a_ = caml_call1(Bin_shape[3][1], cst_a),
    _b_ = caml_call1(Bin_shape[4][1], "src/state_rpc.ml:31:14"),
    _c_ =
      [0,
       [0, "Part", [0, caml_call2(Bin_prot_Shape[11], _b_, _a_), 0]],
       [0, [0, "Done", 0], 0]],
    _d_ = caml_call1(Bin_prot_Shape[5], _c_),
    _e_ = [0, caml_call1(Bin_shape[3][1], cst_a), 0],
    _f_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), _e_, _d_], 0],
    _g_ = caml_call1(Bin_shape[4][1], "src/state_rpc.ml:30:2"),
    group = caml_call2(Bin_prot_Shape[2], _g_, _f_),
    cst_t = cst_t$1,
    _h_ = [1, "src/state_rpc.ml.Part_or_done.t"];
   function bin_shape_t(a){
    var _aA_ = caml_call1(Bin_shape[2][1], cst_t);
    return caml_call1(caml_call2(Bin_prot_Shape[10], group, _aA_), [0, a, 0]);
   }
   function bin_size_t(size_of_a, param){
    if(! param) return 1;
    var v1 = param[1], _az_ = caml_call1(size_of_a, v1);
    return caml_call2(Bin_prot_Common[23], 1, _az_);
   }
   function bin_write_t(write_a, buf, pos, param){
    if(! param) return caml_call3(Bin_prot_Write[30], buf, pos, 1);
    var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
    return caml_call3(write_a, buf, pos$0, v1);
   }
   function bin_read_t(of_a, buf, pos_ref){
    var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
    if(0 !== match)
     return 1 === match ? 0 : caml_call2(Bin_prot_Common[18], _h_, pos_ref[1]);
    var arg_1 = caml_call2(of_a, buf, pos_ref);
    return [0, arg_1];
   }
   var
    _i_ = caml_call1(Bin_shape[3][1], cst_update_part),
    _j_ = caml_call1(Bin_shape[4][1], "src/state_rpc.ml:39:16"),
    _k_ =
      [0,
       [0,
        "Update",
        [0, bin_shape_t(caml_call2(Bin_prot_Shape[11], _j_, _i_)), 0]],
       0],
    _l_ = caml_call1(Bin_shape[3][1], cst_state_part),
    _m_ = caml_call1(Bin_shape[4][1], "src/state_rpc.ml:38:16"),
    _n_ =
      [0,
       [0,
        "State",
        [0, bin_shape_t(caml_call2(Bin_prot_Shape[11], _m_, _l_)), 0]],
       _k_],
    _o_ = caml_call1(Bin_prot_Shape[5], _n_),
    _p_ = [0, caml_call1(Bin_shape[3][1], cst_update_part), 0],
    _q_ = [0, caml_call1(Bin_shape[3][1], cst_state_part), _p_],
    _r_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), _q_, _o_], 0],
    _s_ = caml_call1(Bin_shape[4][1], "src/state_rpc.ml:37:2"),
    group$0 = caml_call2(Bin_prot_Shape[2], _s_, _r_),
    cst_Cannot_write_state_parts_t =
      "Cannot write state parts to State_rpc.Direct_writer after finalising initial state",
    _u_ = [0, 0],
    cst_Cannot_write_update_parts_ =
      "Cannot write update parts to State_rps.Direct_writer before finalising initial state",
    _v_ = [1, 0];
   function is_state_finalised(t){
    return caml_call1(Async_kernel_Ivar[17], t[2]);
   }
   function state_finalised(t){
    return caml_call1(Async_kernel_Ivar[18], t[2]);
   }
   function raise_if_finalised(t){
    var _ay_ = is_state_finalised(t);
    if(! _ay_) return _ay_;
    var
     _ax_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Cannot_write_state_parts_t);
    return caml_call1(Core[255], _ax_);
   }
   function write_state_without_pushback_e(t, state){
    raise_if_finalised(t);
    return caml_call2(Async_rpc_kernel_Rpc[8][8][2], t[1], [0, [0, state]]);
   }
   function finalise_state_without_pushbac(t){
    raise_if_finalised(t);
    return 17724 <= caml_call2(Async_rpc_kernel_Rpc[8][8][2], t[1], _u_)
            ? (caml_call2(Async_kernel_Ivar[14], t[2], 0), 17724)
            : -1025106484;
   }
   function raise_if_not_finalised(t){
    var _aw_ = 1 - is_state_finalised(t);
    if(! _aw_) return _aw_;
    var
     _av_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Cannot_write_update_parts_);
    return caml_call1(Core[255], _av_);
   }
   function write_update_without_pushback_(t, update){
    raise_if_not_finalised(t);
    return caml_call2(Async_rpc_kernel_Rpc[8][8][2], t[1], [1, [0, update]]);
   }
   function finalise_update_without_pushba(t){
    raise_if_not_finalised(t);
    return caml_call2(Async_rpc_kernel_Rpc[8][8][2], t[1], _v_);
   }
   function close(t){return caml_call1(Async_rpc_kernel_Rpc[8][8][3], t[1]);}
   function closed(t){return caml_call1(Async_rpc_kernel_Rpc[8][8][4], t[1]);}
   function flushed(t){
    return caml_call1(Async_rpc_kernel_Rpc[8][8][5], t[1]);
   }
   function is_closed(t){
    return caml_call1(Async_rpc_kernel_Rpc[8][8][6], t[1]);
   }
   var
    create = Async_rpc_kernel_Rpc[8][8][8][2],
    flushed_or_closed = Async_rpc_kernel_Rpc[8][8][8][3],
    cst_Can_t_add_writer_to_State_ =
      "Can't add writer to State_rpc.Direct_writer.Group until it has finalised its initial state",
    _w_ = [1, 0];
   function add_exn(t, writer){
    if(1 - is_state_finalised(writer)){
     var
      _au_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Can_t_add_writer_to_State_);
     caml_call1(Core[255], _au_);
    }
    return caml_call2(Async_rpc_kernel_Rpc[8][8][8][5], t, writer[1]);
   }
   function remove(t, writer){
    return caml_call2(Async_rpc_kernel_Rpc[8][8][8][6], t, writer[1]);
   }
   function write_update_without_pushback(t, update){
    return caml_call2(Async_rpc_kernel_Rpc[8][8][8][8], t, [1, [0, update]]);
   }
   function finalise_update_without_pushba$0(t){
    return caml_call2(Async_rpc_kernel_Rpc[8][8][8][8], t, _w_);
   }
   var length = Async_rpc_kernel_Rpc[8][8][8][10];
   function close_all(t){
    var
     _as_ = Async_rpc_kernel_Rpc[8][8][3],
     _at_ = caml_call1(Async_rpc_kernel_Rpc[8][8][8][9], t);
    return caml_call2(Core_List[19], _at_, _as_);
   }
   var
    Group =
      [0,
       create,
       flushed_or_closed,
       add_exn,
       remove,
       write_update_without_pushback,
       finalise_update_without_pushba$0,
       length,
       close_all];
   function description(X){return X[14][3];}
   function dispatch(metadata, X){return caml_call1(X[14][1], metadata);}
   function implement(on_exception, X){
    return caml_call1(X[14][2], on_exception);
   }
   function bin_query_shape(X){return X[10][1];}
   function bin_state_shape(X){return X[11][1][1][8][1];}
   function bin_update_shape(X){return X[12][1][1][8][1];}
   caml_call1(Ppx_inline_test_lib[6], cst_streamable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_State_rpc);
   var
    cst_t$0 = cst_t$1,
    cst_src_state_rpc_ml_Response_ = cst_src_state_rpc_ml_Response_$0,
    _t_ = [1, cst_src_state_rpc_ml_Response_$0],
    cst_query = cst_query$1,
    cst_src_state_rpc_ml_150_4 = "src/state_rpc.ml:150:4",
    cst_query$0 = cst_query$1,
    cst_response = cst_response$1,
    cst_src_state_rpc_ml_152_4 = "src/state_rpc.ml:152:4",
    cst_response$0 = cst_response$1,
    cst_error = cst_error$1,
    cst_src_state_rpc_ml_155_4 = "src/state_rpc.ml:155:4",
    cst_error$0 = cst_error$1,
    _x_ = [0, 0],
    _y_ =
      [0,
       [11, "Streamable.State_rpc: EOF before receiving complete ", [2, 0, 0]],
       "Streamable.State_rpc: EOF before receiving complete %s"],
    cst_state = "state",
    _z_ =
      [0,
       [11, cst_Streamable_State_rpc_incom$0, 0],
       cst_Streamable_State_rpc_incom$0],
    cst_update = "update",
    _A_ =
      [0,
       [11, cst_Streamable_State_rpc_incom, 0],
       cst_Streamable_State_rpc_incom],
    Streamable_State_rpc =
      [0,
       description,
       dispatch,
       implement,
       bin_query_shape,
       bin_state_shape,
       bin_update_shape,
       [0,
        write_state_without_pushback_e,
        finalise_state_without_pushbac,
        is_state_finalised,
        state_finalised,
        write_update_without_pushback_,
        finalise_update_without_pushba,
        close,
        closed,
        flushed,
        is_closed,
        Group],
       function(X){
        var
         _D_ = X[3],
         _E_ = [0, [0, caml_call1(Bin_shape[2][1], cst_query), 0, _D_], 0],
         _F_ = caml_call1(Bin_shape[4][1], cst_src_state_rpc_ml_150_4),
         group = caml_call2(Bin_prot_Shape[2], _F_, _E_),
         _G_ = caml_call1(Bin_shape[2][1], cst_query$0),
         bin_shape_query =
           caml_call1(caml_call2(Bin_prot_Shape[10], group, _G_), 0),
         bin_size_query = X[4],
         bin_write_query = X[5],
         bin_writer_query = [0, bin_size_query, bin_write_query],
         bin_read_query = X[8],
         bin_read_query$0 = X[7],
         bin_reader_query = [0, bin_read_query$0, bin_read_query],
         bin_query = [0, bin_shape_query, bin_writer_query, bin_reader_query],
         update_part = X[12][1][1][5],
         state_part = X[11][1][1][5],
         _B_ = caml_call1(Bin_shape[2][1], cst_t$0),
         _C_ =
           caml_call1
            (caml_call2(Bin_prot_Shape[10], group$0, _B_),
             [0, state_part, [0, update_part, 0]]),
         _H_ = [0, [0, caml_call1(Bin_shape[2][1], cst_response), 0, _C_], 0],
         _I_ = caml_call1(Bin_shape[4][1], cst_src_state_rpc_ml_152_4),
         group$1 = caml_call2(Bin_prot_Shape[2], _I_, _H_),
         _J_ = caml_call1(Bin_shape[2][1], cst_response$0),
         bin_shape_response =
           caml_call1(caml_call2(Bin_prot_Shape[10], group$1, _J_), 0);
        function bin_size_response(v){
         var
          size_of_update_part = X[12][1][1][1],
          size_of_state_part = X[11][1][1][1];
         if(0 === v[0]){
          var v1 = v[1], _aq_ = bin_size_t(size_of_state_part, v1);
          return caml_call2(Bin_prot_Common[23], 1, _aq_);
         }
         var v1$0 = v[1], _ar_ = bin_size_t(size_of_update_part, v1$0);
         return caml_call2(Bin_prot_Common[23], 1, _ar_);
        }
        function bin_write_response(buf, pos$1, v){
         var
          write_update_part = X[12][1][1][2],
          write_state_part = X[11][1][1][2];
         if(0 === v[0]){
          var v1 = v[1], pos = caml_call3(Bin_prot_Write[30], buf, pos$1, 0);
          return bin_write_t(write_state_part, buf, pos, v1);
         }
         var
          v1$0 = v[1],
          pos$0 = caml_call3(Bin_prot_Write[30], buf, pos$1, 1);
         return bin_write_t(write_update_part, buf, pos$0, v1$0);
        }
        var bin_writer_response = [0, bin_size_response, bin_write_response];
        function bin_read_response(buf, pos_ref, vint){
         return caml_call2
                 (Bin_prot_Common[19],
                  cst_src_state_rpc_ml_Response_,
                  pos_ref[1]);
        }
        function bin_read_response$0(buf, pos_ref){
         var
          of_update_part = X[12][1][1][3],
          of_state_part = X[11][1][1][3],
          match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
         if(0 === match){
          var arg_1$0 = bin_read_t(of_state_part, buf, pos_ref);
          return [0, arg_1$0];
         }
         if(1 !== match)
          return caml_call2(Bin_prot_Common[18], _t_, pos_ref[1]);
         var arg_1 = bin_read_t(of_update_part, buf, pos_ref);
         return [1, arg_1];
        }
        var
         bin_reader_response = [0, bin_read_response$0, bin_read_response],
         bin_response =
           [0, bin_shape_response, bin_writer_response, bin_reader_response],
         _K_ = Core_Error[40][2][9],
         _L_ = [0, [0, caml_call1(Bin_shape[2][1], cst_error), 0, _K_], 0],
         _M_ = caml_call1(Bin_shape[4][1], cst_src_state_rpc_ml_155_4),
         group$2 = caml_call2(Bin_prot_Shape[2], _M_, _L_),
         _N_ = caml_call1(Bin_shape[2][1], cst_error$0),
         bin_shape_error =
           caml_call1(caml_call2(Bin_prot_Shape[10], group$2, _N_), 0),
         bin_size_error = Core_Error[40][2][5],
         bin_write_error = Core_Error[40][2][6],
         bin_writer_error = [0, bin_size_error, bin_write_error],
         bin_read_error = Core_Error[40][2][8],
         bin_read_error$0 = Core_Error[40][2][7],
         bin_reader_error = [0, bin_read_error$0, bin_read_error],
         bin_error = [0, bin_shape_error, bin_writer_error, bin_reader_error],
         _O_ = 0,
         _P_ = X[2],
         _Q_ = X[1],
         _R_ = X[13] ? _x_ : 0,
         rpc =
           caml_call7
            (Async_rpc_kernel_Rpc[8][3],
             _R_,
             _Q_,
             _P_,
             bin_query,
             bin_response,
             bin_error,
             _O_);
        function write_msg(w, pipe, constructor){
         var
          _ao_ =
            caml_call3
             (Async_kernel_Pipe[54],
              pipe,
              w,
              function(part){return caml_call1(constructor, [0, part]);});
         return caml_call2
                 (Async_kernel_Deferred[16][4][2],
                  _ao_,
                  function(param){
                   var _ap_ = caml_call1(constructor, 0);
                   return caml_call2(Async_kernel_Pipe[32], w, _ap_);
                  });
        }
        function read_msg(X, r, match, noun){
         function loop(acc){
          var
           _al_ = caml_call2(Async_kernel_Pipe[35], 0, r),
           _am_ = caml_call1(Async_kernel_Deferred[33], _al_);
          return caml_call2
                  (Async_kernel_Deferred_or_error[19][4][2],
                   _am_,
                   function(param){
                    if(typeof param === "number")
                     return caml_call2
                             (Async_kernel_Deferred_or_error[27], _y_, noun);
                    var msg = param[2], match$0 = caml_call1(match, msg);
                    if(0 !== match$0[0]){
                     var e = match$0[1];
                     return caml_call1(Async_kernel_Deferred[12], [1, e]);
                    }
                    var match$1 = match$0[1];
                    if(match$1){
                     var part = match$1[1];
                     return loop(caml_call2(X[1][3], acc, part));
                    }
                    var _an_ = caml_call1(X[3], acc);
                    return caml_call1
                            (Async_kernel_Deferred_or_error[19][1], _an_);
                   });
         }
         return loop(caml_call1(X[1][2], 0));
        }
        var
         description = caml_call1(Async_rpc_kernel_Rpc[8][20], rpc),
         include = X[11],
         Intermediate = include[1],
         to_parts = include[2],
         finalize = include[3],
         State = [0, Intermediate, to_parts, finalize],
         include$0 = X[12],
         Intermediate$0 = include$0[1],
         to_parts$0 = include$0[2],
         finalize$0 = include$0[3],
         Update = [0, Intermediate$0, to_parts$0, finalize$0];
        function implement(on_exception, f){
         return caml_call3
                 (Async_rpc_kernel_Rpc[8][7],
                  on_exception,
                  rpc,
                  function(c, q){
                   var _ah_ = caml_call2(f, c, q);
                   return caml_call2
                           (Async_kernel_Deferred_or_error[19][4][2],
                            _ah_,
                            function(param){
                             var
                              update_pipes = param[2],
                              state_pipe = param[1],
                              _ai_ =
                                caml_call3
                                 (Async_kernel_Pipe[5],
                                  0,
                                  1,
                                  function(w){
                                   var _aj_ = caml_call1(Async_kernel_Pipe[18], w);
                                   caml_call2
                                    (Async_kernel[12],
                                     _aj_,
                                     function(param){
                                      var
                                       match =
                                         caml_call3(Async_kernel_Pipe[38], 0, 0, update_pipes);
                                      if(typeof match !== "number"){
                                       var queue = match[2];
                                       caml_call2
                                        (Core_Queue[16],
                                         queue,
                                         function(update_pipe){
                                          return caml_call1(Async_kernel_Pipe[16], update_pipe);
                                         });
                                      }
                                      return caml_call1(Async_kernel_Pipe[16], update_pipes);
                                     });
                                   var
                                    _ak_ = write_msg(w, state_pipe, function(x){return [0, x];});
                                   return caml_call2
                                           (Async_kernel_Deferred[16][4][2],
                                            _ak_,
                                            function(param){
                                             return caml_call4
                                                     (Async_kernel_Pipe[51],
                                                      0,
                                                      0,
                                                      update_pipes,
                                                      function(update_pipe){
                                                       return write_msg
                                                               (w, update_pipe, function(x){return [1, x];});
                                                      });
                                            });
                                  });
                             return caml_call1
                                     (Async_kernel_Deferred_or_error[19][1], _ai_);
                            });
                  });
        }
        function implement$0(on_exception, f){
         return implement
                 (on_exception,
                  function(c, q){
                   var _ac_ = caml_call2(f, c, q);
                   return caml_call2
                           (Async_kernel_Deferred_or_error[19][4][2],
                            _ac_,
                            function(param){
                             var
                              updates = param[2],
                              state = param[1],
                              _ad_ =
                                caml_call2
                                 (Async_kernel_Pipe[57],
                                  updates,
                                  function(update){
                                   var _ag_ = caml_call1(Update[2], update);
                                   return caml_call1(Async_kernel_Pipe[13], _ag_);
                                  }),
                              _ae_ = caml_call1(State[2], state),
                              _af_ = [0, caml_call1(Async_kernel_Pipe[13], _ae_), _ad_];
                             return caml_call1
                                     (Async_kernel_Deferred_or_error[19][1], _af_);
                            });
                  });
        }
        function dispatch(metadata, conn, query){
         var
          _S_ = Core_Or_error[27],
          _T_ =
            caml_call4
             (Async_rpc_kernel_Rpc[8][10], metadata, rpc, conn, query),
          _U_ = caml_call2(Async_kernel_Deferred[16][3], _T_, _S_);
         return caml_call2
                 (Async_kernel_Deferred_or_error[19][4][2],
                  _U_,
                  function(param){
                   var
                    r = param[1],
                    _V_ =
                      read_msg
                       (State,
                        r,
                        function(param){
                         if(0 !== param[0])
                          return caml_call1(Core_Or_error[42], _z_);
                         var x = param[1];
                         return [0, x];
                        },
                        cst_state);
                   return caml_call2
                           (Async_kernel_Deferred_or_error[19][4][2],
                            _V_,
                            function(initial_state){
                             var
                              updates =
                                caml_call3
                                 (Async_kernel_Pipe[5],
                                  0,
                                  1,
                                  function(w){
                                   function loop(param){
                                    var
                                     _Y_ = caml_call1(Async_kernel_Pipe[18], w),
                                     _Z_ =
                                       [0,
                                        caml_call2
                                         (Async_kernel_Deferred[27], _Y_, function(param){return 0;}),
                                        0],
                                     ___ = Core_Result[32],
                                     _X_ =
                                       read_msg
                                        (Update,
                                         r,
                                         function(param){
                                          if(0 === param[0])
                                           return caml_call1(Core_Or_error[42], _A_);
                                          var x = param[1];
                                          return [0, x];
                                         },
                                         cst_update),
                                     _$_ =
                                       [0, caml_call2(Async_kernel_Deferred[27], _X_, ___), _Z_],
                                     _aa_ = caml_call1(Async_kernel_Deferred[29], _$_);
                                    return caml_call2
                                            (Async_kernel_Deferred[16][4][2],
                                             _aa_,
                                             function(param){
                                              if(! param)
                                               return caml_call1(Async_kernel_Deferred[16][1], 0);
                                              var
                                               update = param[1],
                                               _ab_ = caml_call2(Async_kernel_Pipe[32], w, update);
                                              return caml_call2
                                                      (Async_kernel_Deferred[16][4][2],
                                                       _ab_,
                                                       function(param){return loop(0);});
                                             });
                                   }
                                   var _W_ = loop(0);
                                   return caml_call2
                                           (Async_kernel_Deferred[16][4][2],
                                            _W_,
                                            function(param){
                                             caml_call1(Async_kernel_Pipe[16], r);
                                             return caml_call1(Async_kernel_Deferred[16][1], 0);
                                            });
                                  });
                             return caml_call1
                                     (Async_kernel_Deferred_or_error[19][1],
                                      [0, initial_state, updates]);
                            });
                  });
        }
        var
         name = X[1],
         version = X[2],
         bin_shape_query$0 = X[3],
         bin_size_query$0 = X[4],
         bin_write_query$0 = X[5],
         bin_writer_query$0 = X[6],
         bin_read_query$1 = X[7],
         bin_read_query$2 = X[8],
         bin_reader_query$0 = X[9],
         bin_query$0 = X[10],
         State$0 = X[11],
         Update$0 = X[12],
         client_pushes_back = X[13],
         rpc$0 =
           [0,
            name,
            version,
            bin_shape_query$0,
            bin_size_query$0,
            bin_write_query$0,
            bin_writer_query$0,
            bin_read_query$1,
            bin_read_query$2,
            bin_reader_query$0,
            bin_query$0,
            State$0,
            Update$0,
            client_pushes_back,
            [0, dispatch, implement$0, description]];
        function implement_direct(on_exception, f){
         return caml_call3
                 (Async_rpc_kernel_Rpc[8][9],
                  on_exception,
                  rpc,
                  function(c, q, writer){
                   return caml_call3
                           (f, c, q, [0, writer, caml_call1(Async_kernel_Ivar[12], 0)]);
                  });
        }
        return [0, rpc$0, implement, implement_direct];
       }];
   runtime.caml_register_global
    (73, Streamable_State_rpc, cst_Streamable_State_rpc);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Versioned_state_rpc_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Versioned_state = "Streamable__Versioned_state_rpc_intf",
    cst_streamable = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Versioned_state);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Expect_test_collector[6][1], "src/versioned_state_rpc_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_streamable, "versioned_state_rpc_intf.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_streamable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Versioned_state);
   var Streamable_Versioned_state_rpc = [0];
   runtime.caml_register_global
    (11, Streamable_Versioned_state_rpc, cst_Streamable_Versioned_state);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Callers_rpc_version_table
//# unitInfo: Requires: Async_rpc_kernel__Versioned_rpc, Base__Or_error, Core, Core__Hashtbl, Core__Int, Core__Or_error, Core__Set, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Callers_rpc_ver = "Streamable__Callers_rpc_version_table",
    cst_rpc_name = "rpc_name",
    cst_streamable = "streamable",
    cst_version = "version";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Hashtbl = global_data.Core__Hashtbl,
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Or_error = global_data.Core__Or_error,
    Async_rpc_kernel_Versioned_rpc =
      global_data.Async_rpc_kernel__Versioned_rpc,
    Core_Int = global_data.Core__Int,
    Core_Set = global_data.Core__Set,
    Base_Or_error = global_data.Base__Or_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Callers_rpc_ver);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Expect_test_collector[6][1], "src/callers_rpc_version_table.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_streamable, "callers_rpc_version_table.ml");
   var
    _a_ = [0, cst_version],
    _b_ = [0, cst_rpc_name],
    cst_rpc_registered_multiple_ti = "rpc registered multiple times",
    _c_ = [0, cst_version],
    _d_ = [0, cst_rpc_name],
    cst_unknown_rpc = "unknown rpc",
    _e_ = [0, "callee_versions"],
    _f_ = [0, "caller_versions"],
    _g_ = [0, cst_rpc_name],
    cst_caller_and_callee_share_no =
      "caller and callee share no common versions for rpc";
   function create(rpc_name){
    return [0, rpc_name, caml_call3(Core_Int[108][5], 0, 0, 0)];
   }
   function data(t){return caml_call1(Core_Hashtbl[67], t[2]);}
   function add_exn(param, version, data){
    var table = param[2], rpc_name = param[1];
    if(17724 <= caml_call3(Core_Hashtbl[37], table, version, data)) return 0;
    var
     _s_ = [0, [1, [0, _a_, [0, caml_call1(Core[363], version), 0]]], 0],
     _t_ = [0, [1, [0, _b_, [0, caml_call1(Core[484], rpc_name), 0]]], _s_],
     _u_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_rpc_registered_multiple_ti),
         _t_]];
    return caml_call1(Core[255], _u_);
   }
   function lookup_most_recent(t, callee_menu){
    var
     rpc_name = t[1],
     callee_versions =
       caml_call2(Async_rpc_kernel_Versioned_rpc[1][7], callee_menu, rpc_name),
     _h_ = caml_call1(Core_Hashtbl[66], t[2]),
     caller_versions = caml_call1(Core_Int[104][7], _h_),
     _j_ = caml_call2(Core_Set[16], callee_versions, caller_versions),
     match = caml_call1(Core_Set[60], _j_);
    function _i_(version){
     var match = caml_call2(Core_Hashtbl[55], t[2], version);
     if(match){var data = match[1]; return [0, data];}
     var
      _p_ = [0, [1, [0, _c_, [0, caml_call1(Core[363], version), 0]]], 0],
      _q_ = [0, [1, [0, _d_, [0, caml_call1(Core[484], rpc_name), 0]]], _p_],
      _r_ = [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_unknown_rpc), _q_]];
     return caml_call1(Core_Or_error[40], _r_);
    }
    if(match)
     var version = match[1], _k_ = [0, version];
    else
     var
      _l_ =
        [0,
         [1, [0, _e_, [0, caml_call1(Core_Int[104][27], callee_versions), 0]]],
         0],
      _m_ =
        [0,
         [1, [0, _f_, [0, caml_call1(Core_Int[104][27], caller_versions), 0]]],
         _l_],
      _n_ = [0, [1, [0, _g_, [0, caml_call1(Core[484], rpc_name), 0]]], _m_],
      _o_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_caller_and_callee_share_no),
          _n_]],
      _k_ = caml_call1(Core_Or_error[40], _o_);
    return caml_call2(Base_Or_error[25][4][2], _k_, _i_);
   }
   caml_call1(Ppx_inline_test_lib[6], cst_streamable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Callers_rpc_ver);
   var
    Streamable_Callers_rpc_version =
      [0, create, add_exn, lookup_most_recent, data];
   runtime.caml_register_global
    (29, Streamable_Callers_rpc_version, cst_Streamable_Callers_rpc_ver);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Versioned_state_rpc
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred_or_error, Async_kernel__Pipe, Async_rpc_kernel__Versioned_rpc, Core__List, Core__Or_error, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Streamable__Callers_rpc_version_table, Streamable__State_rpc, Streamable__Versioned_state_rpc_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Versioned_state = "Streamable__Versioned_state_rpc",
    cst_streamable = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Streamable_State_rpc = global_data.Streamable__State_rpc,
    Streamable_Callers_rpc_version =
      global_data.Streamable__Callers_rpc_version_table,
    Core_List = global_data.Core__List,
    Core_Or_error = global_data.Core__Or_error,
    Async_rpc_kernel_Versioned_rpc =
      global_data.Async_rpc_kernel__Versioned_rpc,
    Async_kernel = global_data.Async_kernel,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Versioned_state);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Expect_test_collector[6][1], "src/versioned_state_rpc.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_streamable, "versioned_state_rpc.ml");
   function Make(Model){
    var
     name = Model[1],
     registry = caml_call1(Streamable_Callers_rpc_version[1], name);
    function dispatch_multi(conn_with_menu, query){
     var
      conn = caml_call1(Async_rpc_kernel_Versioned_rpc[2][3], conn_with_menu),
      menu = caml_call1(Async_rpc_kernel_Versioned_rpc[2][4], conn_with_menu),
      match = caml_call2(Streamable_Callers_rpc_version[3], registry, menu);
     if(0 === match[0]){
      var dispatch = match[1];
      return caml_call2(dispatch, conn, query);
     }
     var e = match[1];
     return caml_call1(Async_kernel[19], [1, e]);
    }
    function Register(Version){
     var
      bin_shape_query = Version[1],
      bin_size_query = Version[2],
      bin_write_query = Version[3],
      bin_writer_query = Version[4],
      bin_read_query = Version[5],
      bin_read_query$0 = Version[6],
      bin_reader_query = Version[7],
      bin_query = Version[8],
      State = Version[9],
      Update = Version[10],
      version = Version[11],
      client_pushes_back = Version[15],
      include =
        caml_call1
         (Streamable_State_rpc[8],
          [0,
           name,
           version,
           bin_shape_query,
           bin_size_query,
           bin_write_query,
           bin_writer_query,
           bin_read_query,
           bin_read_query$0,
           bin_reader_query,
           bin_query,
           State,
           Update,
           client_pushes_back]),
      rpc = include[1],
      implement = include[2],
      version$0 = Version[11];
     function dispatch(conn, query){
      var
       query$0 = caml_call1(Version[12], query),
       _m_ = caml_call4(Streamable_State_rpc[2], 0, rpc, conn, query$0);
      return caml_call2
              (Async_kernel_Deferred_or_error[19][4][2],
               _m_,
               function(param){
                var
                 updates = param[2],
                 state = param[1],
                 state$0 = caml_call1(Version[13], state),
                 updates$0 =
                   caml_call2
                    (Async_kernel_Pipe[57],
                     updates,
                     function(update){
                      return caml_call2
                              (Core_Or_error[33],
                               0,
                               function(param){return caml_call1(Version[14], update);});
                     });
                return caml_call1
                        (Async_kernel_Deferred_or_error[19][1],
                         [0, state$0, updates$0]);
               });
     }
     caml_call3
      (Streamable_Callers_rpc_version[2], registry, version$0, dispatch);
     return [0, rpc, implement];
    }
    return [0, name, , dispatch_multi, Register];
   }
   function Make$0(Model){
    var
     name = Model[1],
     registry = caml_call1(Streamable_Callers_rpc_version[1], name);
    function implement_multi(on_exception, f){
     var _l_ = caml_call1(Streamable_Callers_rpc_version[4], registry);
     return caml_call2
             (Core_List[50],
              _l_,
              function(param){
               var implement = param[1];
               return caml_call2(implement, on_exception, f);
              });
    }
    function Register(Version){
     var
      bin_shape_query = Version[1],
      bin_size_query = Version[2],
      bin_write_query = Version[3],
      bin_writer_query = Version[4],
      bin_read_query = Version[5],
      bin_read_query$0 = Version[6],
      bin_reader_query = Version[7],
      bin_query = Version[8],
      State = Version[9],
      Update = Version[10],
      version = Version[11],
      client_pushes_back = Version[15],
      include =
        caml_call1
         (Streamable_State_rpc[8],
          [0,
           name,
           version,
           bin_shape_query,
           bin_size_query,
           bin_write_query,
           bin_writer_query,
           bin_read_query,
           bin_read_query$0,
           bin_reader_query,
           bin_query,
           State,
           Update,
           client_pushes_back]),
      rpc = include[1],
      implement = include[2],
      version$0 = Version[11];
     function implement$0(on_exception, f){
      return caml_call3
              (Streamable_State_rpc[3],
               on_exception,
               rpc,
               function(conn_state, query){
                var
                 query$0 = caml_call1(Version[12], query),
                 _k_ = caml_call3(f, conn_state, version$0, query$0);
                return caml_call2
                        (Async_kernel_Deferred_or_error[19][4][2],
                         _k_,
                         function(param){
                          var
                           updates = param[2],
                           state = param[1],
                           state$0 = caml_call1(Version[13], state),
                           updates$0 =
                             caml_call2(Async_kernel_Pipe[57], updates, Version[14]);
                          return caml_call1
                                  (Async_kernel_Deferred_or_error[19][1],
                                   [0, state$0, updates$0]);
                         });
               });
     }
     caml_call3
      (Streamable_Callers_rpc_version[2],
       registry,
       version$0,
       [0, implement$0]);
     return [0, rpc, implement];
    }
    return [0, name, , implement_multi, Register];
   }
   caml_call1(Ppx_inline_test_lib[6], cst_streamable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Versioned_state);
   var
    Streamable_Versioned_state_rpc =
      [0,
       [0,
        function(_f_){
         var _g_ = Make(_f_), _h_ = _g_[4];
         return [0,
                 function(_i_){
                  var
                   _j_ =
                     _h_
                      ([0,
                        _i_[2],
                        _i_[3],
                        _i_[4],
                        _i_[5],
                        _i_[6],
                        _i_[7],
                        _i_[8],
                        _i_[9],
                        _i_[10],
                        _i_[11],
                        _i_[1],
                        _i_[12],
                        _i_[13],
                        _i_[14],
                        _i_[15]]);
                  return [0, _j_[1], _j_[2]];
                 },
                 _g_[3],
                 _g_[1]];
        }],
       [0,
        function(_a_){
         var _b_ = Make$0(_a_), _c_ = _b_[4];
         return [0,
                 function(_d_){
                  var
                   _e_ =
                     _c_
                      ([0,
                        _d_[2],
                        _d_[3],
                        _d_[4],
                        _d_[5],
                        _d_[6],
                        _d_[7],
                        _d_[8],
                        _d_[9],
                        _d_[10],
                        _d_[11],
                        _d_[1],
                        _d_[12],
                        _d_[13],
                        _d_[14],
                        _d_[15]]);
                  return [0, _e_[1], _e_[2]];
                 },
                 _b_[3],
                 _b_[1]];
        }],
       [0,
        function(Model){
         var
          name = Model[1],
          Caller = Make([0, name]),
          Callee = Make$0([0, name]),
          dispatch_multi = Caller[3],
          implement_multi = Callee[3];
         return [0,
                 function(Version){
                  var
                   version = Version[1],
                   bin_shape_query = Version[2],
                   bin_size_query = Version[3],
                   bin_write_query = Version[4],
                   bin_writer_query = Version[5],
                   bin_read_query = Version[6],
                   bin_read_query$0 = Version[7],
                   bin_reader_query = Version[8],
                   bin_query = Version[9],
                   State = Version[10],
                   Update = Version[11],
                   callee_model_of_query = Version[13],
                   state_of_callee_model = Version[14],
                   update_of_callee_model = Version[16],
                   client_pushes_back = Version[18];
                  Callee[4].call
                   (null,
                    [0,
                     bin_shape_query,
                     bin_size_query,
                     bin_write_query,
                     bin_writer_query,
                     bin_read_query,
                     bin_read_query$0,
                     bin_reader_query,
                     bin_query,
                     State,
                     Update,
                     version,
                     callee_model_of_query,
                     state_of_callee_model,
                     update_of_callee_model,
                     client_pushes_back]);
                  var
                   version$0 = Version[1],
                   bin_shape_query$0 = Version[2],
                   bin_size_query$0 = Version[3],
                   bin_write_query$0 = Version[4],
                   bin_writer_query$0 = Version[5],
                   bin_read_query$1 = Version[6],
                   bin_read_query$2 = Version[7],
                   bin_reader_query$0 = Version[8],
                   bin_query$0 = Version[9],
                   State$0 = Version[10],
                   Update$0 = Version[11],
                   query_of_caller_model = Version[12],
                   caller_model_of_state = Version[15],
                   caller_model_of_update = Version[17],
                   client_pushes_back$0 = Version[18],
                   include =
                     Caller[4].call
                      (null,
                       [0,
                        bin_shape_query$0,
                        bin_size_query$0,
                        bin_write_query$0,
                        bin_writer_query$0,
                        bin_read_query$1,
                        bin_read_query$2,
                        bin_reader_query$0,
                        bin_query$0,
                        State$0,
                        Update$0,
                        version$0,
                        query_of_caller_model,
                        caller_model_of_state,
                        caller_model_of_update,
                        client_pushes_back$0]),
                   rpc = include[1],
                   implement = include[2];
                  return [0, rpc, implement];
                 },
                 dispatch_multi,
                 implement_multi,
                 name];
        }]];
   runtime.caml_register_global
    (19, Streamable_Versioned_state_rpc, cst_Streamable_Versioned_state);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Plain_rpc_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Plain_rpc_intf = "Streamable__Plain_rpc_intf",
    cst_streamable = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Plain_rpc_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Expect_test_collector[6][1], "src/plain_rpc_intf.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_streamable, "plain_rpc_intf.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_streamable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Plain_rpc_intf);
   var Streamable_Plain_rpc_intf = [0];
   runtime.caml_register_global
    (11, Streamable_Plain_rpc_intf, cst_Streamable_Plain_rpc_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Plain_rpc
//# unitInfo: Requires: Async_kernel__Deferred, Async_kernel__Deferred_or_error, Async_kernel__Pipe, Bin_prot__Shape, Bin_shape, Core__Nothing, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Streamable__Main, Streamable__Plain_rpc_intf, Streamable__State_rpc
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Plain_rpc = "Streamable__Plain_rpc",
    cst_query$1 = "query",
    cst_streamable = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Streamable_State_rpc = global_data.Streamable__State_rpc,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Core_Nothing = global_data.Core__Nothing,
    Streamable_Main = global_data.Streamable__Main,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Plain_rpc);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Expect_test_collector[6][1], "src/plain_rpc.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_streamable, "plain_rpc.ml");
   function plain_impl_to_state(f, conn, query){
    var _l_ = caml_call2(f, conn, query);
    return caml_call2
            (Async_kernel_Deferred_or_error[19][4][2],
             _l_,
             function(response){
              var
               empty =
                 caml_call3
                  (Async_kernel_Pipe[5],
                   0,
                   0,
                   function(param){return Async_kernel_Deferred[18];});
              return caml_call1
                      (Async_kernel_Deferred_or_error[13], [0, response, empty]);
             });
   }
   var description = Streamable_State_rpc[1];
   function dispatch(metadata, rpc, conn, query){
    var _k_ = caml_call4(Streamable_State_rpc[2], metadata, rpc, conn, query);
    return caml_call2
            (Async_kernel_Deferred_or_error[19][4][2],
             _k_,
             function(param){
              var pipe = param[2], response = param[1];
              caml_call1(Async_kernel_Pipe[16], pipe);
              return caml_call1
                      (Async_kernel_Deferred_or_error[19][1], response);
             });
   }
   function implement(on_exception, rpc, f){
    return caml_call3
            (Streamable_State_rpc[3],
             on_exception,
             rpc,
             function(_i_, _j_){return plain_impl_to_state(f, _i_, _j_);});
   }
   var
    bin_query_shape = Streamable_State_rpc[4],
    bin_response_shape = Streamable_State_rpc[5];
   caml_call1(Ppx_inline_test_lib[6], cst_streamable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Plain_rpc);
   var
    cst_query = cst_query$1,
    cst_src_plain_rpc_ml_22_4 = "src/plain_rpc.ml:22:4",
    cst_query$0 = cst_query$1,
    Streamable_Plain_rpc =
      [0,
       description,
       dispatch,
       implement,
       bin_query_shape,
       bin_response_shape,
       function(X){
        var
         name = X[1],
         version = X[2],
         _a_ = X[3],
         _b_ = [0, [0, caml_call1(Bin_shape[2][1], cst_query), 0, _a_], 0],
         _c_ = caml_call1(Bin_shape[4][1], cst_src_plain_rpc_ml_22_4),
         group = caml_call2(Bin_prot_Shape[2], _c_, _b_),
         _d_ = caml_call1(Bin_shape[2][1], cst_query$0),
         bin_shape_query =
           caml_call1(caml_call2(Bin_prot_Shape[10], group, _d_), 0),
         bin_size_query = X[4],
         bin_write_query = X[5],
         bin_writer_query = [0, bin_size_query, bin_write_query],
         bin_read_query = X[8],
         bin_read_query$0 = X[7],
         bin_reader_query = [0, bin_read_query$0, bin_read_query],
         bin_query = [0, bin_shape_query, bin_writer_query, bin_reader_query],
         State = X[11],
         Update =
           caml_call1
            (Streamable_Main[1],
             [0,
              Core_Nothing[4],
              Core_Nothing[5],
              Core_Nothing[6],
              Core_Nothing[7],
              Core_Nothing[8],
              Core_Nothing[9],
              Core_Nothing[10],
              Core_Nothing[11],
              Core_Nothing[12],
              Core_Nothing[13]]),
         client_pushes_back = X[12],
         _e_ = Update[1],
         _f_ = _e_[1],
         M =
           caml_call1
            (Streamable_State_rpc[8],
             [0,
              name,
              version,
              bin_shape_query,
              bin_size_query,
              bin_write_query,
              bin_writer_query,
              bin_read_query$0,
              bin_read_query,
              bin_reader_query,
              bin_query,
              State,
              [0,
               [0,
                [0,
                 _f_[1],
                 _f_[2],
                 _f_[3],
                 _f_[4],
                 _f_[5],
                 _f_[6],
                 _f_[7],
                 _f_[8]],
                _e_[2],
                _e_[3]],
               Update[2],
               Update[3]],
              client_pushes_back]),
         rpc = M[1];
        function implement(on_exception, f){
         return caml_call2
                 (M[2],
                  on_exception,
                  function(_g_, _h_){return plain_impl_to_state(f, _g_, _h_);});
        }
        return [0, rpc, implement];
       }];
   runtime.caml_register_global
    (22, Streamable_Plain_rpc, cst_Streamable_Plain_rpc);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Versioned_plain_rpc_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Versioned_plain = "Streamable__Versioned_plain_rpc_intf",
    cst_streamable = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Versioned_plain);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Expect_test_collector[6][1], "src/versioned_plain_rpc_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_streamable, "versioned_plain_rpc_intf.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_streamable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Versioned_plain);
   var Streamable_Versioned_plain_rpc = [0];
   runtime.caml_register_global
    (11, Streamable_Versioned_plain_rpc, cst_Streamable_Versioned_plain);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Versioned_plain_rpc
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred_or_error, Async_rpc_kernel__Versioned_rpc, Core__List, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Streamable__Callers_rpc_version_table, Streamable__Plain_rpc, Streamable__Versioned_plain_rpc_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Versioned_plain = "Streamable__Versioned_plain_rpc",
    cst_streamable = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Streamable_Plain_rpc = global_data.Streamable__Plain_rpc,
    Streamable_Callers_rpc_version =
      global_data.Streamable__Callers_rpc_version_table,
    Core_List = global_data.Core__List,
    Async_rpc_kernel_Versioned_rpc =
      global_data.Async_rpc_kernel__Versioned_rpc,
    Async_kernel = global_data.Async_kernel,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Versioned_plain);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Expect_test_collector[6][1], "src/versioned_plain_rpc.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_streamable, "versioned_plain_rpc.ml");
   function Make(Model){
    var
     name = Model[1],
     registry = caml_call1(Streamable_Callers_rpc_version[1], name);
    function dispatch_multi(conn_with_menu, query){
     var
      conn = caml_call1(Async_rpc_kernel_Versioned_rpc[2][3], conn_with_menu),
      menu = caml_call1(Async_rpc_kernel_Versioned_rpc[2][4], conn_with_menu),
      match = caml_call2(Streamable_Callers_rpc_version[3], registry, menu);
     if(0 === match[0]){
      var dispatch = match[1];
      return caml_call2(dispatch, conn, query);
     }
     var e = match[1];
     return caml_call1(Async_kernel[19], [1, e]);
    }
    function Register(Version){
     var
      bin_shape_query = Version[1],
      bin_size_query = Version[2],
      bin_write_query = Version[3],
      bin_writer_query = Version[4],
      bin_read_query = Version[5],
      bin_read_query$0 = Version[6],
      bin_reader_query = Version[7],
      bin_query = Version[8],
      Response = Version[9],
      version = Version[10],
      client_pushes_back = Version[13],
      include =
        caml_call1
         (Streamable_Plain_rpc[6],
          [0,
           name,
           version,
           bin_shape_query,
           bin_size_query,
           bin_write_query,
           bin_writer_query,
           bin_read_query,
           bin_read_query$0,
           bin_reader_query,
           bin_query,
           Response,
           client_pushes_back]),
      rpc = include[1],
      implement = include[2],
      version$0 = Version[10];
     function dispatch(conn, query){
      var
       query$0 = caml_call1(Version[11], query),
       _n_ = caml_call4(Streamable_Plain_rpc[2], 0, rpc, conn, query$0);
      return caml_call2
              (Async_kernel_Deferred_or_error[19][4][2],
               _n_,
               function(response){
                var _o_ = caml_call1(Version[12], response);
                return caml_call1(Async_kernel_Deferred_or_error[19][1], _o_);
               });
     }
     caml_call3
      (Streamable_Callers_rpc_version[2], registry, version$0, dispatch);
     return [0, rpc, implement];
    }
    return [0, name, , dispatch_multi, Register];
   }
   function Make$0(Model){
    var
     name = Model[1],
     registry = caml_call1(Streamable_Callers_rpc_version[1], name);
    function implement_multi(on_exception, f){
     var _m_ = caml_call1(Streamable_Callers_rpc_version[4], registry);
     return caml_call2
             (Core_List[50],
              _m_,
              function(param){
               var implement = param[1];
               return caml_call2(implement, on_exception, f);
              });
    }
    function Register(Version){
     var
      bin_shape_query = Version[1],
      bin_size_query = Version[2],
      bin_write_query = Version[3],
      bin_writer_query = Version[4],
      bin_read_query = Version[5],
      bin_read_query$0 = Version[6],
      bin_reader_query = Version[7],
      bin_query = Version[8],
      Response = Version[9],
      version = Version[10],
      client_pushes_back = Version[13],
      include =
        caml_call1
         (Streamable_Plain_rpc[6],
          [0,
           name,
           version,
           bin_shape_query,
           bin_size_query,
           bin_write_query,
           bin_writer_query,
           bin_read_query,
           bin_read_query$0,
           bin_reader_query,
           bin_query,
           Response,
           client_pushes_back]),
      rpc = include[1],
      implement = include[2],
      version$0 = Version[10];
     function implement$0(on_exception, f){
      return caml_call3
              (Streamable_Plain_rpc[3],
               on_exception,
               rpc,
               function(conn_state, query){
                var
                 query$0 = caml_call1(Version[11], query),
                 _k_ = caml_call3(f, conn_state, version$0, query$0);
                return caml_call2
                        (Async_kernel_Deferred_or_error[19][4][2],
                         _k_,
                         function(response){
                          var _l_ = caml_call1(Version[12], response);
                          return caml_call1
                                  (Async_kernel_Deferred_or_error[19][1], _l_);
                         });
               });
     }
     caml_call3
      (Streamable_Callers_rpc_version[2],
       registry,
       version$0,
       [0, implement$0]);
     return [0, rpc, implement];
    }
    return [0, name, , implement_multi, Register];
   }
   caml_call1(Ppx_inline_test_lib[6], cst_streamable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Versioned_plain);
   var
    Streamable_Versioned_plain_rpc =
      [0,
       [0,
        function(_f_){
         var _g_ = Make(_f_), _h_ = _g_[4];
         return [0,
                 function(_i_){
                  var
                   _j_ =
                     _h_
                      ([0,
                        _i_[2],
                        _i_[3],
                        _i_[4],
                        _i_[5],
                        _i_[6],
                        _i_[7],
                        _i_[8],
                        _i_[9],
                        _i_[10],
                        _i_[1],
                        _i_[11],
                        _i_[12],
                        _i_[13]]);
                  return [0, _j_[1], _j_[2]];
                 },
                 _g_[3],
                 _g_[1]];
        }],
       [0,
        function(_a_){
         var _b_ = Make$0(_a_), _c_ = _b_[4];
         return [0,
                 function(_d_){
                  var
                   _e_ =
                     _c_
                      ([0,
                        _d_[2],
                        _d_[3],
                        _d_[4],
                        _d_[5],
                        _d_[6],
                        _d_[7],
                        _d_[8],
                        _d_[9],
                        _d_[10],
                        _d_[1],
                        _d_[11],
                        _d_[12],
                        _d_[13]]);
                  return [0, _e_[1], _e_[2]];
                 },
                 _b_[3],
                 _b_[1]];
        }],
       [0,
        function(Model){
         var
          name = Model[1],
          Caller = Make([0, name]),
          Callee = Make$0([0, name]),
          dispatch_multi = Caller[3],
          implement_multi = Callee[3];
         return [0,
                 function(Version){
                  var
                   version = Version[1],
                   bin_shape_query = Version[2],
                   bin_size_query = Version[3],
                   bin_write_query = Version[4],
                   bin_writer_query = Version[5],
                   bin_read_query = Version[6],
                   bin_read_query$0 = Version[7],
                   bin_reader_query = Version[8],
                   bin_query = Version[9],
                   Response = Version[10],
                   callee_model_of_query = Version[12],
                   response_of_callee_model = Version[13],
                   client_pushes_back = Version[15];
                  Callee[4].call
                   (null,
                    [0,
                     bin_shape_query,
                     bin_size_query,
                     bin_write_query,
                     bin_writer_query,
                     bin_read_query,
                     bin_read_query$0,
                     bin_reader_query,
                     bin_query,
                     Response,
                     version,
                     callee_model_of_query,
                     response_of_callee_model,
                     client_pushes_back]);
                  var
                   version$0 = Version[1],
                   bin_shape_query$0 = Version[2],
                   bin_size_query$0 = Version[3],
                   bin_write_query$0 = Version[4],
                   bin_writer_query$0 = Version[5],
                   bin_read_query$1 = Version[6],
                   bin_read_query$2 = Version[7],
                   bin_reader_query$0 = Version[8],
                   bin_query$0 = Version[9],
                   Response$0 = Version[10],
                   query_of_caller_model = Version[11],
                   caller_model_of_response = Version[14],
                   client_pushes_back$0 = Version[15],
                   include =
                     Caller[4].call
                      (null,
                       [0,
                        bin_shape_query$0,
                        bin_size_query$0,
                        bin_write_query$0,
                        bin_writer_query$0,
                        bin_read_query$1,
                        bin_read_query$2,
                        bin_reader_query$0,
                        bin_query$0,
                        Response$0,
                        version$0,
                        query_of_caller_model,
                        caller_model_of_response,
                        client_pushes_back$0]),
                   rpc = include[1],
                   implement = include[2];
                  return [0, rpc, implement];
                 },
                 dispatch_multi,
                 implement_multi,
                 name];
        }]];
   runtime.caml_register_global
    (17, Streamable_Versioned_plain_rpc, cst_Streamable_Versioned_plain);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Pipe_rpc_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Pipe_rpc_intf = "Streamable__Pipe_rpc_intf",
    cst_streamable = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Pipe_rpc_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Expect_test_collector[6][1], "src/pipe_rpc_intf.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_streamable, "pipe_rpc_intf.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_streamable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Pipe_rpc_intf);
   var Streamable_Pipe_rpc_intf = [0];
   runtime.caml_register_global
    (11, Streamable_Pipe_rpc_intf, cst_Streamable_Pipe_rpc_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Pipe_rpc
//# unitInfo: Requires: Async_kernel__Deferred_or_error, Async_kernel__Pipe, Bin_prot__Shape, Bin_shape, Core__Unit, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Streamable__Main, Streamable__Pipe_rpc_intf, Streamable__State_rpc
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Pipe_rpc = "Streamable__Pipe_rpc",
    cst_query$1 = "query",
    cst_streamable = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Streamable_State_rpc = global_data.Streamable__State_rpc,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Core_Unit = global_data.Core__Unit,
    Streamable_Main = global_data.Streamable__Main,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Pipe_rpc);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Expect_test_collector[6][1], "src/pipe_rpc.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_streamable, "pipe_rpc.ml");
   var description = Streamable_State_rpc[1];
   function dispatch(metadata, rpc, conn, query){
    var _k_ = caml_call4(Streamable_State_rpc[2], metadata, rpc, conn, query);
    return caml_call2
            (Async_kernel_Deferred_or_error[19][4][2],
             _k_,
             function(param){
              var response = param[2];
              return caml_call1
                      (Async_kernel_Deferred_or_error[19][1], response);
             });
   }
   function implement(on_exception, rpc, f){
    function f$0(conn, query){
     var _j_ = caml_call2(f, conn, query);
     return caml_call2
             (Async_kernel_Deferred_or_error[19][4][2],
              _j_,
              function(response){
               return caml_call1
                       (Async_kernel_Deferred_or_error[19][1], [0, 0, response]);
              });
    }
    return caml_call3(Streamable_State_rpc[3], on_exception, rpc, f$0);
   }
   var
    bin_query_shape = Streamable_State_rpc[4],
    bin_response_shape = Streamable_State_rpc[6];
   caml_call1(Ppx_inline_test_lib[6], cst_streamable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Pipe_rpc);
   var
    cst_query = cst_query$1,
    cst_src_pipe_rpc_ml_16_4 = "src/pipe_rpc.ml:16:4",
    cst_query$0 = cst_query$1,
    Streamable_Pipe_rpc =
      [0,
       description,
       dispatch,
       implement,
       bin_query_shape,
       bin_response_shape,
       function(X){
        var
         name = X[1],
         version = X[2],
         _a_ = X[3],
         _b_ = [0, [0, caml_call1(Bin_shape[2][1], cst_query), 0, _a_], 0],
         _c_ = caml_call1(Bin_shape[4][1], cst_src_pipe_rpc_ml_16_4),
         group = caml_call2(Bin_prot_Shape[2], _c_, _b_),
         _d_ = caml_call1(Bin_shape[2][1], cst_query$0),
         bin_shape_query =
           caml_call1(caml_call2(Bin_prot_Shape[10], group, _d_), 0),
         bin_size_query = X[4],
         bin_write_query = X[5],
         bin_writer_query = [0, bin_size_query, bin_write_query],
         bin_read_query = X[8],
         bin_read_query$0 = X[7],
         bin_reader_query = [0, bin_read_query$0, bin_read_query],
         bin_query = [0, bin_shape_query, bin_writer_query, bin_reader_query],
         State =
           caml_call1
            (Streamable_Main[1],
             [0,
              Core_Unit[7],
              Core_Unit[8],
              Core_Unit[9],
              Core_Unit[10],
              Core_Unit[11],
              Core_Unit[12],
              Core_Unit[13],
              Core_Unit[14],
              Core_Unit[15],
              Core_Unit[16]]),
         Update = X[11],
         client_pushes_back = X[12],
         _e_ = State[1],
         _f_ = _e_[1],
         M =
           caml_call1
            (Streamable_State_rpc[8],
             [0,
              name,
              version,
              bin_shape_query,
              bin_size_query,
              bin_write_query,
              bin_writer_query,
              bin_read_query$0,
              bin_read_query,
              bin_reader_query,
              bin_query,
              [0,
               [0,
                [0,
                 _f_[1],
                 _f_[2],
                 _f_[3],
                 _f_[4],
                 _f_[5],
                 _f_[6],
                 _f_[7],
                 _f_[8]],
                _e_[2],
                _e_[3]],
               State[2],
               State[3]],
              Update,
              client_pushes_back]),
         rpc = M[1];
        function implement(on_exception, f){
         function f$0(conn, query){
          var _g_ = caml_call2(f, conn, query);
          return caml_call2
                  (Async_kernel_Deferred_or_error[19][4][2],
                   _g_,
                   function(response){
                    var
                     _h_ = caml_call1(State[2], 0),
                     _i_ = [0, caml_call1(Async_kernel_Pipe[13], _h_), response];
                    return caml_call1
                            (Async_kernel_Deferred_or_error[19][1], _i_);
                   });
         }
         return caml_call2(M[2], on_exception, f$0);
        }
        return [0, rpc, implement];
       }];
   runtime.caml_register_global
    (21, Streamable_Pipe_rpc, cst_Streamable_Pipe_rpc);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Versioned_pipe_rpc_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Versioned_pipe_ = "Streamable__Versioned_pipe_rpc_intf",
    cst_streamable = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Versioned_pipe_);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Expect_test_collector[6][1], "src/versioned_pipe_rpc_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_streamable, "versioned_pipe_rpc_intf.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_streamable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Versioned_pipe_);
   var Streamable_Versioned_pipe_rpc_ = [0];
   runtime.caml_register_global
    (11, Streamable_Versioned_pipe_rpc_, cst_Streamable_Versioned_pipe_);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable__Versioned_pipe_rpc
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred_or_error, Async_kernel__Pipe, Async_rpc_kernel__Versioned_rpc, Core__List, Core__Or_error, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Streamable__Callers_rpc_version_table, Streamable__Pipe_rpc, Streamable__Versioned_pipe_rpc_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable_Versioned_pipe_ = "Streamable__Versioned_pipe_rpc",
    cst_streamable = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Streamable_Pipe_rpc = global_data.Streamable__Pipe_rpc,
    Streamable_Callers_rpc_version =
      global_data.Streamable__Callers_rpc_version_table,
    Core_List = global_data.Core__List,
    Core_Or_error = global_data.Core__Or_error,
    Async_rpc_kernel_Versioned_rpc =
      global_data.Async_rpc_kernel__Versioned_rpc,
    Async_kernel = global_data.Async_kernel,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable_Versioned_pipe_);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Expect_test_collector[6][1], "src/versioned_pipe_rpc.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_streamable, "versioned_pipe_rpc.ml");
   function Make(Model){
    var
     name = Model[1],
     registry = caml_call1(Streamable_Callers_rpc_version[1], name);
    function dispatch_multi(conn_with_menu, query){
     var
      conn = caml_call1(Async_rpc_kernel_Versioned_rpc[2][3], conn_with_menu),
      menu = caml_call1(Async_rpc_kernel_Versioned_rpc[2][4], conn_with_menu),
      match = caml_call2(Streamable_Callers_rpc_version[3], registry, menu);
     if(0 === match[0]){
      var dispatch = match[1];
      return caml_call2(dispatch, conn, query);
     }
     var e = match[1];
     return caml_call1(Async_kernel[19], [1, e]);
    }
    function Register(Version){
     var
      bin_shape_query = Version[1],
      bin_size_query = Version[2],
      bin_write_query = Version[3],
      bin_writer_query = Version[4],
      bin_read_query = Version[5],
      bin_read_query$0 = Version[6],
      bin_reader_query = Version[7],
      bin_query = Version[8],
      Response = Version[9],
      version = Version[10],
      client_pushes_back = Version[13],
      include =
        caml_call1
         (Streamable_Pipe_rpc[6],
          [0,
           name,
           version,
           bin_shape_query,
           bin_size_query,
           bin_write_query,
           bin_writer_query,
           bin_read_query,
           bin_read_query$0,
           bin_reader_query,
           bin_query,
           Response,
           client_pushes_back]),
      rpc = include[1],
      implement = include[2],
      version$0 = Version[10];
     function dispatch(conn, query){
      var
       query$0 = caml_call1(Version[11], query),
       _m_ = caml_call4(Streamable_Pipe_rpc[2], 0, rpc, conn, query$0);
      return caml_call2
              (Async_kernel_Deferred_or_error[19][4][2],
               _m_,
               function(response){
                var
                 response$0 =
                   caml_call2
                    (Async_kernel_Pipe[57],
                     response,
                     function(response){
                      return caml_call2
                              (Core_Or_error[33],
                               0,
                               function(param){return caml_call1(Version[12], response);});
                     });
                return caml_call1
                        (Async_kernel_Deferred_or_error[19][1], response$0);
               });
     }
     caml_call3
      (Streamable_Callers_rpc_version[2], registry, version$0, dispatch);
     return [0, rpc, implement];
    }
    return [0, name, , dispatch_multi, Register];
   }
   function Make$0(Model){
    var
     name = Model[1],
     registry = caml_call1(Streamable_Callers_rpc_version[1], name);
    function implement_multi(on_exception, f){
     var _l_ = caml_call1(Streamable_Callers_rpc_version[4], registry);
     return caml_call2
             (Core_List[50],
              _l_,
              function(param){
               var implement = param[1];
               return caml_call2(implement, on_exception, f);
              });
    }
    function Register(Version){
     var
      bin_shape_query = Version[1],
      bin_size_query = Version[2],
      bin_write_query = Version[3],
      bin_writer_query = Version[4],
      bin_read_query = Version[5],
      bin_read_query$0 = Version[6],
      bin_reader_query = Version[7],
      bin_query = Version[8],
      Response = Version[9],
      version = Version[10],
      client_pushes_back = Version[13],
      include =
        caml_call1
         (Streamable_Pipe_rpc[6],
          [0,
           name,
           version,
           bin_shape_query,
           bin_size_query,
           bin_write_query,
           bin_writer_query,
           bin_read_query,
           bin_read_query$0,
           bin_reader_query,
           bin_query,
           Response,
           client_pushes_back]),
      rpc = include[1],
      implement = include[2],
      version$0 = Version[10];
     function implement$0(on_exception, f){
      return caml_call3
              (Streamable_Pipe_rpc[3],
               on_exception,
               rpc,
               function(conn_state, query){
                var
                 query$0 = caml_call1(Version[11], query),
                 _k_ = caml_call3(f, conn_state, version$0, query$0);
                return caml_call2
                        (Async_kernel_Deferred_or_error[19][4][2],
                         _k_,
                         function(response){
                          var
                           response$0 =
                             caml_call2(Async_kernel_Pipe[57], response, Version[12]);
                          return caml_call1
                                  (Async_kernel_Deferred_or_error[19][1], response$0);
                         });
               });
     }
     caml_call3
      (Streamable_Callers_rpc_version[2],
       registry,
       version$0,
       [0, implement$0]);
     return [0, rpc, implement];
    }
    return [0, name, , implement_multi, Register];
   }
   caml_call1(Ppx_inline_test_lib[6], cst_streamable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable_Versioned_pipe_);
   var
    Streamable_Versioned_pipe_rpc =
      [0,
       [0,
        function(_f_){
         var _g_ = Make(_f_), _h_ = _g_[4];
         return [0,
                 function(_i_){
                  var
                   _j_ =
                     _h_
                      ([0,
                        _i_[2],
                        _i_[3],
                        _i_[4],
                        _i_[5],
                        _i_[6],
                        _i_[7],
                        _i_[8],
                        _i_[9],
                        _i_[10],
                        _i_[1],
                        _i_[11],
                        _i_[12],
                        _i_[13]]);
                  return [0, _j_[1], _j_[2]];
                 },
                 _g_[3],
                 _g_[1]];
        }],
       [0,
        function(_a_){
         var _b_ = Make$0(_a_), _c_ = _b_[4];
         return [0,
                 function(_d_){
                  var
                   _e_ =
                     _c_
                      ([0,
                        _d_[2],
                        _d_[3],
                        _d_[4],
                        _d_[5],
                        _d_[6],
                        _d_[7],
                        _d_[8],
                        _d_[9],
                        _d_[10],
                        _d_[1],
                        _d_[11],
                        _d_[12],
                        _d_[13]]);
                  return [0, _e_[1], _e_[2]];
                 },
                 _b_[3],
                 _b_[1]];
        }],
       [0,
        function(Model){
         var
          name = Model[1],
          Caller = Make([0, name]),
          Callee = Make$0([0, name]),
          dispatch_multi = Caller[3],
          implement_multi = Callee[3];
         return [0,
                 function(Version){
                  var
                   version = Version[1],
                   bin_shape_query = Version[2],
                   bin_size_query = Version[3],
                   bin_write_query = Version[4],
                   bin_writer_query = Version[5],
                   bin_read_query = Version[6],
                   bin_read_query$0 = Version[7],
                   bin_reader_query = Version[8],
                   bin_query = Version[9],
                   Response = Version[10],
                   callee_model_of_query = Version[12],
                   response_of_callee_model = Version[13],
                   client_pushes_back = Version[15];
                  Callee[4].call
                   (null,
                    [0,
                     bin_shape_query,
                     bin_size_query,
                     bin_write_query,
                     bin_writer_query,
                     bin_read_query,
                     bin_read_query$0,
                     bin_reader_query,
                     bin_query,
                     Response,
                     version,
                     callee_model_of_query,
                     response_of_callee_model,
                     client_pushes_back]);
                  var
                   version$0 = Version[1],
                   bin_shape_query$0 = Version[2],
                   bin_size_query$0 = Version[3],
                   bin_write_query$0 = Version[4],
                   bin_writer_query$0 = Version[5],
                   bin_read_query$1 = Version[6],
                   bin_read_query$2 = Version[7],
                   bin_reader_query$0 = Version[8],
                   bin_query$0 = Version[9],
                   Response$0 = Version[10],
                   query_of_caller_model = Version[11],
                   caller_model_of_response = Version[14],
                   client_pushes_back$0 = Version[15],
                   include =
                     Caller[4].call
                      (null,
                       [0,
                        bin_shape_query$0,
                        bin_size_query$0,
                        bin_write_query$0,
                        bin_writer_query$0,
                        bin_read_query$1,
                        bin_read_query$2,
                        bin_reader_query$0,
                        bin_query$0,
                        Response$0,
                        version$0,
                        query_of_caller_model,
                        caller_model_of_response,
                        client_pushes_back$0]),
                   rpc = include[1],
                   implement = include[2];
                  return [0, rpc, implement];
                 },
                 dispatch_multi,
                 implement_multi,
                 name];
        }]];
   runtime.caml_register_global
    (19, Streamable_Versioned_pipe_rpc, cst_Streamable_Versioned_pipe_);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Streamable
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Streamable__Main
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Streamable = "Streamable",
    cst_streamable = "streamable";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Streamable_Main = global_data.Streamable__Main;
   caml_call1(Ppx_module_timer_runtime[4], cst_Streamable);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_streamable);
   caml_call1(Expect_test_collector[6][1], "src/streamable.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_streamable, "streamable.ml");
   var
    Of_atomic = Streamable_Main[1],
    Of_atomic_rpc = Streamable_Main[2],
    Of_map = Streamable_Main[3],
    Of_map_rpc = Streamable_Main[4],
    Of_total_map = Streamable_Main[5],
    Of_total_map_rpc = Streamable_Main[6],
    Of_hashtbl = Streamable_Main[7],
    Of_hashtbl_rpc = Streamable_Main[8],
    Of_set = Streamable_Main[9],
    Of_set_rpc = Streamable_Main[10],
    Of_tuple2 = Streamable_Main[11],
    Of_tuple2_rpc = Streamable_Main[12],
    Of_tuple3 = Streamable_Main[13],
    Of_tuple3_rpc = Streamable_Main[14],
    Of_tuple4 = Streamable_Main[15],
    Of_tuple4_rpc = Streamable_Main[16],
    Of_tuple5 = Streamable_Main[17],
    Of_tuple5_rpc = Streamable_Main[18],
    Of_tuple6 = Streamable_Main[19],
    Of_tuple6_rpc = Streamable_Main[20],
    Of_tuple7 = Streamable_Main[21],
    Of_tuple7_rpc = Streamable_Main[22],
    Of_tuple8 = Streamable_Main[23],
    Of_tuple8_rpc = Streamable_Main[24],
    Of_tuple9 = Streamable_Main[25],
    Of_tuple9_rpc = Streamable_Main[26],
    Of_variant2 = Streamable_Main[27],
    Of_variant2_rpc = Streamable_Main[28],
    Of_variant3 = Streamable_Main[29],
    Of_variant3_rpc = Streamable_Main[30],
    Of_variant4 = Streamable_Main[31],
    Of_variant4_rpc = Streamable_Main[32],
    Of_list = Streamable_Main[33],
    Of_list_rpc = Streamable_Main[34],
    Of_nonempty_list = Streamable_Main[35],
    Of_nonempty_list_rpc = Streamable_Main[36],
    Of_option = Streamable_Main[37],
    Of_option_rpc = Streamable_Main[38],
    Of_result = Streamable_Main[39],
    Of_result_rpc = Streamable_Main[40],
    Of_fqueue = Streamable_Main[41],
    Of_fqueue_rpc = Streamable_Main[42],
    Of_sequence = Streamable_Main[43],
    Of_sequence_rpc = Streamable_Main[44],
    Of_streamable = Streamable_Main[45],
    Of_streamable_rpc = Streamable_Main[46],
    Of_sexpable = Streamable_Main[47],
    Fixpoint = Streamable_Main[48],
    Fixpoint_rpc = Streamable_Main[49],
    Checked = Streamable_Main[50],
    Packed = Streamable_Main[51],
    Packed_rpc = Streamable_Main[52],
    Stable = Streamable_Main[53];
   caml_call1(Ppx_inline_test_lib[6], cst_streamable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Streamable);
   var
    Streamable =
      [0,
       Of_atomic,
       Of_atomic_rpc,
       Of_map,
       Of_map_rpc,
       Of_total_map,
       Of_total_map_rpc,
       Of_hashtbl,
       Of_hashtbl_rpc,
       Of_set,
       Of_set_rpc,
       Of_tuple2,
       Of_tuple2_rpc,
       Of_tuple3,
       Of_tuple3_rpc,
       Of_tuple4,
       Of_tuple4_rpc,
       Of_tuple5,
       Of_tuple5_rpc,
       Of_tuple6,
       Of_tuple6_rpc,
       Of_tuple7,
       Of_tuple7_rpc,
       Of_tuple8,
       Of_tuple8_rpc,
       Of_tuple9,
       Of_tuple9_rpc,
       Of_variant2,
       Of_variant2_rpc,
       Of_variant3,
       Of_variant3_rpc,
       Of_variant4,
       Of_variant4_rpc,
       Of_list,
       Of_list_rpc,
       Of_nonempty_list,
       Of_nonempty_list_rpc,
       Of_option,
       Of_option_rpc,
       Of_result,
       Of_result_rpc,
       Of_fqueue,
       Of_fqueue_rpc,
       Of_sequence,
       Of_sequence_rpc,
       Of_streamable,
       Of_streamable_rpc,
       Of_sexpable,
       Fixpoint,
       Fixpoint_rpc,
       Checked,
       Packed,
       Packed_rpc,
       Stable];
   runtime.caml_register_global(12, Streamable, cst_Streamable);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
