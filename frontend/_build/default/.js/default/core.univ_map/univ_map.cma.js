// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Univ_map__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Univ_map = [0];
   runtime.caml_register_global(0, Univ_map, "Univ_map__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Univ_map__Univ_map_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Univ_map_Univ_map_intf = "Univ_map__Univ_map_intf",
    cst_univ_map = "univ_map";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Univ_map_Univ_map_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_univ_map);
   caml_call1(Expect_test_collector[6][1], "univ_map/src/univ_map_intf.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_univ_map, "univ_map_intf.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_univ_map);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Univ_map_Univ_map_intf);
   var Univ_map_Univ_map_intf = [0];
   runtime.caml_register_global
    (11, Univ_map_Univ_map_intf, cst_Univ_map_Univ_map_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Univ_map
//# unitInfo: Requires: Base, Base__Invariant, Base__List, Base__Map, Base__Option, Base__Printf, Base__String, Base__Type_equal, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Univ_map__Univ_map_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Univ_map = "Univ_map",
    cst = "_",
    cst_univ_map = "univ_map",
    cst_univ_map_src_univ_map_ml = "univ_map/src/univ_map.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Base_List = global_data.Base__List,
    Base_Option = global_data.Base__Option,
    Base_Type_equal = global_data.Base__Type_equal,
    Base_Map = global_data.Base__Map,
    Base = global_data.Base,
    Base_Printf = global_data.Base__Printf,
    Assert_failure = global_data.Assert_failure,
    Base_Invariant = global_data.Base__Invariant,
    Base_String = global_data.Base__String,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector;
   caml_call1(Ppx_module_timer_runtime[4], cst_Univ_map);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_univ_map);
   caml_call1(Expect_test_collector[6][1], cst_univ_map_src_univ_map_ml);
   caml_call2(Ppx_inline_test_lib[5], cst_univ_map, "univ_map.ml");
   var
    _a_ = [0, "<uid>"],
    _b_ = [0, "uid"],
    _c_ = [0, "name"],
    _d_ = [0, "type_id2"],
    _e_ = [0, "type_id1"],
    _f_ = [0, cst],
    _g_ = [0, "key"],
    cst_Key_type_id_must_not_provi =
      "[Key.type_id] must not provide different type ids when called on the same input",
    _h_ = [0, cst_univ_map_src_univ_map_ml, 82, 40],
    _i_ = [0, cst],
    _j_ = [0, cst_univ_map_src_univ_map_ml, 81, 2467, 2491],
    _k_ =
      [0,
       [11, "Univ_map.find_exn on unknown key ", [2, 0, 0]],
       "Univ_map.find_exn on unknown key %s"],
    _l_ =
      [0,
       [11, "Univ_map.add_exn on existing key ", [2, 0, 0]],
       "Univ_map.add_exn on existing key %s"],
    _m_ =
      [0,
       [11, "Univ_map.change_exn on unknown key ", [2, 0, 0]],
       "Univ_map.change_exn on unknown key %s"];
   function Make1(Key, Data){
    var sexp_of_t = Key[1];
    function sexp_of_type_id(type_id){
     var _an_ = 0, _ao_ = 0;
     if(Ppx_inline_test_lib[1])
      var _ap_ = _a_;
     else
      var
       _as_ = caml_call1(Base_Type_equal[12][3], type_id),
       _ap_ = caml_call1(Base_Type_equal[12][2][4], _as_);
     var
      _aq_ =
        [0, [1, [0, _b_, [0, caml_call1(Base[85][4], _ap_), _ao_]]], _an_],
      _ar_ = caml_call1(Base_Type_equal[12][6], type_id);
     return [1, [0, [1, [0, _c_, [0, caml_call1(Base[177], _ar_), 0]]], _aq_]];
    }
    function type_id(x_003){
     var
      type_id1 = caml_call1(Key[2], x_003),
      type_id2 = caml_call1(Key[2], x_003);
     if(caml_call2(Base_Type_equal[12][9], type_id1, type_id2))
      return type_id1;
     var
      _aj_ = [0, [1, [0, _d_, [0, sexp_of_type_id(type_id2), 0]]], 0],
      _ak_ = [0, [1, [0, _e_, [0, sexp_of_type_id(type_id1), 0]]], _aj_],
      _al_ =
        [0,
         [1,
          [0,
           _g_,
           [0, caml_call2(Key[1], function(param){return _f_;}, x_003), 0]]],
         _ak_],
      _am_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Key_type_id_must_not_provi),
          _al_]];
     return caml_call1(Base[217], _am_);
    }
    var Key$0 = [0, sexp_of_t, , type_id];
    function name_of_key(key){
     var _ai_ = Key$0[3].call(null, key);
     return caml_call1(Base_Type_equal[12][6], _ai_);
    }
    function uid_of_key(key){
     var _ah_ = Key$0[3].call(null, key);
     return caml_call1(Base_Type_equal[12][3], _ah_);
    }
    function sexp_of_t$0(sexp_of_a, param){
     var
      data = param[2],
      key = param[1],
      _af_ = Key$0[3].call(null, key),
      _ag_ = caml_call1(Base_Type_equal[12][7], _af_);
     return caml_call3(Data[1], sexp_of_a, _ag_, data);
    }
    function type_id_name(param){var key = param[1]; return name_of_key(key);}
    function type_id_uid(param){var key = param[1]; return uid_of_key(key);}
    function compare(t1, t2){
     var
      _ab_ = type_id_name(t2),
      _ac_ = type_id_name(t1),
      c = caml_call2(Base_String[51], _ac_, _ab_);
     if(0 !== c) return c;
     var _ad_ = type_id_uid(t2), _ae_ = type_id_uid(t1);
     return caml_call2(Base_Type_equal[12][2][14], _ae_, _ad_);
    }
    var Packed = [0, sexp_of_t$0, type_id_name, type_id_uid, compare];
    function to_alist(t){
     var _$_ = Packed[4], _aa_ = caml_call1(Base_Map[71], t);
     return caml_call2(Base_List[81], _aa_, _$_);
    }
    function sexp_of_t$1(sexp_of_a, t){
     var
      ___ = to_alist(t),
      x_008 =
        caml_call2
         (Base_List[52],
          ___,
          function(packed){return [0, Packed[2].call(null, packed), packed];});
     return caml_call2
             (Base[148],
              function(param){
               var
                arg1_005 = param[2],
                arg0_004 = param[1],
                res0_006 = caml_call1(Base[177], arg0_004),
                res1_007 = Packed[1].call(null, sexp_of_a, arg1_005);
               return [1, [0, res0_006, [0, res1_007, 0]]];
              },
              x_008);
    }
    function invariant(t){
     return caml_call4
             (Base_Invariant[1],
              _j_,
              t,
              function(x_009){
               return sexp_of_t$1(function(param){return _i_;}, x_009);
              },
              function(param){
               return caml_call2
                       (Base_Map[46],
                        t,
                        function(key, data){
                         var _Z_ = Packed[3].call(null, data);
                         if(caml_call2(Base_Type_equal[12][2][13], key, _Z_))
                          return 0;
                         throw caml_maybe_attach_backtrace
                                ([0, Assert_failure, _h_], 1);
                        });
              });
    }
    function set(t, key, data){
     var _Y_ = uid_of_key(key);
     return caml_call3(Base_Map[32], t, _Y_, [0, key, data]);
    }
    function mem_by_id(t, id){return caml_call2(Base_Map[43], t, id);}
    function mem(t, key){return mem_by_id(t, uid_of_key(key));}
    function remove_by_id(t, id){return caml_call2(Base_Map[42], t, id);}
    function remove(t, key){return remove_by_id(t, uid_of_key(key));}
    var empty = caml_call1(Base_Map[6], [0, Base_Type_equal[12][2][22]]);
    function singleton(key, data){
     var _X_ = uid_of_key(key);
     return caml_call3
             (Base_Map[7],
              [0, Base_Type_equal[12][2][22]],
              _X_,
              [0, key, data]);
    }
    var is_empty = Base_Map[30];
    function find(t, key){
     var _U_ = uid_of_key(key), match = caml_call2(Base_Map[40], t, _U_);
     if(! match) return 0;
     var
      match$0 = match[1],
      value = match$0[2],
      key$0 = match$0[1],
      _V_ = Key$0[3].call(null, key$0),
      _W_ = Key$0[3].call(null, key);
     caml_call2(Base_Type_equal[12][11], _W_, _V_);
     return [0, value];
    }
    function find_exn(t, key){
     var match = find(t, key);
     if(match){var data = match[1]; return data;}
     var _T_ = name_of_key(key);
     return caml_call3(Base_Printf[6], _k_, _T_, 0);
    }
    function add(t, key, data){
     return mem(t, key) ? -1024851605 : [0, 17724, set(t, key, data)];
    }
    function add_exn(t, key, data){
     var match = add(t, key, data);
     if(typeof match === "number"){
      var _S_ = name_of_key(key);
      return caml_call3(Base_Printf[6], _l_, _S_, 0);
     }
     var t$0 = match[2];
     return t$0;
    }
    function change_exn(t, key, update){
     var match = find(t, key);
     if(match){
      var data = match[1];
      return set(t, key, caml_call1(update, data));
     }
     var _R_ = name_of_key(key);
     return caml_call3(Base_Printf[6], _m_, _R_, 0);
    }
    function change(t, key, update){
     var orig = find(t, key), next = caml_call1(update, orig);
     if(! next) return caml_call1(Base_Option[50], orig) ? t : remove(t, key);
     var data = next[1];
     return set(t, key, data);
    }
    function update(t, key, f){
     return change(t, key, function(data){return [0, caml_call1(f, data)];});
    }
    function of_alist_exn(t){
     var
      _Q_ =
        caml_call2
         (Base_List[52],
          t,
          function(p){return [0, Packed[3].call(null, p), p];});
     return caml_call2(Base_Map[10], [0, Base_Type_equal[12][2][22]], _Q_);
    }
    return [0,
            Key$0,
            ,
            ,
            ,
            to_alist,
            sexp_of_t$1,
            invariant,
            set,
            mem_by_id,
            mem,
            remove_by_id,
            remove,
            empty,
            singleton,
            is_empty,
            find,
            find_exn,
            add,
            add_exn,
            change_exn,
            change,
            update,
            of_alist_exn,
            0];
   }
   function Make(Key, Data){
    function sexp_of_t(of_a_011, of_a_012, x_013){return caml_call2(Data[1], of_a_012, x_013);
    }
    var M = Make1(Key, [0, sexp_of_t]);
    function sexp_of_t$0(x_014){return M[6].call(null, Base[191], x_014);}
    var
     invariant = M[7],
     empty = M[13],
     singleton = M[14],
     is_empty = M[15],
     set = M[8],
     mem = M[10],
     mem_by_id = M[9],
     find = M[16],
     find_exn = M[17],
     add = M[18],
     add_exn = M[19],
     change = M[21],
     change_exn = M[20],
     update = M[22],
     remove = M[12],
     remove_by_id = M[11],
     Packed = [0],
     to_alist = M[5],
     of_alist_exn = M[23];
    return [0,
            ,
            sexp_of_t$0,
            Key,
            invariant,
            empty,
            singleton,
            is_empty,
            set,
            mem,
            mem_by_id,
            find,
            find_exn,
            add,
            add_exn,
            change,
            change_exn,
            update,
            remove,
            remove_by_id,
            Packed,
            to_alist,
            of_alist_exn,
            0];
   }
   var sexp_of_t = Base_Type_equal[12][1];
   function type_id(_P_){return _P_;}
   var Type_id_key = [0, sexp_of_t, type_id];
   function sexp_of_t$0(of_a_017){return of_a_017;}
   var
    _n_ = Make(Type_id_key, [0, sexp_of_t$0]),
    type_equal = _n_[23],
    of_alist_exn = _n_[22],
    to_alist = _n_[21],
    Packed = _n_[20],
    remove_by_id = _n_[19],
    remove = _n_[18],
    update = _n_[17],
    change_exn = _n_[16],
    change = _n_[15],
    add_exn = _n_[14],
    add = _n_[13],
    find_exn = _n_[12],
    find = _n_[11],
    mem_by_id = _n_[10],
    mem = _n_[9],
    set = _n_[8],
    is_empty = _n_[7],
    singleton = _n_[6],
    empty = _n_[5],
    invariant = _n_[4],
    sexp_of_t$1 = _n_[2];
   function create(default$0, name, sexp_of){
    return [0, caml_call2(Base_Type_equal[12][4], name, sexp_of), default$0];
   }
   function id(t){return t[1];}
   var Key = [0, create, id];
   function find$0(t, param){
    var default$0 = param[2], key = param[1], _O_ = find(t, key);
    return caml_call2(Base_Option[28], _O_, default$0);
   }
   function set$0(t, param, data){
    var key = param[1];
    return set(t, key, data);
   }
   function change$0(t, key, update){
    return set$0(t, key, caml_call1(update, find$0(t, key)));
   }
   function create$0(init, f, name, sexp_of){
    return [0, caml_call3(Key[1], init, name, sexp_of), f];
   }
   function id$0(t){return caml_call1(Key[2], t[1]);}
   var Key$0 = [0, create$0, id$0];
   function find$1(t, param){var key = param[1]; return find$0(t, key);}
   function set$1(t, param, data){
    var key = param[1];
    return set$0(t, key, data);
   }
   function change$1(t, param, update){
    var key = param[1];
    return change$0(t, key, update);
   }
   function add$0(t, param, data){
    var f = param[2], key = param[1];
    return change$0(t, key, function(acc){return caml_call2(f, acc, data);});
   }
   function create$1(name, sexp_of){
    var _N_ = caml_call1(Base_List[5], sexp_of);
    return caml_call4
            (Key$0[1], 0, function(xs, x){return [0, x, xs];}, name, _N_);
   }
   var
    id$1 = Key$0[2],
    Key$1 = [0, create$1, id$1],
    Multi = [0, Key$1, set$1, find$1, add$0, change$1];
   caml_call1(Ppx_inline_test_lib[6], cst_univ_map);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Univ_map);
   var
    Univ_map =
      [0,
       Type_id_key,
       sexp_of_t$1,
       invariant,
       empty,
       singleton,
       is_empty,
       set,
       mem,
       mem_by_id,
       find,
       find_exn,
       add,
       add_exn,
       change,
       change_exn,
       update,
       remove,
       remove_by_id,
       Packed,
       to_alist,
       of_alist_exn,
       type_equal,
       function(_L_, _K_){
        var _M_ = Make(_L_, _K_);
        return [0,
                _M_[2],
                _M_[3],
                _M_[4],
                _M_[5],
                _M_[6],
                _M_[7],
                _M_[8],
                _M_[9],
                _M_[10],
                _M_[11],
                _M_[12],
                _M_[13],
                _M_[14],
                _M_[15],
                _M_[16],
                _M_[17],
                _M_[18],
                _M_[19],
                _M_[20],
                _M_[21],
                _M_[22],
                _M_[23]];
       },
       function(_H_, _G_){
        var _I_ = Make1(_H_, _G_), _J_ = _I_[1];
        return [0,
                _I_[6],
                [0, _J_[1], _J_[3]],
                _I_[7],
                _I_[13],
                _I_[14],
                _I_[15],
                _I_[8],
                _I_[10],
                _I_[9],
                _I_[16],
                _I_[17],
                _I_[18],
                _I_[19],
                _I_[21],
                _I_[20],
                _I_[22],
                _I_[12],
                _I_[11],
                [0],
                _I_[5],
                _I_[23],
                _I_[24]];
       },
       function(Key, _y_, _x_, Output_data){
        Make(Key, Output_data);
        function merge(t1, t2, param){
         var f = param[1];
         function f$0(key, merge_result){
          var _F_ = caml_call2(f, key, merge_result);
          return caml_call2
                  (Base_Option[22],
                   _F_,
                   function(data){return [0, key, data];});
         }
         return caml_call3
                 (Base_Map[73],
                  t1,
                  t2,
                  function(_z_, param){
                   var _A_ = param[1];
                   if(737457313 === _A_){
                    var
                     _B_ = param[2],
                     _C_ = _B_[2],
                     right_data = _C_[2],
                     right_key = _C_[1],
                     match = _B_[1],
                     left_data = match[2],
                     left_key = match[1],
                     _D_ = caml_call1(Key[2], right_key),
                     _E_ = caml_call1(Key[2], left_key);
                    caml_call2(Base_Type_equal[12][11], _E_, _D_);
                    return f$0
                            (left_key, [0, 737457313, [0, left_data, right_data]]);
                   }
                   if(847852583 <= _A_){
                    var match$0 = param[2], data = match$0[2], key = match$0[1];
                    return f$0(key, [0, 847852583, data]);
                   }
                   var
                    match$1 = param[2],
                    data$0 = match$1[2],
                    key$0 = match$1[1];
                   return f$0(key$0, [0, -57574468, data$0]);
                  });
        }
        return [0, merge];
       },
       function(Key, _p_, _o_, Output_data){
        Make1(Key, Output_data);
        function merge(t1, t2, param){
         var f = param[1];
         function f$0(key, merge_result){
          var _w_ = caml_call2(f, key, merge_result);
          return caml_call2
                  (Base_Option[22],
                   _w_,
                   function(data){return [0, key, data];});
         }
         return caml_call3
                 (Base_Map[73],
                  t1,
                  t2,
                  function(_q_, param){
                   var _r_ = param[1];
                   if(737457313 === _r_){
                    var
                     _s_ = param[2],
                     _t_ = _s_[2],
                     right_data = _t_[2],
                     right_key = _t_[1],
                     match = _s_[1],
                     left_data = match[2],
                     left_key = match[1],
                     _u_ = caml_call1(Key[2], right_key),
                     _v_ = caml_call1(Key[2], left_key);
                    caml_call2(Base_Type_equal[12][11], _v_, _u_);
                    return f$0
                            (left_key, [0, 737457313, [0, left_data, right_data]]);
                   }
                   if(847852583 <= _r_){
                    var match$0 = param[2], data = match$0[2], key = match$0[1];
                    return f$0(key, [0, 847852583, data]);
                   }
                   var
                    match$1 = param[2],
                    data$0 = match$1[2],
                    key$0 = match$1[1];
                   return f$0(key$0, [0, -57574468, data$0]);
                  });
        }
        return [0, merge];
       },
       [0, Key, set$0, find$0, change$0],
       [0, Key$0, set$1, find$1, add$0, change$1],
       Multi];
   runtime.caml_register_global(35, Univ_map, cst_Univ_map);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
