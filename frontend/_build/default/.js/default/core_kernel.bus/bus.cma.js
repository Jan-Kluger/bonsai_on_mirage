// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Bus
//# unitInfo: Requires: Base__Backtrace, Base__Field, Base__Invariant, Core, Core__Array, Core__Error, Core__Gc, Core__Info, Core__Int, Core__List, Core__Option, Core__Option_array, Core__Sexp, Core__Source_code_position, Core__Unique_id, Expect_test_collector, Inline_test_config, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Arity1 = "Arity1",
    cst_Arity2 = "Arity2",
    cst_Arity3 = "Arity3",
    cst_Arity4 = "Arity4",
    cst_Arity5 = "Arity5",
    cst_Bus = "Bus",
    cst$0 = "_",
    cst_backtrace = "backtrace",
    cst_bus = "bus",
    cst_bus_src_bus_ml$0 = "bus/src/bus.ml",
    cst_exn = "exn",
    cst_subscribed_from = "subscribed_from",
    cst_subscribers = "subscribers",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    pos$0 = "bus/src/bus.ml:866:21",
    pos = "bus/src/bus.ml:865:21",
    all = [0, 0, [0, 1, [0, 2, 0]]],
    cst = "",
    Core_Error = global_data.Core__Error,
    Core = global_data.Core,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Inline_test_config = global_data.Inline_test_config,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Sexp = global_data.Core__Sexp,
    Core_Source_code_position = global_data.Core__Source_code_position,
    Core_Option_array = global_data.Core__Option_array,
    Core_Int = global_data.Core__Int,
    Base_Backtrace = global_data.Base__Backtrace,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_List = global_data.Core__List,
    Assert_failure = global_data.Assert_failure,
    Core_Option = global_data.Core__Option,
    Base_Invariant = global_data.Base__Invariant,
    Core_Array = global_data.Core__Array,
    Core_Info = global_data.Core__Info;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Core_Unique_id = global_data.Core__Unique_id;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bus);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bus);
   caml_call1(Expect_test_collector[6][1], cst_bus_src_bus_ml$0);
   caml_call2(Ppx_inline_test_lib[5], cst_bus, "bus.ml");
   var
    _d_ = [0, cst_Arity1],
    _e_ = [0, "Arity1_local"],
    _f_ = [0, cst_Arity2],
    _g_ = [0, cst_Arity3],
    _h_ = [0, cst_Arity4],
    _i_ = [0, cst_Arity5],
    _l_ = [0, "Allow"],
    _m_ = [0, "Allow_and_send_last_value"],
    _n_ = [0, "Raise"];
   function sexp_of_t(of_a_002, param){
    switch(param){
      case 0:
       return _d_;
      case 1:
       return _e_;
      case 2:
       return _f_;
      case 3:
       return _g_;
      case 4:
       return _h_;
      default: return _i_;
    }
   }
   function sexp_of_t$0(param){
    switch(param){case 0: return _l_;case 1: return _m_;default: return _n_;
    }
   }
   var Bus_id = caml_call1(Core_Unique_id[2], 0);
   function callback(r){return r[2];}
   var
    callback$0 =
      [0,
       function(param){return 0;},
       "callback",
       0,
       callback,
       function(r, v){return [0, r[1], v, r[3], r[4], r[5], r[6], r[7]];}],
    _o_ = [0, 1],
    _p_ = [0, cst_subscribed_from],
    _q_ = [0, "extract_exn"],
    _r_ = [0, "on_callback_raise"],
    _s_ = [0, "subscribers_index"],
    _t_ = [0, "Bus.Subscriber.t"];
   function sexp_of_t$1(_bA_, param){
    var
     extract_exn = param[3],
     subscribers_index = param[4],
     subscribed_from = param[7],
     on_callback_raise = param[5],
     _bB_ = 0,
     match = Ppx_inline_test_lib[1] ? 0 : [0, subscribers_index],
     match$0 = extract_exn ? _o_ : 0,
     match$1 =
       [0,
        [1,
         [0,
          _p_,
          [0, caml_call1(Core_Source_code_position[1], subscribed_from), 0]]],
        0];
    if(match$0)
     var
      v = match$0[1],
      match$2 = [0, [1, [0, _q_, [0, caml_call1(Core[309], v), 0]]], match$1];
    else
     var match$2 = match$1;
    var
     match$3 =
       on_callback_raise
        ? [0,
          [1,
           [0,
            _r_,
            [0,
             caml_call1(Sexplib0_Sexp_conv[24], function(_bD_){return 0;}),
             0]]],
          match$2]
        : match$2;
    if(match)
     var
      v$0 = match[1],
      res = [0, [1, [0, _s_, [0, caml_call1(Core[363], v$0), 0]]], match$3];
    else
     var res = match$3;
    if(res[2]) var _bC_ = [1, res]; else var h = res[1], _bC_ = h;
    return [1, [0, _t_, [0, _bC_, _bB_]]];
   }
   function callbacks(r){return r[12];}
   function set_callbacks(r, v){r[12] = v; return 0;}
   function subscribers(r){return r[11];}
   function set_subscribers(r, v){r[11] = v; return 0;}
   function num_subscribers(r){return r[10];}
   function set_num_subscribers(r, v){r[10] = v; return 0;}
   function callback_arity(r){return r[3];}
   var
    callbacks$0 =
      [0,
       function(param){return 0;},
       "callbacks",
       [0, set_callbacks],
       callbacks,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                v,
                r[13]];
       }],
    subscribers$0 =
      [0,
       function(param){return 0;},
       cst_subscribers,
       [0, set_subscribers],
       subscribers,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                v,
                r[12],
                r[13]];
       }],
    num_subscribers$0 =
      [0,
       function(param){return 0;},
       "num_subscribers",
       [0, set_num_subscribers],
       num_subscribers,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                v,
                r[11],
                r[12],
                r[13]];
       }],
    _a_ = [0, "Closed"],
    _b_ = [0, "Write_in_progress"],
    _c_ = [0, "Ok_to_write"],
    _u_ = [0, cst$0],
    _v_ = [0, cst_bus_src_bus_ml$0, 209, 5699, 5723],
    _w_ = [0, cst$0],
    _x_ = [0, cst_subscribers],
    _y_ = [0, "write_ever_called"],
    _z_ = [0, "state"],
    _A_ = [0, "on_subscription_after_first_write"],
    _B_ = [0, "created_from"],
    _C_ = [0, cst$0],
    _D_ = [0, "callback_arity"],
    _E_ = [0, "name"],
    _F_ = [0, cst_bus_src_bus_ml$0, 309, 18],
    _G_ = [0, cst_bus_src_bus_ml$0, 305, 11],
    _H_ = [0, cst_bus_src_bus_ml$0, 326, 15],
    _I_ = [0, cst_bus_src_bus_ml$0, 327, 18],
    _J_ = [0, cst_bus_src_bus_ml$0, 313, 54],
    _K_ = [0, cst$0],
    _L_ = [0, cst$0],
    _M_ = [0, cst_bus_src_bus_ml$0, 298, 8179, 8201];
   function sexp_of_bus(_br_, _bq_, param){
    var
     on_subscription_after_first_wr = param[5],
     created_from = param[4],
     callback_arity = param[3],
     name = param[2],
     state = param[8],
     write_ever_called = param[9],
     num_subscribers = param[10],
     subscribers = param[11],
     subscribers$0 =
       caml_call2
        (Core_Array[53],
         num_subscribers,
         function(i){
          return caml_call2(Core_Option_array[43], subscribers, i);
         });
    function _bs_(param){return _w_;}
    var
     _bt_ =
       [0,
        [1,
         [0,
          _x_,
          [0,
           caml_call2
            (Core_Array[17],
             function(_bz_){return sexp_of_t$1(_bs_, _bz_);},
             subscribers$0),
           0]]],
        0],
     _bu_ =
       [0,
        [1, [0, _y_, [0, caml_call1(Core[309], write_ever_called), 0]]],
        _bt_],
     _bv_ = 0;
    switch(state){
      case 0:
       var _bw_ = _a_; break;
      case 1:
       var _bw_ = _b_; break;
      default: var _bw_ = _c_;
    }
    var
     _bx_ =
       [0,
        [1, [0, _A_, [0, sexp_of_t$0(on_subscription_after_first_wr), 0]]],
        [0, [1, [0, _z_, [0, _bw_, _bv_]]], _bu_]],
     _by_ =
       [0,
        [1,
         [0,
          _B_,
          [0, caml_call1(Core_Source_code_position[1], created_from), 0]]],
        _bx_],
     match =
       [0,
        [1,
         [0,
          _D_,
          [0, sexp_of_t(function(param){return _C_;}, callback_arity), 0]]],
        _by_];
    if(name)
     var
      v = name[1],
      res = [0, [1, [0, _E_, [0, caml_call1(Core_Info[6], v), 0]]], match];
    else
     var res = match;
    if(res[2]) return [1, res];
    var h = res[1];
    return h;
   }
   function read_only(t){return t;}
   function invariant(invariant_a, param, t){
    return caml_call4
            (Base_Invariant[1],
             _M_,
             t,
             function(x_011){
              return sexp_of_bus
                      (function(param){return _L_;},
                       function(param){return _K_;},
                       x_011);
             },
             function(param){
              function check(f){return caml_call2(Base_Invariant[2], t, f);}
              var
               callbacks_fun =
                 check
                  (function(callbacks){
                    var
                     _bl_ = caml_call1(Core_Option_array[36], t[11]),
                     _bm_ = caml_call1(Core_Option_array[36], callbacks);
                    if(! caml_call2(Core[89], _bm_, _bl_))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _G_], 1);
                    var
                     _bo_ = caml_call1(Core_Option_array[36], callbacks) - 1 | 0,
                     _bn_ = 0;
                    if(_bo_ >= 0){
                     var i = _bn_;
                     for(;;){
                      if(caml_call2(Core[91], i, t[10]))
                       caml_call1
                        (invariant_a,
                         caml_call2(Core_Option_array[43], callbacks, i));
                      else if(! caml_call2(Core_Option_array[44], callbacks, i))
                       throw caml_maybe_attach_backtrace
                              ([0, Assert_failure, _F_], 1);
                      var _bp_ = i + 1 | 0;
                      if(_bo_ === i) break;
                      i = _bp_;
                     }
                    }
                    return 0;
                   }),
               subscribers_fun =
                 check
                  (function(subscribers){
                    var
                     _bj_ =
                       caml_call1(Core_Option_array[36], subscribers) - 1 | 0,
                     _bi_ = 0;
                    if(_bj_ >= 0){
                     var i = _bi_;
                     for(;;){
                      if(caml_call2(Core[91], i, t[10])){
                       var
                        subscriber =
                          caml_call2(Core_Option_array[43], subscribers, i);
                       let subscriber$0 = subscriber;
                       caml_call4
                        (Base_Invariant[1],
                         _v_,
                         subscriber,
                         function(x_005){
                          return sexp_of_t$1(function(param){return _u_;}, x_005);
                         },
                         function(param){
                          var
                           callback_fun =
                             caml_call2(Base_Invariant[2], subscriber$0, invariant_a);
                          caml_call1(callback_fun, callback$0);
                          return 0;
                         });
                       if(! caml_call2(Core[89], i, subscriber[4]))
                        throw caml_maybe_attach_backtrace
                               ([0, Assert_failure, _H_], 1);
                      }
                      else if(! caml_call2(Core_Option_array[44], subscribers, i))
                       throw caml_maybe_attach_backtrace
                              ([0, Assert_failure, _I_], 1);
                      var _bk_ = i + 1 | 0;
                      if(_bj_ === i) break;
                      i = _bk_;
                     }
                    }
                    return 0;
                   }),
               num_subscribers_fun =
                 check
                  (function(num_subscribers){
                    if(caml_call2(Core[87], num_subscribers, 0)) return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _J_], 1);
                   });
              caml_call1(num_subscribers_fun, num_subscribers$0);
              caml_call1(subscribers_fun, subscribers$0);
              caml_call1(callbacks_fun, callbacks$0);
              return 0;
             });
   }
   function is_closed(t){
    switch(t[8]){case 0: return 1;case 1: return 0;default: return 0;
    }
   }
   function sexp_of_t$2(of_callback_012, x_013){
    return sexp_of_bus(of_callback_012, Core[207], x_013);
   }
   function invariant$0(invariant_a, t){
    return invariant(invariant_a, function(_bh_){return 0;}, t);
   }
   var Read_write = [0, sexp_of_t$2, invariant$0];
   function sexp_of_t$3(of_callback_014, x_015){
    return sexp_of_bus(of_callback_014, Core[170], x_015);
   }
   function invariant$1(invariant_a, t){
    return invariant(invariant_a, function(_bg_){return 0;}, t);
   }
   var
    Read_only = [0, sexp_of_t$3, invariant$1],
    _j_ = [0, cst$0],
    _k_ = [0, "arity"],
    cst_Cannot_save_last_value_whe =
      "Cannot save last value when using local args",
    _N_ = [0, cst$0],
    _O_ = [0, cst$0],
    cst_Bus_write_called_on_closed = "[Bus.write] called on closed bus",
    _P_ = [0, cst_bus_src_bus_ml$0, 349, 9962, 9982],
    _Q_ = [0, cst$0],
    _R_ = [0, cst$0],
    cst_Bus_write_called_from_call =
      "[Bus.write] called from callback on the same bus",
    _S_ = [0, cst_bus_src_bus_ml$0, 352, 10087, 10099],
    _T_ = [0, cst_bus_src_bus_ml$0, 356, 19],
    _U_ = [0, cst_bus_src_bus_ml$0, 425, 2],
    _V_ = [0, cst_bus_src_bus_ml$0, 439, 19],
    _W_ = [0, "original_error"],
    _X_ = [0, cst_backtrace],
    _Y_ = [0, cst_exn],
    cst_Bus_subscriber_s_on_callba =
      "Bus subscriber's [on_callback_raise] raised",
    _Z_ = [0, cst$0],
    ___ = [0, "subscriber"],
    _$_ = [0, cst_backtrace],
    _aa_ = [0, cst_exn],
    cst_Bus_subscriber_raised = "Bus subscriber raised",
    _ab_ = [0, cst$0],
    _ac_ = [0, cst$0],
    _ad_ = [0, cst_bus],
    _ae_ = [0, cst_subscribed_from],
    cst_Bus_subscribe_exn_called_a =
      "Bus.subscribe_exn called after first write",
    _af_ = [0, cst_bus_src_bus_ml$0, 767, 22516, 22528],
    _ag_ = [0, cst$0],
    _ah_ = [0, cst$0],
    cst_Bus_iter_exn_called_after_ = "Bus.iter_exn called after first write",
    _ai_ = [0, cst_bus_src_bus_ml$0, 811, 24118, 24138],
    _aj_ = [0, cst_Arity1],
    _ak_ = [0, cst_Arity2],
    _al_ = [0, cst_Arity3],
    _am_ = [0, cst_Arity4],
    _an_ = [0, cst_Arity5];
   function start_write_failing(t){
    switch(t[8]){
      case 0:
       return caml_call5
               (Core[241],
                0,
                _P_,
                cst_Bus_write_called_on_closed,
                t,
                function(x_016){
                 return sexp_of_bus
                         (function(param){return _O_;},
                          function(param){return _N_;},
                          x_016);
                });
      case 1:
       return caml_call5
               (Core[241],
                0,
                _S_,
                cst_Bus_write_called_from_call,
                t,
                function(x_017){
                 return sexp_of_bus
                         (function(param){return _R_;},
                          function(param){return _Q_;},
                          x_017);
                });
      default: throw caml_maybe_attach_backtrace([0, Assert_failure, _T_], 1);
    }
   }
   function capacity(t){return caml_call1(Core_Option_array[36], t[11]);}
   function maybe_shrink_capacity(t){
    var _bd_ = capacity(t), _be_ = caml_call2(Core[88], t[10] * 4 | 0, _bd_);
    if(_be_){
     var
      desired_capacity = t[10],
      copy_and_shrink =
        function(array){
         var new_array = caml_call1(Core_Option_array[13], desired_capacity);
         caml_call5(Core_Option_array[60], array, 0, new_array, 0, t[10]);
         return new_array;
        };
     t[11] = copy_and_shrink(t[11]);
     t[12] = copy_and_shrink(t[12]);
     var _bf_ = 0;
    }
    else
     var _bf_ = _be_;
    return _bf_;
   }
   function add_subscriber(t, subscriber, at_subscribers_index){
    subscriber[4] = at_subscribers_index;
    caml_call3(Core_Option_array[51], t[11], at_subscribers_index, subscriber);
    return caml_call3
            (Core_Option_array[51],
             t[12],
             at_subscribers_index,
             subscriber[2]);
   }
   function remove_subscriber(t, subscriber){
    var subscribers_index = subscriber[4];
    subscriber[4] = -1;
    caml_call2(Core_Option_array[52], t[11], subscribers_index);
    return caml_call2(Core_Option_array[52], t[12], subscribers_index);
   }
   function unsubscribe_assuming_valid_sub(t, subscriber){
    var
     subscriber_index = subscriber[4],
     last_subscriber_index = t[10] - 1 | 0;
    remove_subscriber(t, subscriber);
    if(caml_call2(Core[91], subscriber_index, last_subscriber_index)){
     var
      last_subscriber =
        caml_call2(Core_Option_array[43], t[11], last_subscriber_index);
     remove_subscriber(t, last_subscriber);
     add_subscriber(t, last_subscriber, subscriber_index);
    }
    t[10] = t[10] - 1 | 0;
    return maybe_shrink_capacity(t);
   }
   function unsubscribe(t, subscriber){
    var
     to = t[1],
     _bb_ = caml_call2(Core[87], subscriber[4], 0),
     _bc_ = _bb_ ? caml_call2(Bus_id[19], subscriber[1], to) : _bb_;
    if(_bc_)
     switch(t[8]){
       case 0:
        return 0;
       case 1:
        t[13] = [0, subscriber, t[13]]; return 0;
       default: return unsubscribe_assuming_valid_sub(t, subscriber);
     }
    return _bc_;
   }
   function unsubscribe_all(t){
    if(! is_closed(t))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _U_], 1);
    var _a$_ = t[10] - 1 | 0, _a__ = 0;
    if(_a$_ >= 0){
     var i = _a__;
     for(;;){
      var subscriber = caml_call2(Core_Option_array[43], t[11], i);
      caml_call2
       (Core_Option[42],
        subscriber[6],
        function(on_close){return caml_call1(on_close, 0);});
      remove_subscriber(t, subscriber);
      var _ba_ = i + 1 | 0;
      if(_a$_ === i) break;
      i = _ba_;
     }
    }
    t[10] = 0;
    return maybe_shrink_capacity(t);
   }
   function finish_write(t){
    if(1 - caml_call1(Core_List[18], t[13])){
     caml_call2
      (Core_List[19],
       t[13],
       function(_a9_){return unsubscribe_assuming_valid_sub(t, _a9_);});
     t[13] = 0;
    }
    switch(t[8]){
      case 0:
       return unsubscribe_all(t);
      case 1:
       t[8] = 2; return 0;
      default: throw caml_maybe_attach_backtrace([0, Assert_failure, _V_], 1);
    }
   }
   function close(t){
    switch(t[8]){
      case 0:
       return 0;
      case 1:
       t[8] = 0; return 0;
      default: t[8] = 0; return unsubscribe_all(t);
    }
   }
   function call_on_callback_raise(t, error){
    try{caml_call1(t[6], error); return;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     close(t);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function callback_raised(t, i, exn){
    var subscriber = caml_call2(Core_Option_array[43], t[11], i - 1 | 0);
    if(subscriber[3])
     var error = caml_call2(Core_Error[25], 0, exn);
    else
     var
      backtrace$0 = caml_call1(Base_Backtrace[6][4], 0),
      _a5_ =
        [0,
         [1,
          [0,
           ___,
           [0, sexp_of_t$1(function(param){return _Z_;}, subscriber), 0]]],
         0],
      _a6_ =
        [0,
         [1, [0, _$_, [0, caml_call1(Base_Backtrace[1], backtrace$0), 0]]],
         _a5_],
      _a7_ = [0, [1, [0, _aa_, [0, caml_call1(Core[539], exn), 0]]], _a6_],
      _a8_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Bus_subscriber_raised),
          _a7_]],
      error = caml_call1(Core_Error[5], _a8_);
    var match = subscriber[5];
    if(! match) return call_on_callback_raise(t, error);
    var f = match[1];
    try{caml_call1(f, error); return;}
    catch(exn){
     var
      exn$0 = caml_wrap_exception(exn),
      backtrace = caml_call1(Base_Backtrace[6][4], 0),
      _a1_ = [0, [1, [0, _W_, [0, caml_call1(Core_Error[6], error), 0]]], 0],
      _a2_ =
        [0,
         [1, [0, _X_, [0, caml_call1(Base_Backtrace[1], backtrace), 0]]],
         _a1_],
      _a3_ = [0, [1, [0, _Y_, [0, caml_call1(Core[539], exn$0), 0]]], _a2_],
      _a4_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Bus_subscriber_s_on_callba),
          _a3_]];
     return call_on_callback_raise(t, caml_call1(Core_Error[5], _a4_));
    }
   }
   function unsafe_get_callback(a, i){
    return caml_call2(Core_Option_array[48], a, i);
   }
   function write(t, a1){
    var callbacks = t[12];
    t[9] = 1;
    if(2 > t[8]) return start_write_failing(t);
    if(caml_call2(Core[90], t[10], 0)){
     t[8] = 1;
     if(caml_call2(Core[89], t[10], 1)){
      try{caml_call1(unsafe_get_callback(callbacks, 0), a1);}
      catch(exn){
       var exn$0 = caml_wrap_exception(exn);
       callback_raised(t, 1, exn$0);
      }
      finish_write(t);
     }
     else{
      var len = t[10], i = [0, 0];
      for(;;){
       if(! caml_call2(Core[91], i[1], len)){finish_write(t); break;}
       try{
        var callback = unsafe_get_callback(callbacks, i[1]);
        i[1]++;
        caml_call1(callback, a1);
       }
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        callback_raised(t, i[1], exn);
        continue;
       }
      }
     }
    }
    var match = t[7];
    if(! match) return 0;
    var last_value = match[1], _a0_ = last_value[1];
    return _a0_ ? (_a0_[1][1] = a1, 0) : (last_value[1] = [0, [0, a1]], 0);
   }
   function write_local(t, a1){
    var callbacks = t[12];
    t[9] = 1;
    if(2 > t[8]) return start_write_failing(t);
    var _aZ_ = caml_call2(Core[90], t[10], 0);
    if(! _aZ_) return _aZ_;
    t[8] = 1;
    if(caml_call2(Core[89], t[10], 1)){
     try{caml_call1(unsafe_get_callback(callbacks, 0), a1);}
     catch(exn){
      var exn$0 = caml_wrap_exception(exn);
      callback_raised(t, 1, exn$0);
     }
     return finish_write(t);
    }
    var len = t[10], i = [0, 0];
    for(;;){
     if(! caml_call2(Core[91], i[1], len)) return finish_write(t);
     try{
      var callback = unsafe_get_callback(callbacks, i[1]);
      i[1]++;
      caml_call1(callback, a1);
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      callback_raised(t, i[1], exn);
      continue;
     }
    }
   }
   function write2(t, a1, a2){
    var callbacks = t[12];
    t[9] = 1;
    if(2 > t[8]) return start_write_failing(t);
    if(caml_call2(Core[90], t[10], 0)){
     t[8] = 1;
     if(caml_call2(Core[89], t[10], 1)){
      try{caml_call2(unsafe_get_callback(callbacks, 0), a1, a2);}
      catch(exn){
       var exn$0 = caml_wrap_exception(exn);
       callback_raised(t, 1, exn$0);
      }
      finish_write(t);
     }
     else{
      var len = t[10], i = [0, 0];
      for(;;){
       if(! caml_call2(Core[91], i[1], len)){finish_write(t); break;}
       try{
        var callback = unsafe_get_callback(callbacks, i[1]);
        i[1]++;
        caml_call2(callback, a1, a2);
       }
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        callback_raised(t, i[1], exn);
        continue;
       }
      }
     }
    }
    var match$0 = t[7];
    if(! match$0) return 0;
    var last_value = match$0[1], _aY_ = last_value[1];
    if(_aY_){var match = _aY_[1]; match[1] = a1; match[2] = a2; return 0;}
    last_value[1] = [0, [1, a1, a2]];
    return 0;
   }
   function write3(t, a1, a2, a3){
    var callbacks = t[12];
    t[9] = 1;
    if(2 > t[8]) return start_write_failing(t);
    if(caml_call2(Core[90], t[10], 0)){
     t[8] = 1;
     if(caml_call2(Core[89], t[10], 1)){
      try{caml_call3(unsafe_get_callback(callbacks, 0), a1, a2, a3);}
      catch(exn){
       var exn$0 = caml_wrap_exception(exn);
       callback_raised(t, 1, exn$0);
      }
      finish_write(t);
     }
     else{
      var len = t[10], i = [0, 0];
      for(;;){
       if(! caml_call2(Core[91], i[1], len)){finish_write(t); break;}
       try{
        var callback = unsafe_get_callback(callbacks, i[1]);
        i[1]++;
        caml_call3(callback, a1, a2, a3);
       }
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        callback_raised(t, i[1], exn);
        continue;
       }
      }
     }
    }
    var match$0 = t[7];
    if(! match$0) return 0;
    var last_value = match$0[1], _aX_ = last_value[1];
    if(_aX_){
     var match = _aX_[1];
     match[1] = a1;
     match[2] = a2;
     match[3] = a3;
     return 0;
    }
    last_value[1] = [0, [2, a1, a2, a3]];
    return 0;
   }
   function write4(t, a1, a2, a3, a4){
    var callbacks = t[12];
    t[9] = 1;
    if(2 > t[8]) return start_write_failing(t);
    if(caml_call2(Core[90], t[10], 0)){
     t[8] = 1;
     if(caml_call2(Core[89], t[10], 1)){
      try{caml_call4(unsafe_get_callback(callbacks, 0), a1, a2, a3, a4);}
      catch(exn){
       var exn$0 = caml_wrap_exception(exn);
       callback_raised(t, 1, exn$0);
      }
      finish_write(t);
     }
     else{
      var len = t[10], i = [0, 0];
      for(;;){
       if(! caml_call2(Core[91], i[1], len)){finish_write(t); break;}
       try{
        var callback = unsafe_get_callback(callbacks, i[1]);
        i[1]++;
        caml_call4(callback, a1, a2, a3, a4);
       }
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        callback_raised(t, i[1], exn);
        continue;
       }
      }
     }
    }
    var match$0 = t[7];
    if(! match$0) return 0;
    var last_value = match$0[1], _aW_ = last_value[1];
    if(_aW_){
     var match = _aW_[1];
     match[1] = a1;
     match[2] = a2;
     match[3] = a3;
     match[4] = a4;
     return 0;
    }
    last_value[1] = [0, [3, a1, a2, a3, a4]];
    return 0;
   }
   function write5(t, arg1, arg2, arg3, arg4, arg5){
    var callbacks = t[12];
    t[9] = 1;
    if(2 > t[8]) return start_write_failing(t);
    if(caml_call2(Core[90], t[10], 0)){
     t[8] = 1;
     if(caml_call2(Core[89], t[10], 1)){
      try{
       caml_call5
        (unsafe_get_callback(callbacks, 0), arg1, arg2, arg3, arg4, arg5);
      }
      catch(exn){
       var exn$0 = caml_wrap_exception(exn);
       callback_raised(t, 1, exn$0);
      }
      finish_write(t);
     }
     else{
      var len = t[10], i = [0, 0];
      for(;;){
       if(! caml_call2(Core[91], i[1], len)){finish_write(t); break;}
       try{
        var callback = unsafe_get_callback(callbacks, i[1]);
        i[1]++;
        caml_call5(callback, arg1, arg2, arg3, arg4, arg5);
       }
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        callback_raised(t, i[1], exn);
        continue;
       }
      }
     }
    }
    var match$0 = t[7];
    if(! match$0) return 0;
    var last_value = match$0[1], _aV_ = last_value[1];
    if(_aV_){
     var match = _aV_[1];
     match[1] = arg1;
     match[2] = arg2;
     match[3] = arg3;
     match[4] = arg4;
     match[5] = arg5;
     return 0;
    }
    last_value[1] = [0, [4, arg1, arg2, arg3, arg4, arg5]];
    return 0;
   }
   function create_exn
   (name,
    created_from,
    callback_arity,
    on_subscription_after_first_wr,
    on_callback_raise){
    switch(on_subscription_after_first_wr){
      case 0:
       var last_value = 0; break;
      case 1:
       switch(callback_arity){
         case 0:
          var _aQ_ = 0; break;
         case 1:
          var _aQ_ = 1; break;
         case 2:
          var _aQ_ = 0; break;
         case 3:
          var _aQ_ = 0; break;
         case 4:
          var _aQ_ = 0; break;
         default: var _aQ_ = 0;
       }
       if(_aQ_){
        var
         _aR_ =
           [0,
            [1,
             [0,
              _k_,
              [0, sexp_of_t(function(param){return _j_;}, callback_arity), 0]]],
            0],
         _aS_ =
           [1,
            [0,
             caml_call1(Sexplib0_Sexp_conv[7], cst_Cannot_save_last_value_whe),
             _aR_]];
        caml_call1(Core[255], _aS_);
       }
       var last_value = [0, [0, 0]];
       break;
      default: var last_value = 0;
    }
    var
     _aT_ = caml_call1(Core_Option_array[13], 0),
     _aU_ = caml_call1(Core_Option_array[13], 0);
    return [0,
            caml_call1(Bus_id[45], 0),
            name,
            callback_arity,
            created_from,
            on_subscription_after_first_wr,
            on_callback_raise,
            last_value,
            2,
            0,
            0,
            _aU_,
            _aT_,
            0];
   }
   function can_subscribe(t){
    switch(t[5]){
      case 0:
       var _aO_ = 1; break;
      case 1:
       var _aO_ = 1; break;
      default: var _aO_ = 0;
    }
    var _aP_ = _aO_ || 1 - t[9];
    return _aP_;
   }
   function subscribe_exn
   (opt, on_callback_raise, on_close, x_019, subscribed_from, callback){
    var extract_exn = opt ? opt[1] : 0;
    if(1 - can_subscribe(x_019)){
     var
      _aJ_ = Core_Sexp[90],
      _aK_ =
        [0,
         [1,
          [0,
           [1,
            [0,
             _ad_,
             [0,
              sexp_of_bus
               (function(param){return _ac_;},
                function(param){return _ab_;},
                x_019),
              0]]],
           0]],
         0],
      _aL_ =
        [1,
         [0,
          [1,
           [0,
            _ae_,
            [0, caml_call1(Core_Source_code_position[1], subscribed_from), 0]]],
          _aK_]];
     caml_call5
      (Core[241], 0, _af_, cst_Bus_subscribe_exn_called_a, _aL_, _aJ_);
    }
    if(! x_019[8]){
     var bus_id$0 = x_019[1];
     return [0,
             bus_id$0,
             callback,
             extract_exn,
             -1,
             on_callback_raise,
             on_close,
             subscribed_from];
    }
    var
     subscribers_index = x_019[10],
     bus_id = x_019[1],
     subscriber =
       [0,
        bus_id,
        callback,
        extract_exn,
        subscribers_index,
        on_callback_raise,
        on_close,
        subscribed_from],
     _aM_ = x_019[10],
     _aN_ = capacity(x_019);
    if(caml_call2(Core[89], _aN_, _aM_)){
     var
      capacity$0 = capacity(x_019),
      new_capacity = caml_call2(Core_Int[95], 1, capacity$0 * 2 | 0),
      copy_and_double =
        function(array){
         var new_array = caml_call1(Core_Option_array[13], new_capacity);
         caml_call5(Core_Option_array[60], array, 0, new_array, 0, capacity$0);
         return new_array;
        };
     x_019[11] = copy_and_double(x_019[11]);
     x_019[12] = copy_and_double(x_019[12]);
    }
    add_subscriber(x_019, subscriber, x_019[10]);
    x_019[10] = x_019[10] + 1 | 0;
    var match$0 = x_019[7];
    if(match$0){
     var last_value = match$0[1], _aI_ = last_value[1];
     if(_aI_){
      var match = _aI_[1];
      switch(match[0]){
        case 0:
         var arg1 = match[1]; caml_call1(callback, arg1); break;
        case 1:
         var arg1$0 = match[1], arg2 = match[2];
         caml_call2(callback, arg1$0, arg2);
         break;
        case 2:
         var arg1$1 = match[1], arg2$0 = match[2], arg3 = match[3];
         caml_call3(callback, arg1$1, arg2$0, arg3);
         break;
        case 3:
         var
          arg1$2 = match[1],
          arg2$1 = match[2],
          arg3$0 = match[3],
          arg4 = match[4];
         caml_call4(callback, arg1$2, arg2$1, arg3$0, arg4);
         break;
        default:
         var
          arg1$3 = match[1],
          arg2$2 = match[2],
          arg3$1 = match[3],
          arg4$0 = match[4],
          arg5 = match[5];
         caml_call5(callback, arg1$3, arg2$2, arg3$1, arg4$0, arg5);
      }
     }
    }
    return subscriber;
   }
   function iter_exn(extract_exn, t, subscribed_from, f){
    if(1 - can_subscribe(t))
     caml_call5
      (Core[241],
       0,
       _ai_,
       cst_Bus_iter_exn_called_after_,
       t,
       function(x_020){
        return sexp_of_bus
                (function(param){return _ah_;},
                 function(param){return _ag_;},
                 x_020);
       });
    subscribe_exn(extract_exn, 0, 0, t, subscribed_from, f);
    return 0;
   }
   function sexp_of_t$4(of_a_024, of_b_025, of_c_026, param){
    switch(param){
      case 0:
       return _aj_;
      case 1:
       return _ak_;
      case 2:
       return _al_;
      case 3:
       return _am_;
      default: return _an_;
    }
   }
   var
    Fold_arity = [0, sexp_of_t$4],
    _ao_ = [0, cst$0],
    _ap_ = [0, cst$0],
    cst_Bus_fold_exn_called_after_ = "Bus.fold_exn called after first write",
    _aq_ = [0, cst_bus_src_bus_ml$0, 841, 25007, 25027],
    _ar_ = [0, cst_bus_src_bus_ml$0, 859, 25627, 25661],
    _as_ = [0, cst_bus_src_bus_ml$0, 880, 26605, 26629],
    _at_ = [0, cst_bus_src_bus_ml$0, 881, 26647, 26671],
    _au_ = [0, cst_bus_src_bus_ml$0, 882, 26689, 26713],
    _av_ = [0, cst_bus_src_bus_ml$0, 883, 26731, 26755],
    _aw_ = [0, cst_bus_src_bus_ml$0, 884, 26773, 26797],
    cst_bus_src_bus_ml = cst_bus_src_bus_ml$0,
    cst_write_doesn_t_allocate_whe = "write doesn't allocate when inlined";
   function fold_exn(extract_exn, t, subscribed_from, fold_arity, init, f){
    var state = [0, init];
    if(1 - can_subscribe(t))
     caml_call5
      (Core[241],
       0,
       _aq_,
       cst_Bus_fold_exn_called_after_,
       t,
       function(x_030){
        return sexp_of_bus
                (function(param){return _ap_;},
                 function(param){return _ao_;},
                 x_030);
       });
    switch(fold_arity){
      case 0:
       var
        _aH_ = function(a1){state[1] = caml_call2(f, state[1], a1); return 0;};
       break;
      case 1:
       var
        _aH_ =
          function(a1, a2){
           state[1] = caml_call3(f, state[1], a1, a2);
           return 0;
          };
       break;
      case 2:
       var
        _aH_ =
          function(a1, a2, a3){
           state[1] = caml_call4(f, state[1], a1, a2, a3);
           return 0;
          };
       break;
      case 3:
       var
        _aH_ =
          function(a1, a2, a3, a4){
           state[1] = caml_call5(f, state[1], a1, a2, a3, a4);
           return 0;
          };
       break;
      default:
       var
        _aH_ =
          function(a1, a2, a3, a4, a5){
           state[1] = caml_call6(f, state[1], a1, a2, a3, a4, a5);
           return 0;
          };
    }
    return iter_exn(extract_exn, t, subscribed_from, _aH_);
   }
   caml_call8
    (Ppx_inline_test_lib[9],
     Inline_test_config,
     cst,
     0,
     cst_bus_src_bus_ml$0,
     855,
     0,
     1803,
     function(param){
      function assert_no_allocation(bus_r, callback, write){
       subscribe_exn(0, 0, 0, bus_r, _ar_, callback);
       var
        starting_minor_words = runtime.core_gc_minor_words(0),
        starting_major_words = runtime.core_gc_major_words(0);
       caml_call1(write, 0);
       var
        ending_minor_words = runtime.core_gc_minor_words(0),
        ending_major_words = runtime.core_gc_major_words(0),
        got = ending_minor_words - starting_minor_words | 0,
        sexpifier = Core[363];
       function comparator(a_031, b_032){
        return caml_call2(Core[358], a_031, b_032);
       }
       caml_call8
        (Ppx_assert_lib_Runtime[3],
         pos,
         sexpifier,
         comparator,
         0,
         0,
         0,
         0,
         got);
       var
        got$0 = ending_major_words - starting_major_words | 0,
        sexpifier$0 = Core[363];
       function comparator$0(a_033, b_034){
        return caml_call2(Core[358], a_033, b_034);
       }
       return caml_call8
               (Ppx_assert_lib_Runtime[3],
                pos$0,
                sexpifier$0,
                comparator$0,
                0,
                0,
                0,
                0,
                got$0);
      }
      caml_call8
       (Ppx_inline_test_lib[8],
        Inline_test_config,
        cst_write_doesn_t_allocate_whe,
        0,
        cst_bus_src_bus_ml,
        872,
        4,
        945,
        function(param){
         function create(created_from, arity){
          return create_exn(0, created_from, arity, 2, Core_Error[28]);
         }
         var
          bus1 = create(_as_, 0),
          bus2 = create(_at_, 2),
          bus3 = create(_au_, 3),
          bus4 = create(_av_, 4),
          bus5 = create(_aw_, 5);
         assert_no_allocation
          (bus1,
           function(param){return 0;},
           function(param){return write(bus1, 0);});
         assert_no_allocation
          (bus2,
           function(_aG_, param){return 0;},
           function(param){return write2(bus2, 0, 0);});
         assert_no_allocation
          (bus3,
           function(_aF_, _aE_, param){return 0;},
           function(param){return write3(bus3, 0, 0, 0);});
         assert_no_allocation
          (bus4,
           function(_aD_, _aC_, _aB_, param){return 0;},
           function(param){return write4(bus4, 0, 0, 0, 0);});
         assert_no_allocation
          (bus5,
           function(_aA_, _az_, _ay_, _ax_, param){return 0;},
           function(param){return write5(bus5, 0, 0, 0, 0, 0);});
         return 0;
        });
      return 0;
     });
   caml_call1(Ppx_inline_test_lib[6], cst_bus);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bus);
   var
    Bus =
      [0,
       [0, sexp_of_t],
       sexp_of_bus,
       Read_write,
       Read_only,
       [0, all, sexp_of_t$0],
       read_only,
       create_exn,
       callback_arity,
       num_subscribers,
       is_closed,
       close,
       write,
       write_local,
       write2,
       write3,
       write4,
       write5,
       [0, sexp_of_t$1],
       subscribe_exn,
       iter_exn,
       Fold_arity,
       fold_exn,
       unsubscribe];
   runtime.caml_register_global(143, Bus, cst_Bus);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVzLmNtYS5qcyIsInNlY3Rpb25zIjpbeyJvZmZzZXQiOnsibGluZSI6OSwiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsImZpbGUiOiJidXMuY21hLmpzIiwibmFtZXMiOlsicnVudGltZSIsImNzdF9Bcml0eTEiLCJjc3RfQXJpdHkyIiwiY3N0X0FyaXR5MyIsImNzdF9Bcml0eTQiLCJjc3RfQXJpdHk1IiwiY3N0X0J1cyIsImNzdCIsImNzdF9iYWNrdHJhY2UiLCJjc3RfYnVzIiwiY3N0X2J1c19zcmNfYnVzX21sIiwiY3N0X2V4biIsImNzdF9zdWJzY3JpYmVkX2Zyb20iLCJjc3Rfc3Vic2NyaWJlcnMiLCJjYW1sX21heWJlX2F0dGFjaF9iYWNrdHJhY2UiLCJjYW1sX3dyYXBfZXhjZXB0aW9uIiwiY2FtbF9jYWxsMSIsImYiLCJhMCIsImNhbWxfY2FsbDIiLCJhMSIsImNhbWxfY2FsbDMiLCJhMiIsImNhbWxfY2FsbDQiLCJhMyIsImNhbWxfY2FsbDUiLCJhNCIsImNhbWxfY2FsbDYiLCJhNSIsImNhbWxfY2FsbDgiLCJhNiIsImE3IiwiZHVtbXkiLCJnbG9iYWxfZGF0YSIsInBvcyIsImFsbCIsIkNvcmVfRXJyb3IiLCJDb3JlIiwiUHB4X2Fzc2VydF9saWJfUnVudGltZSIsIklubGluZV90ZXN0X2NvbmZpZyIsIlBweF9pbmxpbmVfdGVzdF9saWIiLCJDb3JlX1NleHAiLCJDb3JlX1NvdXJjZV9jb2RlX3Bvc2l0aW9uIiwiQ29yZV9PcHRpb25fYXJyYXkiLCJDb3JlX0ludCIsIkJhc2VfQmFja3RyYWNlIiwiU2V4cGxpYjBfU2V4cF9jb252IiwiQ29yZV9MaXN0IiwiQXNzZXJ0X2ZhaWx1cmUiLCJDb3JlX09wdGlvbiIsIkJhc2VfSW52YXJpYW50IiwiQ29yZV9BcnJheSIsIkNvcmVfSW5mbyIsIlBweF9tb2R1bGVfdGltZXJfcnVudGltZSIsIlBweF9iZW5jaF9saWJfQmVuY2htYXJrX2FjY3VtdSIsIkV4cGVjdF90ZXN0X2NvbGxlY3RvciIsIkNvcmVfVW5pcXVlX2lkIiwic2V4cF9vZl90Iiwib2ZfYV8wMDIiLCJwYXJhbSIsIkJ1c19pZCIsImNhbGxiYWNrIiwiciIsInYiLCJleHRyYWN0X2V4biIsInN1YnNjcmliZXJzX2luZGV4Iiwic3Vic2NyaWJlZF9mcm9tIiwib25fY2FsbGJhY2tfcmFpc2UiLCJtYXRjaCIsInJlcyIsImgiLCJjYWxsYmFja3MiLCJzZXRfY2FsbGJhY2tzIiwic3Vic2NyaWJlcnMiLCJzZXRfc3Vic2NyaWJlcnMiLCJudW1fc3Vic2NyaWJlcnMiLCJzZXRfbnVtX3N1YnNjcmliZXJzIiwiY2FsbGJhY2tfYXJpdHkiLCJzZXhwX29mX2J1cyIsIm9uX3N1YnNjcmlwdGlvbl9hZnRlcl9maXJzdF93ciIsImNyZWF0ZWRfZnJvbSIsIm5hbWUiLCJzdGF0ZSIsIndyaXRlX2V2ZXJfY2FsbGVkIiwiaSIsInJlYWRfb25seSIsInQiLCJpbnZhcmlhbnQiLCJpbnZhcmlhbnRfYSIsInhfMDExIiwiY2hlY2siLCJjYWxsYmFja3NfZnVuIiwic3Vic2NyaWJlcnNfZnVuIiwic3Vic2NyaWJlciIsInhfMDA1IiwiY2FsbGJhY2tfZnVuIiwibnVtX3N1YnNjcmliZXJzX2Z1biIsImlzX2Nsb3NlZCIsIm9mX2NhbGxiYWNrXzAxMiIsInhfMDEzIiwiUmVhZF93cml0ZSIsIm9mX2NhbGxiYWNrXzAxNCIsInhfMDE1IiwiUmVhZF9vbmx5IiwiY3N0X0Nhbm5vdF9zYXZlX2xhc3RfdmFsdWVfd2hlIiwiY3N0X0J1c193cml0ZV9jYWxsZWRfb25fY2xvc2VkIiwiY3N0X0J1c193cml0ZV9jYWxsZWRfZnJvbV9jYWxsIiwiY3N0X0J1c19zdWJzY3JpYmVyX3Nfb25fY2FsbGJhIiwiY3N0X0J1c19zdWJzY3JpYmVyX3JhaXNlZCIsImNzdF9CdXNfc3Vic2NyaWJlX2V4bl9jYWxsZWRfYSIsImNzdF9CdXNfaXRlcl9leG5fY2FsbGVkX2FmdGVyXyIsInN0YXJ0X3dyaXRlX2ZhaWxpbmciLCJ4XzAxNiIsInhfMDE3IiwiY2FwYWNpdHkiLCJtYXliZV9zaHJpbmtfY2FwYWNpdHkiLCJkZXNpcmVkX2NhcGFjaXR5IiwiY29weV9hbmRfc2hyaW5rIiwiYXJyYXkiLCJuZXdfYXJyYXkiLCJhZGRfc3Vic2NyaWJlciIsImF0X3N1YnNjcmliZXJzX2luZGV4IiwicmVtb3ZlX3N1YnNjcmliZXIiLCJ1bnN1YnNjcmliZV9hc3N1bWluZ192YWxpZF9zdWIiLCJzdWJzY3JpYmVyX2luZGV4IiwibGFzdF9zdWJzY3JpYmVyX2luZGV4IiwibGFzdF9zdWJzY3JpYmVyIiwidW5zdWJzY3JpYmUiLCJ0byIsInVuc3Vic2NyaWJlX2FsbCIsIm9uX2Nsb3NlIiwiZmluaXNoX3dyaXRlIiwiY2xvc2UiLCJjYWxsX29uX2NhbGxiYWNrX3JhaXNlIiwiZXJyb3IiLCJleG4iLCJjYWxsYmFja19yYWlzZWQiLCJiYWNrdHJhY2UiLCJ1bnNhZmVfZ2V0X2NhbGxiYWNrIiwiYSIsIndyaXRlIiwibGVuIiwibGFzdF92YWx1ZSIsIndyaXRlX2xvY2FsIiwid3JpdGUyIiwid3JpdGUzIiwid3JpdGU0Iiwid3JpdGU1IiwiYXJnMSIsImFyZzIiLCJhcmczIiwiYXJnNCIsImFyZzUiLCJjcmVhdGVfZXhuIiwiY2FuX3N1YnNjcmliZSIsInN1YnNjcmliZV9leG4iLCJvcHQiLCJ4XzAxOSIsImJ1c19pZCIsIm5ld19jYXBhY2l0eSIsImNvcHlfYW5kX2RvdWJsZSIsIml0ZXJfZXhuIiwieF8wMjAiLCJvZl9hXzAyNCIsIm9mX2JfMDI1Iiwib2ZfY18wMjYiLCJGb2xkX2FyaXR5IiwiY3N0X0J1c19mb2xkX2V4bl9jYWxsZWRfYWZ0ZXJfIiwiY3N0X3dyaXRlX2RvZXNuX3RfYWxsb2NhdGVfd2hlIiwiZm9sZF9leG4iLCJmb2xkX2FyaXR5IiwiaW5pdCIsInhfMDMwIiwiYXNzZXJ0X25vX2FsbG9jYXRpb24iLCJidXNfciIsInN0YXJ0aW5nX21pbm9yX3dvcmRzIiwic3RhcnRpbmdfbWFqb3Jfd29yZHMiLCJlbmRpbmdfbWlub3Jfd29yZHMiLCJlbmRpbmdfbWFqb3Jfd29yZHMiLCJnb3QiLCJzZXhwaWZpZXIiLCJjb21wYXJhdG9yIiwiYV8wMzEiLCJiXzAzMiIsImFfMDMzIiwiYl8wMzQiLCJjcmVhdGUiLCJhcml0eSIsImJ1czEiLCJidXMyIiwiYnVzMyIsImJ1czQiLCJidXM1IiwiQnVzIl0sInNvdXJjZXMiOlsiL2J1aWx0aW4vYmxhY2tib3gubWwiLCIvVXNlcnMveWFubmljay8ub3BhbS9ib25zYWktZnJvbnRlbmQvbGliL2NvcmVfa2VybmVsL2J1cy9idXMubWwiXSwibWFwcGluZ3MiOiJJQUFBQSxVQUFBO0FBQUEsSUFBQUMsYUFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxhQUFBO0FBQUEsSUFBQUMsYUFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxVQUFBO0FBQUEsSUFBQUMsUUFBQTtBQUFBLElBQUFDLGdCQUFBO0FBQUEsSUFBQUMsVUFBQTtBQUFBLElBQUFDLHVCQUFBO0FBQUEsSUFBQUMsVUFBQTtBQUFBLElBQUFDLHNCQUFBO0FBQUEsSUFBQUMsa0JBQUE7QUFBQSxJQUFBQyw4QkFBQTtBQUFBLElBQUFDLHNCQUFBO0FBQUEsWUFBQUMsV0FBQUMsR0FBQUM7QUFBQUEsSUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFlBQUFDLFdBQUFGLEdBQUFDLElBQUFFO0FBQUFBLElBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUFBQyxXQUFBSixHQUFBQyxJQUFBRSxJQUFBRTtBQUFBQSxJQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsWUFBQUMsV0FBQU4sR0FBQUMsSUFBQUUsSUFBQUUsSUFBQUU7QUFBQUEsSUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFlBQUFDLFdBQUFSLEdBQUFDLElBQUFFLElBQUFFLElBQUFFLElBQUFFO0FBQUFBLElBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUFBQyxXQUFBVixHQUFBQyxJQUFBRSxJQUFBRSxJQUFBRSxJQUFBRSxJQUFBRTtBQUFBQSxJQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsWUFBQUMsV0FBQVosR0FBQUMs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O0FBQUEsU0FDOUU7QUFBQTtBQUFBLHNDQUFBQSxPQUVzQixTQUFFO0FBQUEsb0JBQUFBLE9BQ1gsK0JBQXVCO0FBQUEsU0FDcEM7QUFBQTtBQUFBLDRDQUFBQSxPQUV5QixTQUFFO0FBQUEsb0JBQUFBLE9BQ2Qsa0NBQTBCO0FBQUEsU0F2QnpDO0FBQUEsUUF1QjBDO0FBQUE7QUFBQSxLQUV4QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBc0k7QUFBQUEsTUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRURoNEJOIiwic291cmNlc0NvbnRlbnQiOlsiKCogZ2VuZXJhdGVkIGNvZGUgKikiLCJvcGVuISBDb3JlXG5cbm1vZHVsZSBTdGF0ZSA9IHN0cnVjdFxuICB0eXBlIHQgPVxuICAgIHwgQ2xvc2VkXG4gICAgfCBXcml0ZV9pbl9wcm9ncmVzc1xuICAgIHwgT2tfdG9fd3JpdGVcbiAgW0BAZGVyaXZpbmcgc2V4cF9vZl1cblxuICBsZXQgaXNfY2xvc2VkID0gZnVuY3Rpb25cbiAgICB8IENsb3NlZCAtPiB0cnVlXG4gICAgfCBXcml0ZV9pbl9wcm9ncmVzcyAtPiBmYWxzZVxuICAgIHwgT2tfdG9fd3JpdGUgLT4gZmFsc2VcbiAgOztcbmVuZFxuXG5tb2R1bGUgQ2FsbGJhY2tfYXJpdHkgPSBzdHJ1Y3RcbiAgdHlwZSBfIHQgPVxuICAgIHwgQXJpdHkxIDogKCdhIC0+IHVuaXQpIHRcbiAgICB8IEFyaXR5MV9sb2NhbCA6ICgoJ2FbQGxvY2FsXSkgLT4gdW5pdCkgdFxuICAgIHwgQXJpdHkyIDogKCdhIC0+ICdiIC0+IHVuaXQpIHRcbiAgICB8IEFyaXR5MyA6ICgnYSAtPiAnYiAtPiAnYyAtPiB1bml0KSB0XG4gICAgfCBBcml0eTQgOiAoJ2EgLT4gJ2IgLT4gJ2MgLT4gJ2QgLT4gdW5pdCkgdFxuICAgIHwgQXJpdHk1IDogKCdhIC0+ICdiIC0+ICdjIC0+ICdkIC0+ICdlIC0+IHVuaXQpIHRcbiAgW0BAZGVyaXZpbmcgc2V4cF9vZl1cblxuICBsZXQgdXNlc19sb2NhbF9hcmdzIDogdHlwZSBhLiBhIHQgLT4gYm9vbCA9IGZ1bmN0aW9uXG4gICAgfCBBcml0eTEgLT4gZmFsc2VcbiAgICB8IEFyaXR5MV9sb2NhbCAtPiB0cnVlXG4gICAgfCBBcml0eTIgLT4gZmFsc2VcbiAgICB8IEFyaXR5MyAtPiBmYWxzZVxuICAgIHwgQXJpdHk0IC0+IGZhbHNlXG4gICAgfCBBcml0eTUgLT4gZmFsc2VcbiAgOztcbmVuZFxuXG5tb2R1bGUgTGFzdF92YWx1ZSA6IHNpZ1xuICB0eXBlICdjYWxsYmFjayB0XG5cbiAgdmFsIGNyZWF0ZV9leG4gOiAnY2FsbGJhY2sgQ2FsbGJhY2tfYXJpdHkudCAtPiAnY2FsbGJhY2sgdFxuICB2YWwgc2V0MSA6ICgnYSAtPiB1bml0KSB0IC0+ICdhIC0+IHVuaXRcbiAgdmFsIHNldDIgOiAoJ2EgLT4gJ2IgLT4gdW5pdCkgdCAtPiAnYSAtPiAnYiAtPiB1bml0XG4gIHZhbCBzZXQzIDogKCdhIC0+ICdiIC0+ICdjIC0+IHVuaXQpIHQgLT4gJ2EgLT4gJ2IgLT4gJ2MgLT4gdW5pdFxuICB2YWwgc2V0NCA6ICgnYSAtPiAnYiAtPiAnYyAtPiAnZCAtPiB1bml0KSB0IC0+ICdhIC0+ICdiIC0+ICdjIC0+ICdkIC0+IHVuaXRcbiAgdmFsIHNldDUgOiAoJ2EgLT4gJ2IgLT4gJ2MgLT4gJ2QgLT4gJ2UgLT4gdW5pdCkgdCAtPiAnYSAtPiAnYiAtPiAnYyAtPiAnZCAtPiAnZSAtPiB1bml0XG4gIHZhbCBzZW5kIDogJ2NhbGxiYWNrIHQgLT4gJ2NhbGxiYWNrIC0+IHVuaXRcbmVuZCA9IHN0cnVjdFxuICB0eXBlIF8gdHVwbGUgPVxuICAgIHwgVHVwbGUxIDogeyBtdXRhYmxlIGFyZzEgOiAnYSB9IC0+ICgnYSAtPiB1bml0KSB0dXBsZVxuICAgIHwgVHVwbGUyIDpcbiAgICAgICAgeyBtdXRhYmxlIGFyZzEgOiAnYVxuICAgICAgICA7IG11dGFibGUgYXJnMiA6ICdiXG4gICAgICAgIH1cbiAgICAgICAgLT4gKCdhIC0+ICdiIC0+IHVuaXQpIHR1cGxlXG4gICAgfCBUdXBsZTMgOlxuICAgICAgICB7IG11dGFibGUgYXJnMSA6ICdhXG4gICAgICAgIDsgbXV0YWJsZSBhcmcyIDogJ2JcbiAgICAgICAgOyBtdXRhYmxlIGFyZzMgOiAnY1xuICAgICAgICB9XG4gICAgICAgIC0+ICgnYSAtPiAnYiAtPiAnYyAtPiB1bml0KSB0dXBsZVxuICAgIHwgVHVwbGU0IDpcbiAgICAgICAgeyBtdXRhYmxlIGFyZzEgOiAnYVxuICAgICAgICA7IG11dGFibGUgYXJnMiA6ICdiXG4gICAgICAgIDsgbXV0YWJsZSBhcmczIDogJ2NcbiAgICAgICAgOyBtdXRhYmxlIGFyZzQgOiAnZFxuICAgICAgICB9XG4gICAgICAgIC0+ICgnYSAtPiAnYiAtPiAnYyAtPiAnZCAtPiB1bml0KSB0dXBsZVxuICAgIHwgVHVwbGU1IDpcbiAgICAgICAgeyBtdXRhYmxlIGFyZzEgOiAnYVxuICAgICAgICA7IG11dGFibGUgYXJnMiA6ICdiXG4gICAgICAgIDsgbXV0YWJsZSBhcmczIDogJ2NcbiAgICAgICAgOyBtdXRhYmxlIGFyZzQgOiAnZFxuICAgICAgICA7IG11dGFibGUgYXJnNSA6ICdlXG4gICAgICAgIH1cbiAgICAgICAgLT4gKCdhIC0+ICdiIC0+ICdjIC0+ICdkIC0+ICdlIC0+IHVuaXQpIHR1cGxlXG5cbiAgdHlwZSAnY2FsbGJhY2sgdCA9ICdjYWxsYmFjayB0dXBsZSBvcHRpb24gcmVmXG5cbiAgbGV0IGNyZWF0ZV9leG4gKHR5cGUgY2FsbGJhY2spIChhcml0eSA6IGNhbGxiYWNrIENhbGxiYWNrX2FyaXR5LnQpIDogY2FsbGJhY2sgdCA9XG4gICAgaWYgQ2FsbGJhY2tfYXJpdHkudXNlc19sb2NhbF9hcmdzIGFyaXR5XG4gICAgdGhlblxuICAgICAgcmFpc2Vfc1xuICAgICAgICBbJW1lc3NhZ2VcbiAgICAgICAgICBcIkNhbm5vdCBzYXZlIGxhc3QgdmFsdWUgd2hlbiB1c2luZyBsb2NhbCBhcmdzXCIgKGFyaXR5IDogXyBDYWxsYmFja19hcml0eS50KV07XG4gICAgcmVmIE5vbmVcbiAgOztcblxuICBsZXQgc2V0MSB0IGEgPVxuICAgIG1hdGNoICF0IHdpdGhcbiAgICB8IE5vbmUgLT4gdCA6PSBTb21lIChUdXBsZTEgeyBhcmcxID0gYSB9KVxuICAgIHwgU29tZSAoVHVwbGUxIGFyZ3MpIC0+IGFyZ3MuYXJnMSA8LSBhXG4gIDs7XG5cbiAgbGV0IHNldDIgdCBhIGIgPVxuICAgIG1hdGNoICF0IHdpdGhcbiAgICB8IE5vbmUgLT4gdCA6PSBTb21lIChUdXBsZTIgeyBhcmcxID0gYTsgYXJnMiA9IGIgfSlcbiAgICB8IFNvbWUgKFR1cGxlMiBhcmdzKSAtPlxuICAgICAgYXJncy5hcmcxIDwtIGE7XG4gICAgICBhcmdzLmFyZzIgPC0gYlxuICA7O1xuXG4gIGxldCBzZXQzIHQgYSBiIGMgPVxuICAgIG1hdGNoICF0IHdpdGhcbiAgICB8IE5vbmUgLT4gdCA6PSBTb21lIChUdXBsZTMgeyBhcmcxID0gYTsgYXJnMiA9IGI7IGFyZzMgPSBjIH0pXG4gICAgfCBTb21lIChUdXBsZTMgYXJncykgLT5cbiAgICAgIGFyZ3MuYXJnMSA8LSBhO1xuICAgICAgYXJncy5hcmcyIDwtIGI7XG4gICAgICBhcmdzLmFyZzMgPC0gY1xuICA7O1xuXG4gIGxldCBzZXQ0IHQgYSBiIGMgZCA9XG4gICAgbWF0Y2ggIXQgd2l0aFxuICAgIHwgTm9uZSAtPiB0IDo9IFNvbWUgKFR1cGxlNCB7IGFyZzEgPSBhOyBhcmcyID0gYjsgYXJnMyA9IGM7IGFyZzQgPSBkIH0pXG4gICAgfCBTb21lIChUdXBsZTQgYXJncykgLT5cbiAgICAgIGFyZ3MuYXJnMSA8LSBhO1xuICAgICAgYXJncy5hcmcyIDwtIGI7XG4gICAgICBhcmdzLmFyZzMgPC0gYztcbiAgICAgIGFyZ3MuYXJnNCA8LSBkXG4gIDs7XG5cbiAgbGV0IHNldDUgdCBhcmcxIGFyZzIgYXJnMyBhcmc0IGFyZzUgPVxuICAgIG1hdGNoICF0IHdpdGhcbiAgICB8IE5vbmUgLT4gdCA6PSBTb21lIChUdXBsZTUgeyBhcmcxOyBhcmcyOyBhcmczOyBhcmc0OyBhcmc1IH0pXG4gICAgfCBTb21lIChUdXBsZTUgYXJncykgLT5cbiAgICAgIGFyZ3MuYXJnMSA8LSBhcmcxO1xuICAgICAgYXJncy5hcmcyIDwtIGFyZzI7XG4gICAgICBhcmdzLmFyZzMgPC0gYXJnMztcbiAgICAgIGFyZ3MuYXJnNCA8LSBhcmc0O1xuICAgICAgYXJncy5hcmc1IDwtIGFyZzVcbiAgOztcblxuICBsZXQgc2VuZCAodHlwZSBjYWxsYmFjaykgKHQgOiBjYWxsYmFjayB0KSAoY2FsbGJhY2sgOiBjYWxsYmFjaykgOiB1bml0ID1cbiAgICBtYXRjaCAhdCB3aXRoXG4gICAgfCBOb25lIC0+ICgpXG4gICAgfCBTb21lIChUdXBsZTEgeyBhcmcxIH0pIC0+IGNhbGxiYWNrIGFyZzFcbiAgICB8IFNvbWUgKFR1cGxlMiB7IGFyZzE7IGFyZzIgfSkgLT4gY2FsbGJhY2sgYXJnMSBhcmcyXG4gICAgfCBTb21lIChUdXBsZTMgeyBhcmcxOyBhcmcyOyBhcmczIH0pIC0+IGNhbGxiYWNrIGFyZzEgYXJnMiBhcmczXG4gICAgfCBTb21lIChUdXBsZTQgeyBhcmcxOyBhcmcyOyBhcmczOyBhcmc0IH0pIC0+IGNhbGxiYWNrIGFyZzEgYXJnMiBhcmczIGFyZzRcbiAgICB8IFNvbWUgKFR1cGxlNSB7IGFyZzE7IGFyZzI7IGFyZzM7IGFyZzQ7IGFyZzUgfSkgLT4gY2FsbGJhY2sgYXJnMSBhcmcyIGFyZzMgYXJnNCBhcmc1XG4gIDs7XG5lbmRcblxubW9kdWxlIE9uX3N1YnNjcmlwdGlvbl9hZnRlcl9maXJzdF93cml0ZSA9IHN0cnVjdFxuICB0eXBlIHQgPVxuICAgIHwgQWxsb3dcbiAgICB8IEFsbG93X2FuZF9zZW5kX2xhc3RfdmFsdWVcbiAgICB8IFJhaXNlXG4gIFtAQGRlcml2aW5nIGVudW1lcmF0ZSwgc2V4cF9vZl1cblxuICBsZXQgYWxsb3dfc3Vic2NyaXB0aW9uX2FmdGVyX2ZpcnN0X3dyaXRlID0gZnVuY3Rpb25cbiAgICB8IEFsbG93IC0+IHRydWVcbiAgICB8IEFsbG93X2FuZF9zZW5kX2xhc3RfdmFsdWUgLT4gdHJ1ZVxuICAgIHwgUmFpc2UgLT4gZmFsc2VcbiAgOztcblxuICBsZXQgc2F2ZV9sYXN0X3ZhbHVlX2V4biB0IGNhbGxiYWNrX2FyaXR5ID1cbiAgICBtYXRjaCB0IHdpdGhcbiAgICB8IEFsbG93X2FuZF9zZW5kX2xhc3RfdmFsdWUgLT4gU29tZSAoTGFzdF92YWx1ZS5jcmVhdGVfZXhuIGNhbGxiYWNrX2FyaXR5KVxuICAgIHwgQWxsb3cgLT4gTm9uZVxuICAgIHwgUmFpc2UgLT4gTm9uZVxuICA7O1xuZW5kXG5cbm1vZHVsZSBCdXNfaWQgPSBVbmlxdWVfaWQuSW50NjMgKClcblxubW9kdWxlIFN1YnNjcmliZXIgPSBzdHJ1Y3RcbiAgdHlwZSAnY2FsbGJhY2sgdCA9XG4gICAgeyBidXNfaWQgOiBCdXNfaWQudFxuICAgIDsgY2FsbGJhY2sgOiAnY2FsbGJhY2tcbiAgICA7IGV4dHJhY3RfZXhuIDogYm9vbFxuICAgIDsgKCogW3N1YnNjcmliZXJzX2luZGV4XSBpcyB0aGUgaW5kZXggb2YgdGhpcyBzdWJzY3JpYmVyIGluIHRoZSBidXMncyBbc3Vic2NyaWJlcnNdXG4gICAgICAgICBhcnJheS4gIFstMV0gaW5kaWNhdGVzIHRoYXQgdGhpcyBzdWJzY3JpYmVyIGlzIG5vdCBzdWJzY3JpYmVkLiAqKVxuICAgICAgbXV0YWJsZSBzdWJzY3JpYmVyc19pbmRleCA6IGludFxuICAgIDsgb25fY2FsbGJhY2tfcmFpc2UgOiAoRXJyb3IudCAtPiB1bml0KSBvcHRpb25cbiAgICA7IG9uX2Nsb3NlIDogKHVuaXQgLT4gdW5pdCkgb3B0aW9uXG4gICAgOyBzdWJzY3JpYmVkX2Zyb20gOiBTb3VyY2VfY29kZV9wb3NpdGlvbi50XG4gICAgfVxuICBbQEBkZXJpdmluZyBmaWVsZHNdXG5cbiAgbGV0IGlzX3N1YnNjcmliZWQgdCB+dG9fID0gdC5zdWJzY3JpYmVyc19pbmRleCA+PSAwICYmIEJ1c19pZC5lcXVhbCB0LmJ1c19pZCB0b19cblxuICBsZXQgc2V4cF9vZl90XG4gICAgICAgIF9cbiAgICAgICAgeyBjYWxsYmFjayA9IF9cbiAgICAgICAgOyBidXNfaWQgPSBfXG4gICAgICAgIDsgZXh0cmFjdF9leG5cbiAgICAgICAgOyBzdWJzY3JpYmVyc19pbmRleFxuICAgICAgICA7IG9uX2NhbGxiYWNrX3JhaXNlXG4gICAgICAgIDsgb25fY2xvc2UgPSBfXG4gICAgICAgIDsgc3Vic2NyaWJlZF9mcm9tXG4gICAgICAgIH1cbiAgICA6IFNleHAudFxuICAgID1cbiAgICBMaXN0XG4gICAgICBbIEF0b20gXCJCdXMuU3Vic2NyaWJlci50XCJcbiAgICAgIDsgWyVtZXNzYWdlXG4gICAgICAgIFwiXCJcbiAgICAgICAgICB+c3Vic2NyaWJlcnNfaW5kZXg6XG4gICAgICAgICAgICAoaWYgUHB4X2lubGluZV90ZXN0X2xpYi5hbV9ydW5uaW5nIHRoZW4gTm9uZSBlbHNlIFNvbWUgc3Vic2NyaWJlcnNfaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoaW50IG9wdGlvbltAc2V4cC5vcHRpb25dKSlcbiAgICAgICAgICAob25fY2FsbGJhY2tfcmFpc2UgOiAoKEVycm9yLnQgLT4gdW5pdCkgb3B0aW9uW0BzZXhwLm9wdGlvbl0pKVxuICAgICAgICAgIH5leHRyYWN0X2V4bjpcbiAgICAgICAgICAgIChpZiBleHRyYWN0X2V4biB0aGVuIFNvbWUgdHJ1ZSBlbHNlIE5vbmUgOiAoYm9vbCBvcHRpb25bQHNleHAub3B0aW9uXSkpXG4gICAgICAgICAgKHN1YnNjcmliZWRfZnJvbSA6IFNvdXJjZV9jb2RlX3Bvc2l0aW9uLnQpXVxuICAgICAgXVxuICA7O1xuXG4gIGxldCBpbnZhcmlhbnQgaW52YXJpYW50X2EgdCA9XG4gICAgSW52YXJpYW50LmludmFyaWFudCBbJWhlcmVdIHQgWyVzZXhwX29mOiBfIHRdIChmdW4gKCkgLT5cbiAgICAgIGxldCBjaGVjayBmID0gSW52YXJpYW50LmNoZWNrX2ZpZWxkIHQgZiBpblxuICAgICAgRmllbGRzLml0ZXJcbiAgICAgICAgfmJ1c19pZDppZ25vcmVcbiAgICAgICAgfmNhbGxiYWNrOihjaGVjayBpbnZhcmlhbnRfYSlcbiAgICAgICAgfmV4dHJhY3RfZXhuOmlnbm9yZVxuICAgICAgICB+c3Vic2NyaWJlcnNfaW5kZXg6aWdub3JlXG4gICAgICAgIH5vbl9jYWxsYmFja19yYWlzZTppZ25vcmVcbiAgICAgICAgfm9uX2Nsb3NlOmlnbm9yZVxuICAgICAgICB+c3Vic2NyaWJlZF9mcm9tOmlnbm9yZSlcbiAgOztcblxuICBsZXQgY3JlYXRlXG4gICAgICAgIHN1YnNjcmliZWRfZnJvbVxuICAgICAgICB+Y2FsbGJhY2tcbiAgICAgICAgfmJ1c19pZFxuICAgICAgICB+ZXh0cmFjdF9leG5cbiAgICAgICAgfnN1YnNjcmliZXJzX2luZGV4XG4gICAgICAgIH5vbl9jYWxsYmFja19yYWlzZVxuICAgICAgICB+b25fY2xvc2VcbiAgICA9XG4gICAgeyBidXNfaWRcbiAgICA7IGNhbGxiYWNrXG4gICAgOyBleHRyYWN0X2V4blxuICAgIDsgc3Vic2NyaWJlcnNfaW5kZXhcbiAgICA7IG9uX2NhbGxiYWNrX3JhaXNlXG4gICAgOyBvbl9jbG9zZVxuICAgIDsgc3Vic2NyaWJlZF9mcm9tXG4gICAgfVxuICA7O1xuZW5kXG5cbnR5cGUgKCdjYWxsYmFjaywgJ3BoYW50b20pIHQgPVxuICB7IGJ1c19pZCA6IEJ1c19pZC50XG4gIDsgbmFtZSA6IEluZm8udCBvcHRpb25cbiAgOyBjYWxsYmFja19hcml0eSA6ICdjYWxsYmFjayBDYWxsYmFja19hcml0eS50XG4gIDsgY3JlYXRlZF9mcm9tIDogU291cmNlX2NvZGVfcG9zaXRpb24udFxuICA7IG9uX3N1YnNjcmlwdGlvbl9hZnRlcl9maXJzdF93cml0ZSA6IE9uX3N1YnNjcmlwdGlvbl9hZnRlcl9maXJzdF93cml0ZS50XG4gIDsgb25fY2FsbGJhY2tfcmFpc2UgOiBFcnJvci50IC0+IHVuaXRcbiAgOyBsYXN0X3ZhbHVlIDogJ2NhbGxiYWNrIExhc3RfdmFsdWUudCBvcHRpb25cbiAgOyBtdXRhYmxlIHN0YXRlIDogU3RhdGUudFxuICA7IG11dGFibGUgd3JpdGVfZXZlcl9jYWxsZWQgOiBib29sXG4gIDsgbXV0YWJsZSBudW1fc3Vic2NyaWJlcnMgOiBpbnRcbiAgOyAoKiBbc3Vic2NyaWJlcnNdIGNvbnRhaW5zIGFsbCBzdWJzY3JpYmVycyB0byB0aGUgYnVzLCBpbiBhIGNvbnRpZ3VvdXMgcHJlZml4IGZyb21cbiAgICAgICBpbmRleCBbMF0gdG8gW251bV9zdWJzY3JpYmVycyAtIDFdLiAqKVxuICAgIG11dGFibGUgc3Vic2NyaWJlcnMgOiAnY2FsbGJhY2sgU3Vic2NyaWJlci50IE9wdGlvbl9hcnJheS50XG4gIDsgKCogW2NhbGxiYWNrc10gaG9sZHMgdGhlIGNhbGxiYWNrcyBvZiB0aGUgY29ycmVzcG9uZGluZyBlbnRyaWVzIG9mIFtzdWJzY3JpYmVyc10uICopXG4gICAgbXV0YWJsZSBjYWxsYmFja3MgOiAnY2FsbGJhY2sgT3B0aW9uX2FycmF5LnRcbiAgOyBtdXRhYmxlIHVuc3Vic2NyaWJlc19kdXJpbmdfd3JpdGUgOiAnY2FsbGJhY2sgU3Vic2NyaWJlci50IGxpc3RcbiAgfVxuW0BAZGVyaXZpbmcgZmllbGRzXVxuXG5sZXQgc2V4cF9vZl90XG4gICAgICBfXG4gICAgICBfXG4gICAgICB7IGJ1c19pZCA9IF9cbiAgICAgIDsgY2FsbGJhY2tfYXJpdHlcbiAgICAgIDsgY2FsbGJhY2tzID0gX1xuICAgICAgOyBjcmVhdGVkX2Zyb21cbiAgICAgIDsgbGFzdF92YWx1ZSA9IF9cbiAgICAgIDsgbmFtZVxuICAgICAgOyBudW1fc3Vic2NyaWJlcnNcbiAgICAgIDsgb25fc3Vic2NyaXB0aW9uX2FmdGVyX2ZpcnN0X3dyaXRlXG4gICAgICA7IG9uX2NhbGxiYWNrX3JhaXNlID0gX1xuICAgICAgOyBzdGF0ZVxuICAgICAgOyBzdWJzY3JpYmVyc1xuICAgICAgOyB3cml0ZV9ldmVyX2NhbGxlZFxuICAgICAgOyB1bnN1YnNjcmliZXNfZHVyaW5nX3dyaXRlID0gX1xuICAgICAgfVxuICA9XG4gIGxldCBzdWJzY3JpYmVycyA9XG4gICAgQXJyYXkuaW5pdCBudW1fc3Vic2NyaWJlcnMgfmY6KGZ1biBpIC0+IE9wdGlvbl9hcnJheS5nZXRfc29tZV9leG4gc3Vic2NyaWJlcnMgaSlcbiAgaW5cbiAgWyVtZXNzYWdlXG4gICAgXCJcIlxuICAgICAgKG5hbWUgOiAoSW5mby50IG9wdGlvbltAc2V4cC5vcHRpb25dKSlcbiAgICAgIChjYWxsYmFja19hcml0eSA6IF8gQ2FsbGJhY2tfYXJpdHkudClcbiAgICAgIChjcmVhdGVkX2Zyb20gOiBTb3VyY2VfY29kZV9wb3NpdGlvbi50KVxuICAgICAgKG9uX3N1YnNjcmlwdGlvbl9hZnRlcl9maXJzdF93cml0ZSA6IE9uX3N1YnNjcmlwdGlvbl9hZnRlcl9maXJzdF93cml0ZS50KVxuICAgICAgKHN0YXRlIDogU3RhdGUudClcbiAgICAgICh3cml0ZV9ldmVyX2NhbGxlZCA6IGJvb2wpXG4gICAgICAoc3Vic2NyaWJlcnMgOiBfIFN1YnNjcmliZXIudCBBcnJheS50KV1cbjs7XG5cbnR5cGUgKCdjYWxsYmFjaywgJ3BoYW50b20pIGJ1cyA9ICgnY2FsbGJhY2ssICdwaGFudG9tKSB0IFtAQGRlcml2aW5nIHNleHBfb2ZdXG5cbmxldCByZWFkX29ubHkgdCA9ICh0IDo+IChfLCByZWFkKSB0KVxuXG5sZXQgaW52YXJpYW50IGludmFyaWFudF9hIF8gdCA9XG4gIEludmFyaWFudC5pbnZhcmlhbnQgWyVoZXJlXSB0IFslc2V4cF9vZjogKF8sIF8pIHRdIChmdW4gKCkgLT5cbiAgICBsZXQgY2hlY2sgZiA9IEludmFyaWFudC5jaGVja19maWVsZCB0IGYgaW5cbiAgICBGaWVsZHMuaXRlclxuICAgICAgfmJ1c19pZDppZ25vcmVcbiAgICAgIH5uYW1lOmlnbm9yZVxuICAgICAgfmNhbGxiYWNrczpcbiAgICAgICAgKGNoZWNrIChmdW4gY2FsbGJhY2tzIC0+XG4gICAgICAgICAgIGFzc2VydCAoT3B0aW9uX2FycmF5Lmxlbmd0aCBjYWxsYmFja3MgPSBPcHRpb25fYXJyYXkubGVuZ3RoIHQuc3Vic2NyaWJlcnMpO1xuICAgICAgICAgICBmb3IgaSA9IDAgdG8gT3B0aW9uX2FycmF5Lmxlbmd0aCBjYWxsYmFja3MgLSAxIGRvXG4gICAgICAgICAgICAgaWYgaSA8IHQubnVtX3N1YnNjcmliZXJzXG4gICAgICAgICAgICAgdGhlbiBpbnZhcmlhbnRfYSAoT3B0aW9uX2FycmF5LmdldF9zb21lX2V4biBjYWxsYmFja3MgaSlcbiAgICAgICAgICAgICBlbHNlIGFzc2VydCAoT3B0aW9uX2FycmF5LmlzX25vbmUgY2FsbGJhY2tzIGkpXG4gICAgICAgICAgIGRvbmUpKVxuICAgICAgfmNhbGxiYWNrX2FyaXR5Omlnbm9yZVxuICAgICAgfmNyZWF0ZWRfZnJvbTppZ25vcmVcbiAgICAgIH5udW1fc3Vic2NyaWJlcnM6KGNoZWNrIChmdW4gbnVtX3N1YnNjcmliZXJzIC0+IGFzc2VydCAobnVtX3N1YnNjcmliZXJzID49IDApKSlcbiAgICAgIH5vbl9zdWJzY3JpcHRpb25fYWZ0ZXJfZmlyc3Rfd3JpdGU6aWdub3JlXG4gICAgICB+b25fY2FsbGJhY2tfcmFpc2U6aWdub3JlXG4gICAgICB+bGFzdF92YWx1ZTppZ25vcmVcbiAgICAgIH5zdGF0ZTppZ25vcmVcbiAgICAgIH53cml0ZV9ldmVyX2NhbGxlZDppZ25vcmVcbiAgICAgIH5zdWJzY3JpYmVyczpcbiAgICAgICAgKGNoZWNrIChmdW4gc3Vic2NyaWJlcnMgLT5cbiAgICAgICAgICAgZm9yIGkgPSAwIHRvIE9wdGlvbl9hcnJheS5sZW5ndGggc3Vic2NyaWJlcnMgLSAxIGRvXG4gICAgICAgICAgICAgaWYgaSA8IHQubnVtX3N1YnNjcmliZXJzXG4gICAgICAgICAgICAgdGhlbiAoXG4gICAgICAgICAgICAgICBsZXQgc3Vic2NyaWJlciA9IE9wdGlvbl9hcnJheS5nZXRfc29tZV9leG4gc3Vic2NyaWJlcnMgaSBpblxuICAgICAgICAgICAgICAgU3Vic2NyaWJlci5pbnZhcmlhbnQgaW52YXJpYW50X2Egc3Vic2NyaWJlcjtcbiAgICAgICAgICAgICAgIGFzc2VydCAoaSA9IHN1YnNjcmliZXIuc3Vic2NyaWJlcnNfaW5kZXgpKVxuICAgICAgICAgICAgIGVsc2UgYXNzZXJ0IChPcHRpb25fYXJyYXkuaXNfbm9uZSBzdWJzY3JpYmVycyBpKVxuICAgICAgICAgICBkb25lKSlcbiAgICAgIH51bnN1YnNjcmliZXNfZHVyaW5nX3dyaXRlOmlnbm9yZSlcbjs7XG5cbmxldCBpc19jbG9zZWQgdCA9IFN0YXRlLmlzX2Nsb3NlZCB0LnN0YXRlXG5cbm1vZHVsZSBSZWFkX3dyaXRlID0gc3RydWN0XG4gIHR5cGUgJ2NhbGxiYWNrIHQgPSAoJ2NhbGxiYWNrLCByZWFkX3dyaXRlKSBidXMgW0BAZGVyaXZpbmcgc2V4cF9vZl1cblxuICBsZXQgaW52YXJpYW50IGludmFyaWFudF9hIHQgPSBpbnZhcmlhbnQgaW52YXJpYW50X2EgaWdub3JlIHRcbmVuZFxuXG5tb2R1bGUgUmVhZF9vbmx5ID0gc3RydWN0XG4gIHR5cGUgJ2NhbGxiYWNrIHQgPSAoJ2NhbGxiYWNrLCByZWFkKSBidXMgW0BAZGVyaXZpbmcgc2V4cF9vZl1cblxuICBsZXQgaW52YXJpYW50IGludmFyaWFudF9hIHQgPSBpbnZhcmlhbnQgaW52YXJpYW50X2EgaWdub3JlIHRcbmVuZFxuXG5sZXRbQGNvbGRdIHN0YXJ0X3dyaXRlX2ZhaWxpbmcgdCA9XG4gIG1hdGNoIHQuc3RhdGUgd2l0aFxuICB8IENsb3NlZCAtPlxuICAgIGZhaWx3aXRocyB+aGVyZTpbJWhlcmVdIFwiW0J1cy53cml0ZV0gY2FsbGVkIG9uIGNsb3NlZCBidXNcIiB0IFslc2V4cF9vZjogKF8sIF8pIHRdXG4gIHwgV3JpdGVfaW5fcHJvZ3Jlc3MgLT5cbiAgICBmYWlsd2l0aHNcbiAgICAgIH5oZXJlOlslaGVyZV1cbiAgICAgIFwiW0J1cy53cml0ZV0gY2FsbGVkIGZyb20gY2FsbGJhY2sgb24gdGhlIHNhbWUgYnVzXCJcbiAgICAgIHRcbiAgICAgIFslc2V4cF9vZjogKF8sIF8pIHRdXG4gIHwgT2tfdG9fd3JpdGUgLT4gYXNzZXJ0IGZhbHNlXG47O1xuXG5sZXQgY2FwYWNpdHkgdCA9IE9wdGlvbl9hcnJheS5sZW5ndGggdC5zdWJzY3JpYmVyc1xuXG5sZXQgbWF5YmVfc2hyaW5rX2NhcGFjaXR5IHQgPVxuICBpZiB0Lm51bV9zdWJzY3JpYmVycyAqIDQgPD0gY2FwYWNpdHkgdFxuICB0aGVuIChcbiAgICBsZXQgZGVzaXJlZF9jYXBhY2l0eSA9IHQubnVtX3N1YnNjcmliZXJzIGluXG4gICAgbGV0IGNvcHlfYW5kX3NocmluayBhcnJheSA9XG4gICAgICBsZXQgbmV3X2FycmF5ID0gT3B0aW9uX2FycmF5LmNyZWF0ZSB+bGVuOmRlc2lyZWRfY2FwYWNpdHkgaW5cbiAgICAgIE9wdGlvbl9hcnJheS5ibGl0XG4gICAgICAgIH5zcmM6YXJyYXlcbiAgICAgICAgfnNyY19wb3M6MFxuICAgICAgICB+ZHN0Om5ld19hcnJheVxuICAgICAgICB+ZHN0X3BvczowXG4gICAgICAgIH5sZW46dC5udW1fc3Vic2NyaWJlcnM7XG4gICAgICBuZXdfYXJyYXlcbiAgICBpblxuICAgIHQuc3Vic2NyaWJlcnMgPC0gY29weV9hbmRfc2hyaW5rIHQuc3Vic2NyaWJlcnM7XG4gICAgdC5jYWxsYmFja3MgPC0gY29weV9hbmRfc2hyaW5rIHQuY2FsbGJhY2tzKVxuOztcblxubGV0IGFkZF9zdWJzY3JpYmVyIHQgKHN1YnNjcmliZXIgOiBfIFN1YnNjcmliZXIudCkgfmF0X3N1YnNjcmliZXJzX2luZGV4ID1cbiAgc3Vic2NyaWJlci5zdWJzY3JpYmVyc19pbmRleCA8LSBhdF9zdWJzY3JpYmVyc19pbmRleDtcbiAgT3B0aW9uX2FycmF5LnNldF9zb21lIHQuc3Vic2NyaWJlcnMgYXRfc3Vic2NyaWJlcnNfaW5kZXggc3Vic2NyaWJlcjtcbiAgT3B0aW9uX2FycmF5LnNldF9zb21lIHQuY2FsbGJhY2tzIGF0X3N1YnNjcmliZXJzX2luZGV4IHN1YnNjcmliZXIuY2FsbGJhY2tcbjs7XG5cbmxldCByZW1vdmVfc3Vic2NyaWJlciB0IChzdWJzY3JpYmVyIDogXyBTdWJzY3JpYmVyLnQpID1cbiAgbGV0IHN1YnNjcmliZXJzX2luZGV4ID0gc3Vic2NyaWJlci5zdWJzY3JpYmVyc19pbmRleCBpblxuICBzdWJzY3JpYmVyLnN1YnNjcmliZXJzX2luZGV4IDwtIC0xO1xuICBPcHRpb25fYXJyYXkuc2V0X25vbmUgdC5zdWJzY3JpYmVycyBzdWJzY3JpYmVyc19pbmRleDtcbiAgT3B0aW9uX2FycmF5LnNldF9ub25lIHQuY2FsbGJhY2tzIHN1YnNjcmliZXJzX2luZGV4XG47O1xuXG5sZXQgdW5zdWJzY3JpYmVfYXNzdW1pbmdfdmFsaWRfc3Vic2NyaWJlciB0IChzdWJzY3JpYmVyIDogXyBTdWJzY3JpYmVyLnQpID1cbiAgbGV0IHN1YnNjcmliZXJfaW5kZXggPSBzdWJzY3JpYmVyLnN1YnNjcmliZXJzX2luZGV4IGluXG4gIGxldCBsYXN0X3N1YnNjcmliZXJfaW5kZXggPSB0Lm51bV9zdWJzY3JpYmVycyAtIDEgaW5cbiAgcmVtb3ZlX3N1YnNjcmliZXIgdCBzdWJzY3JpYmVyO1xuICBpZiBzdWJzY3JpYmVyX2luZGV4IDwgbGFzdF9zdWJzY3JpYmVyX2luZGV4XG4gIHRoZW4gKFxuICAgIGxldCBsYXN0X3N1YnNjcmliZXIgPSBPcHRpb25fYXJyYXkuZ2V0X3NvbWVfZXhuIHQuc3Vic2NyaWJlcnMgbGFzdF9zdWJzY3JpYmVyX2luZGV4IGluXG4gICAgcmVtb3ZlX3N1YnNjcmliZXIgdCBsYXN0X3N1YnNjcmliZXI7XG4gICAgYWRkX3N1YnNjcmliZXIgdCBsYXN0X3N1YnNjcmliZXIgfmF0X3N1YnNjcmliZXJzX2luZGV4OnN1YnNjcmliZXJfaW5kZXgpO1xuICB0Lm51bV9zdWJzY3JpYmVycyA8LSB0Lm51bV9zdWJzY3JpYmVycyAtIDE7XG4gIG1heWJlX3Nocmlua19jYXBhY2l0eSB0XG47O1xuXG5sZXQgdW5zdWJzY3JpYmUgdCBzdWJzY3JpYmVyID1cbiAgaWYgU3Vic2NyaWJlci5pc19zdWJzY3JpYmVkIHN1YnNjcmliZXIgfnRvXzp0LmJ1c19pZFxuICB0aGVuIChcbiAgICBtYXRjaCB0LnN0YXRlIHdpdGhcbiAgICB8IFdyaXRlX2luX3Byb2dyZXNzIC0+XG4gICAgICB0LnVuc3Vic2NyaWJlc19kdXJpbmdfd3JpdGUgPC0gc3Vic2NyaWJlciA6OiB0LnVuc3Vic2NyaWJlc19kdXJpbmdfd3JpdGVcbiAgICB8IENsb3NlZCAtPlxuICAgICAgKCogVGhpcyBjYW4gaGFwcGVuIGlmIGR1cmluZyBbd3JpdGVdLCBbdW5zdWJzY3JpYmVdIGlzIGNhbGxlZCBhZnRlciBbY2xvc2VdLiAgV2VcbiAgICAgICAgIGRvbid0IGRvIGFueXRoaW5nIGhlcmUgYmVjYXVzZSBhbGwgc3Vic2NyaWJlcnMgd2lsbCBiZSB1bnN1YnNjcmliZWQgYWZ0ZXIgdGhlXG4gICAgICAgICBbd3JpdGVdIGZpbmlzaGVzLiAqKVxuICAgICAgKClcbiAgICB8IE9rX3RvX3dyaXRlIC0+IHVuc3Vic2NyaWJlX2Fzc3VtaW5nX3ZhbGlkX3N1YnNjcmliZXIgdCBzdWJzY3JpYmVyKVxuOztcblxubGV0W0Bjb2xkXSB1bnN1YnNjcmliZV9hZnRlcl9maW5pc2hfd3JpdGUgdCA9XG4gIExpc3QuaXRlciB0LnVuc3Vic2NyaWJlc19kdXJpbmdfd3JpdGUgfmY6KHVuc3Vic2NyaWJlX2Fzc3VtaW5nX3ZhbGlkX3N1YnNjcmliZXIgdCk7XG4gIHQudW5zdWJzY3JpYmVzX2R1cmluZ193cml0ZSA8LSBbXVxuOztcblxubGV0W0Bjb2xkXSB1bnN1YnNjcmliZV9hbGwgdCA9XG4gIGFzc2VydCAoaXNfY2xvc2VkIHQpO1xuICBmb3IgaSA9IDAgdG8gdC5udW1fc3Vic2NyaWJlcnMgLSAxIGRvXG4gICAgbGV0IHN1YnNjcmliZXIgPSBPcHRpb25fYXJyYXkuZ2V0X3NvbWVfZXhuIHQuc3Vic2NyaWJlcnMgaSBpblxuICAgIE9wdGlvbi5pdGVyIHN1YnNjcmliZXIub25fY2xvc2UgfmY6KGZ1biBvbl9jbG9zZSAtPiBvbl9jbG9zZSAoKSk7XG4gICAgcmVtb3ZlX3N1YnNjcmliZXIgdCBzdWJzY3JpYmVyXG4gIGRvbmU7XG4gIHQubnVtX3N1YnNjcmliZXJzIDwtIDA7XG4gIG1heWJlX3Nocmlua19jYXBhY2l0eSB0XG47O1xuXG5sZXRbQGlubGluZSBhbHdheXNdIGZpbmlzaF93cml0ZSB0ID1cbiAgaWYgbm90IChMaXN0LmlzX2VtcHR5IHQudW5zdWJzY3JpYmVzX2R1cmluZ193cml0ZSkgdGhlbiB1bnN1YnNjcmliZV9hZnRlcl9maW5pc2hfd3JpdGUgdDtcbiAgbWF0Y2ggdC5zdGF0ZSB3aXRoXG4gIHwgQ2xvc2VkIC0+IHVuc3Vic2NyaWJlX2FsbCB0XG4gIHwgT2tfdG9fd3JpdGUgLT4gYXNzZXJ0IGZhbHNlXG4gIHwgV3JpdGVfaW5fcHJvZ3Jlc3MgLT4gdC5zdGF0ZSA8LSBPa190b193cml0ZVxuOztcblxubGV0W0Bjb2xkXSBjbG9zZSB0ID1cbiAgbWF0Y2ggdC5zdGF0ZSB3aXRoXG4gIHwgQ2xvc2VkIC0+ICgpXG4gIHwgV3JpdGVfaW5fcHJvZ3Jlc3MgLT4gdC5zdGF0ZSA8LSBDbG9zZWRcbiAgfCBPa190b193cml0ZSAtPlxuICAgIHQuc3RhdGUgPC0gQ2xvc2VkO1xuICAgIHVuc3Vic2NyaWJlX2FsbCB0XG47O1xuXG5sZXQgY2FsbF9vbl9jYWxsYmFja19yYWlzZSB0IGVycm9yID1cbiAgdHJ5IHQub25fY2FsbGJhY2tfcmFpc2UgZXJyb3Igd2l0aFxuICB8IGV4biAtPlxuICAgIGNsb3NlIHQ7XG4gICAgcmFpc2UgZXhuXG47O1xuXG5sZXQgY2FsbGJhY2tfcmFpc2VkIHQgaSBleG4gPVxuICAoKiBbaV0gd2FzIGluY3JlbWVudGVkIGJlZm9yZSB0aGUgY2FsbGJhY2sgd2FzIGNhbGxlZCwgc28gd2UgaGF2ZSB0byBzdWJ0cmFjdCBvbmVcbiAgICAgaGVyZS4gIFdlIGRvIHRoaXMgaGVyZSwgcmF0aGVyIHRoYW4gYXQgdGhlIGNhbGwgc2l0ZSwgYmVjYXVzZSB0aGVyZSBhcmUgbXVsdGlwbGVcbiAgICAgY2FsbCBzaXRlcyBkdWUgdG8gdGhlIG9wdGltaXphdGlvbnMgbmVlZGVkIHRvIGtlZXAgdGhpcyB6ZXJvLWFsbG9jLiAqKVxuICBsZXQgc3Vic2NyaWJlciA9IE9wdGlvbl9hcnJheS5nZXRfc29tZV9leG4gdC5zdWJzY3JpYmVycyAoaSAtIDEpIGluXG4gIGxldCBlcnJvciA9XG4gICAgbWF0Y2ggc3Vic2NyaWJlci5leHRyYWN0X2V4biB3aXRoXG4gICAgfCB0cnVlIC0+IEVycm9yLm9mX2V4biBleG5cbiAgICB8IGZhbHNlIC0+XG4gICAgICAoKiBUaGlzIFtCYWNrdHJhY2UuRXhuLm1vc3RfcmVjZW50ICgpXSBpcyBpbnRlbmRlZCB0byBncmFiIHRoZSBiYWNrdHJhY2Ugb2YgdGhlIFt0cnlcbiAgICAgICAgIC4uLiB3aXRoXSdzIHRoYXQgY2FsbCBbY2FsbGJhY2tfcmFpc2VkXS4gIFRoZSBjYWxsIGlzIGhlcmUgcmF0aGVyIHRoYW4gZWFybGllciBzb1xuICAgICAgICAgdGhhdCB3ZSBvbmx5IGRvIGl0IHdoZW4gW3N1YnNjcmliZXIuZXh0cmFjdF9leG4gPSBmYWxzZV0uICopXG4gICAgICBsZXQgYmFja3RyYWNlID0gQmFja3RyYWNlLkV4bi5tb3N0X3JlY2VudCAoKSBpblxuICAgICAgWyVtZXNzYWdlXG4gICAgICAgIFwiQnVzIHN1YnNjcmliZXIgcmFpc2VkXCJcbiAgICAgICAgICAoZXhuIDogZXhuKVxuICAgICAgICAgIChiYWNrdHJhY2UgOiBCYWNrdHJhY2UudClcbiAgICAgICAgICAoc3Vic2NyaWJlciA6IF8gU3Vic2NyaWJlci50KV1cbiAgICAgIHw+IFslb2Zfc2V4cDogRXJyb3IudF1cbiAgaW5cbiAgbWF0Y2ggc3Vic2NyaWJlci5vbl9jYWxsYmFja19yYWlzZSB3aXRoXG4gIHwgTm9uZSAtPiBjYWxsX29uX2NhbGxiYWNrX3JhaXNlIHQgZXJyb3JcbiAgfCBTb21lIGYgLT5cbiAgICAodHJ5IGYgZXJyb3Igd2l0aFxuICAgICB8IGV4biAtPlxuICAgICAgIGxldCBiYWNrdHJhY2UgPSBCYWNrdHJhY2UuRXhuLm1vc3RfcmVjZW50ICgpIGluXG4gICAgICAgY2FsbF9vbl9jYWxsYmFja19yYWlzZVxuICAgICAgICAgdFxuICAgICAgICAgKGxldCBvcmlnaW5hbF9lcnJvciA9IGVycm9yIGluXG4gICAgICAgICAgWyVtZXNzYWdlXG4gICAgICAgICAgICBcIkJ1cyBzdWJzY3JpYmVyJ3MgW29uX2NhbGxiYWNrX3JhaXNlXSByYWlzZWRcIlxuICAgICAgICAgICAgICAoZXhuIDogZXhuKVxuICAgICAgICAgICAgICAoYmFja3RyYWNlIDogQmFja3RyYWNlLnQpXG4gICAgICAgICAgICAgIChvcmlnaW5hbF9lcnJvciA6IEVycm9yLnQpXVxuICAgICAgICAgIHw+IFslb2Zfc2V4cDogRXJyb3IudF0pKVxuOztcblxubGV0W0BpbmxpbmUgYWx3YXlzXSB1bnNhZmVfZ2V0X2NhbGxiYWNrIGEgaSA9XG4gICgqIFdlIGNvbnNpZGVyZWQgdXNpbmcgW09wdGlvbl9hcnJheS5nZXRfc29tZV9leG5dIGFuZFxuICAgICBbT3B0aW9uX2FycmF5LnVuc2FmZV9nZXRfc29tZV9leG5dIGhlcmUsIGJ1dCBib3RoIGFyZSBzaWduaWZpY2FudGx5IHNsb3dlci4gIENoZWNrXG4gICAgIHRoZSB3cml0ZSBiZW5jaG1hcmtzIGluIFtiZW5jaF9idXMubWxdIGJlZm9yZSBjaGFuZ2luZyB0aGlzLiAqKVxuICBPcHRpb25fYXJyYXkudW5zYWZlX2dldF9zb21lX2Fzc3VtaW5nX3NvbWUgYSBpXG47O1xuXG5sZXQgd3JpdGVfbm9uX29wdGltaXplZCB0IGNhbGxiYWNrcyBhMSA9XG4gIGxldCBsZW4gPSB0Lm51bV9zdWJzY3JpYmVycyBpblxuICBsZXQgaSA9IHJlZiAwIGluXG4gIHdoaWxlICFpIDwgbGVuIGRvXG4gICAgdHJ5XG4gICAgICBsZXQgY2FsbGJhY2sgPSB1bnNhZmVfZ2V0X2NhbGxiYWNrIGNhbGxiYWNrcyAhaSBpblxuICAgICAgaW5jciBpO1xuICAgICAgY2FsbGJhY2sgYTFcbiAgICB3aXRoXG4gICAgfCBleG4gLT4gY2FsbGJhY2tfcmFpc2VkIHQgIWkgZXhuXG4gIGRvbmU7XG4gIGZpbmlzaF93cml0ZSB0XG47O1xuXG5sZXQgd3JpdGVfbG9jYWxfbm9uX29wdGltaXplZCB0IGNhbGxiYWNrcyAoYTEgW0Bsb2NhbF0pID1cbiAgbGV0IGxlbiA9IHQubnVtX3N1YnNjcmliZXJzIGluXG4gIGxldCBpID0gcmVmIDAgaW5cbiAgd2hpbGUgIWkgPCBsZW4gZG9cbiAgICB0cnlcbiAgICAgIGxldCBjYWxsYmFjayA9IHVuc2FmZV9nZXRfY2FsbGJhY2sgY2FsbGJhY2tzICFpIGluXG4gICAgICBpbmNyIGk7XG4gICAgICBjYWxsYmFjayBhMVxuICAgIHdpdGhcbiAgICB8IGV4biAtPiBjYWxsYmFja19yYWlzZWQgdCAhaSBleG5cbiAgZG9uZTtcbiAgZmluaXNoX3dyaXRlIHRcbjs7XG5cbmxldCB3cml0ZTJfbm9uX29wdGltaXplZCB0IGNhbGxiYWNrcyBhMSBhMiA9XG4gIGxldCBsZW4gPSB0Lm51bV9zdWJzY3JpYmVycyBpblxuICBsZXQgaSA9IHJlZiAwIGluXG4gIHdoaWxlICFpIDwgbGVuIGRvXG4gICAgdHJ5XG4gICAgICBsZXQgY2FsbGJhY2sgPSB1bnNhZmVfZ2V0X2NhbGxiYWNrIGNhbGxiYWNrcyAhaSBpblxuICAgICAgaW5jciBpO1xuICAgICAgY2FsbGJhY2sgYTEgYTJcbiAgICB3aXRoXG4gICAgfCBleG4gLT4gY2FsbGJhY2tfcmFpc2VkIHQgIWkgZXhuXG4gIGRvbmU7XG4gIGZpbmlzaF93cml0ZSB0XG47O1xuXG5sZXQgd3JpdGUzX25vbl9vcHRpbWl6ZWQgdCBjYWxsYmFja3MgYTEgYTIgYTMgPVxuICBsZXQgbGVuID0gdC5udW1fc3Vic2NyaWJlcnMgaW5cbiAgbGV0IGkgPSByZWYgMCBpblxuICB3aGlsZSAhaSA8IGxlbiBkb1xuICAgIHRyeVxuICAgICAgbGV0IGNhbGxiYWNrID0gdW5zYWZlX2dldF9jYWxsYmFjayBjYWxsYmFja3MgIWkgaW5cbiAgICAgIGluY3IgaTtcbiAgICAgIGNhbGxiYWNrIGExIGEyIGEzXG4gICAgd2l0aFxuICAgIHwgZXhuIC0+IGNhbGxiYWNrX3JhaXNlZCB0ICFpIGV4blxuICBkb25lO1xuICBmaW5pc2hfd3JpdGUgdFxuOztcblxubGV0IHdyaXRlNF9ub25fb3B0aW1pemVkIHQgY2FsbGJhY2tzIGExIGEyIGEzIGE0ID1cbiAgbGV0IGxlbiA9IHQubnVtX3N1YnNjcmliZXJzIGluXG4gIGxldCBpID0gcmVmIDAgaW5cbiAgd2hpbGUgIWkgPCBsZW4gZG9cbiAgICB0cnlcbiAgICAgIGxldCBjYWxsYmFjayA9IHVuc2FmZV9nZXRfY2FsbGJhY2sgY2FsbGJhY2tzICFpIGluXG4gICAgICBpbmNyIGk7XG4gICAgICBjYWxsYmFjayBhMSBhMiBhMyBhNFxuICAgIHdpdGhcbiAgICB8IGV4biAtPiBjYWxsYmFja19yYWlzZWQgdCAhaSBleG5cbiAgZG9uZTtcbiAgZmluaXNoX3dyaXRlIHRcbjs7XG5cbmxldCB3cml0ZTVfbm9uX29wdGltaXplZCB0IGNhbGxiYWNrcyBhMSBhMiBhMyBhNCBhNSA9XG4gIGxldCBsZW4gPSB0Lm51bV9zdWJzY3JpYmVycyBpblxuICBsZXQgaSA9IHJlZiAwIGluXG4gIHdoaWxlICFpIDwgbGVuIGRvXG4gICAgdHJ5XG4gICAgICBsZXQgY2FsbGJhY2sgPSB1bnNhZmVfZ2V0X2NhbGxiYWNrIGNhbGxiYWNrcyAhaSBpblxuICAgICAgaW5jciBpO1xuICAgICAgY2FsbGJhY2sgYTEgYTIgYTMgYTQgYTVcbiAgICB3aXRoXG4gICAgfCBleG4gLT4gY2FsbGJhY2tfcmFpc2VkIHQgIWkgZXhuXG4gIGRvbmU7XG4gIGZpbmlzaF93cml0ZSB0XG47O1xuXG4oKiBUaGUgW3dyaXRlX05dIGZ1bmN0aW9ucyBhcmUgd3JpdHRlbiB0byBtaW5pbWlzZSByZWdpc3RlcnMgbGl2ZSBhY3Jvc3MgZnVuY3Rpb24gY2FsbHNcbiAgICh0aGVzZSBoYXZlIHRvIGJlIHNwaWxsZWQpLiAgVGhleSBhcmUgYWxzbyBhbm5vdGF0ZWQgZm9yIHBhcnRpYWwgaW5saW5pbmcgKHRoZVxuICAgb25lLWNhbGxiYWNrIGNhc2UgYmVjb21lcyBpbmxpbmVkIHdoZXJlYXMgdGhlID4xLWNhbGxiYWNrLWNhc2UgcmVxdWlyZXMgYSBmdXJ0aGVyXG4gICBkaXJlY3QgY2FsbCkuICopXG5cbmxldFtAaW5saW5lIGFsd2F5c10gd3JpdGUgdCBhMSA9XG4gIGxldCBjYWxsYmFja3MgPSB0LmNhbGxiYWNrcyBpblxuICB0LndyaXRlX2V2ZXJfY2FsbGVkIDwtIHRydWU7XG4gIG1hdGNoIHQuc3RhdGUgd2l0aFxuICB8IENsb3NlZCB8IFdyaXRlX2luX3Byb2dyZXNzIC0+IHN0YXJ0X3dyaXRlX2ZhaWxpbmcgdFxuICB8IE9rX3RvX3dyaXRlIC0+XG4gICAgaWYgdC5udW1fc3Vic2NyaWJlcnMgPiAwXG4gICAgdGhlbiAoXG4gICAgICB0LnN0YXRlIDwtIFdyaXRlX2luX3Byb2dyZXNzO1xuICAgICAgaWYgdC5udW1fc3Vic2NyaWJlcnMgPSAxXG4gICAgICB0aGVuIChcbiAgICAgICAgKHRyeSAodW5zYWZlX2dldF9jYWxsYmFjayBjYWxsYmFja3MgMCkgYTEgd2l0aFxuICAgICAgICAgfCBleG4gLT4gY2FsbGJhY2tfcmFpc2VkIHQgMSBleG4pO1xuICAgICAgICBmaW5pc2hfd3JpdGUgdClcbiAgICAgIGVsc2UgKHdyaXRlX25vbl9vcHRpbWl6ZWQgW0BpbmxpbmVkIG5ldmVyXSkgdCBjYWxsYmFja3MgYTEpO1xuICAgIChtYXRjaCB0Lmxhc3RfdmFsdWUgd2l0aFxuICAgICB8IE5vbmUgLT4gKClcbiAgICAgfCBTb21lIGxhc3RfdmFsdWUgLT4gTGFzdF92YWx1ZS5zZXQxIGxhc3RfdmFsdWUgYTEpXG47O1xuXG5sZXRbQGlubGluZSBhbHdheXNdIHdyaXRlX2xvY2FsIHQgKGExIFtAbG9jYWxdKSA9XG4gIGxldCBjYWxsYmFja3MgPSB0LmNhbGxiYWNrcyBpblxuICB0LndyaXRlX2V2ZXJfY2FsbGVkIDwtIHRydWU7XG4gIG1hdGNoIHQuc3RhdGUgd2l0aFxuICB8IENsb3NlZCB8IFdyaXRlX2luX3Byb2dyZXNzIC0+IHN0YXJ0X3dyaXRlX2ZhaWxpbmcgdFxuICB8IE9rX3RvX3dyaXRlIC0+XG4gICAgaWYgdC5udW1fc3Vic2NyaWJlcnMgPiAwXG4gICAgdGhlbiAoXG4gICAgICB0LnN0YXRlIDwtIFdyaXRlX2luX3Byb2dyZXNzO1xuICAgICAgaWYgdC5udW1fc3Vic2NyaWJlcnMgPSAxXG4gICAgICB0aGVuIChcbiAgICAgICAgKHRyeSAodW5zYWZlX2dldF9jYWxsYmFjayBjYWxsYmFja3MgMCkgYTEgd2l0aFxuICAgICAgICAgfCBleG4gLT4gY2FsbGJhY2tfcmFpc2VkIHQgMSBleG4pO1xuICAgICAgICBmaW5pc2hfd3JpdGUgdClcbiAgICAgIGVsc2UgKHdyaXRlX2xvY2FsX25vbl9vcHRpbWl6ZWQgW0BpbmxpbmVkIG5ldmVyXSkgdCBjYWxsYmFja3MgYTEpXG47O1xuXG5sZXRbQGlubGluZSBhbHdheXNdIHdyaXRlMiB0IGExIGEyID1cbiAgbGV0IGNhbGxiYWNrcyA9IHQuY2FsbGJhY2tzIGluXG4gIHQud3JpdGVfZXZlcl9jYWxsZWQgPC0gdHJ1ZTtcbiAgbWF0Y2ggdC5zdGF0ZSB3aXRoXG4gIHwgQ2xvc2VkIHwgV3JpdGVfaW5fcHJvZ3Jlc3MgLT4gc3RhcnRfd3JpdGVfZmFpbGluZyB0XG4gIHwgT2tfdG9fd3JpdGUgLT5cbiAgICBpZiB0Lm51bV9zdWJzY3JpYmVycyA+IDBcbiAgICB0aGVuIChcbiAgICAgIHQuc3RhdGUgPC0gV3JpdGVfaW5fcHJvZ3Jlc3M7XG4gICAgICBpZiB0Lm51bV9zdWJzY3JpYmVycyA9IDFcbiAgICAgIHRoZW4gKFxuICAgICAgICAodHJ5ICh1bnNhZmVfZ2V0X2NhbGxiYWNrIGNhbGxiYWNrcyAwKSBhMSBhMiB3aXRoXG4gICAgICAgICB8IGV4biAtPiBjYWxsYmFja19yYWlzZWQgdCAxIGV4bik7XG4gICAgICAgIGZpbmlzaF93cml0ZSB0KVxuICAgICAgZWxzZSAod3JpdGUyX25vbl9vcHRpbWl6ZWQgW0BpbmxpbmVkIG5ldmVyXSkgdCBjYWxsYmFja3MgYTEgYTIpO1xuICAgIChtYXRjaCB0Lmxhc3RfdmFsdWUgd2l0aFxuICAgICB8IE5vbmUgLT4gKClcbiAgICAgfCBTb21lIGxhc3RfdmFsdWUgLT4gTGFzdF92YWx1ZS5zZXQyIGxhc3RfdmFsdWUgYTEgYTIpXG47O1xuXG5sZXRbQGlubGluZSBhbHdheXNdIHdyaXRlMyB0IGExIGEyIGEzID1cbiAgbGV0IGNhbGxiYWNrcyA9IHQuY2FsbGJhY2tzIGluXG4gIHQud3JpdGVfZXZlcl9jYWxsZWQgPC0gdHJ1ZTtcbiAgbWF0Y2ggdC5zdGF0ZSB3aXRoXG4gIHwgQ2xvc2VkIHwgV3JpdGVfaW5fcHJvZ3Jlc3MgLT4gc3RhcnRfd3JpdGVfZmFpbGluZyB0XG4gIHwgT2tfdG9fd3JpdGUgLT5cbiAgICBpZiB0Lm51bV9zdWJzY3JpYmVycyA+IDBcbiAgICB0aGVuIChcbiAgICAgIHQuc3RhdGUgPC0gV3JpdGVfaW5fcHJvZ3Jlc3M7XG4gICAgICBpZiB0Lm51bV9zdWJzY3JpYmVycyA9IDFcbiAgICAgIHRoZW4gKFxuICAgICAgICAodHJ5ICh1bnNhZmVfZ2V0X2NhbGxiYWNrIGNhbGxiYWNrcyAwKSBhMSBhMiBhMyB3aXRoXG4gICAgICAgICB8IGV4biAtPiBjYWxsYmFja19yYWlzZWQgdCAxIGV4bik7XG4gICAgICAgIGZpbmlzaF93cml0ZSB0KVxuICAgICAgZWxzZSAod3JpdGUzX25vbl9vcHRpbWl6ZWQgW0BpbmxpbmVkIG5ldmVyXSkgdCBjYWxsYmFja3MgYTEgYTIgYTMpO1xuICAgIChtYXRjaCB0Lmxhc3RfdmFsdWUgd2l0aFxuICAgICB8IE5vbmUgLT4gKClcbiAgICAgfCBTb21lIGxhc3RfdmFsdWUgLT4gTGFzdF92YWx1ZS5zZXQzIGxhc3RfdmFsdWUgYTEgYTIgYTMpXG47O1xuXG5sZXRbQGlubGluZSBhbHdheXNdIHdyaXRlNCB0IGExIGEyIGEzIGE0ID1cbiAgbGV0IGNhbGxiYWNrcyA9IHQuY2FsbGJhY2tzIGluXG4gIHQud3JpdGVfZXZlcl9jYWxsZWQgPC0gdHJ1ZTtcbiAgbWF0Y2ggdC5zdGF0ZSB3aXRoXG4gIHwgQ2xvc2VkIHwgV3JpdGVfaW5fcHJvZ3Jlc3MgLT4gc3RhcnRfd3JpdGVfZmFpbGluZyB0XG4gIHwgT2tfdG9fd3JpdGUgLT5cbiAgICBpZiB0Lm51bV9zdWJzY3JpYmVycyA+IDBcbiAgICB0aGVuIChcbiAgICAgIHQuc3RhdGUgPC0gV3JpdGVfaW5fcHJvZ3Jlc3M7XG4gICAgICBpZiB0Lm51bV9zdWJzY3JpYmVycyA9IDFcbiAgICAgIHRoZW4gKFxuICAgICAgICAodHJ5ICh1bnNhZmVfZ2V0X2NhbGxiYWNrIGNhbGxiYWNrcyAwKSBhMSBhMiBhMyBhNCB3aXRoXG4gICAgICAgICB8IGV4biAtPiBjYWxsYmFja19yYWlzZWQgdCAxIGV4bik7XG4gICAgICAgIGZpbmlzaF93cml0ZSB0KVxuICAgICAgZWxzZSAod3JpdGU0X25vbl9vcHRpbWl6ZWQgW0BpbmxpbmVkIG5ldmVyXSkgdCBjYWxsYmFja3MgYTEgYTIgYTMgYTQpO1xuICAgIChtYXRjaCB0Lmxhc3RfdmFsdWUgd2l0aFxuICAgICB8IE5vbmUgLT4gKClcbiAgICAgfCBTb21lIGxhc3RfdmFsdWUgLT4gTGFzdF92YWx1ZS5zZXQ0IGxhc3RfdmFsdWUgYTEgYTIgYTMgYTQpXG47O1xuXG5sZXRbQGlubGluZSBhbHdheXNdIHdyaXRlNSB0IGExIGEyIGEzIGE0IGE1ID1cbiAgbGV0IGNhbGxiYWNrcyA9IHQuY2FsbGJhY2tzIGluXG4gIHQud3JpdGVfZXZlcl9jYWxsZWQgPC0gdHJ1ZTtcbiAgbWF0Y2ggdC5zdGF0ZSB3aXRoXG4gIHwgQ2xvc2VkIHwgV3JpdGVfaW5fcHJvZ3Jlc3MgLT4gc3RhcnRfd3JpdGVfZmFpbGluZyB0XG4gIHwgT2tfdG9fd3JpdGUgLT5cbiAgICBpZiB0Lm51bV9zdWJzY3JpYmVycyA+IDBcbiAgICB0aGVuIChcbiAgICAgIHQuc3RhdGUgPC0gV3JpdGVfaW5fcHJvZ3Jlc3M7XG4gICAgICBpZiB0Lm51bV9zdWJzY3JpYmVycyA9IDFcbiAgICAgIHRoZW4gKFxuICAgICAgICAodHJ5ICh1bnNhZmVfZ2V0X2NhbGxiYWNrIGNhbGxiYWNrcyAwKSBhMSBhMiBhMyBhNCBhNSB3aXRoXG4gICAgICAgICB8IGV4biAtPiBjYWxsYmFja19yYWlzZWQgdCAxIGV4bik7XG4gICAgICAgIGZpbmlzaF93cml0ZSB0KVxuICAgICAgZWxzZSAod3JpdGU1X25vbl9vcHRpbWl6ZWQgW0BpbmxpbmVkIG5ldmVyXSkgdCBjYWxsYmFja3MgYTEgYTIgYTMgYTQgYTUpO1xuICAgIChtYXRjaCB0Lmxhc3RfdmFsdWUgd2l0aFxuICAgICB8IE5vbmUgLT4gKClcbiAgICAgfCBTb21lIGxhc3RfdmFsdWUgLT4gTGFzdF92YWx1ZS5zZXQ1IGxhc3RfdmFsdWUgYTEgYTIgYTMgYTQgYTUpXG47O1xuXG5sZXQgYWxsb3dfc3Vic2NyaXB0aW9uX2FmdGVyX2ZpcnN0X3dyaXRlIHQgPVxuICBPbl9zdWJzY3JpcHRpb25fYWZ0ZXJfZmlyc3Rfd3JpdGUuYWxsb3dfc3Vic2NyaXB0aW9uX2FmdGVyX2ZpcnN0X3dyaXRlXG4gICAgdC5vbl9zdWJzY3JpcHRpb25fYWZ0ZXJfZmlyc3Rfd3JpdGVcbjs7XG5cbmxldCBjcmVhdGVfZXhuXG4gICAgICA/bmFtZVxuICAgICAgY3JlYXRlZF9mcm9tXG4gICAgICBjYWxsYmFja19hcml0eVxuICAgICAgfihvbl9zdWJzY3JpcHRpb25fYWZ0ZXJfZmlyc3Rfd3JpdGUgOiBPbl9zdWJzY3JpcHRpb25fYWZ0ZXJfZmlyc3Rfd3JpdGUudClcbiAgICAgIH5vbl9jYWxsYmFja19yYWlzZVxuICA9XG4gIGxldCBsYXN0X3ZhbHVlID1cbiAgICBPbl9zdWJzY3JpcHRpb25fYWZ0ZXJfZmlyc3Rfd3JpdGUuc2F2ZV9sYXN0X3ZhbHVlX2V4blxuICAgICAgb25fc3Vic2NyaXB0aW9uX2FmdGVyX2ZpcnN0X3dyaXRlXG4gICAgICBjYWxsYmFja19hcml0eVxuICBpblxuICB7IGJ1c19pZCA9IEJ1c19pZC5jcmVhdGUgKClcbiAgOyBuYW1lXG4gIDsgY2FsbGJhY2tfYXJpdHlcbiAgOyBjcmVhdGVkX2Zyb21cbiAgOyBudW1fc3Vic2NyaWJlcnMgPSAwXG4gIDsgb25fc3Vic2NyaXB0aW9uX2FmdGVyX2ZpcnN0X3dyaXRlXG4gIDsgb25fY2FsbGJhY2tfcmFpc2VcbiAgOyBsYXN0X3ZhbHVlXG4gIDsgc3Vic2NyaWJlcnMgPSBPcHRpb25fYXJyYXkuY3JlYXRlIH5sZW46MFxuICA7IGNhbGxiYWNrcyA9IE9wdGlvbl9hcnJheS5jcmVhdGUgfmxlbjowXG4gIDsgc3RhdGUgPSBPa190b193cml0ZVxuICA7IHdyaXRlX2V2ZXJfY2FsbGVkID0gZmFsc2VcbiAgOyB1bnN1YnNjcmliZXNfZHVyaW5nX3dyaXRlID0gW11cbiAgfVxuOztcblxubGV0IGNhbl9zdWJzY3JpYmUgdCA9IGFsbG93X3N1YnNjcmlwdGlvbl9hZnRlcl9maXJzdF93cml0ZSB0IHx8IG5vdCB0LndyaXRlX2V2ZXJfY2FsbGVkXG5cbmxldCBlbmxhcmdlX2NhcGFjaXR5IHQgPVxuICBsZXQgY2FwYWNpdHkgPSBjYXBhY2l0eSB0IGluXG4gIGxldCBuZXdfY2FwYWNpdHkgPSBJbnQubWF4IDEgKGNhcGFjaXR5ICogMikgaW5cbiAgbGV0IGNvcHlfYW5kX2RvdWJsZSBhcnJheSA9XG4gICAgbGV0IG5ld19hcnJheSA9IE9wdGlvbl9hcnJheS5jcmVhdGUgfmxlbjpuZXdfY2FwYWNpdHkgaW5cbiAgICBPcHRpb25fYXJyYXkuYmxpdCB+c3JjOmFycmF5IH5zcmNfcG9zOjAgfmRzdDpuZXdfYXJyYXkgfmRzdF9wb3M6MCB+bGVuOmNhcGFjaXR5O1xuICAgIG5ld19hcnJheVxuICBpblxuICB0LnN1YnNjcmliZXJzIDwtIGNvcHlfYW5kX2RvdWJsZSB0LnN1YnNjcmliZXJzO1xuICB0LmNhbGxiYWNrcyA8LSBjb3B5X2FuZF9kb3VibGUgdC5jYWxsYmFja3Ncbjs7XG5cbmxldCBzdWJzY3JpYmVfZXhuXG4gICAgICA/KGV4dHJhY3RfZXhuID0gZmFsc2UpXG4gICAgICA/b25fY2FsbGJhY2tfcmFpc2VcbiAgICAgID9vbl9jbG9zZVxuICAgICAgdFxuICAgICAgc3Vic2NyaWJlZF9mcm9tXG4gICAgICB+ZjpjYWxsYmFja1xuICA9XG4gIGlmIG5vdCAoY2FuX3N1YnNjcmliZSB0KVxuICB0aGVuXG4gICAgZmFpbHdpdGhzXG4gICAgICB+aGVyZTpbJWhlcmVdXG4gICAgICBcIkJ1cy5zdWJzY3JpYmVfZXhuIGNhbGxlZCBhZnRlciBmaXJzdCB3cml0ZVwiXG4gICAgICBbJXNleHAgfn4oc3Vic2NyaWJlZF9mcm9tIDogU291cmNlX2NvZGVfcG9zaXRpb24udCksIHsgYnVzID0gKHQgOiAoXywgXykgdCkgfV1cbiAgICAgIFslc2V4cF9vZjogU2V4cC50XTtcbiAgbWF0Y2ggdC5zdGF0ZSB3aXRoXG4gIHwgQ2xvc2VkIC0+XG4gICAgKCogQW55dGhpbmcgdGhhdCBzYXRpc2ZpZXMgdGhlIHJldHVybiB0eXBlIHdpbGwgZG8uICBTaW5jZSB0aGUgc3Vic2NyaWJlciBpcyBuZXZlclxuICAgICAgIHN0b3JlZCBpbiB0aGUgYXJyYXlzLCB0aGUgW29uX2Nsb3NlXSBjYWxsYmFjayB3aWxsIG5ldmVyIGJlIGNhbGxlZC4gKilcbiAgICBTdWJzY3JpYmVyLmNyZWF0ZVxuICAgICAgc3Vic2NyaWJlZF9mcm9tXG4gICAgICB+YnVzX2lkOnQuYnVzX2lkXG4gICAgICB+Y2FsbGJhY2tcbiAgICAgIH5leHRyYWN0X2V4blxuICAgICAgfnN1YnNjcmliZXJzX2luZGV4OigtMSlcbiAgICAgIH5vbl9jYWxsYmFja19yYWlzZVxuICAgICAgfm9uX2Nsb3NlXG4gIHwgT2tfdG9fd3JpdGUgfCBXcml0ZV9pbl9wcm9ncmVzcyAtPlxuICAgICgqIFRoZSBjb2RlIGJlbG93IHNpZGUgZWZmZWN0cyBbdF0sIHdoaWNoIHBvdGVudGlhbGx5IGNvdWxkIGludGVyZmVyZSB3aXRoIGEgd3JpdGUgaW5cbiAgICAgICBwcm9ncmVzcy4gIEhvd2V2ZXIsIHRoZSBzaWRlIGVmZmVjdHMgZG9uJ3QgY2hhbmdlIHRoZSBwcmVmaXggb2YgW3QuY2FsbGJhY2tzXSB0aGF0XG4gICAgICAgd3JpdGUgdXNlczsgdGhleSBvbmx5IGNoYW5nZSBbdC5jYWxsYmFja3NdIGJleW9uZCB0aGF0IHByZWZpeC4gIEFuZCBhbGwgd3JpdGVzXG4gICAgICAgZXh0cmFjdCBbdC5udW1fc3Vic2NyaWJlcnNdIGF0IHRoZSBzdGFydCwgc28gdGhhdCB0aGV5IHdpbGwgbm90IHNlZSBhbnkgc3Vic2VxdWVudFxuICAgICAgIGNoYW5nZXMgdG8gaXQuICopXG4gICAgbGV0IHN1YnNjcmliZXIgPVxuICAgICAgU3Vic2NyaWJlci5jcmVhdGVcbiAgICAgICAgc3Vic2NyaWJlZF9mcm9tXG4gICAgICAgIH5idXNfaWQ6dC5idXNfaWRcbiAgICAgICAgfmNhbGxiYWNrXG4gICAgICAgIH5leHRyYWN0X2V4blxuICAgICAgICB+c3Vic2NyaWJlcnNfaW5kZXg6dC5udW1fc3Vic2NyaWJlcnNcbiAgICAgICAgfm9uX2NhbGxiYWNrX3JhaXNlXG4gICAgICAgIH5vbl9jbG9zZVxuICAgIGluXG4gICAgaWYgY2FwYWNpdHkgdCA9IHQubnVtX3N1YnNjcmliZXJzIHRoZW4gZW5sYXJnZV9jYXBhY2l0eSB0O1xuICAgIGFkZF9zdWJzY3JpYmVyIHQgc3Vic2NyaWJlciB+YXRfc3Vic2NyaWJlcnNfaW5kZXg6dC5udW1fc3Vic2NyaWJlcnM7XG4gICAgdC5udW1fc3Vic2NyaWJlcnMgPC0gdC5udW1fc3Vic2NyaWJlcnMgKyAxO1xuICAgIChtYXRjaCB0Lmxhc3RfdmFsdWUgd2l0aFxuICAgICB8IE5vbmUgLT4gKClcbiAgICAgfCBTb21lIGxhc3RfdmFsdWUgLT4gTGFzdF92YWx1ZS5zZW5kIGxhc3RfdmFsdWUgY2FsbGJhY2spO1xuICAgIHN1YnNjcmliZXJcbjs7XG5cbmxldCBpdGVyX2V4biA/ZXh0cmFjdF9leG4gdCBzdWJzY3JpYmVkX2Zyb20gfmYgPVxuICBpZiBub3QgKGNhbl9zdWJzY3JpYmUgdClcbiAgdGhlblxuICAgIGZhaWx3aXRocyB+aGVyZTpbJWhlcmVdIFwiQnVzLml0ZXJfZXhuIGNhbGxlZCBhZnRlciBmaXJzdCB3cml0ZVwiIHQgWyVzZXhwX29mOiAoXywgXykgdF07XG4gIGlnbm9yZSAoc3Vic2NyaWJlX2V4biA/ZXh0cmFjdF9leG4gdCBzdWJzY3JpYmVkX2Zyb20gfmYgOiBfIFN1YnNjcmliZXIudClcbjs7XG5cbm1vZHVsZSBGb2xkX2FyaXR5ID0gc3RydWN0XG4gIHR5cGUgKF8sIF8sIF8pIHQgPVxuICAgIHwgQXJpdHkxIDogKCdhIC0+IHVuaXQsICdzIC0+ICdhIC0+ICdzLCAncykgdFxuICAgIHwgQXJpdHkyIDogKCdhIC0+ICdiIC0+IHVuaXQsICdzIC0+ICdhIC0+ICdiIC0+ICdzLCAncykgdFxuICAgIHwgQXJpdHkzIDogKCdhIC0+ICdiIC0+ICdjIC0+IHVuaXQsICdzIC0+ICdhIC0+ICdiIC0+ICdjIC0+ICdzLCAncykgdFxuICAgIHwgQXJpdHk0IDogKCdhIC0+ICdiIC0+ICdjIC0+ICdkIC0+IHVuaXQsICdzIC0+ICdhIC0+ICdiIC0+ICdjIC0+ICdkIC0+ICdzLCAncykgdFxuICAgIHwgQXJpdHk1XG4gICAgICA6ICggJ2EgLT4gJ2IgLT4gJ2MgLT4gJ2QgLT4gJ2UgLT4gdW5pdFxuICAgICAgICAsICdzIC0+ICdhIC0+ICdiIC0+ICdjIC0+ICdkIC0+ICdlIC0+ICdzXG4gICAgICAgICwgJ3MgKVxuICAgICAgICAgIHRcbiAgW0BAZGVyaXZpbmcgc2V4cF9vZl1cbmVuZFxuXG5sZXQgZm9sZF9leG5cbiAgICAgID9leHRyYWN0X2V4blxuICAgICAgKHR5cGUgYyBmIHMpXG4gICAgICAodCA6IChjLCBfKSB0KVxuICAgICAgc3Vic2NyaWJlZF9mcm9tXG4gICAgICAoZm9sZF9hcml0eSA6IChjLCBmLCBzKSBGb2xkX2FyaXR5LnQpXG4gICAgICB+KGluaXQgOiBzKVxuICAgICAgfihmIDogZilcbiAgPVxuICBsZXQgc3RhdGUgPSByZWYgaW5pdCBpblxuICBpZiBub3QgKGNhbl9zdWJzY3JpYmUgdClcbiAgdGhlblxuICAgIGZhaWx3aXRocyB+aGVyZTpbJWhlcmVdIFwiQnVzLmZvbGRfZXhuIGNhbGxlZCBhZnRlciBmaXJzdCB3cml0ZVwiIHQgWyVzZXhwX29mOiAoXywgXykgdF07XG4gIGl0ZXJfZXhuXG4gICAgP2V4dHJhY3RfZXhuXG4gICAgdFxuICAgIHN1YnNjcmliZWRfZnJvbVxuICAgIH5mOlxuICAgICAgKG1hdGNoIGZvbGRfYXJpdHkgd2l0aFxuICAgICAgIHwgQXJpdHkxIC0+IGZ1biBhMSAtPiBzdGF0ZSA6PSBmICFzdGF0ZSBhMVxuICAgICAgIHwgQXJpdHkyIC0+IGZ1biBhMSBhMiAtPiBzdGF0ZSA6PSBmICFzdGF0ZSBhMSBhMlxuICAgICAgIHwgQXJpdHkzIC0+IGZ1biBhMSBhMiBhMyAtPiBzdGF0ZSA6PSBmICFzdGF0ZSBhMSBhMiBhM1xuICAgICAgIHwgQXJpdHk0IC0+IGZ1biBhMSBhMiBhMyBhNCAtPiBzdGF0ZSA6PSBmICFzdGF0ZSBhMSBhMiBhMyBhNFxuICAgICAgIHwgQXJpdHk1IC0+IGZ1biBhMSBhMiBhMyBhNCBhNSAtPiBzdGF0ZSA6PSBmICFzdGF0ZSBhMSBhMiBhMyBhNCBhNSlcbjs7XG5cbmxldCV0ZXN0X21vZHVsZSBfID1cbiAgKG1vZHVsZSBzdHJ1Y3RcbiAgICBsZXQgYXNzZXJ0X25vX2FsbG9jYXRpb24gYnVzIGNhbGxiYWNrIHdyaXRlID1cbiAgICAgIGxldCBidXNfciA9IHJlYWRfb25seSBidXMgaW5cbiAgICAgIGlnbm9yZSAoc3Vic2NyaWJlX2V4biBidXNfciBbJWhlcmVdIH5mOmNhbGxiYWNrIDogXyBTdWJzY3JpYmVyLnQpO1xuICAgICAgbGV0IHN0YXJ0aW5nX21pbm9yX3dvcmRzID0gR2MubWlub3Jfd29yZHMgKCkgaW5cbiAgICAgIGxldCBzdGFydGluZ19tYWpvcl93b3JkcyA9IEdjLm1ham9yX3dvcmRzICgpIGluXG4gICAgICB3cml0ZSAoKTtcbiAgICAgIGxldCBlbmRpbmdfbWlub3Jfd29yZHMgPSBHYy5taW5vcl93b3JkcyAoKSBpblxuICAgICAgbGV0IGVuZGluZ19tYWpvcl93b3JkcyA9IEdjLm1ham9yX3dvcmRzICgpIGluXG4gICAgICBbJXRlc3RfcmVzdWx0OiBpbnRdIChlbmRpbmdfbWlub3Jfd29yZHMgLSBzdGFydGluZ19taW5vcl93b3JkcykgfmV4cGVjdDowO1xuICAgICAgWyV0ZXN0X3Jlc3VsdDogaW50XSAoZW5kaW5nX21ham9yX3dvcmRzIC0gc3RhcnRpbmdfbWFqb3Jfd29yZHMpIH5leHBlY3Q6MFxuICAgIDs7XG5cbiAgICAoKiBUaGlzIHRlc3Qgb25seSB3b3JrcyB3aGVuIFt3cml0ZV0gaXMgcHJvcGVybHkgaW5saW5lZC4gIEl0IGRvZXMgbm90IGd1YXJhbnRlZSB0aGF0XG4gICAgICAgW3dyaXRlXSBuZXZlciBhbGxvY2F0ZXMgaW4gYW55IHNpdHVhdGlvbi4gIEZvciBleGFtcGxlLCBpZiB0aGlzIHRlc3QgaXMgbW92ZWQgdG9cbiAgICAgICBhbm90aGVyIGxpYnJhcnkgYW5kIHJ1biB3aXRoIFhfTElCUkFSWV9JTkxJTklORz1mYWxzZSwgaXQgZmFpbHMuICopXG4gICAgbGV0JXRlc3RfdW5pdCBcIndyaXRlIGRvZXNuJ3QgYWxsb2NhdGUgd2hlbiBpbmxpbmVkXCIgPVxuICAgICAgbGV0IGNyZWF0ZSBjcmVhdGVkX2Zyb20gYXJpdHkgPVxuICAgICAgICBjcmVhdGVfZXhuXG4gICAgICAgICAgY3JlYXRlZF9mcm9tXG4gICAgICAgICAgYXJpdHlcbiAgICAgICAgICB+b25fc3Vic2NyaXB0aW9uX2FmdGVyX2ZpcnN0X3dyaXRlOlJhaXNlXG4gICAgICAgICAgfm9uX2NhbGxiYWNrX3JhaXNlOkVycm9yLnJhaXNlXG4gICAgICBpblxuICAgICAgbGV0IGJ1czEgPSBjcmVhdGUgWyVoZXJlXSBBcml0eTEgaW5cbiAgICAgIGxldCBidXMyID0gY3JlYXRlIFslaGVyZV0gQXJpdHkyIGluXG4gICAgICBsZXQgYnVzMyA9IGNyZWF0ZSBbJWhlcmVdIEFyaXR5MyBpblxuICAgICAgbGV0IGJ1czQgPSBjcmVhdGUgWyVoZXJlXSBBcml0eTQgaW5cbiAgICAgIGxldCBidXM1ID0gY3JlYXRlIFslaGVyZV0gQXJpdHk1IGluXG4gICAgICBhc3NlcnRfbm9fYWxsb2NhdGlvbiBidXMxIChmdW4gKCkgLT4gKCkpIChmdW4gKCkgLT4gd3JpdGUgYnVzMSAoKSk7XG4gICAgICBhc3NlcnRfbm9fYWxsb2NhdGlvbiBidXMyIChmdW4gKCkgKCkgLT4gKCkpIChmdW4gKCkgLT4gd3JpdGUyIGJ1czIgKCkgKCkpO1xuICAgICAgYXNzZXJ0X25vX2FsbG9jYXRpb24gYnVzMyAoZnVuICgpICgpICgpIC0+ICgpKSAoZnVuICgpIC0+IHdyaXRlMyBidXMzICgpICgpICgpKTtcbiAgICAgIGFzc2VydF9ub19hbGxvY2F0aW9uXG4gICAgICAgIGJ1czRcbiAgICAgICAgKGZ1biAoKSAoKSAoKSAoKSAtPiAoKSlcbiAgICAgICAgKGZ1biAoKSAtPiB3cml0ZTQgYnVzNCAoKSAoKSAoKSAoKSk7XG4gICAgICBhc3NlcnRfbm9fYWxsb2NhdGlvblxuICAgICAgICBidXM1XG4gICAgICAgIChmdW4gKCkgKCkgKCkgKCkgKCkgLT4gKCkpXG4gICAgICAgIChmdW4gKCkgLT4gd3JpdGU1IGJ1czUgKCkgKCkgKCkgKCkgKCkpXG4gICAgOztcbiAgZW5kKVxuOztcbiJdLCJpZ25vcmVMaXN0IjpbMF19fV19
