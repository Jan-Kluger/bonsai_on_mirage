// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Inline_css__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Inline_css = [0];
   runtime.caml_register_global(0, Inline_css, "Inline_css__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Inline_css__Style_element_strategy
//# unitInfo: Requires: Core, Core__Or_error, Js_of_ocaml__Dom_html, Js_of_ocaml__Js
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    name = "<style> element inside <head> element",
    parent_selector = "head",
    name$0 = "<style> element inside <body> element",
    parent_selector$0 = "body",
    name$1 = "any element inside the document",
    parent_selector$1 = "*",
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Core_Or_error = global_data.Core__Or_error,
    Core = global_data.Core,
    cst_not_found_in_document = " not found in document";
   function Make(T){
    var name = T[1], parent_selector = T[2];
    function make_style_element(param){
     return caml_call1(Js_of_ocaml_Dom_html[34], Js_of_ocaml_Dom_html[2]);
    }
    function update(t1, content){
     var t0 = caml_jsstring_of_string(content);
     return t1.innerText = t0;
    }
    function initialize(param){
     var
      t2 = caml_jsstring_of_string(parent_selector),
      t3 = Js_of_ocaml_Dom_html[2],
      parent = t3.querySelector(t2),
      match = caml_call1(Js_of_ocaml_Js[5][10], parent);
     if(! match){
      var
       _b_ = caml_call2(Core[17], parent_selector, cst_not_found_in_document);
      return caml_call1(Core_Or_error[41], _b_);
     }
     var parent$0 = match[1];
     try{
      var style_element = make_style_element(0);
      parent$0.appendChild(style_element);
      var _a_ = [0, style_element];
      return _a_;
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      return caml_call2(Core_Or_error[37], 0, exn);
     }
    }
    return [0, name, , , update, initialize];
   }
   var
    Into_head = Make([0, name, parent_selector]),
    Into_body = Make([0, name$0, parent_selector$0]),
    Into_root_element = Make([0, name$1, parent_selector$1]),
    Inline_css_Style_element_strat =
      [0,
       [0, Into_head[1], Into_head[5], Into_head[4]],
       [0, Into_body[1], Into_body[5], Into_body[4]],
       [0, Into_root_element[1], Into_root_element[5], Into_root_element[4]]];
   runtime.caml_register_global
    (14, Inline_css_Style_element_strat, "Inline_css__Style_element_strategy");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Inline_css__Strategy_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Inline_css_Strategy_intf = [0];
   runtime.caml_register_global
    (0, Inline_css_Strategy_intf, "Inline_css__Strategy_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Inline_css__Constructed_stylesheet_strategy
//# unitInfo: Requires: Core__Or_error, Js_of_ocaml__Js
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    name = "constructed stylesheet",
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Core_Or_error = global_data.Core__Or_error,
    t0 = Js_of_ocaml_Js[52][1],
    t = t0.CSSStyleSheet;
   function append(style_sheet){
    document.adoptedStyleSheets =
     Array.prototype.concat.apply(document.adoptedStyleSheets, [style_sheet]);
   }
   var cst_window_CSSStyleSheet_doesn = "window.CSSStyleSheet doesn't exist";
   function initialize(param){
    var match = caml_call1(Js_of_ocaml_Js[6][10], t);
    if(! match)
     return caml_call1(Core_Or_error[41], cst_window_CSSStyleSheet_doesn);
    var stylesheet_constructor = match[1];
    try{
     var style_sheet = new stylesheet_constructor;
     caml_call1(append, style_sheet);
     var _a_ = [0, style_sheet];
     return _a_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     return caml_call2(Core_Or_error[37], 0, exn);
    }
   }
   function update(t3, content){
    var t2 = runtime.caml_jsstring_of_string(content);
    return t3.replaceSync(t2);
   }
   var Inline_css_Constructed_stylesh = [0, name, initialize, update];
   runtime.caml_register_global
    (7,
     Inline_css_Constructed_stylesh,
     "Inline_css__Constructed_stylesheet_strategy");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Inline_css
//# unitInfo: Requires: Base__Or_error, CamlinternalLazy, Core, Core__Error, Core__Lazy, Core__Option, Core__Or_error, Core__String, Inline_css__Constructed_stylesheet_strategy, Inline_css__Style_element_strategy, Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Re__Str, Reversed_list
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Lazy = global_data.Core__Lazy,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Core_Error = global_data.Core__Error,
    Core = global_data.Core,
    Core_Or_error = global_data.Core__Or_error,
    Base_Or_error = global_data.Base__Or_error,
    Re_Str = global_data.Re__Str,
    Reversed_list = global_data.Reversed_list,
    Core_String = global_data.Core__String,
    Inline_css_Style_element_strat =
      global_data.Inline_css__Style_element_strategy,
    Inline_css_Constructed_stylesh =
      global_data.Inline_css__Constructed_stylesheet_strategy,
    Core_Option = global_data.Core__Option,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    all_css = [0, 0],
    _a_ = [0, "\n"];
   function to_string(param){
    var _o_ = caml_call1(Reversed_list[3], all_css[1]);
    return caml_call1(caml_call1(Core_String[45], _a_), _o_);
   }
   var
    regex = caml_call1(Re_Str[1], "_hash_\\([a-z0-9]+\\)*"),
    cst_hash_replaced_in_test = "_hash_replaced_in_test";
   function print_for_testing(param){
    var
     _m_ = to_string(0),
     _n_ =
       caml_call1
        (caml_call2(Re_Str[16], regex, cst_hash_replaced_in_test), _m_);
    return caml_call1(Core[31], _n_);
   }
   var
    strategies =
      [0,
       Inline_css_Constructed_stylesh,
       [0,
        Inline_css_Style_element_strat[1],
        [0,
         Inline_css_Style_element_strat[2],
         [0, Inline_css_Style_element_strat[3], 0]]]],
    selected =
      [246,
       function(_i_){
        return caml_call2
                (Core_Or_error[55],
                 strategies,
                 function(Strategy){
                  var
                   _j_ = Strategy[1],
                   _k_ = caml_call1(Strategy[2], 0),
                   _l_ = caml_call2(Core_Or_error[43], _k_, _j_);
                  return caml_call2
                          (Base_Or_error[25][4][3],
                           _l_,
                           function(state){return [0, state, Strategy];});
                 });
       }];
   function install_in_dom(param){
    var _f_ = runtime.caml_obj_tag(selected);
    a:
    if(250 === _f_)
     var match = selected[1];
    else{
     if(246 !== _f_ && 244 !== _f_){var match = selected; break a;}
     var match = caml_call1(CamlinternalLazy[2], selected);
    }
    if(0 === match[0]){
     var
      match$0 = match[1],
      M = match$0[2],
      state = match$0[1],
      _g_ = to_string(0);
     return caml_call2(M[3], state, _g_);
    }
    var e = match[1], _h_ = caml_call1(Core_Error[6], e);
    return caml_call2(Core[251], 0, _h_);
   }
   var
    ready_state =
      caml_call1
       (Core_Option[52],
        function(param){
         var t0 = Js_of_ocaml_Dom_html[2];
         return runtime.caml_string_of_jsstring(t0.readyState);
        });
   if(ready_state){
    var _b_ = ready_state[1];
    a:
    {
     if(_b_ !== "complete" && _b_ !== "interactive"){
      _b_ !== "loading";
      var
       _c_ =
         caml_call1
          (Js_of_ocaml_Dom[10],
           function(param){install_in_dom(0); return Js_of_ocaml_Js[7];});
      caml_call6
       (Js_of_ocaml_Dom_html[16],
        Js_of_ocaml_Dom_html[8],
        Js_of_ocaml_Dom_html[15][56],
        [0, Js_of_ocaml_Js[8]],
        [0, Js_of_ocaml_Js[7]],
        [0, Js_of_ocaml_Js[7]],
        _c_);
      break a;
     }
     install_in_dom(0);
    }
   }
   function append(a){
    all_css[1] = [0, a, all_css[1]];
    var match = caml_call1(Core_Lazy[36], selected);
    if(! match) return 0;
    var _d_ = match[1];
    if(0 !== _d_[0]) return 0;
    var
     match$0 = _d_[1],
     M = match$0[2],
     state = match$0[1],
     _e_ = to_string(0);
    return caml_call2(M[3], state, _e_);
   }
   var Private = [0, append], Inline_css = [0, print_for_testing, Private];
   runtime.caml_register_global(22, Inline_css, "Inline_css");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
