// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Eager_deferred__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Eager_deferred = [0];
   runtime.caml_register_global(0, Eager_deferred, "Eager_deferred__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Eager_deferred__Import
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Eager_deferred_Import = [0];
   runtime.caml_register_global
    (0, Eager_deferred_Import, "Eager_deferred__Import");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Eager_deferred__Eager_deferred0
//# unitInfo: Requires: Async_kernel__Deferred, Async_kernel__Ivar, Async_kernel__Throttle, Base__Monad, Core, Core__List, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Eager_deferred_Eager_defer = "Eager_deferred__Eager_deferred0",
    cst_eager_deferred = "eager_deferred";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_List = global_data.Core__List,
    Async_kernel_Throttle = global_data.Async_kernel__Throttle,
    Core = global_data.Core,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Base_Monad = global_data.Base__Monad;
   caml_call1(Ppx_module_timer_runtime[4], cst_Eager_deferred_Eager_defer);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_eager_deferred);
   caml_call1
    (Expect_test_collector[6][1], "eager_deferred/src/eager_deferred0.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_eager_deferred, "eager_deferred0.ml");
   var
    sexp_of_t = Async_kernel_Deferred[1],
    return$0 = Async_kernel_Deferred[12];
   function bind(t, f){
    return caml_call1(Async_kernel_Deferred[7], t)
            ? caml_call1(f, caml_call1(Async_kernel_Deferred[6], t))
            : caml_call2(Async_kernel_Deferred[11], t, f);
   }
   var
    map =
      [0,
       -198771759,
       function(t, f){
        return caml_call1(Async_kernel_Deferred[7], t)
                ? caml_call1
                  (return$0,
                   caml_call1(f, caml_call1(Async_kernel_Deferred[6], t)))
                : caml_call2(Async_kernel_Deferred[13], t, f);
       }],
    T = [0, sexp_of_t, return$0, bind, map],
    sexp_of_t$0 = T[1],
    include = caml_call1(Base_Monad[1], [0, T[3], T[2], T[4]]),
    symbol_bind = include[1],
    symbol_map = include[2],
    Monad_infix = include[3],
    bind$0 = include[4],
    return$1 = include[5],
    map$0 = include[6],
    join = include[7],
    all = include[9],
    Let_syntax = include[11],
    create = Async_kernel_Deferred[3],
    don_t_wait_for = Async_kernel_Deferred[25],
    invariant = Async_kernel_Deferred[2],
    is_determined = Async_kernel_Deferred[7],
    never = Async_kernel_Deferred[19],
    peek = Async_kernel_Deferred[5],
    unit = Async_kernel_Deferred[18],
    value_exn = Async_kernel_Deferred[6];
   function upon(t, f){
    return caml_call1(is_determined, t)
            ? caml_call1(f, caml_call1(value_exn, t))
            : caml_call2(Async_kernel_Deferred[4], t, f);
   }
   function both(t1, t2){
    return caml_call1
            (create,
             function(result){
              function f(a1){
               function f(a2){
                return caml_call2(Async_kernel_Ivar[14], result, [0, a1, a2]);
               }
               return caml_call1(is_determined, t2)
                       ? f(caml_call1(value_exn, t2))
                       : caml_call2(Async_kernel_Deferred[4], t2, f);
              }
              return caml_call1(is_determined, t1)
                      ? f(caml_call1(value_exn, t1))
                      : caml_call2(Async_kernel_Deferred[4], t1, f);
             });
   }
   function ok(t){
    return caml_call1(is_determined, t)
            ? caml_call1(return$1, [0, caml_call1(value_exn, t)])
            : caml_call1(Async_kernel_Deferred[33], t);
   }
   function ignore_m(t){
    return caml_call1(is_determined, t)
            ? unit
            : caml_call1(Async_kernel_Deferred[15], t);
   }
   function any(ts){
    var match = caml_call2(Core_List[27], ts, is_determined);
    if(! match) return caml_call1(Async_kernel_Deferred[23], ts);
    var x = match[1];
    return caml_call1(return$1, caml_call1(value_exn, x));
   }
   function any_unit(ts){
    return caml_call2(Core_List[23], ts, is_determined)
            ? unit
            : caml_call1(Async_kernel_Deferred[24], ts);
   }
   var
    symbol_bind$0 = Monad_infix[1],
    symbol_map$0 = Monad_infix[2],
    Infix = [0, symbol_bind$0, symbol_map$0, upon],
    _a_ = [0, 0],
    _b_ = [0, 0];
   function repeat_until_finished(state, f){
    return caml_call1
            (create,
             function(finished){
              function loop(state){
               var _y_ = caml_call1(f, state);
               return caml_call2
                       (Infix[3],
                        _y_,
                        function(param){
                         if(990972795 <= param[1]){
                          var state = param[2];
                          return loop(state);
                         }
                         var result = param[2];
                         return caml_call2(Async_kernel_Ivar[14], finished, result);
                        });
              }
              return loop(state);
             });
   }
   function foldi(t, init, f){
    return caml_call1
            (create,
             function(result){
              function loop(t, i, b){
               if(! t) return caml_call2(Async_kernel_Ivar[14], result, b);
               var xs = t[2], x = t[1], _x_ = caml_call3(f, i, b, x);
               return caml_call2
                       (Infix[3], _x_, function(b){return loop(xs, i + 1 | 0, b);});
              }
              return loop(t, 0, init);
             });
   }
   function fold(t, init, f){
    return foldi(t, init, function(param, a, x){return caml_call2(f, a, x);});
   }
   function seqmapi(t, f){
    var
     _u_ = Core_List[57],
     _v_ =
       foldi
        (t,
         0,
         function(i, bs, a){
          var _w_ = caml_call2(f, i, a);
          return caml_call2
                  (Let_syntax[4][3], _w_, function(b){return [0, b, bs];});
         });
    return caml_call2(Let_syntax[3], _v_, _u_);
   }
   function all$0(ds){return seqmapi(ds, function(param, x){return x;});}
   function all_unit(ds){
    return ignore_m(fold(ds, 0, function(param, d){return d;}));
   }
   function iteri(how, t, f){
    if(typeof how === "number" && -676829465 > how)
     return foldi(t, 0, function(i, param, x){return caml_call2(f, i, x);});
    var
     _s_ = caml_call2(Async_kernel_Throttle[11], how, f),
     _t_ = caml_call1(Core[261], _s_);
    return all_unit(caml_call2(Core_List[41], t, _t_));
   }
   function mapi(how, t, f){
    if(typeof how === "number" && -676829465 > how) return seqmapi(t, f);
    var
     _q_ = caml_call2(Async_kernel_Throttle[11], how, f),
     _r_ = caml_call1(Core[261], _q_);
    return all$0(caml_call2(Core_List[41], t, _r_));
   }
   function filteri(how, t, f){
    var _o_ = mapi(how, t, f);
    return caml_call2
            (Let_syntax[4][3],
             _o_,
             function(bools){
              var
               _p_ =
                 caml_call4
                  (Core_List[65],
                   t,
                   bools,
                   0,
                   function(ac, x, b){return b ? [0, x, ac] : ac;});
              return caml_call1(Core_List[57], _p_);
             });
   }
   function filter_mapi(how, t, f){
    var _m_ = Core_List[129], _n_ = mapi(how, t, f);
    return caml_call2(Let_syntax[3], _n_, _m_);
   }
   function concat_mapi(how, t, f){
    var _k_ = Core_List[10], _l_ = mapi(how, t, f);
    return caml_call2(Let_syntax[3], _l_, _k_);
   }
   function find_mapi(t, f){
    function find_mapi(t, f, i){
     if(! t) return caml_call1(Let_syntax[1], 0);
     var tl = t[2], hd = t[1], _j_ = caml_call2(f, i, hd);
     return caml_call2
             (Let_syntax[4][2],
              _j_,
              function(some){
               return some
                       ? caml_call1(Let_syntax[1], some)
                       : find_mapi(tl, f, i + 1 | 0);
              });
    }
    return find_mapi(t, f, 0);
   }
   function findi(t, f){
    return find_mapi
            (t,
             function(i, elt){
              var _i_ = caml_call2(f, i, elt);
              return caml_call2
                      (Let_syntax[4][3],
                       _i_,
                       function(b){return b ? [0, [0, i, elt]] : 0;});
             });
   }
   function find(t, f){
    return find_mapi
            (t,
             function(param, elt){
              var _h_ = caml_call1(f, elt);
              return caml_call2
                      (Let_syntax[4][3],
                       _h_,
                       function(param){return param ? [0, elt] : 0;});
             });
   }
   function existsi(t, f){
    var
     _f_ =
       find_mapi
        (t,
         function(i, elt){
          var _g_ = caml_call2(f, i, elt);
          return caml_call2
                  (Let_syntax[4][3], _g_, function(b){return b ? _a_ : 0;});
         });
    return caml_call2
            (Let_syntax[4][3], _f_, function(param){return param ? 1 : 0;});
   }
   function for_alli(t, f){
    var
     _d_ =
       find_mapi
        (t,
         function(i, elt){
          var _e_ = caml_call2(f, i, elt);
          return caml_call2
                  (Let_syntax[4][3], _e_, function(b){return b ? 0 : _b_;});
         });
    return caml_call2
            (Let_syntax[4][3], _d_, function(param){return param ? 0 : 1;});
   }
   function iter(how, t, f){
    return iteri(how, t, function(param, a){return caml_call1(f, a);});
   }
   function map$1(how, t, f){
    return mapi(how, t, function(param, a){return caml_call1(f, a);});
   }
   function filter(how, t, f){
    return filteri(how, t, function(param, a){return caml_call1(f, a);});
   }
   function filter_map(how, t, f){
    return filter_mapi(how, t, function(param, a){return caml_call1(f, a);});
   }
   function concat_map(how, t, f){
    return concat_mapi(how, t, function(param, a){return caml_call1(f, a);});
   }
   function find_map(t, f){
    return find_mapi(t, function(param, a){return caml_call1(f, a);});
   }
   function exists(t, f){
    return existsi(t, function(param, a){return caml_call1(f, a);});
   }
   function for_all(t, f){
    return for_alli(t, function(param, a){return caml_call1(f, a);});
   }
   function init(how, n, f){
    return map$1
            (how, caml_call2(Core_List[40], n, function(_c_){return _c_;}), f);
   }
   var
    List =
      [0,
       foldi,
       fold,
       seqmapi,
       all$0,
       all_unit,
       iteri,
       mapi,
       filteri,
       filter_mapi,
       concat_mapi,
       find_mapi,
       findi,
       find,
       existsi,
       for_alli,
       iter,
       map$1,
       filter,
       filter_map,
       concat_map,
       find_map,
       exists,
       for_all,
       init],
    all_unit$0 = List[5];
   caml_call1(Ppx_inline_test_lib[6], cst_eager_deferred);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Eager_deferred_Eager_defer);
   var
    Eager_deferred_Eager_deferred0 =
      [0,
       T,
       sexp_of_t$0,
       symbol_bind,
       symbol_map,
       Monad_infix,
       bind$0,
       return$1,
       map$0,
       join,
       all,
       Let_syntax,
       create,
       don_t_wait_for,
       invariant,
       is_determined,
       never,
       peek,
       unit,
       value_exn,
       upon,
       both,
       ok,
       ignore_m,
       any,
       any_unit,
       Infix,
       repeat_until_finished,
       List,
       all_unit$0];
   runtime.caml_register_global
    (19, Eager_deferred_Eager_deferred0, cst_Eager_deferred_Eager_defer);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Eager_deferred__Eager_deferred_result
//# unitInfo: Requires: Base__Monad, Core__Printf, Core__Result, Eager_deferred__Eager_deferred0, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Eager_deferred_Eager_defer = "Eager_deferred__Eager_deferred_result",
    cst_eager_deferred = "eager_deferred";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_Result = global_data.Core__Result,
    Eager_deferred_Eager_deferred0 =
      global_data.Eager_deferred__Eager_deferred0,
    Core_Printf = global_data.Core__Printf,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Base_Monad = global_data.Base__Monad;
   caml_call1(Ppx_module_timer_runtime[4], cst_Eager_deferred_Eager_defer);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_eager_deferred);
   caml_call1
    (Expect_test_collector[6][1],
     "eager_deferred/src/eager_deferred_result.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_eager_deferred, "eager_deferred_result.ml");
   var T = [0];
   function combine(t1, t2, ok, err){
    var _a_ = caml_call2(Eager_deferred_Eager_deferred0[11][4][4], t1, t2);
    return caml_call2
            (Eager_deferred_Eager_deferred0[11][4][3],
             _a_,
             function(param){
              var t2 = param[2], t1 = param[1];
              return caml_call4(Core_Result[41], t1, t2, ok, err);
             });
   }
   function return$0(a){
    return caml_call1(Eager_deferred_Eager_deferred0[7], [0, a]);
   }
   function bind(t, f){
    return caml_call2
            (Eager_deferred_Eager_deferred0[6],
             t,
             function(error){
              if(0 !== error[0])
               return caml_call1(Eager_deferred_Eager_deferred0[7], error);
              var a = error[1];
              return caml_call1(f, a);
             });
   }
   var
    map =
      [0,
       -198771759,
       function(t, f){
        return caml_call2
                (Eager_deferred_Eager_deferred0[8],
                 t,
                 function(r){return caml_call2(Core_Result[39], r, f);});
       }],
    include = caml_call1(Base_Monad[2], [0, bind, map, return$0]),
    symbol_bind = include[1],
    symbol_map = include[2],
    Let_syntax = include[3],
    Monad_infix = include[4],
    bind$0 = include[5],
    return$1 = include[6],
    map$0 = include[7],
    join = include[8],
    ignore_m = include[9],
    all = include[10],
    all_unit = include[11];
   function fail(x){
    return caml_call1(Eager_deferred_Eager_deferred0[7], [1, x]);
   }
   function failf(format){return caml_call2(Core_Printf[4], fail, format);}
   function map_error(t, f){
    return caml_call2
            (Eager_deferred_Eager_deferred0[8],
             t,
             function(r){return caml_call2(Core_Result[40], r, f);});
   }
   caml_call1(Ppx_inline_test_lib[6], cst_eager_deferred);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Eager_deferred_Eager_defer);
   var
    Eager_deferred_Eager_deferred_ =
      [0,
       T,
       combine,
       symbol_bind,
       symbol_map,
       Let_syntax,
       Monad_infix,
       bind$0,
       return$1,
       map$0,
       join,
       ignore_m,
       all,
       all_unit,
       fail,
       failf,
       map_error];
   runtime.caml_register_global
    (15, Eager_deferred_Eager_deferred_, cst_Eager_deferred_Eager_defer);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Eager_deferred__Eager_deferred_or_error
//# unitInfo: Requires: Async_kernel__Monitor, Async_kernel__Throttle, Base__Applicative, Core, Core__Error, Core__List, Core__Or_error, Core__Result, Eager_deferred__Eager_deferred0, Eager_deferred__Eager_deferred_result, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Eager_deferred_Eager_defer = "Eager_deferred__Eager_deferred_or_error",
    cst_eager_deferred = "eager_deferred";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_List = global_data.Core__List,
    Async_kernel_Throttle = global_data.Async_kernel__Throttle,
    Core = global_data.Core,
    Core_Or_error = global_data.Core__Or_error,
    Eager_deferred_Eager_deferred0 =
      global_data.Eager_deferred__Eager_deferred0,
    Core_Error = global_data.Core__Error,
    Core_Result = global_data.Core__Result,
    Eager_deferred_Eager_deferred_ =
      global_data.Eager_deferred__Eager_deferred_result,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Base_Applicative = global_data.Base__Applicative;
   caml_call1(Ppx_module_timer_runtime[4], cst_Eager_deferred_Eager_defer);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_eager_deferred);
   caml_call1
    (Expect_test_collector[6][1],
     "eager_deferred/src/eager_deferred_or_error.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_eager_deferred, "eager_deferred_or_error.ml");
   var
    ignore_m = Eager_deferred_Eager_deferred_[11],
    join = Eager_deferred_Eager_deferred_[10],
    return$0 = Eager_deferred_Eager_deferred_[8],
    bind = Eager_deferred_Eager_deferred_[7],
    Monad_infix = Eager_deferred_Eager_deferred_[6],
    symbol_bind = Eager_deferred_Eager_deferred_[3];
   function apply(f, x){
    return caml_call4
            (Eager_deferred_Eager_deferred_[2],
             f,
             x,
             function(f, x){return caml_call1(f, x);},
             function(e1, e2){
              return caml_call2(Core_Error[24], 0, [0, e1, [0, e2, 0]]);
             });
   }
   var
    map = [0, -198771759, Eager_deferred_Eager_deferred_[9]],
    include = caml_call1(Base_Applicative[6], [0, return$0, apply, map]),
    return$1 = include[1],
    map$0 = include[2],
    both = include[3],
    symbol_map = include[7],
    all = include[11],
    all_unit = include[12],
    symbol_bind$0 = Monad_infix[1],
    symbol_map$0 = Monad_infix[2],
    Open_on_rhs = [0];
   function fail(error){
    var _J_ = caml_call1(Core_Result[28], error);
    return caml_call1(Eager_deferred_Eager_deferred0[7], _J_);
   }
   function ok_exn(t){
    return caml_call2(Eager_deferred_Eager_deferred0[8], t, Core_Or_error[36]);
   }
   function of_exn(backtrace, exn){
    var _I_ = caml_call2(Core_Or_error[37], backtrace, exn);
    return caml_call1(Eager_deferred_Eager_deferred0[7], _I_);
   }
   function of_exn_result(backtrace, t){
    var _H_ = caml_call1(Core_Or_error[38], backtrace);
    return caml_call2(Eager_deferred_Eager_deferred0[8], t, _H_);
   }
   function error(msg, v, sexp_of){
    var _G_ = caml_call5(Core_Or_error[39], 0, 0, msg, v, sexp_of);
    return caml_call1(Eager_deferred_Eager_deferred0[7], _G_);
   }
   function error_s(sexp){
    var _F_ = caml_call1(Core_Or_error[40], sexp);
    return caml_call1(Eager_deferred_Eager_deferred0[7], _F_);
   }
   function error_string(msg){
    var _E_ = caml_call1(Core_Or_error[41], msg);
    return caml_call1(Eager_deferred_Eager_deferred0[7], _E_);
   }
   function errorf(format){
    return caml_call2(Core[248], error_string, format);
   }
   function tag(t, tag){
    var _C_ = Core_Or_error[43];
    return caml_call2
            (Eager_deferred_Eager_deferred0[8],
             t,
             function(_D_){return caml_call2(_C_, _D_, tag);});
   }
   function tag_s(t, tag){
    var _A_ = Core_Or_error[44];
    return caml_call2
            (Eager_deferred_Eager_deferred0[8],
             t,
             function(_B_){return caml_call2(_A_, _B_, tag);});
   }
   function tag_s_lazy(t, tag){
    var _y_ = Core_Or_error[45];
    return caml_call2
            (Eager_deferred_Eager_deferred0[8],
             t,
             function(_z_){return caml_call2(_y_, _z_, tag);});
   }
   function tag_arg(t, message, a, sexp_of_a){
    return caml_call2
            (Eager_deferred_Eager_deferred0[8],
             t,
             function(t){
              return caml_call4(Core_Or_error[46], t, message, a, sexp_of_a);
             });
   }
   function unimplemented(msg){
    var _x_ = caml_call1(Core_Or_error[47], msg);
    return caml_call1(Eager_deferred_Eager_deferred0[7], _x_);
   }
   function combine_errors(l){
    var
     _v_ = Core_Or_error[51],
     _w_ = caml_call1(Eager_deferred_Eager_deferred0[10], l);
    return caml_call2(Eager_deferred_Eager_deferred0[8], _w_, _v_);
   }
   function combine_errors_unit(l){
    var
     _t_ = Core_Or_error[52],
     _u_ = caml_call1(Eager_deferred_Eager_deferred0[10], l);
    return caml_call2(Eager_deferred_Eager_deferred0[8], _u_, _t_);
   }
   function filter_ok_at_least_one(l){
    var
     _r_ = Core_Or_error[53],
     _s_ = caml_call1(Eager_deferred_Eager_deferred0[10], l);
    return caml_call2(Eager_deferred_Eager_deferred0[8], _s_, _r_);
   }
   function find_map_ok(l, f){
    return caml_call2
            (Eager_deferred_Eager_deferred0[27],
             [0, l, 0],
             function(param){
              var errors = param[2], l = param[1];
              if(l){
               var tl = l[2], hd = l[1], _p_ = caml_call1(f, hd);
               return caml_call2
                       (Eager_deferred_Eager_deferred0[8],
                        _p_,
                        function(param){
                         if(0 === param[0]){
                          var result = param[1];
                          return [0, -289386606, [0, result]];
                         }
                         var current_error = param[1];
                         return [0, 990972795, [0, tl, [0, current_error, errors]]];
                        });
              }
              var
               _q_ = caml_call1(Core_List[57], errors),
               errors$0 = caml_call2(Core_Error[24], 0, _q_);
              return caml_call1
                      (Eager_deferred_Eager_deferred0[7],
                       [0, -289386606, [1, errors$0]]);
             });
   }
   var ok_unit = caml_call1(return$1, 0), _a_ = [0, 0], _b_ = [0, 0];
   function try_with(extract_exn, run$0, rest, here, name, f){
    function _m_(ok){
     if(0 === ok[0]) return ok;
     var exn = ok[1];
     return [1, caml_call2(Core_Error[25], 0, exn)];
    }
    var
     _n_ = 0,
     run = run$0 ? run$0[1] : 3903734,
     _o_ =
       caml_call2
        (caml_call5
          (Async_kernel_Monitor[16], here, _n_, name, extract_exn, [0, run]),
         rest,
         f);
    return caml_call2(Eager_deferred_Eager_deferred0[8], _o_, _m_);
   }
   function try_with_join(extract_exn, run, rest, here, name, f){
    var
     _k_ = Core_Or_error[27],
     _l_ = try_with(extract_exn, run, rest, here, name, f);
    return caml_call2(Eager_deferred_Eager_deferred0[8], _l_, _k_);
   }
   function foldi(list, acc, f){
    function loop(i, acc, param){
     if(! param) return caml_call1(return$1, acc);
     var tl = param[2], hd = param[1];
     return caml_call2
             (bind,
              caml_call3(f, i, acc, hd),
              function(acc){return loop(i + 1 | 0, acc, tl);});
    }
    return loop(0, acc, list);
   }
   function fold(t, init, f){
    return foldi(t, init, function(param, a, x){return caml_call2(f, a, x);});
   }
   function iteri(how, t, f){
    if(typeof how === "number" && -676829465 > how)
     return foldi(t, 0, function(i, param, x){return caml_call2(f, i, x);});
    var
     _i_ = caml_call2(Async_kernel_Throttle[11], how, f),
     _j_ = caml_call1(Core[261], _i_);
    return caml_call1(all_unit, caml_call2(Core_List[41], t, _j_));
   }
   function mapi(how, t, f){
    if(typeof how === "number" && -676829465 > how){
     var _f_ = Core_List[57];
     return caml_call2
             (symbol_map$0,
              foldi
               (t,
                0,
                function(i, bs, a){
                 return caml_call2
                         (map$0,
                          caml_call2(f, i, a),
                          function(b){return [0, b, bs];});
                }),
              _f_);
    }
    var
     _g_ = caml_call2(Async_kernel_Throttle[11], how, f),
     _h_ = caml_call1(Core[261], _g_);
    return caml_call1(all, caml_call2(Core_List[41], t, _h_));
   }
   function filter_mapi(how, t, f){
    var _e_ = Core_List[129];
    return caml_call2(symbol_map$0, mapi(how, t, f), _e_);
   }
   function concat_mapi(how, t, f){
    var _d_ = Core_List[10];
    return caml_call2(symbol_map$0, mapi(how, t, f), _d_);
   }
   function filteri(how, t, f){
    return filter_mapi
            (how,
             t,
             function(i, x){
              return caml_call2
                      (map$0,
                       caml_call2(f, i, x),
                       function(b){return b ? [0, x] : 0;});
             });
   }
   function find_mapi(t, f){
    function find_mapi(t, f, i){
     if(! t) return caml_call1(return$1, 0);
     var tl = t[2], hd = t[1];
     return caml_call2
             (bind,
              caml_call2(f, i, hd),
              function(some){
               return some
                       ? caml_call1(return$1, some)
                       : find_mapi(tl, f, i + 1 | 0);
              });
    }
    return find_mapi(t, f, 0);
   }
   function findi(t, f){
    return find_mapi
            (t,
             function(i, elt){
              return caml_call2
                      (map$0,
                       caml_call2(f, i, elt),
                       function(b){return b ? [0, [0, i, elt]] : 0;});
             });
   }
   function find(t, f){
    return find_mapi
            (t,
             function(param, elt){
              return caml_call2
                      (map$0,
                       caml_call1(f, elt),
                       function(b){return b ? [0, elt] : 0;});
             });
   }
   function existsi(t, f){
    return caml_call2
            (map$0,
             find_mapi
              (t,
               function(i, elt){
                return caml_call2
                        (map$0,
                         caml_call2(f, i, elt),
                         function(b){return b ? _a_ : 0;});
               }),
             function(param){return param ? 1 : 0;});
   }
   function for_alli(t, f){
    return caml_call2
            (map$0,
             find_mapi
              (t,
               function(i, elt){
                return caml_call2
                        (map$0,
                         caml_call2(f, i, elt),
                         function(b){return b ? 0 : _b_;});
               }),
             function(param){return param ? 0 : 1;});
   }
   function iter(how, t, f){
    return iteri(how, t, function(param, a){return caml_call1(f, a);});
   }
   function map$1(how, t, f){
    return mapi(how, t, function(param, a){return caml_call1(f, a);});
   }
   function filter(how, t, f){
    return filteri(how, t, function(param, a){return caml_call1(f, a);});
   }
   function filter_map(how, t, f){
    return filter_mapi(how, t, function(param, a){return caml_call1(f, a);});
   }
   function concat_map(how, t, f){
    return concat_mapi(how, t, function(param, a){return caml_call1(f, a);});
   }
   function find_map(t, f){
    return find_mapi(t, function(param, a){return caml_call1(f, a);});
   }
   function exists(t, f){
    return existsi(t, function(param, a){return caml_call1(f, a);});
   }
   function for_all(t, f){
    return for_alli(t, function(param, a){return caml_call1(f, a);});
   }
   function init(how, n, f){
    return map$1
            (how, caml_call2(Core_List[40], n, function(_c_){return _c_;}), f);
   }
   function repeat_until_finished(state, f){
    return caml_call2
            (bind,
             caml_call1(f, state),
             function(param){
              if(990972795 <= param[1]){
               var state = param[2];
               return repeat_until_finished(state, f);
              }
              var state$0 = param[2];
              return caml_call1(return$1, state$0);
             });
   }
   caml_call1(Ppx_inline_test_lib[6], cst_eager_deferred);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Eager_deferred_Eager_defer);
   var
    Eager_deferred_Eager_deferred_$0 =
      [0,
       symbol_bind,
       symbol_map,
       Monad_infix,
       bind,
       return$1,
       map$0,
       join,
       ignore_m,
       all,
       all_unit,
       [0,
        return$1,
        symbol_bind$0,
        symbol_map$0,
        [0, return$1, bind, map$0, both, Open_on_rhs]],
       fail,
       ok_unit,
       ok_exn,
       of_exn,
       of_exn_result,
       error,
       error_s,
       error_string,
       errorf,
       tag,
       tag_s,
       tag_s_lazy,
       tag_arg,
       unimplemented,
       find_map_ok,
       try_with,
       try_with_join,
       combine_errors,
       combine_errors_unit,
       filter_ok_at_least_one,
       [0,
        foldi,
        fold,
        find,
        findi,
        find_map,
        find_mapi,
        exists,
        existsi,
        for_all,
        for_alli,
        all,
        all_unit,
        init,
        iter,
        iteri,
        map$1,
        mapi,
        filter,
        filteri,
        filter_map,
        filter_mapi,
        concat_map,
        concat_mapi],
       repeat_until_finished];
   runtime.caml_register_global
    (23, Eager_deferred_Eager_deferred_$0, cst_Eager_deferred_Eager_defer);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Eager_deferred__Eager_deferred_memo
//# unitInfo: Requires: Async_kernel__Deferred_memo, Eager_deferred__Eager_deferred0, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Eager_deferred_Eager_defer = "Eager_deferred__Eager_deferred_memo",
    cst_eager_deferred = "eager_deferred";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Eager_deferred_Eager_deferred0 =
      global_data.Eager_deferred__Eager_deferred0,
    Async_kernel_Deferred_memo = global_data.Async_kernel__Deferred_memo;
   caml_call1(Ppx_module_timer_runtime[4], cst_Eager_deferred_Eager_defer);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_eager_deferred);
   caml_call1
    (Expect_test_collector[6][1], "eager_deferred/src/eager_deferred_memo.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_eager_deferred, "eager_deferred_memo.ml");
   var
    include =
      caml_call1
       (Async_kernel_Deferred_memo[1],
        [0,
         Eager_deferred_Eager_deferred0[3],
         Eager_deferred_Eager_deferred0[4]]),
    general = include[1],
    recursive = include[2],
    unit = include[3];
   caml_call1(Ppx_inline_test_lib[6], cst_eager_deferred);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Eager_deferred_Eager_defer);
   var Eager_deferred_Eager_deferred_ = [0, general, recursive, unit];
   runtime.caml_register_global
    (13, Eager_deferred_Eager_deferred_, cst_Eager_deferred_Eager_defer);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Eager_deferred__Eager_deferred_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Eager_deferred_Eager_defer = "Eager_deferred__Eager_deferred_intf",
    cst_eager_deferred = "eager_deferred";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Eager_deferred_Eager_defer);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_eager_deferred);
   caml_call1
    (Expect_test_collector[6][1], "eager_deferred/src/eager_deferred_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_eager_deferred, "eager_deferred_intf.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_eager_deferred);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Eager_deferred_Eager_defer);
   var Eager_deferred_Eager_deferred_ = [0];
   runtime.caml_register_global
    (11, Eager_deferred_Eager_deferred_, cst_Eager_deferred_Eager_defer);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Eager_deferred__Eager_deferred1
//# unitInfo: Requires: Eager_deferred__Eager_deferred0, Eager_deferred__Eager_deferred_memo, Eager_deferred__Eager_deferred_or_error, Eager_deferred__Eager_deferred_result, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Eager_deferred_Eager_defer = "Eager_deferred__Eager_deferred1",
    cst_eager_deferred = "eager_deferred";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Eager_deferred_Eager_deferred0 =
      global_data.Eager_deferred__Eager_deferred0,
    Eager_deferred_Eager_deferred_ =
      global_data.Eager_deferred__Eager_deferred_result,
    Eager_deferred_Eager_deferred_$0 =
      global_data.Eager_deferred__Eager_deferred_memo,
    Eager_deferred_Eager_deferred_$1 =
      global_data.Eager_deferred__Eager_deferred_or_error;
   caml_call1(Ppx_module_timer_runtime[4], cst_Eager_deferred_Eager_defer);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_eager_deferred);
   caml_call1
    (Expect_test_collector[6][1], "eager_deferred/src/eager_deferred1.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_eager_deferred, "eager_deferred1.ml");
   var
    symbol_bind = Eager_deferred_Eager_deferred0[3],
    symbol_map = Eager_deferred_Eager_deferred0[4],
    Monad_infix = Eager_deferred_Eager_deferred0[5],
    bind = Eager_deferred_Eager_deferred0[6],
    return$0 = Eager_deferred_Eager_deferred0[7],
    map = Eager_deferred_Eager_deferred0[8],
    join = Eager_deferred_Eager_deferred0[9],
    all = Eager_deferred_Eager_deferred0[10],
    Let_syntax = Eager_deferred_Eager_deferred0[11],
    create = Eager_deferred_Eager_deferred0[12],
    don_t_wait_for = Eager_deferred_Eager_deferred0[13],
    invariant = Eager_deferred_Eager_deferred0[14],
    is_determined = Eager_deferred_Eager_deferred0[15],
    never = Eager_deferred_Eager_deferred0[16],
    peek = Eager_deferred_Eager_deferred0[17],
    unit = Eager_deferred_Eager_deferred0[18],
    value_exn = Eager_deferred_Eager_deferred0[19],
    upon = Eager_deferred_Eager_deferred0[20],
    both = Eager_deferred_Eager_deferred0[21],
    ok = Eager_deferred_Eager_deferred0[22],
    ignore_m = Eager_deferred_Eager_deferred0[23],
    any = Eager_deferred_Eager_deferred0[24],
    any_unit = Eager_deferred_Eager_deferred0[25],
    Infix = Eager_deferred_Eager_deferred0[26],
    repeat_until_finished = Eager_deferred_Eager_deferred0[27],
    List = Eager_deferred_Eager_deferred0[28],
    all_unit = Eager_deferred_Eager_deferred0[29];
   caml_call1(Ppx_inline_test_lib[6], cst_eager_deferred);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Eager_deferred_Eager_defer);
   var
    Eager_deferred_Eager_deferred1 =
      [0,
       invariant,
       symbol_bind,
       symbol_map,
       Monad_infix,
       bind,
       return$0,
       map,
       join,
       ignore_m,
       all,
       all_unit,
       Let_syntax,
       Infix,
       any,
       any_unit,
       both,
       create,
       don_t_wait_for,
       is_determined,
       never,
       ok,
       peek,
       unit,
       upon,
       value_exn,
       repeat_until_finished,
       [0,
        List[1],
        List[2],
        List[13],
        List[12],
        List[21],
        List[11],
        List[22],
        List[14],
        List[23],
        List[15],
        List[4],
        List[5],
        List[24],
        List[16],
        List[6],
        List[17],
        List[7],
        List[18],
        List[8],
        List[19],
        List[9],
        List[20],
        List[10]],
       Eager_deferred_Eager_deferred_$1,
       Eager_deferred_Eager_deferred_$0,
       [0,
        Eager_deferred_Eager_deferred_[3],
        Eager_deferred_Eager_deferred_[4],
        Eager_deferred_Eager_deferred_[5],
        Eager_deferred_Eager_deferred_[6],
        Eager_deferred_Eager_deferred_[7],
        Eager_deferred_Eager_deferred_[8],
        Eager_deferred_Eager_deferred_[9],
        Eager_deferred_Eager_deferred_[10],
        Eager_deferred_Eager_deferred_[11],
        Eager_deferred_Eager_deferred_[12],
        Eager_deferred_Eager_deferred_[13],
        Eager_deferred_Eager_deferred_[14],
        Eager_deferred_Eager_deferred_[15],
        Eager_deferred_Eager_deferred_[16],
        Eager_deferred_Eager_deferred_[2]]];
   runtime.caml_register_global
    (15, Eager_deferred_Eager_deferred1, cst_Eager_deferred_Eager_defer);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Eager_deferred
//# unitInfo: Requires: Async_kernel__Deferred, Eager_deferred__Eager_deferred1, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Eager_deferred = "Eager_deferred",
    cst_eager_deferred = "eager_deferred";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Eager_deferred_Eager_deferred1 =
      global_data.Eager_deferred__Eager_deferred1,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred;
   caml_call1(Ppx_module_timer_runtime[4], cst_Eager_deferred);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_eager_deferred);
   caml_call1
    (Expect_test_collector[6][1], "eager_deferred/src/eager_deferred.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_eager_deferred, "eager_deferred.ml");
   var
    invariant = Eager_deferred_Eager_deferred1[1],
    symbol_bind = Eager_deferred_Eager_deferred1[2],
    symbol_map = Eager_deferred_Eager_deferred1[3],
    Monad_infix = Eager_deferred_Eager_deferred1[4],
    bind = Eager_deferred_Eager_deferred1[5],
    return$0 = Eager_deferred_Eager_deferred1[6],
    map = Eager_deferred_Eager_deferred1[7],
    join = Eager_deferred_Eager_deferred1[8],
    ignore_m = Eager_deferred_Eager_deferred1[9],
    all = Eager_deferred_Eager_deferred1[10],
    all_unit = Eager_deferred_Eager_deferred1[11],
    Let_syntax = Eager_deferred_Eager_deferred1[12],
    Infix = Eager_deferred_Eager_deferred1[13],
    any = Eager_deferred_Eager_deferred1[14],
    any_unit = Eager_deferred_Eager_deferred1[15],
    both = Eager_deferred_Eager_deferred1[16],
    create = Eager_deferred_Eager_deferred1[17],
    don_t_wait_for = Eager_deferred_Eager_deferred1[18],
    is_determined = Eager_deferred_Eager_deferred1[19],
    never = Eager_deferred_Eager_deferred1[20],
    ok = Eager_deferred_Eager_deferred1[21],
    peek = Eager_deferred_Eager_deferred1[22],
    unit = Eager_deferred_Eager_deferred1[23],
    upon = Eager_deferred_Eager_deferred1[24],
    value_exn = Eager_deferred_Eager_deferred1[25],
    repeat_until_finished = Eager_deferred_Eager_deferred1[26],
    List = Eager_deferred_Eager_deferred1[27],
    Or_error = Eager_deferred_Eager_deferred1[28],
    Memo = Eager_deferred_Eager_deferred1[29],
    Result = Eager_deferred_Eager_deferred1[30],
    sexp_of_t = Async_kernel_Deferred[1],
    invariant$0 = Eager_deferred_Eager_deferred1[1],
    symbol_bind$0 = Eager_deferred_Eager_deferred1[2],
    symbol_map$0 = Eager_deferred_Eager_deferred1[3],
    Monad_infix$0 = Eager_deferred_Eager_deferred1[4],
    bind$0 = Eager_deferred_Eager_deferred1[5],
    return$1 = Eager_deferred_Eager_deferred1[6],
    map$0 = Eager_deferred_Eager_deferred1[7],
    join$0 = Eager_deferred_Eager_deferred1[8],
    ignore_m$0 = Eager_deferred_Eager_deferred1[9],
    all$0 = Eager_deferred_Eager_deferred1[10],
    all_unit$0 = Eager_deferred_Eager_deferred1[11],
    Let_syntax$0 = Eager_deferred_Eager_deferred1[12],
    Infix$0 = Eager_deferred_Eager_deferred1[13],
    any$0 = Eager_deferred_Eager_deferred1[14],
    any_unit$0 = Eager_deferred_Eager_deferred1[15],
    both$0 = Eager_deferred_Eager_deferred1[16],
    create$0 = Eager_deferred_Eager_deferred1[17],
    don_t_wait_for$0 = Eager_deferred_Eager_deferred1[18],
    is_determined$0 = Eager_deferred_Eager_deferred1[19],
    never$0 = Eager_deferred_Eager_deferred1[20],
    ok$0 = Eager_deferred_Eager_deferred1[21],
    peek$0 = Eager_deferred_Eager_deferred1[22],
    unit$0 = Eager_deferred_Eager_deferred1[23],
    upon$0 = Eager_deferred_Eager_deferred1[24],
    value_exn$0 = Eager_deferred_Eager_deferred1[25],
    repeat_until_finished$0 = Eager_deferred_Eager_deferred1[26],
    List$0 = Eager_deferred_Eager_deferred1[27],
    Or_error$0 = Eager_deferred_Eager_deferred1[28],
    Memo$0 = Eager_deferred_Eager_deferred1[29],
    Result$0 = Eager_deferred_Eager_deferred1[30],
    Deferred =
      [0,
       sexp_of_t,
       invariant$0,
       symbol_bind$0,
       symbol_map$0,
       Monad_infix$0,
       bind$0,
       return$1,
       map$0,
       join$0,
       ignore_m$0,
       all$0,
       all_unit$0,
       Let_syntax$0,
       Infix$0,
       any$0,
       any_unit$0,
       both$0,
       create$0,
       don_t_wait_for$0,
       is_determined$0,
       never$0,
       ok$0,
       peek$0,
       unit$0,
       upon$0,
       value_exn$0,
       repeat_until_finished$0,
       List$0,
       Or_error$0,
       Memo$0,
       Result$0],
    include = Eager_deferred_Eager_deferred1[12],
    return$2 = include[1],
    symbol_bind$1 = include[2],
    symbol_map$1 = include[3],
    Let_syntax$1 = include[4],
    upon$1 = Eager_deferred_Eager_deferred1[24],
    symbol = Eager_deferred_Eager_deferred1[13][3];
   function symbol$0(x, f){
    return caml_call2
            (symbol_bind$1,
             x,
             function(error){
              if(0 !== error[0]) return caml_call1(return$2, error);
              var v = error[1];
              return caml_call1(f, v);
             });
   }
   function symbol$1(x, f){
    return caml_call2
            (symbol_map$1,
             x,
             function(error){
              if(0 !== error[0]) return error;
              var v = error[1];
              return [0, caml_call1(f, v)];
             });
   }
   var
    Use =
      [0,
       Deferred,
       return$2,
       symbol_bind$1,
       symbol_map$1,
       Let_syntax$1,
       upon$1,
       symbol,
       symbol$0,
       symbol$1];
   caml_call1(Ppx_inline_test_lib[6], cst_eager_deferred);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Eager_deferred);
   var
    Eager_deferred =
      [0,
       invariant,
       symbol_bind,
       symbol_map,
       Monad_infix,
       bind,
       return$0,
       map,
       join,
       ignore_m,
       all,
       all_unit,
       Let_syntax,
       Infix,
       any,
       any_unit,
       both,
       create,
       don_t_wait_for,
       is_determined,
       never,
       ok,
       peek,
       unit,
       upon,
       value_exn,
       repeat_until_finished,
       List,
       Or_error,
       Memo,
       Result,
       Use];
   runtime.caml_register_global(13, Eager_deferred, cst_Eager_deferred);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
