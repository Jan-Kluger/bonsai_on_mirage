// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Diffable__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Diffable = [0];
   runtime.caml_register_global(0, Diffable, "Diffable__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Diffable__Atomic
//# unitInfo: Requires: Bin_prot__Shape, Bin_shape, Core, Core__Int, Core__List, Core__Quickcheck, Expect_test_collector, Inline_test_config, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Diffable_Atomic = "Diffable__Atomic",
    cst_atomic_ml$1 = "atomic.ml",
    cst_diffable = "diffable",
    cst_t$3 = "t";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    pos$0 = "atomic.ml:94:25",
    pos = "atomic.ml:84:36",
    Core = global_data.Core,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Core_Int = global_data.Core__Int,
    Core_Quickcheck = global_data.Core__Quickcheck,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Inline_test_config = global_data.Inline_test_config,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_List = global_data.Core__List,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector;
   caml_call1(Ppx_module_timer_runtime[4], cst_Diffable_Atomic);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_diffable);
   caml_call1(Expect_test_collector[6][1], cst_atomic_ml$1);
   caml_call2(Ppx_inline_test_lib[5], cst_diffable, cst_atomic_ml$1);
   var
    cst_Invalid_of_diffs_input_Upd =
      "Invalid of_diffs input. Update.t for atomic must contain at least one element.",
    cst_t = cst_t$3,
    cst_atomic_ml_59_4 = "atomic.ml:59:4",
    cst_t$0 = cst_t$3,
    cst_t$1 = cst_t$3,
    cst_atomic_ml_73_6 = "atomic.ml:73:6",
    cst_t$2 = cst_t$3,
    cst_atomic_ml = cst_atomic_ml$1,
    cst_atomic_round_trip_works = "atomic round-trip works",
    cst_atomic_ml$0 = cst_atomic_ml$1,
    cst_atomic_diff_update_works = "atomic diff/update works",
    dummy = 0;
   function Make_plain(V){
    var sexp_of_t = V[1], Diff = [0, sexp_of_t];
    function sexp_of_t$0(x_001){return caml_call2(Core[431], Diff[1], x_001);}
    var Update = [0, Diff, sexp_of_t$0];
    function update(t, d){
     if(! d) return t;
     var t$0 = d[1];
     if(! d[2]) return t$0;
     var non_empty_tail = d[2];
     return caml_call1(Core_List[115], non_empty_tail);
    }
    function diffs(from, to){
     if(from !== to && ! caml_call2(V[2], from, to)) return [0, to, 0];
     return 0;
    }
    function to_diffs(t){return [0, t, 0];}
    function of_diffs(d){
     if(! d) return caml_call1(Core[5], cst_Invalid_of_diffs_input_Upd);
     var t = d[1];
     if(! d[2]) return t;
     var non_empty_tail = d[2];
     return caml_call1(Core_List[115], non_empty_tail);
    }
    return [0, Update, update, diffs, to_diffs, of_diffs];
   }
   function Make(V){
    var
     Plain = Make_plain([0, V[10], V[11]]),
     sexp_of_t = V[10],
     t_of_sexp = V[9],
     bin_t = V[8],
     bin_reader_t = V[7],
     bin_writer_t = V[6],
     bin_shape_t = V[5],
     bin_read_t = V[4],
     bin_read_t$0 = V[3],
     bin_write_t = V[2],
     bin_size_t = V[1],
     Diff =
       [0,
        bin_size_t,
        bin_write_t,
        bin_read_t$0,
        bin_read_t,
        bin_shape_t,
        bin_writer_t,
        bin_reader_t,
        bin_t,
        t_of_sexp,
        sexp_of_t],
     _j_ = caml_call1(Core[419], Diff[5]),
     _k_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _j_], 0],
     _l_ = caml_call1(Bin_shape[4][1], cst_atomic_ml_59_4),
     group = caml_call2(Bin_prot_Shape[2], _l_, _k_),
     _m_ = caml_call1(Bin_shape[2][1], cst_t$0),
     bin_shape_t$0 = caml_call1(caml_call2(Bin_prot_Shape[10], group, _m_), 0);
    function bin_size_t$0(v){return caml_call2(Core[420], Diff[1], v);}
    function bin_write_t$0(buf, pos, v){
     return caml_call4(Core[421], Diff[2], buf, pos, v);
    }
    var bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0];
    function bin_read_t$1(buf, pos_ref, vint){
     return caml_call3(caml_call1(Core[424], Diff[3]), buf, pos_ref, vint);
    }
    function bin_read_t$2(buf, pos_ref){
     return caml_call2(caml_call1(Core[423], Diff[3]), buf, pos_ref);
    }
    var
     bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
     bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0];
    function t_of_sexp$0(x_003){return caml_call2(Core[432], Diff[9], x_003);}
    function sexp_of_t$0(x_004){
     return caml_call2(Core[431], Diff[10], x_004);
    }
    var
     Update =
       [0,
        Diff,
        bin_shape_t$0,
        bin_size_t$0,
        bin_write_t$0,
        bin_writer_t$0,
        bin_read_t$1,
        bin_read_t$2,
        bin_reader_t$0,
        bin_t$0,
        t_of_sexp$0,
        sexp_of_t$0],
     of_diffs = Plain[5],
     to_diffs = Plain[4],
     diffs = Plain[3],
     update = Plain[2];
    return [0, , Update, update, diffs, to_diffs, of_diffs];
   }
   caml_call8
    (Ppx_inline_test_lib[9],
     Inline_test_config,
     "tests",
     0,
     cst_atomic_ml$1,
     70,
     0,
     829,
     function(param){
      var
       _d_ = Core[350],
       _e_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _d_], 0],
       _f_ = caml_call1(Bin_shape[4][1], cst_atomic_ml_73_6),
       group = caml_call2(Bin_prot_Shape[2], _f_, _e_),
       _g_ = caml_call1(Bin_shape[2][1], cst_t$2),
       bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _g_), 0),
       bin_size_t = Core[351],
       bin_write_t = Core[352],
       bin_writer_t = [0, bin_size_t, bin_write_t],
       bin_read_t = Core[355],
       bin_read_t$0 = Core[354],
       bin_reader_t = [0, bin_read_t$0, bin_read_t],
       bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
       equal = Core[359],
       t_of_sexp = Core[364],
       sexp_of_t = Core[363],
       include =
         Make
          ([0,
            bin_size_t,
            bin_write_t,
            bin_read_t$0,
            bin_read_t,
            bin_shape_t,
            bin_writer_t,
            bin_reader_t,
            bin_t,
            t_of_sexp,
            sexp_of_t,
            equal]),
       update = include[3],
       diffs = include[4],
       to_diffs = include[5],
       of_diffs = include[6];
      caml_call8
       (Ppx_inline_test_lib[8],
        Inline_test_config,
        cst_atomic_round_trip_works,
        0,
        cst_atomic_ml,
        79,
        4,
        247,
        function(param){
         caml_call9
          (Core_Quickcheck[12],
           0,
           0,
           0,
           [0, Core_Int[120]],
           0,
           [0, sexp_of_t],
           0,
           Core_Int[118],
           function(expect){
            var got = caml_call1(of_diffs, caml_call1(to_diffs, expect));
            function comparator(a_008, b_009){
             return caml_call2(Core[94], a_008, b_009);
            }
            return caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos,
                     sexp_of_t,
                     comparator,
                     0,
                     0,
                     0,
                     expect,
                     got);
           });
         return 0;
        });
      caml_call8
       (Ppx_inline_test_lib[8],
        Inline_test_config,
        cst_atomic_diff_update_works,
        0,
        cst_atomic_ml$0,
        87,
        4,
        398,
        function(param){
         var
          _h_ =
            caml_call2(Core_Quickcheck[1][38], Core_Int[118], Core_Int[118]),
          _i_ =
            [0,
             caml_call2(Core_Quickcheck[3][9], Core_Int[120], Core_Int[120])];
         caml_call9
          (Core_Quickcheck[12],
           0,
           0,
           0,
           _i_,
           0,
           [0,
            function(param){
             var
              arg1_011 = param[2],
              arg0_010 = param[1],
              res0_012 = caml_call1(sexp_of_t, arg0_010),
              res1_013 = caml_call1(sexp_of_t, arg1_011);
             return [1, [0, res0_012, [0, res1_013, 0]]];
            }],
           0,
           _h_,
           function(param){
            var
             expect = param[2],
             from = param[1],
             got = caml_call2(update, from, caml_call2(diffs, from, expect));
            function comparator(a_014, b_015){
             return caml_call2(Core[94], a_014, b_015);
            }
            return caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos$0,
                     sexp_of_t,
                     comparator,
                     0,
                     0,
                     0,
                     expect,
                     got);
           });
         return 0;
        });
      return 0;
     });
   caml_call1(Ppx_inline_test_lib[6], cst_diffable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Diffable_Atomic);
   var
    Diffable_Atomic =
      [0,
       function(_a_){
        var _b_ = Make(_a_), _c_ = _b_[2];
        return [0,
                [0,
                 _c_[1],
                 _c_[3],
                 _c_[4],
                 _c_[7],
                 _c_[6],
                 _c_[2],
                 _c_[5],
                 _c_[8],
                 _c_[9],
                 _c_[10],
                 _c_[11]],
                _b_[3],
                _b_[4],
                _b_[5],
                _b_[6]];
       },
       Make_plain];
   runtime.caml_register_global(34, Diffable_Atomic, cst_Diffable_Atomic);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Diffable__Diffable_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Diffable_Diffable_intf = "Diffable__Diffable_intf",
    cst_diffable = "diffable",
    cst_diffable_intf_ml = "diffable_intf.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Diffable_Diffable_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_diffable);
   caml_call1(Expect_test_collector[6][1], cst_diffable_intf_ml);
   caml_call2(Ppx_inline_test_lib[5], cst_diffable, cst_diffable_intf_ml);
   caml_call1(Ppx_inline_test_lib[6], cst_diffable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Diffable_Diffable_intf);
   var Diffable_Diffable_intf = [0];
   runtime.caml_register_global
    (11, Diffable_Diffable_intf, cst_Diffable_Diffable_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Diffable__Iso
//# unitInfo: Requires: Bin_prot__Shape, Bin_shape, Core, Core__Int, Core__Quickcheck, Diffable__Atomic, Expect_test_collector, Inline_test_config, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Diffable_Iso = "Diffable__Iso",
    cst_diffable = "diffable",
    cst_iso_ml$1 = "iso.ml",
    cst_t$1 = "t";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    pos$0 = "iso.ml:80:25",
    pos = "iso.ml:70:36",
    Core = global_data.Core,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Core_Int = global_data.Core__Int,
    Core_Quickcheck = global_data.Core__Quickcheck,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Diffable_Atomic = global_data.Diffable__Atomic,
    Inline_test_config = global_data.Inline_test_config,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector;
   caml_call1(Ppx_module_timer_runtime[4], cst_Diffable_Iso);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_diffable);
   caml_call1(Expect_test_collector[6][1], cst_iso_ml$1);
   caml_call2(Ppx_inline_test_lib[5], cst_diffable, cst_iso_ml$1);
   var
    cst_t = cst_t$1,
    cst_iso_ml_48_8 = "iso.ml:48:8",
    cst_t$0 = cst_t$1,
    cst_iso_ml = cst_iso_ml$1,
    cst_iso_round_trip_works = "iso round-trip works",
    cst_iso_ml$0 = cst_iso_ml$1,
    cst_iso_diff_update_works = "iso diff/update works",
    dummy = 0;
   function Make_plain(S, X){
    var Update = S[1];
    function update(t, diffs){
     var _o_ = caml_call1(X[2], t), _p_ = caml_call2(S[2], _o_, diffs);
     return caml_call1(X[1], _p_);
    }
    function diffs(from, to){
     var _m_ = caml_call1(X[2], to), _n_ = caml_call1(X[2], from);
     return caml_call2(S[3], _n_, _m_);
    }
    function to_diffs(t){
     var _l_ = caml_call1(X[2], t);
     return caml_call1(S[4], _l_);
    }
    function of_diffs(d){
     var _k_ = caml_call1(S[5], d);
     return caml_call1(X[1], _k_);
    }
    return [0, Update, update, diffs, to_diffs, of_diffs];
   }
   function Make(S, X){
    var
     _j_ = S[1],
     Plain =
       Make_plain
        ([0, [0, [0, _j_[1][10]], _j_[11]], S[2], S[3], S[4], S[5]], X),
     Update = S[1],
     of_diffs = Plain[5],
     to_diffs = Plain[4],
     diffs = Plain[3],
     update = Plain[2];
    return [0, , Update, update, diffs, to_diffs, of_diffs];
   }
   caml_call8
    (Ppx_inline_test_lib[9],
     Inline_test_config,
     "tests",
     0,
     cst_iso_ml$1,
     44,
     0,
     1083,
     function(param){
      var
       _d_ = Core[471],
       _e_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _d_], 0],
       _f_ = caml_call1(Bin_shape[4][1], cst_iso_ml_48_8),
       group = caml_call2(Bin_prot_Shape[2], _f_, _e_),
       _g_ = caml_call1(Bin_shape[2][1], cst_t$0),
       bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _g_), 0),
       bin_size_t = Core[472],
       bin_write_t = Core[473],
       bin_writer_t = [0, bin_size_t, bin_write_t],
       bin_read_t = Core[476],
       bin_read_t$0 = Core[475],
       bin_reader_t = [0, bin_read_t$0, bin_read_t],
       bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
       equal = Core[480],
       t_of_sexp = Core[485],
       sexp_of_t = Core[484],
       include =
         caml_call1
          (Diffable_Atomic[1],
           [0,
            bin_size_t,
            bin_write_t,
            bin_read_t$0,
            bin_read_t,
            bin_shape_t,
            bin_writer_t,
            bin_reader_t,
            bin_t,
            t_of_sexp,
            sexp_of_t,
            equal]),
       Update = include[1],
       update = include[2],
       diffs = include[3],
       to_diffs = include[4],
       of_diffs = include[5],
       sexp_of_t$0 = Core[363],
       forwards = Core_Int[83],
       backwards = Core_Int[84],
       include$0 =
         Make
          ([0, Update, update, diffs, to_diffs, of_diffs],
           [0, forwards, backwards]),
       update$0 = include$0[3],
       diffs$0 = include$0[4],
       to_diffs$0 = include$0[5],
       of_diffs$0 = include$0[6];
      caml_call8
       (Ppx_inline_test_lib[8],
        Inline_test_config,
        cst_iso_round_trip_works,
        0,
        cst_iso_ml,
        65,
        4,
        246,
        function(param){
         caml_call9
          (Core_Quickcheck[12],
           0,
           0,
           0,
           [0, Core_Int[120]],
           0,
           [0, sexp_of_t$0],
           0,
           Core_Int[118],
           function(expect){
            var
             got = caml_call1(of_diffs$0, caml_call1(to_diffs$0, expect)),
             sexpifier = Core[363];
            function comparator(a_005, b_006){
             return caml_call2(Core[358], a_005, b_006);
            }
            return caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos,
                     sexpifier,
                     comparator,
                     0,
                     0,
                     0,
                     expect,
                     got);
           });
         return 0;
        });
      caml_call8
       (Ppx_inline_test_lib[8],
        Inline_test_config,
        cst_iso_diff_update_works,
        0,
        cst_iso_ml$0,
        73,
        4,
        397,
        function(param){
         var
          _h_ =
            caml_call2(Core_Quickcheck[1][38], Core_Int[118], Core_Int[118]),
          _i_ =
            [0,
             caml_call2(Core_Quickcheck[3][9], Core_Int[120], Core_Int[120])];
         caml_call9
          (Core_Quickcheck[12],
           0,
           0,
           0,
           _i_,
           0,
           [0,
            function(param){
             var
              arg1_008 = param[2],
              arg0_007 = param[1],
              res0_009 = caml_call1(sexp_of_t$0, arg0_007),
              res1_010 = caml_call1(sexp_of_t$0, arg1_008);
             return [1, [0, res0_009, [0, res1_010, 0]]];
            }],
           0,
           _h_,
           function(param){
            var
             expect = param[2],
             from = param[1],
             got =
               caml_call2(update$0, from, caml_call2(diffs$0, from, expect)),
             sexpifier = Core[363];
            function comparator(a_011, b_012){
             return caml_call2(Core[358], a_011, b_012);
            }
            return caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos$0,
                     sexpifier,
                     comparator,
                     0,
                     0,
                     0,
                     expect,
                     got);
           });
         return 0;
        });
      return 0;
     });
   caml_call1(Ppx_inline_test_lib[6], cst_diffable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Diffable_Iso);
   var
    Diffable_Iso =
      [0,
       function(_b_, _a_){
        var _c_ = Make(_b_, _a_);
        return [0, _c_[2], _c_[3], _c_[4], _c_[5], _c_[6]];
       },
       Make_plain];
   runtime.caml_register_global(30, Diffable_Iso, cst_Diffable_Iso);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Diffable__Tuples
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Core, Core__Float, Core__Int, Core__List, Core__Quickcheck, Diffable__Atomic, Diffable__Iso, Expect_test_collector, Inline_test_config, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_A$0 = "A",
    cst_B$0 = "B",
    cst_Diffable_Tuples = "Diffable__Tuples",
    cst_a = "a",
    cst_b = "b",
    cst_diffable = "diffable",
    cst_t$7 = "t",
    cst_tuples_ml$1 = "tuples.ml",
    cst_tuples_ml_Make2_Update_Dif$0 = "tuples.ml.Make2.Update.Diff.t";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    pos$0 = "tuples.ml:245:25",
    pos = "tuples.ml:235:36",
    error_source_008 = cst_tuples_ml_Make2_Update_Dif$0,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Core_Quickcheck = global_data.Core__Quickcheck,
    Core = global_data.Core,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Diffable_Atomic = global_data.Diffable__Atomic,
    Core_Float = global_data.Core__Float,
    Core_Int = global_data.Core__Int,
    Inline_test_config = global_data.Inline_test_config,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Diffable_Iso = global_data.Diffable__Iso,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Core_List = global_data.Core__List,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector;
   caml_call1(Ppx_module_timer_runtime[4], cst_Diffable_Tuples);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_diffable);
   caml_call1(Expect_test_collector[6][1], cst_tuples_ml$1);
   caml_call2(Ppx_inline_test_lib[5], cst_diffable, cst_tuples_ml$1);
   var
    _a_ = [0, cst_A$0],
    _b_ = [0, cst_B$0],
    _c_ = [0, cst_A$0],
    _d_ = [0, cst_B$0],
    cst_B = cst_B$0,
    cst_A = cst_A$0,
    cst_t = cst_t$7,
    cst_tuples_ml_54_6 = "tuples.ml:54:6",
    cst_t$0 = cst_t$7,
    cst_tuples_ml_Make2_Update_Dif = cst_tuples_ml_Make2_Update_Dif$0,
    _e_ = [1, cst_tuples_ml_Make2_Update_Dif$0],
    cst_t$1 = cst_t$7,
    cst_tuples_ml_60_4 = "tuples.ml:60:4",
    cst_t$2 = cst_t$7,
    cst_t$3 = cst_t$7,
    cst_tuples_ml_188_8 = "tuples.ml:188:8",
    cst_t$4 = cst_t$7,
    cst_t$5 = cst_t$7,
    cst_tuples_ml_197_8 = "tuples.ml:197:8",
    cst_t$6 = cst_t$7,
    cst_tuples_ml = cst_tuples_ml$1,
    cst_make6_round_trip_works = "make6 round-trip works",
    cst_tuples_ml$0 = cst_tuples_ml$1,
    cst_make6_diff_update_works = "make6 diff/update works",
    dummy = 0;
   function Make2_plain(A, B){
    function sexp_of_t(param){
     if(0 === param[0]){
      var arg0_001 = param[1], res0_002 = caml_call1(A[1][1][1], arg0_001);
      return [1, [0, _a_, [0, res0_002, 0]]];
     }
     var arg0_003 = param[1], res0_004 = caml_call1(B[1][1][1], arg0_003);
     return [1, [0, _b_, [0, res0_004, 0]]];
    }
    var Diff = [0, sexp_of_t];
    function sexp_of_t$0(x_005){return caml_call2(Core[431], Diff[1], x_005);}
    var Update = [0, Diff, sexp_of_t$0];
    function diffs(from, to){
     var
      _ak_ = caml_call2(B[3], from[2], to[2]),
      _al_ = caml_call2(Core_List[50], _ak_, function(x){return [1, x];}),
      _am_ = caml_call2(A[3], from[1], to[1]),
      _an_ = caml_call2(Core_List[60], _am_, function(x){return [0, x];});
     return caml_call2(Core_List[58], _an_, _al_);
    }
    function update(param, dl){
     var
      b = param[2],
      a = param[1],
      match =
        caml_call2
         (Core_List[15],
          dl,
          function(param){
           if(0 === param[0]){var x = param[1]; return [0, x];}
           var x$0 = param[1];
           return [1, x$0];
          }),
      db = match[2],
      da = match[1],
      _aj_ = caml_call2(B[2], b, db);
     return [0, caml_call2(A[2], a, da), _aj_];
    }
    function to_diffs(param){
     var
      tb = param[2],
      ta = param[1],
      _af_ = caml_call1(B[4], tb),
      _ag_ = caml_call2(Core_List[50], _af_, function(x){return [1, x];}),
      _ah_ = caml_call1(A[4], ta),
      _ai_ = caml_call2(Core_List[60], _ah_, function(x){return [0, x];});
     return caml_call2(Core_List[58], _ai_, _ag_);
    }
    function of_diffs(dl){
     var
      match =
        caml_call2
         (Core_List[15],
          dl,
          function(param){
           if(0 === param[0]){var x = param[1]; return [0, x];}
           var x$0 = param[1];
           return [1, x$0];
          }),
      db = match[2],
      da = match[1],
      _ae_ = caml_call1(B[5], db);
     return [0, caml_call1(A[5], da), _ae_];
    }
    return [0, Update, diffs, update, to_diffs, of_diffs];
   }
   function Make2(A, B){
    var
     _R_ = B[1],
     _S_ = A[1],
     Plain =
       Make2_plain
        ([0, [0, [0, _S_[1][10]], _S_[11]], A[2], A[3], A[4], A[5]],
         [0, [0, [0, _R_[1][10]], _R_[11]], B[2], B[3], B[4], B[5]]);
    function t_of_sexp(sexp_010){
     a:
     {
      if(0 === sexp_010[0]){
       var _ab_ = sexp_010[1];
       b:
       if(_ab_ !== cst_A$0){
        if(_ab_ !== cst_B$0){
         if(_ab_ === cst_a) break b;
         if(_ab_ !== cst_b) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_008, sexp_010);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_008, sexp_010);
      }
      var _ac_ = sexp_010[1];
      if(! _ac_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_008, sexp_010);
      var _ad_ = _ac_[1];
      if(0 !== _ad_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[6], error_source_008, sexp_010);
      var tag_011 = _ad_[1];
      b:
      if(tag_011 !== cst_A$0){
       if(tag_011 !== cst_B$0){
        if(tag_011 === cst_a) break b;
        if(tag_011 !== cst_b) break a;
       }
       var sexp_args_017 = _ac_[2];
       if(sexp_args_017 && ! sexp_args_017[2]){
        var
         arg0_018 = sexp_args_017[1],
         res0_019 = caml_call1(B[1][1][9], arg0_018);
        return [1, res0_019];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_008,
                tag_011,
                sexp_010);
      }
      var sexp_args_012 = _ac_[2];
      if(sexp_args_012 && ! sexp_args_012[2]){
       var
        arg0_013 = sexp_args_012[1],
        res0_014 = caml_call1(A[1][1][9], arg0_013);
       return [0, res0_014];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_008,
               tag_011,
               sexp_010);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[8], error_source_008, sexp_010);
    }
    function sexp_of_t(param){
     if(0 === param[0]){
      var arg0_020 = param[1], res0_021 = caml_call1(A[1][1][10], arg0_020);
      return [1, [0, _c_, [0, res0_021, 0]]];
     }
     var arg0_022 = param[1], res0_023 = caml_call1(B[1][1][10], arg0_022);
     return [1, [0, _d_, [0, res0_023, 0]]];
    }
    var
     _T_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          [0, cst_A, [0, A[1][1][5], 0]],
          [0, [0, cst_B, [0, B[1][1][5], 0]], 0]]),
     _U_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _T_], 0],
     _V_ = caml_call1(Bin_shape[4][1], cst_tuples_ml_54_6),
     group = caml_call2(Bin_prot_Shape[2], _V_, _U_),
     _W_ = caml_call1(Bin_shape[2][1], cst_t$0),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _W_), 0);
    function bin_size_t(param){
     if(0 === param[0]){
      var v1 = param[1], _$_ = caml_call1(A[1][1][1], v1);
      return caml_call2(Bin_prot_Common[23], 1, _$_);
     }
     var v1$0 = param[1], _aa_ = caml_call1(B[1][1][1], v1$0);
     return caml_call2(Bin_prot_Common[23], 1, _aa_);
    }
    function bin_write_t(buf, pos, param){
     if(0 === param[0]){
      var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
      return caml_call3(A[1][1][2], buf, pos$0, v1);
     }
     var v1$0 = param[1], pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
     return caml_call3(B[1][1][2], buf, pos$1, v1$0);
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19], cst_tuples_ml_Make2_Update_Dif, pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(0 === match){
      var arg_1 = caml_call2(A[1][1][3], buf, pos_ref);
      return [0, arg_1];
     }
     if(1 !== match) return caml_call2(Bin_prot_Common[18], _e_, pos_ref[1]);
     var arg_1$0 = caml_call2(B[1][1][3], buf, pos_ref);
     return [1, arg_1$0];
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
     Diff =
       [0,
        t_of_sexp,
        sexp_of_t,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_writer_t,
        bin_read_t,
        bin_read_t$0,
        bin_reader_t,
        bin_t];
    function t_of_sexp$0(x_025){return caml_call2(Core[432], Diff[1], x_025);}
    function sexp_of_t$0(x_026){return caml_call2(Core[431], Diff[2], x_026);}
    var
     _X_ = caml_call1(Core[419], Diff[3]),
     _Y_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _X_], 0],
     _Z_ = caml_call1(Bin_shape[4][1], cst_tuples_ml_60_4),
     group$0 = caml_call2(Bin_prot_Shape[2], _Z_, _Y_),
     ___ = caml_call1(Bin_shape[2][1], cst_t$2),
     bin_shape_t$0 =
       caml_call1(caml_call2(Bin_prot_Shape[10], group$0, ___), 0);
    function bin_size_t$0(v){return caml_call2(Core[420], Diff[4], v);}
    function bin_write_t$0(buf, pos, v){
     return caml_call4(Core[421], Diff[5], buf, pos, v);
    }
    var bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0];
    function bin_read_t$1(buf, pos_ref, vint){
     return caml_call3(caml_call1(Core[424], Diff[8]), buf, pos_ref, vint);
    }
    function bin_read_t$2(buf, pos_ref){
     return caml_call2(caml_call1(Core[423], Diff[8]), buf, pos_ref);
    }
    var
     bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
     bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0],
     Update =
       [0,
        Diff,
        t_of_sexp$0,
        sexp_of_t$0,
        bin_shape_t$0,
        bin_size_t$0,
        bin_write_t$0,
        bin_writer_t$0,
        bin_read_t$1,
        bin_read_t$2,
        bin_reader_t$0,
        bin_t$0],
     of_diffs = Plain[5],
     to_diffs = Plain[4],
     update = Plain[3],
     diffs = Plain[2];
    return [0, , Update, diffs, update, to_diffs, of_diffs];
   }
   function Make3_plain(A, B, C){
    function forwards(param){
     var match = param[2], c = match[2], b = match[1], a = param[1];
     return [0, a, b, c];
    }
    function backwards(param){
     var c = param[3], b = param[2], a = param[1];
     return [0, a, [0, b, c]];
    }
    var
     _P_ = Make2_plain(B, C),
     _Q_ = Make2_plain(A, [0, _P_[1], _P_[3], _P_[2], _P_[4], _P_[5]]);
    return caml_call1
            (caml_call1
              (Diffable_Iso[2], [0, _Q_[1], _Q_[3], _Q_[2], _Q_[4], _Q_[5]]),
             [0, forwards, backwards]);
   }
   function Make3(A, B, C){
    function forwards(param){
     var match = param[2], c = match[2], b = match[1], a = param[1];
     return [0, a, b, c];
    }
    function backwards(param){
     var c = param[3], b = param[2], a = param[1];
     return [0, a, [0, b, c]];
    }
    var
     _N_ = Make2(B, C),
     _J_ = _N_[2],
     _K_ = _J_[1],
     _O_ =
       Make2
        (A,
         [0,
          [0,
           [0,
            _K_[4],
            _K_[5],
            _K_[8],
            _K_[7],
            _K_[3],
            _K_[6],
            _K_[9],
            _K_[10],
            _K_[1],
            _K_[2]],
           _J_[5],
           _J_[6],
           _J_[9],
           _J_[8],
           _J_[4],
           _J_[7],
           _J_[10],
           _J_[11],
           _J_[2],
           _J_[3]],
          _N_[4],
          _N_[3],
          _N_[5],
          _N_[6]]),
     _L_ = _O_[2],
     _M_ = _L_[1];
    return caml_call1
            (caml_call1
              (Diffable_Iso[1],
               [0,
                [0,
                 [0,
                  _M_[4],
                  _M_[5],
                  _M_[8],
                  _M_[7],
                  _M_[3],
                  _M_[6],
                  _M_[9],
                  _M_[10],
                  _M_[1],
                  _M_[2]],
                 _L_[5],
                 _L_[6],
                 _L_[9],
                 _L_[8],
                 _L_[4],
                 _L_[7],
                 _L_[10],
                 _L_[11],
                 _L_[2],
                 _L_[3]],
                _O_[4],
                _O_[3],
                _O_[5],
                _O_[6]]),
             [0, forwards, backwards]);
   }
   function Make4_plain(A, B, C, D){
    function forwards(param){
     var
      match = param[2],
      d = match[3],
      c = match[2],
      b = match[1],
      a = param[1];
     return [0, a, b, c, d];
    }
    function backwards(param){
     var d = param[4], c = param[3], b = param[2], a = param[1];
     return [0, a, [0, b, c, d]];
    }
    var _I_ = Make2_plain(A, Make3_plain(B, C, D));
    return caml_call1
            (caml_call1
              (Diffable_Iso[2], [0, _I_[1], _I_[3], _I_[2], _I_[4], _I_[5]]),
             [0, forwards, backwards]);
   }
   function Make4(A, B, C, D){
    function forwards(param){
     var
      match = param[2],
      d = match[3],
      c = match[2],
      b = match[1],
      a = param[1];
     return [0, a, b, c, d];
    }
    function backwards(param){
     var d = param[4], c = param[3], b = param[2], a = param[1];
     return [0, a, [0, b, c, d]];
    }
    var _H_ = Make2(A, Make3(B, C, D)), _F_ = _H_[2], _G_ = _F_[1];
    return caml_call1
            (caml_call1
              (Diffable_Iso[1],
               [0,
                [0,
                 [0,
                  _G_[4],
                  _G_[5],
                  _G_[8],
                  _G_[7],
                  _G_[3],
                  _G_[6],
                  _G_[9],
                  _G_[10],
                  _G_[1],
                  _G_[2]],
                 _F_[5],
                 _F_[6],
                 _F_[9],
                 _F_[8],
                 _F_[4],
                 _F_[7],
                 _F_[10],
                 _F_[11],
                 _F_[2],
                 _F_[3]],
                _H_[4],
                _H_[3],
                _H_[5],
                _H_[6]]),
             [0, forwards, backwards]);
   }
   function Make5_plain(A, B, C, D, E){
    function forwards(param){
     var
      match = param[2],
      e = match[4],
      d = match[3],
      c = match[2],
      b = match[1],
      a = param[1];
     return [0, a, b, c, d, e];
    }
    function backwards(param){
     var e = param[5], d = param[4], c = param[3], b = param[2], a = param[1];
     return [0, a, [0, b, c, d, e]];
    }
    var _E_ = Make2_plain(A, Make4_plain(B, C, D, E));
    return caml_call1
            (caml_call1
              (Diffable_Iso[2], [0, _E_[1], _E_[3], _E_[2], _E_[4], _E_[5]]),
             [0, forwards, backwards]);
   }
   function Make5(A, B, C, D, E){
    function forwards(param){
     var
      match = param[2],
      e = match[4],
      d = match[3],
      c = match[2],
      b = match[1],
      a = param[1];
     return [0, a, b, c, d, e];
    }
    function backwards(param){
     var e = param[5], d = param[4], c = param[3], b = param[2], a = param[1];
     return [0, a, [0, b, c, d, e]];
    }
    var _D_ = Make2(A, Make4(B, C, D, E)), _B_ = _D_[2], _C_ = _B_[1];
    return caml_call1
            (caml_call1
              (Diffable_Iso[1],
               [0,
                [0,
                 [0,
                  _C_[4],
                  _C_[5],
                  _C_[8],
                  _C_[7],
                  _C_[3],
                  _C_[6],
                  _C_[9],
                  _C_[10],
                  _C_[1],
                  _C_[2]],
                 _B_[5],
                 _B_[6],
                 _B_[9],
                 _B_[8],
                 _B_[4],
                 _B_[7],
                 _B_[10],
                 _B_[11],
                 _B_[2],
                 _B_[3]],
                _D_[4],
                _D_[3],
                _D_[5],
                _D_[6]]),
             [0, forwards, backwards]);
   }
   function Make6_plain(A, B, C, D, E, F){
    function forwards(param){
     var
      match = param[2],
      f = match[5],
      e = match[4],
      d = match[3],
      c = match[2],
      b = match[1],
      a = param[1];
     return [0, a, b, c, d, e, f];
    }
    function backwards(param){
     var
      f = param[6],
      e = param[5],
      d = param[4],
      c = param[3],
      b = param[2],
      a = param[1];
     return [0, a, [0, b, c, d, e, f]];
    }
    var _A_ = Make2_plain(A, Make5_plain(B, C, D, E, F));
    return caml_call1
            (caml_call1
              (Diffable_Iso[2], [0, _A_[1], _A_[3], _A_[2], _A_[4], _A_[5]]),
             [0, forwards, backwards]);
   }
   function Make6(A, B, C, D, E, F){
    function forwards(param){
     var
      match = param[2],
      f = match[5],
      e = match[4],
      d = match[3],
      c = match[2],
      b = match[1],
      a = param[1];
     return [0, a, b, c, d, e, f];
    }
    function backwards(param){
     var
      f = param[6],
      e = param[5],
      d = param[4],
      c = param[3],
      b = param[2],
      a = param[1];
     return [0, a, [0, b, c, d, e, f]];
    }
    var _z_ = Make2(A, Make5(B, C, D, E, F)), _x_ = _z_[2], _y_ = _x_[1];
    return caml_call1
            (caml_call1
              (Diffable_Iso[1],
               [0,
                [0,
                 [0,
                  _y_[4],
                  _y_[5],
                  _y_[8],
                  _y_[7],
                  _y_[3],
                  _y_[6],
                  _y_[9],
                  _y_[10],
                  _y_[1],
                  _y_[2]],
                 _x_[5],
                 _x_[6],
                 _x_[9],
                 _x_[8],
                 _x_[4],
                 _x_[7],
                 _x_[10],
                 _x_[11],
                 _x_[2],
                 _x_[3]],
                _z_[4],
                _z_[3],
                _z_[5],
                _z_[6]]),
             [0, forwards, backwards]);
   }
   caml_call8
    (Ppx_inline_test_lib[9],
     Inline_test_config,
     "tests",
     0,
     cst_tuples_ml$1,
     184,
     0,
     1798,
     function(param){
      var
       _n_ = Core[350],
       _o_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$3), 0, _n_], 0],
       _p_ = caml_call1(Bin_shape[4][1], cst_tuples_ml_188_8),
       group = caml_call2(Bin_prot_Shape[2], _p_, _o_),
       _q_ = caml_call1(Bin_shape[2][1], cst_t$4),
       bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _q_), 0),
       bin_size_t = Core[351],
       bin_write_t = Core[352],
       bin_writer_t = [0, bin_size_t, bin_write_t],
       bin_read_t = Core[355],
       bin_read_t$0 = Core[354],
       bin_reader_t = [0, bin_read_t$0, bin_read_t],
       bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
       equal = Core[359],
       t_of_sexp = Core[364],
       sexp_of_t = Core[363],
       include =
         caml_call1
          (Diffable_Atomic[1],
           [0,
            bin_size_t,
            bin_write_t,
            bin_read_t$0,
            bin_read_t,
            bin_shape_t,
            bin_writer_t,
            bin_reader_t,
            bin_t,
            t_of_sexp,
            sexp_of_t,
            equal]),
       Update = include[1],
       update = include[2],
       diffs = include[3],
       to_diffs = include[4],
       of_diffs = include[5],
       _r_ = Core[332],
       _s_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$5), 0, _r_], 0],
       _t_ = caml_call1(Bin_shape[4][1], cst_tuples_ml_197_8),
       group$0 = caml_call2(Bin_prot_Shape[2], _t_, _s_),
       _u_ = caml_call1(Bin_shape[2][1], cst_t$6),
       bin_shape_t$0 =
         caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _u_), 0),
       bin_size_t$0 = Core[333],
       bin_write_t$0 = Core[334],
       bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0],
       bin_read_t$1 = Core[337],
       bin_read_t$2 = Core[336],
       bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
       bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0],
       equal$0 = Core[341],
       t_of_sexp$0 = Core[346],
       sexp_of_t$0 = Core[345],
       include$0 =
         caml_call1
          (Diffable_Atomic[1],
           [0,
            bin_size_t$0,
            bin_write_t$0,
            bin_read_t$2,
            bin_read_t$1,
            bin_shape_t$0,
            bin_writer_t$0,
            bin_reader_t$0,
            bin_t$0,
            t_of_sexp$0,
            sexp_of_t$0,
            equal$0]),
       Update$0 = include$0[1],
       update$0 = include$0[2],
       diffs$0 = include$0[3],
       to_diffs$0 = include$0[4],
       of_diffs$0 = include$0[5],
       include$1 =
         Make6
          ([0, Update, update, diffs, to_diffs, of_diffs],
           [0, Update, update, diffs, to_diffs, of_diffs],
           [0, Update$0, update$0, diffs$0, to_diffs$0, of_diffs$0],
           [0, Update, update, diffs, to_diffs, of_diffs],
           [0, Update$0, update$0, diffs$0, to_diffs$0, of_diffs$0],
           [0, Update$0, update$0, diffs$0, to_diffs$0, of_diffs$0]),
       update$1 = include$1[2],
       diffs$1 = include$1[3],
       to_diffs$1 = include$1[4],
       of_diffs$1 = include$1[5];
      function compare(a_033, b_034){
       var
        t_040 = a_033[6],
        t_039 = a_033[5],
        t_038 = a_033[4],
        t_037 = a_033[3],
        t_036 = a_033[2],
        t_035 = a_033[1],
        t_046 = b_034[6],
        t_045 = b_034[5],
        t_044 = b_034[4],
        t_043 = b_034[3],
        t_042 = b_034[2],
        t_041 = b_034[1],
        n = caml_call2(Core[358], t_035, t_041);
       if(0 !== n) return n;
       var n$0 = caml_call2(Core[358], t_036, t_042);
       if(0 !== n$0) return n$0;
       var n$1 = caml_call2(Core[340], t_037, t_043);
       if(0 !== n$1) return n$1;
       var n$2 = caml_call2(Core[358], t_038, t_044);
       if(0 !== n$2) return n$2;
       var n$3 = caml_call2(Core[340], t_039, t_045);
       return 0 === n$3 ? caml_call2(Core[340], t_040, t_046) : n$3;
      }
      function sexp_of_t$1(param){
       var
        arg5_067 = param[6],
        arg4_066 = param[5],
        arg3_065 = param[4],
        arg2_064 = param[3],
        arg1_063 = param[2],
        arg0_062 = param[1],
        res0_068 = caml_call1(Core[363], arg0_062),
        res1_069 = caml_call1(Core[363], arg1_063),
        res2_070 = caml_call1(Core[345], arg2_064),
        res3_071 = caml_call1(Core[363], arg3_065),
        res4_072 = caml_call1(Core[345], arg4_066),
        res5_073 = caml_call1(Core[345], arg5_067);
       return [1,
               [0,
                res0_068,
                [0,
                 res1_069,
                 [0, res2_070, [0, res3_071, [0, res4_072, [0, res5_073, 0]]]]]]];
      }
      var
       quickcheck_generator =
         caml_call6
          (Core_Quickcheck[1][42],
           Core_Int[118],
           Core_Int[118],
           Core_Float[157],
           Core_Int[118],
           Core_Float[157],
           Core_Float[157]),
       quickcheck_shrinker =
         caml_call6
          (Core_Quickcheck[3][13],
           Core_Int[120],
           Core_Int[120],
           Core_Float[159],
           Core_Int[120],
           Core_Float[159],
           Core_Float[159]);
      caml_call8
       (Ppx_inline_test_lib[8],
        Inline_test_config,
        cst_make6_round_trip_works,
        0,
        cst_tuples_ml,
        230,
        4,
        238,
        function(param){
         caml_call9
          (Core_Quickcheck[12],
           0,
           0,
           0,
           [0, quickcheck_shrinker],
           0,
           [0, sexp_of_t$1],
           0,
           quickcheck_generator,
           function(expect){
            var got = caml_call1(of_diffs$1, caml_call1(to_diffs$1, expect));
            function comparator(a_074, b_075){return compare(a_074, b_075);}
            return caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos,
                     sexp_of_t$1,
                     comparator,
                     0,
                     0,
                     0,
                     expect,
                     got);
           });
         return 0;
        });
      caml_call8
       (Ppx_inline_test_lib[8],
        Inline_test_config,
        cst_make6_diff_update_works,
        0,
        cst_tuples_ml$0,
        238,
        4,
        381,
        function(param){
         var
          _v_ =
            caml_call2
             (Core_Quickcheck[1][38],
              quickcheck_generator,
              quickcheck_generator),
          _w_ =
            [0,
             caml_call2
              (Core_Quickcheck[3][9],
               quickcheck_shrinker,
               quickcheck_shrinker)];
         caml_call9
          (Core_Quickcheck[12],
           0,
           0,
           0,
           _w_,
           0,
           [0,
            function(param){
             var
              arg1_077 = param[2],
              arg0_076 = param[1],
              res0_078 = sexp_of_t$1(arg0_076),
              res1_079 = sexp_of_t$1(arg1_077);
             return [1, [0, res0_078, [0, res1_079, 0]]];
            }],
           0,
           _v_,
           function(param){
            var
             expect = param[2],
             from = param[1],
             got =
               caml_call2(update$1, from, caml_call2(diffs$1, from, expect));
            function comparator(a_080, b_081){return compare(a_080, b_081);}
            return caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos$0,
                     sexp_of_t$1,
                     comparator,
                     0,
                     0,
                     0,
                     expect,
                     got);
           });
         return 0;
        });
      return 0;
     });
   caml_call1(Ppx_inline_test_lib[6], cst_diffable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Diffable_Tuples);
   var
    Diffable_Tuples =
      [0,
       function(_j_, _i_){
        var _k_ = Make2(_j_, _i_), _l_ = _k_[2], _m_ = _l_[1];
        return [0,
                [0,
                 [0,
                  _m_[4],
                  _m_[5],
                  _m_[8],
                  _m_[7],
                  _m_[3],
                  _m_[6],
                  _m_[9],
                  _m_[10],
                  _m_[1],
                  _m_[2]],
                 _l_[5],
                 _l_[6],
                 _l_[9],
                 _l_[8],
                 _l_[4],
                 _l_[7],
                 _l_[10],
                 _l_[11],
                 _l_[2],
                 _l_[3]],
                _k_[4],
                _k_[3],
                _k_[5],
                _k_[6]];
       },
       function(_g_, _f_){
        var _h_ = Make2_plain(_g_, _f_);
        return [0, _h_[1], _h_[3], _h_[2], _h_[4], _h_[5]];
       },
       Make3,
       Make3_plain,
       Make4,
       Make4_plain,
       Make5,
       Make5_plain,
       Make6,
       Make6_plain];
   runtime.caml_register_global(64, Diffable_Tuples, cst_Diffable_Tuples);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Diffable__Set
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Core, Core__Comparable, Core__Int, Core__List, Core__Quickcheck, Core__Sequence, Core__Set, Expect_test_collector, Inline_test_config, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Add$0 = "Add",
    cst_Diffable_Set = "Diffable__Set",
    cst_Idle$0 = "Idle",
    cst_Remove$0 = "Remove",
    cst_add = "add",
    cst_diffable = "diffable",
    cst_idle = "idle",
    cst_remove = "remove",
    cst_set_ml$1 = "set.ml",
    cst_set_ml_Make_Update_Diff_t$0 = "set.ml.Make.Update.Diff.t",
    cst_t$5 = "t";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    pos$0 = "set.ml:122:25",
    pos = "set.ml:109:25",
    error_source_010 = cst_set_ml_Make_Update_Diff_t$0,
    idle = [2, 0],
    Core = global_data.Core,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Core_Int = global_data.Core__Int,
    Core_Quickcheck = global_data.Core__Quickcheck,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Core_Comparable = global_data.Core__Comparable,
    Inline_test_config = global_data.Inline_test_config,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Core_Set = global_data.Core__Set,
    Core_List = global_data.Core__List,
    Core_Sequence = global_data.Core__Sequence,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector;
   caml_call1(Ppx_module_timer_runtime[4], cst_Diffable_Set);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_diffable);
   caml_call1(Expect_test_collector[6][1], cst_set_ml$1);
   caml_call2(Ppx_inline_test_lib[5], cst_diffable, cst_set_ml$1);
   var
    _a_ = [0, cst_Remove$0],
    _b_ = [0, cst_Add$0],
    _c_ = [0, cst_Idle$0],
    cst_Remove_is_not_allowed_in_o = "Remove is not allowed in of_diffs.",
    _d_ = [0, cst_Remove$0],
    _e_ = [0, cst_Add$0],
    _f_ = [0, cst_Idle$0],
    cst_Idle = cst_Idle$0,
    cst_Add = cst_Add$0,
    cst_Remove = cst_Remove$0,
    cst_t = cst_t$5,
    cst_set_ml_71_6 = "set.ml:71:6",
    cst_t$0 = cst_t$5,
    cst_set_ml_Make_Update_Diff_t = cst_set_ml_Make_Update_Diff_t$0,
    _g_ = [1, cst_set_ml_Make_Update_Diff_t$0],
    cst_t$1 = cst_t$5,
    cst_set_ml_78_4 = "set.ml:78:4",
    cst_t$2 = cst_t$5,
    cst_t$3 = cst_t$5,
    cst_set_ml_93_8 = "set.ml:93:8",
    cst_t$4 = cst_t$5,
    cst_set_ml = cst_set_ml$1,
    cst_atomic_round_trip_works = "atomic round-trip works",
    cst_set_ml$0 = cst_set_ml$1,
    cst_atomic_diff_update_works = "atomic diff/update works",
    dummy = 0;
   function Make_plain(Key){
    function sexp_of_t(param){
     switch(param[0]){
       case 0:
        var arg0_001 = param[1], res0_002 = caml_call1(Key[1], arg0_001);
        return [1, [0, _a_, [0, res0_002, 0]]];
       case 1:
        var arg0_003 = param[1], res0_004 = caml_call1(Key[1], arg0_003);
        return [1, [0, _b_, [0, res0_004, 0]]];
       default:
        var arg0_005 = param[1], res0_006 = caml_call1(Core[534], arg0_005);
        return [1, [0, _c_, [0, res0_006, 0]]];
     }
    }
    var Diff = [0, sexp_of_t, idle];
    function sexp_of_t$0(x_007){return caml_call2(Core[431], Diff[1], x_007);}
    var
     Update = [0, Diff, sexp_of_t$0],
     empty = caml_call1(Core_Set[7], [0, Key[2]]);
    function update(t, diffs){
     return caml_call3
             (Core_List[20],
              diffs,
              t,
              function(t, d){
               switch(d[0]){
                 case 0:
                  var key = d[1]; return caml_call2(Core_Set[13], t, key);
                 case 1:
                  var key$0 = d[1]; return caml_call2(Core_Set[12], t, key$0);
                 default: return t;
               }
              });
    }
    function diffs(from, to){
     var
      _L_ = caml_call2(Core_Set[18], from, to),
      _M_ =
        caml_call2
         (Core_Sequence[41],
          _L_,
          function(param){
           if(0 === param[0]){var k = param[1]; return [0, k];}
           var k$0 = param[1];
           return [1, k$0];
          });
     return caml_call1(Core_Sequence[27], _M_);
    }
    function of_diffs(diffs){
     return caml_call3
             (Core_List[20],
              diffs,
              empty,
              function(t, d){
               switch(d[0]){
                 case 0:
                  return caml_call1(Core[5], cst_Remove_is_not_allowed_in_o);
                 case 1:
                  var key = d[1]; return caml_call2(Core_Set[12], t, key);
                 default: return t;
               }
              });
    }
    function to_diffs(t){
     var
      _K_ = caml_call1(Core_Set[39], t),
      l = caml_call2(Core_List[50], _K_, function(k){return [1, k];});
     return l ? l : [0, Update[1][2], 0];
    }
    return [0, Update, empty, update, diffs, of_diffs, to_diffs];
   }
   function Make(Key){
    var Plain = Make_plain([0, Key[2], Key[11]]);
    function t_of_sexp(sexp_012){
     a:
     {
      if(0 === sexp_012[0]){
       var _H_ = sexp_012[1];
       b:
       if(_H_ !== cst_Add$0){
        c:
        if(_H_ !== cst_Idle$0){
         if(_H_ !== cst_Remove$0){
          if(_H_ === cst_add) break b;
          if(_H_ === cst_idle) break c;
          if(_H_ !== cst_remove) break a;
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5], error_source_010, sexp_012);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_010, sexp_012);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_010, sexp_012);
      }
      var _I_ = sexp_012[1];
      if(! _I_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_010, sexp_012);
      var _J_ = _I_[1];
      if(0 !== _J_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[6], error_source_010, sexp_012);
      var tag_013 = _J_[1];
      b:
      if(tag_013 !== cst_Add$0){
       c:
       if(tag_013 !== cst_Idle$0){
        if(tag_013 !== cst_Remove$0){
         if(tag_013 === cst_add) break b;
         if(tag_013 === cst_idle) break c;
         if(tag_013 !== cst_remove) break a;
        }
        var sexp_args_014 = _I_[2];
        if(sexp_args_014 && ! sexp_args_014[2]){
         var
          arg0_015 = sexp_args_014[1],
          res0_016 = caml_call1(Key[1], arg0_015);
         return [0, res0_016];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[4],
                 error_source_010,
                 tag_013,
                 sexp_012);
       }
       var sexp_args_024 = _I_[2];
       if(sexp_args_024 && ! sexp_args_024[2]){
        var
         arg0_025 = sexp_args_024[1],
         res0_026 = caml_call1(Core[535], arg0_025);
        return [2, res0_026];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_010,
                tag_013,
                sexp_012);
      }
      var sexp_args_019 = _I_[2];
      if(sexp_args_019 && ! sexp_args_019[2]){
       var
        arg0_020 = sexp_args_019[1],
        res0_021 = caml_call1(Key[1], arg0_020);
       return [1, res0_021];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_010,
               tag_013,
               sexp_012);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[8], error_source_010, sexp_012);
    }
    function sexp_of_t(param){
     switch(param[0]){
       case 0:
        var arg0_027 = param[1], res0_028 = caml_call1(Key[2], arg0_027);
        return [1, [0, _d_, [0, res0_028, 0]]];
       case 1:
        var arg0_029 = param[1], res0_030 = caml_call1(Key[2], arg0_029);
        return [1, [0, _e_, [0, res0_030, 0]]];
       default:
        var arg0_031 = param[1], res0_032 = caml_call1(Core[534], arg0_031);
        return [1, [0, _f_, [0, res0_032, 0]]];
     }
    }
    var
     _w_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          [0, cst_Remove, [0, Key[7], 0]],
          [0,
           [0, cst_Add, [0, Key[7], 0]],
           [0, [0, cst_Idle, [0, Core[521], 0]], 0]]]),
     _x_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _w_], 0],
     _y_ = caml_call1(Bin_shape[4][1], cst_set_ml_71_6),
     group = caml_call2(Bin_prot_Shape[2], _y_, _x_),
     _z_ = caml_call1(Bin_shape[2][1], cst_t$0),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _z_), 0);
    function bin_size_t(param){
     switch(param[0]){
       case 0:
        var v1 = param[1], _E_ = caml_call1(Key[3], v1);
        return caml_call2(Bin_prot_Common[23], 1, _E_);
       case 1:
        var v1$0 = param[1], _F_ = caml_call1(Key[3], v1$0);
        return caml_call2(Bin_prot_Common[23], 1, _F_);
       default:
        var v1$1 = param[1], _G_ = caml_call1(Core[522], v1$1);
        return caml_call2(Bin_prot_Common[23], 1, _G_);
     }
    }
    function bin_write_t(buf, pos, param){
     switch(param[0]){
       case 0:
        var
         v1 = param[1],
         pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
        return caml_call3(Key[4], buf, pos$0, v1);
       case 1:
        var
         v1$0 = param[1],
         pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1);
        return caml_call3(Key[4], buf, pos$1, v1$0);
       default:
        var
         v1$1 = param[1],
         pos$2 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
        return caml_call3(Core[523], buf, pos$2, v1$1);
     }
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19], cst_set_ml_Make_Update_Diff_t, pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(2 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _g_, pos_ref[1]);
     switch(match){
       case 0:
        var arg_1 = caml_call2(Key[5], buf, pos_ref); return [0, arg_1];
       case 1:
        var arg_1$0 = caml_call2(Key[5], buf, pos_ref); return [1, arg_1$0];
       default:
        var arg_1$1 = caml_call2(Core[525], buf, pos_ref);
        return [2, arg_1$1];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
     Diff =
       [0,
        t_of_sexp,
        sexp_of_t,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_writer_t,
        bin_read_t,
        bin_read_t$0,
        bin_reader_t,
        bin_t];
    function t_of_sexp$0(x_034){return caml_call2(Core[432], Diff[1], x_034);}
    function sexp_of_t$0(x_035){return caml_call2(Core[431], Diff[2], x_035);}
    var
     _A_ = caml_call1(Core[419], Diff[3]),
     _B_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _A_], 0],
     _C_ = caml_call1(Bin_shape[4][1], cst_set_ml_78_4),
     group$0 = caml_call2(Bin_prot_Shape[2], _C_, _B_),
     _D_ = caml_call1(Bin_shape[2][1], cst_t$2),
     bin_shape_t$0 =
       caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _D_), 0);
    function bin_size_t$0(v){return caml_call2(Core[420], Diff[4], v);}
    function bin_write_t$0(buf, pos, v){
     return caml_call4(Core[421], Diff[5], buf, pos, v);
    }
    var bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0];
    function bin_read_t$1(buf, pos_ref, vint){
     return caml_call3(caml_call1(Core[424], Diff[8]), buf, pos_ref, vint);
    }
    function bin_read_t$2(buf, pos_ref){
     return caml_call2(caml_call1(Core[423], Diff[8]), buf, pos_ref);
    }
    var
     bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
     bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0],
     Update =
       [0,
        Diff,
        t_of_sexp$0,
        sexp_of_t$0,
        bin_shape_t$0,
        bin_size_t$0,
        bin_write_t$0,
        bin_writer_t$0,
        bin_read_t$1,
        bin_read_t$2,
        bin_reader_t$0,
        bin_t$0],
     to_diffs = Plain[6],
     of_diffs = Plain[5],
     diffs = Plain[4],
     update = Plain[3],
     empty = Plain[2];
    return [0, , Update, empty, update, diffs, of_diffs, to_diffs];
   }
   caml_call8
    (Ppx_inline_test_lib[9],
     Inline_test_config,
     "tests",
     0,
     cst_set_ml$1,
     89,
     0,
     1071,
     function(param){
      var
       _o_ = Core[350],
       _p_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$3), 0, _o_], 0],
       _q_ = caml_call1(Bin_shape[4][1], cst_set_ml_93_8),
       group = caml_call2(Bin_prot_Shape[2], _q_, _p_),
       _r_ = caml_call1(Bin_shape[2][1], cst_t$4),
       bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _r_), 0),
       bin_size_t = Core[351],
       bin_write_t = Core[352],
       bin_writer_t = [0, bin_size_t, bin_write_t],
       bin_read_t = Core[355],
       bin_read_t$0 = Core[354],
       bin_reader_t = [0, bin_read_t$0, bin_read_t],
       bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
       compare = Core[358],
       t_of_sexp = Core[364],
       sexp_of_t = Core[363],
       include =
         caml_call1(Core_Comparable[12], [0, compare, t_of_sexp, sexp_of_t]),
       comparator = include[16],
       Set = include[22],
       include$0 =
         Make
          ([0,
            t_of_sexp,
            sexp_of_t,
            bin_size_t,
            bin_write_t,
            bin_read_t$0,
            bin_read_t,
            bin_shape_t,
            bin_writer_t,
            bin_reader_t,
            bin_t,
            comparator]),
       update = include$0[4],
       diffs = include$0[5],
       of_diffs = include$0[6],
       to_diffs = include$0[7];
      caml_call8
       (Ppx_inline_test_lib[8],
        Inline_test_config,
        cst_atomic_round_trip_works,
        0,
        cst_set_ml,
        103,
        4,
        295,
        function(param){
         var _v_ = caml_call1(Core_Quickcheck[1][66], Core_Int[118]);
         caml_call9
          (Core_Quickcheck[12],
           0,
           0,
           0,
           0,
           0,
           [0,
            function(x_041){return caml_call2(Core[431], Core[363], x_041);}],
           0,
           _v_,
           function(ns){
            var
             expect = caml_call1(Set[7], ns),
             got = of_diffs(to_diffs(expect)),
             sexpifier = Set[27];
            function comparator(a_042, b_043){
             return caml_call2(Set[2], a_042, b_043);
            }
            return caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos,
                     sexpifier,
                     comparator,
                     0,
                     0,
                     0,
                     expect,
                     got);
           });
         return 0;
        });
      caml_call8
       (Ppx_inline_test_lib[8],
        Inline_test_config,
        cst_atomic_diff_update_works,
        0,
        cst_set_ml$0,
        112,
        4,
        496,
        function(param){
         var
          _s_ = caml_call1(Core_Quickcheck[1][66], Core_Int[118]),
          _t_ = caml_call1(Core_Quickcheck[1][66], Core_Int[118]),
          _u_ = caml_call2(Core_Quickcheck[1][38], _t_, _s_);
         caml_call9
          (Core_Quickcheck[12],
           0,
           0,
           0,
           0,
           0,
           [0,
            function(param){
             var
              arg1_045 = param[2],
              arg0_044 = param[1],
              res0_046 = caml_call2(Core[431], Core[363], arg0_044),
              res1_047 = caml_call2(Core[431], Core[363], arg1_045);
             return [1, [0, res0_046, [0, res1_047, 0]]];
            }],
           0,
           _u_,
           function(param){
            var
             to = param[2],
             from = param[1],
             from$0 = caml_call1(Set[7], from),
             expect = caml_call1(Set[7], to),
             got = update(from$0, diffs(from$0, expect)),
             sexpifier = Set[27];
            function comparator(a_048, b_049){
             return caml_call2(Set[2], a_048, b_049);
            }
            return caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos$0,
                     sexpifier,
                     comparator,
                     0,
                     0,
                     0,
                     expect,
                     got);
           });
         return 0;
        });
      return 0;
     });
   caml_call1(Ppx_inline_test_lib[6], cst_diffable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Diffable_Set);
   var
    Diffable_Set =
      [0,
       function(_k_){
        var _l_ = Make(_k_), _m_ = _l_[2], _n_ = _m_[1];
        return [0,
                [0,
                 [0,
                  _n_[4],
                  _n_[5],
                  _n_[8],
                  _n_[7],
                  _n_[3],
                  _n_[6],
                  _n_[9],
                  _n_[10],
                  _n_[1],
                  _n_[2]],
                 _m_[5],
                 _m_[6],
                 _m_[9],
                 _m_[8],
                 _m_[4],
                 _m_[7],
                 _m_[10],
                 _m_[11],
                 _m_[2],
                 _m_[3]],
                _l_[4],
                _l_[5],
                _l_[7],
                _l_[6],
                _l_[3]];
       },
       function(_h_){
        var _i_ = Make_plain(_h_), _j_ = _i_[1];
        return [0,
                [0, [0, _j_[1][1]], _j_[2]],
                _i_[3],
                _i_[4],
                _i_[6],
                _i_[5],
                _i_[2]];
       }];
   runtime.caml_register_global(69, Diffable_Set, cst_Diffable_Set);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Diffable__Option
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Core, Core__Int, Core__List, Core__Sequence, Diffable__Atomic, Expect_test_collector, Inline_test_config, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_BUG_Hit_impossible_case$1 = "BUG: Hit impossible case",
    cst_Change$0 = "Change",
    cst_Diffable_Option = "Diffable__Option",
    cst_Idle = "Idle",
    cst_Set_to_none = "Set_to_none",
    cst_change = "change",
    cst_diffable = "diffable",
    cst_idle = "idle",
    cst_option_ml$0 = "option.ml",
    cst_option_ml_Make_Update_Diff$0 = "option.ml.Make.Update.Diff.t",
    cst_set_to_none = "set_to_none",
    cst_t$3 = "t";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    pos$6 = "option.ml:105:21",
    pos$5 = "option.ml:102:21",
    pos$4 = "option.ml:101:21",
    pos$3 = "option.ml:100:21",
    pos$2 = "option.ml:96:21",
    pos$1 = "option.ml:95:21",
    pos$0 = "option.ml:94:21",
    pos = "option.ml:93:21",
    error_source_006 = cst_option_ml_Make_Update_Diff$0,
    Core = global_data.Core,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Core_Int = global_data.Core__Int,
    Diffable_Atomic = global_data.Diffable__Atomic,
    Inline_test_config = global_data.Inline_test_config,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Core_List = global_data.Core__List,
    Core_Sequence = global_data.Core__Sequence,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector;
   caml_call1(Ppx_module_timer_runtime[4], cst_Diffable_Option);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_diffable);
   caml_call1(Expect_test_collector[6][1], cst_option_ml$0);
   caml_call2(Ppx_inline_test_lib[5], cst_diffable, cst_option_ml$0);
   var
    _a_ = [0, cst_Idle],
    _b_ = [0, cst_Set_to_none],
    _c_ = [0, cst_Change$0],
    cst_BUG_Hit_impossible_case = cst_BUG_Hit_impossible_case$1,
    cst_BUG_Hit_impossible_case$0 = cst_BUG_Hit_impossible_case$1,
    _d_ = [0, 0, 0],
    _e_ = [0, 1, 0],
    _f_ = [0, cst_Idle],
    _g_ = [0, cst_Set_to_none],
    _h_ = [0, cst_Change$0],
    _i_ = [0, [0, cst_Set_to_none, 0], [0, [0, cst_Idle, 0], 0]],
    cst_Change = cst_Change$0,
    cst_t = cst_t$3,
    cst_option_ml_68_6 = "option.ml:68:6",
    cst_t$0 = cst_t$3,
    cst_option_ml_Make_Update_Diff = cst_option_ml_Make_Update_Diff$0,
    _j_ = [1, cst_option_ml_Make_Update_Diff$0],
    cst_t$1 = cst_t$3,
    cst_option_ml_75_4 = "option.ml:75:4",
    cst_t$2 = cst_t$3,
    _k_ = [0, 23],
    _l_ = [0, 23],
    _m_ = [0, 42],
    _n_ = [0, 23],
    _o_ = [0, 0],
    _p_ = [0, [0, 23]],
    _q_ = [0, 0],
    _r_ = [0, 0],
    _s_ = [0, 0],
    _t_ = [0, [0, 23]],
    _u_ = [0, 0],
    _v_ = [0, [0, 23]],
    _w_ = [0, 0],
    _x_ = [0, [0, 23]],
    _y_ = [0, [0, 23]],
    _z_ = [0, [0, 23]],
    cst_option_ml = cst_option_ml$0,
    cst_diffs = "diffs",
    dummy = 0;
   function Make_plain(X){
    function sexp_of_t(param){
     if(typeof param === "number") return param ? _a_ : _b_;
     var arg0_001 = param[1], res0_002 = caml_call1(X[1][1][1], arg0_001);
     return [1, [0, _c_, [0, res0_002, 0]]];
    }
    var Diff = [0, sexp_of_t];
    function sexp_of_t$0(x_003){return caml_call2(Core[431], Diff[1], x_003);}
    var Update = [0, Diff, sexp_of_t$0];
    function update(t, diffs){
     var
      _aj_ = caml_call1(Core_Sequence[109], diffs),
      _ak_ =
        caml_call2
         (Core_Sequence[79],
          _aj_,
          function(l, r){
           if(typeof l !== "number" && typeof r !== "number") return 0;
           return 1;
          });
     return caml_call3
             (Core_Sequence[18],
              _ak_,
              t,
              function(t, change){
               if(change){
                var _al_ = change[1];
                if(typeof _al_ !== "number"){
                 var
                  diffs =
                    caml_call2
                     (Core_List[50],
                      change,
                      function(param){
                       if(typeof param === "number")
                        return caml_call1(Core[5], cst_BUG_Hit_impossible_case$0);
                       var x = param[1];
                       return x;
                      });
                 if(! t) return [0, caml_call1(X[5], diffs)];
                 var t$0 = t[1];
                 return [0, caml_call2(X[2], t$0, diffs)];
                }
                if(_al_){
                 if(! change[2]) return t;
                }
                else if(! change[2]) return 0;
               }
               return caml_call1(Core[5], cst_BUG_Hit_impossible_case);
              });
    }
    function diffs(from, to){
     if(from){
      var from$0 = from[1];
      if(! to) return _d_;
      var to$0 = to[1], _ah_ = caml_call2(X[3], from$0, to$0);
      return caml_call2
              (Core_List[50], _ah_, function(diff){return [0, diff];});
     }
     if(! to) return _e_;
     var to$1 = to[1], _ai_ = caml_call1(X[4], to$1);
     return caml_call2(Core_List[50], _ai_, function(diff){return [0, diff];});
    }
    var _af_ = 0;
    function of_diffs(_ag_){return update(_af_, _ag_);}
    function to_diffs(t){return diffs(0, t);}
    return [0, Update, update, diffs, of_diffs, to_diffs];
   }
   function Make(X){
    var
     _U_ = X[1],
     Plain =
       Make_plain([0, [0, [0, _U_[1][10]], _U_[11]], X[2], X[3], X[4], X[5]]);
    function t_of_sexp(sexp_008){
     a:
     {
      if(0 === sexp_008[0]){
       var _ac_ = sexp_008[1];
       b:
       if(_ac_ !== cst_Change$0){
        c:
        if(_ac_ !== cst_Idle){
         if(_ac_ !== cst_Set_to_none){
          if(_ac_ === cst_change) break b;
          if(_ac_ === cst_idle) break c;
          if(_ac_ !== cst_set_to_none) break a;
         }
         return 0;
        }
        return 1;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_006, sexp_008);
      }
      var _ad_ = sexp_008[1];
      if(! _ad_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_006, sexp_008);
      var _ae_ = _ad_[1];
      if(0 !== _ae_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[6], error_source_006, sexp_008);
      var tag_009 = _ae_[1];
      b:
      if(tag_009 !== cst_Change$0){
       c:
       if(tag_009 !== cst_Idle){
        if(tag_009 !== cst_Set_to_none){
         if(tag_009 === cst_change) break b;
         if(tag_009 === cst_idle) break c;
         if(tag_009 !== cst_set_to_none) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[3], error_source_006, sexp_008);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[3], error_source_006, sexp_008);
      }
      var sexp_args_010 = _ad_[2];
      if(sexp_args_010 && ! sexp_args_010[2]){
       var
        arg0_011 = sexp_args_010[1],
        res0_012 = caml_call1(X[1][1][9], arg0_011);
       return [0, res0_012];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_006,
               tag_009,
               sexp_008);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[8], error_source_006, sexp_008);
    }
    function sexp_of_t(param){
     if(typeof param === "number") return param ? _f_ : _g_;
     var arg0_013 = param[1], res0_014 = caml_call1(X[1][1][10], arg0_013);
     return [1, [0, _h_, [0, res0_014, 0]]];
    }
    var
     _V_ =
       caml_call1
        (Bin_prot_Shape[5], [0, [0, cst_Change, [0, X[1][1][5], 0]], _i_]),
     _W_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _V_], 0],
     _X_ = caml_call1(Bin_shape[4][1], cst_option_ml_68_6),
     group = caml_call2(Bin_prot_Shape[2], _X_, _W_),
     _Y_ = caml_call1(Bin_shape[2][1], cst_t$0),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _Y_), 0);
    function bin_size_t(param){
     if(typeof param === "number") return 1;
     var v1 = param[1], _ab_ = caml_call1(X[1][1][1], v1);
     return caml_call2(Bin_prot_Common[23], 1, _ab_);
    }
    function bin_write_t(buf, pos, param){
     if(typeof param === "number")
      return param
              ? caml_call3(Bin_prot_Write[30], buf, pos, 2)
              : caml_call3(Bin_prot_Write[30], buf, pos, 1);
     var v1 = param[1], pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
     return caml_call3(X[1][1][2], buf, pos$0, v1);
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19], cst_option_ml_Make_Update_Diff, pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(2 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _j_, pos_ref[1]);
     switch(match){
       case 0:
        var arg_1 = caml_call2(X[1][1][3], buf, pos_ref); return [0, arg_1];
       case 1:
        return 0;
       default: return 1;
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
     Diff =
       [0,
        t_of_sexp,
        sexp_of_t,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_writer_t,
        bin_read_t,
        bin_read_t$0,
        bin_reader_t,
        bin_t];
    function t_of_sexp$0(x_016){return caml_call2(Core[432], Diff[1], x_016);}
    function sexp_of_t$0(x_017){return caml_call2(Core[431], Diff[2], x_017);}
    var
     _Z_ = caml_call1(Core[419], Diff[3]),
     ___ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _Z_], 0],
     _$_ = caml_call1(Bin_shape[4][1], cst_option_ml_75_4),
     group$0 = caml_call2(Bin_prot_Shape[2], _$_, ___),
     _aa_ = caml_call1(Bin_shape[2][1], cst_t$2),
     bin_shape_t$0 =
       caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _aa_), 0);
    function bin_size_t$0(v){return caml_call2(Core[420], Diff[4], v);}
    function bin_write_t$0(buf, pos, v){
     return caml_call4(Core[421], Diff[5], buf, pos, v);
    }
    var bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0];
    function bin_read_t$1(buf, pos_ref, vint){
     return caml_call3(caml_call1(Core[424], Diff[8]), buf, pos_ref, vint);
    }
    function bin_read_t$2(buf, pos_ref){
     return caml_call2(caml_call1(Core[423], Diff[8]), buf, pos_ref);
    }
    var
     bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
     bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0],
     Update =
       [0,
        Diff,
        t_of_sexp$0,
        sexp_of_t$0,
        bin_shape_t$0,
        bin_size_t$0,
        bin_write_t$0,
        bin_writer_t$0,
        bin_read_t$1,
        bin_read_t$2,
        bin_reader_t$0,
        bin_t$0],
     to_diffs = Plain[5],
     of_diffs = Plain[4],
     diffs = Plain[3],
     update = Plain[2];
    return [0, , Update, update, diffs, of_diffs, to_diffs];
   }
   caml_call8
    (Ppx_inline_test_lib[9],
     Inline_test_config,
     "diffable option",
     0,
     cst_option_ml$0,
     86,
     0,
     1536,
     function(param){
      var
       X =
         caml_call1
          (Diffable_Atomic[1],
           [0,
            Core_Int[73],
            Core_Int[74],
            Core_Int[75],
            Core_Int[76],
            Core_Int[77],
            Core_Int[78],
            Core_Int[79],
            Core_Int[80],
            Core_Int[81],
            Core_Int[82],
            Core_Int[92]]),
       O = Make(X),
       _G_ = O[2],
       _H_ = _G_[1],
       O2 =
         Make
          ([0,
            [0,
             [0,
              _H_[4],
              _H_[5],
              _H_[8],
              _H_[7],
              _H_[3],
              _H_[6],
              _H_[9],
              _H_[10],
              _H_[1],
              _H_[2]],
             _G_[5],
             _G_[6],
             _G_[9],
             _G_[8],
             _G_[4],
             _G_[7],
             _G_[10],
             _G_[11],
             _G_[2],
             _G_[3]],
            O[3],
            O[4],
            O[6],
            O[5]]);
      function test1(expect$0, expect){
       var _Q_ = O[6].call(null, expect$0), got = O[5].call(null, _Q_);
       function sexpifier(x_022){
        return caml_call2(Core[466], Core[363], x_022);
       }
       function comparator(a_018, b_019){
        return caml_call3
                (Core[462],
                 function(a_020, b_021){
                  return caml_call2(Core[358], a_020, b_021);
                 },
                 a_018,
                 b_019);
       }
       caml_call8
        (Ppx_assert_lib_Runtime[3],
         pos,
         sexpifier,
         comparator,
         0,
         0,
         0,
         expect$0,
         got);
       var _R_ = O[6].call(null, expect), got$0 = O[5].call(null, _R_);
       function sexpifier$0(x_027){
        return caml_call2(Core[466], Core[363], x_027);
       }
       function comparator$0(a_023, b_024){
        return caml_call3
                (Core[462],
                 function(a_025, b_026){
                  return caml_call2(Core[358], a_025, b_026);
                 },
                 a_023,
                 b_024);
       }
       caml_call8
        (Ppx_assert_lib_Runtime[3],
         pos$0,
         sexpifier$0,
         comparator$0,
         0,
         0,
         0,
         expect,
         got$0);
       var
        _S_ = O[4].call(null, expect$0, expect),
        got$1 = O[3].call(null, expect$0, _S_);
       function sexpifier$1(x_032){
        return caml_call2(Core[466], Core[363], x_032);
       }
       function comparator$1(a_028, b_029){
        return caml_call3
                (Core[462],
                 function(a_030, b_031){
                  return caml_call2(Core[358], a_030, b_031);
                 },
                 a_028,
                 b_029);
       }
       caml_call8
        (Ppx_assert_lib_Runtime[3],
         pos$1,
         sexpifier$1,
         comparator$1,
         0,
         0,
         0,
         expect,
         got$1);
       var
        _T_ = O[4].call(null, expect, expect$0),
        got$2 = O[3].call(null, expect, _T_);
       function sexpifier$2(x_037){
        return caml_call2(Core[466], Core[363], x_037);
       }
       function comparator$2(a_033, b_034){
        return caml_call3
                (Core[462],
                 function(a_035, b_036){
                  return caml_call2(Core[358], a_035, b_036);
                 },
                 a_033,
                 b_034);
       }
       return caml_call8
               (Ppx_assert_lib_Runtime[3],
                pos$2,
                sexpifier$2,
                comparator$2,
                0,
                0,
                0,
                expect$0,
                got$2);
      }
      function test2(expect$0, expect){
       var _I_ = O2[6].call(null, expect$0), got = O2[5].call(null, _I_);
       function sexpifier(x_044){
        var _P_ = caml_call1(Core[466], Core[363]);
        return caml_call2(Core[466], _P_, x_044);
       }
       function comparator(a_038, b_039){
        return caml_call3
                (Core[462],
                 function(a_040, b_041){
                  return caml_call3
                          (Core[462],
                           function(a_042, b_043){
                            return caml_call2(Core[358], a_042, b_043);
                           },
                           a_040,
                           b_041);
                 },
                 a_038,
                 b_039);
       }
       caml_call8
        (Ppx_assert_lib_Runtime[3],
         pos$3,
         sexpifier,
         comparator,
         0,
         0,
         0,
         expect$0,
         got);
       var _J_ = O2[6].call(null, expect), got$0 = O2[5].call(null, _J_);
       function sexpifier$0(x_051){
        var _O_ = caml_call1(Core[466], Core[363]);
        return caml_call2(Core[466], _O_, x_051);
       }
       function comparator$0(a_045, b_046){
        return caml_call3
                (Core[462],
                 function(a_047, b_048){
                  return caml_call3
                          (Core[462],
                           function(a_049, b_050){
                            return caml_call2(Core[358], a_049, b_050);
                           },
                           a_047,
                           b_048);
                 },
                 a_045,
                 b_046);
       }
       caml_call8
        (Ppx_assert_lib_Runtime[3],
         pos$4,
         sexpifier$0,
         comparator$0,
         0,
         0,
         0,
         expect,
         got$0);
       var
        _K_ = O2[4].call(null, expect$0, expect),
        got$1 = O2[3].call(null, expect$0, _K_);
       function sexpifier$1(x_058){
        var _N_ = caml_call1(Core[466], Core[363]);
        return caml_call2(Core[466], _N_, x_058);
       }
       function comparator$1(a_052, b_053){
        return caml_call3
                (Core[462],
                 function(a_054, b_055){
                  return caml_call3
                          (Core[462],
                           function(a_056, b_057){
                            return caml_call2(Core[358], a_056, b_057);
                           },
                           a_054,
                           b_055);
                 },
                 a_052,
                 b_053);
       }
       caml_call8
        (Ppx_assert_lib_Runtime[3],
         pos$5,
         sexpifier$1,
         comparator$1,
         0,
         0,
         0,
         expect,
         got$1);
       var
        _L_ = O2[4].call(null, expect, expect$0),
        got$2 = O2[3].call(null, expect, _L_);
       function sexpifier$2(x_065){
        var _M_ = caml_call1(Core[466], Core[363]);
        return caml_call2(Core[466], _M_, x_065);
       }
       function comparator$2(a_059, b_060){
        return caml_call3
                (Core[462],
                 function(a_061, b_062){
                  return caml_call3
                          (Core[462],
                           function(a_063, b_064){
                            return caml_call2(Core[358], a_063, b_064);
                           },
                           a_061,
                           b_062);
                 },
                 a_059,
                 b_060);
       }
       return caml_call8
               (Ppx_assert_lib_Runtime[3],
                pos$6,
                sexpifier$2,
                comparator$2,
                0,
                0,
                0,
                expect$0,
                got$2);
      }
      caml_call8
       (Ppx_inline_test_lib[8],
        Inline_test_config,
        cst_diffs,
        0,
        cst_option_ml,
        110,
        4,
        589,
        function(param){
         test1(0, 0);
         test1(0, _k_);
         test1(_l_, 0);
         test1(_n_, _m_);
         test2(0, 0);
         test2(0, _o_);
         test2(0, _p_);
         test2(_q_, 0);
         test2(_s_, _r_);
         test2(_u_, _t_);
         test2(_v_, 0);
         test2(_x_, _w_);
         test2(_z_, _y_);
         return 0;
        });
      return 0;
     });
   caml_call1(Ppx_inline_test_lib[6], cst_diffable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Diffable_Option);
   var
    Diffable_Option =
      [0,
       function(_C_){
        var _D_ = Make(_C_), _E_ = _D_[2], _F_ = _E_[1];
        return [0,
                [0,
                 [0,
                  _F_[4],
                  _F_[5],
                  _F_[8],
                  _F_[7],
                  _F_[3],
                  _F_[6],
                  _F_[9],
                  _F_[10],
                  _F_[1],
                  _F_[2]],
                 _E_[5],
                 _E_[6],
                 _E_[9],
                 _E_[8],
                 _E_[4],
                 _E_[7],
                 _E_[10],
                 _E_[11],
                 _E_[2],
                 _E_[3]],
                _D_[3],
                _D_[4],
                _D_[6],
                _D_[5]];
       },
       function(_A_){
        var _B_ = Make_plain(_A_);
        return [0, _B_[1], _B_[2], _B_[3], _B_[5], _B_[4]];
       }];
   runtime.caml_register_global(85, Diffable_Option, cst_Diffable_Option);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Diffable__Map
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, Core, Core__Int, Core__List, Core__Map, Core__Quickcheck, Core__Sequence, Diffable__Atomic, Expect_test_collector, Expect_test_common__File, Expect_test_config, Inline_test_config, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Stored_reversed
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_Add$1 = "Add",
    cst_Change$0 = "Change",
    cst_Diffable_Map = "Diffable__Map",
    cst_Idle$1 = "Idle",
    cst_Remove$1 = "Remove",
    cst_acff55ddfbca9a1df80c878372$3 = "acff55ddfbca9a1df80c87837291c502",
    cst_add = "add",
    cst_change = "change",
    cst_diffable = "diffable",
    cst_diffs = "diffs",
    cst_from = "from",
    cst_idle = "idle",
    cst_map_ml$19 = "map.ml",
    cst_map_ml_Make_Update_Diff_t$0 = "map.ml.Make.Update.Diff.t",
    cst_map_ml_Make_with_value_dif$0 =
      "map.ml.Make_with_value_diffs.Update.Diff.t",
    cst_remove = "remove",
    cst_t$7 = "t",
    cst_to = "to_",
    cst_to_diffs = "to_diffs";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    pos$2 = "map.ml:400:55",
    pos$1 = "map.ml:379:50",
    error_source_089 = cst_map_ml_Make_with_value_dif$0,
    idle$0 = [3, 0],
    pos$0 = "map.ml:146:55",
    pos = "map.ml:125:50",
    error_source_013 = cst_map_ml_Make_Update_Diff_t$0,
    idle = [2, 0],
    Core_List = global_data.Core__List,
    Core_Quickcheck = global_data.Core__Quickcheck,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Expect_test_common_File = global_data.Expect_test_common__File,
    Core = global_data.Core,
    Core_Int = global_data.Core__Int,
    Diffable_Atomic = global_data.Diffable__Atomic,
    Expect_test_config = global_data.Expect_test_config,
    Expect_test_collector = global_data.Expect_test_collector,
    Inline_test_config = global_data.Inline_test_config,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Stored_reversed = global_data.Stored_reversed,
    Core_Map = global_data.Core__Map,
    Core_Sequence = global_data.Core__Sequence,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Diffable_Map);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_diffable);
   caml_call1(Expect_test_collector[6][1], cst_map_ml$19);
   caml_call2(Ppx_inline_test_lib[5], cst_diffable, cst_map_ml$19);
   var
    _a_ = [0, cst_Remove$1],
    _b_ = [0, cst_Add$1],
    _c_ = [0, cst_Idle$1],
    _h_ = [0, cst_to_diffs],
    _i_ = [0, cst_t$7],
    cst_map_ml = cst_map_ml$19,
    cst_map_ml$0 = cst_map_ml$19,
    cst_map_ml$1 = cst_map_ml$19,
    _j_ = [1, cst],
    _k_ = [0, cst],
    _l_ = [0, "map round-trip works"],
    cst_map_ml$2 = cst_map_ml$19,
    cst_map_ml$3 = cst_map_ml$19,
    cst_acff55ddfbca9a1df80c878372 = cst_acff55ddfbca9a1df80c878372$3,
    _m_ = [0, cst_diffs],
    _n_ = [0, cst_to],
    _o_ = [0, cst_from],
    cst_map_ml$4 = cst_map_ml$19,
    cst_map_ml$5 = cst_map_ml$19,
    cst_map_ml$6 = cst_map_ml$19,
    _p_ = [1, cst],
    _q_ = [0, cst],
    _r_ = [0, "map diff/update works"],
    cst_map_ml$7 = cst_map_ml$19,
    cst_map_ml$8 = cst_map_ml$19,
    cst_acff55ddfbca9a1df80c878372$0 = cst_acff55ddfbca9a1df80c878372$3;
   function Make_plain(Key, Value){
    function sexp_of_t(param){
     switch(param[0]){
       case 0:
        var arg0_001 = param[1], res0_002 = caml_call1(Key[1], arg0_001);
        return [1, [0, _a_, [0, res0_002, 0]]];
       case 1:
        var
         arg1_004 = param[2],
         arg0_003 = param[1],
         res0_005 = caml_call1(Key[1], arg0_003),
         res1_006 = caml_call1(Value[1], arg1_004);
        return [1, [0, _b_, [0, res0_005, [0, res1_006, 0]]]];
       default:
        var arg0_007 = param[1], res0_008 = caml_call1(Core[534], arg0_007);
        return [1, [0, _c_, [0, res0_008, 0]]];
     }
    }
    var Diff = [0, sexp_of_t, idle];
    function sexp_of_t$0(x_009){return caml_call2(Core[431], Diff[1], x_009);}
    var Update = [0, Diff, sexp_of_t$0];
    function sexp_of_t$1(x_010){
     return caml_call3(Core_Map[126], [0, Key[1]], Value[1], x_010);
    }
    var empty = caml_call1(Core_Map[4], [0, Key[2]]);
    function update(t, diffs){
     return caml_call3
             (Core_List[20],
              diffs,
              t,
              function(t, d){
               switch(d[0]){
                 case 0:
                  var key = d[1]; return caml_call2(Core_Map[45], t, key);
                 case 1:
                  var data = d[2], key$0 = d[1];
                  return caml_call3(Core_Map[36], t, key$0, data);
                 default: return t;
               }
              });
    }
    function diffs(from, to){
     function data_equal(x1, x2){
      var _bq_ = x1 === x2 ? 1 : 0;
      return _bq_ ? _bq_ : caml_call2(Value[2], x1, x2);
     }
     return caml_call5
             (Core_Map[85],
              from,
              to,
              data_equal,
              0,
              function(acc, param){
               var d = param[2], k = param[1], _bp_ = d[1];
               if(847852583 === _bp_) return [0, [0, k], acc];
               var i = 1013247643 <= _bp_ ? d[2][2] : d[2];
               return [0, [1, k, i], acc];
              });
    }
    function of_diffs(diffs){return update(empty, diffs);}
    function to_diffs(t){
     var
      l =
        caml_call3
         (Core_Map[61],
          t,
          0,
          function(key, data, tail){return [0, [1, key, data], tail];});
     return l ? l : [0, Update[1][2], 0];
    }
    return [0, Update, sexp_of_t$1, empty, update, diffs, of_diffs, to_diffs];
   }
   caml_call8
    (Ppx_inline_test_lib[9],
     Inline_test_config,
     "tests of Make and Make_plain",
     0,
     cst_map_ml$19,
     96,
     0,
     1603,
     function(param){
      var
       include =
         Make_plain
          ([0, Core_Int[82], Core_Int[102]], [0, Core_Int[82], Core_Int[92]]),
       Update = include[1],
       update = include[4],
       diffs = include[5],
       of_diffs = include[6],
       to_diffs = include[7];
      function compare(a_043, b_044){
       return caml_call3
               (Core_Int[103][2],
                function(a_045, b_046){
                 return caml_call2(Core[358], a_045, b_046);
                },
                a_043,
                b_044);
      }
      function sexp_of_t(x_051){
       return caml_call2(Core_Int[103][42], Core[363], x_051);
      }
      var
       quickcheck_generator =
         caml_call2(Core_Int[103][34], Core_Int[118], Core_Int[118]),
       Expect_test_collector$0 =
         caml_call1(Expect_test_collector[2], Expect_test_config),
       _a__ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_map_ml$0),
          126,
          3254,
          3269,
          3273],
       _a$_ =
         [0,
          [0,
           _k_,
           _j_,
           [0,
            caml_call1(Expect_test_common_File[1][6], cst_map_ml$1),
            126,
            3254,
            3262,
            3268],
           _a__],
          0],
       _ba_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_map_ml$3),
          110,
          2697,
          2701,
          3274],
       _bb_ =
         caml_call1
          (Expect_test_common_File[4][3], cst_acff55ddfbca9a1df80c878372);
      caml_call9
       (Expect_test_collector$0[3],
        _bb_,
        _ba_,
        cst_map_ml$2,
        _l_,
        0,
        _a$_,
        0,
        Inline_test_config,
        function(param){
         function sexp_of_t$0(param){
          var
           to_diffs_055 = param[2],
           t_053 = param[1],
           arg_056 = Update[2].call(null, to_diffs_055),
           bnds_052 = [0, [1, [0, _h_, [0, arg_056, 0]]], 0],
           arg_054 = sexp_of_t(t_053),
           bnds_052$0 = [0, [1, [0, _i_, [0, arg_054, 0]]], bnds_052];
          return [1, bnds_052$0];
         }
         var
          _bl_ =
            caml_call2
             (Core_Quickcheck[4][4][2],
              quickcheck_generator,
              function(t){
               var
                _bn_ = to_diffs(t),
                _bo_ = caml_call1(Core_List[173], _bn_);
               return caml_call2
                       (Core_Quickcheck[4][4][3],
                        _bo_,
                        function(to_diffs){return [0, t, to_diffs];});
              });
         caml_call9
          (Core_Quickcheck[12],
           0,
           0,
           0,
           0,
           0,
           [0, sexp_of_t$0],
           0,
           _bl_,
           function(param){
            var
             to_diffs = param[2],
             expect = param[1],
             got = of_diffs(to_diffs);
            function comparator(a_059, b_060){return compare(a_059, b_060);}
            return caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos,
                     sexp_of_t,
                     comparator,
                     0,
                     0,
                     0,
                     expect,
                     got);
           });
         var
          _bm_ =
            [0,
             caml_call1(Expect_test_common_File[1][6], cst_map_ml),
             126,
             3254,
             3262,
             3268];
         return caml_call1(Expect_test_collector$0[1], _bm_);
        });
      var
       Expect_test_collector$1 =
         caml_call1(Expect_test_collector[2], Expect_test_config),
       _bc_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_map_ml$5),
          147,
          3921,
          3936,
          3940],
       _bd_ =
         [0,
          [0,
           _q_,
           _p_,
           [0,
            caml_call1(Expect_test_common_File[1][6], cst_map_ml$6),
            147,
            3921,
            3929,
            3935],
           _bc_],
          0],
       _be_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_map_ml$8),
          129,
          3283,
          3287,
          3941],
       _bf_ =
         caml_call1
          (Expect_test_common_File[4][3], cst_acff55ddfbca9a1df80c878372$0);
      caml_call9
       (Expect_test_collector$1[3],
        _bf_,
        _be_,
        cst_map_ml$7,
        _r_,
        0,
        _bd_,
        0,
        Inline_test_config,
        function(param){
         function sexp_of_t$0(param){
          var
           diffs_066 = param[3],
           to_064 = param[2],
           from_062 = param[1],
           arg_067 = Update[2].call(null, diffs_066),
           bnds_061 = [0, [1, [0, _m_, [0, arg_067, 0]]], 0],
           arg_065 = sexp_of_t(to_064),
           bnds_061$0 = [0, [1, [0, _n_, [0, arg_065, 0]]], bnds_061],
           arg_063 = sexp_of_t(from_062),
           bnds_061$1 = [0, [1, [0, _o_, [0, arg_063, 0]]], bnds_061$0];
          return [1, bnds_061$1];
         }
         var
          _bg_ =
            caml_call2
             (Core_Quickcheck[4][4][4],
              quickcheck_generator,
              quickcheck_generator),
          _bh_ =
            caml_call2
             (Core_Quickcheck[4][4][2],
              _bg_,
              function(param){
               var
                to = param[2],
                from = param[1],
                _bj_ = diffs(from, to),
                _bk_ = caml_call1(Core_List[173], _bj_);
               return caml_call2
                       (Core_Quickcheck[4][4][3],
                        _bk_,
                        function(diffs){return [0, from, to, diffs];});
              });
         caml_call9
          (Core_Quickcheck[12],
           0,
           0,
           0,
           0,
           0,
           [0, sexp_of_t$0],
           0,
           _bh_,
           function(param){
            var
             diffs = param[3],
             expect = param[2],
             from = param[1],
             got = update(from, diffs);
            function comparator(a_072, b_073){return compare(a_072, b_073);}
            return caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos$0,
                     sexp_of_t,
                     comparator,
                     0,
                     0,
                     0,
                     expect,
                     got);
           });
         var
          _bi_ =
            [0,
             caml_call1(Expect_test_common_File[1][6], cst_map_ml$4),
             147,
             3921,
             3929,
             3935];
         return caml_call1(Expect_test_collector$1[1], _bi_);
        });
      return 0;
     });
   var
    _s_ = [0, cst_Remove$1],
    _t_ = [0, cst_Change$0],
    _u_ = [0, cst_Add$1],
    _v_ = [0, cst_Idle$1],
    cst_BUG_The_impossible_happene =
      "BUG: The impossible happened. Expected single Add/Remove or multiple Change in a group.",
    cst_BUG_The_impossible_happene$0 =
      "BUG: The impossible happened. Add/Remove in change group.",
    cst_BUG_The_impossible_happene$1 =
      "BUG: The impossible happened. Update to a non existing key.",
    cst_BUG_The_impossible_happene$2 =
      "BUG: The impossible happened. Change/Remove in add group.",
    _w_ = [0, cst_Remove$1],
    _x_ = [0, cst_Change$0],
    _y_ = [0, cst_Add$1],
    _z_ = [0, cst_Idle$1],
    cst_Idle$0 = cst_Idle$1,
    cst_Add$0 = cst_Add$1,
    cst_Change = cst_Change$0,
    cst_Remove$0 = cst_Remove$1,
    cst_t$3 = cst_t$7,
    cst_map_ml_325_6 = "map.ml:325:6",
    cst_t$4 = cst_t$7,
    cst_map_ml_Make_with_value_dif = cst_map_ml_Make_with_value_dif$0,
    _A_ = [1, cst_map_ml_Make_with_value_dif$0],
    cst_t$5 = cst_t$7,
    cst_map_ml_333_4 = "map.ml:333:4",
    cst_t$6 = cst_t$7,
    _B_ = [0, cst_to_diffs],
    _C_ = [0, cst_t$7],
    cst_map_ml$9 = cst_map_ml$19,
    cst_map_ml$10 = cst_map_ml$19,
    cst_map_ml$11 = cst_map_ml$19,
    _D_ = [1, cst],
    _E_ = [0, cst],
    _F_ = [0, "map with value diffs round-trip works"],
    cst_map_ml$12 = cst_map_ml$19,
    cst_map_ml$13 = cst_map_ml$19,
    cst_acff55ddfbca9a1df80c878372$1 = cst_acff55ddfbca9a1df80c878372$3,
    _G_ = [0, cst_diffs],
    _H_ = [0, cst_to],
    _I_ = [0, cst_from],
    cst_map_ml$14 = cst_map_ml$19,
    cst_map_ml$15 = cst_map_ml$19,
    cst_map_ml$16 = cst_map_ml$19,
    _J_ = [1, cst],
    _K_ = [0, cst],
    _L_ = [0, "map with value diffs diff/update works"],
    cst_map_ml$17 = cst_map_ml$19,
    cst_map_ml$18 = cst_map_ml$19,
    cst_acff55ddfbca9a1df80c878372$2 = cst_acff55ddfbca9a1df80c878372$3,
    dummy = 0;
   function Make_plain_with_value_diffs(Key, Value){
    function sexp_of_t(param){
     switch(param[0]){
       case 0:
        var arg0_074 = param[1], res0_075 = caml_call1(Key[1], arg0_074);
        return [1, [0, _s_, [0, res0_075, 0]]];
       case 1:
        var
         arg1_077 = param[2],
         arg0_076 = param[1],
         res0_078 = caml_call1(Key[1], arg0_076),
         res1_079 = caml_call1(Value[1][1][1], arg1_077);
        return [1, [0, _t_, [0, res0_078, [0, res1_079, 0]]]];
       case 2:
        var
         arg1_081 = param[2],
         arg0_080 = param[1],
         res0_082 = caml_call1(Key[1], arg0_080),
         res1_083 = caml_call1(Value[1][1][1], arg1_081);
        return [1, [0, _u_, [0, res0_082, [0, res1_083, 0]]]];
       default:
        var arg0_084 = param[1], res0_085 = caml_call1(Core[534], arg0_084);
        return [1, [0, _v_, [0, res0_085, 0]]];
     }
    }
    var Diff = [0, sexp_of_t, idle$0];
    function sexp_of_t$0(x_086){return caml_call2(Core[431], Diff[1], x_086);}
    var
     Update = [0, Diff, sexp_of_t$0],
     empty = caml_call1(Core_Map[4], [0, Key[2]]);
    function step(param){
     if(0 === param[0]){
      var diffs = param[1];
      if(! diffs) return 0;
      var single = diffs[1];
      switch(single[0]){
        case 0:
         var diffs$0 = diffs[2];
         return [1, caml_call1(Stored_reversed[6], single), [0, diffs$0]];
        case 1:
         var diffs$1 = diffs[2], key = single[1];
         return [0,
                 [1,
                  key,
                  -335084144,
                  caml_call1(Stored_reversed[6], single),
                  diffs$1]];
        case 2:
         var diffs$2 = diffs[2], key$0 = single[1];
         return [0,
                 [1,
                  key$0,
                  3254785,
                  caml_call1(Stored_reversed[6], single),
                  diffs$2]];
        default: var diffs$3 = diffs[2]; return [0, [0, diffs$3]];
      }
     }
     var
      diffs$4 = param[4],
      group = param[3],
      type = param[2],
      key$1 = param[1];
     if(3254785 <= type){
      if(diffs$4){
       var add = diffs$4[1];
       if(2 === add[0]){
        var
         diffs$5 = diffs$4[2],
         next_key = add[1],
         _a8_ = caml_call2(Key[2][1], next_key, key$1);
        if(caml_call2(Core[89], _a8_, 0))
         return [0,
                 [1,
                  key$1,
                  type,
                  caml_call2(Stored_reversed[5], group, add),
                  diffs$5]];
       }
      }
     }
     else if(diffs$4){
      var change = diffs$4[1];
      if(1 === change[0]){
       var
        diffs$6 = diffs$4[2],
        next_key$0 = change[1],
        _a9_ = caml_call2(Key[2][1], next_key$0, key$1);
       if(caml_call2(Core[89], _a9_, 0))
        return [0,
                [1,
                 key$1,
                 type,
                 caml_call2(Stored_reversed[5], group, change),
                 diffs$6]];
      }
     }
     return [1, group, [0, diffs$4]];
    }
    function update(t, diffs){
     var _a4_ = caml_call2(Core_Sequence[48], [0, diffs], step);
     return caml_call3
             (Core_Sequence[18],
              _a4_,
              t,
              function(t, ds){
               var match = caml_call1(Stored_reversed[10], ds);
               if(match){
                var match$0 = match[1];
                switch(match$0[0]){
                  case 0:
                   if(! match[2]){
                    var key = match$0[1];
                    return caml_call2(Core_Map[45], t, key);
                   }
                   break;
                  case 1:
                   var key$0 = match$0[1];
                   return caml_call3
                           (Core_Map[41],
                            t,
                            key$0,
                            function(param){
                             if(! param)
                              return caml_call1(Core[5], cst_BUG_The_impossible_happene$1);
                             var
                              value = param[1],
                              _a7_ =
                                caml_call3
                                 (Stored_reversed[11],
                                  0,
                                  ds,
                                  function(param){
                                   if(1 !== param[0])
                                    return caml_call1(Core[5], cst_BUG_The_impossible_happene$0);
                                   var x = param[2];
                                   return x;
                                  });
                             return caml_call2(Value[2], value, _a7_);
                            });
                  case 2:
                   var
                    key$1 = match$0[1],
                    _a5_ =
                      caml_call3
                       (Stored_reversed[11],
                        0,
                        ds,
                        function(param){
                         if(2 !== param[0])
                          return caml_call1(Core[5], cst_BUG_The_impossible_happene$2);
                         var x = param[2];
                         return x;
                        }),
                    _a6_ = caml_call1(Value[5], _a5_);
                   return caml_call3(Core_Map[36], t, key$1, _a6_);
                }
               }
               return caml_call1(Core[5], cst_BUG_The_impossible_happene);
              });
    }
    function diffs(from, to){
     var
      _a0_ =
        caml_call5
         (Core_Map[85],
          from,
          to,
          function(_a3_, _a2_){return _a3_ === _a2_ ? 1 : 0;},
          Stored_reversed[4],
          function(acc, param){
           var d = param[2], k = param[1], _a1_ = d[1];
           if(847852583 === _a1_)
            return caml_call2(Stored_reversed[5], acc, [0, k]);
           if(1013247643 <= _a1_){
            var
             match = d[2],
             to = match[2],
             from = match[1],
             diffs = caml_call2(Value[3], from, to);
            return caml_call3
                    (Stored_reversed[12],
                     acc,
                     diffs,
                     function(x){return [1, k, x];});
           }
           var to$0 = d[2], diffs$0 = caml_call1(Value[4], to$0);
           return caml_call3
                   (Stored_reversed[12],
                    acc,
                    diffs$0,
                    function(x){return [2, k, x];});
          });
     return caml_call1(Stored_reversed[8], _a0_);
    }
    function of_diffs(_aZ_){return update(empty, _aZ_);}
    function to_diffs(t){
     var
      l =
        caml_call3
         (Core_Map[61],
          t,
          0,
          function(key, data, tail){
           var
            _aY_ = caml_call1(Value[4], data),
            rev_instructions = caml_call1(Stored_reversed[7], _aY_);
           return caml_call3
                   (Stored_reversed[11],
                    [0, tail],
                    rev_instructions,
                    function(x){return [2, key, x];});
          });
     return l ? l : [0, Update[1][2], 0];
    }
    return [0, Update, empty, update, diffs, of_diffs, to_diffs];
   }
   function Make_with_value_diffs(Key, Value){
    var
     _aE_ = Value[1],
     Plain =
       Make_plain_with_value_diffs
        ([0, Key[2], Key[11]],
         [0,
          [0, [0, _aE_[1][10]], _aE_[11]],
          Value[2],
          Value[3],
          Value[4],
          Value[5]]);
    function t_of_sexp(sexp_091){
     a:
     {
      if(0 === sexp_091[0]){
       var _aT_ = sexp_091[1];
       b:
       if(_aT_ !== cst_Add$1){
        c:
        if(_aT_ !== cst_Change$0){
         d:
         if(_aT_ !== cst_Idle$1){
          if(_aT_ !== cst_Remove$1){
           if(_aT_ === cst_add) break b;
           if(_aT_ === cst_change) break c;
           if(_aT_ === cst_idle) break d;
           if(_aT_ !== cst_remove) break a;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[5], error_source_089, sexp_091);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5], error_source_089, sexp_091);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_089, sexp_091);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_089, sexp_091);
      }
      var _aU_ = sexp_091[1];
      if(! _aU_)
       return caml_call2
               (Sexplib0_Sexp_conv_error[7], error_source_089, sexp_091);
      var _aV_ = _aU_[1];
      if(0 !== _aV_[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[6], error_source_089, sexp_091);
      var tag_092 = _aV_[1];
      b:
      if(tag_092 !== cst_Add$1){
       c:
       if(tag_092 !== cst_Change$0){
        d:
        if(tag_092 !== cst_Idle$1){
         if(tag_092 !== cst_Remove$1){
          if(tag_092 === cst_add) break b;
          if(tag_092 === cst_change) break c;
          if(tag_092 === cst_idle) break d;
          if(tag_092 !== cst_remove) break a;
         }
         var sexp_args_093 = _aU_[2];
         if(sexp_args_093 && ! sexp_args_093[2]){
          var
           arg0_094 = sexp_args_093[1],
           res0_095 = caml_call1(Key[1], arg0_094);
          return [0, res0_095];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[4],
                  error_source_089,
                  tag_092,
                  sexp_091);
        }
        var sexp_args_112 = _aU_[2];
        if(sexp_args_112 && ! sexp_args_112[2]){
         var
          arg0_113 = sexp_args_112[1],
          res0_114 = caml_call1(Core[535], arg0_113);
         return [3, res0_114];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[4],
                 error_source_089,
                 tag_092,
                 sexp_091);
       }
       var sexp_args_098 = _aU_[2];
       if(sexp_args_098){
        var _aW_ = sexp_args_098[2];
        if(_aW_ && ! _aW_[2]){
         var
          arg1_100 = _aW_[1],
          arg0_099 = sexp_args_098[1],
          res0_101 = caml_call1(Key[1], arg0_099),
          res1_102 = caml_call1(Value[1][1][9], arg1_100);
         return [1, res0_101, res1_102];
        }
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_089,
                tag_092,
                sexp_091);
      }
      var sexp_args_105 = _aU_[2];
      if(sexp_args_105){
       var _aX_ = sexp_args_105[2];
       if(_aX_ && ! _aX_[2]){
        var
         arg1_107 = _aX_[1],
         arg0_106 = sexp_args_105[1],
         res0_108 = caml_call1(Key[1], arg0_106),
         res1_109 = caml_call1(Value[1][1][9], arg1_107);
        return [2, res0_108, res1_109];
       }
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_089,
               tag_092,
               sexp_091);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[8], error_source_089, sexp_091);
    }
    function sexp_of_t(param){
     switch(param[0]){
       case 0:
        var arg0_115 = param[1], res0_116 = caml_call1(Key[2], arg0_115);
        return [1, [0, _w_, [0, res0_116, 0]]];
       case 1:
        var
         arg1_118 = param[2],
         arg0_117 = param[1],
         res0_119 = caml_call1(Key[2], arg0_117),
         res1_120 = caml_call1(Value[1][1][10], arg1_118);
        return [1, [0, _x_, [0, res0_119, [0, res1_120, 0]]]];
       case 2:
        var
         arg1_122 = param[2],
         arg0_121 = param[1],
         res0_123 = caml_call1(Key[2], arg0_121),
         res1_124 = caml_call1(Value[1][1][10], arg1_122);
        return [1, [0, _y_, [0, res0_123, [0, res1_124, 0]]]];
       default:
        var arg0_125 = param[1], res0_126 = caml_call1(Core[534], arg0_125);
        return [1, [0, _z_, [0, res0_126, 0]]];
     }
    }
    var
     _aF_ =
       caml_call1
        (Bin_prot_Shape[5],
         [0,
          [0, cst_Remove$0, [0, Key[7], 0]],
          [0,
           [0, cst_Change, [0, Key[7], [0, Value[1][1][5], 0]]],
           [0,
            [0, cst_Add$0, [0, Key[7], [0, Value[1][1][5], 0]]],
            [0, [0, cst_Idle$0, [0, Core[521], 0]], 0]]]]),
     _aG_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$3), 0, _aF_], 0],
     _aH_ = caml_call1(Bin_shape[4][1], cst_map_ml_325_6),
     group = caml_call2(Bin_prot_Shape[2], _aH_, _aG_),
     _aI_ = caml_call1(Bin_shape[2][1], cst_t$4),
     bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _aI_), 0);
    function bin_size_t(param){
     switch(param[0]){
       case 0:
        var v1 = param[1], _aN_ = caml_call1(Key[3], v1);
        return caml_call2(Bin_prot_Common[23], 1, _aN_);
       case 1:
        var
         v2 = param[2],
         v1$0 = param[1],
         _aO_ = caml_call1(Key[3], v1$0),
         size = caml_call2(Bin_prot_Common[23], 1, _aO_),
         _aP_ = caml_call1(Value[1][1][1], v2);
        return caml_call2(Bin_prot_Common[23], size, _aP_);
       case 2:
        var
         v2$0 = param[2],
         v1$1 = param[1],
         _aQ_ = caml_call1(Key[3], v1$1),
         size$0 = caml_call2(Bin_prot_Common[23], 1, _aQ_),
         _aR_ = caml_call1(Value[1][1][1], v2$0);
        return caml_call2(Bin_prot_Common[23], size$0, _aR_);
       default:
        var v1$2 = param[1], _aS_ = caml_call1(Core[522], v1$2);
        return caml_call2(Bin_prot_Common[23], 1, _aS_);
     }
    }
    function bin_write_t(buf, pos, param){
     switch(param[0]){
       case 0:
        var
         v1 = param[1],
         pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
        return caml_call3(Key[4], buf, pos$0, v1);
       case 1:
        var
         v2 = param[2],
         v1$0 = param[1],
         pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1),
         pos$2 = caml_call3(Key[4], buf, pos$1, v1$0);
        return caml_call3(Value[1][1][2], buf, pos$2, v2);
       case 2:
        var
         v2$0 = param[2],
         v1$1 = param[1],
         pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 2),
         pos$4 = caml_call3(Key[4], buf, pos$3, v1$1);
        return caml_call3(Value[1][1][2], buf, pos$4, v2$0);
       default:
        var
         v1$2 = param[1],
         pos$5 = caml_call3(Bin_prot_Write[30], buf, pos, 3);
        return caml_call3(Core[523], buf, pos$5, v1$2);
     }
    }
    var bin_writer_t = [0, bin_size_t, bin_write_t];
    function bin_read_t(buf, pos_ref, vint){
     return caml_call2
             (Bin_prot_Common[19], cst_map_ml_Make_with_value_dif, pos_ref[1]);
    }
    function bin_read_t$0(buf, pos_ref){
     var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
     if(3 < match >>> 0)
      return caml_call2(Bin_prot_Common[18], _A_, pos_ref[1]);
     switch(match){
       case 0:
        var arg_1 = caml_call2(Key[5], buf, pos_ref); return [0, arg_1];
       case 1:
        var
         arg_1$0 = caml_call2(Key[5], buf, pos_ref),
         arg_2 = caml_call2(Value[1][1][3], buf, pos_ref);
        return [1, arg_1$0, arg_2];
       case 2:
        var
         arg_1$1 = caml_call2(Key[5], buf, pos_ref),
         arg_2$0 = caml_call2(Value[1][1][3], buf, pos_ref);
        return [2, arg_1$1, arg_2$0];
       default:
        var arg_1$2 = caml_call2(Core[525], buf, pos_ref);
        return [3, arg_1$2];
     }
    }
    var
     bin_reader_t = [0, bin_read_t$0, bin_read_t],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
     Diff =
       [0,
        t_of_sexp,
        sexp_of_t,
        bin_shape_t,
        bin_size_t,
        bin_write_t,
        bin_writer_t,
        bin_read_t,
        bin_read_t$0,
        bin_reader_t,
        bin_t];
    function t_of_sexp$0(x_128){return caml_call2(Core[432], Diff[1], x_128);}
    function sexp_of_t$0(x_129){return caml_call2(Core[431], Diff[2], x_129);}
    var
     _aJ_ = caml_call1(Core[419], Diff[3]),
     _aK_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$5), 0, _aJ_], 0],
     _aL_ = caml_call1(Bin_shape[4][1], cst_map_ml_333_4),
     group$0 = caml_call2(Bin_prot_Shape[2], _aL_, _aK_),
     _aM_ = caml_call1(Bin_shape[2][1], cst_t$6),
     bin_shape_t$0 =
       caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _aM_), 0);
    function bin_size_t$0(v){return caml_call2(Core[420], Diff[4], v);}
    function bin_write_t$0(buf, pos, v){
     return caml_call4(Core[421], Diff[5], buf, pos, v);
    }
    var bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0];
    function bin_read_t$1(buf, pos_ref, vint){
     return caml_call3(caml_call1(Core[424], Diff[8]), buf, pos_ref, vint);
    }
    function bin_read_t$2(buf, pos_ref){
     return caml_call2(caml_call1(Core[423], Diff[8]), buf, pos_ref);
    }
    var
     bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
     bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0],
     Update =
       [0,
        Diff,
        t_of_sexp$0,
        sexp_of_t$0,
        bin_shape_t$0,
        bin_size_t$0,
        bin_write_t$0,
        bin_writer_t$0,
        bin_read_t$1,
        bin_read_t$2,
        bin_reader_t$0,
        bin_t$0],
     to_diffs = Plain[6],
     of_diffs = Plain[5],
     diffs = Plain[4],
     update = Plain[3],
     empty = Plain[2];
    return [0, , Update, empty, update, diffs, of_diffs, to_diffs];
   }
   caml_call8
    (Ppx_inline_test_lib[9],
     Inline_test_config,
     "tests of Make_with_value_diffs",
     0,
     cst_map_ml$19,
     344,
     0,
     1757,
     function(param){
      var
       include =
         caml_call1
          (Diffable_Atomic[1],
           [0,
            Core_Int[73],
            Core_Int[74],
            Core_Int[75],
            Core_Int[76],
            Core_Int[77],
            Core_Int[78],
            Core_Int[79],
            Core_Int[80],
            Core_Int[81],
            Core_Int[82],
            Core_Int[92]]),
       Update = include[1],
       update = include[2],
       diffs = include[3],
       to_diffs = include[4],
       of_diffs = include[5],
       include$0 =
         Make_with_value_diffs
          ([0,
            Core_Int[81],
            Core_Int[82],
            Core_Int[73],
            Core_Int[74],
            Core_Int[75],
            Core_Int[76],
            Core_Int[77],
            Core_Int[78],
            Core_Int[79],
            Core_Int[80],
            Core_Int[102]],
           [0, Update, update, diffs, to_diffs, of_diffs]),
       Update$0 = include$0[2],
       update$0 = include$0[4],
       diffs$0 = include$0[5],
       of_diffs$0 = include$0[6],
       to_diffs$0 = include$0[7];
      function compare(a_130, b_131){
       return caml_call3
               (Core_Int[103][2],
                function(a_132, b_133){
                 return caml_call2(Core[358], a_132, b_133);
                },
                a_130,
                b_131);
      }
      function sexp_of_t(x_138){
       return caml_call2(Core_Int[103][42], Core[363], x_138);
      }
      var
       quickcheck_generator =
         caml_call2(Core_Int[103][34], Core_Int[118], Core_Int[118]),
       Expect_test_collector$0 =
         caml_call1(Expect_test_collector[2], Expect_test_config),
       _an_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_map_ml$10),
          380,
          11294,
          11309,
          11313],
       _ao_ =
         [0,
          [0,
           _E_,
           _D_,
           [0,
            caml_call1(Expect_test_common_File[1][6], cst_map_ml$11),
            380,
            11294,
            11302,
            11308],
           _an_],
          0],
       _ap_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_map_ml$13),
          364,
          10720,
          10724,
          11314],
       _aq_ =
         caml_call1
          (Expect_test_common_File[4][3], cst_acff55ddfbca9a1df80c878372$1);
      caml_call9
       (Expect_test_collector$0[3],
        _aq_,
        _ap_,
        cst_map_ml$12,
        _F_,
        0,
        _ao_,
        0,
        Inline_test_config,
        function(param){
         function sexp_of_t$0(param){
          var
           to_diffs_142 = param[2],
           t_140 = param[1],
           arg_143 = Update$0[3].call(null, to_diffs_142),
           bnds_139 = [0, [1, [0, _B_, [0, arg_143, 0]]], 0],
           arg_141 = sexp_of_t(t_140),
           bnds_139$0 = [0, [1, [0, _C_, [0, arg_141, 0]]], bnds_139];
          return [1, bnds_139$0];
         }
         var
          _aA_ =
            caml_call2
             (Core_Quickcheck[4][4][2],
              quickcheck_generator,
              function(t){
               var
                _aC_ = to_diffs$0(t),
                _aD_ = caml_call1(Core_List[173], _aC_);
               return caml_call2
                       (Core_Quickcheck[4][4][3],
                        _aD_,
                        function(to_diffs){return [0, t, to_diffs];});
              });
         caml_call9
          (Core_Quickcheck[12],
           0,
           0,
           0,
           0,
           0,
           [0, sexp_of_t$0],
           0,
           _aA_,
           function(param){
            var
             to_diffs = param[2],
             expect = param[1],
             got = of_diffs$0(to_diffs);
            function comparator(a_146, b_147){return compare(a_146, b_147);}
            return caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos$1,
                     sexp_of_t,
                     comparator,
                     0,
                     0,
                     0,
                     expect,
                     got);
           });
         var
          _aB_ =
            [0,
             caml_call1(Expect_test_common_File[1][6], cst_map_ml$9),
             380,
             11294,
             11302,
             11308];
         return caml_call1(Expect_test_collector$0[1], _aB_);
        });
      var
       Expect_test_collector$1 =
         caml_call1(Expect_test_collector[2], Expect_test_config),
       _ar_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_map_ml$15),
          401,
          11978,
          11993,
          11997],
       _as_ =
         [0,
          [0,
           _K_,
           _J_,
           [0,
            caml_call1(Expect_test_common_File[1][6], cst_map_ml$16),
            401,
            11978,
            11986,
            11992],
           _ar_],
          0],
       _at_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_map_ml$18),
          383,
          11323,
          11327,
          11998],
       _au_ =
         caml_call1
          (Expect_test_common_File[4][3], cst_acff55ddfbca9a1df80c878372$2);
      caml_call9
       (Expect_test_collector$1[3],
        _au_,
        _at_,
        cst_map_ml$17,
        _L_,
        0,
        _as_,
        0,
        Inline_test_config,
        function(param){
         function sexp_of_t$0(param){
          var
           diffs_153 = param[3],
           to_151 = param[2],
           from_149 = param[1],
           arg_154 = Update$0[3].call(null, diffs_153),
           bnds_148 = [0, [1, [0, _G_, [0, arg_154, 0]]], 0],
           arg_152 = sexp_of_t(to_151),
           bnds_148$0 = [0, [1, [0, _H_, [0, arg_152, 0]]], bnds_148],
           arg_150 = sexp_of_t(from_149),
           bnds_148$1 = [0, [1, [0, _I_, [0, arg_150, 0]]], bnds_148$0];
          return [1, bnds_148$1];
         }
         var
          _av_ =
            caml_call2
             (Core_Quickcheck[4][4][4],
              quickcheck_generator,
              quickcheck_generator),
          _aw_ =
            caml_call2
             (Core_Quickcheck[4][4][2],
              _av_,
              function(param){
               var
                to = param[2],
                from = param[1],
                _ay_ = diffs$0(from, to),
                _az_ = caml_call1(Core_List[173], _ay_);
               return caml_call2
                       (Core_Quickcheck[4][4][3],
                        _az_,
                        function(diffs){return [0, from, to, diffs];});
              });
         caml_call9
          (Core_Quickcheck[12],
           0,
           0,
           0,
           0,
           0,
           [0, sexp_of_t$0],
           0,
           _aw_,
           function(param){
            var
             diffs = param[3],
             expect = param[2],
             from = param[1],
             got = update$0(from, diffs);
            function comparator(a_159, b_160){return compare(a_159, b_160);}
            return caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos$2,
                     sexp_of_t,
                     comparator,
                     0,
                     0,
                     0,
                     expect,
                     got);
           });
         var
          _ax_ =
            [0,
             caml_call1(Expect_test_common_File[1][6], cst_map_ml$14),
             401,
             11978,
             11986,
             11992];
         return caml_call1(Expect_test_collector$1[1], _ax_);
        });
      return 0;
     });
   caml_call1(Ppx_inline_test_lib[6], cst_diffable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Diffable_Map);
   var
    _d_ = [0, cst_Remove$1],
    _e_ = [0, cst_Add$1],
    _f_ = [0, cst_Idle$1],
    cst_Idle = cst_Idle$1,
    cst_Add = cst_Add$1,
    cst_Remove = cst_Remove$1,
    cst_t = cst_t$7,
    cst_map_ml_78_6 = "map.ml:78:6",
    cst_t$0 = cst_t$7,
    cst_map_ml_Make_Update_Diff_t = cst_map_ml_Make_Update_Diff_t$0,
    _g_ = [1, cst_map_ml_Make_Update_Diff_t$0],
    cst_t$1 = cst_t$7,
    cst_map_ml_85_4 = "map.ml:85:4",
    cst_t$2 = cst_t$7,
    Diffable_Map =
      [0,
       function(Key, Value){
        var
         Plain = Make_plain([0, Key[2], Key[11]], [0, Value[2], Value[11]]);
        function t_of_sexp(sexp_015){
         a:
         {
          if(0 === sexp_015[0]){
           var _aj_ = sexp_015[1];
           b:
           if(_aj_ !== cst_Add$1){
            c:
            if(_aj_ !== cst_Idle$1){
             if(_aj_ !== cst_Remove$1){
              if(_aj_ === cst_add) break b;
              if(_aj_ === cst_idle) break c;
              if(_aj_ !== cst_remove) break a;
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5], error_source_013, sexp_015);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[5], error_source_013, sexp_015);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5], error_source_013, sexp_015);
          }
          var _ak_ = sexp_015[1];
          if(! _ak_)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[7], error_source_013, sexp_015);
          var _al_ = _ak_[1];
          if(0 !== _al_[0])
           return caml_call2
                   (Sexplib0_Sexp_conv_error[6], error_source_013, sexp_015);
          var tag_016 = _al_[1];
          b:
          if(tag_016 !== cst_Add$1){
           c:
           if(tag_016 !== cst_Idle$1){
            if(tag_016 !== cst_Remove$1){
             if(tag_016 === cst_add) break b;
             if(tag_016 === cst_idle) break c;
             if(tag_016 !== cst_remove) break a;
            }
            var sexp_args_017 = _ak_[2];
            if(sexp_args_017 && ! sexp_args_017[2]){
             var
              arg0_018 = sexp_args_017[1],
              res0_019 = caml_call1(Key[1], arg0_018);
             return [0, res0_019];
            }
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],
                     error_source_013,
                     tag_016,
                     sexp_015);
           }
           var sexp_args_029 = _ak_[2];
           if(sexp_args_029 && ! sexp_args_029[2]){
            var
             arg0_030 = sexp_args_029[1],
             res0_031 = caml_call1(Core[535], arg0_030);
            return [2, res0_031];
           }
           return caml_call3
                   (Sexplib0_Sexp_conv_error[4],
                    error_source_013,
                    tag_016,
                    sexp_015);
          }
          var sexp_args_022 = _ak_[2];
          if(sexp_args_022){
           var _am_ = sexp_args_022[2];
           if(_am_ && ! _am_[2]){
            var
             arg1_024 = _am_[1],
             arg0_023 = sexp_args_022[1],
             res0_025 = caml_call1(Key[1], arg0_023),
             res1_026 = caml_call1(Value[1], arg1_024);
            return [1, res0_025, res1_026];
           }
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4],
                   error_source_013,
                   tag_016,
                   sexp_015);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[8], error_source_013, sexp_015);
        }
        function sexp_of_t(param){
         switch(param[0]){
           case 0:
            var arg0_032 = param[1], res0_033 = caml_call1(Key[2], arg0_032);
            return [1, [0, _d_, [0, res0_033, 0]]];
           case 1:
            var
             arg1_035 = param[2],
             arg0_034 = param[1],
             res0_036 = caml_call1(Key[2], arg0_034),
             res1_037 = caml_call1(Value[2], arg1_035);
            return [1, [0, _e_, [0, res0_036, [0, res1_037, 0]]]];
           default:
            var
             arg0_038 = param[1],
             res0_039 = caml_call1(Core[534], arg0_038);
            return [1, [0, _f_, [0, res0_039, 0]]];
         }
        }
        var
         _Z_ =
           caml_call1
            (Bin_prot_Shape[5],
             [0,
              [0, cst_Remove, [0, Key[7], 0]],
              [0,
               [0, cst_Add, [0, Key[7], [0, Value[7], 0]]],
               [0, [0, cst_Idle, [0, Core[521], 0]], 0]]]),
         ___ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _Z_], 0],
         _$_ = caml_call1(Bin_shape[4][1], cst_map_ml_78_6),
         group = caml_call2(Bin_prot_Shape[2], _$_, ___),
         _aa_ = caml_call1(Bin_shape[2][1], cst_t$0),
         bin_shape_t =
           caml_call1(caml_call2(Bin_prot_Shape[10], group, _aa_), 0);
        function bin_size_t(param){
         switch(param[0]){
           case 0:
            var v1 = param[1], _af_ = caml_call1(Key[3], v1);
            return caml_call2(Bin_prot_Common[23], 1, _af_);
           case 1:
            var
             v2 = param[2],
             v1$0 = param[1],
             _ag_ = caml_call1(Key[3], v1$0),
             size = caml_call2(Bin_prot_Common[23], 1, _ag_),
             _ah_ = caml_call1(Value[3], v2);
            return caml_call2(Bin_prot_Common[23], size, _ah_);
           default:
            var v1$1 = param[1], _ai_ = caml_call1(Core[522], v1$1);
            return caml_call2(Bin_prot_Common[23], 1, _ai_);
         }
        }
        function bin_write_t(buf, pos, param){
         switch(param[0]){
           case 0:
            var
             v1 = param[1],
             pos$0 = caml_call3(Bin_prot_Write[30], buf, pos, 0);
            return caml_call3(Key[4], buf, pos$0, v1);
           case 1:
            var
             v2 = param[2],
             v1$0 = param[1],
             pos$1 = caml_call3(Bin_prot_Write[30], buf, pos, 1),
             pos$2 = caml_call3(Key[4], buf, pos$1, v1$0);
            return caml_call3(Value[4], buf, pos$2, v2);
           default:
            var
             v1$1 = param[1],
             pos$3 = caml_call3(Bin_prot_Write[30], buf, pos, 2);
            return caml_call3(Core[523], buf, pos$3, v1$1);
         }
        }
        var bin_writer_t = [0, bin_size_t, bin_write_t];
        function bin_read_t(buf, pos_ref, vint){
         return caml_call2
                 (Bin_prot_Common[19],
                  cst_map_ml_Make_Update_Diff_t,
                  pos_ref[1]);
        }
        function bin_read_t$0(buf, pos_ref){
         var match = caml_call2(Bin_prot_Read[29], buf, pos_ref);
         if(2 < match >>> 0)
          return caml_call2(Bin_prot_Common[18], _g_, pos_ref[1]);
         switch(match){
           case 0:
            var arg_1 = caml_call2(Key[5], buf, pos_ref); return [0, arg_1];
           case 1:
            var
             arg_1$0 = caml_call2(Key[5], buf, pos_ref),
             arg_2 = caml_call2(Value[5], buf, pos_ref);
            return [1, arg_1$0, arg_2];
           default:
            var arg_1$1 = caml_call2(Core[525], buf, pos_ref);
            return [2, arg_1$1];
         }
        }
        var
         bin_reader_t = [0, bin_read_t$0, bin_read_t],
         bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
        function t_of_sexp$0(x_041){
         return caml_call2(Core[432], t_of_sexp, x_041);
        }
        function sexp_of_t$0(x_042){
         return caml_call2(Core[431], sexp_of_t, x_042);
        }
        var
         _ab_ = caml_call1(Core[419], bin_shape_t),
         _ac_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$1), 0, _ab_], 0],
         _ad_ = caml_call1(Bin_shape[4][1], cst_map_ml_85_4),
         group$0 = caml_call2(Bin_prot_Shape[2], _ad_, _ac_),
         _ae_ = caml_call1(Bin_shape[2][1], cst_t$2),
         bin_shape_t$0 =
           caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _ae_), 0);
        function bin_size_t$0(v){return caml_call2(Core[420], bin_size_t, v);}
        function bin_write_t$0(buf, pos, v){
         return caml_call4(Core[421], bin_write_t, buf, pos, v);
        }
        var bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0];
        function bin_read_t$1(buf, pos_ref, vint){
         return caml_call3
                 (caml_call1(Core[424], bin_read_t$0), buf, pos_ref, vint);
        }
        function bin_read_t$2(buf, pos_ref){
         return caml_call2(caml_call1(Core[423], bin_read_t$0), buf, pos_ref);
        }
        var
         bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
         bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0],
         to_diffs = Plain[7],
         of_diffs = Plain[6],
         diffs = Plain[5],
         update = Plain[4],
         empty = Plain[3],
         sexp_of_t$1 = Plain[2];
        return [0,
                sexp_of_t$1,
                [0,
                 [0,
                  bin_size_t,
                  bin_write_t,
                  bin_read_t$0,
                  bin_read_t,
                  bin_shape_t,
                  bin_writer_t,
                  bin_reader_t,
                  bin_t,
                  t_of_sexp,
                  sexp_of_t],
                 bin_size_t$0,
                 bin_write_t$0,
                 bin_read_t$2,
                 bin_read_t$1,
                 bin_shape_t$0,
                 bin_writer_t$0,
                 bin_reader_t$0,
                 bin_t$0,
                 t_of_sexp$0,
                 sexp_of_t$0],
                update,
                diffs,
                to_diffs,
                of_diffs,
                empty];
       },
       function(_W_, _V_){
        var _X_ = Make_plain(_W_, _V_), _Y_ = _X_[1];
        return [0,
                _X_[2],
                [0, [0, _Y_[1][1]], _Y_[2]],
                _X_[4],
                _X_[5],
                _X_[7],
                _X_[6],
                _X_[3]];
       },
       function(_R_, _Q_){
        var _S_ = Make_with_value_diffs(_R_, _Q_), _T_ = _S_[2], _U_ = _T_[1];
        return [0,
                [0,
                 [0,
                  _U_[1],
                  _U_[2],
                  _U_[4],
                  _U_[5],
                  _U_[8],
                  _U_[7],
                  _U_[3],
                  _U_[6],
                  _U_[9],
                  _U_[10]],
                 _T_[2],
                 _T_[3],
                 _T_[5],
                 _T_[6],
                 _T_[9],
                 _T_[8],
                 _T_[4],
                 _T_[7],
                 _T_[10],
                 _T_[11]],
                _S_[4],
                _S_[5],
                _S_[7],
                _S_[6],
                _S_[3]];
       },
       function(_N_, _M_){
        var _O_ = Make_plain_with_value_diffs(_N_, _M_), _P_ = _O_[1];
        return [0,
                [0, [0, _P_[1][1]], _P_[2]],
                _O_[3],
                _O_[4],
                _O_[6],
                _O_[5],
                _O_[2]];
       }];
   runtime.caml_register_global(156, Diffable_Map, cst_Diffable_Map);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Diffable__Diffable_streamable
//# unitInfo: Requires: Bin_prot__Shape, Bin_shape, Core, Core__Either, Core__Int, Core__List, Core__Map, Core__Or_error, Core__Quickcheck, Core__Sequence, Expect_test_collector, Inline_test_config, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Stored_reversed
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Diffable_Diffable_streamab = "Diffable__Diffable_streamable",
    cst_diffable = "diffable",
    cst_diffable_streamable_ml$2 = "diffable_streamable.ml",
    cst_t$1 = "t";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    pos$1 = "diffable_streamable.ml:150:25",
    pos$0 = "diffable_streamable.ml:141:36",
    pos = "diffable_streamable.ml:133:36",
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Core_Quickcheck = global_data.Core__Quickcheck,
    Core_Sequence = global_data.Core__Sequence,
    Core = global_data.Core,
    Core_Either = global_data.Core__Either,
    Core_Int = global_data.Core__Int,
    Core_Map = global_data.Core__Map,
    Core_Or_error = global_data.Core__Or_error,
    Core_List = global_data.Core__List,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Inline_test_config = global_data.Inline_test_config,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Stored_reversed = global_data.Stored_reversed,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector;
   caml_call1(Ppx_module_timer_runtime[4], cst_Diffable_Diffable_streamab);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_diffable);
   caml_call1(Expect_test_collector[6][1], cst_diffable_streamable_ml$2);
   caml_call2
    (Ppx_inline_test_lib[5], cst_diffable, cst_diffable_streamable_ml$2);
   var
    cst_BUG_Impossible_case = "BUG: Impossible case",
    cst_of_diffs_Should_not_contai = "of_diffs: Should not contain removals",
    cst_t = cst_t$1,
    cst_diffable_streamable_ml_118 = "diffable_streamable.ml:118:10",
    cst_t$0 = cst_t$1,
    cst_diffable_streamable_ml = cst_diffable_streamable_ml$2,
    cst_streamable_intermediate_ro =
      "streamable intermediate round-trip works",
    cst_diffable_streamable_ml$0 = cst_diffable_streamable_ml$2,
    cst_streamable_round_trip_work = "streamable round-trip works",
    cst_diffable_streamable_ml$1 = cst_diffable_streamable_ml$2,
    cst_streamable_diff_update_wor = "streamable diff/update works";
   function Make_rpc(T, Diff){
    var
     to_diffs = T[4],
     of_diffs = T[5],
     bin_size_t = Diff[1],
     bin_write_t = Diff[2],
     bin_read_t = Diff[3],
     bin_read_t$0 = Diff[4],
     bin_shape_t = Diff[5],
     bin_writer_t = Diff[6],
     bin_reader_t = Diff[7],
     bin_t = Diff[8];
    function create(param){return Stored_reversed[4];}
    var apply_part = Stored_reversed[5];
    function to_parts(t){
     var _x_ = caml_call1(to_diffs, t);
     return caml_call1(Core_Sequence[109], _x_);
    }
    function finalize(t){
     return caml_call1(of_diffs, caml_call1(Stored_reversed[8], t));
    }
    return [0,
            [0,
             [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t],
             create,
             apply_part],
            to_parts,
            finalize];
   }
   caml_call8
    (Ppx_inline_test_lib[9],
     Inline_test_config,
     "streamable test",
     0,
     cst_diffable_streamable_ml$2,
     51,
     0,
     2965,
     function(param){
      function sexp_of_t(x_001){
       return caml_call2(Core_Int[103][42], Core[534], x_001);
      }
      function compare(a_002, b_003){
       return caml_call3
               (Core_Int[103][2],
                function(a_004, b_005){
                 return caml_call2(Core[529], a_004, b_005);
                },
                a_002,
                b_003);
      }
      function _b_(map, key){return caml_call3(Core_Map[36], map, key, 0);}
      var _c_ = Core_Int[103][4], _d_ = Core_List[20];
      function of_list(_w_){return caml_call3(_d_, _w_, _c_, _b_);}
      var
       to_list = Core_Map[76],
       _e_ = caml_call1(Core_List[166], Core_Int[118]),
       quickcheck_generator = caml_call2(Core_Quickcheck[1][10], _e_, of_list),
       _f_ = caml_call1(Core_List[168], Core_Int[120]),
       quickcheck_shrinker =
         caml_call3(Core_Quickcheck[3][6], _f_, of_list, to_list);
      function sexp_of_t$0(x_006){
       return caml_call3(Core_Either[14], Core[363], Core[363], x_006);
      }
      var Diff = [0, sexp_of_t$0];
      function sexp_of_t$1(x_007){
       return caml_call2(Core[431], Diff[1], x_007);
      }
      var Update = [0, Diff, sexp_of_t$1];
      function update(t, diffs){
       return caml_call3
               (Core_List[20],
                diffs,
                t,
                function(acc, change){
                 if(0 === change[0]){
                  var x = change[1];
                  return caml_call2(Core_Map[45], acc, x);
                 }
                 var x$0 = change[1];
                 return caml_call3(Core_Map[36], acc, x$0, 0);
                });
      }
      function diffs(from, to){
       var
        _s_ =
          caml_call3(Core_Map[84], from, to, function(_v_, param){return 1;}),
        _t_ =
          caml_call2
           (Core_Sequence[41],
            _s_,
            function(param){
             var change = param[2], key = param[1], _u_ = change[1];
             return 847852583 === _u_
                     ? [0, key]
                     : 1013247643
                       <= _u_
                       ? caml_call1(Core[5], cst_BUG_Impossible_case)
                       : [1, key];
            });
       return caml_call1(Core_Sequence[27], _t_);
      }
      function of_diffs(diffs){
       var
        _p_ = caml_call1(Core_Sequence[109], diffs),
        _q_ =
          caml_call2
           (Core_Sequence[41],
            _p_,
            function(param){
             if(0 === param[0])
              return caml_call1(Core[5], cst_of_diffs_Should_not_contai);
             var x = param[1];
             return [0, x, 0];
            }),
        _r_ = caml_call2(Core_Map[118][15], Core_Int[102], _q_);
       return caml_call1(Core_Or_error[36], _r_);
      }
      function to_diffs(to){return diffs(Core_Int[103][4], to);}
      var
       _g_ = Core[350],
       _h_ = caml_call1(caml_call1(Core_Either[31][1][2], Core[350]), _g_),
       _i_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _h_], 0],
       _j_ = caml_call1(Bin_shape[4][1], cst_diffable_streamable_ml_118),
       group = caml_call2(Bin_prot_Shape[2], _j_, _i_),
       _k_ = caml_call1(Bin_shape[2][1], cst_t$0),
       bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _k_), 0);
      function bin_size_t(v){
       return caml_call3(Core_Either[31][1][3], Core[351], Core[351], v);
      }
      function bin_write_t(buf, pos, v){
       return caml_call5
               (Core_Either[31][1][4], Core[352], Core[352], buf, pos, v);
      }
      var bin_writer_t = [0, bin_size_t, bin_write_t];
      function bin_read_t(buf, pos_ref, vint){
       return caml_call3
               (caml_call2(Core_Either[31][1][6], Core[354], Core[354]),
                buf,
                pos_ref,
                vint);
      }
      function bin_read_t$0(buf, pos_ref){
       return caml_call2
               (caml_call2(Core_Either[31][1][5], Core[354], Core[354]),
                buf,
                pos_ref);
      }
      var
       bin_reader_t = [0, bin_read_t$0, bin_read_t],
       bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
       U =
         Make_rpc
          ([0, Update, update, diffs, to_diffs, of_diffs],
           [0,
            bin_size_t,
            bin_write_t,
            bin_read_t$0,
            bin_read_t,
            bin_shape_t,
            bin_writer_t,
            bin_reader_t,
            bin_t]);
      caml_call8
       (Ppx_inline_test_lib[8],
        Inline_test_config,
        cst_streamable_intermediate_ro,
        0,
        cst_diffable_streamable_ml,
        123,
        4,
        431,
        function(param){
         caml_call9
          (Core_Quickcheck[12],
           0,
           0,
           0,
           [0, quickcheck_shrinker],
           0,
           [0, sexp_of_t],
           0,
           quickcheck_generator,
           function(expect){
            var
             acc = caml_call1(U[1][2], 0),
             _n_ = U[1][3],
             _o_ = caml_call1(U[2], expect),
             acc$0 = caml_call3(Core_Sequence[18], _o_, acc, _n_),
             got = caml_call1(U[3], acc$0);
            function comparator(a_008, b_009){return compare(a_008, b_009);}
            return caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos,
                     sexp_of_t,
                     comparator,
                     0,
                     0,
                     0,
                     expect,
                     got);
           });
         return 0;
        });
      caml_call8
       (Ppx_inline_test_lib[8],
        Inline_test_config,
        cst_streamable_round_trip_work,
        0,
        cst_diffable_streamable_ml$0,
        136,
        4,
        243,
        function(param){
         caml_call9
          (Core_Quickcheck[12],
           0,
           0,
           0,
           [0, quickcheck_shrinker],
           0,
           [0, sexp_of_t],
           0,
           quickcheck_generator,
           function(expect){
            var got = of_diffs(to_diffs(expect));
            function comparator(a_010, b_011){return compare(a_010, b_011);}
            return caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos$0,
                     sexp_of_t,
                     comparator,
                     0,
                     0,
                     0,
                     expect,
                     got);
           });
         return 0;
        });
      caml_call8
       (Ppx_inline_test_lib[8],
        Inline_test_config,
        cst_streamable_diff_update_wor,
        0,
        cst_diffable_streamable_ml$1,
        144,
        4,
        357,
        function(param){
         var
          _l_ =
            caml_call2
             (Core_Quickcheck[1][38],
              quickcheck_generator,
              quickcheck_generator),
          _m_ =
            [0,
             caml_call2
              (Core_Quickcheck[3][9],
               quickcheck_shrinker,
               quickcheck_shrinker)];
         caml_call9
          (Core_Quickcheck[12],
           0,
           0,
           0,
           _m_,
           0,
           [0,
            function(param){
             var
              arg1_013 = param[2],
              arg0_012 = param[1],
              res0_014 = sexp_of_t(arg0_012),
              res1_015 = sexp_of_t(arg1_013);
             return [1, [0, res0_014, [0, res1_015, 0]]];
            }],
           0,
           _l_,
           function(param){
            var
             expect = param[2],
             from = param[1],
             got = update(from, diffs(from, expect));
            function comparator(a_016, b_017){return compare(a_016, b_017);}
            return caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos$1,
                     sexp_of_t,
                     comparator,
                     0,
                     0,
                     0,
                     expect,
                     got);
           });
         return 0;
        });
      return 0;
     });
   caml_call1(Ppx_inline_test_lib[6], cst_diffable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Diffable_Diffable_streamab);
   var
    Diffable_Diffable_streamable =
      [0,
       function(T){
        var Update = T[1], to_diffs = T[4], of_diffs = T[5];
        function create(param){return Stored_reversed[4];}
        var apply_part = Stored_reversed[5];
        function to_parts(t){
         var _a_ = caml_call1(to_diffs, t);
         return caml_call1(Core_Sequence[109], _a_);
        }
        function finalize(t){
         return caml_call1(of_diffs, caml_call1(Stored_reversed[8], t));
        }
        return [0, [0, Update[1], create, apply_part], to_parts, finalize];
       },
       Make_rpc];
   runtime.caml_register_global
    (40, Diffable_Diffable_streamable, cst_Diffable_Diffable_streamab);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Diffable
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Diffable = "Diffable",
    cst_diffable = "diffable",
    cst_diffable_ml = "diffable.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Diffable);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_diffable);
   caml_call1(Expect_test_collector[6][1], cst_diffable_ml);
   caml_call2(Ppx_inline_test_lib[5], cst_diffable, cst_diffable_ml);
   caml_call1(Ppx_inline_test_lib[6], cst_diffable);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Diffable);
   var Diffable = [0];
   runtime.caml_register_global(11, Diffable, cst_Diffable);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
