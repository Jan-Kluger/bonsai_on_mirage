// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Enum__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Enum = [0];
   runtime.caml_register_global(0, Enum, "Enum__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Enum__Enum_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Enum_Enum_intf = "Enum__Enum_intf",
    cst_enum = "enum";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Enum_Enum_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_enum);
   caml_call1(Expect_test_collector[6][1], "enum/src/enum_intf.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_enum, "enum_intf.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_enum);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Enum_Enum_intf);
   var Enum_Enum_intf = [0];
   runtime.caml_register_global(11, Enum_Enum_intf, cst_Enum_Enum_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Enum
//# unitInfo: Requires: Base, Base__Char, Base__Field, Base__Fn, Base__List, Base__Map, Base__Option, Base__String, CamlinternalLazy, Command, Enum__Enum_intf, Expect_test_collector, Parsexp, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = " ",
    cst_Enum = "Enum",
    cst_enum = "enum",
    caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = "",
    cst = cst$2,
    cst$0 = cst$2,
    pos$0 = "enum/src/enum.ml:44:17",
    message =
      [0,
       "This enumerable type is intended to be defined in alphabetic order"],
    pos = "enum/src/enum.ml:26:15",
    Base = global_data.Base,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Map = global_data.Base__Map,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_String = global_data.Base__String,
    Base_List = global_data.Base__List,
    Stdlib_String = global_data.Stdlib__String,
    Command = global_data.Command,
    Base_Fn = global_data.Base__Fn,
    Base_Option = global_data.Base__Option,
    Parsexp = global_data.Parsexp,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Base_Field = global_data.Base__Field,
    Base_Char = global_data.Base__Char,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Enum);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_enum);
   caml_call1(Expect_test_collector[6][1], "enum/src/enum.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_enum, "enum.ml");
   var
    cst_Enum_t_expects_atomic_sexp = "Enum.t expects atomic sexps.",
    _a_ = [0, ", "],
    _b_ = [0, ")", 0],
    cst_can_be_comma_separated_val = " (can be comma-separated values: ",
    _c_ = [0, "known_values"],
    cst_Unknown_value = "Unknown value.";
   function command_friendly_name(s){
    var
     _F_ = caml_call1(Base_Char[15], 39),
     _G_ = caml_call3(Base_String[109], 95, 45, s),
     _H_ = caml_call1(Base_String[71], _G_);
    return caml_call2(Base_String[10], _H_, _F_);
   }
   function atom(m, a){
    var sexp = caml_call1(m[1], a);
    if(0 === sexp[0]){var s = sexp[1]; return s;}
    var
     _D_ = [0, caml_call1(Base[85][4], sexp), 0],
     _E_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Enum_t_expects_atomic_sexp),
         _D_]];
    return caml_call1(Base[217], _E_);
   }
   function to_string_hum(m, a){return command_friendly_name(atom(m, a));}
   function check_field_name(t, a, field){
    var
     t2 = command_friendly_name(caml_call1(Base_Field[2], field)),
     t1 = to_string_hum(t, a),
     sexpifier = Base[177];
    function comparator(a_001, b_002){
     return caml_call2(Base[171], a_001, b_002);
    }
    return caml_call8
            (Ppx_assert_lib_Runtime[2],
             pos,
             sexpifier,
             comparator,
             0,
             0,
             0,
             t1,
             t2);
   }
   function to_string_hum$0(M, a){return to_string_hum([0, M[2]], a);}
   function check_field_name$0(M, a, field){
    return check_field_name([0, M[2]], a, field);
   }
   function enum$0(M){
    return caml_call2
            (Base_List[52],
             M[1],
             function(a){return [0, to_string_hum$0(M, a), a];});
   }
   function assert_alphabetic_order_exn(here, M){
    var
     _B_ = [0, M[2]],
     as_strings =
       caml_call2(Base_List[52], M[1], function(_C_){return atom(_B_, _C_);}),
     expect = caml_call2(Base_List[81], as_strings, Base_String[51]),
     here$0 = [0, here, 0];
    function sexpifier(x_007){return caml_call2(Base[148], Base[177], x_007);}
    function comparator(a_003, b_004){
     return caml_call3
             (Base[143],
              function(a_005, b_006){
               return caml_call2(Base[171], a_005, b_006);
              },
              a_003,
              b_004);
    }
    return caml_call8
            (Ppx_assert_lib_Runtime[3],
             pos$0,
             sexpifier,
             comparator,
             here$0,
             message,
             0,
             expect,
             as_strings);
   }
   function arg_type(case_sensitive, key, list_values_in_help, S){
    var all = S[1];
    function sexp_of_t(t){
     var _A_ = to_string_hum$0(S, t);
     return caml_call1(Parsexp[3][10], _A_);
    }
    return caml_call6
            (Command[2][8],
             0,
             case_sensitive,
             list_values_in_help,
             0,
             key,
             [0, all, sexp_of_t]);
   }
   function create
   (case_sensitive, key, represent_choice_with, list_values_in_help, doc, m){
    if(represent_choice_with)
     var
      represent_choice_with$0 = represent_choice_with[1],
      _z_ = caml_call2(Base[212], cst, doc),
      doc$0 = caml_call2(Base[212], represent_choice_with$0, _z_);
    else
     var doc$0 = caml_call2(Base[212], cst$0, doc);
    return [0, arg_type(case_sensitive, key, list_values_in_help, m), doc$0];
   }
   function make_param
   (f,
    case_sensitive,
    represent_choice_with,
    list_values_in_help,
    aliases,
    key,
    flag_name,
    doc,
    m){
    var
     match =
       create
        (case_sensitive,
         key,
         represent_choice_with,
         list_values_in_help,
         doc,
         m),
     doc$0 = match[2],
     arg_type = match[1],
     _y_ = caml_call1(f, arg_type);
    return caml_call5(Command[5][17], aliases, 0, flag_name, _y_, doc$0);
   }
   function make_param_optional_with_defau
   (default$0,
    case_sensitive,
    represent_choice_with,
    list_values_in_help,
    aliases,
    key,
    flag_name,
    doc,
    m){
    var
     match =
       create
        (case_sensitive,
         key,
         represent_choice_with,
         list_values_in_help,
         doc,
         m),
     doc$0 = match[2],
     arg_type = match[1];
    return caml_call7
            (Command[5][18],
             aliases,
             0,
             flag_name,
             arg_type,
             function(default$0){return [0, to_string_hum$0(m, default$0)];},
             default$0,
             doc$0);
   }
   function make_param_one_of_flags(opt, aliases, doc, m){
    var
     if_nothing_chosen = opt ? opt[1] : 0,
     _v_ = enum$0(m),
     _w_ =
       caml_call2
        (Base_List[52],
         _v_,
         function(param){
          var
           enum$0 = param[2],
           name = param[1],
           aliases$0 =
             caml_call2
              (Base_Option[22],
               aliases,
               function(aliases){return caml_call1(aliases, enum$0);}),
           doc$0 = caml_call1(doc, enum$0),
           _x_ = caml_call1(Command[5][44], enum$0);
          return caml_call5(Command[5][17], aliases$0, 0, name, _x_, doc$0);
         });
    return caml_call2(Command[5][22], _w_, if_nothing_chosen);
   }
   function make_param_optional_comma_sepa
   (allow_empty,
    unique_values,
    case_sensitive,
    represent_choice_with,
    list_values_in_help,
    aliases,
    key,
    flag_name,
    doc,
    m){
    var
     _p_ = Base[213],
     _q_ = enum$0(m),
     _r_ = caml_call2(Base_List[52], _q_, _p_),
     _s_ =
       caml_call2
        (Base_List[81],
         _r_,
         function(a_008, b_009){return caml_call2(Base[171], a_008, b_009);}),
     options = caml_call2(Base_String[67], _a_, _s_),
     _t_ =
       caml_call2
        (Stdlib_String[7],
         cst$1,
         [0, doc, [0, cst_can_be_comma_separated_val, [0, options, _b_]]]),
     _u_ = Command[2][9];
    return make_param
            (caml_call2
              (Base_Fn[5],
               Command[5][37],
               function(eta){
                return caml_call1
                        (caml_call4(_u_, allow_empty, 0, 0, unique_values), eta);
               }),
             case_sensitive,
             represent_choice_with,
             list_values_in_help,
             aliases,
             key,
             flag_name,
             _t_,
             m);
   }
   function Make_of_string(M){
    var
     to_string = M[2],
     known_values =
       [246,
        function(param){
         var _n_ = caml_call1(Base_Map[6], [0, Base_String[59]]);
         return caml_call3
                 (Base_List[20],
                  M[1],
                  _n_,
                  function(map, t){
                   var _o_ = caml_call1(to_string, t);
                   return caml_call3(Base_Map[32], map, _o_, t);
                  });
        }];
    function of_string(s){
     var _g_ = caml_obj_tag(known_values);
     a:
     if(250 === _g_)
      var _h_ = known_values[1];
     else{
      if(246 !== _g_ && 244 !== _g_){var _h_ = known_values; break a;}
      var _h_ = caml_call1(CamlinternalLazy[2], known_values);
     }
     var match = caml_call2(Base_Map[40], _h_, s);
     if(match){var t = match[1]; return t;}
     var _i_ = caml_obj_tag(known_values);
     a:
     if(250 === _i_)
      var _j_ = known_values[1];
     else{
      if(246 !== _i_ && 244 !== _i_){var _j_ = known_values; break a;}
      var _j_ = caml_call1(CamlinternalLazy[2], known_values);
     }
     var
      known_values$0 = caml_call1(Base_Map[70], _j_),
      _k_ =
        [0,
         [1,
          [0, _c_, [0, caml_call2(Base[148], Base[177], known_values$0), 0]]],
         0],
      _l_ = [0, caml_call1(Sexplib0_Sexp_conv[7], s), _k_],
      _m_ =
        [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_Unknown_value), _l_]];
     return caml_call1(Base[217], _m_);
    }
    return [0, to_string, of_string];
   }
   caml_call1(Ppx_inline_test_lib[6], cst_enum);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Enum);
   var
    Enum =
      [0,
       to_string_hum$0,
       check_field_name$0,
       enum$0,
       assert_alphabetic_order_exn,
       make_param,
       make_param_one_of_flags,
       make_param_optional_with_defau,
       make_param_optional_comma_sepa,
       arg_type,
       function(M){
        var all = M[1];
        function to_string(_f_){return to_string_hum$0(M, _f_);}
        var
         include = Make_of_string([0, all, to_string]),
         to_string$0 = include[1],
         of_string = include[2];
        return [0, of_string, to_string$0];
       },
       function(_d_){
        var _e_ = Make_of_string(_d_);
        return [0, _e_[2], _e_[1]];
       },
       [0, to_string_hum, check_field_name]];
   runtime.caml_register_global(37, Enum, cst_Enum);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
