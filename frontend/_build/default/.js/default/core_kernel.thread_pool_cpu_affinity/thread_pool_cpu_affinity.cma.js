// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Thread_pool_cpu_affinity__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Thread_pool_cpu_affinity = [0];
   runtime.caml_register_global
    (0, Thread_pool_cpu_affinity, "Thread_pool_cpu_affinity__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Thread_pool_cpu_affinity__Import
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Thread_pool_cpu_affinity_I = "Thread_pool_cpu_affinity__Import",
    cst_thread_pool_cpu_affinity = "thread_pool_cpu_affinity";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Thread_pool_cpu_affinity_I);
   caml_call1
    (Ppx_bench_lib_Benchmark_accumu[1][1], cst_thread_pool_cpu_affinity);
   caml_call1
    (Expect_test_collector[6][1], "thread_pool_cpu_affinity/src/import.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_thread_pool_cpu_affinity, "import.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_thread_pool_cpu_affinity);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Thread_pool_cpu_affinity_I);
   var Thread_pool_cpu_affinity_Impor = [0];
   runtime.caml_register_global
    (11, Thread_pool_cpu_affinity_Impor, cst_Thread_pool_cpu_affinity_I);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Thread_pool_cpu_affinity
//# unitInfo: Requires: Core__Int, Core__List, Core__Set, Core__Validated, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv_error, Validate
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Cpuset = "Cpuset",
    cst_Inherit = "Inherit",
    cst_Thread_pool_cpu_affinity = "Thread_pool_cpu_affinity",
    cst_cpuset = "cpuset",
    cst_inherit = "inherit",
    cst_thread_pool_cpu_affinity = "thread_pool_cpu_affinity",
    cst_thread_pool_cpu_affinity_s =
      "thread_pool_cpu_affinity/src/thread_pool_cpu_affinity.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    here = [0, cst_thread_pool_cpu_affinity_s, 8, 125, 142],
    error_source_004 =
      "thread_pool_cpu_affinity/src/thread_pool_cpu_affinity.ml.t",
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Core_Int = global_data.Core__Int,
    Core_Set = global_data.Core__Set,
    Core_List = global_data.Core__List,
    Validate = global_data.Validate,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Validated = global_data.Core__Validated;
   caml_call1(Ppx_module_timer_runtime[4], cst_Thread_pool_cpu_affinity);
   caml_call1
    (Ppx_bench_lib_Benchmark_accumu[1][1], cst_thread_pool_cpu_affinity);
   caml_call1(Expect_test_collector[6][1], cst_thread_pool_cpu_affinity_s);
   caml_call2
    (Ppx_inline_test_lib[5],
     cst_thread_pool_cpu_affinity,
     "thread_pool_cpu_affinity.ml");
   var
    t_of_sexp = Core_Int[104][26],
    sexp_of_t = Core_Int[104][27],
    cst_Thread_pool_cpuset = "Thread_pool_cpuset",
    _a_ = [0, 1];
   function validate(t){
    var
     _i_ = Core_Int[115],
     _j_ = caml_call1(Core_Set[39], t),
     _k_ = caml_call2(Core_List[50], _j_, _i_),
     _l_ = caml_call2(Validate[9], cst_Thread_pool_cpuset, _k_),
     _m_ = caml_call1(Core_Set[9], t),
     _n_ = caml_call2(Core_Int[111], _a_, _m_);
    return caml_call2(Validate[30], _n_, _l_);
   }
   var
    include =
      caml_call1(Core_Validated[2], [0, t_of_sexp, sexp_of_t, here, validate]),
    t_of_sexp$0 = include[1],
    sexp_of_t$0 = include[2],
    create = include[3],
    create_exn = include[4],
    raw = include[5],
    create_stable_witness = include[6],
    type_equal = include[7];
   function equal(t1, t2){
    var _g_ = caml_call1(raw, t2), _h_ = caml_call1(raw, t1);
    return caml_call2(Core_Int[104][3], _h_, _g_);
   }
   var
    Cpuset =
      [0,
       t_of_sexp$0,
       sexp_of_t$0,
       create,
       create_exn,
       raw,
       create_stable_witness,
       type_equal,
       equal],
    _b_ = [0, cst_Cpuset],
    _c_ = [0, cst_Inherit];
   function t_of_sexp$1(sexp_006){
    a:
    {
     if(0 === sexp_006[0]){
      var _d_ = sexp_006[1];
      b:
      if(_d_ !== cst_Cpuset){
       if(_d_ !== cst_Inherit){
        if(_d_ === cst_cpuset) break b;
        if(_d_ !== cst_inherit) break a;
       }
       return 0;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5], error_source_004, sexp_006);
     }
     var _e_ = sexp_006[1];
     if(! _e_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_004, sexp_006);
     var _f_ = _e_[1];
     if(0 !== _f_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_004, sexp_006);
     var tag_007 = _f_[1];
     b:
     if(tag_007 !== cst_Cpuset){
      if(tag_007 !== cst_Inherit){
       if(tag_007 === cst_cpuset) break b;
       if(tag_007 !== cst_inherit) break a;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[3], error_source_004, sexp_006);
     }
     var sexp_args_008 = _e_[2];
     if(sexp_args_008 && ! sexp_args_008[2]){
      var
       arg0_009 = sexp_args_008[1],
       res0_010 = caml_call1(Cpuset[1], arg0_009);
      return [0, res0_010];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4],
              error_source_004,
              tag_007,
              sexp_006);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_004, sexp_006);
   }
   function sexp_of_t$1(param){
    if(! param) return _c_;
    var arg0_011 = param[1], res0_012 = caml_call1(Cpuset[2], arg0_011);
    return [1, [0, _b_, [0, res0_012, 0]]];
   }
   caml_call1(Ppx_inline_test_lib[6], cst_thread_pool_cpu_affinity);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Thread_pool_cpu_affinity);
   var Thread_pool_cpu_affinity = [0, Cpuset, t_of_sexp$1, sexp_of_t$1];
   runtime.caml_register_global
    (31, Thread_pool_cpu_affinity, cst_Thread_pool_cpu_affinity);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhyZWFkX3Bvb2xfY3B1X2FmZmluaXR5LmNtYS5qcyIsInNlY3Rpb25zIjpbeyJvZmZzZXQiOnsibGluZSI6NywiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsImZpbGUiOiJ0aHJlYWRfcG9vbF9jcHVfYWZmaW5pdHkuY21hLmpzIiwibmFtZXMiOlsicnVudGltZSIsIlRocmVhZF9wb29sX2NwdV9hZmZpbml0eSJdLCJzb3VyY2VzIjpbIi9idWlsdGluL2JsYWNrYm94Lm1sIl0sIm1hcHBpbmdzIjoiT0FBQUEsVUFBQSx5QkFBQUMsMkJBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIoKiBnZW5lcmF0ZWQgY29kZSAqKSJdLCJpZ25vcmVMaXN0IjpbMF19fSx7Im9mZnNldCI6eyJsaW5lIjoyMCwiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsImZpbGUiOiJ0aHJlYWRfcG9vbF9jcHVfYWZmaW5pdHkuY21hLmpzIiwibmFtZXMiOlsicnVudGltZSIsImNzdF9UaHJlYWRfcG9vbF9jcHVfYWZmaW5pdHlfSSIsImNzdF90aHJlYWRfcG9vbF9jcHVfYWZmaW5pdHkiLCJjYW1sX2NhbGwxIiwiZiIsImEwIiwiY2FtbF9jYWxsMiIsImExIiwiZ2xvYmFsX2RhdGEiLCJQcHhfbW9kdWxlX3RpbWVyX3J1bnRpbWUiLCJQcHhfYmVuY2hfbGliX0JlbmNobWFya19hY2N1bXUiLCJFeHBlY3RfdGVzdF9jb2xsZWN0b3IiLCJQcHhfaW5saW5lX3Rlc3RfbGliIiwiVGhyZWFkX3Bvb2xfY3B1X2FmZmluaXR5X0ltcG9yIl0sInNvdXJjZXMiOlsiL2J1aWx0aW4vYmxhY2tib3gubWwiLCIvVXNlcnMveWFubmljay8ub3BhbS9ib25zYWktZnJvbnRlbmQvbGliL2NvcmVfa2VybmVsL3RocmVhZF9wb29sX2NwdV9hZmZpbml0eS9pbXBvcnQubWwiXSwibWFwcGluZ3MiOiJJQUFBQSxVQUFBO0FBQUEsSUFBQUMsaUNBQUE7QUFBQSxJQUFBQywrQkFBQTtBQUFBLFlBQUFDLFdBQUFDLEdBQUFDO0FBQUFBLElBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUFBQyxXQUFBRixHQUFBQyxJQUFBRTtBQUFBQSxJQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBQyxjQUFBO0FBQUEsSUFBQUMsMkJBQUE7QUFBQSxJQUFBQztBQUFBQSxNQUFBO0FBQUEsSUFBQUMsd0JBQUE7QUFBQSxJQUFBQyxzQkFBQTtBQUFBLEdDQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUFVO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FBQUMsaUNBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFREFWIiwic291cmNlc0NvbnRlbnQiOlsiKCogZ2VuZXJhdGVkIGNvZGUgKikiLCJvcGVuISBDb3JlXG4iXSwiaWdub3JlTGlzdCI6WzBdfX0seyJvZmZzZXQiOnsibGluZSI6NjQsImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhyZWFkX3Bvb2xfY3B1X2FmZmluaXR5LmNtYS5qcyIsIm5hbWVzIjpbInJ1bnRpbWUiLCJjc3RfQ3B1c2V0IiwiY3N0X0luaGVyaXQiLCJjc3RfVGhyZWFkX3Bvb2xfY3B1X2FmZmluaXR5IiwiY3N0X2NwdXNldCIsImNzdF9pbmhlcml0IiwiY3N0X3RocmVhZF9wb29sX2NwdV9hZmZpbml0eSIsImNzdF90aHJlYWRfcG9vbF9jcHVfYWZmaW5pdHlfcyIsImNhbWxfY2FsbDEiLCJmIiwiYTAiLCJjYW1sX2NhbGwyIiwiYTEiLCJjYW1sX2NhbGwzIiwiYTIiLCJnbG9iYWxfZGF0YSIsImhlcmUiLCJlcnJvcl9zb3VyY2VfMDA0IiwiU2V4cGxpYjBfU2V4cF9jb252X2Vycm9yIiwiQ29yZV9JbnQiLCJDb3JlX1NldCIsIkNvcmVfTGlzdCIsIlZhbGlkYXRlIiwiUHB4X21vZHVsZV90aW1lcl9ydW50aW1lIiwiUHB4X2JlbmNoX2xpYl9CZW5jaG1hcmtfYWNjdW11IiwiRXhwZWN0X3Rlc3RfY29sbGVjdG9yIiwiUHB4X2lubGluZV90ZXN0X2xpYiIsIkNvcmVfVmFsaWRhdGVkIiwidF9vZl9zZXhwIiwic2V4cF9vZl90IiwiY3N0X1RocmVhZF9wb29sX2NwdXNldCIsInZhbGlkYXRlIiwidCIsImluY2x1ZGUiLCJjcmVhdGUiLCJjcmVhdGVfZXhuIiwicmF3IiwiY3JlYXRlX3N0YWJsZV93aXRuZXNzIiwidHlwZV9lcXVhbCIsImVxdWFsIiwidDEiLCJ0MiIsIkNwdXNldCIsInNleHBfMDA2IiwidGFnXzAwNyIsInNleHBfYXJnc18wMDgiLCJhcmcwXzAwOSIsInJlczBfMDEwIiwicGFyYW0iLCJhcmcwXzAxMSIsInJlczBfMDEyIiwiVGhyZWFkX3Bvb2xfY3B1X2FmZmluaXR5Il0sInNvdXJjZXMiOlsiL2J1aWx0aW4vYmxhY2tib3gubWwiLCIvVXNlcnMveWFubmljay8ub3BhbS9ib25zYWktZnJvbnRlbmQvbGliL2NvcmVfa2VybmVsL3RocmVhZF9wb29sX2NwdV9hZmZpbml0eS90aHJlYWRfcG9vbF9jcHVfYWZmaW5pdHkubWwiXSwibWFwcGluZ3MiOiJJQUFBQSxVQUFBO0FBQUEsSUFBQUMsYUFBQTtBQUFBLElBQUFDLGNBQUE7QUFBQSxJQUFBQywrQkFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxjQUFBO0FBQUEsSUFBQUMsK0JBQUE7QUFBQSxJQUFBQztBQUFBQSxNQUFBO0FBQUEsWUFBQUMsV0FBQUMsR0FBQUM7QUFBQUEsSUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFlBQUFDLFdBQUFGLEdBQUFDLElBQUFFO0FBQUFBLElBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUFBQyxXQUFBSixHQUFBQyxJQUFBRSxJQUFBRTtBQUFBQSxJQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBQyxjQUFBO0FBQUEsSUFBQUMsT0FBQTtBQUFBLElBQUFDO0FBQUFBLE1BQUE7QUFBQSxJQUFBQywyQkFBQTtBQUFBLElBQUFDLFdBQUE7QUFBQSxJQUFBQyxXQUFBO0FBQUEsSUFBQUMsWUFBQTtBQUFBLElBQUFDLFdBQUE7QUFBQSxJQUFBQywyQkFBQTtBQUFBLElBQUFDO0FBQUFBLE1BQUE7QUFBQSxJQUFBQyx3QkFBQTtBQUFBLElBQUFDLHNCQUFBO0FBQUEsSUFBQUMsaUJBQUE7QUFBQSxHQ0FBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFDLFlBQUE7QUFBQSxJQUFBQyxZQUFBO0FBQUEsSUFBQUMseUJBQUE7QUFBQTtBQUFBLFlBQUFDLFNBQUFDO0FBQUFBO0FBQUFBLEtBQUEsTUFZVztBQUFBO0FBQUE7QUFBQSxXQUFEO0FBQUEsV0FEbUM7QUFBQSxXQUFuQztBQUFBLElBQWtELHlDQUdOO0FBQUE7QUFBQTtBQUFBLElBQUFDO0FBQUFBLE1BZHREO0FBQUEsSUFBQUwsY0FBQTtBQUFBLElBQUFDLGNBQUE7QUFBQSxJQUFBSyxTQUFBO0FBQUEsSUFBQUMsYUFBQTtBQUFBLElBQUFDLE1BQUE7QUFBQSxJQUFBQyx3QkFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxZQUFBQyxNQUFBQyxJQUFBQztBQUFBQSxRQUFBLE1Ba0I4QywyQkFBWjtBQUFBLElBQVcsNkNBQVk7QUFBQTtBQUFBO0FBQUEsSUFBQUM7QUFBQUEsTUFsQnpEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFVBcUJBO0FBQUE7QUFBQSxZQUFBZCxZQUFBZTtBQUFBQTtBQUFBQTtBQUFBQSxLQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxPQUNFO0FBQUE7QUFBQSxNQURGO0FBQUEsdUVBR2lCO0FBQUE7QUFBQSxlQUhqQjtBQUFBO0FBQUE7QUFBQSx1RUFHaUI7QUFBQSxlQUhqQjtBQUFBO0FBQUE7QUFBQSx1RUFHaUI7QUFBQSxTQUFBQyxVQUhqQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsdUVBR2lCO0FBQUE7QUFBQSxTQUFBQyxnQkFIakI7QUFBQSxLQUVFO0FBQUE7QUFBQSxPQUFBQyxXQUFBO0FBQUEsT0FBQUMsV0FBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHVCQUNlO0FBQUE7QUFBQSxJQUhqQiwwRUFHaUI7QUFBQTtBQUFBLFlBQUFsQixZQUFBbUI7QUFBQUEsSUFIakIsWUFDRTtBQUFBLFFBQUFDLFdBREYsVUFBQUMsV0FFRTtBQUFBO0FBQUEsR0FDZTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FBQUMsMkJBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFRHhCakIiLCJzb3VyY2VzQ29udGVudCI6WyIoKiBnZW5lcmF0ZWQgY29kZSAqKSIsIm9wZW4hIENvcmVcbm9wZW4hIEltcG9ydFxuXG5tb2R1bGUgQ3B1c2V0ID0gc3RydWN0XG4gIGluY2x1ZGUgVmFsaWRhdGVkLk1ha2UgKHN0cnVjdFxuICAgICAgdHlwZSB0ID0gSW50LlNldC50IFtAQGRlcml2aW5nIHNleHBdXG5cbiAgICAgIGxldCBoZXJlID0gWyVoZXJlXVxuXG4gICAgICBsZXQgdmFsaWRhdGUgdCA9XG4gICAgICAgIFZhbGlkYXRlLmZpcnN0X2ZhaWx1cmVcbiAgICAgICAgICAoSW50LnZhbGlkYXRlX2xib3VuZCB+bWluOihJbmNsIDEpIChTZXQubGVuZ3RoIHQpKVxuICAgICAgICAgIChTZXQudG9fbGlzdCB0XG4gICAgICAgICAgIHw+IExpc3QubWFwIH5mOkludC52YWxpZGF0ZV9ub25fbmVnYXRpdmVcbiAgICAgICAgICAgfD4gVmFsaWRhdGUubmFtZV9saXN0IFwiVGhyZWFkX3Bvb2xfY3B1c2V0XCIpXG4gICAgICA7O1xuICAgIGVuZClcblxuICBsZXQgZXF1YWwgdDEgdDIgPSBJbnQuU2V0LmVxdWFsICh0MSB8PiByYXcpICh0MiB8PiByYXcpXG5lbmRcblxudHlwZSB0ID1cbiAgfCBJbmhlcml0XG4gIHwgQ3B1c2V0IG9mIENwdXNldC50XG5bQEBkZXJpdmluZyBzZXhwXVxuIl0sImlnbm9yZUxpc3QiOlswXX19XX0=
