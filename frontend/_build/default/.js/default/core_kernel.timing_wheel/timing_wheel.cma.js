// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Timing_wheel__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Timing_wheel = [0];
   runtime.caml_register_global(0, Timing_wheel, "Timing_wheel__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Timing_wheel__Import
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Timing_wheel_Import = "Timing_wheel__Import",
    cst_timing_wheel = "timing_wheel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Timing_wheel_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_timing_wheel);
   caml_call1(Expect_test_collector[6][1], "timing_wheel/src/import.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_timing_wheel, "import.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_timing_wheel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Timing_wheel_Import);
   var Timing_wheel_Import = [0];
   runtime.caml_register_global
    (11, Timing_wheel_Import, cst_Timing_wheel_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Timing_wheel__Timing_wheel_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Timing_wheel_Timing_wheel_ = "Timing_wheel__Timing_wheel_intf",
    cst_timing_wheel = "timing_wheel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Timing_wheel_Timing_wheel_);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_timing_wheel);
   caml_call1
    (Expect_test_collector[6][1], "timing_wheel/src/timing_wheel_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_timing_wheel, "timing_wheel_intf.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_timing_wheel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Timing_wheel_Timing_wheel_);
   var Timing_wheel_Timing_wheel_intf = [0];
   runtime.caml_register_global
    (11, Timing_wheel_Timing_wheel_intf, cst_Timing_wheel_Timing_wheel_);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Timing_wheel
//# unitInfo: Requires: Base__Field, Base__Invariant, Base__Sexpable, Core, Core__Array, Core__Binable, Core__Int, Core__Int63, Core__List, Core__Time_ns, Core__Time_ns_alternate_sexp, Expect_test_collector, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_record, Tuple_pool
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Timing_wheel = "Timing_wheel",
    cst_Timing_wheel_max_alarm_tim$1 =
      "Timing_wheel.max_alarm_time_in_min_interval_exn of empty timing wheel",
    cst = "_",
    cst_alarm_precision$0 = "alarm_precision",
    cst_at = "at",
    cst_bits = "bits",
    cst_bits_per_slot = "bits_per_slot",
    cst_capacity$0 = "capacity",
    cst_config = "config",
    cst_diff_max_min_allowed_key = "diff_max_min_allowed_key",
    cst_elt_key_lower_bound = "elt_key_lower_bound",
    cst_index = "index",
    cst_interval_num = "interval_num",
    cst_key = "key",
    cst_keys_per_slot = "keys_per_slot",
    cst_length = "length",
    cst_level_bits$0 = "level_bits",
    cst_levels = "levels",
    cst_max_allowed_alarm_time = "max_allowed_alarm_time",
    cst_max_allowed_key = "max_allowed_key",
    cst_max_interval_num = "max_interval_num",
    cst_min_allowed_key = "min_allowed_key",
    cst_min_elt = "min_elt",
    cst_min_key_in_same_slot_mask = "min_key_in_same_slot_mask",
    cst_now = "now",
    cst_now_interval_num_start = "now_interval_num_start",
    cst_pool = "pool",
    cst_priority_queue = "priority_queue",
    cst_slots = "slots",
    cst_slots_mask = "slots_mask",
    cst_start = "start",
    cst_timing_wheel = "timing_wheel",
    cst_timing_wheel_src_timing_wh = "timing_wheel/src/timing_wheel.ml",
    cst_value = "value",
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    pos$9 = "timing_wheel/src/timing_wheel.ml:1619:26",
    pos$8 = "timing_wheel/src/timing_wheel.ml:1616:26",
    pos$7 = "timing_wheel/src/timing_wheel.ml:1632:26",
    pos$6 = "timing_wheel/src/timing_wheel.ml:1637:26",
    arg_087 = [0, cst],
    pos$5 = "timing_wheel/src/timing_wheel.ml:995:32",
    pos$4 = "timing_wheel/src/timing_wheel.ml:992:32",
    pos$3 = "timing_wheel/src/timing_wheel.ml:902:31",
    pos$2 = "timing_wheel/src/timing_wheel.ml:909:30",
    pos$1 = "timing_wheel/src/timing_wheel.ml:920:31",
    pos$0 = "timing_wheel/src/timing_wheel.ml:938:32",
    pos = "timing_wheel/src/timing_wheel.ml:943:30",
    error_source_019 = "timing_wheel/src/timing_wheel.ml.Config.t",
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Core_Time_ns_alternate_sexp = global_data.Core__Time_ns_alternate_sexp,
    Assert_failure = global_data.Assert_failure,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Base_Invariant = global_data.Base__Invariant,
    Core_Time_ns = global_data.Core__Time_ns,
    Core_List = global_data.Core__List;
   global_data.Base__Field;
   var
    Core_Int63 = global_data.Core__Int63,
    Core_Array = global_data.Core__Array,
    Tuple_pool = global_data.Tuple_pool,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Int = global_data.Core__Int,
    Core_Binable = global_data.Core__Binable,
    Base_Sexpable = global_data.Base__Sexpable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Timing_wheel);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_timing_wheel);
   caml_call1(Expect_test_collector[6][1], cst_timing_wheel_src_timing_wh);
   caml_call2(Ppx_inline_test_lib[5], cst_timing_wheel, "timing_wheel.ml");
   var
    max_time = Core_Time_ns_alternate_sexp[45],
    min_time = Core_Time_ns_alternate_sexp[43],
    zero = Core_Int[57],
    to_int = Core_Int[63],
    t_of_sexp = Core_Int[81],
    sexp_of_t = Core_Int[82],
    symbol = Core_Int[86],
    symbol$0 = Core_Int[87],
    symbol$1 = Core_Int[89],
    equal = Core_Int[92],
    max_num_bits = Core_Int63[59] - 1 | 0,
    min_value = 0,
    _a_ = [0, cst_timing_wheel_src_timing_wh, 83, 4],
    _b_ = [0, cst_timing_wheel_src_timing_wh, 82, 4],
    _c_ = [0, cst_timing_wheel_src_timing_wh, 114, 4],
    _d_ = [0, cst_timing_wheel_src_timing_wh, 117, 6],
    cst_Level_bits_create_exn_requ =
      "Level_bits.create_exn requires a nonempty list",
    cst_Level_bits_create_exn_got_ =
      "Level_bits.create_exn got nonpositive num bits",
    _e_ = [0, "max_num_bits"],
    _f_ = [0, "got"],
    cst_Level_bits_create_exn_got_$0 =
      "Level_bits.create_exn got too many bits";
   function invariant(t){
    if(! caml_call2(symbol, t, min_value))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    if(caml_call2(symbol$0, t, max_num_bits)) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function of_int(i){invariant(i); return i;}
   function symbol$2(t1, t2){var t = t1 + t2 | 0; invariant(t); return t;}
   function symbol$3(t1, t2){var t = t1 - t2 | 0; invariant(t); return t;}
   function pow2(t){return caml_call2(Core_Int63[48], Core_Int63[15], t);}
   function sexp_of_t$0(x_007){
    return caml_call2(Core[431], sexp_of_t, x_007);
   }
   function num_bits_internal(t){
    return caml_call3(Core_List[20], t, zero, symbol$2);
   }
   function num_bits(t){return num_bits_internal(t);}
   function invariant$0(t){
    if(caml_call1(Core_List[18], t))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    caml_call2
     (Core_List[19],
      t,
      function(num_key_bits){
       invariant(num_key_bits);
       if(caml_call2(symbol$1, num_key_bits, zero)) return 0;
       throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
      });
    return invariant(num_bits_internal(t));
   }
   function t_of_sexp$0(x_006){
    var t = caml_call2(Core[432], t_of_sexp, x_006);
    invariant$0(t);
    return t;
   }
   function create_exn(opt, x_008){
    var extend_to_max_num_bits = opt ? opt[1] : 0;
    if(caml_call1(Core_List[18], x_008))
     caml_call1(Core[5], cst_Level_bits_create_exn_requ);
    if
     (caml_call2
       (Core_List[23],
        x_008,
        function(bits){return caml_call2(Core[88], bits, 0);})){
     var
      _dO_ = [0, caml_call2(Core[431], Core[363], x_008), 0],
      _dP_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Level_bits_create_exn_got_),
          _dO_]];
     caml_call1(Core[255], _dP_);
    }
    var
     num_bits =
       caml_call3
        (Core_List[20],
         x_008,
         0,
         function(_dX_, _dW_){return _dX_ + _dW_ | 0;});
    if(caml_call2(Core[90], num_bits, max_num_bits)){
     var
      _dQ_ =
        [0, [1, [0, _e_, [0, caml_call1(Core[363], max_num_bits), 0]]], 0],
      _dR_ = [0, [1, [0, _f_, [0, caml_call1(Core[363], num_bits), 0]]], _dQ_],
      _dS_ = [0, caml_call2(Core[431], Core[363], x_008), _dR_],
      _dT_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Level_bits_create_exn_got_$0),
          _dS_]];
     caml_call1(Core[255], _dT_);
    }
    if(extend_to_max_num_bits)
     var
      _dU_ = caml_call1(Core[236], 1),
      _dV_ = caml_call2(Core_List[40], max_num_bits - num_bits | 0, _dU_),
      ints = caml_call2(Core[155], x_008, _dV_);
    else
     var ints = x_008;
    return caml_call2(Core_List[50], ints, of_int);
   }
   var
    level_bits_default =
      create_exn
       (0, [0, 11, [0, 10, [0, 10, [0, 10, [0, 10, [0, 10, [0, 1, 0]]]]]]]),
    compare = Core[358],
    cst_Alarm_precision_to_span_of =
      "[Alarm_precision.to_span] of negative power of two nanoseconds";
   function equal$0(x_012, x_013){
    return 0 === caml_call2(compare, x_012, x_013) ? 1 : 0;
   }
   function to_sexpable(t){
    if(caml_call2(Core[91], t, 0)){
     var
      _dL_ = [0, caml_call1(Core[363], t), 0],
      _dM_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Alarm_precision_to_span_of),
          _dL_]];
     caml_call1(Core[255], _dM_);
    }
    var _dN_ = caml_call1(caml_call1(Core_Int63[48], Core_Int63[15]), t);
    return caml_call1(Core_Time_ns[1][130], _dN_);
   }
   function sexp_of_t$1(t){
    var _dK_ = to_sexpable(t);
    return caml_call1(Core_Time_ns[1][10], _dK_);
   }
   var
    about_one_microsecond = 10,
    _g_ = [0, "span"],
    cst_Alarm_precision_of_span_fl =
      "[Alarm_precision.of_span_floor_pow2_ns] got non-positive span";
   function mul(t, pow2){return t + pow2 | 0;}
   function div(t, pow2){return t - pow2 | 0;}
   function of_span_floor_pow2_ns(span){
    if(caml_call2(Core_Time_ns[1][16], span, Core_Time_ns[1][75])){
     var
      _dH_ =
        [0, [1, [0, _g_, [0, caml_call1(Core_Time_ns[1][10], span), 0]]], 0],
      _dI_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Alarm_precision_of_span_fl),
          _dH_]];
     caml_call1(Core[255], _dI_);
    }
    var _dJ_ = caml_call1(Core_Time_ns[1][129], span);
    return caml_call1(Core_Int63[87], _dJ_);
   }
   var
    _h_ = Core_Time_ns[1],
    _i_ =
      caml_call1
       (caml_call1
         (Core_Binable[6], [0, _h_[5], _h_[1], _h_[2], _h_[3], _h_[4]]),
        [0, to_sexpable, of_span_floor_pow2_ns]),
    bin_size_t = _i_[1],
    bin_write_t = _i_[2],
    bin_read_t = _i_[3],
    bin_read_t$0 = _i_[4],
    bin_shape_t = _i_[5],
    bin_writer_t = _i_[6],
    bin_reader_t = _i_[7],
    bin_t = _i_[8],
    _j_ = Core_Time_ns[1],
    include =
      caml_call1
       (caml_call1(Base_Sexpable[1], [0, _j_[9], _j_[10]]),
        [0, to_sexpable, of_span_floor_pow2_ns]),
    t_of_sexp$1 = include[1],
    sexp_of_t$2 = include[2],
    _k_ =
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       compare,
       t_of_sexp$1,
       sexp_of_t$2];
   function level_bits(r){return r[2];}
   var
    level_bits$0 =
      [0,
       function(param){return 0;},
       cst_level_bits$0,
       0,
       level_bits,
       function(r, v){return [0, r[1], v, r[3]];}],
    cst_capacity = cst_capacity$0,
    cst_level_bits = cst_level_bits$0,
    cst_alarm_precision = cst_alarm_precision$0,
    _l_ = [0, cst_capacity$0],
    _m_ = [0, cst_level_bits$0],
    _n_ = [0, cst_alarm_precision$0],
    _o_ = [0, cst_timing_wheel_src_timing_wh, 257, 6],
    _p_ = [0, cst_timing_wheel_src_timing_wh, 256, 8261, 8285],
    _q_ = [0, 10, [0, 10, [0, 6, [0, 6, [0, 5, 0]]]]];
   function t_of_sexp$2(x_021){
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_019,
             [0,
              cst_alarm_precision,
              1,
              _k_[10],
              [0,
               cst_level_bits,
               [0, function(param){return level_bits_default;}],
               t_of_sexp$0,
               [0, cst_capacity, 5, Core[364], 0]]],
             function(param){
              return param !== cst_alarm_precision$0
                      ? param
                        !== cst_capacity$0
                        ? param !== cst_level_bits$0 ? -1 : 1
                        : 2
                      : 0;
             },
             0,
             function(param){
              var
               _dG_ = param[2],
               capacity = _dG_[2][1],
               level_bits = _dG_[1],
               alarm_precision = param[1];
              return [0, alarm_precision, level_bits, capacity];
             },
             x_021);
   }
   function sexp_of_t$3(param){
    var
     capacity_027 = param[3],
     level_bits_025 = param[2],
     alarm_precision_023 = param[1],
     bnds_022 = 0;
    if(capacity_027)
     var
      v_028 = capacity_027[1],
      arg_030 = caml_call1(Core[363], v_028),
      bnd_029 = [1, [0, _l_, [0, arg_030, 0]]],
      bnds_022$0 = [0, bnd_029, bnds_022];
    else
     var bnds_022$0 = bnds_022;
    var
     arg_026 = sexp_of_t$0(level_bits_025),
     bnds_022$1 = [0, [1, [0, _m_, [0, arg_026, 0]]], bnds_022$0],
     arg_024 = caml_call1(_k_[11], alarm_precision_023),
     bnds_022$2 = [0, [1, [0, _n_, [0, arg_024, 0]]], bnds_022$1];
    return [1, bnds_022$2];
   }
   function alarm_precision(t){return to_sexpable(t[1]);}
   function max_num_level_bits(alarm_precision){
    invariant(alarm_precision);
    return symbol$3(max_num_bits, alarm_precision);
   }
   function invariant$1(t){
    return caml_call4
            (Base_Invariant[1],
             _p_,
             t,
             sexp_of_t$3,
             function(param){
              var _dF_ = max_num_level_bits(t[1]);
              if(! caml_call2(symbol$0, num_bits_internal(t[2]), _dF_))
               throw caml_maybe_attach_backtrace([0, Assert_failure, _o_], 1);
              var
               level_bits_fun = caml_call2(Base_Invariant[2], t, invariant$0);
              caml_call1(level_bits_fun, level_bits$0);
              return 0;
             });
   }
   function create(capacity, opt, alarm_precision, param){
    var
     level_bits = opt ? opt[1] : level_bits_default,
     max_num_bits = max_num_level_bits(alarm_precision);
    if(caml_call2(symbol$0, num_bits_internal(level_bits), max_num_bits))
     var level_bits$0 = level_bits;
    else
     var
      loop =
        function(t, remaining){
         if(! t) return 0;
         var t$0 = t[2], b = t[1];
         return caml_call2(symbol, b, remaining)
                 ? [0, remaining, 0]
                 : [0, b, loop(t$0, symbol$3(remaining, b))];
        },
      level_bits$0 = loop(level_bits, max_num_bits);
    return [0, alarm_precision, level_bits$0, capacity];
   }
   function microsecond_precision(param){
    return create(0, [0, create_exn(0, _q_)], about_one_microsecond, 0);
   }
   function durations(t){
    var t$0 = t[1];
    invariant(t$0);
    var _dD_ = caml_call1(to_int, t$0);
    return caml_call3
            (Core_List[88],
             t[2],
             _dD_,
             function(num_bits_accum, level_num_bits){
              var
               num_bits_accum$0 =
                 num_bits_accum + caml_call1(to_int, level_num_bits) | 0,
               _dE_ =
                 caml_call2
                   (Core[89], num_bits_accum$0, Core_Int63[59] - 1 | 0)
                  ? Core_Int63[60]
                  : caml_call2
                    (Core_Int63[48], Core_Int63[15], num_bits_accum$0),
               duration = caml_call1(Core_Time_ns[1][130], _dE_);
              return [0, num_bits_accum$0, duration];
             });
   }
   var compare$0 = Core_Int63[111], sexp_of_t$4 = Core_Int63[100];
   function create$0(level_bits){
    var _dB_ = Core_Int63[15], _dC_ = pow2(level_bits);
    return caml_call2(Core_Int63[18], _dC_, _dB_);
   }
   var
    one = Core_Int63[15],
    symbol$4 = Core_Int63[18],
    bit_not = Core_Int63[46],
    sexp_of_t$5 = Core_Int63[100],
    equal$1 = Core_Int63[110];
   function create$1(bits_per_slot){
    return caml_call1(bit_not, caml_call2(symbol$4, pow2(bits_per_slot), one));
   }
   var
    to_int_exn = Core_Int63[5],
    zero$0 = Core_Int63[14],
    one$0 = Core_Int63[15],
    symbol$5 = Core_Int63[17],
    symbol$6 = Core_Int63[19],
    succ = Core_Int63[40],
    pred = Core_Int63[41],
    max_value = Core_Int63[60],
    of_int$0 = Core_Int63[70],
    sexp_of_t$6 = Core_Int63[100],
    symbol$7 = Core_Int63[104],
    symbol$8 = Core_Int63[105],
    symbol$9 = Core_Int63[106],
    symbol$10 = Core_Int63[107],
    symbol$11 = Core_Int63[108],
    symbol$12 = Core_Int63[109],
    equal$2 = Core_Int63[110],
    compare$1 = Core_Int63[111],
    min = Core_Int63[112],
    max = Core_Int63[113],
    ascending = Core_Int63[114],
    descending = Core_Int63[115],
    between = Core_Int63[116],
    clamp_exn = Core_Int63[117],
    clamp = Core_Int63[118],
    Replace_polymorphic_compare = Core_Int63[119],
    comparator = Core_Int63[120],
    Map = Core_Int63[121],
    Set = Core_Int63[122],
    validate_lbound = Core_Int63[129],
    validate_ubound = Core_Int63[130],
    validate_bound = Core_Int63[131];
   function to_int63(t){return t;}
   function of_int63(i){return i;}
   function scale_int(t, i){
    return caml_call2(symbol$6, t, caml_call1(of_int$0, i));
   }
   var
    to_int_exn$0 = Core_Int63[5],
    zero$1 = Core_Int63[14],
    one$1 = Core_Int63[15],
    symbol$13 = Core_Int63[17],
    symbol$14 = Core_Int63[18],
    rem = Core_Int63[26],
    succ$0 = Core_Int63[40],
    pred$0 = Core_Int63[41],
    bit_and = Core_Int63[43],
    shift_right = Core_Int63[49],
    max_value$0 = Core_Int63[60],
    min_value$0 = Core_Int63[61],
    of_int$1 = Core_Int63[70],
    sexp_of_t$7 = Core_Int63[100],
    symbol$15 = Core_Int63[104],
    symbol$16 = Core_Int63[105],
    symbol$17 = Core_Int63[106],
    symbol$18 = Core_Int63[107],
    symbol$19 = Core_Int63[108],
    symbol$20 = Core_Int63[109],
    equal$3 = Core_Int63[110],
    compare$2 = Core_Int63[111],
    min$0 = Core_Int63[112],
    max$0 = Core_Int63[113],
    ascending$0 = Core_Int63[114],
    descending$0 = Core_Int63[115],
    between$0 = Core_Int63[116],
    clamp_exn$0 = Core_Int63[117],
    clamp$0 = Core_Int63[118],
    Replace_polymorphic_compare$0 = Core_Int63[119],
    comparator$0 = Core_Int63[120],
    Map$0 = Core_Int63[121],
    Set$0 = Core_Int63[122],
    hash_fold_t = Core_Int63[123],
    hash = Core_Int63[124],
    hashable = Core_Int63[125],
    Table = Core_Int63[126],
    Hash_set = Core_Int63[127],
    Hash_queue = Core_Int63[128],
    validate_lbound$0 = Core_Int63[129],
    validate_ubound$0 = Core_Int63[130],
    validate_bound$0 = Core_Int63[131];
   function of_int63$0(i){return i;}
   function to_int63$0(t){return t;}
   function add(t, i){return caml_call2(symbol$13, t, i);}
   function add_clamp_to_max(t, i){
    return caml_call2(symbol$18, t, caml_call2(symbol$14, max_value$0, i))
            ? max_value$0
            : caml_call2(symbol$13, t, i);
   }
   function sub(t, i){return caml_call2(symbol$14, t, i);}
   function diff(t1, t2){return caml_call2(symbol$14, t1, t2);}
   var
    _r_ = Set$0[1],
    _s_ = Map$0[1],
    _t_ = Set[1],
    _u_ = Map[1],
    _v_ =
      [0,
       sexp_of_t$6,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol$10,
       symbol$11,
       symbol$12,
       equal$2,
       compare$1,
       min,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       [0,
        [0, _u_[9], _u_[10], _u_[11]],
        Map[2],
        Map[3],
        Map[4],
        Map[5],
        Map[6],
        Map[7],
        Map[8],
        Map[9],
        Map[10],
        Map[11],
        Map[12],
        Map[13],
        Map[14],
        Map[15],
        Map[16],
        Map[17],
        Map[18],
        Map[19],
        Map[20],
        Map[21],
        Map[22],
        Map[23],
        Map[24],
        Map[25],
        Map[26],
        Map[27],
        Map[28],
        Map[29],
        Map[30],
        Map[31],
        Map[32],
        Map[33],
        Map[34],
        Map[35],
        Map[36],
        Map[37],
        Map[38],
        Map[39],
        Map[40],
        Map[41],
        Map[42]],
       [0,
        [0, _t_[1], _t_[2], _t_[11]],
        Set[2],
        Set[3],
        Set[4],
        Set[5],
        Set[6],
        Set[7],
        Set[8],
        Set[9],
        Set[10],
        Set[11],
        Set[12],
        Set[13],
        Set[14],
        Set[15],
        Set[16],
        Set[17],
        Set[18],
        Set[19],
        Set[20],
        Set[21],
        Set[22],
        Set[23],
        Set[24],
        Set[25],
        Set[26],
        Set[27]],
       max,
       zero$0,
       one$0,
       max_value,
       of_int63,
       to_int63,
       of_int$0,
       to_int_exn,
       scale_int,
       pred,
       succ,
       symbol$5];
   function sexp_of_pool_slots(of_a_033, x_034){
    var
     _dx_ =
       caml_call1
        (Tuple_pool[36][3][1],
         function(_dA_){return sexp_of_pool_slots(of_a_033, _dA_);}),
     _dy_ =
       caml_call1
        (Tuple_pool[36][3][1],
         function(_dz_){return sexp_of_pool_slots(of_a_033, _dz_);});
    return caml_call7
            (Tuple_pool[36][1][8],
             sexp_of_t$7,
             Core_Time_ns_alternate_sexp[92],
             of_a_033,
             Core[363],
             _dy_,
             _dx_,
             x_034);
   }
   function sexp_of_t$8(of_a_035, x_036){
    return caml_call2
            (Tuple_pool[36][3][1],
             function(_dw_){return sexp_of_pool_slots(of_a_035, _dw_);},
             x_036);
   }
   var
    null$0 = Tuple_pool[36][3][4],
    null$1 = Tuple_pool[36][3][4],
    is_null = Tuple_pool[36][3][5],
    free = Tuple_pool[36][14];
   function key(p, t){
    return caml_call3(Tuple_pool[36][31], p, t, Tuple_pool[36][2][3]);
   }
   function at(p, t){
    return caml_call3(Tuple_pool[36][31], p, t, Tuple_pool[36][2][4]);
   }
   function value(p, t){
    return caml_call3(Tuple_pool[36][31], p, t, Tuple_pool[36][2][5]);
   }
   function level_index(p, t){
    return caml_call3(Tuple_pool[36][31], p, t, Tuple_pool[36][2][6]);
   }
   function prev(p, t){
    return caml_call3(Tuple_pool[36][31], p, t, Tuple_pool[36][2][7]);
   }
   function set_prev(p, t, x){
    return caml_call4(Tuple_pool[36][33], p, t, Tuple_pool[36][2][7], x);
   }
   function next(p, t){
    return caml_call3(Tuple_pool[36][31], p, t, Tuple_pool[36][2][8]);
   }
   function set_next(p, t, x){
    return caml_call4(Tuple_pool[36][33], p, t, Tuple_pool[36][2][8], x);
   }
   function is_valid(p, t){return caml_call2(Tuple_pool[36][6], p, t);}
   var
    grow = Tuple_pool[36][12],
    is_full = Tuple_pool[36][13],
    cst_Timing_wheel_got_invalid_a = "Timing_wheel got invalid alarm";
   function of_external_exn(pool, t){
    if(is_valid(pool, t)) return t;
    var
     _dv_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_got_invalid_a);
    return caml_call1(Core[255], _dv_);
   }
   function link(pool, prev, next){
    set_next(pool, prev, next);
    return set_prev(pool, next, prev);
   }
   function iter(pool, first, f){
    var current = [0, first], continue$0 = [0, 1];
    for(;;){
     if(! continue$0[1]) return 0;
     var next$0 = next(pool, current[1]);
     caml_call1(f, current[1]);
     if(next$0 === first) continue$0[1] = 0; else current[1] = next$0;
    }
   }
   function slots(r){return r[11];}
   function max_allowed_key(r){return r[10];}
   function set_max_allowed_key(r, v){r[10] = v; return 0;}
   function min_allowed_key(r){return r[9];}
   function set_min_allowed_key(r, v){r[9] = v; return 0;}
   function length(r){return r[8];}
   function set_length(r, v){r[8] = v; return 0;}
   function diff_max_min_allowed_key(r){return r[7];}
   function min_key_in_same_slot_mask(r){return r[6];}
   function keys_per_slot(r){return r[5];}
   function bits_per_slot(r){return r[4];}
   function slots_mask(r){return r[3];}
   function bits(r){return r[2];}
   function index(r){return r[1];}
   var
    slots$0 =
      [0,
       function(param){return 0;},
       cst_slots,
       0,
       slots,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                v];
       }],
    max_allowed_key$0 =
      [0,
       function(param){return 0;},
       cst_max_allowed_key,
       [0, set_max_allowed_key],
       max_allowed_key,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                v,
                r[11]];
       }],
    min_allowed_key$0 =
      [0,
       function(param){return 0;},
       cst_min_allowed_key,
       [0, set_min_allowed_key],
       min_allowed_key,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                v,
                r[10],
                r[11]];
       }],
    length$0 =
      [0,
       function(param){return 0;},
       cst_length,
       [0, set_length],
       length,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                v,
                r[9],
                r[10],
                r[11]];
       }],
    diff_max_min_allowed_key$0 =
      [0,
       function(param){return 0;},
       cst_diff_max_min_allowed_key,
       0,
       diff_max_min_allowed_key,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                v,
                r[8],
                r[9],
                r[10],
                r[11]];
       }],
    min_key_in_same_slot_mask$0 =
      [0,
       function(param){return 0;},
       cst_min_key_in_same_slot_mask,
       0,
       min_key_in_same_slot_mask,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                v,
                r[7],
                r[8],
                r[9],
                r[10],
                r[11]];
       }],
    keys_per_slot$0 =
      [0,
       function(param){return 0;},
       cst_keys_per_slot,
       0,
       keys_per_slot,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                v,
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11]];
       }],
    bits_per_slot$0 =
      [0,
       function(param){return 0;},
       cst_bits_per_slot,
       0,
       bits_per_slot,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                v,
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11]];
       }],
    slots_mask$0 =
      [0,
       function(param){return 0;},
       cst_slots_mask,
       0,
       slots_mask,
       function(r, v){
        return [0,
                r[1],
                r[2],
                v,
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11]];
       }],
    bits$0 =
      [0,
       function(param){return 0;},
       cst_bits,
       0,
       bits,
       function(r, v){
        return [0,
                r[1],
                v,
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11]];
       }],
    index$0 =
      [0,
       function(param){return 0;},
       cst_index,
       0,
       index,
       function(r, v){
        return [0,
                v,
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11]];
       }],
    _B_ = [0, cst_slots],
    _C_ = [0, cst_max_allowed_key],
    _D_ = [0, cst_min_allowed_key],
    _E_ = [0, cst_length],
    _F_ = [0, cst_diff_max_min_allowed_key],
    _G_ = [0, cst_min_key_in_same_slot_mask],
    _H_ = [0, cst_keys_per_slot],
    _I_ = [0, cst_bits_per_slot],
    _J_ = [0, cst_slots_mask],
    _K_ = [0, cst_bits],
    _L_ = [0, cst_index];
   function sexp_of_t$9(of_a_044, param){
    var
     diff_max_min_allowed_key_058 = param[7],
     min_key_in_same_slot_mask_056 = param[6],
     keys_per_slot_054 = param[5],
     bits_per_slot_052 = param[4],
     slots_mask_050 = param[3],
     bits_048 = param[2],
     index_046 = param[1],
     length_060 = param[8],
     min_allowed_key_062 = param[9],
     max_allowed_key_064 = param[10],
     slots_066 = param[11],
     arg_067 = caml_call1(Sexplib0_Sexp_conv[23], slots_066),
     bnds_045 = [0, [1, [0, _B_, [0, arg_067, 0]]], 0],
     arg_065 = caml_call1(sexp_of_t$7, max_allowed_key_064),
     bnds_045$0 = [0, [1, [0, _C_, [0, arg_065, 0]]], bnds_045],
     arg_063 = caml_call1(sexp_of_t$7, min_allowed_key_062),
     bnds_045$1 = [0, [1, [0, _D_, [0, arg_063, 0]]], bnds_045$0],
     arg_061 = caml_call1(Core[363], length_060),
     bnds_045$2 = [0, [1, [0, _E_, [0, arg_061, 0]]], bnds_045$1],
     arg_059 = caml_call1(_v_[1], diff_max_min_allowed_key_058),
     bnds_045$3 = [0, [1, [0, _F_, [0, arg_059, 0]]], bnds_045$2],
     arg_057 = caml_call1(sexp_of_t$5, min_key_in_same_slot_mask_056),
     bnds_045$4 = [0, [1, [0, _G_, [0, arg_057, 0]]], bnds_045$3],
     arg_055 = caml_call1(_v_[1], keys_per_slot_054),
     bnds_045$5 = [0, [1, [0, _H_, [0, arg_055, 0]]], bnds_045$4],
     arg_053 = caml_call1(sexp_of_t, bits_per_slot_052),
     bnds_045$6 = [0, [1, [0, _I_, [0, arg_053, 0]]], bnds_045$5],
     arg_051 = caml_call1(sexp_of_t$4, slots_mask_050),
     bnds_045$7 = [0, [1, [0, _J_, [0, arg_051, 0]]], bnds_045$6],
     arg_049 = caml_call1(sexp_of_t, bits_048),
     bnds_045$8 = [0, [1, [0, _K_, [0, arg_049, 0]]], bnds_045$7],
     arg_047 = caml_call1(Core[363], index_046),
     bnds_045$9 = [0, [1, [0, _L_, [0, arg_047, 0]]], bnds_045$8];
    return [1, bnds_045$9];
   }
   function slot(t, key){
    var slots_mask = t[3], bits_per_slot = t[4];
    return caml_call1
            (to_int_exn$0,
             caml_call2
              (bit_and,
               caml_call2(shift_right, key, bits_per_slot),
               slots_mask));
   }
   function next_slot(t, slot){
    var t$0 = t[3];
    return (slot + 1 | 0) & caml_call1(Core_Int63[5], t$0);
   }
   function min_key_in_same_slot(t, key){
    var min_key_in_same_slot_mask = t[6];
    return caml_call2(bit_and, key, min_key_in_same_slot_mask);
   }
   function compute_min_allowed_key(t, prev_level_max_allowed_key){
    return caml_call2(equal$3, prev_level_max_allowed_key, max_value$0)
            ? max_value$0
            : min_key_in_same_slot
              (t, caml_call1(succ$0, prev_level_max_allowed_key));
   }
   function levels(r){return r[5];}
   function elt_key_lower_bound(r){return r[4];}
   function set_elt_key_lower_bound(r, v){r[4] = v; return 0;}
   function min_elt(r){return r[3];}
   function set_min_elt(r, v){r[3] = v; return 0;}
   function pool(r){return r[2];}
   function set_pool(r, v){r[2] = v; return 0;}
   function length$1(r){return r[1];}
   function set_length$0(r, v){r[1] = v; return 0;}
   var
    levels$0 =
      [0,
       function(param){return 0;},
       cst_levels,
       0,
       levels,
       function(r, v){return [0, r[1], r[2], r[3], r[4], v];}],
    elt_key_lower_bound$0 =
      [0,
       function(param){return 0;},
       cst_elt_key_lower_bound,
       [0, set_elt_key_lower_bound],
       elt_key_lower_bound,
       function(r, v){return [0, r[1], r[2], r[3], v, r[5]];}],
    min_elt$0 =
      [0,
       function(param){return 0;},
       cst_min_elt,
       [0, set_min_elt],
       min_elt,
       function(r, v){return [0, r[1], r[2], v, r[4], r[5]];}],
    pool$0 =
      [0,
       function(param){return 0;},
       cst_pool,
       [0, set_pool],
       pool,
       function(r, v){return [0, r[1], v, r[3], r[4], r[5]];}],
    length$2 =
      [0,
       function(param){return 0;},
       cst_length,
       [0, set_length$0],
       length$1,
       function(r, v){return [0, v, r[2], r[3], r[4], r[5]];}],
    _R_ = [0, cst_value],
    _S_ = [0, cst_key],
    _T_ = [0, "elts"],
    _U_ = [0, cst_max_allowed_key],
    _V_ = [0, cst_min_allowed_key],
    _as_ = [0, cst_priority_queue],
    _at_ = [0, "max_allowed_key t"],
    _au_ = [0, "min_allowed_key t"],
    _av_ = [0, cst_key],
    cst_Priority_queue_add_elt_key =
      "Priority_queue.add_elt key out of bounds",
    _aw_ = [0, cst],
    _ax_ = [0, "level"],
    _ay_ = [0, cst_key],
    cst_Priority_queue_add_elt_key$0 =
      "Priority_queue.add_elt key out of level bounds",
    _az_ = [0, "max_allowed_alarm_interval_num"],
    _aA_ = [0, "min_allowed_alarm_interval_num"],
    _aB_ = [0, cst_interval_num],
    cst_Timing_wheel_add_at_interv =
      "Timing_wheel.add_at_interval_num got invalid interval num",
    dummy = 0;
   function is_empty(t){return caml_call2(Core[89], t[1], 0);}
   function num_levels(t){return t[5].length - 1;}
   function min_allowed_key$1(t){
    var r = caml_check_bound(t[5], 0)[1];
    return r[9];
   }
   function max_allowed_key$1(t){
    var
     _du_ = num_levels(t) - 1 | 0,
     r = caml_check_bound(t[5], _du_)[1 + _du_];
    return r[10];
   }
   function internal_iter(t, f){
    var _dm_ = caml_call2(Core[90], t[1], 0);
    if(_dm_){
     var pool = t[2], levels = t[5], _do_ = levels.length - 2 | 0, _dn_ = 0;
     if(_do_ >= 0){
      var level_index = _dn_;
      for(;;){
       var level = caml_check_bound(levels, level_index)[1 + level_index];
       if(caml_call2(Core[90], level[8], 0)){
        var slots = level[11], _dr_ = slots.length - 2 | 0, _dq_ = 0;
        if(_dr_ >= 0){
         var slot_index = _dq_;
         for(;;){
          var elt = caml_check_bound(slots, slot_index)[1 + slot_index];
          if(1 - caml_call1(is_null, elt)) iter(pool, elt, f);
          var _dt_ = slot_index + 1 | 0;
          if(_dr_ === slot_index) break;
          slot_index = _dt_;
         }
        }
       }
       var _ds_ = level_index + 1 | 0;
       if(_do_ === level_index) break;
       level_index = _ds_;
      }
     }
     var _dp_ = 0;
    }
    else
     var _dp_ = _dm_;
    return _dp_;
   }
   function compute_diff_max_min_allowed_k(level_bits, bits_per_slot){
    var num_bits = symbol$2(level_bits, bits_per_slot);
    if(caml_call2(equal, num_bits, max_num_bits)) return _v_[26];
    var _dl_ = pow2(num_bits);
    return caml_call1(_v_[32], _dl_);
   }
   function min_elt$1(t){
    if(is_empty(t)) return caml_call1(null$1, 0);
    if(! caml_call1(is_null, t[3])) return t[3];
    var
     pool = t[2],
     min_elt_already_found = [0, caml_call1(null$1, 0)],
     min_key_already_found = [0, max_value$0],
     level_index = [0, 0],
     num_levels$0 = num_levels(t);
    for(;;){
     if(! caml_call2(Core[91], level_index[1], num_levels$0)){
      t[3] = min_elt_already_found[1];
      t[4] = min_key_already_found[1];
      return t[3];
     }
     var
      _di_ = level_index[1],
      level = caml_check_bound(t[5], _di_)[1 + _di_];
     if(caml_call2(symbol$18, level[9], min_key_already_found[1]))
      level_index[1] = num_levels$0;
     else if(caml_call2(Core[89], level[8], 0))
      level_index[1]++;
     else{
      var
       slots = level[11],
       slot_min_key =
         [0, min_key_in_same_slot(level, caml_call2(max$0, level[9], t[4]))],
       slot$0 = [0, slot(level, slot_min_key[1])];
      for(;;){
       var _dj_ = slot$0[1];
       if(! caml_call1(is_null, caml_check_bound(slots, _dj_)[1 + _dj_]))
        break;
       if(! caml_call2(symbol$19, slot_min_key[1], min_key_already_found[1]))
        break;
       slot$0[1] = next_slot(level, slot$0[1]);
       var i = level[5], t$0 = slot_min_key[1];
       slot_min_key[1] = caml_call2(symbol$13, t$0, i);
      }
      var _dk_ = slot$0[1], first = caml_check_bound(slots, _dk_)[1 + _dk_];
      if(1 - caml_call1(is_null, first)){
       var continue$0 = [0, 1], current = [0, first];
       for(;;){
        if(! continue$0[1]) break;
        var current_key = key(pool, current[1]);
        if(caml_call2(symbol$16, current_key, min_key_already_found[1])){
         min_elt_already_found[1] = current[1];
         min_key_already_found[1] = current_key;
        }
        var next$0 = next(pool, current[1]);
        a:
        {
         if(next$0 !== first && ! caml_call2(Core[89], level_index[1], 0)){current[1] = next$0; break a;}
         continue$0[1] = 0;
        }
       }
      }
      level_index[1]++;
     }
    }
   }
   function add_elt(x_114, to_add){
    var
     pool$0 = x_114[2],
     key$0 = key(pool$0, to_add),
     _db_ = caml_call2(symbol$15, key$0, min_allowed_key$1(x_114)),
     _dc_ =
       _db_ ? caml_call2(symbol$16, key$0, max_allowed_key$1(x_114)) : _db_;
    if(1 - _dc_){
     var pool = x_114[2], r = [0, 0];
     internal_iter
      (x_114,
       function(elt){
        var _dg_ = r[1], _dh_ = value(pool, elt);
        r[1] = [0, [0, key(pool, elt), _dh_], _dg_];
        return 0;
       });
     var
      elts_094 = caml_call1(Core_List[57], r[1]),
      max_allowed_key_092 = max_allowed_key$1(x_114),
      min_allowed_key_090 = min_allowed_key$1(x_114),
      arg_095 =
        caml_call2
         (Core[431],
          function(param){
           var
            key_084 = param[1],
            bnds_083 = [0, [1, [0, _R_, [0, arg_087, 0]]], 0],
            arg_085 = caml_call1(sexp_of_t$7, key_084),
            bnds_083$0 = [0, [1, [0, _S_, [0, arg_085, 0]]], bnds_083];
           return [1, bnds_083$0];
          },
          elts_094),
      bnds_089 = [0, [1, [0, _T_, [0, arg_095, 0]]], 0],
      arg_093 = caml_call1(sexp_of_t$7, max_allowed_key_092),
      bnds_089$0 = [0, [1, [0, _U_, [0, arg_093, 0]]], bnds_089],
      arg_091 = caml_call1(sexp_of_t$7, min_allowed_key_090),
      bnds_089$1 = [0, [1, [0, _V_, [0, arg_091, 0]]], bnds_089$0],
      _c6_ =
        [0,
         [1,
          [0, _at_, [0, caml_call1(sexp_of_t$7, max_allowed_key$1(x_114)), 0]]],
         [0, [1, [0, _as_, [0, [1, bnds_089$1], 0]]], 0]],
      _c7_ =
        [0,
         [1,
          [0, _au_, [0, caml_call1(sexp_of_t$7, min_allowed_key$1(x_114)), 0]]],
         _c6_],
      _c8_ = [0, [1, [0, _av_, [0, caml_call1(sexp_of_t$7, key$0), 0]]], _c7_],
      _c9_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Priority_queue_add_elt_key),
          _c8_]];
     caml_call1(Core[255], _c9_);
    }
    var level_index = [0, 0];
    for(;;){
     var
      _dd_ = level_index[1],
      r$0 = caml_check_bound(x_114[5], _dd_)[1 + _dd_];
     if(! caml_call2(symbol$18, key$0, r$0[10])) break;
     level_index[1]++;
    }
    var
     level_index$0 = level_index[1],
     level = caml_check_bound(x_114[5], level_index$0)[1 + level_index$0],
     _de_ = caml_call2(symbol$15, key$0, level[9]),
     _df_ = _de_ ? caml_call2(symbol$16, key$0, level[10]) : _de_;
    if(1 - _df_){
     var
      _c__ =
        [0,
         [1,
          [0, _ax_, [0, sexp_of_t$9(function(param){return _aw_;}, level), 0]]],
         0],
      _c$_ = [0, [1, [0, _ay_, [0, caml_call1(sexp_of_t$7, key$0), 0]]], _c__],
      _da_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Priority_queue_add_elt_key$0),
          _c$_]];
     caml_call1(Core[255], _da_);
    }
    level[8] = level[8] + 1 | 0;
    caml_call4
     (Tuple_pool[36][33], pool$0, to_add, Tuple_pool[36][2][6], level_index$0);
    var
     slot$0 = slot(level, key$0),
     slots = level[11],
     first = caml_check_bound(slots, slot$0)[1 + slot$0];
    if(caml_call1(is_null, first)){
     caml_check_bound(slots, slot$0)[1 + slot$0] = to_add;
     return link(pool$0, to_add, to_add);
    }
    var prev$0 = prev(pool$0, first);
    link(pool$0, prev$0, to_add);
    return link(pool$0, to_add, first);
   }
   function internal_add_elt(t, elt){
    var key$0 = key(t[2], elt);
    if(caml_call2(symbol$19, key$0, t[4])){t[3] = elt; t[4] = key$0;}
    add_elt(t, elt);
    t[1] = t[1] + 1 | 0;
    return 0;
   }
   function ensure_valid_key(t, key){
    var
     _c4_ = caml_call2(symbol$19, key, min_allowed_key$1(t)),
     _c5_ = _c4_ || caml_call2(symbol$18, key, max_allowed_key$1(t));
    if(! _c5_) return _c5_;
    var
     _c0_ =
       [0,
        [1, [0, _az_, [0, caml_call1(sexp_of_t$7, max_allowed_key$1(t)), 0]]],
        0],
     _c1_ =
       [0,
        [1, [0, _aA_, [0, caml_call1(sexp_of_t$7, min_allowed_key$1(t)), 0]]],
        _c0_],
     _c2_ = [0, [1, [0, _aB_, [0, caml_call1(sexp_of_t$7, key), 0]]], _c1_],
     _c3_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_add_at_interv),
         _c2_]];
    return caml_call1(Core[255], _c3_);
   }
   function internal_add(t, key, at, value){
    ensure_valid_key(t, key);
    if(caml_call1(is_full, t[2])) t[2] = caml_call2(grow, 0, t[2]);
    var
     pool = t[2],
     _cY_ = caml_call1(null$1, 0),
     _cZ_ = caml_call1(null$1, 0),
     elt =
       caml_call7(Tuple_pool[36][21], pool, key, at, value, -1, _cZ_, _cY_);
    internal_add_elt(t, elt);
    return elt;
   }
   function internal_remove(t, elt){
    var pool = t[2], t2 = t[3];
    if(caml_call2(Tuple_pool[36][3][7], elt, t2))
     t[3] = caml_call1(null$1, 0);
    t[1] = t[1] - 1 | 0;
    var
     _cV_ = level_index(pool, elt),
     level = caml_check_bound(t[5], _cV_)[1 + _cV_];
    level[8] = level[8] - 1 | 0;
    var
     slots = level[11],
     slot$0 = slot(level, key(pool, elt)),
     first = caml_check_bound(slots, slot$0)[1 + slot$0];
    if(elt === next(pool, elt)){
     var _cW_ = caml_call1(null$1, 0);
     caml_check_bound(slots, slot$0)[1 + slot$0] = _cW_;
     return;
    }
    if(elt === first){
     var _cX_ = next(pool, elt);
     caml_check_bound(slots, slot$0)[1 + slot$0] = _cX_;
    }
    var _cT_ = next(pool, elt);
    set_next(pool, prev(pool, elt), _cT_);
    var _cU_ = prev(pool, elt);
    return set_prev(pool, next(pool, elt), _cU_);
   }
   var
    _aC_ =
      [0,
       _v_,
       sexp_of_t$7,
       symbol$15,
       symbol$16,
       symbol$17,
       symbol$18,
       symbol$19,
       symbol$20,
       equal$3,
       ascending$0,
       descending$0,
       between$0,
       clamp_exn$0,
       clamp$0,
       comparator$0,
       validate_lbound$0,
       validate_ubound$0,
       validate_bound$0,
       Replace_polymorphic_compare$0,
       [0,
        [0, _s_[9], _s_[10], _s_[11]],
        Map$0[2],
        Map$0[3],
        Map$0[4],
        Map$0[5],
        Map$0[6],
        Map$0[7],
        Map$0[8],
        Map$0[9],
        Map$0[10],
        Map$0[11],
        Map$0[12],
        Map$0[13],
        Map$0[14],
        Map$0[15],
        Map$0[16],
        Map$0[17],
        Map$0[18],
        Map$0[19],
        Map$0[20],
        Map$0[21],
        Map$0[22],
        Map$0[23],
        Map$0[24],
        Map$0[25],
        Map$0[26],
        Map$0[27],
        Map$0[28],
        Map$0[29],
        Map$0[30],
        Map$0[31],
        Map$0[32],
        Map$0[33],
        Map$0[34],
        Map$0[35],
        Map$0[36],
        Map$0[37],
        Map$0[38],
        Map$0[39],
        Map$0[40],
        Map$0[41],
        Map$0[42]],
       [0,
        [0, _r_[1], _r_[2], _r_[11]],
        Set$0[2],
        Set$0[3],
        Set$0[4],
        Set$0[5],
        Set$0[6],
        Set$0[7],
        Set$0[8],
        Set$0[9],
        Set$0[10],
        Set$0[11],
        Set$0[12],
        Set$0[13],
        Set$0[14],
        Set$0[15],
        Set$0[16],
        Set$0[17],
        Set$0[18],
        Set$0[19],
        Set$0[20],
        Set$0[21],
        Set$0[22],
        Set$0[23],
        Set$0[24],
        Set$0[25],
        Set$0[26],
        Set$0[27]],
       compare$2,
       hash_fold_t,
       hash,
       hashable,
       [0,
        Table[1],
        Table[2],
        Table[3],
        Table[4],
        Table[5],
        Table[6],
        Table[7],
        Table[8],
        Table[9],
        Table[10],
        Table[11],
        Table[12],
        Table[13],
        Table[14],
        Table[15],
        Table[16],
        Table[17],
        Table[18]],
       [0,
        Hash_set[1],
        Hash_set[2],
        Hash_set[3],
        Hash_set[4],
        Hash_set[5],
        Hash_set[6],
        Hash_set[7]],
       Hash_queue,
       max$0,
       min$0,
       zero$1,
       one$1,
       min_value$0,
       max_value$0,
       of_int63$0,
       to_int63$0,
       of_int$1,
       to_int_exn$0,
       add,
       sub,
       diff,
       succ$0,
       pred$0,
       rem],
    min_interval_num = _aC_[31];
   function priority_queue(r){return r[7];}
   function max_allowed_alarm_time(r){return r[6];}
   function set_max_allowed_alarm_time(r, v){r[6] = v; return 0;}
   function now_interval_num_start(r){return r[5];}
   function set_now_interval_num_start(r, v){r[5] = v; return 0;}
   function now(r){return r[4];}
   function set_now(r, v){r[4] = v; return 0;}
   function max_interval_num(r){return r[3];}
   function start(r){return r[2];}
   function config(r){return r[1];}
   var
    priority_queue$0 =
      [0,
       function(param){return 0;},
       cst_priority_queue,
       0,
       priority_queue,
       function(r, v){return [0, r[1], r[2], r[3], r[4], r[5], r[6], v];}],
    max_allowed_alarm_time$0 =
      [0,
       function(param){return 0;},
       cst_max_allowed_alarm_time,
       [0, set_max_allowed_alarm_time],
       max_allowed_alarm_time,
       function(r, v){return [0, r[1], r[2], r[3], r[4], r[5], v, r[7]];}],
    now_interval_num_start$0 =
      [0,
       function(param){return 0;},
       cst_now_interval_num_start,
       [0, set_now_interval_num_start],
       now_interval_num_start,
       function(r, v){return [0, r[1], r[2], r[3], r[4], v, r[6], r[7]];}],
    now$0 =
      [0,
       function(param){return 0;},
       cst_now,
       [0, set_now],
       now,
       function(r, v){return [0, r[1], r[2], r[3], v, r[5], r[6], r[7]];}],
    max_interval_num$0 =
      [0,
       function(param){return 0;},
       cst_max_interval_num,
       0,
       max_interval_num,
       function(r, v){return [0, r[1], r[2], v, r[4], r[5], r[6], r[7]];}],
    start$0 =
      [0,
       function(param){return 0;},
       cst_start,
       0,
       start,
       function(r, v){return [0, r[1], v, r[3], r[4], r[5], r[6], r[7]];}],
    config$0 =
      [0,
       function(param){return 0;},
       cst_config,
       0,
       config,
       function(r, v){return [0, v, r[2], r[3], r[4], r[5], r[6], r[7]];}],
    _w_ = [0, cst_timing_wheel_src_timing_wh, 653, 8],
    _x_ = [0, cst_timing_wheel_src_timing_wh, 651, 8],
    _y_ = [0, cst_timing_wheel_src_timing_wh, 648, 8],
    _z_ = [0, cst],
    _A_ = [0, cst_timing_wheel_src_timing_wh, 647, 23049, 23075],
    _M_ = [0, cst_levels],
    _N_ = [0, cst_elt_key_lower_bound],
    _O_ = [0, cst_min_elt],
    _P_ = [0, cst_pool],
    _Q_ = [0, cst_length],
    _W_ = [0, cst_timing_wheel_src_timing_wh, 959, 21],
    _X_ = [0, cst_timing_wheel_src_timing_wh, 958, 21],
    _Y_ = [0, cst_timing_wheel_src_timing_wh, 957, 21],
    _Z_ = [0, cst_timing_wheel_src_timing_wh, 956, 21],
    ___ = [0, cst_timing_wheel_src_timing_wh, 935, 15],
    _$_ = [0, cst_timing_wheel_src_timing_wh, 927, 15],
    _aa_ = [0, cst_timing_wheel_src_timing_wh, 914, 15],
    _ab_ = [0, cst_timing_wheel_src_timing_wh, 906, 15],
    _ac_ = [0, cst_timing_wheel_src_timing_wh, 899, 36],
    _ad_ = [0, cst_timing_wheel_src_timing_wh, 898, 38],
    _ae_ = [0, cst],
    _af_ = [0, cst_timing_wheel_src_timing_wh, 895, 31577, 31603],
    _ag_ = [0, cst_timing_wheel_src_timing_wh, 986, 15],
    _ah_ = [0, cst_timing_wheel_src_timing_wh, 984, 13],
    _ai_ = [0, cst_timing_wheel_src_timing_wh, 981, 15],
    _aj_ = [0, cst_timing_wheel_src_timing_wh, 978, 13],
    _ak_ = [0, cst_timing_wheel_src_timing_wh, 977, 13],
    _al_ = [0, cst_timing_wheel_src_timing_wh, 974, 15],
    _am_ = [0, cst_timing_wheel_src_timing_wh, 973, 15],
    _an_ = [0, cst_timing_wheel_src_timing_wh, 967, 38],
    _ao_ = [0, cst_timing_wheel_src_timing_wh, 965, 6],
    _ap_ = [0, cst_timing_wheel_src_timing_wh, 964, 6],
    _aq_ = [0, cst],
    _ar_ = [0, cst_timing_wheel_src_timing_wh, 962, 34674, 34698],
    _aD_ = [0, cst_value],
    _aE_ = [0, cst_at],
    _aF_ = [0, "alarms"],
    _aG_ = [0, cst_now],
    _aH_ = [0, cst_max_interval_num],
    _aI_ = [0, cst_start],
    _aJ_ = [0, cst_config],
    _aK_ = [0, cst],
    _aL_ = [0, cst_timing_wheel],
    cst_Timing_wheel_next_alarm_fi =
      "Timing_wheel.next_alarm_fires_at_exn of empty timing wheel",
    _aM_ = [0, cst],
    _aN_ = [0, cst_timing_wheel],
    cst_Timing_wheel_next_alarm_fi$0 =
      "Timing_wheel.next_alarm_fires_at_exn with all alarms in max interval",
    _aO_ = [0, "time"],
    cst_Timing_wheel_interval_num_ =
      "Timing_wheel.interval_num got time too far in the past",
    _aP_ = [0, "min_interval_num"],
    _aQ_ = [0, cst_interval_num],
    cst_Timing_wheel_interval_num_$0 =
      "Timing_wheel.interval_num_start got too small interval_num",
    _aR_ = [0, "t.max_interval_num"],
    _aS_ = [0, cst_interval_num],
    cst_Timing_wheel_interval_num_$1 =
      "Timing_wheel.interval_num_start got too large interval_num",
    _aT_ = [0, cst_timing_wheel_src_timing_wh, 1626, 11],
    _aU_ = [0, cst_timing_wheel_src_timing_wh, 1625, 11],
    _aV_ = [0, cst_timing_wheel_src_timing_wh, 1624, 11],
    _aW_ = [0, cst_timing_wheel_src_timing_wh, 1613, 11],
    _aX_ = [0, cst_timing_wheel_src_timing_wh, 1612, 11],
    _aY_ = [0, cst_timing_wheel_src_timing_wh, 1648, 6],
    _aZ_ = [0, cst_timing_wheel_src_timing_wh, 1646, 6],
    _a0_ = [0, cst_timing_wheel_src_timing_wh, 1642, 6],
    _a1_ = [0, cst],
    _a2_ = [0, cst_timing_wheel_src_timing_wh, 1606, 58039, 58061];
   function sexp_of_t_now(param, t){
    return caml_call1(Core_Time_ns_alternate_sexp[92], t[4]);
   }
   function alarm_precision$0(t){return alarm_precision(t[1]);}
   function at$0(tw, t){
    var p = tw[7], _cS_ = of_external_exn(p[2], t);
    return at(p[2], _cS_);
   }
   function value$0(tw, t){
    var p = tw[7], _cR_ = of_external_exn(p[2], t);
    return value(p[2], _cR_);
   }
   function interval_num(tw, t){
    var p = tw[7], _cQ_ = of_external_exn(p[2], t);
    return key(p[2], _cQ_);
   }
   function iter$0(t, f){var t$0 = t[7]; return internal_iter(t$0, f);}
   function compare$3(t1, t2){
    return caml_call2(Core_Time_ns_alternate_sexp[101], t1[1], t2[1]);
   }
   function sexp_of_t$10(sexp_of_a, t){
    var
     max_interval_num_146 = t[3],
     start_144 = t[2],
     config_142 = t[1],
     now_148 = t[4],
     r = [0, 0];
    iter$0
     (t,
      function(alarm){
       var _cP_ = r[1], _cO_ = value$0(t, alarm);
       r[1] = [0, [0, at$0(t, alarm), _cO_], _cP_];
       return 0;
      });
    var
     alarms_150 = caml_call2(Core_List[77], r[1], compare$3),
     arg_151 =
       caml_call2
        (Core[431],
         function(param){
          var
           value_138 = param[2],
           at_136 = param[1],
           arg_139 = caml_call1(sexp_of_a, value_138),
           bnds_135 = [0, [1, [0, _aD_, [0, arg_139, 0]]], 0],
           arg_137 = caml_call1(Core_Time_ns_alternate_sexp[92], at_136),
           bnds_135$0 = [0, [1, [0, _aE_, [0, arg_137, 0]]], bnds_135];
          return [1, bnds_135$0];
         },
         alarms_150),
     bnds_141 = [0, [1, [0, _aF_, [0, arg_151, 0]]], 0],
     arg_149 = caml_call1(Core_Time_ns_alternate_sexp[92], now_148),
     bnds_141$0 = [0, [1, [0, _aG_, [0, arg_149, 0]]], bnds_141],
     arg_147 = caml_call1(_aC_[2], max_interval_num_146),
     bnds_141$1 = [0, [1, [0, _aH_, [0, arg_147, 0]]], bnds_141$0],
     arg_145 = caml_call1(Core_Time_ns_alternate_sexp[92], start_144),
     bnds_141$2 = [0, [1, [0, _aI_, [0, arg_145, 0]]], bnds_141$1],
     arg_143 = sexp_of_t$3(config_142),
     bnds_141$3 = [0, [1, [0, _aJ_, [0, arg_143, 0]]], bnds_141$2];
    return [1, bnds_141$3];
   }
   function length$3(t){var r = t[7]; return r[1];}
   function is_empty$0(t){
    var _cN_ = length$3(t);
    return caml_call2(Core[89], _cN_, 0);
   }
   function pool$1(t){var r = t[7]; return r[2];}
   function interval_num_internal(time, alarm_precision){
    var
     _cL_ = caml_call1(Core_Time_ns_alternate_sexp[61], time),
     _cM_ = caml_call2(Core_Int63[49], _cL_, alarm_precision);
    return caml_call1(_aC_[35], _cM_);
   }
   function interval_num_unchecked(t, time){
    return interval_num_internal(time, t[1][1]);
   }
   function interval_num$0(t, time){
    if(caml_call2(Core_Time_ns_alternate_sexp[98], time, min_time)){
     var
      _cJ_ =
        [0,
         [1,
          [0, _aO_, [0, caml_call1(Core_Time_ns_alternate_sexp[92], time), 0]]],
         0],
      _cK_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_interval_num_),
          _cJ_]];
     caml_call1(Core[255], _cK_);
    }
    return interval_num_unchecked(t, time);
   }
   function interval_num_start_unchecked(t, interval_num){
    var
     interval_num$0 = caml_call1(_aC_[36], interval_num),
     t$0 = t[1][1],
     _cI_ = caml_call2(Core_Int63[48], interval_num$0, t$0);
    return caml_call1(Core_Time_ns_alternate_sexp[62], _cI_);
   }
   function interval_num_start(t, interval_num){
    if(caml_call2(_aC_[7], interval_num, min_interval_num)){
     var
      _cC_ =
        [0, [1, [0, _aP_, [0, caml_call1(_aC_[2], min_interval_num), 0]]], 0],
      _cD_ =
        [0, [1, [0, _aQ_, [0, caml_call1(_aC_[2], interval_num), 0]]], _cC_],
      _cE_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_interval_num_$0),
          _cD_]];
     caml_call1(Core[255], _cE_);
    }
    if(caml_call2(_aC_[6], interval_num, t[3])){
     var
      _cF_ = [0, [1, [0, _aR_, [0, caml_call1(_aC_[2], t[3]), 0]]], 0],
      _cG_ =
        [0, [1, [0, _aS_, [0, caml_call1(_aC_[2], interval_num), 0]]], _cF_],
      _cH_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_interval_num_$1),
          _cG_]];
     caml_call1(Core[255], _cH_);
    }
    return interval_num_start_unchecked(t, interval_num);
   }
   function next_alarm_fires_at_internal(t, key){
    return interval_num_start(t, caml_call1(_aC_[42], key));
   }
   function next_alarm_fires_at(t){
    var elt = min_elt$1(t[7]);
    if(caml_call1(is_null, elt)) return 0;
    var key$0 = key(pool$1(t), elt);
    return caml_call2(_aC_[9], key$0, t[3])
            ? 0
            : [0, next_alarm_fires_at_internal(t, key$0)];
   }
   function next_alarm_fires_at_exn(x_153){
    var elt = min_elt$1(x_153[7]);
    if(caml_call1(is_null, elt)){
     var
      _cy_ =
        [0,
         [1,
          [0,
           _aL_,
           [0, sexp_of_t$10(function(param){return _aK_;}, x_153), 0]]],
         0],
      _cz_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_next_alarm_fi),
          _cy_]];
     caml_call1(Core[255], _cz_);
    }
    var key$0 = key(pool$1(x_153), elt);
    if(caml_call2(_aC_[9], key$0, x_153[3])){
     var
      _cA_ =
        [0,
         [1,
          [0,
           _aN_,
           [0, sexp_of_t$10(function(param){return _aM_;}, x_153), 0]]],
         0],
      _cB_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_next_alarm_fi$0),
          _cA_]];
     caml_call1(Core[255], _cB_);
    }
    return next_alarm_fires_at_internal(x_153, key$0);
   }
   function compute_max_allowed_alarm_time(t){
    var max_allowed_key = max_allowed_key$1(t[7]);
    if(caml_call2(_aC_[3], max_allowed_key, t[3])) return max_time;
    var
     _cu_ = Core_Time_ns[1][67],
     _cv_ = alarm_precision$0(t),
     _cw_ = caml_call2(Core_Time_ns[1][101], _cv_, _cu_),
     _cx_ = interval_num_start_unchecked(t, max_allowed_key);
    return caml_call2(Core_Time_ns_alternate_sexp[51], _cx_, _cw_);
   }
   function now_interval_num(t){return min_allowed_key$1(t[7]);}
   function max_allowed_alarm_interval_num(t){return interval_num$0(t, t[6]);}
   function interval_start(t, time){
    return interval_num_start_unchecked(t, interval_num$0(t, time));
   }
   function invariant$2(invariant_a, t){
    return caml_call4
            (Base_Invariant[1],
             _a2_,
             t,
             function(x_155){
              return sexp_of_t$10(function(param){return _a1_;}, x_155);
             },
             function(param){
              function check(f){return caml_call2(Base_Invariant[2], t, f);}
              var
               priority_queue_fun =
                 check
                  (function(t){
                    var pool = t[2];
                    return caml_call4
                            (Base_Invariant[1],
                             _ar_,
                             t,
                             function(x_109){
                              function of_a_068(param){return _aq_;}
                              var
                               length_070 = x_109[1],
                               pool_072 = x_109[2],
                               min_elt_074 = x_109[3],
                               elt_key_lower_bound_076 = x_109[4],
                               levels_078 = x_109[5],
                               arg_079 =
                                 caml_call2
                                  (Core[291],
                                   function(_ct_){return sexp_of_t$9(of_a_068, _ct_);},
                                   levels_078),
                               bnds_069 = [0, [1, [0, _M_, [0, arg_079, 0]]], 0],
                               arg_077 = caml_call1(sexp_of_t$7, elt_key_lower_bound_076),
                               bnds_069$0 = [0, [1, [0, _N_, [0, arg_077, 0]]], bnds_069],
                               arg_075 = sexp_of_t$8(of_a_068, min_elt_074),
                               bnds_069$1 = [0, [1, [0, _O_, [0, arg_075, 0]]], bnds_069$0],
                               arg_073 =
                                 caml_call2
                                  (Tuple_pool[36][4],
                                   function(_cs_){return sexp_of_pool_slots(of_a_068, _cs_);},
                                   pool_072),
                               bnds_069$2 = [0, [1, [0, _P_, [0, arg_073, 0]]], bnds_069$1],
                               arg_071 = caml_call1(Core[363], length_070),
                               bnds_069$3 = [0, [1, [0, _Q_, [0, arg_071, 0]]], bnds_069$2];
                              return [1, bnds_069$3];
                             },
                             function(param){
                              function check(f){
                               return caml_call2(Base_Invariant[2], t, f);
                              }
                              if(! caml_call2(symbol$15, min_allowed_key$1(t), zero$1))
                               throw caml_maybe_attach_backtrace
                                      ([0, Assert_failure, _ap_], 1);
                              var _ca_ = min_allowed_key$1(t);
                              if(! caml_call2(symbol$15, max_allowed_key$1(t), _ca_))
                               throw caml_maybe_attach_backtrace
                                      ([0, Assert_failure, _ao_], 1);
                              var
                               levels_fun =
                                 check
                                  (function(levels){
                                    var _cf_ = num_levels(t);
                                    if(caml_call2(Core[90], _cf_, 0))
                                     return caml_call2
                                             (Core_Array[47],
                                              levels,
                                              function(level_index$0, level){
                                               if(! caml_call2(Core[89], level_index$0, level[1]))
                                                throw caml_maybe_attach_backtrace
                                                       ([0, Assert_failure, _ag_], 1);
                                               caml_call4
                                                (Base_Invariant[1],
                                                 _af_,
                                                 level,
                                                 function(x_098){
                                                  return sexp_of_t$9(function(param){return _ae_;}, x_098);
                                                 },
                                                 function(param){
                                                  function check(f){
                                                   return caml_call2(Base_Invariant[2], level, f);
                                                  }
                                                  var
                                                   slots_fun =
                                                     check
                                                      (function(slots){
                                                        return caml_call2
                                                                (Core_Array[32],
                                                                 slots,
                                                                 function(elt){
                                                                  var _ck_ = 1 - caml_call1(is_null, elt);
                                                                  return _ck_
                                                                          ? (caml_call4
                                                                             (Base_Invariant[1],
                                                                              _A_,
                                                                              elt,
                                                                              function(x_041){
                                                                               return sexp_of_t$8(function(param){return _z_;}, x_041);
                                                                              },
                                                                              function(param){
                                                                               if(! is_valid(pool, elt))
                                                                                throw caml_maybe_attach_backtrace
                                                                                       ([0, Assert_failure, _y_], 1);
                                                                               caml_call1(invariant_a, value(pool, elt));
                                                                               var n = next(pool, elt);
                                                                               if(! caml_call1(is_null, n)){
                                                                                var _cm_ = prev(pool, n);
                                                                                if(! caml_call2(Tuple_pool[36][3][7], elt, _cm_))
                                                                                 throw caml_maybe_attach_backtrace
                                                                                        ([0, Assert_failure, _x_], 1);
                                                                               }
                                                                               var p = prev(pool, elt);
                                                                               if(! caml_call1(is_null, p)){
                                                                                var _cl_ = next(pool, p);
                                                                                if(! caml_call2(Tuple_pool[36][3][7], elt, _cl_))
                                                                                 throw caml_maybe_attach_backtrace
                                                                                        ([0, Assert_failure, _w_], 1);
                                                                               }
                                                                               return 0;
                                                                              }),
                                                                            iter
                                                                             (pool,
                                                                              elt,
                                                                              function(elt){
                                                                               var _cn_ = level[9];
                                                                               if(! caml_call2(symbol$15, key(pool, elt), _cn_))
                                                                                throw caml_maybe_attach_backtrace
                                                                                       ([0, Assert_failure, _Z_], 1);
                                                                               var _co_ = level[10];
                                                                               if(! caml_call2(symbol$16, key(pool, elt), _co_))
                                                                                throw caml_maybe_attach_backtrace
                                                                                       ([0, Assert_failure, _Y_], 1);
                                                                               var _cp_ = t[4];
                                                                               if(! caml_call2(symbol$15, key(pool, elt), _cp_))
                                                                                throw caml_maybe_attach_backtrace
                                                                                       ([0, Assert_failure, _X_], 1);
                                                                               var _cq_ = level[1], _cr_ = level_index(pool, elt);
                                                                               if(caml_call2(Core[89], _cr_, _cq_))
                                                                                return caml_call1(invariant_a, value(pool, elt));
                                                                               throw caml_maybe_attach_backtrace
                                                                                      ([0, Assert_failure, _W_], 1);
                                                                              }))
                                                                          : _ck_;
                                                                 });
                                                       }),
                                                   max_allowed_key_fun =
                                                     check
                                                      (function(max_allowed_key){
                                                        var expect = add_clamp_to_max(level[9], level[7]);
                                                        function comparator(a_107, b_108){
                                                         return caml_call2(compare$2, a_107, b_108);
                                                        }
                                                        return caml_call8
                                                                (Ppx_assert_lib_Runtime[3],
                                                                 pos,
                                                                 sexp_of_t$7,
                                                                 comparator,
                                                                 0,
                                                                 0,
                                                                 0,
                                                                 expect,
                                                                 max_allowed_key);
                                                       }),
                                                   min_allowed_key_fun =
                                                     check
                                                      (function(min_allowed_key){
                                                        if(! caml_call2(symbol$15, min_allowed_key, zero$1))
                                                         throw caml_maybe_attach_backtrace
                                                                ([0, Assert_failure, ___], 1);
                                                        var
                                                         _cj_ = caml_call2(symbol$19, min_allowed_key, max_value$0);
                                                        if(! _cj_) return _cj_;
                                                        var
                                                         got = caml_call2(rem, min_allowed_key, level[5]),
                                                         expect = _v_[24],
                                                         sexpifier = _v_[1];
                                                        function comparator(a_105, b_106){
                                                         return caml_call2(_v_[9], a_105, b_106);
                                                        }
                                                        return caml_call8
                                                                (Ppx_assert_lib_Runtime[3],
                                                                 pos$0,
                                                                 sexpifier,
                                                                 comparator,
                                                                 0,
                                                                 0,
                                                                 0,
                                                                 expect,
                                                                 got);
                                                       }),
                                                   length_fun =
                                                     check
                                                      (function(length){
                                                        var
                                                         _ci_ =
                                                           caml_call3
                                                            (Core_Array[33],
                                                             level[11],
                                                             0,
                                                             function(n, first){
                                                              if(caml_call1(is_null, first)) return n;
                                                              var r = [0, 0], current = [0, first], continue$0 = [0, 1];
                                                              for(;;){
                                                               if(! continue$0[1]) return n + r[1] | 0;
                                                               r[1]++;
                                                               var next$0 = next(pool, current[1]);
                                                               if(next$0 === first)
                                                                continue$0[1] = 0;
                                                               else
                                                                current[1] = next$0;
                                                              }
                                                             });
                                                        if(caml_call2(Core[89], length, _ci_)) return 0;
                                                        throw caml_maybe_attach_backtrace
                                                               ([0, Assert_failure, _$_], 1);
                                                       }),
                                                   expect = compute_diff_max_min_allowed_k(level[2], level[4]),
                                                   diff_max_min_allowed_key_fun =
                                                     check
                                                      (function(eta){
                                                        var sexpifier = _v_[1];
                                                        function comparator(a_103, b_104){
                                                         return caml_call2(_v_[9], a_103, b_104);
                                                        }
                                                        return caml_call8
                                                                (Ppx_assert_lib_Runtime[3],
                                                                 pos$1,
                                                                 sexpifier,
                                                                 comparator,
                                                                 0,
                                                                 0,
                                                                 0,
                                                                 expect,
                                                                 eta);
                                                       }),
                                                   min_key_in_same_slot_mask_fun =
                                                     check
                                                      (function(min_key_in_same_slot_mask){
                                                        if
                                                         (caml_call2
                                                           (equal$1, min_key_in_same_slot_mask, create$1(level[4])))
                                                         return 0;
                                                        throw caml_maybe_attach_backtrace
                                                               ([0, Assert_failure, _aa_], 1);
                                                       }),
                                                   keys_per_slot_fun =
                                                     check
                                                      (function(keys_per_slot){
                                                        var
                                                         num_bits = level[4],
                                                         expect = pow2(num_bits),
                                                         sexpifier = _v_[1];
                                                        function comparator(a_101, b_102){
                                                         return caml_call2(_v_[9], a_101, b_102);
                                                        }
                                                        return caml_call8
                                                                (Ppx_assert_lib_Runtime[3],
                                                                 pos$2,
                                                                 sexpifier,
                                                                 comparator,
                                                                 0,
                                                                 0,
                                                                 0,
                                                                 expect,
                                                                 keys_per_slot);
                                                       }),
                                                   bits_per_slot_fun =
                                                     check
                                                      (function(bits_per_slot){
                                                        if(caml_call2(symbol, bits_per_slot, zero)) return 0;
                                                        throw caml_maybe_attach_backtrace
                                                               ([0, Assert_failure, _ab_], 1);
                                                       }),
                                                   expect$0 = create$0(level[2]),
                                                   slots_mask_fun =
                                                     check
                                                      (function(eta){
                                                        function comparator(a_099, b_100){
                                                         return caml_call2(compare$0, a_099, b_100);
                                                        }
                                                        return caml_call8
                                                                (Ppx_assert_lib_Runtime[3],
                                                                 pos$3,
                                                                 sexp_of_t$4,
                                                                 comparator,
                                                                 0,
                                                                 0,
                                                                 0,
                                                                 expect$0,
                                                                 eta);
                                                       }),
                                                   bits_fun =
                                                     check
                                                      (function(bits){
                                                        if(caml_call2(symbol$1, bits, zero)) return 0;
                                                        throw caml_maybe_attach_backtrace
                                                               ([0, Assert_failure, _ac_], 1);
                                                       }),
                                                   index_fun =
                                                     check
                                                      (function(index){
                                                        if(caml_call2(Core[87], index, 0)) return 0;
                                                        throw caml_maybe_attach_backtrace
                                                               ([0, Assert_failure, _ad_], 1);
                                                       });
                                                  caml_call1(index_fun, index$0);
                                                  caml_call1(bits_fun, bits$0);
                                                  caml_call1(slots_mask_fun, slots_mask$0);
                                                  caml_call1(bits_per_slot_fun, bits_per_slot$0);
                                                  caml_call1(keys_per_slot_fun, keys_per_slot$0);
                                                  caml_call1
                                                   (min_key_in_same_slot_mask_fun, min_key_in_same_slot_mask$0);
                                                  caml_call1
                                                   (diff_max_min_allowed_key_fun, diff_max_min_allowed_key$0);
                                                  caml_call1(length_fun, length$0);
                                                  caml_call1(min_allowed_key_fun, min_allowed_key$0);
                                                  caml_call1(max_allowed_key_fun, max_allowed_key$0);
                                                  return caml_call1(slots_fun, slots$0);
                                                 });
                                               var _cg_ = caml_call2(Core[90], level_index$0, 0);
                                               if(! _cg_) return _cg_;
                                               var
                                                _ch_ = level_index$0 - 1 | 0,
                                                prev_level = caml_check_bound(levels, _ch_)[1 + _ch_],
                                                got$0 = level[5],
                                                expect = caml_call1(_v_[33], prev_level[7]),
                                                sexpifier = _v_[1];
                                               function comparator(a_110, b_111){
                                                return caml_call2(_v_[9], a_110, b_111);
                                               }
                                               caml_call8
                                                (Ppx_assert_lib_Runtime[3],
                                                 pos$4,
                                                 sexpifier,
                                                 comparator,
                                                 0,
                                                 0,
                                                 0,
                                                 expect,
                                                 got$0);
                                               var
                                                got = level[9],
                                                expect$0 = compute_min_allowed_key(level, prev_level[10]);
                                               function comparator$0(a_112, b_113){
                                                return caml_call2(compare$2, a_112, b_113);
                                               }
                                               return caml_call8
                                                       (Ppx_assert_lib_Runtime[3],
                                                        pos$5,
                                                        sexp_of_t$7,
                                                        comparator$0,
                                                        0,
                                                        0,
                                                        0,
                                                        expect$0,
                                                        got);
                                              });
                                    throw caml_maybe_attach_backtrace
                                           ([0, Assert_failure, _ah_], 1);
                                   }),
                               elt_key_lower_bound_fun =
                                 check
                                  (function(elt_key_lower_bound){
                                    if
                                     (!
                                      caml_call2
                                       (symbol$15, elt_key_lower_bound, min_allowed_key$1(t)))
                                     throw caml_maybe_attach_backtrace
                                            ([0, Assert_failure, _ak_], 1);
                                    if
                                     (!
                                      caml_call2
                                       (symbol$16, elt_key_lower_bound, max_allowed_key$1(t)))
                                     throw caml_maybe_attach_backtrace
                                            ([0, Assert_failure, _aj_], 1);
                                    var _ce_ = 1 - caml_call1(is_null, t[3]);
                                    if(! _ce_) return _ce_;
                                    if
                                     (caml_call2(equal$3, elt_key_lower_bound, key(t[2], t[3])))
                                     return 0;
                                    throw caml_maybe_attach_backtrace
                                           ([0, Assert_failure, _ai_], 1);
                                   }),
                               min_elt_fun =
                                 check
                                  (function(elt){
                                    var _cc_ = 1 - caml_call1(is_null, elt);
                                    if(! _cc_) return _cc_;
                                    if(! is_valid(t[2], elt))
                                     throw caml_maybe_attach_backtrace
                                            ([0, Assert_failure, _am_], 1);
                                    var _cd_ = key(t[2], elt);
                                    if(caml_call2(equal$3, t[4], _cd_)) return 0;
                                    throw caml_maybe_attach_backtrace
                                           ([0, Assert_failure, _al_], 1);
                                   }),
                               pool_fun =
                                 check
                                  (function(t){
                                    return caml_call2
                                            (Tuple_pool[36][5], function(_cb_){return 0;}, t);
                                   }),
                               length_fun =
                                 check
                                  (function(length){
                                    if(caml_call2(Core[87], length, 0)) return 0;
                                    throw caml_maybe_attach_backtrace
                                           ([0, Assert_failure, _an_], 1);
                                   });
                              caml_call1(length_fun, length$2);
                              caml_call1(pool_fun, pool$0);
                              caml_call1(min_elt_fun, min_elt$0);
                              caml_call1(elt_key_lower_bound_fun, elt_key_lower_bound$0);
                              return caml_call1(levels_fun, levels$0);
                             });
                   }),
               max_allowed_alarm_time_fun =
                 check
                  (function(max_allowed_alarm_time){
                    var
                     expect = compute_max_allowed_alarm_time(t),
                     sexpifier = Core_Time_ns_alternate_sexp[92];
                    function comparator(a_162, b_163){
                     return caml_call2
                             (Core_Time_ns_alternate_sexp[101], a_162, b_163);
                    }
                    return caml_call8
                            (Ppx_assert_lib_Runtime[3],
                             pos$6,
                             sexpifier,
                             comparator,
                             0,
                             0,
                             0,
                             expect,
                             max_allowed_alarm_time);
                   }),
               now_interval_num_start_fun =
                 check
                  (function(now_interval_num_start){
                    var
                     expect = interval_num_start(t, now_interval_num(t)),
                     sexpifier = Core_Time_ns_alternate_sexp[92];
                    function comparator(a_160, b_161){
                     return caml_call2
                             (Core_Time_ns_alternate_sexp[101], a_160, b_161);
                    }
                    return caml_call8
                            (Ppx_assert_lib_Runtime[3],
                             pos$7,
                             sexpifier,
                             comparator,
                             0,
                             0,
                             0,
                             expect,
                             now_interval_num_start);
                   }),
               now_fun =
                 check
                  (function(now){
                    if(! caml_call2(Core_Time_ns_alternate_sexp[94], now, t[2]))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _aV_], 1);
                    if
                     (!
                      caml_call2(Core_Time_ns_alternate_sexp[95], now, max_time))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _aU_], 1);
                    var
                     _b__ = min_allowed_key$1(t[7]),
                     _b$_ = interval_num$0(t, t[4]);
                    if(caml_call2(_aC_[9], _b$_, _b__)) return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _aT_], 1);
                   }),
               max_interval_num_fun =
                 check
                  (function(max_interval_num){
                    var got = interval_num$0(t, max_time), sexpifier = _aC_[2];
                    function comparator(a_156, b_157){
                     return caml_call2(_aC_[22], a_156, b_157);
                    }
                    caml_call8
                     (Ppx_assert_lib_Runtime[3],
                      pos$8,
                      sexpifier,
                      comparator,
                      0,
                      0,
                      0,
                      max_interval_num,
                      got);
                    var
                     got$0 =
                       interval_num$0(t, interval_num_start(t, max_interval_num)),
                     sexpifier$0 = _aC_[2];
                    function comparator$0(a_158, b_159){
                     return caml_call2(_aC_[22], a_158, b_159);
                    }
                    return caml_call8
                            (Ppx_assert_lib_Runtime[3],
                             pos$9,
                             sexpifier$0,
                             comparator$0,
                             0,
                             0,
                             0,
                             max_interval_num,
                             got$0);
                   }),
               start_fun =
                 check
                  (function(start){
                    if
                     (!
                      caml_call2(Core_Time_ns_alternate_sexp[94], start, min_time))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _aX_], 1);
                    if
                     (caml_call2
                       (Core_Time_ns_alternate_sexp[95], start, max_time))
                     return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _aW_], 1);
                   }),
               config_fun = check(invariant$1);
              caml_call1(config_fun, config$0);
              caml_call1(start_fun, start$0);
              caml_call1(max_interval_num_fun, max_interval_num$0);
              caml_call1(now_fun, now$0);
              caml_call1(now_interval_num_start_fun, now_interval_num_start$0);
              caml_call1(max_allowed_alarm_time_fun, max_allowed_alarm_time$0);
              caml_call1(priority_queue_fun, priority_queue$0);
              return iter$0
                      (t,
                       function(alarm){
                        var
                         _b3_ = interval_num$0(t, at$0(t, alarm)),
                         _b4_ = interval_num(t, alarm);
                        if(! caml_call2(_aC_[9], _b4_, _b3_))
                         throw caml_maybe_attach_backtrace
                                ([0, Assert_failure, _a0_], 1);
                        var
                         _b5_ = interval_start(t, t[4]),
                         _b6_ = interval_start(t, at$0(t, alarm));
                        if
                         (! caml_call2(Core_Time_ns_alternate_sexp[94], _b6_, _b5_))
                         throw caml_maybe_attach_backtrace
                                ([0, Assert_failure, _aZ_], 1);
                        var
                         _b7_ = alarm_precision$0(t),
                         _b8_ =
                           caml_call2(Core_Time_ns_alternate_sexp[54], t[4], _b7_),
                         _b9_ = at$0(t, alarm);
                        if(caml_call2(Core_Time_ns_alternate_sexp[97], _b9_, _b8_))
                         return 0;
                        throw caml_maybe_attach_backtrace
                               ([0, Assert_failure, _aY_], 1);
                       });
             });
   }
   var
    debug = 0,
    _a3_ = [0, cst_start],
    cst_Timing_wheel_create_got_st =
      "Timing_wheel.create got start before the epoch",
    _a4_ = [0, cst_timing_wheel_src_timing_wh, 1692, 53],
    _a5_ = [0, cst_max_allowed_alarm_time],
    _a6_ = [0, cst_at],
    cst_Timing_wheel_cannot_schedu =
      "Timing_wheel cannot schedule alarm that far in the future",
    _a7_ = [0, cst_now_interval_num_start],
    _a8_ = [0, cst_at],
    cst_Timing_wheel_cannot_schedu$0 =
      "Timing_wheel cannot schedule alarm before start of current interval",
    cst_Timing_wheel_cannot_resche =
      "Timing_wheel cannot reschedule alarm not in timing wheel",
    _a9_ = [0, cst],
    _a__ = [0, cst_timing_wheel],
    cst_Timing_wheel_min_alarm_int =
      "Timing_wheel.min_alarm_interval_num_exn of empty timing_wheel",
    _a$_ = [0, cst],
    _ba_ = [0, cst_timing_wheel],
    cst_Timing_wheel_max_alarm_tim = cst_Timing_wheel_max_alarm_tim$1,
    _bb_ = [0, cst],
    _bc_ = [0, cst_timing_wheel],
    cst_Timing_wheel_max_alarm_tim$0 = cst_Timing_wheel_max_alarm_tim$1;
   function advance_clock(t$0, to, handle_removed){
    var _b1_ = caml_call2(Core_Time_ns_alternate_sexp[97], to, t$0[4]);
    if(_b1_){
     t$0[4] = to;
     var t_min_allowed_key = interval_num_unchecked(t$0, to);
     t$0[5] = interval_num_start_unchecked(t$0, t_min_allowed_key);
     var t$1 = t$0[7];
     if(caml_call2(symbol$16, t_min_allowed_key, min_allowed_key$1(t$1)))
      var match = 0;
     else{
      var
       level_index = [0, 0],
       result = [0, 1],
       prev_level_max_allowed_key = [0, caml_call1(pred$0, t_min_allowed_key)],
       levels = t$1[5],
       num_levels$0 = num_levels(t$1);
      for(;;){
       if(! caml_call2(Core[91], level_index[1], num_levels$0)){
        if(caml_call2(symbol$18, t_min_allowed_key, t$1[4])){
         t$1[3] = caml_call1(null$1, 0);
         t$1[4] = min_allowed_key$1(t$1);
        }
        var match = result[1];
        break;
       }
       var
        _b0_ = level_index[1],
        level = caml_check_bound(levels, _b0_)[1 + _b0_],
        min_allowed_key_before = level[9],
        prev_level_max_allowed_key$0 = prev_level_max_allowed_key[1],
        desired_min_allowed_key =
          compute_min_allowed_key(level, prev_level_max_allowed_key$0),
        level_min_allowed_key =
          min_key_in_same_slot
           (level,
            caml_call2
             (min$0,
              desired_min_allowed_key,
              caml_call2(max$0, level[9], t$1[4]))),
        level_min_allowed_key$0 = [0, level_min_allowed_key],
        slot$0 = [0, slot(level, level_min_allowed_key$0[1])],
        keys_per_slot = level[5],
        slots = level[11];
       for(;;){
        if
         (!
          caml_call2
           (symbol$19, level_min_allowed_key$0[1], desired_min_allowed_key))
         break;
        if(caml_call2(Core[89], level[8], 0))
         level_min_allowed_key$0[1] = desired_min_allowed_key;
        else{
         var
          _bX_ = slot$0[1],
          first = caml_check_bound(slots, _bX_)[1 + _bX_];
         if(1 - caml_call1(is_null, first)){
          var _bY_ = caml_call1(null$1, 0), _bZ_ = slot$0[1];
          caml_check_bound(slots, _bZ_)[1 + _bZ_] = _bY_;
          var pool = t$1[2], current = [0, first], continue$0 = [0, 1];
          for(;;){
           if(! continue$0[1]) break;
           var next$0 = next(pool, current[1]);
           level[8] = level[8] - 1 | 0;
           if(caml_call2(symbol$15, key(pool, current[1]), t_min_allowed_key))
            add_elt(t$1, current[1]);
           else{
            t$1[1] = t$1[1] - 1 | 0;
            var t = current[1];
            caml_call1(handle_removed, t);
            caml_call2(free, pool, current[1]);
           }
           if(next$0 === first) continue$0[1] = 0; else current[1] = next$0;
          }
         }
         slot$0[1] = next_slot(level, slot$0[1]);
         level_min_allowed_key$0[1] =
          add_clamp_to_max(level_min_allowed_key$0[1], keys_per_slot);
        }
       }
       level[9] = desired_min_allowed_key;
       level[10] = add_clamp_to_max(desired_min_allowed_key, level[7]);
       if(caml_call2(equal$3, level[9], min_allowed_key_before)){level_index[1] = num_levels$0; result[1] = 0;}
       else{
        level_index[1] = level_index[1] + 1 | 0;
        prev_level_max_allowed_key[1] = level[10];
       }
      }
     }
     if(match){t$0[6] = compute_max_allowed_alarm_time(t$0); return 0;}
     var _b2_ = debug;
    }
    else
     var _b2_ = _b1_;
    return _b2_;
   }
   function create$2(config, start){
    if
     (caml_call2
       (Core_Time_ns_alternate_sexp[98],
        start,
        Core_Time_ns_alternate_sexp[43])){
     var
      _bN_ =
        [0,
         [1,
          [0,
           _a3_,
           [0, caml_call1(Core_Time_ns_alternate_sexp[92], start), 0]]],
         0],
      _bO_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_create_got_st),
          _bN_]];
     caml_call1(Core[255], _bO_);
    }
    var
     level_bits = config[2],
     capacity$0 = config[3],
     levels =
       caml_call3
         (Core_List[33],
          level_bits,
          [0, zero, zero$1, 0],
          function(index, param, level_bits){
           var
            levels = param[3],
            max_level_min_allowed_key = param[2],
            bits_per_slot = param[1],
            keys_per_slot = pow2(bits_per_slot),
            diff_max_min_allowed_key =
              compute_diff_max_min_allowed_k(level_bits, bits_per_slot),
            min_key_in_same_slot_mask = create$1(bits_per_slot),
            min_allowed_key =
              caml_call2
               (bit_and, max_level_min_allowed_key, min_key_in_same_slot_mask),
            max_allowed_key =
              add_clamp_to_max(min_allowed_key, diff_max_min_allowed_key),
            _bR_ = caml_call1(null$1, 0),
            _bS_ = pow2(level_bits),
            _bT_ = caml_call1(Core_Int63[5], _bS_),
            _bU_ = caml_call2(Core_Array[60], _bT_, _bR_),
            level =
              [0,
               index,
               level_bits,
               create$0(level_bits),
               bits_per_slot,
               keys_per_slot,
               min_key_in_same_slot_mask,
               diff_max_min_allowed_key,
               0,
               min_allowed_key,
               max_allowed_key,
               _bU_],
            _bV_ = [0, level, levels],
            _bW_ =
              caml_call2(symbol$17, max_allowed_key, max_value$0)
               ? max_value$0
               : caml_call1(succ$0, max_allowed_key);
           return [0, symbol$2(level_bits, bits_per_slot), _bW_, _bV_];
          })
        [3],
     _bK_ = caml_call1(Core_Array[96], levels),
     _bL_ = caml_call1(null$1, 0),
     capacity = capacity$0 ? capacity$0[1] : 1,
     _bM_ =
       [0,
        0,
        caml_call2(Tuple_pool[36][35], Tuple_pool[36][1][22], capacity),
        _bL_,
        zero$1,
        _bK_],
     _bP_ = Core_Time_ns_alternate_sexp[46],
     _bQ_ = Core_Time_ns_alternate_sexp[46],
     t =
       [0,
        config,
        start,
        interval_num_internal(max_time, config[1]),
        _bQ_,
        _bP_,
        max_time,
        _bM_];
    t[6] = compute_max_allowed_alarm_time(t);
    advance_clock
     (t,
      start,
      function(param){
       throw caml_maybe_attach_backtrace([0, Assert_failure, _a4_], 1);
      });
    return t;
   }
   function add_at_interval_num(t, at, value){
    var
     _bJ_ = interval_num_start(t, at),
     t$0 = internal_add(t[7], at, _bJ_, value);
    return t$0;
   }
   function ensure_can_schedule_alarm(t, at){
    if(caml_call2(Core_Time_ns_alternate_sexp[97], at, t[6])){
     var
      _bC_ =
        [0,
         [1,
          [0, _a5_, [0, caml_call1(Core_Time_ns_alternate_sexp[92], t[6]), 0]]],
         0],
      _bD_ =
        [0,
         [1,
          [0, _a6_, [0, caml_call1(Core_Time_ns_alternate_sexp[92], at), 0]]],
         _bC_],
      _bE_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_cannot_schedu),
          _bD_]];
     caml_call1(Core[255], _bE_);
    }
    var _bI_ = caml_call2(Core_Time_ns_alternate_sexp[98], at, t[5]);
    if(! _bI_) return _bI_;
    var
     _bF_ =
       [0,
        [1,
         [0, _a7_, [0, caml_call1(Core_Time_ns_alternate_sexp[92], t[5]), 0]]],
        0],
     _bG_ =
       [0,
        [1,
         [0, _a8_, [0, caml_call1(Core_Time_ns_alternate_sexp[92], at), 0]]],
        _bF_],
     _bH_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_cannot_schedu$0),
         _bG_]];
    return caml_call1(Core[255], _bH_);
   }
   function add$0(t, at, value){
    ensure_can_schedule_alarm(t, at);
    var
     _bB_ = interval_num_unchecked(t, at),
     t$0 = internal_add(t[7], _bB_, at, value);
    return t$0;
   }
   function remove(t, alarm){
    var t$0 = t[7], pool = t$0[2], elt = of_external_exn(pool, alarm);
    internal_remove(t$0, elt);
    return caml_call2(free, pool, elt);
   }
   function clear(t){
    var t$0 = t[7], _bs_ = 1 - is_empty(t$0);
    if(_bs_){
     t$0[1] = 0;
     var
      pool = t$0[2],
      free_elt = function(elt){return caml_call2(free, pool, elt);},
      levels = t$0[5],
      _bu_ = levels.length - 2 | 0,
      _bt_ = 0;
     if(_bu_ >= 0){
      var level_index = _bt_;
      for(;;){
       var level = caml_check_bound(levels, level_index)[1 + level_index];
       if(caml_call2(Core[90], level[8], 0)){
        level[8] = 0;
        var slots = level[11], _bx_ = slots.length - 2 | 0, _bw_ = 0;
        if(_bx_ >= 0){
         var slot_index = _bw_;
         for(;;){
          var elt = caml_check_bound(slots, slot_index)[1 + slot_index];
          if(1 - caml_call1(is_null, elt)){
           iter(pool, elt, free_elt);
           var _bz_ = caml_call1(null$1, 0);
           caml_check_bound(slots, slot_index)[1 + slot_index] = _bz_;
          }
          var _bA_ = slot_index + 1 | 0;
          if(_bx_ === slot_index) break;
          slot_index = _bA_;
         }
        }
       }
       var _by_ = level_index + 1 | 0;
       if(_bu_ === level_index) break;
       level_index = _by_;
      }
     }
     var _bv_ = 0;
    }
    else
     var _bv_ = _bs_;
    return _bv_;
   }
   function mem(t, alarm){var t$0 = t[7]; return is_valid(t$0[2], alarm);}
   function reschedule_gen(t, alarm, key, at){
    if(1 - mem(t, alarm)) caml_call1(Core[5], cst_Timing_wheel_cannot_resche);
    ensure_can_schedule_alarm(t, at);
    var t$0 = t[7];
    ensure_valid_key(t$0, key);
    var pool = t$0[2], elt = of_external_exn(pool, alarm);
    internal_remove(t$0, elt);
    caml_call4(Tuple_pool[36][33], pool, elt, Tuple_pool[36][2][3], key);
    caml_call4(Tuple_pool[36][33], pool, elt, Tuple_pool[36][2][4], at);
    return internal_add_elt(t$0, elt);
   }
   function reschedule(t, alarm, at){
    return reschedule_gen(t, alarm, interval_num_unchecked(t, at), at);
   }
   function reschedule_at_interval_num(t, alarm, at){
    return reschedule_gen(t, alarm, at, interval_num_start(t, at));
   }
   function min_alarm_interval_num(t){
    var elt = min_elt$1(t[7]);
    return caml_call1(is_null, elt) ? 0 : [0, key(pool$1(t), elt)];
   }
   function min_alarm_interval_num_exn(x_164){
    var elt = min_elt$1(x_164[7]);
    if(! caml_call1(is_null, elt)) return key(pool$1(x_164), elt);
    var
     _bq_ =
       [0,
        [1,
         [0, _a__, [0, sexp_of_t$10(function(param){return _a9_;}, x_164), 0]]],
        0],
     _br_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_min_alarm_int),
         _bq_]];
    return caml_call1(Core[255], _br_);
   }
   function max_alarm_time_in_list(t, first){
    var
     pool = pool$1(t),
     with_key = key(pool, first),
     max_alarm_time = [0, Core_Time_ns_alternate_sexp[43]],
     current = [0, first],
     continue$0 = [0, 1];
    for(;;){
     if(! continue$0[1]) return max_alarm_time[1];
     var next$0 = next(pool, current[1]);
     if(caml_call2(equal$3, key(pool, current[1]), with_key)){
      var _bo_ = max_alarm_time[1], _bp_ = at(pool, current[1]);
      max_alarm_time[1] =
       caml_call2(Core_Time_ns_alternate_sexp[103], _bp_, _bo_);
     }
     if(next$0 === first) continue$0[1] = 0; else current[1] = next$0;
    }
   }
   function min_alarm_time_in_list(t, first){
    var
     pool = pool$1(t),
     with_key = key(pool, first),
     min_alarm_time = [0, Core_Time_ns_alternate_sexp[45]],
     current = [0, first],
     continue$0 = [0, 1];
    for(;;){
     if(! continue$0[1]) return min_alarm_time[1];
     var next$0 = next(pool, current[1]);
     if(caml_call2(equal$3, key(pool, current[1]), with_key)){
      var _bm_ = min_alarm_time[1], _bn_ = at(pool, current[1]);
      min_alarm_time[1] =
       caml_call2(Core_Time_ns_alternate_sexp[102], _bn_, _bm_);
     }
     if(next$0 === first) continue$0[1] = 0; else current[1] = next$0;
    }
   }
   function max_alarm_time_in_min_interval(t){
    var elt = min_elt$1(t[7]);
    return caml_call1(is_null, elt) ? 0 : [0, max_alarm_time_in_list(t, elt)];
   }
   function min_alarm_time_in_min_interval(t){
    var elt = min_elt$1(t[7]);
    return caml_call1(is_null, elt) ? 0 : [0, min_alarm_time_in_list(t, elt)];
   }
   function max_alarm_time_in_min_interval$0(x_165){
    var elt = min_elt$1(x_165[7]);
    if(caml_call1(is_null, elt)){
     var
      _bk_ =
        [0,
         [1,
          [0,
           _ba_,
           [0, sexp_of_t$10(function(param){return _a$_;}, x_165), 0]]],
         0],
      _bl_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_max_alarm_tim),
          _bk_]];
     caml_call1(Core[255], _bl_);
    }
    return max_alarm_time_in_list(x_165, elt);
   }
   function min_alarm_time_in_min_interval$0(x_166){
    var elt = min_elt$1(x_166[7]);
    if(caml_call1(is_null, elt)){
     var
      _bi_ =
        [0,
         [1,
          [0,
           _bc_,
           [0, sexp_of_t$10(function(param){return _bb_;}, x_166), 0]]],
         0],
      _bj_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_max_alarm_tim$0),
          _bi_]];
     caml_call1(Core[255], _bj_);
    }
    return min_alarm_time_in_list(x_166, elt);
   }
   function fire_past_alarms(t, handle_fired){
    var
     now = t[4],
     key = now_interval_num(t),
     t$0 = t[7],
     level = caml_check_bound(t$0[5], 0)[1],
     _bd_ = caml_call2(Core[90], level[8], 0);
    if(_bd_){
     var
      slot$0 = slot(level, key),
      slots = level[11],
      pool = t$0[2],
      first = [0, caml_check_bound(slots, slot$0)[1 + slot$0]],
      _be_ = 1 - caml_call1(is_null, first[1]);
     if(_be_){
      var current = [0, first[1]], continue$0 = [0, 1];
      for(;;){
       if(! continue$0[1]){var _bg_ = 0; break;}
       var elt = current[1], next$0 = next(pool, elt);
       if(next$0 === first[1]) continue$0[1] = 0; else current[1] = next$0;
       var _bf_ = at(pool, elt);
       if(caml_call2(Core_Time_ns_alternate_sexp[95], _bf_, now)){
        caml_call1(handle_fired, elt);
        internal_remove(t$0, elt);
        caml_call2(free, pool, elt);
        first[1] = caml_check_bound(slots, slot$0)[1 + slot$0];
       }
      }
     }
     else
      var _bg_ = _be_;
     var _bh_ = _bg_;
    }
    else
     var _bh_ = _bd_;
    return _bh_;
   }
   caml_call1(Ppx_inline_test_lib[6], cst_timing_wheel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Timing_wheel);
   var
    Timing_wheel =
      [0,
       [0,
        compare,
        sexp_of_t$1,
        equal$0,
        of_span_floor_pow2_ns,
        of_span_floor_pow2_ns,
        to_sexpable,
        0,
        46,
        about_one_microsecond,
        20,
        30,
        mul,
        div,
        _k_],
       sexp_of_t$10,
       sexp_of_t_now,
       _aC_,
       [0, sexp_of_t$8, null$0, at$0, interval_num, value$0],
       invariant$2,
       [0,
        t_of_sexp$0,
        sexp_of_t$0,
        invariant$0,
        max_num_bits,
        create_exn,
        level_bits_default,
        num_bits],
       [0,
        t_of_sexp$2,
        sexp_of_t$3,
        invariant$1,
        create,
        alarm_precision,
        level_bits,
        durations,
        microsecond_precision],
       create$2,
       alarm_precision$0,
       now,
       start,
       is_empty$0,
       length$3,
       iter$0,
       interval_num$0,
       now_interval_num,
       interval_num_start,
       interval_start,
       advance_clock,
       fire_past_alarms,
       max_allowed_alarm_time,
       now_interval_num,
       max_allowed_alarm_interval_num,
       add$0,
       add_at_interval_num,
       mem,
       remove,
       reschedule,
       reschedule_at_interval_num,
       clear,
       min_alarm_interval_num,
       min_alarm_interval_num_exn,
       max_alarm_time_in_min_interval,
       min_alarm_time_in_min_interval,
       max_alarm_time_in_min_interval$0,
       min_alarm_time_in_min_interval$0,
       next_alarm_fires_at,
       next_alarm_fires_at_exn,
       [0, max_time, interval_num_internal, [0, invariant, zero]]];
   runtime.caml_register_global(220, Timing_wheel, cst_Timing_wheel);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
