// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Filename_base
//# unitInfo: Requires: Base, Base__List, Base__Printf, Base__String, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib__Filename
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$6 = "",
    cst$5 = ".",
    cst$4 = "/",
    cst_Filename_base = "Filename_base",
    cst_filename_base = "filename_base",
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$3 = cst$4,
    cst$1 = cst$5,
    cst$2 = "..",
    cst = cst$6,
    cst$0 = cst$4,
    root = cst$4,
    Base_String = global_data.Base__String,
    Base = global_data.Base,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_List = global_data.Base__List,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Base_Printf = global_data.Base__Printf,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Filename_base);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_filename_base);
   caml_call1
    (Expect_test_collector[6][1], "filename_base/src/filename_base.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_filename_base, "filename_base.ml");
   var
    comparator = Base_String[59],
    clamp = Base_String[58],
    clamp_exn = Base_String[57],
    between = Base_String[56],
    descending = Base_String[55],
    ascending = Base_String[54],
    max = Base_String[53],
    min = Base_String[52],
    compare = Base_String[51],
    equal = Base_String[131],
    symbol = Base_String[50],
    symbol$0 = Base_String[49],
    symbol$1 = Base_String[48],
    symbol$2 = Base_String[47],
    symbol$3 = Base_String[46],
    symbol$4 = Base_String[45],
    t_sexp_grammar = Base_String[2],
    sexp_of_t = Base_String[42],
    t_of_sexp = Base_String[41];
   function hash(_x_){return runtime.Base_hash_string(_x_);}
   var
    hash_fold_t = Base_String[40],
    check_suffix = Stdlib_Filename[7],
    chop_extension = Stdlib_Filename[12],
    chop_suffix = Stdlib_Filename[8],
    chop_suffix_opt = Stdlib_Filename[9],
    current_dir_name = Stdlib_Filename[1],
    is_implicit = Stdlib_Filename[6],
    is_relative = Stdlib_Filename[5],
    parent_dir_name = Stdlib_Filename[2],
    dir_sep = Stdlib_Filename[3],
    quote = Stdlib_Filename[21],
    temp_dir_name = caml_call1(Stdlib_Filename[19], 0),
    dirname = Stdlib_Filename[14],
    basename = Stdlib_Filename[13],
    _a_ =
      [0,
       [11,
        "Filename.concat called with an empty string as its first argument (second argument: ",
        [2, 0, [12, 41, 0]]],
       "Filename.concat called with an empty string as its first argument (second argument: %s)"],
    _b_ =
      [0,
       [11,
        "Filename.to_absolute_exn called with a [relative_to] that is a relative path: ",
        [2, 0, 0]],
       "Filename.to_absolute_exn called with a [relative_to] that is a relative path: %s"],
    cst_Filename_of_parts_empty_pa = "Filename.of_parts: empty parts list",
    _c_ = [0, "first_arg"],
    cst_Filename_of_absolute_exn_f =
      "Filename.of_absolute_exn: first argument must be an absolute path",
    _d_ = [0, "relative_to"],
    cst_Filename_of_absolute_exn_r =
      "Filename.of_absolute_exn: [~relative_to] must be an absolute path";
   function is_absolute(p){return 1 - caml_call1(is_relative, p);}
   function concat(p1, p2){
    if(caml_call1(Base_String[14], p1))
     caml_call3(Base_Printf[6], _a_, p2, 0);
    a:
    {
     var s$1 = p2;
     for(;;){
      var match$0 = caml_call2(Base_String[97], s$1, 47);
      if(! match$0) break a;
      var _t_ = match$0[1], _u_ = _t_[1];
      if(_u_ !== cst$6 && _u_ !== cst$5) break;
      var s$2 = _t_[2];
      s$1 = s$2;
     }
    }
    var s = p1, _v_ = caml_call2(Base[212], cst$0, s$1);
    for(;;){
     var match = caml_call2(Base_String[98], s, 47);
     a:
     {
      b:
      if(match){
       var _q_ = match[1], s$0 = _q_[1];
       c:
       if(s$0 === cst$6){
        var _s_ = _q_[2];
        if(_s_ !== cst$6 && _s_ !== cst$5) break c;
        var _w_ = cst;
        break a;
       }
       var _r_ = _q_[2];
       if(_r_ !== cst$6 && _r_ !== cst$5) break b;
       s = s$0;
       continue;
      }
      var _w_ = s;
     }
     return caml_call2(Base[212], _w_, _v_);
    }
   }
   function to_absolute_exn(p, relative_to){
    return caml_call1(is_relative, relative_to)
            ? caml_call3(Base_Printf[6], _b_, relative_to, 0)
            : is_absolute(p) ? p : concat(relative_to, p);
   }
   function split(s){
    var _p_ = caml_call1(basename, s);
    return [0, caml_call1(dirname, s), _p_];
   }
   function is_posix_pathname_component(s){
    var _j_ = caml_call2(symbol, s, cst$1);
    if(_j_){
     var _k_ = caml_call2(symbol, s, cst$2);
     if(_k_){
      var _l_ = 0 < caml_ml_string_length(s) ? 1 : 0;
      if(_l_){
       var _m_ = caml_ml_string_length(s) <= 255 ? 1 : 0;
       if(_m_)
        var
         _n_ = 1 - caml_call4(Base_String[69], 0, 0, s, 47),
         _o_ = _n_ ? 1 - caml_call4(Base_String[69], 0, 0, s, 0) : _n_;
       else
        var _o_ = _m_;
      }
      else
       var _o_ = _l_;
     }
     else
      var _o_ = _k_;
    }
    else
     var _o_ = _j_;
    return _o_;
   }
   function split_extension(fn){
    var match = caml_call2(Base_String[98], fn, 47);
    if(match)
     var
      match$0 = match[1],
      fn$0 = match$0[2],
      path = match$0[1],
      fn$1 = fn$0,
      dir = [0, path];
    else
     var fn$1 = fn, dir = 0;
    var match$1 = caml_call2(Base_String[98], fn$1, 46);
    if(match$1)
     var
      match$2 = match$1[1],
      ext = match$2[2],
      base_fn = match$2[1],
      ext$0 = [0, ext],
      fn$2 = base_fn;
    else
     var ext$0 = 0, fn$2 = fn$1;
    if(dir)
     var
      dir$0 = dir[1],
      _i_ = caml_call2(Base[212], cst$3, fn$2),
      fn$3 = caml_call2(Base[212], dir$0, _i_);
    else
     var fn$3 = fn$2;
    return [0, fn$3, ext$0];
   }
   function parts(filename){
    var acc = 0, filename$0 = filename;
    for(;;){
     var match = split(filename$0), filename$1 = match[1];
     if(filename$1 !== cst$5){
      if(filename$1 === cst$4 && match[2] === cst$4)
       return [0, filename$1, acc];
     }
     else if(match[2] === cst$5) return [0, filename$1, acc];
     var dir = match[2], acc$0 = [0, dir, acc];
     acc = acc$0;
     filename$0 = filename$1;
    }
   }
   function of_parts(param){
    if(! param) return caml_call1(Base[215], cst_Filename_of_parts_empty_pa);
    var rest = param[2], root = param[1];
    return caml_call3(Base_List[20], rest, root, Stdlib_Filename[4]);
   }
   function of_absolute_exn(a, b){
    if(caml_call1(is_relative, a)){
     var
      _e_ = [0, [1, [0, _c_, [0, caml_call1(Base[177], a), 0]]], 0],
      _f_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Filename_of_absolute_exn_f),
          _e_]];
     caml_call1(Base[217], _f_);
    }
    if(caml_call1(is_relative, b)){
     var
      _g_ = [0, [1, [0, _d_, [0, caml_call1(Base[177], b), 0]]], 0],
      _h_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Filename_of_absolute_exn_r),
          _g_]];
     caml_call1(Base[217], _h_);
    }
    var a_parts = parts(a), b_parts = parts(b);
    a:
    {
     var a_suffix = a_parts, b_suffix = b_parts;
     for(;;){
      if(! a_suffix) break a;
      if(! b_suffix) break a;
      var
       t2 = b_suffix[2],
       h2 = b_suffix[1],
       t1 = a_suffix[2],
       h1 = a_suffix[1];
      if(! caml_call2(Base_String[131], h1, h2)) break;
      a_suffix = t1;
      b_suffix = t2;
     }
    }
    var
     go_up =
       caml_call2
        (Base_List[52], b_suffix, function(param){return parent_dir_name;}),
     relpath = caml_call2(Base[193], go_up, a_suffix);
    return relpath ? of_parts(relpath) : current_dir_name;
   }
   caml_call1(Ppx_inline_test_lib[6], cst_filename_base);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Filename_base);
   var
    Filename_base =
      [0,
       hash_fold_t,
       hash,
       t_of_sexp,
       sexp_of_t,
       t_sexp_grammar,
       symbol$4,
       symbol$3,
       symbol$2,
       symbol$1,
       symbol$0,
       symbol,
       equal,
       compare,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       root,
       is_posix_pathname_component,
       temp_dir_name,
       current_dir_name,
       parent_dir_name,
       dir_sep,
       concat,
       is_relative,
       is_absolute,
       is_implicit,
       check_suffix,
       chop_suffix,
       chop_suffix_opt,
       chop_extension,
       split_extension,
       basename,
       dirname,
       to_absolute_exn,
       of_absolute_exn,
       split,
       parts,
       of_parts,
       quote,
       667828424,
       667828424,
       667828424,
       667828424,
       667828424,
       667828424,
       667828424];
   runtime.caml_register_global(41, Filename_base, cst_Filename_base);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
