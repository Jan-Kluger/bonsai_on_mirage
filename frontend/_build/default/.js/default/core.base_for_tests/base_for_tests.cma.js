// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Base_for_tests
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_for_tests = [0];
   runtime.caml_register_global(0, Base_for_tests, "Base_for_tests");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_for_tests__Test_blit_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_for_tests_Test_blit_intf = [0];
   runtime.caml_register_global
    (0, Base_for_tests_Test_blit_intf, "Base_for_tests__Test_blit_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_for_tests__Test_blit
//# unitInfo: Requires: Base__Blit, Base_for_tests__Test_blit_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Blit = global_data.Base__Blit,
    Assert_failure = global_data.Assert_failure,
    _a_ = [0, "base_for_tests/src/test_blit.ml", 70, 11],
    dummy = 0;
   function Test_gen(For_tests, Tested){
    var
     elt1 = caml_call1(For_tests[1][2], 1),
     elt2 = caml_call1(For_tests[1][2], 0);
    if(caml_call2(For_tests[1][1], elt1, elt2))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function Test1(Sequence, Tested){
    var equal = runtime.caml_equal;
    function of_bool(_v_){return _v_;}
    var
     Elt = [0, equal, of_bool],
     length = Sequence[1],
     create_bool = Sequence[2],
     get = Sequence[3],
     set = Sequence[4],
     overlapping_src_dst = [0, -656144216, function(_u_){return _u_;}],
     Dst = [0, length, create_bool, get, set, overlapping_src_dst];
    return Test_gen([0, Elt, Sequence, Dst], [0, Tested[2], Tested[4]]);
   }
   function Test1_generic(Elt, Sequence, Tested){
    var
     length = Sequence[1],
     create_bool = Sequence[2],
     get = Sequence[3],
     set = Sequence[4],
     overlapping_src_dst = [0, -656144216, function(_t_){return _t_;}],
     Dst = [0, length, create_bool, get, set, overlapping_src_dst];
    return Test_gen([0, Elt, Sequence, Dst], [0, Tested[2], Tested[4]]);
   }
   function Elt_to_elt1(Elt){
    var equal = Elt[1], of_bool = Elt[2];
    return [0, equal, of_bool];
   }
   function Test(_q_, Sequence, Tested){
    var
     _r_ = [0, Tested[2], Tested[4]],
     Elt = Elt_to_elt1(_q_),
     length = Sequence[2],
     get = Sequence[3],
     set = Sequence[4],
     create_bool = Sequence[1],
     overlapping_src_dst = [0, -656144216, function(_s_){return _s_;}];
    return Test_gen
            ([0,
              Elt,
              [0, length, create_bool, get, set],
              [0, length, create_bool, get, set, overlapping_src_dst]],
             _r_);
   }
   function Test_distinct(_o_, Src, Dst, Tested){
    var
     _p_ = [0, Tested[2], Tested[4]],
     Elt = Elt_to_elt1(_o_),
     length = Src[2],
     get = Src[3],
     set = Src[4],
     create_bool = Src[1],
     length$0 = Dst[2],
     get$0 = Dst[3],
     set$0 = Dst[4],
     create_bool$0 = Dst[1];
    return Test_gen
            ([0,
              Elt,
              [0, length, create_bool, get, set],
              [0, length$0, create_bool$0, get$0, set$0, 1021207688]],
             _p_);
   }
   var
    Base_for_tests_Test_blit =
      [0,
       function(_n_, _m_, _l_){Test(_n_, _m_, _l_); return [0];},
       function(_k_, _j_, _i_, _h_){
        Test_distinct(_k_, _j_, _i_, _h_);
        return [0];
       },
       function(_g_, _f_){Test1(_g_, _f_); return [0];},
       function(_e_, _d_, _c_){Test1_generic(_e_, _d_, _c_); return [0];},
       function(Elt, Sequence){
        var
         B =
           caml_call1
            (Base_Blit[1], [0, Sequence[2], Sequence[1], Sequence[5]]);
        Test(Elt, [0, Sequence[1], Sequence[2], Sequence[3], Sequence[4]], B);
        var
         blit = B[1],
         blito = B[2],
         unsafe_blit = B[3],
         sub = B[4],
         subo = B[5];
        return [0, blit, blito, unsafe_blit, sub, subo];
       },
       function(Elt, Src, Dst){
        var
         _b_ = [0, Dst[2], Dst[1], Dst[5]],
         B = caml_call1(caml_call1(Base_Blit[2], [0, Src[2]]), _b_);
        Test_distinct(Elt, Src, [0, Dst[1], Dst[2], Dst[3], Dst[4]], B);
        var
         blit = B[1],
         blito = B[2],
         unsafe_blit = B[3],
         sub = B[4],
         subo = B[5];
        return [0, blit, blito, unsafe_blit, sub, subo];
       },
       function(Sequence){
        var
         B =
           caml_call1
            (Base_Blit[4], [0, Sequence[1], Sequence[3], Sequence[2]]);
        Test1([0, Sequence[3], Sequence[4], Sequence[5], Sequence[6]], B);
        var
         blit = B[1],
         blito = B[2],
         unsafe_blit = B[3],
         sub = B[4],
         subo = B[5];
        return [0, blit, blito, unsafe_blit, sub, subo];
       },
       function(Elt, Sequence){
        var
         B =
           caml_call1
            (Base_Blit[5], [0, Sequence[1], Sequence[3], Sequence[2]]);
        Test1_generic
         (Elt, [0, Sequence[3], Sequence[4], Sequence[5], Sequence[6]], B);
        var
         blit = B[1],
         blito = B[2],
         unsafe_blit = B[3],
         sub = B[4],
         subo = B[5];
        return [0, blit, blito, unsafe_blit, sub, subo];
       }];
   runtime.caml_register_global
    (3, Base_for_tests_Test_blit, "Base_for_tests__Test_blit");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_for_tests__Test_binary_searchable_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Base_for_tests_Test_binary_sea = [0];
   runtime.caml_register_global
    (0,
     Base_for_tests_Test_binary_sea,
     "Base_for_tests__Test_binary_searchable_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_for_tests__Test_binary_searchable
//# unitInfo: Requires: Base__Binary_searchable, Base__Bool, Base_for_tests__Test_binary_searchable_intf
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Binary_searchable = global_data.Base__Binary_searchable;
   global_data.Base__Bool;
   function Test(M){return [0];}
   function Test1(M){return [0];}
   var
    Base_for_tests_Test_binary_sea =
      [0,
       Test,
       Test1,
       function(M){
        var
         B = caml_call1(Base_Binary_searchable[1], [0, M[1], M[2]]),
         binary_search = B[1],
         binary_search_segmented = B[2];
        return [0, binary_search, binary_search_segmented];
       },
       function(M){
        var
         B = caml_call1(Base_Binary_searchable[2], [0, M[1], M[2]]),
         binary_search = B[1],
         binary_search_segmented = B[2];
        return [0, binary_search, binary_search_segmented];
       }];
   runtime.caml_register_global
    (2,
     Base_for_tests_Test_binary_sea,
     "Base_for_tests__Test_binary_searchable");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
