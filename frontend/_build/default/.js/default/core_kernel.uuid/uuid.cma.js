// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Uuid
//# unitInfo: Requires: Base__Bytes, Base__Random, Base__Sexpable, Bin_prot__Shape, Bin_shape, Core, Core__Bytes, Core__Char, Core__Command_internal, Core__Comparable, Core__Comparator, Core__Float, Core__Identifiable, Core__Int, Core__Md5, Core__Quickcheck, Core__Stable, Core__String, Core__Time_float, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stable_witness
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Uuid = "Uuid",
    cst_t = "t",
    cst_uuid = "uuid",
    cst_uuid_src_uuid_ml = "uuid/src/uuid.ml",
    caml_bytes_set = runtime.caml_bytes_set,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    for_testing = "5a863fc1-67b7-3a0a-dc90-aca2995afbf9",
    module_name = cst_Uuid,
    nil = "00000000-0000-0000-0000-000000000000",
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Time_float = global_data.Core__Time_float,
    Core_Int = global_data.Core__Int,
    Core_Float = global_data.Core__Float,
    Core_String = global_data.Core__String,
    Core_Md5 = global_data.Core__Md5,
    Core_Bytes = global_data.Core__Bytes,
    Base_Bytes = global_data.Base__Bytes,
    Base_Random = global_data.Base__Random,
    Core_Char = global_data.Core__Char,
    Assert_failure = global_data.Assert_failure,
    Core_Stable = global_data.Core__Stable,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Stable_witness = global_data.Stable_witness,
    Core_Comparator = global_data.Core__Comparator,
    Core_Comparable = global_data.Core__Comparable,
    Base_Sexpable = global_data.Base__Sexpable,
    Core_Identifiable = global_data.Core__Identifiable,
    Core_Command_internal = global_data.Core__Command_internal,
    Core_Quickcheck = global_data.Core__Quickcheck;
   caml_call1(Ppx_module_timer_runtime[4], cst_Uuid);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_uuid);
   caml_call1(Expect_test_collector[6][1], cst_uuid_src_uuid_ml);
   caml_call2(Ppx_inline_test_lib[5], cst_uuid, "uuid.ml");
   var
    _a_ = Core_Stable[58],
    _b_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _a_], 0],
    _c_ = caml_call1(Bin_shape[4][1], "uuid/src/uuid.ml:21:6"),
    group = caml_call2(Bin_prot_Shape[2], _c_, _b_),
    _d_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t = caml_call1(caml_call2(Bin_prot_Shape[10], group, _d_), 0),
    bin_size_t = Core_Stable[3],
    bin_write_t = Core_Stable[60],
    bin_writer_t = [0, bin_size_t, bin_write_t],
    bin_read_t = Core_Stable[63],
    bin_read_t$0 = Core_Stable[62],
    bin_reader_t = [0, bin_read_t$0, bin_read_t],
    bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t],
    compare = Core_Stable[374],
    equal = Core_Stable[387],
    hash_fold_t = Core_Stable[224],
    func = Core_Stable[238];
   function hash(x){return caml_call1(func, x);}
   var
    t_of_sexp = Core_Stable[292],
    sexp_of_t = Core_Stable[291],
    stable_witness = Stable_witness[6],
    include = caml_call2(Core_Comparator[11][1][1], compare, sexp_of_t),
    comparator = include[1],
    include$0 =
      caml_call1
       (Core_Comparable[25][1][2][1],
        [0,
         stable_witness,
         bin_size_t,
         bin_write_t,
         bin_read_t$0,
         bin_read_t,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         compare,
         t_of_sexp,
         sexp_of_t,
         comparator]),
    Map = include$0[1],
    Set = include$0[2],
    _e_ = [0, cst_uuid_src_uuid_ml, 51, 6],
    _f_ = [0, cst_uuid_src_uuid_ml, 50, 6],
    _g_ = [0, cst_uuid_src_uuid_ml, 49, 6],
    _h_ = [0, cst_uuid_src_uuid_ml, 48, 6],
    _i_ = [0, cst_uuid_src_uuid_ml, 47, 6],
    _j_ = [0, cst_uuid_src_uuid_ml, 46, 6],
    _k_ = [0, [2, 0, [11, ": not a valid UUID", 0]], "%s: not a valid UUID"];
   function to_string(t){return t;}
   function char_is_dash(c){return caml_call2(Core_Char[50], 45, c);}
   function is_valid_exn(s){
    if(! caml_call2(Core[89], runtime.caml_ml_string_length(s), 36))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _j_], 1);
    var _L_ = caml_call2(Core_String[21], s, char_is_dash);
    if(! caml_call2(Core[89], _L_, 4))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
    if(! char_is_dash(caml_string_get(s, 8)))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
    if(! char_is_dash(caml_string_get(s, 13)))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
    if(! char_is_dash(caml_string_get(s, 18)))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
    if(char_is_dash(caml_string_get(s, 23))) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
   }
   function of_string(s){
    try{is_valid_exn(s); return s;}
    catch(_K_){return caml_call3(Core[240], _k_, s, 0);}
   }
   var
    _l_ = Core[471],
    _m_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, _l_], 0],
    _n_ = caml_call1(Bin_shape[4][1], "uuid/src/uuid.ml:67:2"),
    group$0 = caml_call2(Bin_prot_Shape[2], _n_, _m_),
    _o_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t$0 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$0, _o_), 0),
    bin_size_t$0 = Core[472],
    bin_write_t$0 = Core[473],
    bin_writer_t$0 = [0, bin_size_t$0, bin_write_t$0],
    bin_read_t$1 = Core[476],
    bin_read_t$2 = Core[475],
    bin_reader_t$0 = [0, bin_read_t$2, bin_read_t$1],
    bin_t$0 = [0, bin_shape_t$0, bin_writer_t$0, bin_reader_t$0],
    compare$0 = Core[479],
    hash_fold_t$0 = Core[482],
    func$0 = Core[483];
   function hash$0(x){return caml_call1(func$0, x);}
   var counter = [0, 0], dummy = 0;
   function set_all_dashes(bytes){
    caml_bytes_set(bytes, 8, 45);
    caml_bytes_set(bytes, 13, 45);
    caml_bytes_set(bytes, 18, 45);
    caml_bytes_set(bytes, 23, 45);
   }
   function bottom_4_bits_to_hex_char(v){
    var v$0 = v & 15;
    return caml_call2(Core[91], v$0, 10)
            ? caml_call1(Core_Char[10], 48 + v$0 | 0)
            : caml_call1(Core_Char[10], 87 + v$0 | 0);
   }
   var bytes = caml_call1(Core_Bytes[40], 36), _p_ = [0, "-"];
   function create_random(random_state){
    var at = [0, 0], for$0 = 1;
    for(;;){
     var int$0 = [0, caml_call1(Base_Random[18][5], random_state)], for$1 = 1;
     for(;;){
      var _I_ = bottom_4_bits_to_hex_char(int$0[1]);
      caml_bytes_set(bytes, at[1], _I_);
      at[1]++;
      int$0[1] = int$0[1] >>> 4 | 0;
      var _J_ = for$1 + 1 | 0;
      if(6 === for$1) break;
      for$1 = _J_;
     }
     var _H_ = for$0 + 1 | 0;
     if(6 === for$0){
      set_all_dashes(bytes);
      caml_bytes_set(bytes, 14, 52);
      return caml_call1(Core_Bytes[37], bytes);
     }
     for$0 = _H_;
    }
   }
   function create(hostname, pid){
    var time = caml_call1(Core_Time_float[47], 0);
    counter[1]++;
    var
     counter$0 = counter[1],
     _B_ = [0, caml_call1(Core_Int[84], counter$0), 0],
     _C_ = caml_call1(Core_Time_float[23], time),
     _D_ = caml_call1(Core_Time_float[84][88], _C_),
     _E_ = [0, caml_call1(Core_Float[155], _D_), _B_],
     _F_ = [0, hostname, [0, caml_call1(Core_Int[84], pid), _E_]],
     base = caml_call2(Core_String[45], _p_, _F_),
     _G_ = caml_call1(Core_Md5[47], base),
     digest = caml_call1(Core_Md5[45], _G_),
     bytes = caml_call1(Core_Bytes[40], 36);
    set_all_dashes(bytes);
    caml_call5(Base_Bytes[31][1], digest, 0, bytes, 0, 8);
    caml_call5(Base_Bytes[31][1], digest, 8, bytes, 9, 4);
    caml_call5(Base_Bytes[31][1], digest, 12, bytes, 14, 4);
    caml_call5(Base_Bytes[31][1], digest, 16, bytes, 19, 4);
    caml_call5(Base_Bytes[31][1], digest, 20, bytes, 24, 12);
    caml_bytes_set(bytes, 14, 51);
    return caml_call1(Core_Bytes[37], bytes);
   }
   var
    include$1 = caml_call1(Base_Sexpable[5], [0, of_string, to_string]),
    t_of_sexp$0 = include$1[2],
    sexp_of_t$0 = include$1[3],
    include$2 =
      caml_call1
       (Core_Identifiable[5],
        [0,
         bin_size_t$0,
         bin_write_t$0,
         bin_read_t$2,
         bin_read_t$1,
         bin_shape_t$0,
         bin_writer_t$0,
         bin_reader_t$0,
         bin_t$0,
         compare$0,
         hash_fold_t$0,
         hash$0,
         t_of_sexp$0,
         sexp_of_t$0,
         comparator,
         of_string,
         to_string,
         module_name]),
    bin_size_t$1 = include$2[1],
    bin_write_t$1 = include$2[2],
    bin_read_t$3 = include$2[3],
    bin_read_t$4 = include$2[4],
    bin_shape_t$1 = include$2[5],
    bin_writer_t$1 = include$2[6],
    bin_reader_t$1 = include$2[7],
    bin_t$1 = include$2[8],
    t_of_sexp$1 = include$2[9],
    sexp_of_t$1 = include$2[10],
    of_string$0 = include$2[11],
    to_string$0 = include$2[12],
    pp = include$2[13],
    symbol = include$2[14],
    symbol$0 = include$2[15],
    symbol$1 = include$2[16],
    symbol$2 = include$2[17],
    symbol$3 = include$2[18],
    symbol$4 = include$2[19],
    equal$0 = include$2[20],
    compare$1 = include$2[21],
    min = include$2[22],
    max = include$2[23],
    ascending = include$2[24],
    descending = include$2[25],
    between = include$2[26],
    clamp_exn = include$2[27],
    clamp = include$2[28],
    validate_lbound = include$2[29],
    validate_ubound = include$2[30],
    validate_bound = include$2[31],
    Replace_polymorphic_compare = include$2[32],
    comparator$0 = include$2[33],
    Map$0 = include$2[34],
    Set$0 = include$2[35],
    hash_fold_t$1 = include$2[36],
    hash$1 = include$2[37],
    hashable = include$2[38],
    Table = include$2[39],
    Hash_set = include$2[40],
    Hash_queue = include$2[41];
   function invariant(t){caml_call1(of_string$0, t); return 0;}
   var
    _q_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t), 0, bin_shape_t$1], 0],
    _r_ = caml_call1(Bin_shape[4][1], "uuid/src/uuid.ml:162:2"),
    group$1 = caml_call2(Bin_prot_Shape[2], _r_, _q_),
    _s_ = caml_call1(Bin_shape[2][1], cst_t),
    bin_shape_t$2 =
      caml_call1(caml_call2(Bin_prot_Shape[10], group$1, _s_), 0),
    bin_writer_t$2 = [0, bin_size_t$1, bin_write_t$1],
    bin_reader_t$2 = [0, bin_read_t$3, bin_read_t$4],
    bin_t$2 = [0, bin_shape_t$2, bin_writer_t$2, bin_reader_t$2];
   function hash$2(x){return caml_call1(hash$1, x);}
   var
    t_sexp_grammar = Core[486],
    arg_type = caml_call3(Core_Command_internal[18][1], 0, 0, of_string$0),
    cst_uuid_omitted_in_test = "<uuid-omitted-in-test>";
   function sexp_of_t$2(t){
    return Core[542]
            ? caml_call1(Sexplib0_Sexp_conv[7], cst_uuid_omitted_in_test)
            : caml_call1(sexp_of_t$1, t);
   }
   var
    quickcheck_shrinker = caml_call1(Core_Quickcheck[3][3], 0),
    quickcheck_observer =
      caml_call1(Core_Quickcheck[2][3], [0, hash_fold_t$0, hash$0]),
    _t_ = [0, [0, 6., caml_call2(Core_Char[82], 97, 102)], 0],
    gen_hex_digit =
      caml_call1(Core_Quickcheck[1][64], [0, [0, 10., Core_Char[75]], _t_]),
    let_syntax_013 = caml_call2(Core_String[166], 8, gen_hex_digit),
    let_syntax_014 = caml_call2(Core_String[166], 4, gen_hex_digit),
    let_syntax_015 = caml_call2(Core_String[166], 4, gen_hex_digit),
    let_syntax_016 = caml_call2(Core_String[166], 4, gen_hex_digit),
    let_syntax_017 = caml_call2(Core_String[166], 12, gen_hex_digit),
    _u_ =
      [0,
       [2,
        0,
        [12,
         45,
         [2, 0, [12, 45, [2, 0, [12, 45, [2, 0, [12, 45, [2, 0, 0]]]]]]]]],
       "%s-%s-%s-%s-%s"],
    _v_ =
      caml_call2(Core_Quickcheck[1][8][4][4], let_syntax_016, let_syntax_017),
    _w_ = caml_call2(Core_Quickcheck[1][8][4][4], let_syntax_015, _v_),
    _x_ = caml_call2(Core_Quickcheck[1][8][4][4], let_syntax_014, _w_),
    _y_ = caml_call2(Core_Quickcheck[1][8][4][4], let_syntax_013, _x_),
    quickcheck_generator =
      caml_call2
       (Core_Quickcheck[1][8][4][3],
        _y_,
        function(param){
         var
          _z_ = param[2],
          _A_ = _z_[2],
          match = _A_[2],
          fifth = match[2],
          fourth = match[1],
          third = _A_[1],
          second = _z_[1],
          first = param[1];
         return caml_call1
                 (of_string$0,
                  caml_call6
                   (Core[259], _u_, first, second, third, fourth, fifth));
        });
   caml_call1(Ppx_inline_test_lib[6], cst_uuid);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Uuid);
   var
    Uuid =
      [0,
       bin_size_t$1,
       bin_write_t$1,
       bin_read_t$3,
       bin_read_t$4,
       bin_shape_t$1,
       bin_writer_t$1,
       bin_reader_t$1,
       bin_t$1,
       sexp_of_t$2,
       of_string$0,
       to_string$0,
       pp,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal$0,
       compare$1,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       comparator$0,
       Map$0,
       Set$0,
       hash_fold_t$1,
       hash$1,
       hashable,
       Table,
       Hash_set,
       Hash_queue,
       invariant,
       quickcheck_generator,
       quickcheck_observer,
       quickcheck_shrinker,
       t_of_sexp$1,
       create_random,
       arg_type,
       [0,
        bin_size_t$1,
        bin_write_t$1,
        bin_read_t$3,
        bin_read_t$4,
        bin_shape_t$2,
        bin_writer_t$2,
        bin_reader_t$2,
        bin_t$2,
        compare$1,
        equal$0,
        hash_fold_t$1,
        hash$2,
        t_of_sexp$1,
        sexp_of_t$1,
        t_sexp_grammar,
        comparator$0],
       [0,
        [0,
         equal,
         hash_fold_t,
         hash,
         stable_witness,
         bin_size_t,
         bin_write_t,
         bin_read_t$0,
         bin_read_t,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         compare,
         t_of_sexp,
         sexp_of_t,
         comparator,
         Map,
         Set,
         of_string,
         to_string,
         for_testing]],
       [0, is_valid_exn, nil, create, bottom_4_bits_to_hex_char]];
   runtime.caml_register_global(57, Uuid, cst_Uuid);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
