// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Stored_reversed
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Shape, Bin_shape, Core__List, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Stored_reversed = "Stored_reversed",
    cst_a = "a",
    cst_stored_reversed = "stored_reversed",
    cst_t$0 = "t";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core_List = global_data.Core__List,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_shape = global_data.Bin_shape,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Stored_reversed);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_stored_reversed);
   caml_call1(Expect_test_collector[6][1], "src/stored_reversed.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_stored_reversed, "stored_reversed.ml");
   function t_of_sexp(of_a_001){return of_a_001;}
   function sexp_of_t(of_a_003){return of_a_003;}
   var
    _a_ = caml_call1(Bin_shape[3][1], cst_a),
    _b_ = caml_call1(Bin_shape[4][1], "src/stored_reversed.ml:3:17"),
    _c_ = caml_call2(Bin_prot_Shape[11], _b_, _a_),
    _d_ = [0, caml_call1(Bin_shape[3][1], cst_a), 0],
    _e_ = [0, [0, caml_call1(Bin_shape[2][1], cst_t$0), _d_, _c_], 0],
    _f_ = caml_call1(Bin_shape[4][1], "src/stored_reversed.ml:3:4"),
    group = caml_call2(Bin_prot_Shape[2], _f_, _e_),
    cst_t = cst_t$0,
    _g_ = [5, "src/stored_reversed.ml.Stable.V1.t"];
   function bin_shape_t(a){
    var _m_ = caml_call1(Bin_shape[2][1], cst_t);
    return caml_call1(caml_call2(Bin_prot_Shape[10], group, _m_), [0, a, 0]);
   }
   function bin_size_t(size_of_a){return size_of_a;}
   function bin_write_t(write_a){return write_a;}
   function bin_writer_t(bin_writer_a){
    return [0,
            function(v){
             var size_of_a = bin_writer_a[1];
             return caml_call1(size_of_a, v);
            },
            function(v){
             var write_a = bin_writer_a[2];
             return caml_call1(write_a, v);
            }];
   }
   function bin_read_t(of_a, buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[18], _g_, pos_ref[1]);
   }
   function bin_read_t$0(of_a){return of_a;}
   function bin_reader_t(bin_reader_a){
    return [0,
            function(buf, pos_ref){
             var of_a = bin_reader_a[1];
             return caml_call2(of_a, buf, pos_ref);
            },
            function(buf, pos_ref, vtag){
             return bin_read_t(bin_reader_a[1], buf, pos_ref, vtag);
            }];
   }
   function bin_t(bin_a){
    var _k_ = bin_reader_t(bin_a[3]), _l_ = bin_writer_t(bin_a[2]);
    return [0, bin_shape_t(bin_a[1]), _l_, _k_];
   }
   function compare(cmp_a, a_004, b_005){
    return caml_call2(cmp_a, a_004, b_005);
   }
   function equal(cmp_a, a_006, b_007){
    return caml_call2(cmp_a, a_006, b_007);
   }
   function map(x, f){return caml_call1(f, x);}
   function snoc(xs, x){return [0, x, xs];}
   function singleton(x){return [0, x, 0];}
   function of_list_rev(x){return x;}
   function to_list_rev(x){return x;}
   var of_list = Core_List[57], to_list = Core_List[57];
   function map_to_list(opt, head, f){
    var tail = opt ? opt[1] : 0;
    return caml_call3(Core_List[98], head, tail, f);
   }
   function map_append(tail, head, f){
    return caml_call3(Core_List[98], head, tail, f);
   }
   function quickcheck_generator(_j_){return _j_;}
   function quickcheck_observer(_i_){return _i_;}
   function quickcheck_shrinker(_h_){return _h_;}
   caml_call1(Ppx_inline_test_lib[6], cst_stored_reversed);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Stored_reversed);
   var
    Stored_reversed =
      [0,
       sexp_of_t,
       compare,
       equal,
       0,
       snoc,
       singleton,
       of_list,
       to_list,
       of_list_rev,
       to_list_rev,
       map_to_list,
       map_append,
       quickcheck_generator,
       quickcheck_observer,
       quickcheck_shrinker,
       [0,
        [0,
         bin_shape_t,
         bin_size_t,
         bin_write_t,
         bin_read_t$0,
         bin_read_t,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         compare,
         t_of_sexp,
         sexp_of_t,
         map]]];
   runtime.caml_register_global(22, Stored_reversed, cst_Stored_reversed);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmVkX3JldmVyc2VkLmNtYS5qcyIsInNlY3Rpb25zIjpbeyJvZmZzZXQiOnsibGluZSI6OSwiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsImZpbGUiOiJzdG9yZWRfcmV2ZXJzZWQuY21hLmpzIiwibmFtZXMiOlsicnVudGltZSIsImNzdF9TdG9yZWRfcmV2ZXJzZWQiLCJjc3RfYSIsImNzdF9zdG9yZWRfcmV2ZXJzZWQiLCJjc3RfdCIsImNhbWxfY2FsbDEiLCJmIiwiYTAiLCJjYW1sX2NhbGwyIiwiYTEiLCJjYW1sX2NhbGwzIiwiYTIiLCJnbG9iYWxfZGF0YSIsIkNvcmVfTGlzdCIsIkJpbl9wcm90X0NvbW1vbiIsIkJpbl9zaGFwZSIsIkJpbl9wcm90X1NoYXBlIiwiUHB4X21vZHVsZV90aW1lcl9ydW50aW1lIiwiUHB4X2JlbmNoX2xpYl9CZW5jaG1hcmtfYWNjdW11IiwiRXhwZWN0X3Rlc3RfY29sbGVjdG9yIiwiUHB4X2lubGluZV90ZXN0X2xpYiIsInRfb2Zfc2V4cCIsIm9mX2FfMDAxIiwic2V4cF9vZl90Iiwib2ZfYV8wMDMiLCJncm91cCIsImJpbl9zaGFwZV90IiwiYSIsImJpbl9zaXplX3QiLCJzaXplX29mX2EiLCJiaW5fd3JpdGVfdCIsIndyaXRlX2EiLCJiaW5fd3JpdGVyX3QiLCJiaW5fd3JpdGVyX2EiLCJ2IiwiYmluX3JlYWRfdCIsIm9mX2EiLCJidWYiLCJwb3NfcmVmIiwidmludCIsImJpbl9yZWFkZXJfdCIsImJpbl9yZWFkZXJfYSIsInZ0YWciLCJiaW5fdCIsImJpbl9hIiwiY29tcGFyZSIsImNtcF9hIiwiYV8wMDQiLCJiXzAwNSIsImVxdWFsIiwiYV8wMDYiLCJiXzAwNyIsIm1hcCIsIngiLCJzbm9jIiwieHMiLCJzaW5nbGV0b24iLCJvZl9saXN0X3JldiIsInRvX2xpc3RfcmV2Iiwib2ZfbGlzdCIsInRvX2xpc3QiLCJtYXBfdG9fbGlzdCIsIm9wdCIsImhlYWQiLCJ0YWlsIiwibWFwX2FwcGVuZCIsInF1aWNrY2hlY2tfZ2VuZXJhdG9yIiwicXVpY2tjaGVja19vYnNlcnZlciIsInF1aWNrY2hlY2tfc2hyaW5rZXIiLCJTdG9yZWRfcmV2ZXJzZWQiXSwic291cmNlcyI6WyIvYnVpbHRpbi9ibGFja2JveC5tbCIsIi9Vc2Vycy95YW5uaWNrLy5vcGFtL2JvbnNhaS1mcm9udGVuZC9saWIvc3RvcmVkX3JldmVyc2VkL3N0b3JlZF9yZXZlcnNlZC5tbCJdLCJtYXBwaW5ncyI6IklBQUFBLFVBQUE7QUFBQSxJQUFBQyxzQkFBQTtBQUFBLElBQUFDLFFBQUE7QUFBQSxJQUFBQyxzQkFBQTtBQUFBLElBQUFDLFVBQUE7QUFBQSxZQUFBQyxXQUFBQyxHQUFBQztBQUFBQSxJQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsWUFBQUMsV0FBQUYsR0FBQUMsSUFBQUU7QUFBQUEsSUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFlBQUFDLFdBQUFKLEdBQUFDLElBQUFFLElBQUFFO0FBQUFBLElBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFDLGNBQUE7QUFBQSxJQUFBQyxZQUFBO0FBQUEsSUFBQUMsa0JBQUE7QUFBQSxJQUFBQyxZQUFBO0FBQUEsSUFBQUMsaUJBQUE7QUFBQSxJQUFBQywyQkFBQTtBQUFBLElBQUFDO0FBQUFBLE1BQUE7QUFBQSxJQUFBQyx3QkFBQTtBQUFBLElBQUFDLHNCQUFBO0FBQUEsR0NBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsWUFBQUMsVUFBQUMsVUFFSSxnQkFBeUQ7QUFBQSxZQUFBQyxVQUFBQyxVQUF6RCxnQkFBeUQ7QUFBQTtBQUFBLFVBQTVDO0FBQUE7QUFBQTtBQUFBLFVBQUo7QUFBQTtBQUFBLFVBQVQ7QUFBQSxJQUFBQyxRQUFBO0FBQUEsSUFBQXJCLFFBQVM7QUFBQTtBQUFBLFlBQUFzQixZQUFBQztBQUFBQSxRQUFBLE1BQVQ7QUFBQSxXQUF5RCxXQUF6RCxzREFBeUQ7QUFBQTtBQUFBLFlBQUFDLFdBQUFDLFdBQTVDLGlCQUFFO0FBQUEsWUFBQUMsWUFBQUMsU0FBRixlQUFFO0FBQUEsWUFBQUMsYUFBQUM7QUFBQUEsSUFBZjtBQUFBLHFCQUFBQztBQUFBQSxpQkFBQUwsWUFBQTtBQUFBLGFBQWEsK0JBQTRDO0FBQUE7QUFBQSxxQkFBQUs7QUFBQUEsaUJBQUFILFVBQXpEO0FBQUEsYUFBYSw2QkFBNEM7QUFBQSxjQUF6RDtBQUFBLEdBQXlEO0FBQUEsWUFBQUksV0FBQUMsTUFBQUMsS0FBQUMsU0FBQUM7QUFBQUEsSUFBNUMsdURBQUU7QUFBQTtBQUFBLFlBQUFKLGFBQUFDLE1BQUYsWUFBRTtBQUFBLFlBQUFJLGFBQUFDO0FBQUFBLElBQWY7QUFBQSxxQkFBQUosS0FBQUM7QUFBQUEsaUJBQUFGLE9BQUE7QUFBQSxhQUF5RDtBQUFBO0FBQUEscUJBQUFDLEtBQUFDLFNBQUFJO0FBQUFBLGFBQXpELHNEQUF5RDtBQUFBLGNBQXpEO0FBQUEsR0FBeUQ7QUFBQSxZQUFBQyxNQUFBQztBQUFBQSxRQUFBLE1BQXpEO0FBQUEsK0NBQXlEO0FBQUE7QUFBQSxZQUFBQyxRQUFBQyxPQUFBQyxPQUFBQztBQUFBQSxJQUE1QyxzQ0FBRTtBQUFBO0FBQUEsWUFBQUMsTUFBQUgsT0FBQUksT0FBQUM7QUFBQUEsSUFBRixzQ0FBRTtBQUFBO0FBQUEsWUFBQUMsSUFBQUMsR0FBQS9DLEdBQ0EsdUJBQUc7QUFBQSxZQUFBZ0QsS0FBQUMsSUFBQUYsR0FTTixrQkFBTztBQUFBLFlBQUFHLFVBQUFILEdBRUwsaUJBQUc7QUFBQSxZQUFBSSxZQUFBSixHQUVELFNBQUM7QUFBQSxZQUFBSyxZQUFBTCxHQUNELFNBQUM7QUFBQSxPQUFBTSxVQWZSLGVBQUFDLFVBQUE7QUFBQSxZQUFBQyxZQUFBQyxLQUFBQyxNQUFBekQ7QUFBQUEsUUFBQTBELE9Bb0JHO0FBQUEsSUFDZCwrQ0FBZ0M7QUFBQTtBQUFBLFlBQUFDLFdBQUFELE1BQUFELE1BQUF6RDtBQUFBQSxJQUloQywrQ0FBZ0M7QUFBQTtBQUFBLFlBQUE0RCxxQkFBQSxLRDNCbEM7QUFBQSxZQUFBQyxvQkFBQTtBQUFBLFlBQUFDLG9CQUFBO0FBQUEsR0NtQ0c7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFDO0FBQUFBLE1BQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVEbkNIIiwic291cmNlc0NvbnRlbnQiOlsiKCogZ2VuZXJhdGVkIGNvZGUgKikiLCJtb2R1bGUgU3RhYmxlID0gc3RydWN0XG4gIG1vZHVsZSBWMSA9IHN0cnVjdFxuICAgIHR5cGUgKydhIHQgPSAnYSBbQEBkZXJpdmluZyBzZXhwLCBiaW5faW8sIGNvbXBhcmUsIGVxdWFsXVxuICAgIGxldCBtYXAgeCB+ZiA9IGYgeFxuICBlbmRcbmVuZFxuXG5vcGVuIENvcmVcblxuaW5jbHVkZSBTdGFibGUuVjFcblxubGV0IGVtcHR5ID0gW11cbmxldCBzbm9jIHhzIHggPSB4IDo6IHhzXG5cbmxldCBzaW5nbGV0b24geCA9IFt4XVxuXG5sZXQgb2ZfbGlzdF9yZXYgeCA9IHhcbmxldCB0b19saXN0X3JldiB4ID0geFxuXG5sZXQgb2ZfbGlzdCA9IExpc3QucmV2XG5sZXQgdG9fbGlzdCA9IExpc3QucmV2XG5cbmxldCBtYXBfdG9fbGlzdCA/KHRhaWw9W10pIGhlYWQgfmYgPVxuICBMaXN0LnJldl9tYXBfYXBwZW5kIGhlYWQgfmYgdGFpbFxuOztcblxubGV0IG1hcF9hcHBlbmQgdGFpbCBoZWFkIH5mID1cbiAgTGlzdC5yZXZfbWFwX2FwcGVuZCBoZWFkIH5mIHRhaWxcbjs7XG5cbmluY2x1ZGUgc3RydWN0XG4gIG9wZW4gUXVpY2tjaGVja1xuICBsZXQgcXVpY2tjaGVja19nZW5lcmF0b3IgOiAnYSBHZW5lcmF0b3IudCAtPiAnYSB0IEdlbmVyYXRvci50ID0gRm4uaWRcbiAgbGV0IHF1aWNrY2hlY2tfb2JzZXJ2ZXIgOiAnYSBPYnNlcnZlci50IC0+ICdhIHQgT2JzZXJ2ZXIudCA9IEZuLmlkXG4gIGxldCBxdWlja2NoZWNrX3Nocmlua2VyIDogJ2EgU2hyaW5rZXIudCAtPiAnYSB0IFNocmlua2VyLnQgPSBGbi5pZFxuZW5kXG4iXSwiaWdub3JlTGlzdCI6WzBdfX1dfQ==
