// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Base_quickcheck__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_quickcheck = [0];
   runtime.caml_register_global(0, Base_quickcheck, "Base_quickcheck__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__With_basic_types
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Base_quickcheck_With_basic_typ = [0];
   runtime.caml_register_global
    (0, Base_quickcheck_With_basic_typ, "Base_quickcheck__With_basic_types");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__Bigarray_helpers
//# unitInfo: Requires: Base, Base__Array, Stdlib__Bigarray
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_dim_2 = runtime.caml_ba_dim_2,
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_ba_get_2 = runtime.caml_ba_get_2,
    caml_ba_layout = runtime.caml_ba_layout;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base = global_data.Base,
    Base_Array = global_data.Base__Array,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray;
   function offset(param){return param ? 1 : 0;}
   var Layout = [0, offset];
   function iteri(t, f){
    var
     _s_ = caml_ba_layout(t),
     offset = caml_call1(Layout[1], _s_),
     _u_ = caml_ba_dim_1(t) - 1 | 0,
     _t_ = 0;
    if(_u_ >= 0){
     var i = _t_;
     for(;;){
      caml_call2(f, i + offset | 0, caml_ba_get_1(t, i + offset | 0));
      var _v_ = i + 1 | 0;
      if(_u_ === i) break;
      i = _v_;
     }
    }
    return 0;
   }
   function init(kind, layout, dim, f){
    var t = caml_call3(Stdlib_Bigarray[20][1], kind, layout, dim);
    iteri
     (t,
      function(i, param){
       return runtime.caml_ba_set_1(t, i, caml_call1(f, i));
      });
    return t;
   }
   function fold(t, init, f){
    var init$0 = [0, init];
    iteri
     (t,
      function(i, param){
       var _r_ = caml_ba_get_1(t, i);
       init$0[1] = caml_call2(f, init$0[1], _r_);
       return 0;
      });
    return init$0[1];
   }
   function to_array(t){
    var
     _p_ = caml_ba_layout(t),
     offset = caml_call1(Layout[1], _p_),
     _q_ = caml_ba_dim_1(t);
    return caml_call2
            (Base_Array[40],
             _q_,
             function(i){return caml_ba_get_1(t, i + offset | 0);});
   }
   function sexp_of_t(sexp_of_elt, sexp_of_pack, sexp_of_layout, t){
    var x_001 = to_array(t);
    return caml_call2(Base[92], sexp_of_elt, x_001);
   }
   function hash_fold(hash_fold_elt, state, t){
    var _o_ = caml_ba_dim_1(t), state$0 = caml_call2(Base[122], state, _o_);
    return fold(t, state$0, hash_fold_elt);
   }
   function iteri$0(t, f){
    var
     _h_ = caml_ba_layout(t),
     offset = caml_call1(Layout[1], _h_),
     _j_ = caml_ba_dim_1(t) - 1 | 0,
     _i_ = 0;
    if(_j_ >= 0){
     var i = _i_;
     for(;;){
      var _l_ = caml_ba_dim_2(t) - 1 | 0, _k_ = 0;
      if(_l_ >= 0){
       var j = _k_;
       for(;;){
        caml_call3
         (f,
          i + offset | 0,
          j + offset | 0,
          caml_ba_get_2(t, i + offset | 0, j + offset | 0));
        var _n_ = j + 1 | 0;
        if(_l_ === j) break;
        j = _n_;
       }
      }
      var _m_ = i + 1 | 0;
      if(_j_ === i) break;
      i = _m_;
     }
    }
    return 0;
   }
   function init$0(kind, layout, dim1, dim2, f){
    var t = caml_call4(Stdlib_Bigarray[21][1], kind, layout, dim1, dim2);
    iteri$0
     (t,
      function(i, j, param){
       return runtime.caml_ba_set_2(t, i, j, caml_call2(f, i, j));
      });
    return t;
   }
   function fold$0(t, init, f){
    var init$0 = [0, init];
    iteri$0
     (t,
      function(_g_, param, elt){
       init$0[1] = caml_call2(f, init$0[1], elt);
       return 0;
      });
    return init$0[1];
   }
   function to_array$0(t){
    var
     _d_ = caml_ba_layout(t),
     offset = caml_call1(Layout[1], _d_),
     _e_ = caml_ba_dim_1(t);
    return caml_call2
            (Base_Array[40],
             _e_,
             function(i){
              var _f_ = caml_ba_dim_2(t);
              return caml_call2
                      (Base_Array[40],
                       _f_,
                       function(j){
                        return caml_ba_get_2(t, i + offset | 0, j + offset | 0);
                       });
             });
   }
   function sexp_of_t$0(sexp_of_elt, sexp_of_pack, sexp_of_layout, t){
    var x_002 = to_array$0(t), _c_ = caml_call1(Base[92], sexp_of_elt);
    return caml_call2(Base[92], _c_, x_002);
   }
   function hash_fold$0(hash_fold_elt, state, t){
    var
     _a_ = caml_ba_dim_1(t),
     state$0 = caml_call2(Base[122], state, _a_),
     _b_ = caml_ba_dim_2(t),
     state$1 = caml_call2(Base[122], state$0, _b_);
    return fold$0(t, state$1, hash_fold_elt);
   }
   var
    Base_quickcheck_Bigarray_helpe =
      [0,
       Layout,
       [0, sexp_of_t, init, iteri, fold, to_array, hash_fold],
       [0, sexp_of_t$0, init$0, iteri$0, fold$0, to_array$0, hash_fold$0]];
   runtime.caml_register_global
    (3, Base_quickcheck_Bigarray_helpe, "Base_quickcheck__Bigarray_helpers");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__Observer0
//# unitInfo: Requires: Base, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base = global_data.Base,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    _a_ = [0, "size"],
    cst_Base_quickcheck_Observer_o =
      "Base_quickcheck.Observer.observe: size < 0";
   function create(f){return f;}
   function observe(t, x, size, hash){
    if(0 <= size) return caml_call3(t, x, size, hash);
    var
     _c_ = [0, [1, [0, _a_, [0, caml_call1(Base[125], size), 0]]], 0],
     _d_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Base_quickcheck_Observer_o),
         _c_]];
    return caml_call1(Base[217], _d_);
   }
   function opaque(_b_, param, hash){return hash;}
   var Base_quickcheck_Observer0 = [0, opaque, create, observe];
   runtime.caml_register_global
    (4, Base_quickcheck_Observer0, "Base_quickcheck__Observer0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__Generator
//# unitInfo: Requires: Base, Base__Applicative, Base__Array, Base__Bytes, Base__Char, Base__Either, Base__Error, Base__Float, Base__Hash, Base__Int, Base__Int32, Base__Int63, Base__Int64, Base__Lazy, Base__List, Base__Map, Base__Monad, Base__Nativeint, Base__Option, Base__Sequence, Base__Set, Base__Staged, Base__String, Base_quickcheck__Bigarray_helpers, Base_quickcheck__Observer0, CamlinternalLazy, Sexplib0__Sexp_conv, Splittable_random, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_lower_bound = "lower_bound",
    cst_src_generator_ml = "src/generator.ml",
    cst_upper_bound = "upper_bound",
    cst_weight = "weight",
    caml_check_bound = runtime.caml_check_bound,
    caml_div = runtime.caml_div,
    caml_equal = runtime.caml_equal,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_greaterthan = runtime.caml_greaterthan,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_and = runtime.caml_int64_and,
    caml_int64_div = runtime.caml_int64_div,
    caml_int64_mul = runtime.caml_int64_mul,
    caml_int64_neg = runtime.caml_int64_neg,
    caml_int64_or = runtime.caml_int64_or,
    caml_int64_shift_left = runtime.caml_int64_shift_left,
    caml_int64_shift_right = runtime.caml_int64_shift_right,
    caml_int64_shift_right_unsigne = runtime.caml_int64_shift_right_unsigned,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_int64_xor = runtime.caml_int64_xor,
    caml_lessequal = runtime.caml_lessequal,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_mul = runtime.caml_mul,
    caml_notequal = runtime.caml_notequal,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Map = global_data.Base__Map,
    Base_Sequence = global_data.Base__Sequence,
    Base_Array = global_data.Base__Array,
    Base_quickcheck_Bigarray_helpe =
      global_data.Base_quickcheck__Bigarray_helpers,
    Base_Set = global_data.Base__Set,
    Base_List = global_data.Base__List,
    Base_String = global_data.Base__String,
    Base_Float = global_data.Base__Float,
    Splittable_random = global_data.Splittable_random,
    Base = global_data.Base,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_Int63 = global_data.Base__Int63,
    Stdlib = global_data.Stdlib,
    Base_Char = global_data.Base__Char,
    Base_Lazy = global_data.Base__Lazy,
    Base_Int = global_data.Base__Int,
    Base_Either = global_data.Base__Either,
    Base_Option = global_data.Base__Option,
    Assert_failure = global_data.Assert_failure,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Error = global_data.Base__Error,
    Base_Hash = global_data.Base__Hash,
    Base_quickcheck_Observer0 = global_data.Base_quickcheck__Observer0,
    Base_Staged = global_data.Base__Staged,
    Base_Applicative = global_data.Base__Applicative,
    Base_Monad = global_data.Base__Monad,
    Base_Int32 = global_data.Base__Int32,
    Base_Int64 = global_data.Base__Int64,
    Base_Nativeint = global_data.Base__Nativeint,
    Base_Bytes = global_data.Base__Bytes,
    _a_ = [0, "size"],
    cst_Base_quickcheck_Generator_ =
      "Base_quickcheck.Generator.generate: size < 0";
   function create(f){return caml_call1(Base_Staged[1], f);}
   function generate(t, size, random){
    if(0 <= size) return caml_call3(Base_Staged[2], t, size, random);
    var
     _cy_ = [0, [1, [0, _a_, [0, caml_call1(Base[125], size), 0]]], 0],
     _cz_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Base_quickcheck_Generator_),
         _cy_]];
    return caml_call1(Base[217], _cz_);
   }
   var size = create(function(size, param){return size;});
   function fn(dom, rng){
    return create
            (function(size, random){
              var random$0 = caml_call1(Splittable_random[1][5], random);
              return function(x){
               var
                _cw_ = caml_call1(Base_Hash[7], 0),
                hash =
                  caml_call4(Base_quickcheck_Observer0[3], dom, x, size, _cw_),
                random = caml_call1(Splittable_random[1][4], random$0),
                _cx_ = caml_call1(Base_Hash[9], hash);
               caml_call2(Splittable_random[1][3], random, _cx_);
               return generate(rng, size, random);};
             });
   }
   function with_size(t, size){
    return create(function(param, random){return generate(t, size, random);});
   }
   function perturb(t, salt){
    return create
            (function(size, random){
              caml_call2(Splittable_random[1][3], random, salt);
              return generate(t, size, random);
             });
   }
   function filter_map(t, f){
    function loop(size, random){
     var size$0 = size;
     for(;;){
      var x = generate(t, size$0, random), match = caml_call1(f, x);
      if(match){var y = match[1]; return y;}
      var size$1 = size$0 + 1 | 0;
      size$0 = size$1;
     }
    }
    return create(loop);
   }
   function filter(t, f){
    return filter_map(t, function(x){return caml_call1(f, x) ? [0, x] : 0;});
   }
   function return$0(x){return create(function(_cv_, param){return x;});}
   function map(t, f){
    return create
            (function(size, random){
              return caml_call1(f, generate(t, size, random));
             });
   }
   function apply(tf, tx){
    return create
            (function(size, random){
              var
               f = generate(tf, size, random),
               x = generate(tx, size, random);
              return caml_call1(f, x);
             });
   }
   function bind(t, f){
    return create
            (function(size, random){
              var x = generate(t, size, random);
              return generate(caml_call1(f, x), size, random);
             });
   }
   function all(list){
    return create
            (function(size, random){
              return caml_call2
                      (Base_List[52],
                       list,
                       function(_cu_){return generate(_cu_, size, random);});
             });
   }
   function all_unit(list){
    return create
            (function(size, random){
              return caml_call2
                      (Base_List[19],
                       list,
                       function(_ct_){return generate(_ct_, size, random);});
             });
   }
   var
    map$0 = [0, -198771759, map],
    For_applicative =
      caml_call1(Base_Applicative[6], [0, return$0, apply, map$0]),
    both = For_applicative[3],
    map2 = For_applicative[9],
    map3 = For_applicative[10],
    include = For_applicative[13],
    symbol = include[1],
    symbol$0 = include[2],
    symbol$1 = include[3],
    map$1 = [0, -198771759, map],
    For_monad = caml_call1(Base_Monad[1], [0, bind, return$0, map$1]),
    ignore_m = For_monad[8],
    join = For_monad[7],
    include$0 = For_monad[3],
    symbol_bind = include$0[1],
    symbol_map = include$0[2],
    cst_Base_quickcheck_Generator_$0 =
      "Base_quickcheck.Generator.of_list: empty list",
    cst_Base_quickcheck_Generator_$1 =
      "Base_quickcheck.Generator.of_weighted_list: empty list",
    _b_ = [0, cst_weight],
    cst_Base_quickcheck_Generator_$2 =
      "Base_quickcheck.Generator.of_weighted_list: weight is not finite",
    _c_ = [0, cst_weight],
    cst_Base_quickcheck_Generator_$3 =
      "Base_quickcheck.Generator.of_weighted_list: weight is negative",
    cst_Base_quickcheck_Generator_$4 =
      "Base_quickcheck.Generator.of_weighted_list: total weight is zero",
    _d_ = [0, cst_src_generator_ml, 160, 14],
    cst_Base_quickcheck_Generator_$5 =
      "Base_quickcheck.Generator.weighted_recursive_union: lists must be non-empty",
    _e_ = [0, cst_src_generator_ml, 225, 6],
    _f_ = [0, cst_src_generator_ml, 198, 4];
   function of_list(list){
    if(caml_call1(Base_List[18], list)){
     var
      _cs_ =
        caml_call1(Sexplib0_Sexp_conv[7], cst_Base_quickcheck_Generator_$0);
     caml_call1(Base_Error[30], _cs_);
    }
    var
     array = caml_call1(Base_Array[8], list),
     hi = array.length - 2 | 0,
     lo = 0;
    return create
            (function(param, random){
              var index = caml_call3(Splittable_random[3], random, lo, hi);
              return caml_check_bound(array, index)[1 + index];
             });
   }
   function union(list){return caml_call1(join, of_list(list));}
   function of_weighted_list(alist){
    if(caml_call1(Base_List[18], alist)){
     var
      _cm_ =
        caml_call1(Sexplib0_Sexp_conv[7], cst_Base_quickcheck_Generator_$1);
     caml_call1(Base_Error[30], _cm_);
    }
    var
     match = caml_call1(Base_List[105], alist),
     values = match[2],
     weights = match[1],
     value_array = caml_call1(Base_Array[8], values),
     array =
       caml_call2
        (Base_Array[40], value_array.length - 1, function(param){return 0.;}),
     sum =
       caml_call3
        (Base_List[33],
         weights,
         0.,
         function(index, acc, weight){
          if(1 - caml_call1(Base_Float[86], weight)){
           var
            _co_ =
              [0, [1, [0, _b_, [0, caml_call1(Base[117], weight), 0]]], 0],
            _cp_ =
              [1,
               [0,
                caml_call1
                 (Sexplib0_Sexp_conv[7], cst_Base_quickcheck_Generator_$2),
                _co_]];
           caml_call1(Base_Error[30], _cp_);
          }
          if(caml_call2(Base_Float[14], weight, 0.)){
           var
            _cq_ =
              [0, [1, [0, _c_, [0, caml_call1(Base[117], weight), 0]]], 0],
            _cr_ =
              [1,
               [0,
                caml_call1
                 (Sexplib0_Sexp_conv[7], cst_Base_quickcheck_Generator_$3),
                _cq_]];
           caml_call1(Base_Error[30], _cr_);
          }
          var cumulative = caml_call2(Base[205], acc, weight);
          caml_check_bound(array, index)[1 + index] = cumulative;
          return cumulative;
         });
    if(caml_call2(Base_Float[11], sum, 0.)){
     var
      _cn_ =
        caml_call1(Sexplib0_Sexp_conv[7], cst_Base_quickcheck_Generator_$4);
     caml_call1(Base_Error[30], _cn_);
    }
    return create
            (function(param, random){
              var
               choice = caml_call3(Splittable_random[8], random, 0., sum),
               match =
                 caml_call6
                  (Base_Array[6],
                   0,
                   0,
                   array,
                   Base_Float[17],
                   926943384,
                   choice);
              if(! match)
               throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
              var index = match[1];
              return caml_check_bound(value_array, index)[1 + index];
             });
   }
   function weighted_union(alist){
    return caml_call1(join, of_weighted_list(alist));
   }
   function of_lazy(lazy_t){
    return create
            (function(size, random){
              var _ck_ = caml_obj_tag(lazy_t);
              a:
              if(250 === _ck_)
               var _cl_ = lazy_t[1];
              else{
               if(246 !== _ck_ && 244 !== _ck_){var _cl_ = lazy_t; break a;}
               var _cl_ = caml_call1(CamlinternalLazy[2], lazy_t);
              }
              return generate(_cl_, size, random);
             });
   }
   function fixed_point(of_generator){
    var lazy_t = [];
    runtime.caml_update_dummy
     (lazy_t,
      [246,
       function(param){return caml_call1(of_generator, of_lazy(lazy_t));}]);
    var _cj_ = caml_obj_tag(lazy_t);
    if(250 === _cj_) return lazy_t[1];
    if(246 !== _cj_ && 244 !== _cj_) return lazy_t;
    return caml_call1(CamlinternalLazy[2], lazy_t);
   }
   function weighted_recursive_union(nonrec_list, f){
    return fixed_point
            (function(self){
              var
               _cf_ = caml_call1(f, self),
               rec_list =
                 caml_call2
                  (Base_List[52],
                   _cf_,
                   function(param){
                    var t = param[2], w = param[1];
                    return [0,
                            w,
                            caml_call2
                             (For_monad[11][4][2],
                              size,
                              function(n){return with_size(t, n - 1 | 0);})];
                   }),
               _cg_ = caml_call1(Base_List[18], nonrec_list),
               _ch_ = _cg_ || caml_call1(Base_List[18], rec_list);
              if(_ch_){
               var
                _ci_ =
                  caml_call1
                   (Sexplib0_Sexp_conv[7], cst_Base_quickcheck_Generator_$5);
               caml_call1(Base[217], _ci_);
              }
              var
               nonrec_gen = weighted_union(nonrec_list),
               rec_gen =
                 weighted_union(caml_call2(Base[193], nonrec_list, rec_list));
              return caml_call2
                      (For_monad[11][4][2],
                       size,
                       function(param){return 0 === param ? nonrec_gen : rec_gen;});
             });
   }
   function recursive_union(nonrec_list, f){
    function weighted(list){
     return caml_call2(Base_List[52], list, function(t){return [0, 1., t];});
    }
    return weighted_recursive_union
            (weighted(nonrec_list),
             function(self){return weighted(caml_call1(f, self));});
   }
   function sizes(_b8_, opt, param){
    var
     min_length = _b8_ ? _b8_[1] : 0,
     max_length = opt ? opt[1] : Base_Int[62];
    return create
            (function(size, random){
              if(min_length > max_length)
               throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
              var
               upper_bound = min_length + size | 0,
               max_length$0 =
                 min_length <= upper_bound
                  ? caml_call2(Base[204], max_length, upper_bound)
                  : max_length,
               len =
                 caml_call3
                  (Splittable_random[10][1], random, min_length, max_length$0);
              if(0 === len) return 0;
              var
               sizes =
                 caml_call2(Base_Array[40], len, function(param){return 0;}),
               remaining = size - (len - min_length | 0) | 0,
               max_index = len - 1 | 0,
               _b9_ = 1;
              if(remaining >= 1){
               var for$0 = _b9_;
               for(;;){
                var
                 index =
                   caml_call3(Splittable_random[10][1], random, 0, max_index);
                sizes[1 + index] =
                 caml_check_bound(sizes, index)[1 + index] + 1 | 0;
                var _cb_ = for$0 + 1 | 0;
                if(remaining === for$0) break;
                for$0 = _cb_;
               }
              }
              var _b$_ = max_index - 1 | 0, _b__ = 0;
              if(_b$_ >= 0){
               var i = _b__;
               for(;;){
                var
                 j = caml_call3(Splittable_random[3], random, i, max_index);
                caml_call3(Base_Array[80], sizes, i, j);
                var _ca_ = i + 1 | 0;
                if(_b$_ === i) break;
                i = _ca_;
               }
              }
              if
               ((caml_call3
                 (Base_Array[26],
                  [0,
                   Base_Int[76],
                   function(_ce_, _cd_){return _ce_ + _cd_ | 0;}],
                  sizes,
                  function(_cc_){return _cc_;})
                + (len - min_length | 0)
                | 0)
                === size)
               return caml_call1(Base_Array[29], sizes);
              throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
             });
   }
   var
    unit = caml_call1(For_monad[11][1], 0),
    bool =
      create
       (function(param, random){
         return caml_call1(Splittable_random[2], random);
        }),
    _g_ = [0, 1],
    _h_ = [0, 0];
   function option(value_t){
    var _b7_ = [0, map(value_t, Base_Option[21]), 0];
    return union([0, caml_call1(For_monad[11][1], 0), _b7_]);
   }
   function either(fst_t, snd_t){
    var _b6_ = [0, map(snd_t, Base_Either[18]), 0];
    return union([0, map(fst_t, Base_Either[17]), _b6_]);
   }
   function result(ok_t, err_t){
    return map
            (either(ok_t, err_t),
             function(param){
              if(0 === param[0]){var ok = param[1]; return [0, ok];}
              var err = param[1];
              return [1, err];
             });
   }
   function list_generic(min_length, max_length, elt_gen){
    var _b5_ = sizes(min_length, max_length, 0);
    return caml_call2
            (For_monad[11][4][2],
             _b5_,
             function(sizes){
              return all
                      (caml_call2
                        (Base_List[52],
                         sizes,
                         function(size){return with_size(elt_gen, size);}));
             });
   }
   function list(elt_gen){return list_generic(0, 0, elt_gen);}
   function list_non_empty(elt_gen){return list_generic(_g_, 0, elt_gen);}
   function list_with_length(elt_gen, length){
    return list_generic([0, length], [0, length], elt_gen);
   }
   function list_filtered(elts){
    var
     elts$0 = caml_call1(Base_Array[8], elts),
     length_of_input = elts$0.length - 1;
    return create
            (function(param, random){
              var
               length_of_output =
                 caml_call3(Splittable_random[3], random, 0, length_of_input),
               indices =
                 caml_call2
                  (Base_Array[40],
                   length_of_input,
                   function(_b4_){return _b4_;}),
               _b1_ = length_of_output - 1 | 0,
               _b0_ = 0;
              if(_b1_ >= 0){
               var i = _b0_;
               for(;;){
                var
                 j =
                   caml_call3
                    (Splittable_random[3], random, i, length_of_input - 1 | 0);
                caml_call3(Base_Array[80], indices, i, j);
                var _b2_ = i + 1 | 0;
                if(_b1_ === i) break;
                i = _b2_;
               }
              }
              caml_call4
               (Base_Array[65],
                _h_,
                [0, length_of_output],
                indices,
                Base_Int[14]);
              return caml_call2
                      (Base_List[40],
                       length_of_output,
                       function(i){
                        var _b3_ = caml_check_bound(indices, i)[1 + i];
                        return caml_check_bound(elts$0, _b3_)[1 + _b3_];
                       });
             });
   }
   function list_permutations(list){
    return create
            (function(param, random){
              var
               array = caml_call1(Base_Array[8], list),
               _bY_ = array.length - 2 | 0,
               _bX_ = 1;
              if(_bY_ >= 1){
               var i = _bX_;
               for(;;){
                var j = caml_call3(Splittable_random[3], random, 0, i);
                caml_call3(Base_Array[80], array, i, j);
                var _bZ_ = i + 1 | 0;
                if(_bY_ === i) break;
                i = _bZ_;
               }
              }
              return caml_call1(Base_Array[29], array);
             });
   }
   function array(t){var _bW_ = Base_Array[8]; return map(list(t), _bW_);}
   function ref(t){return map(t, function(_bV_){return [0, _bV_];});}
   function lazy_t(t){return map(t, Base_Lazy[21]);}
   function char_uniform_inclusive(lo, hi){
    return create
            (function(param, random){
              var
               _bS_ = caml_call1(Base_Char[30], hi),
               _bT_ = caml_call1(Base_Char[30], lo),
               _bU_ = caml_call3(Splittable_random[3], random, _bT_, _bS_);
              return caml_call1(Base_Char[33], _bU_);
             });
   }
   var
    char_uppercase = char_uniform_inclusive(65, 90),
    char_lowercase = char_uniform_inclusive(97, 122),
    char_digit = char_uniform_inclusive(48, 57),
    char_print_uniform = char_uniform_inclusive(32, 126),
    char_uniform = char_uniform_inclusive(Base_Char[51], Base_Char[52]),
    char_alpha = union([0, char_lowercase, [0, char_uppercase, 0]]),
    char_alphanum =
      weighted_union([0, [0, 52., char_alpha], [0, [0, 10., char_digit], 0]]),
    char_whitespace =
      of_list(caml_call2(Base_List[11], Base_Char[1], Base_Char[43])),
    char_print =
      weighted_union
       ([0, [0, 10., char_alphanum], [0, [0, 1., char_print_uniform], 0]]),
    _i_ = [0, [0, 1., caml_call1(For_monad[11][1], Base_Char[52])], 0],
    char$0 =
      weighted_union
       ([0,
         [0, 100., char_print],
         [0,
          [0, 10., char_uniform],
          [0, [0, 1., caml_call1(For_monad[11][1], Base_Char[51])], _i_]]]);
   function small_int(allow_zero){
    return create
            (function(size, random){
              var
               lower_bound = allow_zero ? 0 : 1,
               upper_bound = size + 1 | 0,
               weighted_low =
                 caml_call3
                  (Splittable_random[10][1],
                   random,
                   0,
                   upper_bound - lower_bound | 0),
               weighted_high = upper_bound - weighted_low | 0;
              return weighted_high;
             });
   }
   var
    small_positive_or_zero_int = small_int(1),
    small_strictly_positive_int = small_int(0),
    _j_ = [0, "p"],
    cst_geometric_distribution_p_m =
      "geometric distribution: p must be between 0 and 1",
    dummy = 0;
   function For_integer(Integer){
    function geometric(lo, p){
     if(caml_call2(Base_Float[16], p, 1.))
      return caml_call1(For_monad[11][1], lo);
     if(caml_call2(Base_Float[16], p, 0.))
      return caml_call1(For_monad[11][1], Integer[85]);
     if
      (!
       caml_call2(Base_Float[14], p, 0.)
       &&
        ! caml_call2(Base_Float[13], p, 1.) && ! caml_call1(Base_Float[84], p)){
      var denominator = runtime.caml_log1p_float(caml_call1(Base[211], p));
      return create
              (function(param, random){
                var
                 uniform = caml_call1(Splittable_random[9], random),
                 exponential =
                   caml_call2(Base[208], Math.log(uniform), denominator),
                 float$0 = caml_call1(Base_Float[63], exponential);
                try{var int$0 = caml_call1(Integer[2], float$0);}
                catch(_bR_){
                 var _bQ_ = caml_wrap_exception(_bR_);
                 if(_bQ_[1] === Stdlib[6]) return Integer[85];
                 throw caml_maybe_attach_backtrace(_bQ_, 0);
                }
                var int$1 = caml_call2(Integer[42], lo, int$0);
                return caml_call2(Integer[16], int$1, lo)
                        ? Integer[85]
                        : int$1;
               });
     }
     var
      _bO_ = [0, [1, [0, _j_, [0, caml_call1(Base[117], p), 0]]], 0],
      _bP_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_geometric_distribution_p_m),
          _bO_]];
     return caml_call1(Base[217], _bP_);
    }
    function uniform_inclusive(lo, hi){
     return create
             (function(param, random){
               return caml_call3(Integer[97], random, lo, hi);
              });
    }
    function log_uniform_inclusive(lo, hi){
     return create
             (function(param, random){
               return caml_call3(Integer[98], random, lo, hi);
              });
    }
    function non_uniform(f, lo, hi){
     var
      _bM_ = [0, [0, 0.9, caml_call2(f, lo, hi)], 0],
      _bN_ = [0, [0, 0.05, caml_call1(For_monad[11][1], hi)], _bM_];
     return weighted_union
             ([0, [0, 0.05, caml_call1(For_monad[11][1], lo)], _bN_]);
    }
    function inclusive(_bK_, _bL_){
     return non_uniform(uniform_inclusive, _bK_, _bL_);
    }
    function log_inclusive(_bI_, _bJ_){
     return non_uniform(log_uniform_inclusive, _bI_, _bJ_);
    }
    var
     uniform_all = uniform_inclusive(Integer[86], Integer[85]),
     let_syntax_004 =
       non_uniform(log_uniform_inclusive, Integer[39], Integer[85]),
     _bH_ = caml_call2(For_monad[11][4][4], bool, let_syntax_004),
     all =
       caml_call2
        (For_monad[11][4][3],
         _bH_,
         function(param){
          var magnitude = param[2], negative = param[1];
          return negative ? caml_call1(Integer[71], magnitude) : magnitude;
         });
    return [0,
            geometric,
            uniform_inclusive,
            log_uniform_inclusive,
            ,
            inclusive,
            log_inclusive,
            uniform_all,
            all];
   }
   var
    t_sexp_grammar = Base_Int[2],
    of_float = Base_Int[3],
    to_float = Base_Int[4],
    of_int_exn = Base_Int[5],
    to_int_exn = Base_Int[6],
    hash_fold_t = Base_Int[7],
    hash = Base_Int[8],
    t_of_sexp = Base_Int[9],
    sexp_of_t = Base_Int[10],
    of_string = Base_Int[11],
    to_string = Base_Int[12],
    equal = Base_Int[13],
    compare = Base_Int[14],
    min = Base_Int[15],
    max = Base_Int[16],
    ascending = Base_Int[17],
    descending = Base_Int[18],
    between = Base_Int[19],
    clamp_exn = Base_Int[20],
    clamp = Base_Int[21],
    comparator = Base_Int[22],
    pp = Base_Int[23],
    hashable = Base_Int[24],
    is_positive = Base_Int[25],
    is_non_negative = Base_Int[26],
    is_negative = Base_Int[27],
    is_non_positive = Base_Int[28],
    sign = Base_Int[29],
    invariant = Base_Int[30],
    Hex = Base_Int[31],
    of_string_opt = Base_Int[32],
    to_string_hum = Base_Int[33],
    one = Base_Int[34],
    minus_one = Base_Int[35],
    rem = Base_Int[36],
    round = Base_Int[37],
    round_towards_zero = Base_Int[38],
    round_down = Base_Int[39],
    round_up = Base_Int[40],
    round_nearest = Base_Int[41],
    succ = Base_Int[42],
    pred = Base_Int[43],
    pow = Base_Int[44],
    bit_and = Base_Int[45],
    bit_or = Base_Int[46],
    bit_xor = Base_Int[47],
    bit_not = Base_Int[48],
    popcount = Base_Int[49],
    shift_left = Base_Int[50],
    shift_right = Base_Int[51],
    decr = Base_Int[52],
    incr = Base_Int[53],
    of_int32_exn = Base_Int[54],
    to_int32_exn = Base_Int[55],
    of_int64_exn = Base_Int[56],
    to_int64 = Base_Int[57],
    of_nativeint_exn = Base_Int[58],
    to_nativeint_exn = Base_Int[59],
    of_float_unchecked = Base_Int[60],
    num_bits = Base_Int[61],
    max_value = Base_Int[62],
    min_value = Base_Int[63],
    shift_right_logical = Base_Int[64],
    ceil_pow2 = Base_Int[65],
    floor_pow2 = Base_Int[66],
    ceil_log2 = Base_Int[67],
    floor_log2 = Base_Int[68],
    is_pow2 = Base_Int[69],
    clz = Base_Int[70],
    ctz = Base_Int[71],
    O = Base_Int[72],
    symbol$2 = Base_Int[73],
    lnot = Base_Int[74],
    abs = Base_Int[75],
    zero = Base_Int[76],
    symbol$3 = Base_Int[77],
    symbol$4 = Base_Int[78],
    symbol$5 = Base_Int[79],
    uniform = Splittable_random[3],
    log_uniform = Splittable_random[10][1],
    For_int =
      For_integer
       ([0,
         t_sexp_grammar,
         of_float,
         to_float,
         of_int_exn,
         to_int_exn,
         hash_fold_t,
         hash,
         t_of_sexp,
         sexp_of_t,
         of_string,
         to_string,
         function(_bG_, _bF_){return _bF_ <= _bG_ ? 1 : 0;},
         function(_bE_, _bD_){return _bE_ <= _bD_ ? 1 : 0;},
         function(_bC_, _bB_){return _bC_ === _bB_ ? 1 : 0;},
         function(_bA_, _bz_){return _bz_ < _bA_ ? 1 : 0;},
         function(_by_, _bx_){return _by_ < _bx_ ? 1 : 0;},
         function(_bw_, _bv_){return _bw_ !== _bv_ ? 1 : 0;},
         equal,
         compare,
         min,
         max,
         ascending,
         descending,
         between,
         clamp_exn,
         clamp,
         comparator,
         pp,
         hashable,
         is_positive,
         is_non_negative,
         is_negative,
         is_non_positive,
         sign,
         invariant,
         Hex,
         of_string_opt,
         to_string_hum,
         zero,
         one,
         minus_one,
         function(_bu_, _bt_){return _bu_ + _bt_ | 0;},
         function(_bs_, _br_){return _bs_ - _br_ | 0;},
         caml_mul,
         symbol$2,
         function(_bq_){return - _bq_ | 0;},
         function(_bp_){return - _bp_ | 0;},
         symbol$4,
         symbol$3,
         caml_div,
         rem,
         symbol$5,
         function(_bo_, _bn_){return _bo_ & _bn_;},
         function(_bm_, _bl_){return _bm_ | _bl_;},
         function(_bk_, _bj_){return _bk_ ^ _bj_;},
         lnot,
         function(_bi_, _bh_){return _bi_ << _bh_;},
         function(_bg_, _bf_){return _bg_ >> _bf_;},
         round,
         round_towards_zero,
         round_down,
         round_up,
         round_nearest,
         abs,
         succ,
         pred,
         pow,
         bit_and,
         bit_or,
         bit_xor,
         bit_not,
         popcount,
         shift_left,
         shift_right,
         decr,
         incr,
         of_int32_exn,
         to_int32_exn,
         of_int64_exn,
         to_int64,
         of_nativeint_exn,
         to_nativeint_exn,
         of_float_unchecked,
         num_bits,
         max_value,
         min_value,
         function(_be_, _bd_){return _be_ >>> _bd_ | 0;},
         shift_right_logical,
         ceil_pow2,
         floor_pow2,
         ceil_log2,
         floor_log2,
         is_pow2,
         clz,
         ctz,
         [0,
          function(_bc_, _bb_){return _bc_ + _bb_ | 0;},
          function(_ba_, _a$_){return _ba_ - _a$_ | 0;},
          caml_mul,
          caml_div,
          function(_a__){return - _a__ | 0;},
          O[1],
          function(_a9_, _a8_){return _a8_ <= _a9_ ? 1 : 0;},
          function(_a7_, _a6_){return _a7_ <= _a6_ ? 1 : 0;},
          function(_a5_, _a4_){return _a5_ === _a4_ ? 1 : 0;},
          function(_a3_, _a2_){return _a2_ < _a3_ ? 1 : 0;},
          function(_a1_, _a0_){return _a1_ < _a0_ ? 1 : 0;},
          function(_aZ_, _aY_){return _aZ_ !== _aY_ ? 1 : 0;},
          O[3],
          function(_aX_){return - _aX_ | 0;},
          O[4],
          O[5],
          O[6],
          O[7],
          function(_aW_, _aV_){return _aW_ & _aV_;},
          function(_aU_, _aT_){return _aU_ | _aT_;},
          function(_aS_, _aR_){return _aS_ ^ _aR_;},
          O[2],
          function(_aQ_, _aP_){return _aQ_ << _aP_;},
          function(_aO_, _aN_){return _aO_ >> _aN_;},
          function(_aM_, _aL_){return _aM_ >>> _aL_ | 0;}],
         uniform,
         log_uniform]),
    int$0 = For_int[8],
    int_uniform = For_int[7],
    int_inclusive = For_int[5],
    int_uniform_inclusive = For_int[2],
    int_log_inclusive = For_int[6],
    int_log_uniform_inclusive = For_int[3],
    int_geometric = For_int[1],
    t_sexp_grammar$0 = Base_Int32[2],
    of_float$0 = Base_Int32[3],
    to_float$0 = Base_Int32[4],
    of_int_exn$0 = Base_Int32[5],
    to_int_exn$0 = Base_Int32[6],
    hash_fold_t$0 = Base_Int32[7],
    hash$0 = Base_Int32[8],
    t_of_sexp$0 = Base_Int32[9],
    sexp_of_t$0 = Base_Int32[10],
    of_string$0 = Base_Int32[11],
    to_string$0 = Base_Int32[12],
    symbol$6 = Base_Int32[13],
    symbol$7 = Base_Int32[14],
    symbol$8 = Base_Int32[15],
    symbol$9 = Base_Int32[16],
    symbol$10 = Base_Int32[17],
    symbol$11 = Base_Int32[18],
    equal$0 = Base_Int32[19],
    compare$0 = Base_Int32[20],
    min$0 = Base_Int32[21],
    max$0 = Base_Int32[22],
    ascending$0 = Base_Int32[23],
    descending$0 = Base_Int32[24],
    between$0 = Base_Int32[25],
    clamp_exn$0 = Base_Int32[26],
    clamp$0 = Base_Int32[27],
    comparator$0 = Base_Int32[28],
    pp$0 = Base_Int32[29],
    hashable$0 = Base_Int32[30],
    is_positive$0 = Base_Int32[31],
    is_non_negative$0 = Base_Int32[32],
    is_negative$0 = Base_Int32[33],
    is_non_positive$0 = Base_Int32[34],
    sign$0 = Base_Int32[35],
    invariant$0 = Base_Int32[36],
    Hex$0 = Base_Int32[37],
    of_string_opt$0 = Base_Int32[38],
    to_string_hum$0 = Base_Int32[39],
    zero$0 = Base_Int32[40],
    one$0 = Base_Int32[41],
    minus_one$0 = Base_Int32[42],
    symbol$12 = Base_Int32[43],
    symbol$13 = Base_Int32[44],
    symbol$14 = Base_Int32[45],
    symbol$15 = Base_Int32[46],
    neg = Base_Int32[47],
    symbol$16 = Base_Int32[48],
    symbol$17 = Base_Int32[49],
    symbol$18 = Base_Int32[50],
    symbol$19 = Base_Int32[51],
    rem$0 = Base_Int32[52],
    symbol$20 = Base_Int32[53],
    land = Base_Int32[54],
    lor = Base_Int32[55],
    lxor = Base_Int32[56],
    lnot$0 = Base_Int32[57],
    lsl = Base_Int32[58],
    asr = Base_Int32[59],
    round$0 = Base_Int32[60],
    round_towards_zero$0 = Base_Int32[61],
    round_down$0 = Base_Int32[62],
    round_up$0 = Base_Int32[63],
    round_nearest$0 = Base_Int32[64],
    abs$0 = Base_Int32[65],
    succ$0 = Base_Int32[66],
    pred$0 = Base_Int32[67],
    pow$0 = Base_Int32[68],
    bit_and$0 = Base_Int32[69],
    bit_or$0 = Base_Int32[70],
    bit_xor$0 = Base_Int32[71],
    bit_not$0 = Base_Int32[72],
    popcount$0 = Base_Int32[73],
    shift_left$0 = Base_Int32[74],
    shift_right$0 = Base_Int32[75],
    decr$0 = Base_Int32[76],
    incr$0 = Base_Int32[77],
    of_int32_exn$0 = Base_Int32[78],
    to_int32_exn$0 = Base_Int32[79],
    of_int64_exn$0 = Base_Int32[80],
    to_int64$0 = Base_Int32[81],
    of_nativeint_exn$0 = Base_Int32[82],
    to_nativeint_exn$0 = Base_Int32[83],
    of_float_unchecked$0 = Base_Int32[84],
    num_bits$0 = Base_Int32[85],
    max_value$0 = Base_Int32[86],
    min_value$0 = Base_Int32[87],
    lsr = Base_Int32[88],
    shift_right_logical$0 = Base_Int32[89],
    ceil_pow2$0 = Base_Int32[90],
    floor_pow2$0 = Base_Int32[91],
    ceil_log2$0 = Base_Int32[92],
    floor_log2$0 = Base_Int32[93],
    is_pow2$0 = Base_Int32[94],
    clz$0 = Base_Int32[95],
    ctz$0 = Base_Int32[96],
    O$0 = Base_Int32[97],
    uniform$0 = Splittable_random[4],
    log_uniform$0 = Splittable_random[10][2],
    For_int32 =
      For_integer
       ([0,
         t_sexp_grammar$0,
         of_float$0,
         to_float$0,
         of_int_exn$0,
         to_int_exn$0,
         hash_fold_t$0,
         hash$0,
         t_of_sexp$0,
         sexp_of_t$0,
         of_string$0,
         to_string$0,
         symbol$6,
         symbol$7,
         symbol$8,
         symbol$9,
         symbol$10,
         symbol$11,
         equal$0,
         compare$0,
         min$0,
         max$0,
         ascending$0,
         descending$0,
         between$0,
         clamp_exn$0,
         clamp$0,
         comparator$0,
         pp$0,
         hashable$0,
         is_positive$0,
         is_non_negative$0,
         is_negative$0,
         is_non_positive$0,
         sign$0,
         invariant$0,
         Hex$0,
         of_string_opt$0,
         to_string_hum$0,
         zero$0,
         one$0,
         minus_one$0,
         symbol$12,
         symbol$13,
         symbol$14,
         symbol$15,
         neg,
         symbol$16,
         symbol$17,
         symbol$18,
         symbol$19,
         rem$0,
         symbol$20,
         land,
         lor,
         lxor,
         lnot$0,
         lsl,
         asr,
         round$0,
         round_towards_zero$0,
         round_down$0,
         round_up$0,
         round_nearest$0,
         abs$0,
         succ$0,
         pred$0,
         pow$0,
         bit_and$0,
         bit_or$0,
         bit_xor$0,
         bit_not$0,
         popcount$0,
         shift_left$0,
         shift_right$0,
         decr$0,
         incr$0,
         of_int32_exn$0,
         to_int32_exn$0,
         of_int64_exn$0,
         to_int64$0,
         of_nativeint_exn$0,
         to_nativeint_exn$0,
         of_float_unchecked$0,
         num_bits$0,
         max_value$0,
         min_value$0,
         lsr,
         shift_right_logical$0,
         ceil_pow2$0,
         floor_pow2$0,
         ceil_log2$0,
         floor_log2$0,
         is_pow2$0,
         clz$0,
         ctz$0,
         O$0,
         uniform$0,
         log_uniform$0]),
    int32 = For_int32[8],
    int32_uniform = For_int32[7],
    int32_inclusive = For_int32[5],
    int32_uniform_inclusive = For_int32[2],
    int32_log_inclusive = For_int32[6],
    int32_log_uniform_inclusive = For_int32[3],
    int32_geometric = For_int32[1],
    t_sexp_grammar$1 = Base_Int63[1],
    of_float$1 = Base_Int63[2],
    to_float$1 = Base_Int63[3],
    of_int_exn$1 = Base_Int63[4],
    to_int_exn$1 = Base_Int63[5],
    hash_fold_t$1 = Base_Int63[6],
    hash$1 = Base_Int63[7],
    t_of_sexp$1 = Base_Int63[8],
    sexp_of_t$1 = Base_Int63[9],
    of_string$1 = Base_Int63[10],
    to_string$1 = Base_Int63[11],
    symbol$21 = Base_Int63[12],
    symbol$22 = Base_Int63[13],
    symbol$23 = Base_Int63[14],
    symbol$24 = Base_Int63[15],
    symbol$25 = Base_Int63[16],
    symbol$26 = Base_Int63[17],
    equal$1 = Base_Int63[18],
    compare$1 = Base_Int63[19],
    min$1 = Base_Int63[20],
    max$1 = Base_Int63[21],
    ascending$1 = Base_Int63[22],
    descending$1 = Base_Int63[23],
    between$1 = Base_Int63[24],
    clamp_exn$1 = Base_Int63[25],
    clamp$1 = Base_Int63[26],
    comparator$1 = Base_Int63[27],
    pp$1 = Base_Int63[28],
    hashable$1 = Base_Int63[29],
    is_positive$1 = Base_Int63[30],
    is_non_negative$1 = Base_Int63[31],
    is_negative$1 = Base_Int63[32],
    is_non_positive$1 = Base_Int63[33],
    sign$1 = Base_Int63[34],
    invariant$1 = Base_Int63[35],
    Hex$1 = Base_Int63[36],
    of_string_opt$1 = Base_Int63[37],
    to_string_hum$1 = Base_Int63[38],
    zero$1 = Base_Int63[39],
    one$1 = Base_Int63[40],
    minus_one$1 = Base_Int63[41],
    symbol$27 = Base_Int63[42],
    symbol$28 = Base_Int63[43],
    symbol$29 = Base_Int63[44],
    symbol$30 = Base_Int63[45],
    neg$0 = Base_Int63[46],
    symbol$31 = Base_Int63[47],
    symbol$32 = Base_Int63[48],
    symbol$33 = Base_Int63[49],
    symbol$34 = Base_Int63[50],
    rem$1 = Base_Int63[51],
    symbol$35 = Base_Int63[52],
    land$0 = Base_Int63[53],
    lor$0 = Base_Int63[54],
    lxor$0 = Base_Int63[55],
    lnot$1 = Base_Int63[56],
    lsl$0 = Base_Int63[57],
    asr$0 = Base_Int63[58],
    round$1 = Base_Int63[59],
    round_towards_zero$1 = Base_Int63[60],
    round_down$1 = Base_Int63[61],
    round_up$1 = Base_Int63[62],
    round_nearest$1 = Base_Int63[63],
    abs$1 = Base_Int63[64],
    succ$1 = Base_Int63[65],
    pred$1 = Base_Int63[66],
    pow$1 = Base_Int63[67],
    bit_and$1 = Base_Int63[68],
    bit_or$1 = Base_Int63[69],
    bit_xor$1 = Base_Int63[70],
    bit_not$1 = Base_Int63[71],
    popcount$1 = Base_Int63[72],
    shift_left$1 = Base_Int63[73],
    shift_right$1 = Base_Int63[74],
    decr$1 = Base_Int63[75],
    incr$1 = Base_Int63[76],
    of_int32_exn$1 = Base_Int63[77],
    to_int32_exn$1 = Base_Int63[78],
    of_int64_exn$1 = Base_Int63[79],
    to_int64$1 = Base_Int63[80],
    of_nativeint_exn$1 = Base_Int63[81],
    to_nativeint_exn$1 = Base_Int63[82],
    of_float_unchecked$1 = Base_Int63[83],
    num_bits$1 = Base_Int63[84],
    max_value$1 = Base_Int63[85],
    min_value$1 = Base_Int63[86],
    lsr$0 = Base_Int63[87],
    shift_right_logical$1 = Base_Int63[88],
    ceil_pow2$1 = Base_Int63[89],
    floor_pow2$1 = Base_Int63[90],
    ceil_log2$1 = Base_Int63[91],
    is_pow2$1 = Base_Int63[92],
    clz$1 = Base_Int63[93],
    ctz$1 = Base_Int63[94],
    O$1 = Base_Int63[95],
    floor_log2$1 = Base_Int63[114],
    uniform$1 = Splittable_random[5],
    log_uniform$1 = Splittable_random[10][3],
    For_int63 =
      For_integer
       ([0,
         t_sexp_grammar$1,
         of_float$1,
         to_float$1,
         of_int_exn$1,
         to_int_exn$1,
         hash_fold_t$1,
         hash$1,
         t_of_sexp$1,
         sexp_of_t$1,
         of_string$1,
         to_string$1,
         symbol$21,
         symbol$22,
         symbol$23,
         symbol$24,
         symbol$25,
         symbol$26,
         equal$1,
         compare$1,
         min$1,
         max$1,
         ascending$1,
         descending$1,
         between$1,
         clamp_exn$1,
         clamp$1,
         comparator$1,
         pp$1,
         hashable$1,
         is_positive$1,
         is_non_negative$1,
         is_negative$1,
         is_non_positive$1,
         sign$1,
         invariant$1,
         Hex$1,
         of_string_opt$1,
         to_string_hum$1,
         zero$1,
         one$1,
         minus_one$1,
         symbol$27,
         symbol$28,
         symbol$29,
         symbol$30,
         neg$0,
         symbol$31,
         symbol$32,
         symbol$33,
         symbol$34,
         rem$1,
         symbol$35,
         land$0,
         lor$0,
         lxor$0,
         lnot$1,
         lsl$0,
         asr$0,
         round$1,
         round_towards_zero$1,
         round_down$1,
         round_up$1,
         round_nearest$1,
         abs$1,
         succ$1,
         pred$1,
         pow$1,
         bit_and$1,
         bit_or$1,
         bit_xor$1,
         bit_not$1,
         popcount$1,
         shift_left$1,
         shift_right$1,
         decr$1,
         incr$1,
         of_int32_exn$1,
         to_int32_exn$1,
         of_int64_exn$1,
         to_int64$1,
         of_nativeint_exn$1,
         to_nativeint_exn$1,
         of_float_unchecked$1,
         num_bits$1,
         max_value$1,
         min_value$1,
         lsr$0,
         shift_right_logical$1,
         ceil_pow2$1,
         floor_pow2$1,
         ceil_log2$1,
         floor_log2$1,
         is_pow2$1,
         clz$1,
         ctz$1,
         O$1,
         uniform$1,
         log_uniform$1]),
    int63 = For_int63[8],
    int63_uniform = For_int63[7],
    int63_inclusive = For_int63[5],
    int63_uniform_inclusive = For_int63[2],
    int63_log_inclusive = For_int63[6],
    int63_log_uniform_inclusive = For_int63[3],
    int63_geometric = For_int63[1],
    t_sexp_grammar$2 = Base_Int64[2],
    of_float$2 = Base_Int64[3],
    to_float$2 = Base_Int64[4],
    of_int_exn$2 = Base_Int64[5],
    to_int_exn$2 = Base_Int64[6],
    hash_fold_t$2 = Base_Int64[7],
    hash$2 = Base_Int64[8],
    t_of_sexp$2 = Base_Int64[9],
    sexp_of_t$2 = Base_Int64[10],
    of_string$2 = Base_Int64[11],
    to_string$2 = Base_Int64[12],
    equal$2 = Base_Int64[13],
    compare$2 = Base_Int64[14],
    min$2 = Base_Int64[15],
    max$2 = Base_Int64[16],
    ascending$2 = Base_Int64[17],
    descending$2 = Base_Int64[18],
    between$2 = Base_Int64[19],
    clamp_exn$2 = Base_Int64[20],
    clamp$2 = Base_Int64[21],
    comparator$2 = Base_Int64[22],
    pp$2 = Base_Int64[23],
    hashable$2 = Base_Int64[24],
    is_positive$2 = Base_Int64[25],
    is_non_negative$2 = Base_Int64[26],
    is_negative$2 = Base_Int64[27],
    is_non_positive$2 = Base_Int64[28],
    sign$2 = Base_Int64[29],
    invariant$2 = Base_Int64[30],
    Hex$2 = Base_Int64[31],
    of_string_opt$2 = Base_Int64[32],
    to_string_hum$2 = Base_Int64[33],
    one$2 = Base_Int64[34],
    minus_one$2 = Base_Int64[35],
    rem$2 = Base_Int64[36],
    round$2 = Base_Int64[37],
    round_towards_zero$2 = Base_Int64[38],
    round_down$2 = Base_Int64[39],
    round_up$2 = Base_Int64[40],
    round_nearest$2 = Base_Int64[41],
    succ$2 = Base_Int64[42],
    pred$2 = Base_Int64[43],
    pow$2 = Base_Int64[44],
    bit_and$2 = Base_Int64[45],
    bit_or$2 = Base_Int64[46],
    bit_xor$2 = Base_Int64[47],
    bit_not$2 = Base_Int64[48],
    popcount$2 = Base_Int64[49],
    shift_left$2 = Base_Int64[50],
    shift_right$2 = Base_Int64[51],
    decr$2 = Base_Int64[52],
    incr$2 = Base_Int64[53],
    of_int32_exn$2 = Base_Int64[54],
    to_int32_exn$2 = Base_Int64[55],
    of_int64_exn$2 = Base_Int64[56],
    to_int64$2 = Base_Int64[57],
    of_nativeint_exn$2 = Base_Int64[58],
    to_nativeint_exn$2 = Base_Int64[59],
    of_float_unchecked$2 = Base_Int64[60],
    num_bits$2 = Base_Int64[61],
    max_value$2 = Base_Int64[62],
    min_value$2 = Base_Int64[63],
    shift_right_logical$2 = Base_Int64[64],
    ceil_pow2$2 = Base_Int64[65],
    floor_pow2$2 = Base_Int64[66],
    ceil_log2$2 = Base_Int64[67],
    floor_log2$2 = Base_Int64[68],
    is_pow2$2 = Base_Int64[69],
    clz$2 = Base_Int64[70],
    ctz$2 = Base_Int64[71],
    O$2 = Base_Int64[72],
    symbol$36 = Base_Int64[73],
    lnot$2 = Base_Int64[74],
    abs$2 = Base_Int64[75],
    zero$2 = Base_Int64[76],
    symbol$37 = Base_Int64[77],
    symbol$38 = Base_Int64[78],
    symbol$39 = Base_Int64[79],
    uniform$2 = Splittable_random[6],
    log_uniform$2 = Splittable_random[10][4],
    For_int64 =
      For_integer
       ([0,
         t_sexp_grammar$2,
         of_float$2,
         to_float$2,
         of_int_exn$2,
         to_int_exn$2,
         hash_fold_t$2,
         hash$2,
         t_of_sexp$2,
         sexp_of_t$2,
         of_string$2,
         to_string$2,
         caml_greaterequal,
         caml_lessequal,
         caml_equal,
         caml_greaterthan,
         caml_lessthan,
         caml_notequal,
         equal$2,
         compare$2,
         min$2,
         max$2,
         ascending$2,
         descending$2,
         between$2,
         clamp_exn$2,
         clamp$2,
         comparator$2,
         pp$2,
         hashable$2,
         is_positive$2,
         is_non_negative$2,
         is_negative$2,
         is_non_positive$2,
         sign$2,
         invariant$2,
         Hex$2,
         of_string_opt$2,
         to_string_hum$2,
         zero$2,
         one$2,
         minus_one$2,
         caml_int64_add,
         caml_int64_sub,
         caml_int64_mul,
         symbol$36,
         caml_int64_neg,
         caml_int64_neg,
         symbol$38,
         symbol$37,
         caml_int64_div,
         rem$2,
         symbol$39,
         caml_int64_and,
         caml_int64_or,
         caml_int64_xor,
         lnot$2,
         caml_int64_shift_left,
         caml_int64_shift_right,
         round$2,
         round_towards_zero$2,
         round_down$2,
         round_up$2,
         round_nearest$2,
         abs$2,
         succ$2,
         pred$2,
         pow$2,
         bit_and$2,
         bit_or$2,
         bit_xor$2,
         bit_not$2,
         popcount$2,
         shift_left$2,
         shift_right$2,
         decr$2,
         incr$2,
         of_int32_exn$2,
         to_int32_exn$2,
         of_int64_exn$2,
         to_int64$2,
         of_nativeint_exn$2,
         to_nativeint_exn$2,
         of_float_unchecked$2,
         num_bits$2,
         max_value$2,
         min_value$2,
         caml_int64_shift_right_unsigne,
         shift_right_logical$2,
         ceil_pow2$2,
         floor_pow2$2,
         ceil_log2$2,
         floor_log2$2,
         is_pow2$2,
         clz$2,
         ctz$2,
         [0,
          caml_int64_add,
          caml_int64_sub,
          caml_int64_mul,
          caml_int64_div,
          caml_int64_neg,
          O$2[1],
          caml_greaterequal,
          caml_lessequal,
          caml_equal,
          caml_greaterthan,
          caml_lessthan,
          caml_notequal,
          O$2[3],
          caml_int64_neg,
          O$2[4],
          O$2[5],
          O$2[6],
          O$2[7],
          caml_int64_and,
          caml_int64_or,
          caml_int64_xor,
          O$2[2],
          caml_int64_shift_left,
          caml_int64_shift_right,
          caml_int64_shift_right_unsigne],
         uniform$2,
         log_uniform$2]),
    int64 = For_int64[8],
    int64_uniform = For_int64[7],
    int64_inclusive = For_int64[5],
    int64_uniform_inclusive = For_int64[2],
    int64_log_inclusive = For_int64[6],
    int64_log_uniform_inclusive = For_int64[3],
    int64_geometric = For_int64[1],
    t_sexp_grammar$3 = Base_Nativeint[2],
    of_float$3 = Base_Nativeint[3],
    to_float$3 = Base_Nativeint[4],
    of_int_exn$3 = Base_Nativeint[5],
    to_int_exn$3 = Base_Nativeint[6],
    hash_fold_t$3 = Base_Nativeint[7],
    hash$3 = Base_Nativeint[8],
    t_of_sexp$3 = Base_Nativeint[9],
    sexp_of_t$3 = Base_Nativeint[10],
    of_string$3 = Base_Nativeint[11],
    to_string$3 = Base_Nativeint[12],
    symbol$40 = Base_Nativeint[13],
    symbol$41 = Base_Nativeint[14],
    symbol$42 = Base_Nativeint[15],
    symbol$43 = Base_Nativeint[16],
    symbol$44 = Base_Nativeint[17],
    symbol$45 = Base_Nativeint[18],
    equal$3 = Base_Nativeint[19],
    compare$3 = Base_Nativeint[20],
    min$3 = Base_Nativeint[21],
    max$3 = Base_Nativeint[22],
    ascending$3 = Base_Nativeint[23],
    descending$3 = Base_Nativeint[24],
    between$3 = Base_Nativeint[25],
    clamp_exn$3 = Base_Nativeint[26],
    clamp$3 = Base_Nativeint[27],
    comparator$3 = Base_Nativeint[28],
    pp$3 = Base_Nativeint[29],
    hashable$3 = Base_Nativeint[30],
    is_positive$3 = Base_Nativeint[31],
    is_non_negative$3 = Base_Nativeint[32],
    is_negative$3 = Base_Nativeint[33],
    is_non_positive$3 = Base_Nativeint[34],
    sign$3 = Base_Nativeint[35],
    invariant$3 = Base_Nativeint[36],
    Hex$3 = Base_Nativeint[37],
    of_string_opt$3 = Base_Nativeint[38],
    to_string_hum$3 = Base_Nativeint[39],
    zero$3 = Base_Nativeint[40],
    one$3 = Base_Nativeint[41],
    minus_one$3 = Base_Nativeint[42],
    symbol$46 = Base_Nativeint[43],
    symbol$47 = Base_Nativeint[44],
    symbol$48 = Base_Nativeint[45],
    symbol$49 = Base_Nativeint[46],
    neg$1 = Base_Nativeint[47],
    symbol$50 = Base_Nativeint[48],
    symbol$51 = Base_Nativeint[49],
    symbol$52 = Base_Nativeint[50],
    symbol$53 = Base_Nativeint[51],
    rem$3 = Base_Nativeint[52],
    symbol$54 = Base_Nativeint[53],
    land$1 = Base_Nativeint[54],
    lor$1 = Base_Nativeint[55],
    lxor$1 = Base_Nativeint[56],
    lnot$3 = Base_Nativeint[57],
    lsl$1 = Base_Nativeint[58],
    asr$1 = Base_Nativeint[59],
    round$3 = Base_Nativeint[60],
    round_towards_zero$3 = Base_Nativeint[61],
    round_down$3 = Base_Nativeint[62],
    round_up$3 = Base_Nativeint[63],
    round_nearest$3 = Base_Nativeint[64],
    abs$3 = Base_Nativeint[65],
    succ$3 = Base_Nativeint[66],
    pred$3 = Base_Nativeint[67],
    pow$3 = Base_Nativeint[68],
    bit_and$3 = Base_Nativeint[69],
    bit_or$3 = Base_Nativeint[70],
    bit_xor$3 = Base_Nativeint[71],
    bit_not$3 = Base_Nativeint[72],
    popcount$3 = Base_Nativeint[73],
    shift_left$3 = Base_Nativeint[74],
    shift_right$3 = Base_Nativeint[75],
    decr$3 = Base_Nativeint[76],
    incr$3 = Base_Nativeint[77],
    of_int32_exn$3 = Base_Nativeint[78],
    to_int32_exn$3 = Base_Nativeint[79],
    of_int64_exn$3 = Base_Nativeint[80],
    to_int64$3 = Base_Nativeint[81],
    of_nativeint_exn$3 = Base_Nativeint[82],
    to_nativeint_exn$3 = Base_Nativeint[83],
    of_float_unchecked$3 = Base_Nativeint[84],
    num_bits$3 = Base_Nativeint[85],
    max_value$3 = Base_Nativeint[86],
    min_value$3 = Base_Nativeint[87],
    lsr$1 = Base_Nativeint[88],
    shift_right_logical$3 = Base_Nativeint[89],
    ceil_pow2$3 = Base_Nativeint[90],
    floor_pow2$3 = Base_Nativeint[91],
    ceil_log2$3 = Base_Nativeint[92],
    floor_log2$3 = Base_Nativeint[93],
    is_pow2$3 = Base_Nativeint[94],
    clz$3 = Base_Nativeint[95],
    ctz$3 = Base_Nativeint[96],
    O$3 = Base_Nativeint[97],
    uniform$3 = Splittable_random[7],
    log_uniform$3 = Splittable_random[10][5],
    For_nativeint =
      For_integer
       ([0,
         t_sexp_grammar$3,
         of_float$3,
         to_float$3,
         of_int_exn$3,
         to_int_exn$3,
         hash_fold_t$3,
         hash$3,
         t_of_sexp$3,
         sexp_of_t$3,
         of_string$3,
         to_string$3,
         symbol$40,
         symbol$41,
         symbol$42,
         symbol$43,
         symbol$44,
         symbol$45,
         equal$3,
         compare$3,
         min$3,
         max$3,
         ascending$3,
         descending$3,
         between$3,
         clamp_exn$3,
         clamp$3,
         comparator$3,
         pp$3,
         hashable$3,
         is_positive$3,
         is_non_negative$3,
         is_negative$3,
         is_non_positive$3,
         sign$3,
         invariant$3,
         Hex$3,
         of_string_opt$3,
         to_string_hum$3,
         zero$3,
         one$3,
         minus_one$3,
         symbol$46,
         symbol$47,
         symbol$48,
         symbol$49,
         neg$1,
         symbol$50,
         symbol$51,
         symbol$52,
         symbol$53,
         rem$3,
         symbol$54,
         land$1,
         lor$1,
         lxor$1,
         lnot$3,
         lsl$1,
         asr$1,
         round$3,
         round_towards_zero$3,
         round_down$3,
         round_up$3,
         round_nearest$3,
         abs$3,
         succ$3,
         pred$3,
         pow$3,
         bit_and$3,
         bit_or$3,
         bit_xor$3,
         bit_not$3,
         popcount$3,
         shift_left$3,
         shift_right$3,
         decr$3,
         incr$3,
         of_int32_exn$3,
         to_int32_exn$3,
         of_int64_exn$3,
         to_int64$3,
         of_nativeint_exn$3,
         to_nativeint_exn$3,
         of_float_unchecked$3,
         num_bits$3,
         max_value$3,
         min_value$3,
         lsr$1,
         shift_right_logical$3,
         ceil_pow2$3,
         floor_pow2$3,
         ceil_log2$3,
         floor_log2$3,
         is_pow2$3,
         clz$3,
         ctz$3,
         O$3,
         uniform$3,
         log_uniform$3]),
    nativeint = For_nativeint[8],
    nativeint_uniform = For_nativeint[7],
    nativeint_inclusive = For_nativeint[5],
    nativeint_uniform_inclusive = For_nativeint[2],
    nativeint_log_inclusive = For_nativeint[6],
    nativeint_log_uniform_inclusiv = For_nativeint[3],
    nativeint_geometric = For_nativeint[1],
    float_zero_exponent = caml_call1(Base_Float[123], 0.),
    float_zero_mantissa = caml_call1(Base_Float[124], 0.),
    float_max_positive_subnormal_v =
      caml_call2(Base_Float[53], 759637122, Base_Float[49]),
    float_subnormal_exponent = caml_call1(Base_Float[123], Base_Float[48]),
    float_min_subnormal_mantissa = caml_call1(Base_Float[124], Base_Float[48]),
    float_max_subnormal_mantissa =
      caml_call1(Base_Float[124], float_max_positive_subnormal_v),
    float_max_positive_normal_valu = Base_Float[47],
    float_min_normal_exponent = caml_call1(Base_Float[123], Base_Float[49]),
    float_max_normal_exponent =
      caml_call1(Base_Float[123], float_max_positive_normal_valu),
    float_max_normal_mantissa =
      caml_call1(Base_Float[124], float_max_positive_normal_valu),
    float_inf_exponent = caml_call1(Base_Float[123], Base_Float[35]),
    float_inf_mantissa = caml_call1(Base_Float[124], Base_Float[35]),
    float_nan_exponent = caml_call1(Base_Float[123], Base_Float[34]),
    float_min_nan_mantissa = caml_call1(Base_Int63[65], float_inf_mantissa),
    _k_ = For_int[2].call(null, 0, 52),
    float_normal_mantissa =
      caml_call2
       (For_monad[11][4][2],
        _k_,
        function(num_bits){
         var
          _aI_ = caml_call2(Base_Int63[73], Base_Int63[40], num_bits),
          _aJ_ = caml_call1(Base_Int63[66], _aI_),
          _aK_ = For_int63[5].call(null, Base_Int63[39], _aJ_);
         return caml_call2
                 (For_monad[11][4][3],
                  _aK_,
                  function(bits){
                   return caml_call2(Base_Int63[73], bits, 52 - num_bits | 0);
                  });
        }),
    lower_bound = caml_call1(Base_Float[123], 1.),
    _l_ =
      For_int[6].call(null, 0, float_max_normal_exponent - lower_bound | 0),
    _n_ =
      [0,
       caml_call2
        (For_monad[11][4][3],
         _l_,
         function(offset){return lower_bound + offset | 0;}),
       0],
    _m_ =
      For_int[6].call(null, 0, lower_bound - float_min_normal_exponent | 0),
    float_exponent =
      union
       ([0,
         caml_call2
          (For_monad[11][4][3],
           _m_,
           function(offset){return lower_bound - offset | 0;}),
         _n_]),
    float_zero =
      caml_call2
       (For_monad[11][4][3],
        bool,
        function(negative){
         return caml_call3
                 (Base_Float[121],
                  negative,
                  float_zero_exponent,
                  float_zero_mantissa);
        }),
    let_syntax_012 = caml_call1(For_monad[11][1], float_subnormal_exponent),
    let_syntax_013 =
      For_int63[6].call
       (null, float_min_subnormal_mantissa, float_max_subnormal_mantissa),
    _o_ = caml_call2(For_monad[11][4][4], let_syntax_012, let_syntax_013),
    _p_ = caml_call2(For_monad[11][4][4], bool, _o_),
    float_subnormal =
      caml_call2
       (For_monad[11][4][3],
        _p_,
        function(param){
         var
          match = param[2],
          mantissa = match[2],
          exponent = match[1],
          negative = param[1];
         return caml_call3(Base_Float[121], negative, exponent, mantissa);
        }),
    _q_ =
      caml_call2(For_monad[11][4][4], float_exponent, float_normal_mantissa),
    _r_ = caml_call2(For_monad[11][4][4], bool, _q_),
    float_normal =
      caml_call2
       (For_monad[11][4][3],
        _r_,
        function(param){
         var
          match = param[2],
          mantissa = match[2],
          exponent = match[1],
          negative = param[1];
         return caml_call3(Base_Float[121], negative, exponent, mantissa);
        }),
    float_infinite =
      caml_call2
       (For_monad[11][4][3],
        bool,
        function(negative){
         return caml_call3
                 (Base_Float[121],
                  negative,
                  float_inf_exponent,
                  float_inf_mantissa);
        }),
    let_syntax_021 = caml_call1(For_monad[11][1], float_nan_exponent),
    let_syntax_022 =
      For_int63[5].call
       (null, float_min_nan_mantissa, float_max_normal_mantissa),
    _s_ = caml_call2(For_monad[11][4][4], let_syntax_021, let_syntax_022),
    _t_ = caml_call2(For_monad[11][4][4], bool, _s_),
    float_nan =
      caml_call2
       (For_monad[11][4][3],
        _t_,
        function(param){
         var
          match = param[2],
          mantissa = match[2],
          exponent = match[1],
          negative = param[1];
         return caml_call3(Base_Float[121], negative, exponent, mantissa);
        });
   function float_of_class(c){
    switch(c){
      case 0:
       return float_infinite;
      case 1:
       return float_nan;
      case 2:
       return float_normal;
      case 3:
       return float_subnormal;
      default: return float_zero;
    }
   }
   function float_matching_classes(filter){
    return weighted_union
            (caml_call2
              (Base_List[12],
               Base_Float[115][2],
               function(c){
                if(! caml_call1(filter, c)) return 0;
                var _aG_ = float_of_class(c);
                switch(c){
                  case 0:
                   var _aH_ = 1.; break;
                  case 1:
                   var _aH_ = 1.; break;
                  case 2:
                   var _aH_ = 100.; break;
                  case 3:
                   var _aH_ = 10.; break;
                  default: var _aH_ = 1.;
                }
                return [0, [0, _aH_, _aG_]];
               }));
   }
   var
    float_finite =
      float_matching_classes(function(param){return 2 <= param ? 1 : 0;}),
    float_without_nan =
      float_matching_classes(function(param){return 1 === param ? 0 : 1;}),
    float$0 = float_matching_classes(function(param){return 1;}),
    float_finite_non_zero =
      float_matching_classes
       (function(param){return 1 < param - 2 >>> 0 ? 0 : 1;}),
    float_strictly_positive =
      caml_call2
       (For_monad[11][4][3],
        float_finite_non_zero,
        function(t){return caml_call1(Base_Float[104], t);}),
    float_strictly_negative =
      caml_call2
       (For_monad[11][4][3],
        float_finite_non_zero,
        function(t){
         var _aF_ = caml_call1(Base_Float[104], t);
         return caml_call1(Base[211], _aF_);
        }),
    float_positive_or_zero =
      caml_call2
       (For_monad[11][4][3],
        float_finite,
        function(t){return caml_call1(Base_Float[104], t);}),
    float_negative_or_zero =
      caml_call2
       (For_monad[11][4][3],
        float_finite,
        function(t){
         var _aE_ = caml_call1(Base_Float[104], t);
         return caml_call1(Base[211], _aE_);
        }),
    _u_ = [0, cst_upper_bound],
    _v_ = [0, cst_lower_bound],
    cst_Float_uniform_exclusive_bo =
      "Float.uniform_exclusive: bounds are not finite",
    _w_ = [0, cst_upper_bound],
    _x_ = [0, cst_lower_bound],
    cst_Float_uniform_exclusive_re =
      "Float.uniform_exclusive: requested range is empty";
   function float_uniform_exclusive(lower_bound, upper_bound){
    var
     _aw_ = 1 - caml_call1(Base_Float[86], lower_bound),
     _ax_ = _aw_ || 1 - caml_call1(Base_Float[86], upper_bound);
    if(_ax_){
     var
      _ay_ = [0, [1, [0, _u_, [0, caml_call1(Base[117], upper_bound), 0]]], 0],
      _az_ =
        [0, [1, [0, _v_, [0, caml_call1(Base[117], lower_bound), 0]]], _ay_],
      _aA_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Float_uniform_exclusive_bo),
          _az_]];
     caml_call1(Base[217], _aA_);
    }
    var
     lower_inclusive = caml_call2(Base_Float[53], 19067, lower_bound),
     upper_inclusive = caml_call2(Base_Float[53], 759637122, upper_bound);
    if(caml_call2(Base_Float[105][11], lower_inclusive, upper_inclusive)){
     var
      _aB_ = [0, [1, [0, _w_, [0, caml_call1(Base[117], upper_bound), 0]]], 0],
      _aC_ =
        [0, [1, [0, _x_, [0, caml_call1(Base[117], lower_bound), 0]]], _aB_],
      _aD_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Float_uniform_exclusive_re),
          _aC_]];
     caml_call1(Base[217], _aD_);
    }
    return create
            (function(param, random){
              return caml_call3
                      (Splittable_random[8],
                       random,
                       lower_inclusive,
                       upper_inclusive);
             });
   }
   function float_inclusive(lower_bound, upper_bound){
    if(caml_call2(Base_Float[16], lower_bound, upper_bound))
     return caml_call1(For_monad[11][1], lower_bound);
    var _as_ = caml_call2(Base_Float[53], 19067, lower_bound);
    if(caml_call2(Base_Float[12], _as_, upper_bound)){
     var _at_ = [0, caml_call1(For_monad[11][1], upper_bound), 0];
     return union([0, caml_call1(For_monad[11][1], lower_bound), _at_]);
    }
    var
     _au_ =
       [0, [0, 0.9, float_uniform_exclusive(lower_bound, upper_bound)], 0],
     _av_ = [0, [0, 0.05, caml_call1(For_monad[11][1], upper_bound)], _au_];
    return weighted_union
            ([0, [0, 0.05, caml_call1(For_monad[11][1], lower_bound)], _av_]);
   }
   function string_with_length_of(char_gen, length){
    var _ar_ = list_with_length(char_gen, length);
    return map(_ar_, Base_String[133]);
   }
   function string_of(char_gen){
    return bind
            (small_positive_or_zero_int,
             function(length){return string_with_length_of(char_gen, length);});
   }
   function string_non_empty_of(char_gen){
    return bind
            (small_strictly_positive_int,
             function(length){return string_with_length_of(char_gen, length);});
   }
   var
    string = string_of(char$0),
    string_non_empty = string_non_empty_of(char$0);
   function string_with_length(length){
    return string_with_length_of(char$0, length);
   }
   function edit_insert(string){
    var _al_ = int_uniform_inclusive(0, caml_ml_string_length(string));
    return caml_call2
            (For_monad[11][4][2],
             _al_,
             function(pos){
              var _am_ = int_geometric(1, 0.5);
              return caml_call2
                      (For_monad[11][4][2],
                       _am_,
                       function(length){
                        var _an_ = string_with_length_of(char$0, length);
                        return caml_call2
                                (For_monad[11][4][2],
                                 _an_,
                                 function(str){
                                  var
                                   _ao_ =
                                     [0, str, [0, caml_call2(Base_String[120], string, pos), 0]],
                                   _ap_ = [0, caml_call2(Base_String[118], string, pos), _ao_],
                                   _aq_ = caml_call2(Base_String[67], 0, _ap_);
                                  return caml_call1(For_monad[11][1], _aq_);
                                 });
                       });
             });
   }
   function edit(string, n_times){
    if(0 >= n_times) return caml_call1(For_monad[11][1], string);
    function _Y_(string){return edit(string, n_times - 1 | 0);}
    if(caml_call1(Base_String[14], string))
     var _Z_ = edit_insert(string);
    else
     var
      _U_ = int_log_uniform_inclusive(1, caml_ml_string_length(string)),
      _V_ =
        [0,
         caml_call2
          (For_monad[11][4][2],
           _U_,
           function(len){
            var
             _ah_ =
               int_uniform_inclusive
                (0, caml_ml_string_length(string) - len | 0);
            return caml_call2
                    (For_monad[11][4][2],
                     _ah_,
                     function(pos){
                      var
                       _ai_ = [0, caml_call2(Base_String[120], string, pos), 0],
                       _aj_ =
                         [0,
                          caml_call2(Base_String[118], string, pos + len | 0),
                          _ai_],
                       _ak_ = caml_call2(Base_String[67], 0, _aj_);
                      return caml_call1(For_monad[11][1], _ak_);
                     });
           }),
         0],
      _T_ = int_log_uniform_inclusive(1, caml_ml_string_length(string)),
      _W_ =
        [0,
         caml_call2
          (For_monad[11][4][2],
           _T_,
           function(length){
            var
             _ac_ =
               int_uniform_inclusive
                (0, caml_ml_string_length(string) - length | 0);
            return caml_call2
                    (For_monad[11][4][2],
                     _ac_,
                     function(pos){
                      var _ad_ = string_with_length_of(char$0, length);
                      return caml_call2
                              (For_monad[11][4][2],
                               _ad_,
                               function(str){
                                var
                                 _ae_ =
                                   [0,
                                    str,
                                    [0,
                                     caml_call2(Base_String[120], string, pos + length | 0),
                                     0]],
                                 _af_ = [0, caml_call2(Base_String[118], string, pos), _ae_],
                                 _ag_ = caml_call2(Base_String[67], 0, _af_);
                                return caml_call1(For_monad[11][1], _ag_);
                               });
                     });
           }),
         _V_],
      _S_ = int_log_uniform_inclusive(1, caml_ml_string_length(string)),
      _X_ =
        [0,
         caml_call2
          (For_monad[11][4][2],
           _S_,
           function(len){
            var
             ___ =
               int_uniform_inclusive
                (0, caml_ml_string_length(string) - len | 0);
            return caml_call2
                    (For_monad[11][4][2],
                     ___,
                     function(pos){
                      var
                       _$_ =
                         [0, caml_call2(Base_String[120], string, pos + len | 0), 0],
                       _aa_ = [0, caml_call2(Base_String[118], string, pos), _$_],
                       _ab_ = caml_call2(Base_String[67], 0, _aa_);
                      return caml_call1(For_monad[11][1], _ab_);
                     });
           }),
         _W_],
      _Z_ = union([0, edit_insert(string), _X_]);
    return caml_call2(For_monad[11][4][2], _Z_, _Y_);
   }
   function string_like(string){
    var _R_ = int_geometric(0, 0.5);
    return caml_call2
            (For_monad[11][4][2],
             _R_,
             function(n_times){return edit(string, n_times);});
   }
   var bytes = map(string, Base_Bytes[26]);
   function sexp_of(atom){
    return fixed_point
            (function(self){
              return caml_call2
                      (For_monad[11][4][2],
                       size,
                       function(size){
                        var _P_ = For_int[3].call(null, 0, size + 1 | 0);
                        return caml_call2
                                (For_monad[11][4][2],
                                 _P_,
                                 function(param){
                                  if(0 === param)
                                   return caml_call2
                                           (For_monad[11][4][3],
                                            atom,
                                            function(atom){return [0, atom];});
                                  var _Q_ = list(self);
                                  return caml_call2
                                          (For_monad[11][4][3],
                                           _Q_,
                                           function(list){return [1, list];});
                                 });
                       });
             });
   }
   var sexp = sexp_of(string);
   function map_tree_using_comparator(comparator, key_gen, data_gen){
    var _L_ = list(key_gen);
    return caml_call2
            (For_monad[11][4][2],
             _L_,
             function(keys){
              var
               keys$0 = caml_call2(Base_List[124], keys, comparator[1]),
               _M_ =
                 list_with_length(data_gen, caml_call1(Base_List[17], keys$0));
              return caml_call2
                      (For_monad[11][4][2],
                       _M_,
                       function(data){
                        var
                         _N_ = caml_call2(Base_List[108], keys$0, data),
                         _O_ = caml_call2(Base_Map[112][3][13], comparator, _N_);
                        return caml_call1(For_monad[11][1], _O_);
                       });
             });
   }
   function set_tree_using_comparator(comparator, elt_gen){
    var _K_ = caml_call1(Base_Set[76][3][56], comparator);
    return map(list(elt_gen), _K_);
   }
   function map_t_m(m, key_gen, data_gen){
    var
     comparator = m[1],
     _J_ = map_tree_using_comparator(comparator, key_gen, data_gen);
    return map(_J_, caml_call1(Base_Map[112][31], comparator));
   }
   function set_t_m(m, elt_gen){
    var
     comparator = m[1],
     _I_ = set_tree_using_comparator(comparator, elt_gen);
    return map(_I_, caml_call1(Base_Set[76][66], comparator));
   }
   function bigarray1(t, kind, layout){
    var _G_ = list(t);
    return caml_call2
            (For_monad[11][4][3],
             _G_,
             function(elts){
              var
               elts$0 = caml_call1(Base_Array[8], elts),
               dim = elts$0.length - 1,
               offset =
                 caml_call1(Base_quickcheck_Bigarray_helpe[1][1], layout);
              return caml_call4
                      (Base_quickcheck_Bigarray_helpe[2][2],
                       kind,
                       layout,
                       dim,
                       function(i){
                        var _H_ = i - offset | 0;
                        return caml_check_bound(elts$0, _H_)[1 + _H_];
                       });
             });
   }
   var
    bigstring = bigarray1(char$0, 12, 0),
    float32_vec = bigarray1(float$0, 0, 1),
    float64_vec = bigarray1(float$0, 1, 1),
    _y_ = [0, 0, 0],
    bigarray2_dim =
      caml_call2
       (For_monad[11][4][2],
        size,
        function(max_total_size){
         if(0 === max_total_size) return caml_call1(For_monad[11][1], _y_);
         var _D_ = int_log_uniform_inclusive(1, max_total_size);
         return caml_call2
                 (For_monad[11][4][2],
                  _D_,
                  function(a){
                   var
                    max_b = caml_div(max_total_size, a),
                    _E_ = int_log_uniform_inclusive(0, max_b),
                    _F_ =
                      caml_call2
                       (For_monad[11][4][3],
                        _E_,
                        function(b_weighted_low){return max_b - b_weighted_low | 0;});
                   return caml_call2
                           (For_monad[11][4][2],
                            _F_,
                            function(b){
                             return caml_call2
                                     (For_monad[11][4][3],
                                      bool,
                                      function(param){return param ? [0, a, b] : [0, b, a];});
                            });
                  });
        });
   function bigarray2(t, kind, layout){
    return caml_call2
            (For_monad[11][4][2],
             bigarray2_dim,
             function(param){
              var
               dim2 = param[2],
               dim1 = param[1],
               _A_ = list_with_length(list_with_length(t, dim2), dim1);
              return caml_call2
                      (For_monad[11][4][3],
                       _A_,
                       function(elts){
                        var
                         elts$0 = caml_call2(Base_Array[84], elts, Base_Array[8]),
                         offset =
                           caml_call1(Base_quickcheck_Bigarray_helpe[1][1], layout);
                        return caml_call5
                                (Base_quickcheck_Bigarray_helpe[3][2],
                                 kind,
                                 layout,
                                 dim1,
                                 dim2,
                                 function(i, j){
                                  var _B_ = j - offset | 0, _C_ = i - offset | 0;
                                  return caml_check_bound
                                           (caml_check_bound(elts$0, _C_)[1 + _C_], _B_)
                                          [1 + _B_];
                                 });
                       });
             });
   }
   var
    float32_mat = bigarray2(float$0, 0, 1),
    float64_mat = bigarray2(float$0, 1, 1);
   function coverage(Cmp, sample){
    var _z_ = caml_call1(Base_Map[6], Cmp);
    return caml_call3
            (Base_Sequence[8],
             sample,
             _z_,
             function(counts, value){
              return caml_call3
                      (Base_Map[39],
                       counts,
                       value,
                       function(param){
                        if(! param) return 1;
                        var prev = param[1];
                        return prev + 1 | 0;
                       });
             });
   }
   function monitor(t, f){
    return map(t, function(value){caml_call1(f, value); return value;});
   }
   var
    Debug = [0, coverage, monitor],
    Base_quickcheck_Generator =
      [0,
       unit,
       bool,
       char$0,
       string,
       bytes,
       int$0,
       int32,
       int63,
       int64,
       nativeint,
       float$0,
       sexp,
       option,
       list,
       array,
       ref,
       lazy_t,
       either,
       result,
       bigstring,
       float32_vec,
       float64_vec,
       float32_mat,
       float64_mat,
       fn,
       map_t_m,
       set_t_m,
       map_tree_using_comparator,
       set_tree_using_comparator,
       of_list,
       union,
       both,
       symbol,
       symbol$0,
       symbol$1,
       apply,
       map2,
       map3,
       For_applicative[13],
       symbol_bind,
       symbol_map,
       For_monad[3],
       bind,
       return$0,
       map,
       join,
       ignore_m,
       all,
       all_unit,
       For_monad[11],
       size,
       with_size,
       sizes,
       filter,
       filter_map,
       recursive_union,
       fixed_point,
       of_lazy,
       of_weighted_list,
       weighted_union,
       weighted_recursive_union,
       small_positive_or_zero_int,
       small_strictly_positive_int,
       int_uniform,
       int32_uniform,
       int63_uniform,
       int64_uniform,
       nativeint_uniform,
       int_inclusive,
       int32_inclusive,
       int63_inclusive,
       int64_inclusive,
       nativeint_inclusive,
       int_uniform_inclusive,
       int32_uniform_inclusive,
       int63_uniform_inclusive,
       int64_uniform_inclusive,
       nativeint_uniform_inclusive,
       int_log_uniform_inclusive,
       int32_log_uniform_inclusive,
       int63_log_uniform_inclusive,
       int64_log_uniform_inclusive,
       nativeint_log_uniform_inclusiv,
       int_log_inclusive,
       int32_log_inclusive,
       int63_log_inclusive,
       int64_log_inclusive,
       nativeint_log_inclusive,
       int_geometric,
       int32_geometric,
       int63_geometric,
       int64_geometric,
       nativeint_geometric,
       float_inclusive,
       float_uniform_exclusive,
       float_without_nan,
       float_finite,
       float_strictly_positive,
       float_strictly_negative,
       float_positive_or_zero,
       float_negative_or_zero,
       float_of_class,
       char_lowercase,
       char_uppercase,
       char_digit,
       char_alpha,
       char_alphanum,
       char_whitespace,
       char_print,
       char_uniform_inclusive,
       string_non_empty,
       string_with_length,
       string_of,
       string_non_empty_of,
       string_with_length_of,
       string_like,
       sexp_of,
       list_non_empty,
       list_with_length,
       list_filtered,
       list_permutations,
       perturb,
       create,
       generate,
       Debug];
   runtime.caml_register_global
    (88, Base_quickcheck_Generator, "Base_quickcheck__Generator");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__Shrinker
//# unitInfo: Requires: Base__Array, Base__Bytes, Base__Either, Base__Field, Base__Int, Base__Lazy, Base__List, Base__Map, Base__Option, Base__Sequence, Base__Set, Base__String, Base_quickcheck__Bigarray_helpers, CamlinternalLazy, Stdlib__Bigarray
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_kind = runtime.caml_ba_kind,
    caml_ba_layout = runtime.caml_ba_layout,
    caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Set = global_data.Base__Set,
    Base_Map = global_data.Base__Map,
    Base_Sequence = global_data.Base__Sequence,
    Base_List = global_data.Base__List,
    Base_Either = global_data.Base__Either,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Lazy = global_data.Base__Lazy,
    Base_Array = global_data.Base__Array,
    Base_Option = global_data.Base__Option,
    Base_Field = global_data.Base__Field,
    Base_quickcheck_Bigarray_helpe =
      global_data.Base_quickcheck__Bigarray_helpers,
    Base_Int = global_data.Base__Int,
    Base_String = global_data.Base__String,
    Base_Bytes = global_data.Base__Bytes;
   function atomic(param){return Base_Sequence[38];}
   function create(_X_){return _X_;}
   function shrink(_W_){return _W_;}
   function map(t, f, f_inverse){
    return function(x){
     var _V_ = caml_call1(t, caml_call1(f_inverse, x));
     return caml_call2(Base_Sequence[32], _V_, f);};
   }
   function filter(t, f){
    return function(x){
     var _U_ = caml_call1(t, x);
     return caml_call2(Base_Sequence[51], _U_, f);};
   }
   function filter_map(t, f, f_inverse){
    return function(x){
     var _T_ = caml_call1(t, caml_call1(f_inverse, x));
     return caml_call2(Base_Sequence[78], _T_, f);};
   }
   function of_lazy(lazy_t){
    return function(x){
     return caml_call1
             (Base_Sequence[105],
              [246,
               function(_Q_){
                var _R_ = caml_obj_tag(lazy_t);
                a:
                if(250 === _R_)
                 var _S_ = lazy_t[1];
                else{
                 if(246 !== _R_ && 244 !== _R_){var _S_ = lazy_t; break a;}
                 var _S_ = caml_call1(CamlinternalLazy[2], lazy_t);
                }
                return caml_call1(_S_, x);
               }]);};
   }
   function fixed_point(of_shrinker){
    var lazy_t = [];
    runtime.caml_update_dummy
     (lazy_t,
      [246, function(param){return caml_call1(of_shrinker, of_lazy(lazy_t));}]);
    return of_lazy(lazy_t);
   }
   function both(fst_t, snd_t){
    return function(param){
     var
      snd = param[2],
      fst = param[1],
      _M_ = caml_call1(snd_t, snd),
      _N_ =
        [0,
         caml_call2
          (Base_Sequence[32], _M_, function(snd){return [0, fst, snd];}),
         0],
      _O_ = caml_call1(fst_t, fst),
      _P_ =
        [0,
         caml_call2
          (Base_Sequence[32], _O_, function(fst){return [0, fst, snd];}),
         _N_];
     return caml_call1(Base_Sequence[68], _P_);};
   }
   function float32_vec(src){
    var dim = caml_ba_dim_1(src);
    if(0 === dim) return Base_Sequence[38];
    var
     kind = caml_ba_kind(src),
     layout = caml_ba_layout(src),
     offset = caml_call1(Base_quickcheck_Bigarray_helpe[1][1], layout);
    return caml_call2
            (Base_Sequence[77],
             dim,
             function(to_skip){
              var to_skip$0 = to_skip + offset | 0;
              return caml_call4
                      (Base_quickcheck_Bigarray_helpe[2][2],
                       kind,
                       layout,
                       dim - 1 | 0,
                       function(i){
                        var i$0 = i < to_skip$0 ? i : i + 1 | 0;
                        return runtime.caml_ba_get_1(src, i$0);
                       });
             });
   }
   function dim2(r){return r[2];}
   function dim1(r){return r[1];}
   var
    dim2$0 =
      [0,
       function(param){return 0;},
       "dim2",
       0,
       dim2,
       function(r, v){return [0, r[1], v];}],
    dim1$0 =
      [0,
       function(param){return 0;},
       "dim1",
       0,
       dim1,
       function(r, v){return [0, v, r[2]];}];
   function shrink$0(field, src){
    var _K_ = runtime.caml_ba_dim_2(src), dims = [0, caml_ba_dim_1(src), _K_];
    if(0 === caml_call2(Base_Field[3], field, dims)) return Base_Sequence[38];
    var
     kind = caml_ba_kind(src),
     layout = caml_ba_layout(src),
     offset = caml_call1(Base_quickcheck_Bigarray_helpe[1][1], layout),
     match = caml_call3(Base_Field[6], field, dims, Base_Int[43]),
     dim2 = match[2],
     dim1 = match[1],
     _L_ = caml_call2(Base_Field[3], field, dims);
    return caml_call2
            (Base_Sequence[77],
             _L_,
             function(to_skip){
              var to_skip$0 = to_skip + offset | 0;
              function skip(i){return i < to_skip$0 ? i : i + 1 | 0;}
              return caml_call5
                      (Base_quickcheck_Bigarray_helpe[3][2],
                       kind,
                       layout,
                       dim1,
                       dim2,
                       function(dim1, dim2){
                        var
                         match =
                           caml_call3(Base_Field[6], field, [0, dim1, dim2], skip),
                         dim2$0 = match[2],
                         dim1$0 = match[1];
                        return runtime.caml_ba_get_2(src, dim1$0, dim2$0);
                       });
             });
   }
   function float32_mat(src){
    var
     _I_ = [0, shrink$0(dim2$0, src), 0],
     _J_ = [0, shrink$0(dim1$0, src), _I_];
    return caml_call1(Base_Sequence[68], _J_);
   }
   function option(value_t){
    return function(param){
     if(! param) return Base_Sequence[38];
     var
      value = param[1],
      _E_ = Base_Option[21],
      _F_ = caml_call1(value_t, value),
      _G_ = caml_call2(Base_Sequence[32], _F_, _E_),
      _H_ = caml_call1(Base_Sequence[99], 0);
     return caml_call2(Base_Sequence[63], _H_, _G_);};
   }
   function list(elt_t){
    return fixed_point
            (function(list_t){
              return function(param){
               if(! param) return Base_Sequence[38];
               var
                tail = param[2],
                head = param[1],
                _z_ = caml_call1(list_t, tail),
                _A_ =
                  [0,
                   caml_call2
                    (Base_Sequence[32],
                     _z_,
                     function(tail){return [0, head, tail];}),
                   0],
                _B_ = caml_call1(elt_t, head),
                _C_ =
                  [0,
                   caml_call2
                    (Base_Sequence[32],
                     _B_,
                     function(head){return [0, head, tail];}),
                   _A_],
                _D_ = [0, caml_call1(Base_Sequence[99], tail), _C_];
               return caml_call1(Base_Sequence[68], _D_);};
             });
   }
   var
    _a_ = Base_String[25],
    _b_ = Base_String[133],
    string = map(list(atomic), _b_, _a_),
    bytes = map(string, Base_Bytes[26], Base_Bytes[27]);
   function array(t){
    var _x_ = Base_Array[29], _y_ = Base_Array[8];
    return map(list(t), _y_, _x_);
   }
   function ref(t){
    return map
            (t,
             function(_w_){return [0, _w_];},
             function(_v_){return _v_[1];});
   }
   function lazy_t(t){
    return map
            (t,
             Base_Lazy[21],
             function(_t_){
              var _u_ = caml_obj_tag(_t_);
              if(250 === _u_) return _t_[1];
              if(246 !== _u_ && 244 !== _u_) return _t_;
              return caml_call1(CamlinternalLazy[2], _t_);
             });
   }
   var
    sexp =
      fixed_point
       (function(shrinker){
         return function(param){
          if(0 === param[0]) return Base_Sequence[38];
          var
           l = param[1],
           _s_ = list(shrinker)(l),
           shrink_list =
             caml_call2(Base_Sequence[32], _s_, function(l){return [1, l];}),
           shrink_tree = caml_call1(Base_Sequence[104], l);
          return caml_call1
                  (Base_Sequence[68], [0, shrink_list, [0, shrink_tree, 0]]);};
        });
   function either(fst_t, snd_t){
    return function(either){
     if(0 === either[0]){
      var
       fst = either[1],
       _o_ = Base_Either[17],
       _p_ = caml_call1(fst_t, fst);
      return caml_call2(Base_Sequence[32], _p_, _o_);
     }
     var snd = either[1], _q_ = Base_Either[18], _r_ = caml_call1(snd_t, snd);
     return caml_call2(Base_Sequence[32], _r_, _q_);};
   }
   function result(ok_t, err_t){
    return map
            (either(ok_t, err_t),
             function(param){
              if(0 === param[0]){var ok = param[1]; return [0, ok];}
              var err = param[1];
              return [1, err];
             },
             function(param){
              if(0 === param[0]){var ok = param[1]; return [0, ok];}
              var err = param[1];
              return [1, err];
             });
   }
   function map_tree_using_comparator(comparator, key_t, data_t){
    return function(tree){
     var
      alist = caml_call2(Base_Map[112][3][71], 0, tree),
      _j_ = caml_call1(Base_Sequence[104], alist),
      drop_keys =
        caml_call2
         (Base_Sequence[32],
          _j_,
          function(param){
           var k = param[1];
           return caml_call3(Base_Map[112][3][44], comparator, tree, k);
          }),
      _k_ =
        caml_call2
         (Base_List[52],
          alist,
          function(param){
           var
            data = param[2],
            key = param[1],
            tree$0 = caml_call3(Base_Map[112][3][44], comparator, tree, key),
            _n_ = caml_call1(key_t, key);
           return caml_call2
                   (Base_Sequence[78],
                    _n_,
                    function(smaller_key){
                     var
                      match =
                        caml_call4
                         (Base_Map[112][3][34],
                          comparator,
                          tree$0,
                          smaller_key,
                          data);
                     if(typeof match === "number") return 0;
                     var tree = match[2];
                     return [0, tree];
                    });
          }),
      shrink_keys = caml_call1(Base_Sequence[68], _k_),
      _l_ =
        caml_call2
         (Base_List[52],
          alist,
          function(param){
           var
            data = param[2],
            key = param[1],
            _m_ = caml_call1(data_t, data);
           return caml_call2
                   (Base_Sequence[32],
                    _m_,
                    function(smaller_data){
                     return caml_call4
                             (Base_Map[112][3][36], comparator, tree, key, smaller_data);
                    });
          }),
      shrink_data = caml_call1(Base_Sequence[68], _l_);
     return caml_call1
             (Base_Sequence[68],
              [0, drop_keys, [0, shrink_keys, [0, shrink_data, 0]]]);};
   }
   function set_tree_using_comparator(comparator, elt_t){
    return function(tree){
     var
      list = caml_call1(Base_Set[76][3][14], tree),
      _g_ = caml_call1(Base_Sequence[104], list),
      drop_elts =
        caml_call2
         (Base_Sequence[32],
          _g_,
          function(elt){
           return caml_call3(Base_Set[76][3][19], comparator, tree, elt);
          }),
      _h_ =
        caml_call2
         (Base_List[52],
          list,
          function(elt){
           var
            tree$0 = caml_call3(Base_Set[76][3][19], comparator, tree, elt),
            _i_ = caml_call1(elt_t, elt);
           return caml_call2
                   (Base_Sequence[78],
                    _i_,
                    function(smaller_elt){
                     return caml_call3
                              (Base_Set[76][3][17], comparator, tree$0, smaller_elt)
                             ? 0
                             : [0,
                               caml_call3
                                (Base_Set[76][3][18], comparator, tree$0, smaller_elt)];
                    });
          }),
      shrink_elts = caml_call1(Base_Sequence[68], _h_);
     return caml_call1(Base_Sequence[68], [0, drop_elts, [0, shrink_elts, 0]]);};
   }
   function map_t(key_t, data_t){
    return function(map_t){
     var
      comparator = caml_call1(Base_Map[5], map_t),
      _e_ = Base_Map[112][98],
      _f_ = caml_call1(Base_Map[112][31], comparator),
      t = map(map_tree_using_comparator(comparator, key_t, data_t), _f_, _e_);
     return t(map_t);};
   }
   function set_t(elt_t){
    return function(set_t){
     var
      comparator = caml_call1(Base_Set[4], set_t),
      _c_ = Base_Set[76][49],
      _d_ = caml_call1(Base_Set[76][66], comparator),
      t = map(set_tree_using_comparator(comparator, elt_t), _d_, _c_);
     return t(set_t);};
   }
   var
    Base_quickcheck_Shrinker =
      [0,
       atomic,
       atomic,
       atomic,
       atomic,
       string,
       bytes,
       atomic,
       atomic,
       atomic,
       atomic,
       atomic,
       atomic,
       sexp,
       option,
       list,
       array,
       ref,
       lazy_t,
       both,
       either,
       result,
       float32_vec,
       float32_vec,
       float32_vec,
       float32_mat,
       float32_mat,
       map_t,
       set_t,
       map_tree_using_comparator,
       set_tree_using_comparator,
       map,
       filter,
       filter_map,
       fixed_point,
       of_lazy,
       create,
       shrink];
   runtime.caml_register_global
    (17, Base_quickcheck_Shrinker, "Base_quickcheck__Shrinker");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__Test_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Base_quickcheck_Test_intf = [0];
   runtime.caml_register_global
    (0, Base_quickcheck_Test_intf, "Base_quickcheck__Test_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__Test
//# unitInfo: Requires: Base, Base__Backtrace, Base__Error, Base__Field, Base__List, Base__Or_error, Base__Random, Base__Sequence, Base__String, Base__Word_size, Base_quickcheck__Generator, Base_quickcheck__Shrinker, Base_quickcheck__Test_intf, CamlinternalLazy, Sexplib0__Sexp_conv, Splittable_random
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_seed = "seed",
    cst_shrink_count = "shrink_count",
    cst_sizes = "sizes",
    cst_test_count = "test_count";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "...",
    names =
      [0,
       cst_seed,
       [0, cst_test_count, [0, cst_shrink_count, [0, cst_sizes, 0]]]],
    Base_Backtrace = global_data.Base__Backtrace,
    Base_Or_error = global_data.Base__Or_error,
    Base_Error = global_data.Base__Error,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_Sequence = global_data.Base__Sequence,
    Base_quickcheck_Generator = global_data.Base_quickcheck__Generator,
    Base_quickcheck_Shrinker = global_data.Base_quickcheck__Shrinker,
    Base = global_data.Base,
    Splittable_random = global_data.Splittable_random,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Random = global_data.Base__Random,
    Base_Field = global_data.Base__Field,
    Base_List = global_data.Base__List,
    Base_Word_size = global_data.Base__Word_size,
    _a_ = [0, "Deterministic"],
    _b_ = [0, "Nondeterministic"];
   function sexp_of_t(param){
    if(! param) return _b_;
    var arg0_001 = param[1], res0_002 = caml_call1(Base[177], arg0_001);
    return [1, [0, _a_, [0, res0_002, 0]]];
   }
   var Seed = [0, sexp_of_t];
   function sizes(r){return r[4];}
   function shrink_count(r){return r[3];}
   function test_count(r){return r[2];}
   function seed(r){return r[1];}
   var
    sizes$0 =
      [0,
       function(param){return 0;},
       cst_sizes,
       0,
       sizes,
       function(r, v){return [0, r[1], r[2], r[3], v];}],
    shrink_count$0 =
      [0,
       function(param){return 0;},
       cst_shrink_count,
       0,
       shrink_count,
       function(r, v){return [0, r[1], r[2], v, r[4]];}],
    test_count$0 =
      [0,
       function(param){return 0;},
       cst_test_count,
       0,
       test_count,
       function(r, v){return [0, r[1], v, r[3], r[4]];}],
    seed$0 =
      [0,
       function(param){return 0;},
       cst_seed,
       0,
       seed,
       function(r, v){return [0, v, r[2], r[3], r[4]];}];
   function make_creator
   (seed_fun, test_count_fun, shrink_count_fun, sizes_fun, compile_acc){
    var
     match = caml_call2(seed_fun, seed$0, compile_acc),
     compile_acc$0 = match[2],
     seed_gen = match[1],
     match$0 = caml_call2(test_count_fun, test_count$0, compile_acc$0),
     compile_acc$1 = match$0[2],
     test_count_gen = match$0[1],
     match$1 = caml_call2(shrink_count_fun, shrink_count$0, compile_acc$1),
     compile_acc$2 = match$1[2],
     shrink_count_gen = match$1[1],
     match$2 = caml_call2(sizes_fun, sizes$0, compile_acc$2),
     compile_acc$3 = match$2[2],
     sizes_gen = match$2[1];
    return [0,
            function(acc){
             var
              seed = caml_call1(seed_gen, acc),
              test_count = caml_call1(test_count_gen, acc),
              shrink_count = caml_call1(shrink_count_gen, acc),
              sizes = caml_call1(sizes_gen, acc);
             return [0, seed, test_count, shrink_count, sizes];
            },
            compile_acc$3];
   }
   function create(seed, test_count, shrink_count, sizes){return [0, seed, test_count, shrink_count, sizes];
   }
   function map(seed_fun, test_count_fun, shrink_count_fun, sizes_fun){
    var
     _ak_ = caml_call1(sizes_fun, sizes$0),
     _al_ = caml_call1(shrink_count_fun, shrink_count$0),
     _am_ = caml_call1(test_count_fun, test_count$0);
    return [0, caml_call1(seed_fun, seed$0), _am_, _al_, _ak_];
   }
   function iter(seed_fun, test_count_fun, shrink_count_fun, sizes_fun){
    caml_call1(seed_fun, seed$0);
    caml_call1(test_count_fun, test_count$0);
    caml_call1(shrink_count_fun, shrink_count$0);
    return caml_call1(sizes_fun, sizes$0);
   }
   function fold(init, seed_fun, test_count_fun, shrink_count_fun, sizes_fun){
    return caml_call2
            (sizes_fun,
             caml_call2
              (shrink_count_fun,
               caml_call2
                (test_count_fun,
                 caml_call2(seed_fun, init, seed$0),
                 test_count$0),
               shrink_count$0),
             sizes$0);
   }
   function map_poly(record){
    var
     _ah_ = [0, caml_call1(record[1], sizes$0), 0],
     _ai_ = [0, caml_call1(record[1], shrink_count$0), _ah_],
     _aj_ = [0, caml_call1(record[1], test_count$0), _ai_];
    return [0, caml_call1(record[1], seed$0), _aj_];
   }
   function for_all(seed_fun, test_count_fun, shrink_count_fun, sizes_fun){
    var
     _ae_ = caml_call1(seed_fun, seed$0),
     _af_ = _ae_ ? caml_call1(test_count_fun, test_count$0) : _ae_,
     _ag_ = _af_ ? caml_call1(shrink_count_fun, shrink_count$0) : _af_;
    return _ag_ ? caml_call1(sizes_fun, sizes$0) : _ag_;
   }
   function exists(seed_fun, test_count_fun, shrink_count_fun, sizes_fun){
    var
     _ad_ = caml_call1(seed_fun, seed$0),
     _ab_ = _ad_ || caml_call1(test_count_fun, test_count$0),
     _ac_ = _ab_ || caml_call1(shrink_count_fun, shrink_count$0);
    return _ac_ ? _ac_ : caml_call1(sizes_fun, sizes$0);
   }
   function to_list(seed_fun, test_count_fun, shrink_count_fun, sizes_fun){
    var
     ___ = [0, caml_call1(sizes_fun, sizes$0), 0],
     _$_ = [0, caml_call1(shrink_count_fun, shrink_count$0), ___],
     _aa_ = [0, caml_call1(test_count_fun, test_count$0), _$_];
    return [0, caml_call1(seed_fun, seed$0), _aa_];
   }
   function iter$0
   (record, seed_fun, test_count_fun, shrink_count_fun, sizes_fun){
    caml_call3(seed_fun, seed$0, record, record[1]);
    caml_call3(test_count_fun, test_count$0, record, record[2]);
    caml_call3(shrink_count_fun, shrink_count$0, record, record[3]);
    return caml_call3(sizes_fun, sizes$0, record, record[4]);
   }
   function fold$0
   (record, init, seed_fun, test_count_fun, shrink_count_fun, sizes_fun){
    var _X_ = record[4], _Y_ = record[3], _Z_ = record[2];
    return caml_call4
            (sizes_fun,
             caml_call4
              (shrink_count_fun,
               caml_call4
                (test_count_fun,
                 caml_call4(seed_fun, init, seed$0, record, record[1]),
                 test_count$0,
                 record,
                 _Z_),
               shrink_count$0,
               record,
               _Y_),
             sizes$0,
             record,
             _X_);
   }
   function for_all$0
   (record, seed_fun, test_count_fun, shrink_count_fun, sizes_fun){
    var
     _U_ = caml_call3(seed_fun, seed$0, record, record[1]),
     _V_ =
       _U_ ? caml_call3(test_count_fun, test_count$0, record, record[2]) : _U_,
     _W_ =
       _V_
        ? caml_call3(shrink_count_fun, shrink_count$0, record, record[3])
        : _V_;
    return _W_ ? caml_call3(sizes_fun, sizes$0, record, record[4]) : _W_;
   }
   function exists$0
   (record, seed_fun, test_count_fun, shrink_count_fun, sizes_fun){
    var
     _T_ = caml_call3(seed_fun, seed$0, record, record[1]),
     _R_ = _T_ || caml_call3(test_count_fun, test_count$0, record, record[2]),
     _S_ =
       _R_ || caml_call3(shrink_count_fun, shrink_count$0, record, record[3]);
    return _S_ ? _S_ : caml_call3(sizes_fun, sizes$0, record, record[4]);
   }
   function to_list$0
   (record, seed_fun, test_count_fun, shrink_count_fun, sizes_fun){
    var
     _O_ = [0, caml_call3(sizes_fun, sizes$0, record, record[4]), 0],
     _P_ =
       [0,
        caml_call3(shrink_count_fun, shrink_count$0, record, record[3]),
        _O_],
     _Q_ =
       [0, caml_call3(test_count_fun, test_count$0, record, record[2]), _P_];
    return [0, caml_call3(seed_fun, seed$0, record, record[1]), _Q_];
   }
   function map$0
   (record, seed_fun, test_count_fun, shrink_count_fun, sizes_fun){
    var
     _L_ = caml_call3(sizes_fun, sizes$0, record, record[4]),
     _M_ = caml_call3(shrink_count_fun, shrink_count$0, record, record[3]),
     _N_ = caml_call3(test_count_fun, test_count$0, record, record[2]);
    return [0, caml_call3(seed_fun, seed$0, record, record[1]), _N_, _M_, _L_];
   }
   function set_all_mutable_fields(record){
    caml_call1(Base_Field[1][1], record);
    return 0;
   }
   var
    Direct =
      [0,
       iter$0,
       fold$0,
       for_all$0,
       exists$0,
       to_list$0,
       map$0,
       set_all_mutable_fields],
    _c_ = [0, cst_sizes],
    _d_ = [0, cst_shrink_count],
    _e_ = [0, cst_test_count],
    _f_ = [0, cst_seed];
   function sexp_of_t$0(param){
    var
     sizes_010 = param[4],
     shrink_count_008 = param[3],
     test_count_006 = param[2],
     seed_004 = param[1],
     sexp_of_elt = Base[125],
     match = caml_call2(Base_Sequence[88], sizes_010, 100),
     suffix = match[2],
     prefix = match[1],
     prefix$0 = caml_call2(Base_List[52], prefix, sexp_of_elt),
     bnds_003 = 0,
     suffix$0 =
       caml_call1(Base_Sequence[6], suffix)
        ? 0
        : [0, caml_call1(Sexplib0_Sexp_conv[7], cst), 0],
     arg_011 = [1, caml_call2(Base[193], prefix$0, suffix$0)],
     bnds_003$0 = [0, [1, [0, _c_, [0, arg_011, 0]]], bnds_003],
     arg_009 = caml_call1(Base[125], shrink_count_008),
     bnds_003$1 = [0, [1, [0, _d_, [0, arg_009, 0]]], bnds_003$0],
     arg_007 = caml_call1(Base[125], test_count_006),
     bnds_003$2 = [0, [1, [0, _e_, [0, arg_007, 0]]], bnds_003$1],
     arg_005 = caml_call1(Seed[1], seed_004),
     bnds_003$3 = [0, [1, [0, _f_, [0, arg_005, 0]]], bnds_003$2];
    return [1, bnds_003$3];
   }
   var
    _g_ = caml_call5(Base_List[129], 0, [0, 104758188], [0, 104758188], 0, 30),
    _h_ = caml_call1(Base_Sequence[97], _g_),
    _p_ = [0, 0],
    _q_ = [0, "error"],
    _r_ = [0, "input"],
    cst_Base_quickcheck_Test_run_t = "Base_quickcheck.Test.run: test failed",
    _n_ = [0, 0],
    _o_ = [0, 0],
    _l_ = [0, "number_of_size_values"],
    _m_ = [0, cst_test_count],
    cst_Base_quickcheck_Test_run_i =
      "Base_quickcheck.Test.run: insufficient size values for test count",
    _k_ = [0, "an arbitrary but deterministic string"],
    _i_ = 10000,
    _j_ = Base_Word_size[3] ? 10000 : 1000,
    default_config = [0, _k_, _j_, _i_, _h_],
    lazy_nondeterministic_state =
      [246, function(_K_){return caml_call2(Base_Random[18][3], 0, 0);}];
   function with_sample(f, _G_, opt, generator){
    var
     config = _G_ ? _G_[1] : default_config,
     examples = opt ? opt[1] : 0,
     match = config[1];
    if(match)
     var
      string = match[1],
      _A_ = runtime.Base_hash_string(string),
      random = caml_call1(Splittable_random[1][2], _A_);
    else{
     var _B_ = runtime.caml_obj_tag(lazy_nondeterministic_state);
     a:
     if(250 === _B_)
      var _C_ = lazy_nondeterministic_state[1];
     else{
      if(246 !== _B_ && 244 !== _B_){
       var _C_ = lazy_nondeterministic_state;
       break a;
      }
      var _C_ = caml_call1(CamlinternalLazy[2], lazy_nondeterministic_state);
     }
     var random = caml_call1(Splittable_random[1][1], _C_);
    }
    var
     _D_ =
       caml_call2
        (Base_Sequence[42],
         [0, config[4], 0],
         function(param){
          var number_of_size_values = param[2], sizes = param[1];
          if(config[2] <= number_of_size_values) return 0;
          var match = caml_call1(Base_Sequence[39], sizes);
          if(match){
           var
            match$0 = match[1],
            remaining_sizes = match$0[2],
            size = match$0[1];
           return [0,
                   [0,
                    size,
                    [0, remaining_sizes, number_of_size_values + 1 | 0]]];
          }
          var
           _H_ =
             [0,
              [1,
               [0, _l_, [0, caml_call1(Base[125], number_of_size_values), 0]]],
              0],
           _I_ =
             [0, [1, [0, _m_, [0, caml_call1(Base[125], config[2]), 0]]], _H_],
           _J_ =
             [1,
              [0,
               caml_call1
                (Sexplib0_Sexp_conv[7], cst_Base_quickcheck_Test_run_i),
               _I_]];
          return caml_call1(Base[217], _J_);
         }),
     _E_ =
       caml_call2
        (Base_Sequence[32],
         _D_,
         function(size){
          return caml_call3
                  (Base_quickcheck_Generator[124], generator, size, random);
         }),
     _F_ = caml_call1(Base_Sequence[104], examples),
     sequence = caml_call2(Base_Sequence[63], _F_, _E_);
    return caml_call1(f, sequence);
   }
   function result(f, _z_, opt, m){
    var config = _z_ ? _z_[1] : default_config, examples = opt ? opt[1] : 0;
    return with_sample
            (function(sequence){
              var
               match$2 =
                 caml_call3
                  (Base_Sequence[9],
                   sequence,
                   0,
                   function(param, input){
                    var match = caml_call1(f, input);
                    if(0 === match[0]) return _n_;
                    var error = match[1];
                    return [1, [0, input, error]];
                   });
              if(0 === match$2[0]) return _o_;
              var
               match$3 = match$2[1],
               error$1 = match$3[2],
               input$0 = match$3[1],
               shrinker = m[3],
               shrink_count$1 = config[3],
               alternates$2 =
                 caml_call2(Base_quickcheck_Shrinker[37], shrinker, input$0),
               shrink_count = shrink_count$1,
               alternates = alternates$2,
               input = input$0,
               error = error$1;
              for(;;){
               if(0 !== shrink_count){
                var
                 shrink_count$0 = shrink_count - 1 | 0,
                 match = caml_call1(Base_Sequence[39], alternates);
                if(match){
                 var
                  match$0 = match[1],
                  alternates$0 = match$0[2],
                  alternate = match$0[1],
                  match$1 = caml_call1(f, alternate);
                 if(0 === match$1[0]){
                  shrink_count = shrink_count$0;
                  alternates = alternates$0;
                  continue;
                 }
                 var
                  error$0 = match$1[1],
                  alternates$1 =
                    caml_call2
                     (Base_quickcheck_Shrinker[37], shrinker, alternate);
                 shrink_count = shrink_count$0;
                 alternates = alternates$1;
                 input = alternate;
                 error = error$0;
                 continue;
                }
               }
               return [1, [0, input, error]];
              }
             },
             [0, config],
             [0, examples],
             m[2]);
   }
   function run(f, config, examples, M){
    function f$0(x){
     var _y_ = [0, caml_call1(Base_Backtrace[6][1], 0)];
     return caml_call2
             (Base_Or_error[29],
              _y_,
              function(param){return caml_call1(f, x);});
    }
    var match = result(f$0, config, examples, M);
    if(0 === match[0]) return _p_;
    var
     match$0 = match[1],
     error = match$0[2],
     input = match$0[1],
     _v_ = [0, [1, [0, _q_, [0, caml_call1(Base_Error[6], error), 0]]], 0],
     _w_ = [0, [1, [0, _r_, [0, caml_call1(M[1], input), 0]]], _v_],
     _x_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Base_quickcheck_Test_run_t),
         _w_]];
    return caml_call1(Base_Or_error[35], _x_);
   }
   function with_sample_exn(f, config, examples, generator){
    function f$0(x){
     return caml_call2
             (Base_Or_error[28], 0, function(param){return caml_call1(f, x);});
    }
    var _u_ = with_sample(f$0, config, examples, generator);
    return caml_call1(Base_Or_error[31], _u_);
   }
   function run_exn(f, config, examples, testable){
    function f$0(x){
     var _t_ = [0, caml_call1(Base_Backtrace[6][1], 0)];
     return caml_call2
             (Base_Or_error[28],
              _t_,
              function(param){return caml_call1(f, x);});
    }
    var _s_ = run(f$0, config, examples, testable);
    return caml_call1(Base_Or_error[31], _s_);
   }
   var
    Base_quickcheck_Test =
      [0,
       [0,
        Seed,
        sizes,
        shrink_count,
        test_count,
        seed,
        [0,
         names,
         sizes$0,
         shrink_count$0,
         test_count$0,
         seed$0,
         fold,
         make_creator,
         create,
         map,
         iter,
         for_all,
         exists,
         to_list,
         map_poly,
         Direct],
        sexp_of_t$0],
       default_config,
       run,
       run_exn,
       result,
       with_sample,
       with_sample_exn];
   runtime.caml_register_global
    (38, Base_quickcheck_Test, "Base_quickcheck__Test");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__Observer
//# unitInfo: Requires: Base, Base__Array, Base__Bool, Base__Bytes, Base__Char, Base__Float, Base__Hash, Base__Int, Base__Int32, Base__Int63, Base__Int64, Base__List, Base__Map, Base__Nativeint, Base__Set, Base__String, Base_quickcheck__Bigarray_helpers, Base_quickcheck__Generator, Base_quickcheck__Observer0, CamlinternalLazy, Splittable_random
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Set = global_data.Base__Set,
    Base_Map = global_data.Base__Map,
    Base_quickcheck_Generator = global_data.Base_quickcheck__Generator,
    Base_Hash = global_data.Base__Hash,
    Splittable_random = global_data.Splittable_random,
    Base_List = global_data.Base__List,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Array = global_data.Base__Array,
    Base = global_data.Base,
    Base_quickcheck_Observer0 = global_data.Base_quickcheck__Observer0,
    Base_Bool = global_data.Base__Bool,
    Base_Char = global_data.Base__Char,
    Base_Int = global_data.Base__Int,
    Base_Int32 = global_data.Base__Int32,
    Base_Int63 = global_data.Base__Int63,
    Base_Int64 = global_data.Base__Int64,
    Base_Nativeint = global_data.Base__Nativeint,
    Base_Float = global_data.Base__Float,
    Base_String = global_data.Base__String,
    Base_quickcheck_Bigarray_helpe =
      global_data.Base_quickcheck__Bigarray_helpers,
    Base_Bytes = global_data.Base__Bytes,
    opaque = Base_quickcheck_Observer0[1],
    create = Base_quickcheck_Observer0[2],
    observe = Base_quickcheck_Observer0[3];
   function unmap(t, f){
    return caml_call1
            (create,
             function(x, size, hash){
              return caml_call4(observe, t, caml_call1(f, x), size, hash);
             });
   }
   function of_hash_fold(f){
    return caml_call1
            (create, function(x, param, hash){return caml_call2(f, hash, x);});
   }
   function of_lazy(lazy_t){
    return caml_call1
            (create,
             function(x, size, hash){
              var _n_ = caml_obj_tag(lazy_t);
              a:
              if(250 === _n_)
               var _o_ = lazy_t[1];
              else{
               if(246 !== _n_ && 244 !== _n_){var _o_ = lazy_t; break a;}
               var _o_ = caml_call1(CamlinternalLazy[2], lazy_t);
              }
              return caml_call4(observe, _o_, x, size, hash);
             });
   }
   function fixed_point(wrap){
    var lazy_t = [];
    runtime.caml_update_dummy
     (lazy_t,
      [246, function(param){return caml_call1(wrap, of_lazy(lazy_t));}]);
    return of_lazy(lazy_t);
   }
   var
    bool = of_hash_fold(Base_Bool[4]),
    char$0 = of_hash_fold(Base_Char[4]),
    int$0 = of_hash_fold(Base_Int[7]),
    int32 = of_hash_fold(Base_Int32[7]),
    int63 = of_hash_fold(Base_Int63[6]),
    int64 = of_hash_fold(Base_Int64[7]),
    nativeint = of_hash_fold(Base_Nativeint[7]),
    float$0 = of_hash_fold(Base_Float[5]),
    string = of_hash_fold(Base_String[40]),
    sexp = of_hash_fold(Base[85][1]),
    bigstring =
      of_hash_fold
       (caml_call1(Base_quickcheck_Bigarray_helpe[2][6], Base[105])),
    float32_vec =
      of_hash_fold
       (caml_call1(Base_quickcheck_Bigarray_helpe[2][6], Base[114])),
    float64_vec =
      of_hash_fold
       (caml_call1(Base_quickcheck_Bigarray_helpe[2][6], Base[114])),
    float32_mat =
      of_hash_fold
       (caml_call1(Base_quickcheck_Bigarray_helpe[3][6], Base[114])),
    float64_mat =
      of_hash_fold
       (caml_call1(Base_quickcheck_Bigarray_helpe[3][6], Base[114])),
    bytes = unmap(string, Base_Bytes[27]),
    _a_ = [0, 0];
   function either(fst_t, snd_t){
    return caml_call1
            (create,
             function(either, size, hash){
              if(0 === either[0]){
               var fst = either[1];
               return caml_call4
                       (observe, fst_t, fst, size, caml_call2(Base[122], hash, 1));
              }
              var snd = either[1];
              return caml_call4
                      (observe, snd_t, snd, size, caml_call2(Base[122], hash, 2));
             });
   }
   function result(ok_t, err_t){
    return unmap
            (either(ok_t, err_t),
             function(param){
              if(0 === param[0]){var ok = param[1]; return [0, ok];}
              var err = param[1];
              return [1, err];
             });
   }
   function both(fst_t, snd_t){
    return caml_call1
            (create,
             function(param, size, hash){
              var
               snd = param[2],
               fst = param[1],
               hash$0 = caml_call4(observe, fst_t, fst, size, hash),
               hash$1 = caml_call4(observe, snd_t, snd, size, hash$0);
              return hash$1;
             });
   }
   function option(value_t){
    return unmap
            (either(opaque, value_t),
             function(param){
              if(! param) return _a_;
              var value = param[1];
              return [1, value];
             });
   }
   function list(elt_t){
    return caml_call1
            (create,
             function(list, size, hash){
              var
               _k_ = caml_call1(Base_Hash[9], hash),
               random = caml_call1(Splittable_random[1][2], _k_),
               length = caml_call1(Base_List[17], list),
               _l_ =
                 caml_call3
                  (Base_quickcheck_Generator[53], [0, length], [0, length], 0),
               sizes =
                 caml_call3(Base_quickcheck_Generator[124], _l_, size, random),
               _m_ = caml_call2(Base[122], hash, 0);
              return caml_call4
                      (Base_List[69],
                       list,
                       sizes,
                       _m_,
                       function(hash, elt, size){
                        return caml_call4
                                (observe, elt_t, elt, size, caml_call2(Base[122], hash, 1));
                       });
             });
   }
   function array(t){var _j_ = Base_Array[29]; return unmap(list(t), _j_);}
   function ref(t){return unmap(t, function(_i_){return _i_[1];});}
   function lazy_t(t){
    return unmap
            (t,
             function(_g_){
              var _h_ = caml_obj_tag(_g_);
              if(250 === _h_) return _g_[1];
              if(246 !== _h_ && 244 !== _h_) return _g_;
              return caml_call1(CamlinternalLazy[2], _g_);
             });
   }
   function fn(dom, rng){
    return caml_call1
            (create,
             function(f, size, hash){
              var
               _e_ = caml_call1(Base_Hash[9], hash),
               random = caml_call1(Splittable_random[1][2], _e_),
               _f_ = caml_call3(Base_quickcheck_Generator[53], 0, 0, 0),
               sizes =
                 caml_call3
                  (Base_quickcheck_Generator[124], _f_, size * 2 | 0, random);
              return caml_call3
                      (Base_List[20],
                       sizes,
                       hash,
                       function(hash, size){
                        var
                         x =
                           caml_call3
                            (Base_quickcheck_Generator[124], dom, size, random);
                        return caml_call4
                                (observe, rng, caml_call1(f, x), size, hash);
                       });
             });
   }
   function map_tree(key_obs, data_obs){
    var arg = Base_Map[112][3][71];
    return unmap
            (list(both(key_obs, data_obs)),
             function(eta){return caml_call2(arg, 0, eta);});
   }
   function set_tree(elt_obs){
    var _d_ = Base_Set[76][3][14];
    return unmap(list(elt_obs), _d_);
   }
   function map_t(key_obs, data_obs){
    var _c_ = Base_Map[112][98];
    return unmap(map_tree(key_obs, data_obs), _c_);
   }
   function set_t(elt_obs){
    var _b_ = Base_Set[76][49];
    return unmap(set_tree(elt_obs), _b_);
   }
   var
    Base_quickcheck_Observer =
      [0,
       opaque,
       opaque,
       bool,
       char$0,
       string,
       bytes,
       int$0,
       int32,
       int63,
       int64,
       nativeint,
       float$0,
       sexp,
       option,
       list,
       array,
       ref,
       lazy_t,
       both,
       either,
       result,
       bigstring,
       float32_vec,
       float64_vec,
       float32_mat,
       float64_mat,
       fn,
       map_t,
       set_t,
       map_tree,
       set_tree,
       of_hash_fold,
       unmap,
       fixed_point,
       of_lazy,
       create,
       observe];
   runtime.caml_register_global
    (22, Base_quickcheck_Observer, "Base_quickcheck__Observer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck__Export
//# unitInfo: Requires: Base_quickcheck__Generator, Base_quickcheck__Observer, Base_quickcheck__Shrinker
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Base_quickcheck_Generator = global_data.Base_quickcheck__Generator,
    Base_quickcheck_Observer = global_data.Base_quickcheck__Observer,
    Base_quickcheck_Shrinker = global_data.Base_quickcheck__Shrinker,
    quickcheck_generator_unit = Base_quickcheck_Generator[1],
    quickcheck_generator_bool = Base_quickcheck_Generator[2],
    quickcheck_generator_char = Base_quickcheck_Generator[3],
    quickcheck_generator_string = Base_quickcheck_Generator[4],
    quickcheck_generator_bytes = Base_quickcheck_Generator[5],
    quickcheck_generator_int = Base_quickcheck_Generator[6],
    quickcheck_generator_int32 = Base_quickcheck_Generator[7],
    quickcheck_generator_int64 = Base_quickcheck_Generator[9],
    quickcheck_generator_nativeint = Base_quickcheck_Generator[10],
    quickcheck_generator_float = Base_quickcheck_Generator[11],
    quickcheck_generator_option = Base_quickcheck_Generator[13],
    quickcheck_generator_list = Base_quickcheck_Generator[14],
    quickcheck_generator_array = Base_quickcheck_Generator[15],
    quickcheck_generator_ref = Base_quickcheck_Generator[16],
    quickcheck_generator_lazy_t = Base_quickcheck_Generator[17],
    quickcheck_observer_unit = Base_quickcheck_Observer[2],
    quickcheck_observer_bool = Base_quickcheck_Observer[3],
    quickcheck_observer_char = Base_quickcheck_Observer[4],
    quickcheck_observer_string = Base_quickcheck_Observer[5],
    quickcheck_observer_bytes = Base_quickcheck_Observer[6],
    quickcheck_observer_int = Base_quickcheck_Observer[7],
    quickcheck_observer_int32 = Base_quickcheck_Observer[8],
    quickcheck_observer_int64 = Base_quickcheck_Observer[10],
    quickcheck_observer_nativeint = Base_quickcheck_Observer[11],
    quickcheck_observer_float = Base_quickcheck_Observer[12],
    quickcheck_observer_option = Base_quickcheck_Observer[14],
    quickcheck_observer_list = Base_quickcheck_Observer[15],
    quickcheck_observer_array = Base_quickcheck_Observer[16],
    quickcheck_observer_ref = Base_quickcheck_Observer[17],
    quickcheck_observer_lazy_t = Base_quickcheck_Observer[18],
    quickcheck_shrinker_unit = Base_quickcheck_Shrinker[2],
    quickcheck_shrinker_bool = Base_quickcheck_Shrinker[3],
    quickcheck_shrinker_char = Base_quickcheck_Shrinker[4],
    quickcheck_shrinker_string = Base_quickcheck_Shrinker[5],
    quickcheck_shrinker_bytes = Base_quickcheck_Shrinker[6],
    quickcheck_shrinker_int = Base_quickcheck_Shrinker[7],
    quickcheck_shrinker_int32 = Base_quickcheck_Shrinker[8],
    quickcheck_shrinker_int64 = Base_quickcheck_Shrinker[10],
    quickcheck_shrinker_nativeint = Base_quickcheck_Shrinker[11],
    quickcheck_shrinker_float = Base_quickcheck_Shrinker[12],
    quickcheck_shrinker_option = Base_quickcheck_Shrinker[14],
    quickcheck_shrinker_list = Base_quickcheck_Shrinker[15],
    quickcheck_shrinker_array = Base_quickcheck_Shrinker[16],
    quickcheck_shrinker_ref = Base_quickcheck_Shrinker[17],
    quickcheck_shrinker_lazy_t = Base_quickcheck_Shrinker[18],
    Base_quickcheck_Export =
      [0,
       quickcheck_generator_unit,
       quickcheck_generator_bool,
       quickcheck_generator_char,
       quickcheck_generator_string,
       quickcheck_generator_bytes,
       quickcheck_generator_int,
       quickcheck_generator_int32,
       quickcheck_generator_int64,
       quickcheck_generator_nativeint,
       quickcheck_generator_float,
       quickcheck_observer_unit,
       quickcheck_observer_bool,
       quickcheck_observer_char,
       quickcheck_observer_string,
       quickcheck_observer_bytes,
       quickcheck_observer_int,
       quickcheck_observer_int32,
       quickcheck_observer_int64,
       quickcheck_observer_nativeint,
       quickcheck_observer_float,
       quickcheck_shrinker_unit,
       quickcheck_shrinker_bool,
       quickcheck_shrinker_char,
       quickcheck_shrinker_string,
       quickcheck_shrinker_bytes,
       quickcheck_shrinker_int,
       quickcheck_shrinker_int32,
       quickcheck_shrinker_int64,
       quickcheck_shrinker_nativeint,
       quickcheck_shrinker_float,
       quickcheck_generator_option,
       quickcheck_generator_list,
       quickcheck_generator_array,
       quickcheck_generator_ref,
       quickcheck_generator_lazy_t,
       quickcheck_observer_option,
       quickcheck_observer_list,
       quickcheck_observer_array,
       quickcheck_observer_ref,
       quickcheck_observer_lazy_t,
       quickcheck_shrinker_option,
       quickcheck_shrinker_list,
       quickcheck_shrinker_array,
       quickcheck_shrinker_ref,
       quickcheck_shrinker_lazy_t];
   runtime.caml_register_global
    (3, Base_quickcheck_Export, "Base_quickcheck__Export");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Base_quickcheck
//# unitInfo: Requires: Base_quickcheck__Export
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Base_quickcheck_Export = global_data.Base_quickcheck__Export,
    quickcheck_generator_unit = Base_quickcheck_Export[1],
    quickcheck_generator_bool = Base_quickcheck_Export[2],
    quickcheck_generator_char = Base_quickcheck_Export[3],
    quickcheck_generator_string = Base_quickcheck_Export[4],
    quickcheck_generator_bytes = Base_quickcheck_Export[5],
    quickcheck_generator_int = Base_quickcheck_Export[6],
    quickcheck_generator_int32 = Base_quickcheck_Export[7],
    quickcheck_generator_int64 = Base_quickcheck_Export[8],
    quickcheck_generator_nativeint = Base_quickcheck_Export[9],
    quickcheck_generator_float = Base_quickcheck_Export[10],
    quickcheck_observer_unit = Base_quickcheck_Export[11],
    quickcheck_observer_bool = Base_quickcheck_Export[12],
    quickcheck_observer_char = Base_quickcheck_Export[13],
    quickcheck_observer_string = Base_quickcheck_Export[14],
    quickcheck_observer_bytes = Base_quickcheck_Export[15],
    quickcheck_observer_int = Base_quickcheck_Export[16],
    quickcheck_observer_int32 = Base_quickcheck_Export[17],
    quickcheck_observer_int64 = Base_quickcheck_Export[18],
    quickcheck_observer_nativeint = Base_quickcheck_Export[19],
    quickcheck_observer_float = Base_quickcheck_Export[20],
    quickcheck_shrinker_unit = Base_quickcheck_Export[21],
    quickcheck_shrinker_bool = Base_quickcheck_Export[22],
    quickcheck_shrinker_char = Base_quickcheck_Export[23],
    quickcheck_shrinker_string = Base_quickcheck_Export[24],
    quickcheck_shrinker_bytes = Base_quickcheck_Export[25],
    quickcheck_shrinker_int = Base_quickcheck_Export[26],
    quickcheck_shrinker_int32 = Base_quickcheck_Export[27],
    quickcheck_shrinker_int64 = Base_quickcheck_Export[28],
    quickcheck_shrinker_nativeint = Base_quickcheck_Export[29],
    quickcheck_shrinker_float = Base_quickcheck_Export[30],
    quickcheck_generator_option = Base_quickcheck_Export[31],
    quickcheck_generator_list = Base_quickcheck_Export[32],
    quickcheck_generator_array = Base_quickcheck_Export[33],
    quickcheck_generator_ref = Base_quickcheck_Export[34],
    quickcheck_generator_lazy_t = Base_quickcheck_Export[35],
    quickcheck_observer_option = Base_quickcheck_Export[36],
    quickcheck_observer_list = Base_quickcheck_Export[37],
    quickcheck_observer_array = Base_quickcheck_Export[38],
    quickcheck_observer_ref = Base_quickcheck_Export[39],
    quickcheck_observer_lazy_t = Base_quickcheck_Export[40],
    quickcheck_shrinker_option = Base_quickcheck_Export[41],
    quickcheck_shrinker_list = Base_quickcheck_Export[42],
    quickcheck_shrinker_array = Base_quickcheck_Export[43],
    quickcheck_shrinker_ref = Base_quickcheck_Export[44],
    quickcheck_shrinker_lazy_t = Base_quickcheck_Export[45],
    Private = [0],
    Base_quickcheck =
      [0,
       quickcheck_generator_unit,
       quickcheck_generator_bool,
       quickcheck_generator_char,
       quickcheck_generator_string,
       quickcheck_generator_bytes,
       quickcheck_generator_int,
       quickcheck_generator_int32,
       quickcheck_generator_int64,
       quickcheck_generator_nativeint,
       quickcheck_generator_float,
       quickcheck_observer_unit,
       quickcheck_observer_bool,
       quickcheck_observer_char,
       quickcheck_observer_string,
       quickcheck_observer_bytes,
       quickcheck_observer_int,
       quickcheck_observer_int32,
       quickcheck_observer_int64,
       quickcheck_observer_nativeint,
       quickcheck_observer_float,
       quickcheck_shrinker_unit,
       quickcheck_shrinker_bool,
       quickcheck_shrinker_char,
       quickcheck_shrinker_string,
       quickcheck_shrinker_bytes,
       quickcheck_shrinker_int,
       quickcheck_shrinker_int32,
       quickcheck_shrinker_int64,
       quickcheck_shrinker_nativeint,
       quickcheck_shrinker_float,
       quickcheck_generator_option,
       quickcheck_generator_list,
       quickcheck_generator_array,
       quickcheck_generator_ref,
       quickcheck_generator_lazy_t,
       quickcheck_observer_option,
       quickcheck_observer_list,
       quickcheck_observer_array,
       quickcheck_observer_ref,
       quickcheck_observer_lazy_t,
       quickcheck_shrinker_option,
       quickcheck_shrinker_list,
       quickcheck_shrinker_array,
       quickcheck_shrinker_ref,
       quickcheck_shrinker_lazy_t,
       Private];
   runtime.caml_register_global(1, Base_quickcheck, "Base_quickcheck");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
