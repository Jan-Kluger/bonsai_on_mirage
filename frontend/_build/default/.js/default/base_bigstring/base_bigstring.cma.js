// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Base_bigstring
//# unitInfo: Requires: Base, Base__Blit, Base__Bool, Base__Bytes, Base__Char, Base__Hash, Base__Int, Base__List, Base__Option, Base__Ordered_collection_common, Base__Printf, Expect_test_collector, Int_repr, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_is_not_a_valid_unsigned_32 = " is not a valid unsigned 32-bit integer",
    cst_s_d_is_not_a_valid_unsigne =
      "%s: %d is not a valid unsigned 32-bit integer",
    cst = ": ",
    cst_Base_bigstring$0 = "Base_bigstring",
    cst_Bigstring_write_int16$1 = "Bigstring.write_int16",
    cst_Bigstring_write_int32_int$1 = "Bigstring.write_int32_int",
    cst_Bigstring_write_uint16$1 = "Bigstring.write_uint16",
    cst_base_bigstring$0 = "base_bigstring",
    cst_src_base_bigstring_ml = "src/base_bigstring.ml",
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_ba_uint8_get16 = runtime.caml_ba_uint8_get16,
    caml_ba_uint8_get32 = runtime.caml_ba_uint8_get32,
    caml_ba_uint8_get64 = runtime.caml_ba_uint8_get64,
    caml_ba_uint8_set16 = runtime.caml_ba_uint8_set16,
    caml_ba_uint8_set32 = runtime.caml_ba_uint8_set32,
    caml_ba_uint8_set64 = runtime.caml_ba_uint8_set64,
    caml_bswap16 = runtime.caml_bswap16,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_bswap = runtime.caml_int64_bswap,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    loc$0 = "Bigstring.set_int8_exn",
    loc = "Bigstring.set_uint8_exn",
    Base_Char = global_data.Base__Char,
    Base = global_data.Base,
    Base_Int = global_data.Base__Int,
    Base_Ordered_collection_common =
      global_data.Base__Ordered_collection_common,
    Base_Option = global_data.Base__Option,
    Base_List = global_data.Base__List,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_Bytes = global_data.Base__Bytes,
    Base_Bool = global_data.Base__Bool,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Base_Printf = global_data.Base__Printf,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Base_Blit = global_data.Base__Blit,
    Base_Hash = global_data.Base__Hash,
    Int_repr = global_data.Int_repr;
   caml_call1(Ppx_module_timer_runtime[4], cst_Base_bigstring$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_base_bigstring$0);
   caml_call1(Expect_test_collector[6][1], cst_src_base_bigstring_ml);
   caml_call2
    (Ppx_inline_test_lib[5], cst_base_bigstring$0, "base_bigstring.ml");
   var
    Bigstring0 = [0],
    sprintf = Base_Printf[2],
    arch_sixtyfour = 64 === Stdlib_Sys[9] ? 1 : 0,
    arch_big_endian = Stdlib_Sys[11],
    not_on_32bit = 32 < Stdlib_Sys[9] ? 1 : 0,
    _a_ =
      [0,
       [11, "create: size = ", [4, 0, 0, 0, [11, " < 0", 0]]],
       "create: size = %d < 0"];
   function create(max_mem_waiting_gc_in_bytes, size){
    var
     max_mem_waiting_gc_in_bytes$0 =
       caml_call2(Base_Option[28], max_mem_waiting_gc_in_bytes, -1);
    if(size < 0){
     var _aG_ = caml_call2(sprintf, _a_, size);
     caml_call1(Base[216], _aG_);
    }
    return runtime.bigstring_alloc(max_mem_waiting_gc_in_bytes$0, size);
   }
   var
    length = caml_ba_dim_1,
    cst_pos_0 = ": pos < 0",
    cst_len_0 = ": len < 0",
    _b_ =
      [0,
       [11, "Bigstring.", [2, 0, [11, ": length(bstr) < pos + len", 0]]],
       "Bigstring.%s: length(bstr) < pos + len"];
   function init(n, f){
    var t = create(0, n), _aE_ = n - 1 | 0, _aD_ = 0;
    if(_aE_ >= 0){
     var i = _aD_;
     for(;;){
      caml_ba_set_1(t, i, caml_call1(f, i));
      var _aF_ = i + 1 | 0;
      if(_aE_ === i) break;
      i = _aF_;
     }
    }
    return t;
   }
   function check_args(loc, pos, len, bstr){
    var
     bstr_len$0 = caml_ba_dim_1(bstr),
     _aB_ =
       caml_call2
        (Base_Bool[30][2],
         len < 0 ? 1 : 0,
         (bstr_len$0 - pos | 0) < len ? 1 : 0),
     _aC_ = caml_call2(Base_Bool[30][2], pos < 0 ? 1 : 0, _aB_);
    if(! _aC_) return _aC_;
    if(pos < 0){
     var _ax_ = caml_call2(Base[212], loc, cst_pos_0);
     caml_call1(Base[216], _ax_);
    }
    if(len < 0){
     var _ay_ = caml_call2(Base[212], loc, cst_len_0);
     caml_call1(Base[216], _ay_);
    }
    var
     bstr_len = caml_ba_dim_1(bstr),
     _az_ = (bstr_len - pos | 0) < len ? 1 : 0;
    if(! _az_) return _az_;
    var _aA_ = caml_call2(sprintf, _b_, loc);
    return caml_call1(Base[216], _aA_);
   }
   function get_opt_len(bstr, pos, param){
    if(! param) return caml_ba_dim_1(bstr) - pos | 0;
    var len = param[1];
    return len;
   }
   function create$0(len){return create(0, len);}
   function create$1(len){return caml_call1(Base_Bytes[32], len);}
   var length$0 = caml_ml_bytes_length;
   function unsafe_blit(_aw_, _av_, _au_, _at_, _as_){
    return runtime.bigstring_blit_stub(_aw_, _av_, _au_, _at_, _as_);
   }
   var
    include = caml_call1(Base_Blit[1], [0, length, create$0, unsafe_blit]),
    blit = include[1],
    blito = include[2],
    unsafe_blit$0 = include[3],
    sub = include[4],
    subo = include[5],
    From_bytes =
      caml_call1
       (caml_call1(Base_Blit[2], [0, length$0]),
        [0,
         length,
         create$0,
         function(_ar_, _aq_, _ap_, _ao_, _an_){
          return runtime.bigstring_blit_bytes_bigstring_stub
                  (_ar_, _aq_, _ap_, _ao_, _an_);
         }]),
    To_bytes =
      caml_call1
       (caml_call1(Base_Blit[2], [0, length]),
        [0,
         length$0,
         create$1,
         function(_am_, _al_, _ak_, _aj_, _ai_){
          return runtime.bigstring_blit_bigstring_bytes_stub
                  (_am_, _al_, _ak_, _aj_, _ai_);
         }]),
    length$1 = runtime.caml_ml_string_length,
    From_string =
      caml_call1
       (caml_call1(Base_Blit[2], [0, length$1]),
        [0,
         length,
         create$0,
         function(_ah_, _ag_, _af_, _ae_, _ad_){
          return runtime.bigstring_blit_string_bigstring_stub
                  (_ah_, _ag_, _af_, _ae_, _ad_);
         }]),
    blit$0 = To_bytes[1],
    blito$0 = To_bytes[2],
    unsafe_blit$1 = To_bytes[3],
    include$0 = caml_call1(caml_call1(Base_Blit[3], Bigstring0), To_bytes),
    sub$0 = include$0[1],
    subo$0 = include$0[2],
    To_string = [0, blit$0, blito$0, unsafe_blit$1, sub$0, subo$0],
    of_string = From_string[5],
    of_bytes = From_bytes[5],
    to_string = To_string[5],
    to_bytes = To_bytes[5],
    cst_bigstring_of_sexp_atom_nee = "bigstring_of_sexp: atom needed",
    _c_ = [0, cst_src_base_bigstring_ml, 222, 6];
   function sexp_of_t_frozen(t){return [0, caml_call3(to_string, 0, 0, t)];}
   function t_frozen_of_sexp(sexp){
    if(0 !== sexp[0])
     return caml_call2
             (Sexplib0_Sexp_conv[27], cst_bigstring_of_sexp_atom_nee, sexp);
    var str = sexp[1];
    return caml_call3(of_string, 0, 0, str);
   }
   function copy(t){return caml_call3(sub, t, 0, caml_ba_dim_1(t));}
   function append(src, dst, dst_pos_ref){
    var len = caml_ba_dim_1(src), dst_pos = dst_pos_ref[1];
    caml_call5(blit, src, 0, dst, dst_pos, len);
    dst_pos_ref[1] = dst_pos + len | 0;
    return 0;
   }
   function concat(sep, list){
    if(! list) return create(0, 0);
    var
     tail = list[2],
     head = list[1],
     head_len = caml_ba_dim_1(head),
     sep_len =
       caml_call3
        (Base_Option[30], sep, 0, function(t){return caml_ba_dim_1(t);}),
     tail_count = caml_call1(Base_List[17], tail),
     len =
       (head_len + runtime.caml_mul(sep_len, tail_count) | 0)
       +
        caml_call3
         (Base_List[26],
          [0, Base_Int[76], function(_ac_, _ab_){return _ac_ + _ab_ | 0;}],
          tail,
          function(t){return caml_ba_dim_1(t);})
       | 0,
     dst = create(0, len),
     dst_pos_ref = [0, 0];
    append(head, dst, dst_pos_ref);
    caml_call2
     (Base_List[19],
      tail,
      function(src){
       if(sep){var sep$0 = sep[1]; append(sep$0, dst, dst_pos_ref);}
       return append(src, dst, dst_pos_ref);
      });
    if(dst_pos_ref[1] === len) return dst;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
   }
   function memset(t, pos, len, c){
    var _aa_ = caml_ba_dim_1(t);
    caml_call3(Base_Ordered_collection_common[2], pos, len, _aa_);
    return runtime.bigstring_memset_stub(t, pos, len, c);
   }
   function memcmp(t1, pos1, t2, pos2, len){
    var _$_ = caml_ba_dim_1(t1);
    caml_call3(Base_Ordered_collection_common[2], pos1, len, _$_);
    var ___ = caml_ba_dim_1(t2);
    caml_call3(Base_Ordered_collection_common[2], pos2, len, ___);
    return runtime.bigstring_memcmp_stub(t1, pos1, t2, pos2, len);
   }
   function memcmp_bytes(t1, pos1, bytes, pos2, len){
    var _Z_ = caml_ba_dim_1(t1);
    caml_call3(Base_Ordered_collection_common[2], pos1, len, _Z_);
    caml_call3
     (Base_Ordered_collection_common[2],
      pos2,
      len,
      caml_ml_bytes_length(bytes));
    return runtime.bigstring_memcmp_bytes_stub(t1, pos1, bytes, pos2, len);
   }
   function compare_t_frozen(t1, t2){
    if(t1 === t2) return 0;
    var
     len1 = caml_ba_dim_1(t1),
     len2 = caml_ba_dim_1(t2),
     len = caml_call2(Base_Int[15], len1, len2),
     n = runtime.bigstring_memcmp_stub(t1, 0, t2, 0, len);
    return 0 === n ? len1 < len2 ? -1 : len2 < len1 ? 1 : 0 : n;
   }
   function hash_fold_t_frozen(_Y_, _X_){
    return runtime.internalhash_fold_bigstring(_Y_, _X_);
   }
   var
    hash = caml_call1(Base_Hash[12], hash_fold_t_frozen),
    cst_find = "find",
    cst_get_16 = "get_16",
    cst_get_32 = "get_32",
    cst_get_64 = "get_64",
    cst_set_16 = "set_16",
    cst_set_32 = "set_32",
    cst_set_64 = "set_64",
    _d_ =
      [0,
       [2,
        0,
        [11,
         cst,
         [4, 0, 0, 0, [11, " is not a valid unsigned 16-bit integer", 0]]]],
       "%s: %d is not a valid unsigned 16-bit integer"],
    _e_ =
      [0,
       [2,
        0,
        [11,
         cst,
         [4, 0, 0, 0, [11, " is not a valid (signed) 16-bit integer", 0]]]],
       "%s: %d is not a valid (signed) 16-bit integer"];
   function hash_t_frozen(x){return caml_call1(hash, x);}
   function equal(t1, t2){
    if(t1 === t2) return 1;
    var
     len1 = caml_ba_dim_1(t1),
     len2 = caml_ba_dim_1(t2),
     _V_ = caml_call2(Base_Int[13], len1, len2);
    if(! _V_) return _V_;
    var _W_ = runtime.bigstring_memcmp_stub(t1, 0, t2, 0, len1);
    return caml_call2(Base_Int[13], _W_, 0);
   }
   function find(opt, len, chr, bstr){
    var pos = opt ? opt[1] : 0, len$0 = get_opt_len(bstr, pos, len);
    check_args(cst_find, pos, len$0, bstr);
    var res = runtime.bigstring_find(bstr, chr, pos, len$0);
    return 0 <= res ? [0, res] : 0;
   }
   function memmem
   (haystack, needle, _U_, haystack_len, opt, needle_len, param){
    var
     haystack_pos = _U_ ? _U_[1] : 0,
     needle_pos = opt ? opt[1] : 0,
     haystack_len$0 = get_opt_len(haystack, haystack_pos, haystack_len),
     needle_len$0 = get_opt_len(needle, needle_pos, needle_len),
     res =
       runtime.bigstring_memmem_bytecode
        (haystack,
         needle,
         haystack_pos,
         haystack_len$0,
         needle_pos,
         needle_len$0);
    return 0 <= res ? [0, res] : 0;
   }
   function get_16(t, pos){
    check_args(cst_get_16, pos, 2, t);
    return caml_ba_uint8_get16(t, pos);
   }
   function get_32(t, pos){
    check_args(cst_get_32, pos, 4, t);
    return caml_ba_uint8_get32(t, pos);
   }
   function get_64(t, pos){
    check_args(cst_get_64, pos, 8, t);
    return caml_ba_uint8_get64(t, pos);
   }
   function set_16_trunc(t, pos, v){
    check_args(cst_set_16, pos, 2, t);
    return caml_ba_uint8_set16(t, pos, v);
   }
   function set_32(t, pos, v){
    check_args(cst_set_32, pos, 4, t);
    return caml_ba_uint8_set32(t, pos, v);
   }
   function set_64(t, pos, v){
    check_args(cst_set_64, pos, 8, t);
    return caml_ba_uint8_set64(t, pos, v);
   }
   function sign_extend_16(u){
    return u << (Base_Int[61] - 16 | 0) >> (Base_Int[61] - 16 | 0);
   }
   function check_valid_uint16(x, loc){
    var _R_ = x < 0 ? 1 : 0, _S_ = _R_ || (65535 < x ? 1 : 0);
    if(! _S_) return _S_;
    var _T_ = caml_call3(sprintf, _d_, loc, x);
    return caml_call1(Base[216], _T_);
   }
   function check_valid_int16(x, loc){
    var _O_ = x < -32768 ? 1 : 0, _P_ = _O_ || (32767 < x ? 1 : 0);
    if(! _P_) return _P_;
    var _Q_ = caml_call3(sprintf, _e_, loc, x);
    return caml_call1(Base[216], _Q_);
   }
   var
    cst_Bigstring_set_uint32_be_ex = "Bigstring.set_uint32_be_exn",
    cst_Bigstring_set_uint32_le_ex = "Bigstring.set_uint32_le_exn",
    cst_Bigstring_set_uint64_le_ex = "Bigstring.set_uint64_le_exn",
    cst_Bigstring_set_uint64_be_ex = "Bigstring.set_uint64_be_exn",
    _s_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _t_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 16384),
    _u_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _v_ = runtime.caml_int64_create_lo_mi_hi(0, 64, 0),
    _o_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 49152),
    _p_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 16384),
    _q_ = runtime.caml_int64_create_lo_mi_hi(0, 16777152, 65535),
    _r_ = runtime.caml_int64_create_lo_mi_hi(0, 64, 0),
    cst_unsafe_read_uint64_value_c =
      "unsafe_read_uint64: value cannot be represented unboxed!",
    cst_unsafe_read_int64_value_ca =
      "unsafe_read_int64: value cannot be represented unboxed!",
    _n_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _m_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _l_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _k_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_Bigstring_write_int32_int$0 = cst_Bigstring_write_int32_int$1,
    cst_Bigstring_write_int32_int = cst_Bigstring_write_int32_int$1,
    cst_Bigstring_write_uint16$0 = cst_Bigstring_write_uint16$1,
    cst_Bigstring_write_uint16 = cst_Bigstring_write_uint16$1,
    cst_Bigstring_write_int16$0 = cst_Bigstring_write_int16$1,
    cst_Bigstring_write_int16 = cst_Bigstring_write_int16$1,
    _j_ =
      [0,
       [2,
        0,
        [11,
         cst,
         [4, 0, 0, 0, [11, " is not a valid unsigned 64-bit integer", 0]]]],
       "%s: %d is not a valid unsigned 64-bit integer"],
    _i_ =
      [0,
       [2,
        0,
        [11, cst, [4, 0, 0, 0, [11, cst_is_not_a_valid_unsigned_32, 0]]]],
       cst_s_d_is_not_a_valid_unsigne],
    _y_ =
      [0,
       [2,
        0,
        [11, cst, [4, 0, 0, 0, [11, cst_is_not_a_valid_unsigned_32, 0]]]],
       cst_s_d_is_not_a_valid_unsigne],
    _h_ =
      [0,
       [2,
        0,
        [11,
         cst,
         [4, 0, 0, 0, [11, " is not a valid (signed) 32-bit integer", 0]]]],
       "%s: %d is not a valid (signed) 32-bit integer"],
    _g_ =
      [0,
       [2,
        0,
        [11,
         cst,
         [4, 0, 0, 0, [11, " is not a valid (signed) 8-bit integer", 0]]]],
       "%s: %d is not a valid (signed) 8-bit integer"],
    _f_ =
      [0,
       [2,
        0,
        [11,
         cst,
         [4, 0, 0, 0, [11, " is not a valid unsigned 8-bit integer", 0]]]],
       "%s: %d is not a valid unsigned 8-bit integer"],
    cst_base_bigstring = cst_base_bigstring$0,
    cst_Base_bigstring = cst_Base_bigstring$0,
    check_valid_int32 =
      arch_sixtyfour
       ? function
        (x, loc){
         if(-2147483648 <= x && x < -2147483648) return;
         var _M_ = caml_call3(sprintf, _h_, loc, x);
         return caml_call1(Base[216], _M_);
        }
       : function(_N_, param){},
    check_valid_uint32 =
      arch_sixtyfour
       ? function
        (x, loc){
         if(0 <= x && x < 1) return;
         var _K_ = caml_call3(sprintf, _i_, loc, x);
         return caml_call1(Base[216], _K_);
        }
       : function
        (x, loc){
         if(0 <= x) return;
         var _L_ = caml_call3(sprintf, _y_, loc, x);
         return caml_call1(Base[216], _L_);
        };
   function check_valid_uint64(x, loc){
    if(0 <= x) return;
    var _J_ = caml_call3(sprintf, _j_, loc, x);
    return caml_call1(Base[216], _J_);
   }
   function unsafe_read_int16(t, pos){
    return sign_extend_16(caml_ba_uint8_get16(t, pos));
   }
   function unsafe_read_int16_swap(t, pos){
    return sign_extend_16(caml_bswap16(caml_ba_uint8_get16(t, pos)));
   }
   var unsafe_write_int16 = caml_ba_uint8_set16;
   function unsafe_write_int16_swap(t, pos, x){
    return caml_ba_uint8_set16(t, pos, caml_bswap16(x));
   }
   function read_int16(t, pos){return sign_extend_16(get_16(t, pos));}
   function read_int16_swap(t, pos){
    return sign_extend_16(caml_bswap16(get_16(t, pos)));
   }
   function write_int16_exn(t, pos, x){
    check_valid_int16(x, cst_Bigstring_write_int16);
    return set_16_trunc(t, pos, x);
   }
   function write_int16_swap_exn(t, pos, x){
    check_valid_int16(x, cst_Bigstring_write_int16$0);
    return set_16_trunc(t, pos, caml_bswap16(x));
   }
   var unsafe_read_uint16 = caml_ba_uint8_get16;
   function unsafe_read_uint16_swap(t, pos){
    return caml_bswap16(caml_ba_uint8_get16(t, pos));
   }
   var unsafe_write_uint16 = caml_ba_uint8_set16;
   function unsafe_write_uint16_swap(t, pos, x){
    return caml_ba_uint8_set16(t, pos, caml_bswap16(x));
   }
   function read_uint16(t, pos){return get_16(t, pos);}
   function read_uint16_swap(t, pos){return caml_bswap16(get_16(t, pos));}
   function write_uint16_exn(t, pos, x){
    check_valid_uint16(x, cst_Bigstring_write_uint16);
    return set_16_trunc(t, pos, x);
   }
   function write_uint16_swap_exn(t, pos, x){
    check_valid_uint16(x, cst_Bigstring_write_uint16$0);
    return set_16_trunc(t, pos, caml_bswap16(x));
   }
   var unsafe_read_int32_int = caml_ba_uint8_get32;
   function unsafe_read_int32_int_swap(t, pos){
    return caml_int32_bswap(caml_ba_uint8_get32(t, pos));
   }
   var unsafe_read_int32 = caml_ba_uint8_get32;
   function unsafe_read_int32_swap(t, pos){
    return caml_int32_bswap(caml_ba_uint8_get32(t, pos));
   }
   var unsafe_write_int32 = caml_ba_uint8_set32;
   function unsafe_write_int32_swap(t, pos, x){
    return caml_ba_uint8_set32(t, pos, caml_int32_bswap(x));
   }
   var unsafe_write_int32_int = caml_ba_uint8_set32;
   function unsafe_write_int32_int_swap(t, pos, x){
    return caml_ba_uint8_set32(t, pos, caml_int32_bswap(x));
   }
   function read_int32_int(t, pos){return get_32(t, pos);}
   function read_int32_int_swap(t, pos){
    return caml_int32_bswap(get_32(t, pos));
   }
   function read_int32(t, pos){return get_32(t, pos);}
   function read_int32_swap(t, pos){return caml_int32_bswap(get_32(t, pos));}
   function write_int32(t, pos, x){return set_32(t, pos, x);}
   function write_int32_swap(t, pos, x){
    return set_32(t, pos, caml_int32_bswap(x));
   }
   function write_int32_int_exn(t, pos, x){
    check_valid_int32(x, cst_Bigstring_write_int32_int);
    return set_32(t, pos, x);
   }
   function write_int32_int_swap_exn(t, pos, x){
    check_valid_int32(x, cst_Bigstring_write_int32_int$0);
    return set_32(t, pos, caml_int32_bswap(x));
   }
   function unsafe_read_int64_int(t, pos){
    return caml_int64_to_int32(caml_ba_uint8_get64(t, pos));
   }
   function unsafe_read_int64_int_swap(t, pos){
    return caml_int64_to_int32(caml_int64_bswap(caml_ba_uint8_get64(t, pos)));
   }
   var unsafe_read_int64 = caml_ba_uint8_get64;
   function unsafe_read_int64_swap(t, pos){
    return caml_int64_bswap(caml_ba_uint8_get64(t, pos));
   }
   var unsafe_write_int64 = caml_ba_uint8_set64;
   function unsafe_write_int64_swap(t, pos, x){
    return caml_ba_uint8_set64(t, pos, caml_int64_bswap(x));
   }
   function unsafe_write_int64_int(t, pos, x){
    return caml_ba_uint8_set64(t, pos, caml_int64_of_int32(x));
   }
   function unsafe_write_int64_int_swap(t, pos, x){
    return caml_ba_uint8_set64
            (t, pos, caml_int64_bswap(caml_int64_of_int32(x)));
   }
   function read_int64_int(t, pos){
    return caml_int64_to_int32(get_64(t, pos));
   }
   function read_int64_int_swap(t, pos){
    return caml_int64_to_int32(caml_int64_bswap(get_64(t, pos)));
   }
   function read_int64(t, pos){return get_64(t, pos);}
   function read_int64_swap(t, pos){return caml_int64_bswap(get_64(t, pos));}
   function write_int64(t, pos, x){return set_64(t, pos, x);}
   function write_int64_swap(t, pos, x){
    return set_64(t, pos, caml_int64_bswap(x));
   }
   function write_int64_int(t, pos, x){
    return set_64(t, pos, caml_int64_of_int32(x));
   }
   function write_int64_int_swap(t, pos, x){
    return set_64(t, pos, caml_int64_bswap(caml_int64_of_int32(x)));
   }
   var
    unsafe_get_int16_be =
      arch_big_endian ? unsafe_read_int16 : unsafe_read_int16_swap,
    unsafe_read_int16_swap$0 =
      arch_big_endian ? unsafe_read_int16_swap : unsafe_read_int16,
    unsafe_get_uint16_be =
      arch_big_endian ? unsafe_read_uint16 : unsafe_read_uint16_swap,
    unsafe_read_uint16_swap$0 =
      arch_big_endian ? unsafe_read_uint16_swap : unsafe_read_uint16,
    get_int16_be = arch_big_endian ? read_int16 : read_int16_swap,
    read_int16_swap$0 = arch_big_endian ? read_int16_swap : read_int16,
    get_uint16_be = arch_big_endian ? read_uint16 : read_uint16_swap,
    read_uint16_swap$0 = arch_big_endian ? read_uint16_swap : read_uint16,
    unsafe_set_int16_be =
      arch_big_endian ? unsafe_write_int16 : unsafe_write_int16_swap,
    unsafe_write_int16_swap$0 =
      arch_big_endian ? unsafe_write_int16_swap : unsafe_write_int16,
    unsafe_set_uint16_be =
      arch_big_endian ? unsafe_write_uint16 : unsafe_write_uint16_swap,
    unsafe_write_uint16_swap$0 =
      arch_big_endian ? unsafe_write_uint16_swap : unsafe_write_uint16,
    set_int16_be_exn =
      arch_big_endian ? write_int16_exn : write_int16_swap_exn,
    write_int16_swap_exn$0 =
      arch_big_endian ? write_int16_swap_exn : write_int16_exn,
    set_uint16_be_exn =
      arch_big_endian ? write_uint16_exn : write_uint16_swap_exn,
    write_uint16_swap_exn$0 =
      arch_big_endian ? write_uint16_swap_exn : write_uint16_exn,
    unsafe_get_int32_t_be =
      arch_big_endian ? unsafe_read_int32 : unsafe_read_int32_swap,
    unsafe_read_int32_swap$0 =
      arch_big_endian ? unsafe_read_int32_swap : unsafe_read_int32,
    unsafe_set_int32_t_be =
      arch_big_endian ? unsafe_write_int32 : unsafe_write_int32_swap,
    unsafe_write_int32_swap$0 =
      arch_big_endian ? unsafe_write_int32_swap : unsafe_write_int32,
    get_int32_t_be = arch_big_endian ? read_int32 : read_int32_swap,
    read_int32_swap$0 = arch_big_endian ? read_int32_swap : read_int32,
    set_int32_t_be = arch_big_endian ? write_int32 : write_int32_swap,
    write_int32_swap$0 = arch_big_endian ? write_int32_swap : write_int32,
    unsafe_read_int32_int$0 =
      arch_big_endian ? unsafe_read_int32_int : unsafe_read_int32_int_swap,
    unsafe_read_int32_int_swap$0 =
      arch_big_endian ? unsafe_read_int32_int_swap : unsafe_read_int32_int,
    unsafe_write_int32_int$0 =
      arch_big_endian ? unsafe_write_int32_int : unsafe_write_int32_int_swap,
    unsafe_write_int32_int_swap$0 =
      arch_big_endian ? unsafe_write_int32_int_swap : unsafe_write_int32_int,
    read_int32_int$0 = arch_big_endian ? read_int32_int : read_int32_int_swap,
    read_int32_int_swap$0 =
      arch_big_endian ? read_int32_int_swap : read_int32_int,
    write_int32_int_exn$0 =
      arch_big_endian ? write_int32_int_exn : write_int32_int_swap_exn,
    write_int32_int_swap_exn$0 =
      arch_big_endian ? write_int32_int_swap_exn : write_int32_int_exn,
    unsafe_get_int64_be_trunc =
      arch_big_endian ? unsafe_read_int64_int : unsafe_read_int64_int_swap,
    unsafe_read_int64_int_swap$0 =
      arch_big_endian ? unsafe_read_int64_int_swap : unsafe_read_int64_int,
    unsafe_write_int64_int$0 =
      arch_big_endian ? unsafe_write_int64_int : unsafe_write_int64_int_swap,
    unsafe_write_int64_int_swap$0 =
      arch_big_endian ? unsafe_write_int64_int_swap : unsafe_write_int64_int,
    get_int64_be_trunc =
      arch_big_endian ? read_int64_int : read_int64_int_swap,
    read_int64_int_swap$0 =
      arch_big_endian ? read_int64_int_swap : read_int64_int,
    write_int64_int$0 =
      arch_big_endian ? write_int64_int : write_int64_int_swap,
    write_int64_int_swap$0 =
      arch_big_endian ? write_int64_int_swap : write_int64_int,
    unsafe_get_int64_t_be =
      arch_big_endian ? unsafe_read_int64 : unsafe_read_int64_swap,
    unsafe_read_int64_swap$0 =
      arch_big_endian ? unsafe_read_int64_swap : unsafe_read_int64,
    unsafe_set_int64_t_be =
      arch_big_endian ? unsafe_write_int64 : unsafe_write_int64_swap,
    unsafe_write_int64_swap$0 =
      arch_big_endian ? unsafe_write_int64_swap : unsafe_write_int64;
   function unsafe_read_int64_local(t, pos){
    return caml_int64_add(_k_, caml_ba_uint8_get64(t, pos));
   }
   function unsafe_read_int64_swap_local(t, pos){
    return caml_int64_add(_l_, unsafe_read_int64_swap(t, pos));
   }
   function read_int64_local(t, pos){
    return caml_int64_add(_m_, get_64(t, pos));
   }
   function read_int64_swap_local(t, pos){
    return caml_int64_add(_n_, read_int64_swap(t, pos));
   }
   var
    unsafe_read_int64_local$0 =
      arch_big_endian ? unsafe_read_int64_local : unsafe_read_int64_swap_local,
    unsafe_read_int64_swap_local$0 =
      arch_big_endian ? unsafe_read_int64_swap_local : unsafe_read_int64_local,
    read_int64_local$0 =
      arch_big_endian ? read_int64_local : read_int64_swap_local,
    get_int64_t_le =
      arch_big_endian ? read_int64_swap_local : read_int64_local,
    get_int64_t_be = arch_big_endian ? read_int64 : read_int64_swap,
    read_int64_swap$0 = arch_big_endian ? read_int64_swap : read_int64,
    set_int64_t_be = arch_big_endian ? write_int64 : write_int64_swap,
    set_int64_t_le = arch_big_endian ? write_int64_swap : write_int64;
   function int64_conv_error(param){
    return caml_call1(Base[215], cst_unsafe_read_int64_value_ca);
   }
   function uint64_conv_error(param){
    return caml_call1(Base[215], cst_unsafe_read_uint64_value_c);
   }
   function int64_to_int_exn(n){
    if(arch_sixtyfour){
     if(caml_greaterequal(n, _o_) && caml_lessthan(n, _p_))
      return caml_int64_to_int32(n);
     return int64_conv_error(0);
    }
    if(caml_greaterequal(n, _q_) && caml_lessthan(n, _r_))
     return caml_int64_to_int32(n);
    return int64_conv_error(0);
   }
   function uint64_to_int_exn(n){
    if(arch_sixtyfour){
     if(caml_greaterequal(n, _s_) && caml_lessthan(n, _t_))
      return caml_int64_to_int32(n);
     return uint64_conv_error(0);
    }
    if(caml_greaterequal(n, _u_) && caml_lessthan(n, _v_))
     return caml_int64_to_int32(n);
    return uint64_conv_error(0);
   }
   function unsafe_get_int64_be_exn(t, pos){
    return int64_to_int_exn(unsafe_get_int64_t_be(t, pos));
   }
   function unsafe_get_int64_le_exn(t, pos){
    return int64_to_int_exn(unsafe_read_int64_swap$0(t, pos));
   }
   function get_int64_be_exn(t, pos){
    return int64_to_int_exn(get_int64_t_be(t, pos));
   }
   function get_int64_le_exn(t, pos){
    return int64_to_int_exn(read_int64_swap$0(t, pos));
   }
   function unsafe_get_uint64_be_exn(t, pos){
    return uint64_to_int_exn(unsafe_get_int64_t_be(t, pos));
   }
   function unsafe_get_uint64_le_exn(t, pos){
    return uint64_to_int_exn(unsafe_read_int64_swap$0(t, pos));
   }
   function get_uint64_be_exn(t, pos){
    return uint64_to_int_exn(get_int64_t_be(t, pos));
   }
   function get_uint64_le_exn(t, pos){
    return uint64_to_int_exn(read_int64_swap$0(t, pos));
   }
   function set_uint64_be_exn(t, pos, n){
    check_valid_uint64(n, cst_Bigstring_set_uint64_be_ex);
    return write_int64_int$0(t, pos, n);
   }
   function set_uint64_le_exn(t, pos, n){
    check_valid_uint64(n, cst_Bigstring_set_uint64_le_ex);
    return write_int64_int_swap$0(t, pos, n);
   }
   function unsafe_set_uint8(t, pos, n){
    return caml_ba_set_1(t, pos, caml_call1(Base_Char[33], n));
   }
   function unsafe_set_int8(t, pos, n){
    var n$0 = 0 <= n ? n : n + 256 | 0;
    return caml_ba_set_1(t, pos, caml_call1(Base_Char[33], n$0));
   }
   function unsafe_get_uint8(t, pos){
    var _I_ = caml_ba_get_1(t, pos);
    return caml_call1(Base_Char[30], _I_);
   }
   function unsafe_get_int8(t, pos){
    var _H_ = caml_ba_get_1(t, pos), n = caml_call1(Base_Char[30], _H_);
    return 128 <= n ? n - 256 | 0 : n;
   }
   function set_uint8_exn(t, pos, n){
    var _E_ = n < 0 ? 1 : 0, _F_ = _E_ || (255 < n ? 1 : 0);
    if(_F_){
     var _G_ = caml_call3(sprintf, _f_, loc, n);
     caml_call1(Base[216], _G_);
    }
    return caml_ba_set_1(t, pos, caml_call1(Base_Char[33], n));
   }
   function set_int8_exn(t, pos, n){
    var _B_ = n < -128 ? 1 : 0, _C_ = _B_ || (127 < n ? 1 : 0);
    if(_C_){
     var _D_ = caml_call3(sprintf, _g_, loc$0, n);
     caml_call1(Base[216], _D_);
    }
    var n$0 = 0 <= n ? n : n + 256 | 0;
    return caml_ba_set_1(t, pos, caml_call1(Base_Char[33], n$0));
   }
   function get_uint8(t, pos){
    var _A_ = caml_ba_get_1(t, pos);
    return caml_call1(Base_Char[30], _A_);
   }
   function get_int8(t, pos){
    var _z_ = caml_ba_get_1(t, pos), n = caml_call1(Base_Char[30], _z_);
    return 128 <= n ? n - 256 | 0 : n;
   }
   function uint32_of_int32_t(n){return not_on_32bit ? n & 0 : n;}
   function unsafe_set_uint32_le(t, pos, n){
    return unsafe_write_int32_swap$0(t, pos, n);
   }
   function unsafe_set_uint32_be(t, pos, n){
    return unsafe_set_int32_t_be(t, pos, n);
   }
   function unsafe_get_uint32_le(t, pos){
    return uint32_of_int32_t(unsafe_read_int32_swap$0(t, pos));
   }
   function unsafe_get_uint32_be(t, pos){
    return uint32_of_int32_t(unsafe_get_int32_t_be(t, pos));
   }
   function set_uint32_le_exn(t, pos, n){
    check_valid_uint32(n, cst_Bigstring_set_uint32_le_ex);
    a:
    {
     if(not_on_32bit && -2147483648 <= n){var n$0 = n - 1 | 0; break a;}
     var n$0 = n;
    }
    return write_int32_int_swap_exn$0(t, pos, n$0);
   }
   function set_uint32_be_exn(t, pos, n){
    check_valid_uint32(n, cst_Bigstring_set_uint32_be_ex);
    a:
    {
     if(not_on_32bit && -2147483648 <= n){var n$0 = n - 1 | 0; break a;}
     var n$0 = n;
    }
    return write_int32_int_exn$0(t, pos, n$0);
   }
   function get_uint32_le(t, pos){
    return uint32_of_int32_t(read_int32_swap$0(t, pos));
   }
   function get_uint32_be(t, pos){
    return uint32_of_int32_t(get_int32_t_be(t, pos));
   }
   function get_uint8$0(t, pos){return get_uint8(t, pos);}
   function set_uint8(t, pos, x){
    return caml_ba_set_1(t, pos, caml_call1(Base_Char[33], x));
   }
   function get_uint16_ne(t, pos){return get_16(t, pos);}
   function set_uint16_ne(t, pos, x){return set_16_trunc(t, pos, x);}
   function get_int32_ne(t, pos){return get_32(t, pos);}
   function set_int32_ne(t, pos, x){return set_32(t, pos, x);}
   function get_int64_ne(t, pos){return get_64(t, pos);}
   function set_int64_ne(t, pos, x){return set_64(t, pos, x);}
   var
    _w_ =
      caml_call1
       (Int_repr[11],
        [0, get_uint8$0, get_uint16_ne, get_int32_ne, get_int64_ne]),
    get_int8$0 = _w_[1],
    get_uint8$1 = _w_[2],
    get_int16_le = _w_[3],
    get_int16_be$0 = _w_[4],
    get_uint16_le = _w_[5],
    get_uint16_be$0 = _w_[6],
    get_int32_le = _w_[7],
    get_int32_be = _w_[8],
    get_uint32_le$0 = _w_[9],
    get_uint32_be$0 = _w_[10],
    get_int64_le = _w_[11],
    get_int64_be = _w_[12],
    get_uint64_le = _w_[13],
    get_uint64_be = _w_[14],
    include$1 =
      caml_call1
       (Int_repr[12],
        [0, set_uint8, set_uint16_ne, set_int32_ne, set_int64_ne]),
    set_int8 = include$1[1],
    set_uint8$0 = include$1[2],
    set_int16_le = include$1[3],
    set_int16_be = include$1[4],
    set_uint16_le = include$1[5],
    set_uint16_be = include$1[6],
    set_int32_le = include$1[7],
    set_int32_be = include$1[8],
    set_uint32_le = include$1[9],
    set_uint32_be = include$1[10],
    set_int64_le = include$1[11],
    set_int64_be = include$1[12],
    set_uint64_le = include$1[13],
    set_uint64_be = include$1[14];
   function get_uint8$2(t, pos){return unsafe_get_uint8(t, pos);}
   function set_uint8$1(t, pos, x){return unsafe_set_uint8(t, pos, x);}
   var
    get_uint16_ne$0 = caml_ba_uint8_get16,
    set_uint16_ne$0 = caml_ba_uint8_set16,
    get_int32_ne$0 = caml_ba_uint8_get32,
    set_int32_ne$0 = caml_ba_uint8_set32,
    get_int64_ne$0 = caml_ba_uint8_get64,
    set_int64_ne$0 = caml_ba_uint8_set64,
    _x_ =
      caml_call1
       (Int_repr[11],
        [0, get_uint8$2, get_uint16_ne$0, get_int32_ne$0, get_int64_ne$0]),
    get_int8$1 = _x_[1],
    get_uint8$3 = _x_[2],
    get_int16_le$0 = _x_[3],
    get_int16_be$1 = _x_[4],
    get_uint16_le$0 = _x_[5],
    get_uint16_be$1 = _x_[6],
    get_int32_le$0 = _x_[7],
    get_int32_be$0 = _x_[8],
    get_uint32_le$1 = _x_[9],
    get_uint32_be$1 = _x_[10],
    get_int64_le$0 = _x_[11],
    get_int64_be$0 = _x_[12],
    get_uint64_le$0 = _x_[13],
    get_uint64_be$0 = _x_[14],
    include$2 =
      caml_call1
       (Int_repr[12],
        [0, set_uint8$1, set_uint16_ne$0, set_int32_ne$0, set_int64_ne$0]),
    set_int8$0 = include$2[1],
    set_uint8$2 = include$2[2],
    set_int16_le$0 = include$2[3],
    set_int16_be$0 = include$2[4],
    set_uint16_le$0 = include$2[5],
    set_uint16_be$0 = include$2[6],
    set_int32_le$0 = include$2[7],
    set_int32_be$0 = include$2[8],
    set_uint32_le$0 = include$2[9],
    set_uint32_be$0 = include$2[10],
    set_int64_le$0 = include$2[11],
    set_int64_be$0 = include$2[12],
    set_uint64_le$0 = include$2[13],
    set_uint64_be$0 = include$2[14],
    Private = [0, sign_extend_16];
   caml_call1(Ppx_inline_test_lib[6], cst_base_bigstring);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Base_bigstring);
   var
    Base_bigstring =
      [0,
       compare_t_frozen,
       t_frozen_of_sexp,
       sexp_of_t_frozen,
       compare_t_frozen,
       hash_fold_t_frozen,
       hash_t_frozen,
       sexp_of_t_frozen,
       t_frozen_of_sexp,
       equal,
       create,
       init,
       of_string,
       of_bytes,
       to_string,
       to_bytes,
       concat,
       check_args,
       get_opt_len,
       length,
       blit,
       blito,
       unsafe_blit$0,
       sub,
       subo,
       copy,
       To_string,
       From_string,
       To_bytes,
       From_bytes,
       memset,
       memcmp,
       memcmp_bytes,
       find,
       memmem,
       get_int8,
       set_int8_exn,
       get_uint8,
       set_uint8_exn,
       unsafe_get_int8,
       unsafe_set_int8,
       unsafe_get_uint8,
       unsafe_set_uint8,
       read_int16_swap$0,
       get_int16_be,
       write_int16_swap_exn$0,
       set_int16_be_exn,
       unsafe_read_int16_swap$0,
       unsafe_get_int16_be,
       unsafe_write_int16_swap$0,
       unsafe_set_int16_be,
       read_uint16_swap$0,
       get_uint16_be,
       write_uint16_swap_exn$0,
       set_uint16_be_exn,
       unsafe_read_uint16_swap$0,
       unsafe_get_uint16_be,
       unsafe_write_uint16_swap$0,
       unsafe_set_uint16_be,
       read_int32_int_swap$0,
       read_int32_int$0,
       write_int32_int_swap_exn$0,
       write_int32_int_exn$0,
       unsafe_read_int32_int_swap$0,
       unsafe_read_int32_int$0,
       unsafe_write_int32_int_swap$0,
       unsafe_write_int32_int$0,
       get_uint32_le,
       get_uint32_be,
       set_uint32_le_exn,
       set_uint32_be_exn,
       unsafe_get_uint32_le,
       unsafe_get_uint32_be,
       unsafe_set_uint32_le,
       unsafe_set_uint32_be,
       get_int64_le_exn,
       get_int64_be_exn,
       read_int64_int_swap$0,
       get_int64_be_trunc,
       write_int64_int_swap$0,
       write_int64_int$0,
       unsafe_get_int64_le_exn,
       unsafe_get_int64_be_exn,
       unsafe_read_int64_int_swap$0,
       unsafe_get_int64_be_trunc,
       unsafe_write_int64_int_swap$0,
       unsafe_write_int64_int$0,
       get_uint64_be_exn,
       get_uint64_le_exn,
       set_uint64_le_exn,
       set_uint64_be_exn,
       unsafe_get_uint64_be_exn,
       unsafe_get_uint64_le_exn,
       unsafe_write_int64_int_swap$0,
       unsafe_write_int64_int$0,
       read_int32_swap$0,
       get_int32_t_be,
       write_int32_swap$0,
       set_int32_t_be,
       unsafe_read_int32_swap$0,
       unsafe_get_int32_t_be,
       unsafe_write_int32_swap$0,
       unsafe_set_int32_t_be,
       read_int64_swap$0,
       get_int64_t_be,
       set_int64_t_le,
       set_int64_t_be,
       unsafe_read_int64_swap$0,
       unsafe_get_int64_t_be,
       unsafe_write_int64_swap$0,
       unsafe_set_int64_t_be,
       [0,
        get_int64_t_le,
        read_int64_local$0,
        unsafe_read_int64_swap_local$0,
        unsafe_read_int64_local$0],
       [0,
        get_int8$0,
        get_uint8$1,
        get_int16_le,
        get_int16_be$0,
        get_uint16_le,
        get_uint16_be$0,
        get_int32_le,
        get_int32_be,
        get_uint32_le$0,
        get_uint32_be$0,
        get_int64_le,
        get_int64_be,
        get_uint64_le,
        get_uint64_be,
        set_int8,
        set_uint8$0,
        set_int16_le,
        set_int16_be,
        set_uint16_le,
        set_uint16_be,
        set_int32_le,
        set_int32_be,
        set_uint32_le,
        set_uint32_be,
        set_int64_le,
        set_int64_be,
        set_uint64_le,
        set_uint64_be,
        [0,
         get_int8$1,
         get_uint8$3,
         get_int16_le$0,
         get_int16_be$1,
         get_uint16_le$0,
         get_uint16_be$1,
         get_int32_le$0,
         get_int32_be$0,
         get_uint32_le$1,
         get_uint32_be$1,
         get_int64_le$0,
         get_int64_be$0,
         get_uint64_le$0,
         get_uint64_be$0,
         set_int8$0,
         set_uint8$2,
         set_int16_le$0,
         set_int16_be$0,
         set_uint16_le$0,
         set_uint16_be$0,
         set_int32_le$0,
         set_int32_be$0,
         set_uint32_le$0,
         set_uint32_be$0,
         set_int64_le$0,
         set_int64_be$0,
         set_uint64_le$0,
         set_uint64_be$0]],
       Private];
   runtime.caml_register_global(75, Base_bigstring, cst_Base_bigstring$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
