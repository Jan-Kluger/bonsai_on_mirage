// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Command__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Command = [0];
   runtime.caml_register_global(0, Command, "Command__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Command__Import
//# unitInfo: Requires: Base__Printf, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Stdio
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Command_Import = "Command__Import",
    cst_command = "command";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Stdio = global_data.Stdio,
    Base_Printf = global_data.Base__Printf;
   caml_call1(Ppx_module_timer_runtime[4], cst_Command_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_command);
   caml_call1(Expect_test_collector[6][1], "command/src/import.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_command, "import.ml");
   var
    eprintf = Stdio[7],
    printf = Stdio[4],
    print_s = Stdio[5],
    print_string = Stdio[8],
    print_endline = Stdio[9],
    prerr_endline = Stdio[10],
    sprintf = Base_Printf[2],
    failwithf = Base_Printf[6],
    ksprintf = Base_Printf[4];
   caml_call1(Ppx_inline_test_lib[6], cst_command);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Command_Import);
   var
    Command_Import =
      [0,
       eprintf,
       printf,
       print_s,
       print_string,
       print_endline,
       prerr_endline,
       sprintf,
       failwithf,
       ksprintf];
   runtime.caml_register_global(13, Command_Import, cst_Command_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Command__Env_var
//# unitInfo: Requires: Base, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Command_Env_var = "Command__Env_var",
    cst_command = "command";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    all = [0, 0, [0, 1, [0, 2, 0]]],
    Base = global_data.Base,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Command_Env_var);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_command);
   caml_call1(Expect_test_collector[6][1], "command/src/env_var.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_command, "env_var.ml");
   var
    compare = runtime.caml_int_compare,
    _a_ = [0, "COMMAND_OUTPUT_INSTALLATION_BASH"],
    _b_ = [0, "COMMAND_OUTPUT_HELP_SEXP"],
    _c_ = [0, "COMP_CWORD"];
   function sexp_of_t(param){
    switch(param){case 0: return _a_;case 1: return _b_;default: return _c_;
    }
   }
   function to_string(t){
    var _d_ = sexp_of_t(t);
    return caml_call1(Base[85][15], _d_);
   }
   caml_call1(Ppx_inline_test_lib[6], cst_command);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Command_Env_var);
   var Command_Env_var = [0, compare, all, sexp_of_t, to_string];
   runtime.caml_register_global(16, Command_Env_var, cst_Command_Env_var);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Command__Shape
//# unitInfo: Requires: Base, Base__Char, Base__Error, Base__Field, Base__Fn, Base__Int, Base__Invariant, Base__Lazy, Base__List, Base__Option, Base__Or_error, Base__Result, Base__Set, Base__String, Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Write, Bin_shape, CamlinternalLazy, Command__Env_var, Command__Import, Expect_test_collector, Expect_test_common__File, Expect_test_config, Filename_base, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_compare_lib, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record, Stable_witness, Stdlib, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$7 = "",
    cst$8 = " ",
    cst$6 = ", ",
    cst$5 = "-",
    cst_Ad_hoc = "Ad_hoc",
    cst_Base = "Base",
    cst_Basic = "Basic",
    cst_Command_Shape$0 = "Command__Shape",
    cst_Concat = "Concat",
    cst_Exec = "Exec",
    cst_Grammar = "Grammar",
    cst_Group = "Group",
    cst_Lazy = "Lazy",
    cst_Many = "Many",
    cst_Maybe = "Maybe",
    cst_One = "One",
    cst_Usage = "Usage",
    cst_V1 = "V1",
    cst_V2 = "V2",
    cst_V3 = "V3",
    cst_Zero = "Zero",
    cst_build_info = "[-build-info]",
    cst_help = "[-help]",
    cst_version = "[-version]",
    cst_a = "a",
    cst_ad_hoc = "ad_hoc",
    cst_aliases$2 = "aliases",
    cst_anons$2 = "anons",
    cst_at_least_once$0 = "at_least_once",
    cst_at_most_once$0 = "at_most_once",
    cst_base = "base",
    cst_basic = "basic",
    cst_bug_in_command_ml$1 = "bug in command.ml",
    cst_child_subcommand$2 = "child_subcommand",
    cst_command$0 = "command",
    cst_command_src_shape_ml$4 = "command/src/shape.ml",
    cst_concat = "concat",
    cst_doc$2 = "doc",
    cst_exec = "exec",
    cst_flags$3 = "flags",
    cst_grammar = "grammar",
    cst_group = "group",
    cst_help$0 = "help",
    cst_lazy = "lazy",
    cst_many = "many",
    cst_maybe = "maybe",
    cst_name$2 = "name",
    cst_one = "one",
    cst_path_to_exe$4 = "path_to_exe",
    cst_readme$12 = "readme",
    cst_subcommands$3 = "subcommands",
    cst_summary$12 = "summary",
    cst_usage$0 = "usage",
    cst_v1 = "v1",
    cst_v2 = "v2",
    cst_v3 = "v3",
    cst_version$0 = "version",
    cst_working_dir$3 = "working_dir",
    cst_zero = "zero",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_string_compare = runtime.caml_string_compare,
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$4 = cst$5,
    cst$3 = cst$5,
    cst$2 = cst$7,
    cst$1 = cst$8,
    flag_name = cst_name$2,
    cst$0 = "/",
    cst = cst$7,
    error_source_022 = "command/src/shape.ml.Stable.Anons.Grammar.V1.t",
    error_source_067 = "command/src/shape.ml.Stable.Anons.V2.t",
    error_source_088 = "command/src/shape.ml.Stable.Flag_info.V1.t",
    error_source_104 = "command/src/shape.ml.Stable.Base_info.V2.t",
    error_source_118 = "command/src/shape.ml.Stable.Base_info.V1.t",
    error_source_145 = "command/src/shape.ml.Stable.Group_info.V2.t",
    error_source_178 = "command/src/shape.ml.Stable.Group_info.V1.t",
    error_source_206 = "command/src/shape.ml.Stable.Exec_info.V3.t",
    error_source_222 = "command/src/shape.ml.Stable.Exec_info.V2.t",
    error_source_236 = "command/src/shape.ml.Stable.Exec_info.V1.t",
    error_source_261 = "command/src/shape.ml.Stable.Fully_forced.V1.t",
    error_source_290 = "command/src/shape.ml.Stable.Sexpable.V3.t",
    error_source_322 = "command/src/shape.ml.Stable.Sexpable.V2.t",
    error_source_347 = "command/src/shape.ml.Stable.Sexpable.V1.t",
    error_source_372 = "command/src/shape.ml.Stable.Sexpable.Versioned.t",
    error_source_411 = "command/src/shape.ml.Anons.Grammar.t",
    error_source_456 = "command/src/shape.ml.Anons.t",
    enumerate_474 = [0, 0, [0, 1, 0]],
    enumerate_475 = [0, 0, [0, 1, 0]],
    names = [0, cst_at_least_once$0, [0, cst_at_most_once$0, 0]],
    maybe_missing_prefix = "[",
    maybe_missing_suffix = "]",
    maybe_more_suffix = " ...",
    names$0 = [0, cst_name$2, [0, cst_doc$2, [0, cst_aliases$2, 0]]],
    error_source_499 = "command/src/shape.ml.Flag_info.t",
    indentation = "  ",
    spacing_dot = ". ",
    names$1 =
      [0,
       cst_summary$12,
       [0, cst_readme$12, [0, cst_anons$2, [0, cst_flags$3, 0]]]],
    error_source_517 = "command/src/shape.ml.Base_info.t",
    names$2 =
      [0, cst_summary$12, [0, cst_readme$12, [0, cst_subcommands$3, 0]]],
    error_source_546 = "command/src/shape.ml.Group_info.t",
    names$3 =
      [0,
       cst_summary$12,
       [0,
        cst_readme$12,
        [0,
         cst_working_dir$3,
         [0, cst_path_to_exe$4, [0, cst_child_subcommand$2, 0]]]]],
    error_source_574 = "command/src/shape.ml.Exec_info.t",
    error_source_603 = "command/src/shape.ml.Fully_forced.t",
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Set = global_data.Base__Set,
    Base_Lazy = global_data.Base__Lazy,
    Base_List = global_data.Base__List,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base = global_data.Base,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Base_Field = global_data.Base__Field,
    Base_String = global_data.Base__String,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_Error = global_data.Base__Error,
    Base_Result = global_data.Base__Result,
    Base_Or_error = global_data.Base__Or_error,
    Base_Char = global_data.Base__Char,
    Command_Import = global_data.Command__Import,
    Assert_failure = global_data.Assert_failure,
    Expect_test_common_File = global_data.Expect_test_common__File,
    Base_Option = global_data.Base__Option,
    Stdlib_List = global_data.Stdlib__List,
    Stable_witness = global_data.Stable_witness,
    Ppx_compare_lib = global_data.Ppx_compare_lib,
    Filename_base = global_data.Filename_base;
   global_data.Bin_prot__Read;
   global_data.Bin_prot__Common;
   global_data.Bin_prot__Write;
   var
    Stdlib = global_data.Stdlib,
    Base_Invariant = global_data.Base__Invariant,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_shape = global_data.Bin_shape,
    Base_Fn = global_data.Base__Fn,
    Expect_test_config = global_data.Expect_test_config,
    Inline_test_config = global_data.Inline_test_config,
    Command_Env_var = global_data.Command__Env_var,
    Base_Int = global_data.Base__Int;
   caml_call1(Ppx_module_timer_runtime[4], cst_Command_Shape$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_command$0);
   caml_call1(Expect_test_collector[6][1], cst_command_src_shape_ml$4);
   caml_call2(Ppx_inline_test_lib[5], cst_command$0, "shape.ml");
   var
    t_of_sexp = Sexplib0_Sexp_conv[40],
    sexp_of_t = Sexplib0_Sexp_conv[16],
    compare = Base_Lazy[1];
   function compare$0(a_006, b_007){
    var a_006$0 = a_006, b_007$0 = b_007;
    for(;;){
     if(a_006$0 === b_007$0) return 0;
     if(typeof a_006$0 === "number")
      return typeof b_007$0 === "number" ? 0 : -1;
     a:
     {
      b:
      {
       c:
       {
        switch(a_006$0[0]){
          case 0:
           var a_008 = a_006$0[1];
           if(typeof b_007$0 === "number") break a;
           if(0 !== b_007$0[0]) return -1;
           var b_009 = b_007$0[1];
           return caml_call2(Ppx_compare_lib[5][8], a_008, b_009);
          case 1:
           var a_010 = a_006$0[1];
           if(typeof b_007$0 === "number") break a;
           switch(b_007$0[0]){
             case 0:
              break b;
             case 1:
              var b_011 = b_007$0[1];
              a_006$0 = a_010;
              b_007$0 = b_011;
              continue;
             default: return -1;
           }
          case 2:
           var a_012 = a_006$0[1];
           if(typeof b_007$0 === "number") break a;
           switch(b_007$0[0]){
             case 0:
              break b;
             case 1:
              break c;
             case 2:
              var b_013 = b_007$0[1];
              a_006$0 = a_012;
              b_007$0 = b_013;
              continue;
             default: return -1;
           }
          case 3:
           var a_014 = a_006$0[1];
           if(typeof b_007$0 === "number") break a;
           switch(b_007$0[0]){
             case 0:
              break b;
             case 1:
              break c;
             case 2: break;
             case 3:
              var b_015 = b_007$0[1];
              return caml_call3
                      (Ppx_compare_lib[5][11],
                       function(a_016, b_017){return compare$0(a_016, b_017);},
                       a_014,
                       b_015);
             default: return -1;
           }
           break;
          default:
           var a_018 = a_006$0[1];
           if(typeof b_007$0 === "number") break a;
           switch(b_007$0[0]){
             case 0:
              break b;
             case 1:
              break c;
             case 2: break;
             case 3:
              return 1;
             default:
              var b_019 = b_007$0[1];
              return caml_call2(Ppx_compare_lib[5][8], a_018, b_019);
           }
        }
        return 1;
       }
       return 1;
      }
      return 1;
     }
     return 1;
    }
   }
   var letrec_function_context = [];
   function t_of_sexp$0(sexp_024){
    a:
    {
     if(0 === sexp_024[0]){
      var _e8_ = sexp_024[1], _e9_ = caml_string_compare(_e8_, cst_ad_hoc);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           if(0 <= _e9_){
            if(0 < _e9_){
             if(_e8_ === cst_concat) break f;
             if(_e8_ === cst_many) break e;
             if(_e8_ === cst_maybe) break d;
             if(_e8_ === cst_one) break c;
             if(_e8_ !== cst_zero) break a;
             break b;
            }
           }
           else if(_e8_ !== cst_Ad_hoc){
            if(_e8_ === cst_Concat) break f;
            if(_e8_ === cst_Many) break e;
            if(_e8_ === cst_Maybe) break d;
            if(_e8_ === cst_One) break c;
            if(_e8_ !== cst_Zero) break a;
            break b;
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],
                    letrec_function_context[1],
                    sexp_024);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[5],
                   letrec_function_context[1],
                   sexp_024);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5],
                  letrec_function_context[1],
                  sexp_024);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5],
                 letrec_function_context[1],
                 sexp_024);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5],
                letrec_function_context[1],
                sexp_024);
      }
      return 0;
     }
     var _e__ = sexp_024[1];
     if(! _e__)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7],
               letrec_function_context[1],
               sexp_024);
     var _e$_ = _e__[1];
     if(0 !== _e$_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6],
               letrec_function_context[1],
               sexp_024);
     var tag_025 = _e$_[1], _fa_ = caml_string_compare(tag_025, cst_ad_hoc);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          if(0 <= _fa_){
           if(0 < _fa_){
            if(tag_025 === cst_concat) break f;
            if(tag_025 === cst_many) break e;
            if(tag_025 === cst_maybe) break d;
            if(tag_025 === cst_one) break c;
            if(tag_025 !== cst_zero) break a;
            break b;
           }
          }
          else if(tag_025 !== cst_Ad_hoc){
           if(tag_025 === cst_Concat) break f;
           if(tag_025 === cst_Many) break e;
           if(tag_025 === cst_Maybe) break d;
           if(tag_025 === cst_One) break c;
           if(tag_025 !== cst_Zero) break a;
           break b;
          }
          var sexp_args_046 = _e__[2];
          if(sexp_args_046 && ! sexp_args_046[2]){
           var
            arg0_047 = sexp_args_046[1],
            res0_048 = caml_call1(Sexplib0_Sexp_conv[31], arg0_047);
           return [4, res0_048];
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4],
                   letrec_function_context[1],
                   tag_025,
                   sexp_024);
         }
         var sexp_args_041 = _e__[2];
         if(sexp_args_041 && ! sexp_args_041[2]){
          var
           arg0_042 = sexp_args_041[1],
           res0_043 =
             caml_call2(Sexplib0_Sexp_conv[44], t_of_sexp$0, arg0_042);
          return [3, res0_043];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[4],
                  letrec_function_context[1],
                  tag_025,
                  sexp_024);
        }
        var sexp_args_031 = _e__[2];
        if(sexp_args_031 && ! sexp_args_031[2]){
         var arg0_032 = sexp_args_031[1], res0_033 = t_of_sexp$0(arg0_032);
         return [1, res0_033];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[4],
                 letrec_function_context[1],
                 tag_025,
                 sexp_024);
       }
       var sexp_args_036 = _e__[2];
       if(sexp_args_036 && ! sexp_args_036[2]){
        var arg0_037 = sexp_args_036[1], res0_038 = t_of_sexp$0(arg0_037);
        return [2, res0_038];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                letrec_function_context[1],
                tag_025,
                sexp_024);
      }
      var sexp_args_026 = _e__[2];
      if(sexp_args_026 && ! sexp_args_026[2]){
       var
        arg0_027 = sexp_args_026[1],
        res0_028 = caml_call1(Sexplib0_Sexp_conv[31], arg0_027);
       return [0, res0_028];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               letrec_function_context[1],
               tag_025,
               sexp_024);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3],
              letrec_function_context[1],
              sexp_024);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[8],
             letrec_function_context[1],
             sexp_024);
   }
   caml_update_dummy(letrec_function_context, [0, error_source_022]);
   var
    _a_ = [0, cst_Zero],
    _b_ = [0, cst_One],
    _c_ = [0, cst_Many],
    _d_ = [0, cst_Maybe],
    _e_ = [0, cst_Concat],
    _f_ = [0, cst_Ad_hoc];
   function sexp_of_t$0(param){
    if(typeof param === "number") return _a_;
    switch(param[0]){
      case 0:
       var
        arg0_049 = param[1],
        res0_050 = caml_call1(Sexplib0_Sexp_conv[7], arg0_049);
       return [1, [0, _b_, [0, res0_050, 0]]];
      case 1:
       var arg0_051 = param[1], res0_052 = sexp_of_t$0(arg0_051);
       return [1, [0, _c_, [0, res0_052, 0]]];
      case 2:
       var arg0_053 = param[1], res0_054 = sexp_of_t$0(arg0_053);
       return [1, [0, _d_, [0, res0_054, 0]]];
      case 3:
       var
        arg0_055 = param[1],
        res0_056 = caml_call2(Sexplib0_Sexp_conv[20], sexp_of_t$0, arg0_055);
       return [1, [0, _e_, [0, res0_056, 0]]];
      default:
       var
        arg0_057 = param[1],
        res0_058 = caml_call1(Sexplib0_Sexp_conv[7], arg0_057);
       return [1, [0, _f_, [0, res0_058, 0]]];
    }
   }
   var
    stable_witness = Stable_witness[6],
    cst_Many_Zero_should_be_just_Z = "Many Zero should be just Zero",
    cst_Maybe_Zero_should_be_just_ = "Maybe Zero should be just Zero",
    cst_Flatten_zero_and_one_eleme = "Flatten zero and one-element Concat",
    _g_ = [0, cst_command_src_shape_ml$4, 25, 586, 621],
    cst_bug_in_command_ml = cst_bug_in_command_ml$1,
    _h_ = [0, [12, 91, [2, 0, [11, " ...]", 0]]], "[%s ...]"],
    _i_ = [0, [11, "[(", [2, 0, [11, ") ...]", 0]]], "[(%s) ...]"],
    cst_bug_in_command_ml$0 = cst_bug_in_command_ml$1,
    _j_ = [0, [12, 91, [2, 0, [12, 93, 0]]], "[%s]"],
    _k_ = [0, cst$8],
    _l_ = [0, cst_Usage],
    _m_ = [0, cst_Grammar];
   function invariant(t){
    return caml_call4
            (Base_Invariant[1],
             _g_,
             t,
             sexp_of_t$0,
             function(param){
              if(typeof t === "number") return 0;
              switch(t[0]){
                case 0:
                 return 0;
                case 1:
                 var t$0 = t[1];
                 return typeof t$0 === "number"
                         ? caml_call1(Stdlib[2], cst_Many_Zero_should_be_just_Z)
                         : invariant(t$0);
                case 2:
                 var t$1 = t[1];
                 return typeof t$1 === "number"
                         ? caml_call1(Stdlib[2], cst_Maybe_Zero_should_be_just_)
                         : invariant(t$1);
                case 3:
                 var ts = t[1];
                 if(ts && ts[2])
                  return caml_call2(Base_List[19], ts, invariant);
                 return caml_call1(Stdlib[2], cst_Flatten_zero_and_one_eleme);
                default: return 0;
              }
             });
   }
   function t_of_sexp$1(sexp){
    var t = t_of_sexp$0(sexp);
    invariant(t);
    return t;
   }
   function usage(param){
    if(typeof param === "number") return cst;
    switch(param[0]){
      case 0:
       var usage$0 = param[1]; return usage$0;
      case 1:
       var t = param[1];
       if(typeof t === "number")
        return caml_call1(Stdlib[2], cst_bug_in_command_ml);
       if(0 === t[0]){
        var _e4_ = usage(t);
        return caml_call2(Command_Import[7], _h_, _e4_);
       }
       var _e5_ = usage(t);
       return caml_call2(Command_Import[7], _i_, _e5_);
      case 2:
       var t$0 = param[1];
       if(typeof t$0 === "number")
        return caml_call1(Stdlib[2], cst_bug_in_command_ml$0);
       var _e6_ = usage(t$0);
       return caml_call2(Command_Import[7], _j_, _e6_);
      case 3:
       var ts = param[1], _e7_ = caml_call2(Base_List[52], ts, usage);
       return caml_call2(Base_String[67], _k_, _e7_);
      default: var usage$1 = param[1]; return usage$1;
    }
   }
   function compare$1(a_059, b_060){
    if(a_059 === b_060) return 0;
    if(0 === a_059[0]){
     var a_061 = a_059[1];
     if(0 !== b_060[0]) return -1;
     var b_062 = b_060[1];
     return caml_call2(Ppx_compare_lib[5][8], a_061, b_062);
    }
    var a_063 = a_059[1];
    if(0 === b_060[0]) return 1;
    var b_064 = b_060[1];
    return compare$0(a_063, b_064);
   }
   function t_of_sexp$2(sexp_069){
    a:
    {
     if(0 === sexp_069[0]){
      var _e1_ = sexp_069[1];
      b:
      if(_e1_ !== cst_Grammar){
       if(_e1_ !== cst_Usage){
        if(_e1_ === cst_grammar) break b;
        if(_e1_ !== cst_usage$0) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_067, sexp_069);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5], error_source_067, sexp_069);
     }
     var _e2_ = sexp_069[1];
     if(! _e2_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_067, sexp_069);
     var _e3_ = _e2_[1];
     if(0 !== _e3_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_067, sexp_069);
     var tag_070 = _e3_[1];
     b:
     if(tag_070 !== cst_Grammar){
      if(tag_070 !== cst_Usage){
       if(tag_070 === cst_grammar) break b;
       if(tag_070 !== cst_usage$0) break a;
      }
      var sexp_args_071 = _e2_[2];
      if(sexp_args_071 && ! sexp_args_071[2]){
       var
        arg0_072 = sexp_args_071[1],
        res0_073 = caml_call1(Sexplib0_Sexp_conv[31], arg0_072);
       return [0, res0_073];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_067,
               tag_070,
               sexp_069);
     }
     var sexp_args_076 = _e2_[2];
     if(sexp_args_076 && ! sexp_args_076[2]){
      var arg0_077 = sexp_args_076[1], res0_078 = t_of_sexp$1(arg0_077);
      return [1, res0_078];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4],
              error_source_067,
              tag_070,
              sexp_069);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_067, sexp_069);
   }
   function sexp_of_t$1(param){
    if(0 === param[0]){
     var
      arg0_079 = param[1],
      res0_080 = caml_call1(Sexplib0_Sexp_conv[7], arg0_079);
     return [1, [0, _l_, [0, res0_080, 0]]];
    }
    var arg0_081 = param[1], res0_082 = sexp_of_t$0(arg0_081);
    return [1, [0, _m_, [0, res0_082, 0]]];
   }
   var
    stable_witness$0 = Stable_witness[6],
    cst_aliases = cst_aliases$2,
    cst_doc = cst_doc$2,
    cst_name = cst_name$2,
    _n_ = [0, cst_aliases$2],
    _o_ = [0, cst_doc$2],
    _p_ = [0, cst_name$2];
   function compare$2(a_083, b_084){
    if(a_083 === b_084) return 0;
    var n = caml_call2(Ppx_compare_lib[5][8], a_083[1], b_084[1]);
    if(0 !== n) return n;
    var n$0 = caml_call2(Ppx_compare_lib[5][8], a_083[2], b_084[2]);
    return 0 === n$0
            ? caml_call3
              (Ppx_compare_lib[5][11],
               function(a_085, b_086){
                return caml_call2(Ppx_compare_lib[5][8], a_085, b_086);
               },
               a_083[3],
               b_084[3])
            : n$0;
   }
   function t_of_sexp$3(x_089){
    var
     _eZ_ =
       [0,
        cst_aliases,
        1,
        caml_call1(Sexplib0_Sexp_conv[44], Sexplib0_Sexp_conv[31]),
        0];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_088,
             [0,
              cst_name,
              1,
              Sexplib0_Sexp_conv[31],
              [0, cst_doc, 1, Sexplib0_Sexp_conv[31], _eZ_]],
             function(param){
              return param !== cst_aliases$2
                      ? param !== cst_doc$2 ? param !== cst_name$2 ? -1 : 0 : 1
                      : 2;
             },
             0,
             function(param){
              var
               _e0_ = param[2],
               aliases = _e0_[2][1],
               doc = _e0_[1],
               name = param[1];
              return [0, name, doc, aliases];
             },
             x_089);
   }
   function sexp_of_t$2(param){
    var
     aliases_095 = param[3],
     doc_093 = param[2],
     name_091 = param[1],
     arg_096 =
       caml_call2(Sexplib0_Sexp_conv[20], Sexplib0_Sexp_conv[7], aliases_095),
     bnds_090 = [0, [1, [0, _n_, [0, arg_096, 0]]], 0],
     arg_094 = caml_call1(Sexplib0_Sexp_conv[7], doc_093),
     bnds_090$0 = [0, [1, [0, _o_, [0, arg_094, 0]]], bnds_090],
     arg_092 = caml_call1(Sexplib0_Sexp_conv[7], name_091),
     bnds_090$1 = [0, [1, [0, _p_, [0, arg_092, 0]]], bnds_090$0];
    return [1, bnds_090$1];
   }
   var
    stable_witness$1 = Stable_witness[6],
    cst_flags = cst_flags$3,
    cst_anons = cst_anons$2,
    cst_readme = cst_readme$12,
    cst_summary = cst_summary$12,
    _q_ = [0, cst_flags$3],
    _r_ = [0, cst_anons$2],
    _s_ = [0, cst_readme$12],
    _t_ = [0, cst_summary$12];
   function compare$3(a_097, b_098){
    if(a_097 === b_098) return 0;
    var n = caml_call2(Ppx_compare_lib[5][8], a_097[1], b_098[1]);
    if(0 !== n) return n;
    var
     n$0 =
       caml_call3
        (Ppx_compare_lib[5][12],
         function(a_099, b_100){
          return caml_call2(Ppx_compare_lib[5][8], a_099, b_100);
         },
         a_097[2],
         b_098[2]);
    if(0 !== n$0) return n$0;
    var n$1 = compare$1(a_097[3], b_098[3]);
    return 0 === n$1
            ? caml_call3
              (Ppx_compare_lib[5][11],
               function(a_101, b_102){return compare$2(a_101, b_102);},
               a_097[4],
               b_098[4])
            : n$1;
   }
   function t_of_sexp$4(x_105){
    var
     _eW_ =
       [0,
        cst_anons,
        1,
        t_of_sexp$2,
        [0, cst_flags, 1, caml_call1(Sexplib0_Sexp_conv[44], t_of_sexp$3), 0]];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_104,
             [0,
              cst_summary,
              1,
              Sexplib0_Sexp_conv[31],
              [0, cst_readme, 5, Sexplib0_Sexp_conv[31], _eW_]],
             function(param){
              return param !== cst_anons$2
                      ? param
                        !== cst_flags$3
                        ? param
                          !== cst_readme$12
                          ? param !== cst_summary$12 ? -1 : 0
                          : 1
                        : 3
                      : 2;
             },
             0,
             function(param){
              var
               _eX_ = param[2],
               _eY_ = _eX_[2],
               flags = _eY_[2][1],
               anons = _eY_[1],
               readme = _eX_[1],
               summary = param[1];
              return [0, summary, readme, anons, flags];
             },
             x_105);
   }
   function sexp_of_t$3(param){
    var
     flags_115 = param[4],
     anons_113 = param[3],
     readme_109 = param[2],
     summary_107 = param[1],
     arg_116 = caml_call2(Sexplib0_Sexp_conv[20], sexp_of_t$2, flags_115),
     bnds_106 = [0, [1, [0, _q_, [0, arg_116, 0]]], 0],
     arg_114 = sexp_of_t$1(anons_113),
     bnds_106$0 = [0, [1, [0, _r_, [0, arg_114, 0]]], bnds_106];
    if(readme_109)
     var
      v_110 = readme_109[1],
      arg_112 = caml_call1(Sexplib0_Sexp_conv[7], v_110),
      bnd_111 = [1, [0, _s_, [0, arg_112, 0]]],
      bnds_106$1 = [0, bnd_111, bnds_106$0];
    else
     var bnds_106$1 = bnds_106$0;
    var
     arg_108 = caml_call1(Sexplib0_Sexp_conv[7], summary_107),
     bnds_106$2 = [0, [1, [0, _t_, [0, arg_108, 0]]], bnds_106$1];
    return [1, bnds_106$2];
   }
   var
    stable_witness$2 = Stable_witness[6],
    cst_flags$0 = cst_flags$3,
    cst_usage = cst_usage$0,
    cst_readme$0 = cst_readme$12,
    cst_summary$0 = cst_summary$12,
    _u_ = [0, cst_flags$3],
    _v_ = [0, cst_usage$0],
    _w_ = [0, cst_readme$12],
    _x_ = [0, cst_summary$12];
   function t_of_sexp$5(x_119){
    var
     _eT_ =
       [0, cst_flags$0, 1, caml_call1(Sexplib0_Sexp_conv[44], t_of_sexp$3), 0];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_118,
             [0,
              cst_summary$0,
              1,
              Sexplib0_Sexp_conv[31],
              [0,
               cst_readme$0,
               5,
               Sexplib0_Sexp_conv[31],
               [0, cst_usage, 1, Sexplib0_Sexp_conv[31], _eT_]]],
             function(param){
              return param !== cst_flags$3
                      ? param
                        !== cst_readme$12
                        ? param
                          !== cst_summary$12
                          ? param !== cst_usage$0 ? -1 : 2
                          : 0
                        : 1
                      : 3;
             },
             0,
             function(param){
              var
               _eU_ = param[2],
               _eV_ = _eU_[2],
               flags = _eV_[2][1],
               usage = _eV_[1],
               readme = _eU_[1],
               summary = param[1];
              return [0, summary, readme, usage, flags];
             },
             x_119);
   }
   function sexp_of_t$4(param){
    var
     flags_129 = param[4],
     usage_127 = param[3],
     readme_123 = param[2],
     summary_121 = param[1],
     arg_130 = caml_call2(Sexplib0_Sexp_conv[20], sexp_of_t$2, flags_129),
     bnds_120 = [0, [1, [0, _u_, [0, arg_130, 0]]], 0],
     arg_128 = caml_call1(Sexplib0_Sexp_conv[7], usage_127),
     bnds_120$0 = [0, [1, [0, _v_, [0, arg_128, 0]]], bnds_120];
    if(readme_123)
     var
      v_124 = readme_123[1],
      arg_126 = caml_call1(Sexplib0_Sexp_conv[7], v_124),
      bnd_125 = [1, [0, _w_, [0, arg_126, 0]]],
      bnds_120$1 = [0, bnd_125, bnds_120$0];
    else
     var bnds_120$1 = bnds_120$0;
    var
     arg_122 = caml_call1(Sexplib0_Sexp_conv[7], summary_121),
     bnds_120$2 = [0, [1, [0, _x_, [0, arg_122, 0]]], bnds_120$1];
    return [1, bnds_120$2];
   }
   var stable_witness$3 = Stable_witness[6];
   function to_latest(param){
    var
     flags = param[4],
     usage = param[3],
     readme = param[2],
     summary = param[1];
    return [0, summary, readme, [0, usage], flags];
   }
   function of_latest(param){
    var
     flags = param[4],
     anons = param[3],
     readme = param[2],
     summary = param[1];
    if(0 === anons[0])
     var usage$0 = anons[1], usage$1 = usage$0;
    else
     var grammar = anons[1], usage$1 = usage(grammar);
    return [0, summary, readme, usage$1, flags];
   }
   var
    _y_ =
      caml_call1
       (Bin_prot_Shape[5],
        [0,
         [0,
          "Dummy_type_because_we_cannot_digest_type_constructors_only_concrete_types",
          0],
         0]),
    _z_ = [0, [0, caml_call1(Bin_shape[2][1], cst_a), 0, _y_], 0],
    _A_ = caml_call1(Bin_shape[4][1], "command/src/shape.ml:125:4"),
    group = caml_call2(Bin_prot_Shape[2], _A_, _z_),
    _B_ = caml_call1(Bin_shape[2][1], cst_a);
   caml_call1(caml_call2(Bin_prot_Shape[10], group, _B_), 0);
   var
    cst_subcommands = cst_subcommands$3,
    cst_readme$1 = cst_readme$12,
    cst_summary$1 = cst_summary$12,
    _C_ = [0, cst_subcommands$3],
    _D_ = [0, cst_readme$12],
    _E_ = [0, cst_summary$12],
    cst_subcommands$0 = cst_subcommands$3,
    cst_readme$2 = cst_readme$12,
    cst_summary$2 = cst_summary$12,
    _F_ = [0, cst_subcommands$3],
    _G_ = [0, cst_readme$12],
    _H_ = [0, cst_summary$12],
    cst_child_subcommand = cst_child_subcommand$2,
    cst_path_to_exe = cst_path_to_exe$4,
    cst_working_dir = cst_working_dir$3,
    cst_readme$3 = cst_readme$12,
    cst_summary$3 = cst_summary$12,
    _I_ = [0, cst_child_subcommand$2],
    _J_ = [0, cst_path_to_exe$4],
    _K_ = [0, cst_working_dir$3],
    _L_ = [0, cst_readme$12],
    _M_ = [0, cst_summary$12];
   function compare$4(cmp_a, a_131, b_132){
    if(a_131 === b_132) return 0;
    var n = caml_call2(Ppx_compare_lib[5][8], a_131[1], b_132[1]);
    if(0 !== n) return n;
    var
     n$0 =
       caml_call3
        (Ppx_compare_lib[5][12],
         function(a_133, b_134){
          return caml_call2(Ppx_compare_lib[5][8], a_133, b_134);
         },
         a_131[2],
         b_132[2]);
    return 0 === n$0
            ? caml_call3
              (compare,
               function(a_135, b_136){
                return caml_call3
                        (Ppx_compare_lib[5][11],
                         function(a_137, b_138){
                          var
                           t_140 = a_137[2],
                           t_139 = a_137[1],
                           t_142 = b_138[2],
                           t_141 = b_138[1],
                           n = caml_call2(Ppx_compare_lib[5][8], t_139, t_141);
                          return 0 === n ? caml_call2(cmp_a, t_140, t_142) : n;
                         },
                         a_135,
                         b_136);
               },
               a_131[3],
               b_132[3])
            : n$0;
   }
   function t_of_sexp$6(of_a_143, x_151){
    var
     _eP_ =
       [0,
        cst_subcommands,
        1,
        caml_call1
         (t_of_sexp,
          caml_call1
           (Sexplib0_Sexp_conv[44],
            function(sexp_150){
             if(1 === sexp_150[0]){
              var _eR_ = sexp_150[1];
              if(_eR_){
               var _eS_ = _eR_[2];
               if(_eS_ && ! _eS_[2]){
                var
                 arg1_147 = _eS_[1],
                 arg0_146 = _eR_[1],
                 res0_148 = caml_call1(Sexplib0_Sexp_conv[31], arg0_146),
                 res1_149 = caml_call1(of_a_143, arg1_147);
                return [0, res0_148, res1_149];
               }
              }
             }
             return caml_call3
                     (Sexplib0_Sexp_conv_error[2], error_source_145, 2, sexp_150);
            })),
        0];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_145,
             [0,
              cst_summary$1,
              1,
              Sexplib0_Sexp_conv[31],
              [0, cst_readme$1, 5, Sexplib0_Sexp_conv[31], _eP_]],
             function(param){
              return param !== cst_readme$12
                      ? param
                        !== cst_subcommands$3
                        ? param !== cst_summary$12 ? -1 : 0
                        : 2
                      : 1;
             },
             0,
             function(param){
              var
               _eQ_ = param[2],
               subcommands = _eQ_[2][1],
               readme = _eQ_[1],
               summary = param[1];
              return [0, summary, readme, subcommands];
             },
             x_151);
   }
   function sexp_of_t$5(of_a_152, param){
    var
     subcommands_160 = param[3],
     readme_156 = param[2],
     summary_154 = param[1],
     arg_161 =
       caml_call2
        (sexp_of_t,
         caml_call1
          (Sexplib0_Sexp_conv[20],
           function(param){
            var
             arg1_163 = param[2],
             arg0_162 = param[1],
             res0_164 = caml_call1(Sexplib0_Sexp_conv[7], arg0_162),
             res1_165 = caml_call1(of_a_152, arg1_163);
            return [1, [0, res0_164, [0, res1_165, 0]]];
           }),
         subcommands_160),
     bnds_153 = [0, [1, [0, _C_, [0, arg_161, 0]]], 0];
    if(readme_156)
     var
      v_157 = readme_156[1],
      arg_159 = caml_call1(Sexplib0_Sexp_conv[7], v_157),
      bnd_158 = [1, [0, _D_, [0, arg_159, 0]]],
      bnds_153$0 = [0, bnd_158, bnds_153];
    else
     var bnds_153$0 = bnds_153;
    var
     arg_155 = caml_call1(Sexplib0_Sexp_conv[7], summary_154),
     bnds_153$1 = [0, [1, [0, _E_, [0, arg_155, 0]]], bnds_153$0];
    return [1, bnds_153$1];
   }
   function stable_witness$4(a_stable_witness){return Stable_witness[6];}
   function map(t, f){
    var
     _eM_ = Base_List[134][9],
     _eN_ =
       caml_call2
        (Base_Lazy[12],
         t[3],
         function(_eO_){return caml_call2(_eM_, _eO_, f);});
    return [0, t[1], t[2], _eN_];
   }
   function t_of_sexp$7(of_a_176, x_184){
    var
     _eI_ =
       [0,
        cst_subcommands$0,
        1,
        caml_call1
         (Sexplib0_Sexp_conv[44],
          function(sexp_183){
           if(1 === sexp_183[0]){
            var _eK_ = sexp_183[1];
            if(_eK_){
             var _eL_ = _eK_[2];
             if(_eL_ && ! _eL_[2]){
              var
               arg1_180 = _eL_[1],
               arg0_179 = _eK_[1],
               res0_181 = caml_call1(Sexplib0_Sexp_conv[31], arg0_179),
               res1_182 = caml_call1(of_a_176, arg1_180);
              return [0, res0_181, res1_182];
             }
            }
           }
           return caml_call3
                   (Sexplib0_Sexp_conv_error[2], error_source_178, 2, sexp_183);
          }),
        0];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_178,
             [0,
              cst_summary$2,
              1,
              Sexplib0_Sexp_conv[31],
              [0, cst_readme$2, 5, Sexplib0_Sexp_conv[31], _eI_]],
             function(param){
              return param !== cst_readme$12
                      ? param
                        !== cst_subcommands$3
                        ? param !== cst_summary$12 ? -1 : 0
                        : 2
                      : 1;
             },
             0,
             function(param){
              var
               _eJ_ = param[2],
               subcommands = _eJ_[2][1],
               readme = _eJ_[1],
               summary = param[1];
              return [0, summary, readme, subcommands];
             },
             x_184);
   }
   function sexp_of_t$6(of_a_185, param){
    var
     subcommands_193 = param[3],
     readme_189 = param[2],
     summary_187 = param[1],
     arg_194 =
       caml_call2
        (Sexplib0_Sexp_conv[20],
         function(param){
          var
           arg1_196 = param[2],
           arg0_195 = param[1],
           res0_197 = caml_call1(Sexplib0_Sexp_conv[7], arg0_195),
           res1_198 = caml_call1(of_a_185, arg1_196);
          return [1, [0, res0_197, [0, res1_198, 0]]];
         },
         subcommands_193),
     bnds_186 = [0, [1, [0, _F_, [0, arg_194, 0]]], 0];
    if(readme_189)
     var
      v_190 = readme_189[1],
      arg_192 = caml_call1(Sexplib0_Sexp_conv[7], v_190),
      bnd_191 = [1, [0, _G_, [0, arg_192, 0]]],
      bnds_186$0 = [0, bnd_191, bnds_186];
    else
     var bnds_186$0 = bnds_186;
    var
     arg_188 = caml_call1(Sexplib0_Sexp_conv[7], summary_187),
     bnds_186$1 = [0, [1, [0, _H_, [0, arg_188, 0]]], bnds_186$0];
    return [1, bnds_186$1];
   }
   function map$0(t, f){
    var _eH_ = caml_call2(Base_List[134][9], t[3], f);
    return [0, t[1], t[2], _eH_];
   }
   function to_latest$0(param){
    var subcommands = param[3], readme = param[2], summary = param[1];
    return [0, summary, readme, caml_call1(Base_Lazy[21], subcommands)];
   }
   function of_latest$0(param){
    var
     subcommands = param[3],
     readme = param[2],
     summary = param[1],
     _eF_ = caml_obj_tag(subcommands);
    a:
    if(250 === _eF_)
     var _eG_ = subcommands[1];
    else{
     if(246 !== _eF_ && 244 !== _eF_){var _eG_ = subcommands; break a;}
     var _eG_ = caml_call1(CamlinternalLazy[2], subcommands);
    }
    return [0, summary, readme, _eG_];
   }
   function abs_path(dir, path){
    return caml_call1(Filename_base[30], path)
            ? path
            : caml_call2(Filename_base[28], dir, path);
   }
   function compare$5(a_199, b_200){
    if(a_199 === b_200) return 0;
    var n = caml_call2(Ppx_compare_lib[5][8], a_199[1], b_200[1]);
    if(0 !== n) return n;
    var
     n$0 =
       caml_call3
        (Ppx_compare_lib[5][12],
         function(a_201, b_202){
          return caml_call2(Ppx_compare_lib[5][8], a_201, b_202);
         },
         a_199[2],
         b_200[2]);
    if(0 !== n$0) return n$0;
    var n$1 = caml_call2(Ppx_compare_lib[5][8], a_199[3], b_200[3]);
    if(0 !== n$1) return n$1;
    var n$2 = caml_call2(Ppx_compare_lib[5][8], a_199[4], b_200[4]);
    return 0 === n$2
            ? caml_call3
              (Ppx_compare_lib[5][11],
               function(a_203, b_204){
                return caml_call2(Ppx_compare_lib[5][8], a_203, b_204);
               },
               a_199[5],
               b_200[5])
            : n$2;
   }
   function t_of_sexp$8(x_207){
    var
     _eB_ =
       [0,
        cst_child_subcommand,
        1,
        caml_call1(Sexplib0_Sexp_conv[44], Sexplib0_Sexp_conv[31]),
        0];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_206,
             [0,
              cst_summary$3,
              1,
              Sexplib0_Sexp_conv[31],
              [0,
               cst_readme$3,
               5,
               Sexplib0_Sexp_conv[31],
               [0,
                cst_working_dir,
                1,
                Sexplib0_Sexp_conv[31],
                [0, cst_path_to_exe, 1, Sexplib0_Sexp_conv[31], _eB_]]]],
             function(param){
              return param !== cst_child_subcommand$2
                      ? param
                        !== cst_path_to_exe$4
                        ? param
                          !== cst_readme$12
                          ? param
                            !== cst_summary$12
                            ? param !== cst_working_dir$3 ? -1 : 2
                            : 0
                          : 1
                        : 3
                      : 4;
             },
             0,
             function(param){
              var
               _eC_ = param[2],
               _eD_ = _eC_[2],
               _eE_ = _eD_[2],
               child_subcommand = _eE_[2][1],
               path_to_exe = _eE_[1],
               working_dir = _eD_[1],
               readme = _eC_[1],
               summary = param[1];
              return [0,
                      summary,
                      readme,
                      working_dir,
                      path_to_exe,
                      child_subcommand];
             },
             x_207);
   }
   function sexp_of_t$7(param){
    var
     child_subcommand_219 = param[5],
     path_to_exe_217 = param[4],
     working_dir_215 = param[3],
     readme_211 = param[2],
     summary_209 = param[1],
     arg_220 =
       caml_call2
        (Sexplib0_Sexp_conv[20], Sexplib0_Sexp_conv[7], child_subcommand_219),
     bnds_208 = [0, [1, [0, _I_, [0, arg_220, 0]]], 0],
     arg_218 = caml_call1(Sexplib0_Sexp_conv[7], path_to_exe_217),
     bnds_208$0 = [0, [1, [0, _J_, [0, arg_218, 0]]], bnds_208],
     arg_216 = caml_call1(Sexplib0_Sexp_conv[7], working_dir_215),
     bnds_208$1 = [0, [1, [0, _K_, [0, arg_216, 0]]], bnds_208$0];
    if(readme_211)
     var
      v_212 = readme_211[1],
      arg_214 = caml_call1(Sexplib0_Sexp_conv[7], v_212),
      bnd_213 = [1, [0, _L_, [0, arg_214, 0]]],
      bnds_208$2 = [0, bnd_213, bnds_208$1];
    else
     var bnds_208$2 = bnds_208$1;
    var
     arg_210 = caml_call1(Sexplib0_Sexp_conv[7], summary_209),
     bnds_208$3 = [0, [1, [0, _M_, [0, arg_210, 0]]], bnds_208$2];
    return [1, bnds_208$3];
   }
   var
    stable_witness$5 = Stable_witness[6],
    cst_path_to_exe$0 = cst_path_to_exe$4,
    cst_working_dir$0 = cst_working_dir$3,
    cst_readme$4 = cst_readme$12,
    cst_summary$4 = cst_summary$12,
    _N_ = [0, cst_path_to_exe$4],
    _O_ = [0, cst_working_dir$3],
    _P_ = [0, cst_readme$12],
    _Q_ = [0, cst_summary$12];
   function to_latest$1(_eA_){return _eA_;}
   function of_latest$1(_ez_){return _ez_;}
   function t_of_sexp$9(x_223){
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_222,
             [0,
              cst_summary$4,
              1,
              Sexplib0_Sexp_conv[31],
              [0,
               cst_readme$4,
               5,
               Sexplib0_Sexp_conv[31],
               [0,
                cst_working_dir$0,
                1,
                Sexplib0_Sexp_conv[31],
                [0, cst_path_to_exe$0, 1, Sexplib0_Sexp_conv[31], 0]]]],
             function(param){
              return param !== cst_path_to_exe$4
                      ? param
                        !== cst_readme$12
                        ? param
                          !== cst_summary$12
                          ? param !== cst_working_dir$3 ? -1 : 2
                          : 0
                        : 1
                      : 3;
             },
             0,
             function(param){
              var
               _ex_ = param[2],
               _ey_ = _ex_[2],
               path_to_exe = _ey_[2][1],
               working_dir = _ey_[1],
               readme = _ex_[1],
               summary = param[1];
              return [0, summary, readme, working_dir, path_to_exe];
             },
             x_223);
   }
   function sexp_of_t$8(param){
    var
     path_to_exe_233 = param[4],
     working_dir_231 = param[3],
     readme_227 = param[2],
     summary_225 = param[1],
     arg_234 = caml_call1(Sexplib0_Sexp_conv[7], path_to_exe_233),
     bnds_224 = [0, [1, [0, _N_, [0, arg_234, 0]]], 0],
     arg_232 = caml_call1(Sexplib0_Sexp_conv[7], working_dir_231),
     bnds_224$0 = [0, [1, [0, _O_, [0, arg_232, 0]]], bnds_224];
    if(readme_227)
     var
      v_228 = readme_227[1],
      arg_230 = caml_call1(Sexplib0_Sexp_conv[7], v_228),
      bnd_229 = [1, [0, _P_, [0, arg_230, 0]]],
      bnds_224$1 = [0, bnd_229, bnds_224$0];
    else
     var bnds_224$1 = bnds_224$0;
    var
     arg_226 = caml_call1(Sexplib0_Sexp_conv[7], summary_225),
     bnds_224$2 = [0, [1, [0, _Q_, [0, arg_226, 0]]], bnds_224$1];
    return [1, bnds_224$2];
   }
   var stable_witness$6 = Stable_witness[6];
   function to_v3(t){return [0, t[1], t[2], t[3], t[4], 0];}
   function of_v3(t){
    var _ew_ = abs_path(t[3], t[4]);
    return [0, t[1], t[2], t[3], _ew_];
   }
   var
    to_latest$2 = caml_call2(Base_Fn[5], to_latest$1, to_v3),
    of_latest$2 = caml_call2(Base_Fn[5], of_v3, of_latest$1),
    cst_path_to_exe$1 = cst_path_to_exe$4,
    cst_readme$5 = cst_readme$12,
    cst_summary$5 = cst_summary$12,
    _R_ = [0, cst_path_to_exe$4],
    _S_ = [0, cst_readme$12],
    _T_ = [0, cst_summary$12];
   function t_of_sexp$10(x_237){
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_236,
             [0,
              cst_summary$5,
              1,
              Sexplib0_Sexp_conv[31],
              [0,
               cst_readme$5,
               5,
               Sexplib0_Sexp_conv[31],
               [0, cst_path_to_exe$1, 1, Sexplib0_Sexp_conv[31], 0]]],
             function(param){
              return param !== cst_path_to_exe$4
                      ? param
                        !== cst_readme$12
                        ? param !== cst_summary$12 ? -1 : 0
                        : 1
                      : 2;
             },
             0,
             function(param){
              var
               _ev_ = param[2],
               path_to_exe = _ev_[2][1],
               readme = _ev_[1],
               summary = param[1];
              return [0, summary, readme, path_to_exe];
             },
             x_237);
   }
   function sexp_of_t$9(param){
    var
     path_to_exe_245 = param[3],
     readme_241 = param[2],
     summary_239 = param[1],
     arg_246 = caml_call1(Sexplib0_Sexp_conv[7], path_to_exe_245),
     bnds_238 = [0, [1, [0, _R_, [0, arg_246, 0]]], 0];
    if(readme_241)
     var
      v_242 = readme_241[1],
      arg_244 = caml_call1(Sexplib0_Sexp_conv[7], v_242),
      bnd_243 = [1, [0, _S_, [0, arg_244, 0]]],
      bnds_238$0 = [0, bnd_243, bnds_238];
    else
     var bnds_238$0 = bnds_238;
    var
     arg_240 = caml_call1(Sexplib0_Sexp_conv[7], summary_239),
     bnds_238$1 = [0, [1, [0, _T_, [0, arg_240, 0]]], bnds_238$0];
    return [1, bnds_238$1];
   }
   var stable_witness$7 = Stable_witness[6];
   function to_v2(t){return [0, t[1], t[2], cst$0, t[3]];}
   function of_v2(t){
    var _eu_ = abs_path(t[3], t[4]);
    return [0, t[1], t[2], _eu_];
   }
   var
    to_latest$3 = caml_call2(Base_Fn[5], to_latest$2, to_v2),
    of_latest$3 = caml_call2(Base_Fn[5], of_v2, of_latest$2);
   function compare$6(a_247, b_248){
    var a_247$0 = a_247, b_248$0 = b_248;
    for(;;){
     if(a_247$0 === b_248$0) return 0;
     switch(a_247$0[0]){
       case 0:
        var a_249 = a_247$0[1];
        if(0 !== b_248$0[0]) return -1;
        var b_250 = b_248$0[1];
        return compare$3(a_249, b_250);
       case 1:
        var a_251 = a_247$0[1];
        switch(b_248$0[0]){
          case 0: break;
          case 1:
           var b_252 = b_248$0[1];
           return compare$4
                   (function(a_253, b_254){return compare$6(a_253, b_254);},
                    a_251,
                    b_252);
          default: return -1;
        }
        break;
       default:
        var a_257 = a_247$0[2], a_255 = a_247$0[1];
        switch(b_248$0[0]){
          case 0: break;
          case 1:
           return 1;
          default:
           var
            b_258 = b_248$0[2],
            b_256 = b_248$0[1],
            n = compare$5(a_255, b_256);
           if(0 !== n) return n;
           a_247$0 = a_257;
           b_248$0 = b_258;
           continue;
        }
     }
     return 1;
    }
   }
   var letrec_function_context$0 = [];
   function t_of_sexp$11(sexp_263){
    a:
    {
     if(0 === sexp_263[0]){
      var _eq_ = sexp_263[1];
      b:
      if(_eq_ !== cst_Basic){
       c:
       if(_eq_ !== cst_Exec){
        if(_eq_ !== cst_Group){
         if(_eq_ === cst_basic) break b;
         if(_eq_ === cst_exec) break c;
         if(_eq_ !== cst_group) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5],
                 letrec_function_context$0[1],
                 sexp_263);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5],
                letrec_function_context$0[1],
                sexp_263);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5],
               letrec_function_context$0[1],
               sexp_263);
     }
     var _er_ = sexp_263[1];
     if(! _er_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7],
               letrec_function_context$0[1],
               sexp_263);
     var _es_ = _er_[1];
     if(0 !== _es_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6],
               letrec_function_context$0[1],
               sexp_263);
     var tag_264 = _es_[1];
     b:
     if(tag_264 !== cst_Basic){
      c:
      if(tag_264 !== cst_Exec){
       if(tag_264 !== cst_Group){
        if(tag_264 === cst_basic) break b;
        if(tag_264 === cst_exec) break c;
        if(tag_264 !== cst_group) break a;
       }
       var sexp_args_270 = _er_[2];
       if(sexp_args_270 && ! sexp_args_270[2]){
        var
         arg0_271 = sexp_args_270[1],
         res0_272 = t_of_sexp$6(t_of_sexp$11, arg0_271);
        return [1, res0_272];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                letrec_function_context$0[1],
                tag_264,
                sexp_263);
      }
      var sexp_args_275 = _er_[2];
      if(sexp_args_275){
       var _et_ = sexp_args_275[2];
       if(_et_ && ! _et_[2]){
        var
         arg1_277 = _et_[1],
         arg0_276 = sexp_args_275[1],
         res0_278 = t_of_sexp$8(arg0_276),
         res1_279 = t_of_sexp$11(arg1_277);
        return [2, res0_278, res1_279];
       }
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               letrec_function_context$0[1],
               tag_264,
               sexp_263);
     }
     var sexp_args_265 = _er_[2];
     if(sexp_args_265 && ! sexp_args_265[2]){
      var arg0_266 = sexp_args_265[1], res0_267 = t_of_sexp$4(arg0_266);
      return [0, res0_267];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4],
              letrec_function_context$0[1],
              tag_264,
              sexp_263);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[8],
             letrec_function_context$0[1],
             sexp_263);
   }
   caml_update_dummy(letrec_function_context$0, [0, error_source_261]);
   var _U_ = [0, cst_Basic], _V_ = [0, cst_Group], _W_ = [0, cst_Exec];
   function sexp_of_t$10(param){
    switch(param[0]){
      case 0:
       var arg0_280 = param[1], res0_281 = sexp_of_t$3(arg0_280);
       return [1, [0, _U_, [0, res0_281, 0]]];
      case 1:
       var
        arg0_282 = param[1],
        res0_283 = sexp_of_t$5(sexp_of_t$10, arg0_282);
       return [1, [0, _V_, [0, res0_283, 0]]];
      default:
       var
        arg1_285 = param[2],
        arg0_284 = param[1],
        res0_286 = sexp_of_t$7(arg0_284),
        res1_287 = sexp_of_t$10(arg1_285);
       return [1, [0, _W_, [0, res0_286, [0, res1_287, 0]]]];
    }
   }
   var stable_witness$8 = Stable_witness[6], letrec_function_context$1 = [];
   function t_of_sexp$12(sexp_292){
    a:
    {
     if(0 === sexp_292[0]){
      var _en_ = sexp_292[1];
      b:
      if(_en_ !== cst_Base){
       c:
       if(_en_ !== cst_Exec){
        d:
        if(_en_ !== cst_Group){
         if(_en_ !== cst_Lazy){
          if(_en_ === cst_base) break b;
          if(_en_ === cst_exec) break c;
          if(_en_ === cst_group) break d;
          if(_en_ !== cst_lazy) break a;
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5],
                  letrec_function_context$1[1],
                  sexp_292);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5],
                 letrec_function_context$1[1],
                 sexp_292);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5],
                letrec_function_context$1[1],
                sexp_292);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5],
               letrec_function_context$1[1],
               sexp_292);
     }
     var _eo_ = sexp_292[1];
     if(! _eo_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7],
               letrec_function_context$1[1],
               sexp_292);
     var _ep_ = _eo_[1];
     if(0 !== _ep_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6],
               letrec_function_context$1[1],
               sexp_292);
     var tag_293 = _ep_[1];
     b:
     if(tag_293 !== cst_Base){
      c:
      if(tag_293 !== cst_Exec){
       d:
       if(tag_293 !== cst_Group){
        if(tag_293 !== cst_Lazy){
         if(tag_293 === cst_base) break b;
         if(tag_293 === cst_exec) break c;
         if(tag_293 === cst_group) break d;
         if(tag_293 !== cst_lazy) break a;
        }
        var sexp_args_309 = _eo_[2];
        if(sexp_args_309 && ! sexp_args_309[2]){
         var
          arg0_310 = sexp_args_309[1],
          res0_311 = caml_call2(t_of_sexp, t_of_sexp$12, arg0_310);
         return [3, res0_311];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[4],
                 letrec_function_context$1[1],
                 tag_293,
                 sexp_292);
       }
       var sexp_args_299 = _eo_[2];
       if(sexp_args_299 && ! sexp_args_299[2]){
        var
         arg0_300 = sexp_args_299[1],
         res0_301 = t_of_sexp$6(t_of_sexp$12, arg0_300);
        return [1, res0_301];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                letrec_function_context$1[1],
                tag_293,
                sexp_292);
      }
      var sexp_args_304 = _eo_[2];
      if(sexp_args_304 && ! sexp_args_304[2]){
       var arg0_305 = sexp_args_304[1], res0_306 = t_of_sexp$8(arg0_305);
       return [2, res0_306];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               letrec_function_context$1[1],
               tag_293,
               sexp_292);
     }
     var sexp_args_294 = _eo_[2];
     if(sexp_args_294 && ! sexp_args_294[2]){
      var arg0_295 = sexp_args_294[1], res0_296 = t_of_sexp$4(arg0_295);
      return [0, res0_296];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4],
              letrec_function_context$1[1],
              tag_293,
              sexp_292);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[8],
             letrec_function_context$1[1],
             sexp_292);
   }
   caml_update_dummy(letrec_function_context$1, [0, error_source_290]);
   var
    _X_ = [0, cst_Base],
    _Y_ = [0, cst_Group],
    _Z_ = [0, cst_Exec],
    ___ = [0, cst_Lazy];
   function sexp_of_t$11(param){
    switch(param[0]){
      case 0:
       var arg0_312 = param[1], res0_313 = sexp_of_t$3(arg0_312);
       return [1, [0, _X_, [0, res0_313, 0]]];
      case 1:
       var
        arg0_314 = param[1],
        res0_315 = sexp_of_t$5(sexp_of_t$11, arg0_314);
       return [1, [0, _Y_, [0, res0_315, 0]]];
      case 2:
       var arg0_316 = param[1], res0_317 = sexp_of_t$7(arg0_316);
       return [1, [0, _Z_, [0, res0_317, 0]]];
      default:
       var
        arg0_318 = param[1],
        res0_319 = caml_call2(sexp_of_t, sexp_of_t$11, arg0_318);
       return [1, [0, ___, [0, res0_319, 0]]];
    }
   }
   var letrec_function_context$2 = [];
   function t_of_sexp$13(sexp_324){
    a:
    {
     if(0 === sexp_324[0]){
      var _ek_ = sexp_324[1];
      b:
      if(_ek_ !== cst_Base){
       c:
       if(_ek_ !== cst_Exec){
        if(_ek_ !== cst_Group){
         if(_ek_ === cst_base) break b;
         if(_ek_ === cst_exec) break c;
         if(_ek_ !== cst_group) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5],
                 letrec_function_context$2[1],
                 sexp_324);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5],
                letrec_function_context$2[1],
                sexp_324);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5],
               letrec_function_context$2[1],
               sexp_324);
     }
     var _el_ = sexp_324[1];
     if(! _el_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7],
               letrec_function_context$2[1],
               sexp_324);
     var _em_ = _el_[1];
     if(0 !== _em_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6],
               letrec_function_context$2[1],
               sexp_324);
     var tag_325 = _em_[1];
     b:
     if(tag_325 !== cst_Base){
      c:
      if(tag_325 !== cst_Exec){
       if(tag_325 !== cst_Group){
        if(tag_325 === cst_base) break b;
        if(tag_325 === cst_exec) break c;
        if(tag_325 !== cst_group) break a;
       }
       var sexp_args_331 = _el_[2];
       if(sexp_args_331 && ! sexp_args_331[2]){
        var
         arg0_332 = sexp_args_331[1],
         res0_333 = t_of_sexp$7(t_of_sexp$13, arg0_332);
        return [1, res0_333];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                letrec_function_context$2[1],
                tag_325,
                sexp_324);
      }
      var sexp_args_336 = _el_[2];
      if(sexp_args_336 && ! sexp_args_336[2]){
       var arg0_337 = sexp_args_336[1], res0_338 = t_of_sexp$9(arg0_337);
       return [2, res0_338];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               letrec_function_context$2[1],
               tag_325,
               sexp_324);
     }
     var sexp_args_326 = _el_[2];
     if(sexp_args_326 && ! sexp_args_326[2]){
      var arg0_327 = sexp_args_326[1], res0_328 = t_of_sexp$4(arg0_327);
      return [0, res0_328];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4],
              letrec_function_context$2[1],
              tag_325,
              sexp_324);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[8],
             letrec_function_context$2[1],
             sexp_324);
   }
   caml_update_dummy(letrec_function_context$2, [0, error_source_322]);
   var _$_ = [0, cst_Base], _aa_ = [0, cst_Group], _ab_ = [0, cst_Exec];
   function sexp_of_t$12(param){
    switch(param[0]){
      case 0:
       var arg0_339 = param[1], res0_340 = sexp_of_t$3(arg0_339);
       return [1, [0, _$_, [0, res0_340, 0]]];
      case 1:
       var
        arg0_341 = param[1],
        res0_342 = sexp_of_t$6(sexp_of_t$12, arg0_341);
       return [1, [0, _aa_, [0, res0_342, 0]]];
      default:
       var arg0_343 = param[1], res0_344 = sexp_of_t$8(arg0_343);
       return [1, [0, _ab_, [0, res0_344, 0]]];
    }
   }
   function to_latest$4(param){
    switch(param[0]){
      case 0:
       var b = param[1]; return [0, b];
      case 1:
       var g = param[1]; return [1, to_latest$0(map$0(g, to_latest$4))];
      default: var e = param[1]; return [2, caml_call1(to_latest$2, e)];
    }
   }
   function of_latest$4(param){
    var param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        var b = param$0[1]; return [0, b];
       case 1:
        var g = param$0[1]; return [1, map$0(of_latest$0(g), of_latest$4)];
       case 2:
        var e = param$0[1]; return [2, caml_call1(of_latest$2, e)];
       default:
        var thunk = param$0[1], _ej_ = caml_obj_tag(thunk);
        a:
        if(250 === _ej_)
         var param$1 = thunk[1];
        else{
         if(246 !== _ej_ && 244 !== _ej_){var param$1 = thunk; break a;}
         var param$1 = caml_call1(CamlinternalLazy[2], thunk);
        }
        param$0 = param$1;
     }
   }
   var letrec_function_context$3 = [];
   function t_of_sexp$14(sexp_349){
    a:
    {
     if(0 === sexp_349[0]){
      var _eg_ = sexp_349[1];
      b:
      if(_eg_ !== cst_Base){
       c:
       if(_eg_ !== cst_Exec){
        if(_eg_ !== cst_Group){
         if(_eg_ === cst_base) break b;
         if(_eg_ === cst_exec) break c;
         if(_eg_ !== cst_group) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5],
                 letrec_function_context$3[1],
                 sexp_349);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5],
                letrec_function_context$3[1],
                sexp_349);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5],
               letrec_function_context$3[1],
               sexp_349);
     }
     var _eh_ = sexp_349[1];
     if(! _eh_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7],
               letrec_function_context$3[1],
               sexp_349);
     var _ei_ = _eh_[1];
     if(0 !== _ei_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6],
               letrec_function_context$3[1],
               sexp_349);
     var tag_350 = _ei_[1];
     b:
     if(tag_350 !== cst_Base){
      c:
      if(tag_350 !== cst_Exec){
       if(tag_350 !== cst_Group){
        if(tag_350 === cst_base) break b;
        if(tag_350 === cst_exec) break c;
        if(tag_350 !== cst_group) break a;
       }
       var sexp_args_356 = _eh_[2];
       if(sexp_args_356 && ! sexp_args_356[2]){
        var
         arg0_357 = sexp_args_356[1],
         res0_358 = t_of_sexp$7(t_of_sexp$14, arg0_357);
        return [1, res0_358];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                letrec_function_context$3[1],
                tag_350,
                sexp_349);
      }
      var sexp_args_361 = _eh_[2];
      if(sexp_args_361 && ! sexp_args_361[2]){
       var arg0_362 = sexp_args_361[1], res0_363 = t_of_sexp$10(arg0_362);
       return [2, res0_363];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               letrec_function_context$3[1],
               tag_350,
               sexp_349);
     }
     var sexp_args_351 = _eh_[2];
     if(sexp_args_351 && ! sexp_args_351[2]){
      var arg0_352 = sexp_args_351[1], res0_353 = t_of_sexp$5(arg0_352);
      return [0, res0_353];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4],
              letrec_function_context$3[1],
              tag_350,
              sexp_349);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[8],
             letrec_function_context$3[1],
             sexp_349);
   }
   caml_update_dummy(letrec_function_context$3, [0, error_source_347]);
   var
    _ac_ = [0, cst_Base],
    _ad_ = [0, cst_Group],
    _ae_ = [0, cst_Exec],
    _af_ = [0, cst_V1],
    _ag_ = [0, cst_V2],
    _ah_ = [0, cst_V3];
   function sexp_of_t$13(param){
    switch(param[0]){
      case 0:
       var arg0_364 = param[1], res0_365 = sexp_of_t$4(arg0_364);
       return [1, [0, _ac_, [0, res0_365, 0]]];
      case 1:
       var
        arg0_366 = param[1],
        res0_367 = sexp_of_t$6(sexp_of_t$13, arg0_366);
       return [1, [0, _ad_, [0, res0_367, 0]]];
      default:
       var arg0_368 = param[1], res0_369 = sexp_of_t$9(arg0_368);
       return [1, [0, _ae_, [0, res0_369, 0]]];
    }
   }
   function to_latest$5(param){
    switch(param[0]){
      case 0:
       var b = param[1]; return [0, to_latest(b)];
      case 1:
       var g = param[1]; return [1, to_latest$0(map$0(g, to_latest$5))];
      default: var e = param[1]; return [2, caml_call1(to_latest$3, e)];
    }
   }
   function of_latest$5(param){
    var param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        var b = param$0[1]; return [0, of_latest(b)];
       case 1:
        var g = param$0[1]; return [1, map$0(of_latest$0(g), of_latest$5)];
       case 2:
        var e = param$0[1]; return [2, caml_call1(of_latest$3, e)];
       default:
        var thunk = param$0[1], _ef_ = caml_obj_tag(thunk);
        a:
        if(250 === _ef_)
         var param$1 = thunk[1];
        else{
         if(246 !== _ef_ && 244 !== _ef_){var param$1 = thunk; break a;}
         var param$1 = caml_call1(CamlinternalLazy[2], thunk);
        }
        param$0 = param$1;
     }
   }
   function t_of_sexp$15(sexp_374){
    a:
    {
     if(0 === sexp_374[0]){
      var _ec_ = sexp_374[1];
      b:
      if(_ec_ !== cst_V1){
       c:
       if(_ec_ !== cst_V2){
        if(_ec_ !== cst_V3){
         if(_ec_ === cst_v1) break b;
         if(_ec_ === cst_v2) break c;
         if(_ec_ !== cst_v3) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_372, sexp_374);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_372, sexp_374);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5], error_source_372, sexp_374);
     }
     var _ed_ = sexp_374[1];
     if(! _ed_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_372, sexp_374);
     var _ee_ = _ed_[1];
     if(0 !== _ee_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_372, sexp_374);
     var tag_375 = _ee_[1];
     b:
     if(tag_375 !== cst_V1){
      c:
      if(tag_375 !== cst_V2){
       if(tag_375 !== cst_V3){
        if(tag_375 === cst_v1) break b;
        if(tag_375 === cst_v2) break c;
        if(tag_375 !== cst_v3) break a;
       }
       var sexp_args_386 = _ed_[2];
       if(sexp_args_386 && ! sexp_args_386[2]){
        var arg0_387 = sexp_args_386[1], res0_388 = t_of_sexp$12(arg0_387);
        return [2, res0_388];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_372,
                tag_375,
                sexp_374);
      }
      var sexp_args_381 = _ed_[2];
      if(sexp_args_381 && ! sexp_args_381[2]){
       var arg0_382 = sexp_args_381[1], res0_383 = t_of_sexp$13(arg0_382);
       return [1, res0_383];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_372,
               tag_375,
               sexp_374);
     }
     var sexp_args_376 = _ed_[2];
     if(sexp_args_376 && ! sexp_args_376[2]){
      var arg0_377 = sexp_args_376[1], res0_378 = t_of_sexp$14(arg0_377);
      return [0, res0_378];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4],
              error_source_372,
              tag_375,
              sexp_374);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_372, sexp_374);
   }
   function sexp_of_t$14(param){
    switch(param[0]){
      case 0:
       var arg0_389 = param[1], res0_390 = sexp_of_t$13(arg0_389);
       return [1, [0, _af_, [0, res0_390, 0]]];
      case 1:
       var arg0_391 = param[1], res0_392 = sexp_of_t$12(arg0_391);
       return [1, [0, _ag_, [0, res0_392, 0]]];
      default:
       var arg0_393 = param[1], res0_394 = sexp_of_t$11(arg0_393);
       return [1, [0, _ah_, [0, res0_394, 0]]];
    }
   }
   function v1(v0){return [0, v0];}
   function v2(v0){return [1, v0];}
   function v3(v0){return [2, v0];}
   var
    v1$0 = [0, cst_V1, 0, v1],
    v2$0 = [0, cst_V2, 1, v2],
    v3$0 = [0, cst_V3, 2, v3];
   function of_versioned(param){
    switch(param[0]){
      case 0:
       var t = param[1]; return to_latest$5(t);
      case 1:
       var t$0 = param[1]; return to_latest$4(t$0);
      default: var t$1 = param[1]; return t$1;
    }
   }
   function compare$7(a_395, b_396){
    var a_395$0 = a_395, b_396$0 = b_396;
    for(;;){
     if(a_395$0 === b_396$0) return 0;
     if(typeof a_395$0 === "number")
      return typeof b_396$0 === "number" ? 0 : -1;
     a:
     {
      b:
      {
       c:
       {
        switch(a_395$0[0]){
          case 0:
           var a_397 = a_395$0[1];
           if(typeof b_396$0 === "number") break a;
           if(0 !== b_396$0[0]) return -1;
           var b_398 = b_396$0[1];
           return caml_call2(Base[171], a_397, b_398);
          case 1:
           var a_399 = a_395$0[1];
           if(typeof b_396$0 === "number") break a;
           switch(b_396$0[0]){
             case 0:
              break b;
             case 1:
              var b_400 = b_396$0[1];
              a_395$0 = a_399;
              b_396$0 = b_400;
              continue;
             default: return -1;
           }
          case 2:
           var a_401 = a_395$0[1];
           if(typeof b_396$0 === "number") break a;
           switch(b_396$0[0]){
             case 0:
              break b;
             case 1:
              break c;
             case 2:
              var b_402 = b_396$0[1];
              a_395$0 = a_401;
              b_396$0 = b_402;
              continue;
             default: return -1;
           }
          case 3:
           var a_403 = a_395$0[1];
           if(typeof b_396$0 === "number") break a;
           switch(b_396$0[0]){
             case 0:
              break b;
             case 1:
              break c;
             case 2: break;
             case 3:
              var b_404 = b_396$0[1];
              return caml_call3
                      (Base[143],
                       function(a_405, b_406){return compare$7(a_405, b_406);},
                       a_403,
                       b_404);
             default: return -1;
           }
           break;
          default:
           var a_407 = a_395$0[1];
           if(typeof b_396$0 === "number") break a;
           switch(b_396$0[0]){
             case 0:
              break b;
             case 1:
              break c;
             case 2: break;
             case 3:
              return 1;
             default:
              var b_408 = b_396$0[1];
              return caml_call2(Base[171], a_407, b_408);
           }
        }
        return 1;
       }
       return 1;
      }
      return 1;
     }
     return 1;
    }
   }
   var letrec_function_context$4 = [];
   function t_of_sexp$16(sexp_413){
    a:
    {
     if(0 === sexp_413[0]){
      var _d9_ = sexp_413[1], _d__ = caml_string_compare(_d9_, cst_ad_hoc);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           if(0 <= _d__){
            if(0 < _d__){
             if(_d9_ === cst_concat) break f;
             if(_d9_ === cst_many) break e;
             if(_d9_ === cst_maybe) break d;
             if(_d9_ === cst_one) break c;
             if(_d9_ !== cst_zero) break a;
             break b;
            }
           }
           else if(_d9_ !== cst_Ad_hoc){
            if(_d9_ === cst_Concat) break f;
            if(_d9_ === cst_Many) break e;
            if(_d9_ === cst_Maybe) break d;
            if(_d9_ === cst_One) break c;
            if(_d9_ !== cst_Zero) break a;
            break b;
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],
                    letrec_function_context$4[1],
                    sexp_413);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[5],
                   letrec_function_context$4[1],
                   sexp_413);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5],
                  letrec_function_context$4[1],
                  sexp_413);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5],
                 letrec_function_context$4[1],
                 sexp_413);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5],
                letrec_function_context$4[1],
                sexp_413);
      }
      return 0;
     }
     var _d$_ = sexp_413[1];
     if(! _d$_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7],
               letrec_function_context$4[1],
               sexp_413);
     var _ea_ = _d$_[1];
     if(0 !== _ea_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6],
               letrec_function_context$4[1],
               sexp_413);
     var tag_414 = _ea_[1], _eb_ = caml_string_compare(tag_414, cst_ad_hoc);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          if(0 <= _eb_){
           if(0 < _eb_){
            if(tag_414 === cst_concat) break f;
            if(tag_414 === cst_many) break e;
            if(tag_414 === cst_maybe) break d;
            if(tag_414 === cst_one) break c;
            if(tag_414 !== cst_zero) break a;
            break b;
           }
          }
          else if(tag_414 !== cst_Ad_hoc){
           if(tag_414 === cst_Concat) break f;
           if(tag_414 === cst_Many) break e;
           if(tag_414 === cst_Maybe) break d;
           if(tag_414 === cst_One) break c;
           if(tag_414 !== cst_Zero) break a;
           break b;
          }
          var sexp_args_435 = _d$_[2];
          if(sexp_args_435 && ! sexp_args_435[2]){
           var
            arg0_436 = sexp_args_435[1],
            res0_437 = caml_call1(Base[176], arg0_436);
           return [4, res0_437];
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4],
                   letrec_function_context$4[1],
                   tag_414,
                   sexp_413);
         }
         var sexp_args_430 = _d$_[2];
         if(sexp_args_430 && ! sexp_args_430[2]){
          var
           arg0_431 = sexp_args_430[1],
           res0_432 = caml_call2(Base[147], t_of_sexp$16, arg0_431);
          return [3, res0_432];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[4],
                  letrec_function_context$4[1],
                  tag_414,
                  sexp_413);
        }
        var sexp_args_420 = _d$_[2];
        if(sexp_args_420 && ! sexp_args_420[2]){
         var arg0_421 = sexp_args_420[1], res0_422 = t_of_sexp$16(arg0_421);
         return [1, res0_422];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[4],
                 letrec_function_context$4[1],
                 tag_414,
                 sexp_413);
       }
       var sexp_args_425 = _d$_[2];
       if(sexp_args_425 && ! sexp_args_425[2]){
        var arg0_426 = sexp_args_425[1], res0_427 = t_of_sexp$16(arg0_426);
        return [2, res0_427];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                letrec_function_context$4[1],
                tag_414,
                sexp_413);
      }
      var sexp_args_415 = _d$_[2];
      if(sexp_args_415 && ! sexp_args_415[2]){
       var
        arg0_416 = sexp_args_415[1],
        res0_417 = caml_call1(Base[176], arg0_416);
       return [0, res0_417];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               letrec_function_context$4[1],
               tag_414,
               sexp_413);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3],
              letrec_function_context$4[1],
              sexp_413);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[8],
             letrec_function_context$4[1],
             sexp_413);
   }
   caml_update_dummy(letrec_function_context$4, [0, error_source_411]);
   var
    _aj_ = [0, cst_Zero],
    _ak_ = [0, cst_One],
    _al_ = [0, cst_Many],
    _am_ = [0, cst_Maybe],
    _an_ = [0, cst_Concat],
    _ao_ = [0, cst_Ad_hoc],
    _ap_ = [0, cst_Usage],
    _aq_ = [0, cst_Grammar];
   function sexp_of_t$15(param){
    if(typeof param === "number") return _aj_;
    switch(param[0]){
      case 0:
       var arg0_438 = param[1], res0_439 = caml_call1(Base[177], arg0_438);
       return [1, [0, _ak_, [0, res0_439, 0]]];
      case 1:
       var arg0_440 = param[1], res0_441 = sexp_of_t$15(arg0_440);
       return [1, [0, _al_, [0, res0_441, 0]]];
      case 2:
       var arg0_442 = param[1], res0_443 = sexp_of_t$15(arg0_442);
       return [1, [0, _am_, [0, res0_443, 0]]];
      case 3:
       var
        arg0_444 = param[1],
        res0_445 = caml_call2(Base[148], sexp_of_t$15, arg0_444);
       return [1, [0, _an_, [0, res0_445, 0]]];
      default:
       var arg0_446 = param[1], res0_447 = caml_call1(Base[177], arg0_446);
       return [1, [0, _ao_, [0, res0_447, 0]]];
    }
   }
   function compare$8(a_448, b_449){
    if(a_448 === b_449) return 0;
    if(0 === a_448[0]){
     var a_450 = a_448[1];
     if(0 !== b_449[0]) return -1;
     var b_451 = b_449[1];
     return caml_call2(Base[171], a_450, b_451);
    }
    var a_452 = a_448[1];
    if(0 === b_449[0]) return 1;
    var b_453 = b_449[1];
    return compare$7(a_452, b_453);
   }
   function t_of_sexp$17(sexp_458){
    a:
    {
     if(0 === sexp_458[0]){
      var _d6_ = sexp_458[1];
      b:
      if(_d6_ !== cst_Grammar){
       if(_d6_ !== cst_Usage){
        if(_d6_ === cst_grammar) break b;
        if(_d6_ !== cst_usage$0) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_456, sexp_458);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5], error_source_456, sexp_458);
     }
     var _d7_ = sexp_458[1];
     if(! _d7_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_456, sexp_458);
     var _d8_ = _d7_[1];
     if(0 !== _d8_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_456, sexp_458);
     var tag_459 = _d8_[1];
     b:
     if(tag_459 !== cst_Grammar){
      if(tag_459 !== cst_Usage){
       if(tag_459 === cst_grammar) break b;
       if(tag_459 !== cst_usage$0) break a;
      }
      var sexp_args_460 = _d7_[2];
      if(sexp_args_460 && ! sexp_args_460[2]){
       var
        arg0_461 = sexp_args_460[1],
        res0_462 = caml_call1(Base[176], arg0_461);
       return [0, res0_462];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_456,
               tag_459,
               sexp_458);
     }
     var sexp_args_465 = _d7_[2];
     if(sexp_args_465 && ! sexp_args_465[2]){
      var arg0_466 = sexp_args_465[1], res0_467 = t_of_sexp$16(arg0_466);
      return [1, res0_467];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4],
              error_source_456,
              tag_459,
              sexp_458);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_456, sexp_458);
   }
   function sexp_of_t$16(param){
    if(0 === param[0]){
     var arg0_468 = param[1], res0_469 = caml_call1(Base[177], arg0_468);
     return [1, [0, _ap_, [0, res0_469, 0]]];
    }
    var arg0_470 = param[1], res0_471 = sexp_of_t$15(arg0_470);
    return [1, [0, _aq_, [0, res0_471, 0]]];
   }
   function compare$9(a_472, b_473){
    if(a_472 === b_473) return 0;
    var n = caml_call2(Base[94], a_472[1], b_473[1]);
    return 0 === n ? caml_call2(Base[94], a_472[2], b_473[2]) : n;
   }
   var
    acc = 0,
    enumerate_478 = enumerate_474,
    enumerate_479 = enumerate_475,
    _a4_ = [0, cst_Base],
    _a5_ = [0, cst_Group],
    _a6_ = [0, cst_Exec],
    _a7_ = [0, cst_Lazy],
    _a3_ = [0, 0, 0],
    _a0_ = [0, cst_Basic],
    _a1_ = [0, cst_Group],
    _a2_ = [0, cst_Exec],
    _aV_ = [0, cst_child_subcommand$2],
    _aW_ = [0, cst_path_to_exe$4],
    _aX_ = [0, cst_working_dir$3],
    _aY_ = [0, cst_readme$12],
    _aZ_ = [0, cst_summary$12],
    cst_child_subcommand$1 = cst_child_subcommand$2,
    cst_path_to_exe$3 = cst_path_to_exe$4,
    cst_working_dir$2 = cst_working_dir$3,
    cst_readme$11 = cst_readme$12,
    cst_summary$11 = cst_summary$12,
    cst_Subcommands_must_not_begin = "Subcommands must not begin with '-'",
    _aS_ = [0, cst_subcommands$3],
    _aT_ = [0, cst_readme$12],
    _aU_ = [0, cst_summary$12],
    cst_subcommands$2 = cst_subcommands$3,
    cst_readme$9 = cst_readme$12,
    cst_summary$9 = cst_summary$12,
    cst_Flags_must_begin_with = "Flags must begin with '-'",
    _aO_ = [0, cst_flags$3],
    _aP_ = [0, cst_anons$2],
    _aQ_ = [0, cst_readme$12],
    _aR_ = [0, cst_summary$12],
    cst_flags$2 = cst_flags$3,
    cst_anons$1 = cst_anons$2,
    cst_readme$7 = cst_readme$12,
    cst_summary$7 = cst_summary$12,
    _aJ_ = [0, cst$6],
    cst_Key_type_s_is_an_ambiguous =
      "%{Key_type} %s is an ambiguous prefix: %s",
    _aK_ = [12, 32, [2, 0, [11, " is an ambiguous prefix: ", [2, 0, 0]]]],
    _aL_ = [0, 0],
    cst_unknown_Key_type_s = "unknown %{Key_type} %s",
    _aM_ = [12, 32, [2, 0, 0]],
    _aN_ = [0, 0],
    cst_unknown = "unknown ",
    cst_flag = "flag",
    cst_subcommand = "subcommand",
    _aI_ = [0, cst$6],
    _aF_ = [0, [0, "\n", 0], 0],
    cst_Unable_to_parse = "Unable to parse",
    _aC_ = [0, cst_aliases$2],
    _aD_ = [0, cst_doc$2],
    _aE_ = [0, cst_name$2],
    cst_aliases$1 = cst_aliases$2,
    cst_doc$1 = cst_doc$2,
    cst_name$1 = cst_name$2,
    _au_ = [0, cst_command_src_shape_ml$4, 414, 6],
    _at_ = [0, cst_command_src_shape_ml$4, 415, 6],
    cst_command_src_shape_ml = cst_command_src_shape_ml$4,
    _ar_ = [0, cst_at_most_once$0],
    _as_ = [0, cst_at_least_once$0],
    cst_unsupported_version_to_use = "unsupported version_to_use",
    _ai_ = [0, [0, cst_command_src_shape_ml$4, 336, 9001, 9019]],
    cst_at_most_once = cst_at_most_once$0,
    cst_at_least_once = cst_at_least_once$0,
    cst_command_src_shape_ml$0 = cst_command_src_shape_ml$4,
    cst_command_src_shape_ml$1 = cst_command_src_shape_ml$4,
    _aw_ =
      [1,
       '\n        (((at_least_once false) (at_most_once false)) "[name] ...")\n        (((at_least_once true) (at_most_once false)) "name ...")\n        (((at_least_once false) (at_most_once true)) [name])\n        (((at_least_once true) (at_most_once true)) name) '],
    _ax_ = [0, cst$7],
    _az_ = [0, "to_help_string"],
    cst_command_src_shape_ml$2 = cst_command_src_shape_ml$4,
    cst_command_src_shape_ml$3 = cst_command_src_shape_ml$4,
    cst_8bcc59c3bf5ec71a20bca2c653 = "8bcc59c3bf5ec71a20bca2c65346cf96",
    cst_aliases$0 = cst_aliases$2,
    cst_doc$0 = cst_doc$2,
    cst_name$0 = cst_name$2,
    cst_flags$1 = cst_flags$3,
    cst_anons$0 = cst_anons$2,
    cst_readme$6 = cst_readme$12,
    cst_summary$6 = cst_summary$12,
    cst_subcommands$1 = cst_subcommands$3,
    cst_readme$8 = cst_readme$12,
    cst_summary$8 = cst_summary$12,
    cst_child_subcommand$0 = cst_child_subcommand$2,
    cst_path_to_exe$2 = cst_path_to_exe$4,
    cst_working_dir$1 = cst_working_dir$3,
    cst_readme$10 = cst_readme$12,
    cst_summary$10 = cst_summary$12,
    cst_command = cst_command$0,
    cst_Command_Shape = cst_Command_Shape$0;
   for(;;){
    if(! enumerate_479) break;
    if(enumerate_478){
     var
      enumerate_477 = enumerate_479[1],
      enumerate_480 = enumerate_478[2],
      enumerate_476 = enumerate_478[1],
      acc$0 = [0, [0, enumerate_476, enumerate_477], acc];
     acc = acc$0;
     enumerate_478 = enumerate_480;
    }
    else{
     var enumerate_480$0 = enumerate_479[2];
     enumerate_478 = enumerate_474;
     enumerate_479 = enumerate_480$0;
    }
   }
   var all = caml_call1(Stdlib_List[10], acc);
   function at_most_once(r){return r[2];}
   function at_least_once(r){return r[1];}
   var
    at_most_once$0 =
      [0,
       function(param){return 0;},
       cst_at_most_once,
       0,
       at_most_once,
       function(r, v){return [0, r[1], v];}],
    at_least_once$0 =
      [0,
       function(param){return 0;},
       cst_at_least_once,
       0,
       at_least_once,
       function(r, v){return [0, v, r[2]];}];
   function make_creator(at_least_once_fun, at_most_once_fun, compile_acc){
    var
     match = caml_call2(at_least_once_fun, at_least_once$0, compile_acc),
     compile_acc$0 = match[2],
     at_least_once_gen = match[1],
     match$0 = caml_call2(at_most_once_fun, at_most_once$0, compile_acc$0),
     compile_acc$1 = match$0[2],
     at_most_once_gen = match$0[1];
    return [0,
            function(acc){
             var
              at_least_once = caml_call1(at_least_once_gen, acc),
              at_most_once = caml_call1(at_most_once_gen, acc);
             return [0, at_least_once, at_most_once];
            },
            compile_acc$1];
   }
   function create(at_least_once, at_most_once){return [0, at_least_once, at_most_once];
   }
   function map$1(at_least_once_fun, at_most_once_fun){
    var _d5_ = caml_call1(at_most_once_fun, at_most_once$0);
    return [0, caml_call1(at_least_once_fun, at_least_once$0), _d5_];
   }
   function iter(at_least_once_fun, at_most_once_fun){
    caml_call1(at_least_once_fun, at_least_once$0);
    return caml_call1(at_most_once_fun, at_most_once$0);
   }
   function fold(init, at_least_once_fun, at_most_once_fun){
    return caml_call2
            (at_most_once_fun,
             caml_call2(at_least_once_fun, init, at_least_once$0),
             at_most_once$0);
   }
   function map_poly(record){
    var _d4_ = [0, caml_call1(record[1], at_most_once$0), 0];
    return [0, caml_call1(record[1], at_least_once$0), _d4_];
   }
   function for_all(at_least_once_fun, at_most_once_fun){
    var _d3_ = caml_call1(at_least_once_fun, at_least_once$0);
    return _d3_ ? caml_call1(at_most_once_fun, at_most_once$0) : _d3_;
   }
   function exists(at_least_once_fun, at_most_once_fun){
    var _d2_ = caml_call1(at_least_once_fun, at_least_once$0);
    return _d2_ ? _d2_ : caml_call1(at_most_once_fun, at_most_once$0);
   }
   function to_list(at_least_once_fun, at_most_once_fun){
    var _d1_ = [0, caml_call1(at_most_once_fun, at_most_once$0), 0];
    return [0, caml_call1(at_least_once_fun, at_least_once$0), _d1_];
   }
   function iter$0(record, at_least_once_fun, at_most_once_fun){
    caml_call3(at_least_once_fun, at_least_once$0, record, record[1]);
    return caml_call3(at_most_once_fun, at_most_once$0, record, record[2]);
   }
   function fold$0(record, init, at_least_once_fun, at_most_once_fun){
    var _d0_ = record[2];
    return caml_call4
            (at_most_once_fun,
             caml_call4
              (at_least_once_fun, init, at_least_once$0, record, record[1]),
             at_most_once$0,
             record,
             _d0_);
   }
   function for_all$0(record, at_least_once_fun, at_most_once_fun){
    var
     _dZ_ = caml_call3(at_least_once_fun, at_least_once$0, record, record[1]);
    return _dZ_
            ? caml_call3(at_most_once_fun, at_most_once$0, record, record[2])
            : _dZ_;
   }
   function exists$0(record, at_least_once_fun, at_most_once_fun){
    var
     _dY_ = caml_call3(at_least_once_fun, at_least_once$0, record, record[1]);
    return _dY_
            ? _dY_
            : caml_call3(at_most_once_fun, at_most_once$0, record, record[2]);
   }
   function to_list$0(record, at_least_once_fun, at_most_once_fun){
    var
     _dX_ =
       [0, caml_call3(at_most_once_fun, at_most_once$0, record, record[2]), 0];
    return [0,
            caml_call3(at_least_once_fun, at_least_once$0, record, record[1]),
            _dX_];
   }
   function map$2(record, at_least_once_fun, at_most_once_fun){
    var
     _dW_ = caml_call3(at_most_once_fun, at_most_once$0, record, record[2]);
    return [0,
            caml_call3(at_least_once_fun, at_least_once$0, record, record[1]),
            _dW_];
   }
   function set_all_mutable_fields(record){
    caml_call1(Base_Field[1][1], record);
    return 0;
   }
   var
    Direct =
      [0,
       iter$0,
       fold$0,
       for_all$0,
       exists$0,
       to_list$0,
       map$2,
       set_all_mutable_fields];
   function sexp_of_t$17(param){
    var
     at_most_once_484 = param[2],
     at_least_once_482 = param[1],
     arg_485 = caml_call1(Base[100], at_most_once_484),
     bnds_481 = [0, [1, [0, _ar_, [0, arg_485, 0]]], 0],
     arg_483 = caml_call1(Base[100], at_least_once_482),
     bnds_481$0 = [0, [1, [0, _as_, [0, arg_483, 0]]], bnds_481];
    return [1, bnds_481$0];
   }
   function to_help_string(t, flag_name){
    var
     at_most_once = t[2],
     at_least_once = t[1],
     description =
       at_least_once
        ? flag_name
        : caml_call2
          (Base_String[67],
           0,
           [0,
            maybe_missing_prefix,
            [0, flag_name, [0, maybe_missing_suffix, 0]]]);
    return at_most_once
            ? description
            : caml_call2
              (Base_String[67],
               0,
               [0, description, [0, maybe_more_suffix, 0]]);
   }
   function of_help_string(name){
    var match = caml_call2(Base_String[113], name, maybe_more_suffix);
    if(match)
     var name$0 = match[1], name$1 = name$0, at_most_once = 0;
    else
     var name$1 = name, at_most_once = 1;
    var
     _dT_ = Base_String[113],
     _dU_ = caml_call2(Base_String[114], name$1, maybe_missing_prefix),
     match$0 =
       caml_call2
        (Base_Option[20],
         _dU_,
         function(_dV_){return caml_call2(_dT_, _dV_, maybe_missing_suffix);});
    if(match$0)
     var name$2 = match$0[1], name$3 = name$2, at_least_once = 0;
    else
     var name$3 = name$1, at_least_once = 1;
    return [0, [0, at_least_once, at_most_once], name$3];
   }
   var
    Expect_test_collector$0 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    _av_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_command_src_shape_ml$0),
       417,
       11114,
       11120,
       11377],
    _ay_ =
      [0,
       [0,
        _ax_,
        _aw_,
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_command_src_shape_ml$1),
         416,
         11101,
         11107,
         11113],
        _av_],
       0],
    _aA_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_command_src_shape_ml$3),
       408,
       10759,
       10761,
       11378],
    _aB_ =
      caml_call1
       (Expect_test_common_File[4][3], cst_8bcc59c3bf5ec71a20bca2c653);
   caml_call9
    (Expect_test_collector$0[3],
     _aB_,
     _aA_,
     cst_command_src_shape_ml$2,
     _az_,
     0,
     _ay_,
     0,
     Inline_test_config,
     function(param){
      caml_call2
       (Base_List[19],
        all,
        function(x_486){
         var
          s = to_help_string(x_486, flag_name),
          _dP_ = [0, caml_call1(Sexplib0_Sexp_conv[7], s), 0],
          _dQ_ = [1, [0, sexp_of_t$17(x_486), _dP_]];
         caml_call2(Command_Import[3], 0, _dQ_);
         var
          match = of_help_string(s),
          flag_name$0 = match[2],
          x_487 = match[1],
          _dR_ = 0 === compare$9(x_486, x_487) ? 1 : 0;
         if(! _dR_)
          throw caml_maybe_attach_backtrace([0, Assert_failure, _au_], 1);
         var
          _dS_ = 0 === caml_call2(Base[171], flag_name, flag_name$0) ? 1 : 0;
         if(_dS_) return 0;
         throw caml_maybe_attach_backtrace([0, Assert_failure, _at_], 1);
        });
      var
       _dO_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_command_src_shape_ml),
          416,
          11101,
          11107,
          11113];
      return caml_call1(Expect_test_collector$0[1], _dO_);
     });
   function compare$10(a_494, b_495){
    if(a_494 === b_495) return 0;
    var n = caml_call2(Base[171], a_494[1], b_495[1]);
    if(0 !== n) return n;
    var n$0 = caml_call2(Base[171], a_494[2], b_495[2]);
    return 0 === n$0
            ? caml_call3
              (Base[143],
               function(a_496, b_497){
                return caml_call2(Base[171], a_496, b_497);
               },
               a_494[3],
               b_495[3])
            : n$0;
   }
   function aliases(r){return r[3];}
   function doc(r){return r[2];}
   function name(r){return r[1];}
   var
    aliases$0 =
      [0,
       function(param){return 0;},
       cst_aliases$0,
       0,
       aliases,
       function(r, v){return [0, r[1], r[2], v];}],
    doc$0 =
      [0,
       function(param){return 0;},
       cst_doc$0,
       0,
       doc,
       function(r, v){return [0, r[1], v, r[3]];}],
    name$0 =
      [0,
       function(param){return 0;},
       cst_name$0,
       0,
       name,
       function(r, v){return [0, v, r[2], r[3]];}];
   function make_creator$0(name_fun, doc_fun, aliases_fun, compile_acc){
    var
     match = caml_call2(name_fun, name$0, compile_acc),
     compile_acc$0 = match[2],
     name_gen = match[1],
     match$0 = caml_call2(doc_fun, doc$0, compile_acc$0),
     compile_acc$1 = match$0[2],
     doc_gen = match$0[1],
     match$1 = caml_call2(aliases_fun, aliases$0, compile_acc$1),
     compile_acc$2 = match$1[2],
     aliases_gen = match$1[1];
    return [0,
            function(acc){
             var
              name = caml_call1(name_gen, acc),
              doc = caml_call1(doc_gen, acc),
              aliases = caml_call1(aliases_gen, acc);
             return [0, name, doc, aliases];
            },
            compile_acc$2];
   }
   function create$0(name, doc, aliases){return [0, name, doc, aliases];}
   function map$3(name_fun, doc_fun, aliases_fun){
    var
     _dM_ = caml_call1(aliases_fun, aliases$0),
     _dN_ = caml_call1(doc_fun, doc$0);
    return [0, caml_call1(name_fun, name$0), _dN_, _dM_];
   }
   function iter$1(name_fun, doc_fun, aliases_fun){
    caml_call1(name_fun, name$0);
    caml_call1(doc_fun, doc$0);
    return caml_call1(aliases_fun, aliases$0);
   }
   function fold$1(init, name_fun, doc_fun, aliases_fun){
    return caml_call2
            (aliases_fun,
             caml_call2(doc_fun, caml_call2(name_fun, init, name$0), doc$0),
             aliases$0);
   }
   function map_poly$0(record){
    var
     _dK_ = [0, caml_call1(record[1], aliases$0), 0],
     _dL_ = [0, caml_call1(record[1], doc$0), _dK_];
    return [0, caml_call1(record[1], name$0), _dL_];
   }
   function for_all$1(name_fun, doc_fun, aliases_fun){
    var
     _dI_ = caml_call1(name_fun, name$0),
     _dJ_ = _dI_ ? caml_call1(doc_fun, doc$0) : _dI_;
    return _dJ_ ? caml_call1(aliases_fun, aliases$0) : _dJ_;
   }
   function exists$1(name_fun, doc_fun, aliases_fun){
    var
     _dH_ = caml_call1(name_fun, name$0),
     _dG_ = _dH_ || caml_call1(doc_fun, doc$0);
    return _dG_ ? _dG_ : caml_call1(aliases_fun, aliases$0);
   }
   function to_list$1(name_fun, doc_fun, aliases_fun){
    var
     _dE_ = [0, caml_call1(aliases_fun, aliases$0), 0],
     _dF_ = [0, caml_call1(doc_fun, doc$0), _dE_];
    return [0, caml_call1(name_fun, name$0), _dF_];
   }
   function iter$2(record, name_fun, doc_fun, aliases_fun){
    caml_call3(name_fun, name$0, record, record[1]);
    caml_call3(doc_fun, doc$0, record, record[2]);
    return caml_call3(aliases_fun, aliases$0, record, record[3]);
   }
   function fold$2(record, init, name_fun, doc_fun, aliases_fun){
    var _dC_ = record[3], _dD_ = record[2];
    return caml_call4
            (aliases_fun,
             caml_call4
              (doc_fun,
               caml_call4(name_fun, init, name$0, record, record[1]),
               doc$0,
               record,
               _dD_),
             aliases$0,
             record,
             _dC_);
   }
   function for_all$2(record, name_fun, doc_fun, aliases_fun){
    var
     _dA_ = caml_call3(name_fun, name$0, record, record[1]),
     _dB_ = _dA_ ? caml_call3(doc_fun, doc$0, record, record[2]) : _dA_;
    return _dB_ ? caml_call3(aliases_fun, aliases$0, record, record[3]) : _dB_;
   }
   function exists$2(record, name_fun, doc_fun, aliases_fun){
    var
     _dz_ = caml_call3(name_fun, name$0, record, record[1]),
     _dy_ = _dz_ || caml_call3(doc_fun, doc$0, record, record[2]);
    return _dy_ ? _dy_ : caml_call3(aliases_fun, aliases$0, record, record[3]);
   }
   function to_list$2(record, name_fun, doc_fun, aliases_fun){
    var
     _dw_ = [0, caml_call3(aliases_fun, aliases$0, record, record[3]), 0],
     _dx_ = [0, caml_call3(doc_fun, doc$0, record, record[2]), _dw_];
    return [0, caml_call3(name_fun, name$0, record, record[1]), _dx_];
   }
   function map$4(record, name_fun, doc_fun, aliases_fun){
    var
     _du_ = caml_call3(aliases_fun, aliases$0, record, record[3]),
     _dv_ = caml_call3(doc_fun, doc$0, record, record[2]);
    return [0, caml_call3(name_fun, name$0, record, record[1]), _dv_, _du_];
   }
   function set_all_mutable_fields$0(record){
    caml_call1(Base_Field[1][1], record);
    return 0;
   }
   var
    Direct$0 =
      [0,
       iter$2,
       fold$2,
       for_all$2,
       exists$2,
       to_list$2,
       map$4,
       set_all_mutable_fields$0];
   function t_of_sexp$18(x_500){
    var _ds_ = [0, cst_aliases$1, 1, caml_call1(Base[147], Base[176]), 0];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_499,
             [0, cst_name$1, 1, Base[176], [0, cst_doc$1, 1, Base[176], _ds_]],
             function(param){
              return param !== cst_aliases$2
                      ? param !== cst_doc$2 ? param !== cst_name$2 ? -1 : 0 : 1
                      : 2;
             },
             0,
             function(param){
              var
               _dt_ = param[2],
               aliases = _dt_[2][1],
               doc = _dt_[1],
               name = param[1];
              return [0, name, doc, aliases];
             },
             x_500);
   }
   function sexp_of_t$18(param){
    var
     aliases_506 = param[3],
     doc_504 = param[2],
     name_502 = param[1],
     arg_507 = caml_call2(Base[148], Base[177], aliases_506),
     bnds_501 = [0, [1, [0, _aC_, [0, arg_507, 0]]], 0],
     arg_505 = caml_call1(Base[177], doc_504),
     bnds_501$0 = [0, [1, [0, _aD_, [0, arg_505, 0]]], bnds_501],
     arg_503 = caml_call1(Base[177], name_502),
     bnds_501$1 = [0, [1, [0, _aE_, [0, arg_503, 0]]], bnds_501$0];
    return [1, bnds_501$1];
   }
   function parse_name(t){
    var
     match = of_help_string(t[1]),
     flag_name = match[2],
     num_occurrences = match[1],
     match$0 = caml_call2(Base_String[99], flag_name, 32);
    if(match$0){
     var _dp_ = match$0[2], flag_name$0 = match$0[1];
     if(! _dp_) return [0, [0, num_occurrences, 0, flag_name$0]];
     if(! _dp_[2]) return [0, [0, num_occurrences, 1, flag_name$0]];
    }
    var
     _dq_ = [0, caml_call1(Sexplib0_Sexp_conv[7], flag_name), 0],
     _dr_ =
       [1, [0, caml_call1(Sexplib0_Sexp_conv[7], cst_Unable_to_parse), _dq_]];
    return [1, caml_call1(Base_Error[18], _dr_)];
   }
   function flag_name$0(t){
    var _do_ = parse_name(t);
    return caml_call2
            (Base_Or_error[43],
             _do_,
             function(param){var flag_name = param[3]; return flag_name;});
   }
   function num_occurrences(t){
    var _dn_ = parse_name(t);
    return caml_call2
            (Base_Or_error[43],
             _dn_,
             function(param){
              var num_occurrences = param[1];
              return num_occurrences;
             });
   }
   function requires_arg(t){
    var _dm_ = parse_name(t);
    return caml_call2
            (Base_Or_error[43],
             _dm_,
             function(param){
              var requires_arg = param[2];
              return requires_arg;
             });
   }
   function help_screen_compare(a, b){
    return b !== cst_help
            ? a
              !== cst_help
              ? b
                !== cst_version
                ? a
                  !== cst_version
                  ? b
                    !== cst_build_info
                    ? a
                      !== cst_build_info
                      ? b
                        !== cst_help$0
                        ? a
                          !== cst_help$0
                          ? b !== cst_version$0 ? a !== cst_version$0 ? 0 : 1 : -1
                          : 1
                        : -1
                      : 1
                    : -1
                  : 1
                : -1
              : 1
            : -1;
   }
   function sort(t){
    return caml_call2
            (Base_List[82],
             t,
             function(a, b){return help_screen_compare(a[1], b[1]);});
   }
   function word_wrap_and_strip(text, width){
    var chunks = caml_call2(Base_String[99], text, 10);
    return caml_call2
            (Base_List[13],
             chunks,
             function(text){
              var
               _di_ = caml_call2(Base_String[99], text, 32),
               words =
                 caml_call2
                  (Base_List[11],
                   _di_,
                   function(word){
                    return 1 - caml_call1(Base_String[14], word);
                   }),
               match =
                 caml_call3
                  (Base_List[20],
                   words,
                   0,
                   function(acc, word){
                    if(acc)
                     var
                      match = acc[1],
                      line = match[2],
                      lines = match[1],
                      _dj_ = caml_call2(Base[212], cst$1, word),
                      line_and_word = caml_call2(Base[212], line, _dj_),
                      _dk_ =
                        caml_ml_string_length(line_and_word) <= width
                         ? [0, lines, line_and_word]
                         : [0, [0, line, lines], word],
                      _dl_ = _dk_;
                    else
                     var _dl_ = [0, 0, word];
                    return [0, _dl_];
                   });
              if(! match) return 0;
              var match$0 = match[1], line = match$0[2], lines = match$0[1];
              return caml_call1(Base_List[61], [0, line, lines]);
             });
   }
   function spaces_string(width){
    return caml_call2(Base_String[65], width, 32);
   }
   function pad_spaces_to_suffix(x, width){
    var
     slack = width - caml_ml_string_length(x) | 0,
     _dh_ = spaces_string(slack);
    return caml_call2(Base[212], x, _dh_);
   }
   function indent_and_newline(x){
    return caml_call1(Base_List[10], [0, [0, indentation, 0], [0, x, _aF_]]);
   }
   var dot_indentation_offset = 27, lhs_pad = spaces_string(29);
   function _aG_(v){return indent_and_newline([0, lhs_pad, [0, v, 0]]);}
   var _aH_ = Base_List[52];
   function to_string(t){
    var
     _df_ =
       caml_call2
        (Base_List[13],
         t,
         function(t){
          var
           flag = t[1],
           flag_name_with_aliases =
             caml_call2(Base_String[67], _aI_, [0, flag, t[3]]),
           documentation = t[2],
           flag_width = 2 + caml_ml_string_length(flag_name_with_aliases) | 0,
           flag_on_its_own_line =
             29 <= flag_width
              ? indent_and_newline([0, flag_name_with_aliases, 0])
              : indent_and_newline
                ([0,
                  pad_spaces_to_suffix
                   (flag_name_with_aliases, dot_indentation_offset),
                  [0, spacing_dot, 0]]),
           wrapped_documentation = word_wrap_and_strip(documentation, 49);
          if(wrapped_documentation)
           var
            doc_wrapped_rest_lines = wrapped_documentation[2],
            doc_wrapped_first_line = wrapped_documentation[1],
            wrapped_doc_lines = caml_call2(_aH_, doc_wrapped_rest_lines, _aG_),
            prefix_doc_wrapped_first_line_ =
              function(x){
               return indent_and_newline
                       ([0,
                         pad_spaces_to_suffix(x, dot_indentation_offset),
                         [0, spacing_dot, [0, doc_wrapped_first_line, 0]]]);
              },
            _dg_ =
              27 <= caml_ml_string_length(flag_name_with_aliases)
               ? [0,
                 flag_on_its_own_line,
                 [0, prefix_doc_wrapped_first_line_(cst$2), wrapped_doc_lines]]
               : [0,
                 prefix_doc_wrapped_first_line_(flag_name_with_aliases),
                 wrapped_doc_lines];
          else
           var _dg_ = [0, flag_on_its_own_line, 0];
          return caml_call1(Base_List[10], _dg_);
         });
    return caml_call2(Base_String[67], 0, _df_);
   }
   function to_string$0(param){return param ? cst_flag : cst_subcommand;}
   var Key_type = [0, to_string$0];
   function lookup_expand(alist, prefix, key_type){
    var
     is_dash = caml_call1(Base_Char[16], 45),
     alist$0 =
       caml_call2(Base_String[20], prefix, is_dash)
        ? caml_call2
          (Base_List[52],
           alist,
           function(param){
            var data = param[2][1], key = param[1];
            return [0, key, [0, data, -461087063]];
           })
        : alist,
     matches =
       caml_call2
        (Base_List[11],
         alist$0,
         function(param){
          var key = param[1];
          return -461087063 <= param[2][2]
                  ? caml_call2(Base_String[47], key, prefix)
                  : caml_call2(Base_String[94], key, prefix);
         });
    if(! matches)
     return [1,
             caml_call3
              (Command_Import[7],
               [0,
                [11,
                 cst_unknown,
                 [24,
                  _aN_,
                  function(param, custom_printf_508){
                   return caml_call1(Key_type[1], custom_printf_508);
                  },
                  _aM_]],
                cst_unknown_Key_type_s],
               key_type,
               prefix)];
    if(! matches[2]){
     var _de_ = matches[1], data$0 = _de_[2][1], key$0 = _de_[1];
     return [0, [0, key$0, data$0]];
    }
    var
     match =
       caml_call2
        (Base_List[27],
         matches,
         function(param){
          var key = param[1];
          return caml_call2(Base_String[47], key, prefix);
         });
    if(match){
     var _dc_ = match[1], data = _dc_[2][1], key = _dc_[1];
     return [0, [0, key, data]];
    }
    var
     matching_keys = caml_call2(Base_List[52], matches, Base[213]),
     _dd_ = caml_call2(Base_String[67], _aJ_, matching_keys);
    return [1,
            caml_call4
             (Command_Import[7],
              [0,
               [24,
                _aL_,
                function(param, custom_printf_509){
                 return caml_call1(Key_type[1], custom_printf_509);
                },
                _aK_],
               cst_Key_type_s_is_an_ambiguous],
              key_type,
              prefix,
              _dd_)];
   }
   function compare$11(a_510, b_511){
    if(a_510 === b_511) return 0;
    var n = caml_call2(Base[171], a_510[1], b_511[1]);
    if(0 !== n) return n;
    var
     n$0 =
       caml_call3
        (Base[158],
         function(a_512, b_513){return caml_call2(Base[171], a_512, b_513);},
         a_510[2],
         b_511[2]);
    if(0 !== n$0) return n$0;
    var n$1 = compare$8(a_510[3], b_511[3]);
    return 0 === n$1
            ? caml_call3
              (Base[143],
               function(a_514, b_515){return compare$10(a_514, b_515);},
               a_510[4],
               b_511[4])
            : n$1;
   }
   function flags(r){return r[4];}
   function anons(r){return r[3];}
   function readme(r){return r[2];}
   function summary(r){return r[1];}
   var
    flags$0 =
      [0,
       function(param){return 0;},
       cst_flags$1,
       0,
       flags,
       function(r, v){return [0, r[1], r[2], r[3], v];}],
    anons$0 =
      [0,
       function(param){return 0;},
       cst_anons$0,
       0,
       anons,
       function(r, v){return [0, r[1], r[2], v, r[4]];}],
    readme$0 =
      [0,
       function(param){return 0;},
       cst_readme$6,
       0,
       readme,
       function(r, v){return [0, r[1], v, r[3], r[4]];}],
    summary$0 =
      [0,
       function(param){return 0;},
       cst_summary$6,
       0,
       summary,
       function(r, v){return [0, v, r[2], r[3], r[4]];}];
   function make_creator$1
   (summary_fun, readme_fun, anons_fun, flags_fun, compile_acc){
    var
     match = caml_call2(summary_fun, summary$0, compile_acc),
     compile_acc$0 = match[2],
     summary_gen = match[1],
     match$0 = caml_call2(readme_fun, readme$0, compile_acc$0),
     compile_acc$1 = match$0[2],
     readme_gen = match$0[1],
     match$1 = caml_call2(anons_fun, anons$0, compile_acc$1),
     compile_acc$2 = match$1[2],
     anons_gen = match$1[1],
     match$2 = caml_call2(flags_fun, flags$0, compile_acc$2),
     compile_acc$3 = match$2[2],
     flags_gen = match$2[1];
    return [0,
            function(acc){
             var
              summary = caml_call1(summary_gen, acc),
              readme = caml_call1(readme_gen, acc),
              anons = caml_call1(anons_gen, acc),
              flags = caml_call1(flags_gen, acc);
             return [0, summary, readme, anons, flags];
            },
            compile_acc$3];
   }
   function create$1(summary, readme, anons, flags){return [0, summary, readme, anons, flags];
   }
   function map$5(summary_fun, readme_fun, anons_fun, flags_fun){
    var
     _c$_ = caml_call1(flags_fun, flags$0),
     _da_ = caml_call1(anons_fun, anons$0),
     _db_ = caml_call1(readme_fun, readme$0);
    return [0, caml_call1(summary_fun, summary$0), _db_, _da_, _c$_];
   }
   function iter$3(summary_fun, readme_fun, anons_fun, flags_fun){
    caml_call1(summary_fun, summary$0);
    caml_call1(readme_fun, readme$0);
    caml_call1(anons_fun, anons$0);
    return caml_call1(flags_fun, flags$0);
   }
   function fold$3(init, summary_fun, readme_fun, anons_fun, flags_fun){
    return caml_call2
            (flags_fun,
             caml_call2
              (anons_fun,
               caml_call2
                (readme_fun,
                 caml_call2(summary_fun, init, summary$0),
                 readme$0),
               anons$0),
             flags$0);
   }
   function map_poly$1(record){
    var
     _c8_ = [0, caml_call1(record[1], flags$0), 0],
     _c9_ = [0, caml_call1(record[1], anons$0), _c8_],
     _c__ = [0, caml_call1(record[1], readme$0), _c9_];
    return [0, caml_call1(record[1], summary$0), _c__];
   }
   function for_all$3(summary_fun, readme_fun, anons_fun, flags_fun){
    var
     _c5_ = caml_call1(summary_fun, summary$0),
     _c6_ = _c5_ ? caml_call1(readme_fun, readme$0) : _c5_,
     _c7_ = _c6_ ? caml_call1(anons_fun, anons$0) : _c6_;
    return _c7_ ? caml_call1(flags_fun, flags$0) : _c7_;
   }
   function exists$3(summary_fun, readme_fun, anons_fun, flags_fun){
    var
     _c4_ = caml_call1(summary_fun, summary$0),
     _c2_ = _c4_ || caml_call1(readme_fun, readme$0),
     _c3_ = _c2_ || caml_call1(anons_fun, anons$0);
    return _c3_ ? _c3_ : caml_call1(flags_fun, flags$0);
   }
   function to_list$3(summary_fun, readme_fun, anons_fun, flags_fun){
    var
     _cZ_ = [0, caml_call1(flags_fun, flags$0), 0],
     _c0_ = [0, caml_call1(anons_fun, anons$0), _cZ_],
     _c1_ = [0, caml_call1(readme_fun, readme$0), _c0_];
    return [0, caml_call1(summary_fun, summary$0), _c1_];
   }
   function iter$4(record, summary_fun, readme_fun, anons_fun, flags_fun){
    caml_call3(summary_fun, summary$0, record, record[1]);
    caml_call3(readme_fun, readme$0, record, record[2]);
    caml_call3(anons_fun, anons$0, record, record[3]);
    return caml_call3(flags_fun, flags$0, record, record[4]);
   }
   function fold$4
   (record, init, summary_fun, readme_fun, anons_fun, flags_fun){
    var _cW_ = record[4], _cX_ = record[3], _cY_ = record[2];
    return caml_call4
            (flags_fun,
             caml_call4
              (anons_fun,
               caml_call4
                (readme_fun,
                 caml_call4(summary_fun, init, summary$0, record, record[1]),
                 readme$0,
                 record,
                 _cY_),
               anons$0,
               record,
               _cX_),
             flags$0,
             record,
             _cW_);
   }
   function for_all$4(record, summary_fun, readme_fun, anons_fun, flags_fun){
    var
     _cT_ = caml_call3(summary_fun, summary$0, record, record[1]),
     _cU_ = _cT_ ? caml_call3(readme_fun, readme$0, record, record[2]) : _cT_,
     _cV_ = _cU_ ? caml_call3(anons_fun, anons$0, record, record[3]) : _cU_;
    return _cV_ ? caml_call3(flags_fun, flags$0, record, record[4]) : _cV_;
   }
   function exists$4(record, summary_fun, readme_fun, anons_fun, flags_fun){
    var
     _cS_ = caml_call3(summary_fun, summary$0, record, record[1]),
     _cQ_ = _cS_ || caml_call3(readme_fun, readme$0, record, record[2]),
     _cR_ = _cQ_ || caml_call3(anons_fun, anons$0, record, record[3]);
    return _cR_ ? _cR_ : caml_call3(flags_fun, flags$0, record, record[4]);
   }
   function to_list$4(record, summary_fun, readme_fun, anons_fun, flags_fun){
    var
     _cN_ = [0, caml_call3(flags_fun, flags$0, record, record[4]), 0],
     _cO_ = [0, caml_call3(anons_fun, anons$0, record, record[3]), _cN_],
     _cP_ = [0, caml_call3(readme_fun, readme$0, record, record[2]), _cO_];
    return [0, caml_call3(summary_fun, summary$0, record, record[1]), _cP_];
   }
   function map$6(record, summary_fun, readme_fun, anons_fun, flags_fun){
    var
     _cK_ = caml_call3(flags_fun, flags$0, record, record[4]),
     _cL_ = caml_call3(anons_fun, anons$0, record, record[3]),
     _cM_ = caml_call3(readme_fun, readme$0, record, record[2]);
    return [0,
            caml_call3(summary_fun, summary$0, record, record[1]),
            _cM_,
            _cL_,
            _cK_];
   }
   function set_all_mutable_fields$1(record){
    caml_call1(Base_Field[1][1], record);
    return 0;
   }
   var
    Direct$1 =
      [0,
       iter$4,
       fold$4,
       for_all$4,
       exists$4,
       to_list$4,
       map$6,
       set_all_mutable_fields$1];
   function t_of_sexp$19(x_518){
    var
     _cH_ =
       [0,
        cst_anons$1,
        1,
        t_of_sexp$17,
        [0, cst_flags$2, 1, caml_call1(Base[147], t_of_sexp$18), 0]];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_517,
             [0,
              cst_summary$7,
              1,
              Base[176],
              [0, cst_readme$7, 5, Base[176], _cH_]],
             function(param){
              return param !== cst_anons$2
                      ? param
                        !== cst_flags$3
                        ? param
                          !== cst_readme$12
                          ? param !== cst_summary$12 ? -1 : 0
                          : 1
                        : 3
                      : 2;
             },
             0,
             function(param){
              var
               _cI_ = param[2],
               _cJ_ = _cI_[2],
               flags = _cJ_[2][1],
               anons = _cJ_[1],
               readme = _cI_[1],
               summary = param[1];
              return [0, summary, readme, anons, flags];
             },
             x_518);
   }
   function sexp_of_t$19(param){
    var
     flags_528 = param[4],
     anons_526 = param[3],
     readme_522 = param[2],
     summary_520 = param[1],
     arg_529 = caml_call2(Base[148], sexp_of_t$18, flags_528),
     bnds_519 = [0, [1, [0, _aO_, [0, arg_529, 0]]], 0],
     arg_527 = sexp_of_t$16(anons_526),
     bnds_519$0 = [0, [1, [0, _aP_, [0, arg_527, 0]]], bnds_519];
    if(readme_522)
     var
      v_523 = readme_522[1],
      arg_525 = caml_call1(Base[177], v_523),
      bnd_524 = [1, [0, _aQ_, [0, arg_525, 0]]],
      bnds_519$1 = [0, bnd_524, bnds_519$0];
    else
     var bnds_519$1 = bnds_519$0;
    var
     arg_521 = caml_call1(Base[177], summary_520),
     bnds_519$2 = [0, [1, [0, _aR_, [0, arg_521, 0]]], bnds_519$1];
    return [1, bnds_519$2];
   }
   function find_flag(t, prefix){
    if(caml_call2(Base_String[94], prefix, cst$3)){
     var
      _cy_ =
        caml_call2
         (Base_List[52],
          t[4],
          function(flag_info){
           var _cG_ = flag_name$0(flag_info);
           return caml_call2
                   (Base_Or_error[25][4][2],
                    _cG_,
                    function(flag_name){
                     return [0,
                             caml_call2
                              (Base_List[52],
                               [0, flag_name, flag_info[3]],
                               function(key){return [0, key, [0, flag_info, -481604174]];})];
                    });
          }),
      _cz_ = caml_call1(Base_Or_error[46], _cy_);
     return caml_call2
             (Base_Or_error[25][4][2],
              _cz_,
              function(choices){
               var
                _cC_ = Base[214],
                _cD_ = Base_Error[12],
                _cE_ =
                  lookup_expand(caml_call1(Base_List[10], choices), prefix, 1),
                _cF_ = caml_call2(Base_Result[32], _cE_, _cD_);
               return caml_call2(Base_Or_error[43], _cF_, _cC_);
              });
    }
    var
     _cA_ = [0, caml_call1(Sexplib0_Sexp_conv[7], prefix), 0],
     _cB_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Flags_must_begin_with),
         _cA_]];
    return [1, caml_call1(Base_Error[18], _cB_)];
   }
   function get_usage(t){
    var match = t[3];
    if(0 === match[0]){var usage$0 = match[1]; return usage$0;}
    var grammar = match[1];
    return usage(grammar);
   }
   function compare$12(cmp_a, a_532, b_533){
    if(a_532 === b_533) return 0;
    var n = caml_call2(Base[171], a_532[1], b_533[1]);
    if(0 !== n) return n;
    var
     n$0 =
       caml_call3
        (Base[158],
         function(a_534, b_535){return caml_call2(Base[171], a_534, b_535);},
         a_532[2],
         b_533[2]);
    return 0 === n$0
            ? caml_call3
              (Base_Lazy[1],
               function(a_536, b_537){
                return caml_call3
                        (Base_List[1],
                         function(a_538, b_539){
                          var
                           t_541 = a_538[2],
                           t_540 = a_538[1],
                           t_543 = b_539[2],
                           t_542 = b_539[1],
                           n = caml_call2(Base[171], t_540, t_542);
                          return 0 === n ? caml_call2(cmp_a, t_541, t_543) : n;
                         },
                         a_536,
                         b_537);
               },
               a_532[3],
               b_533[3])
            : n$0;
   }
   function subcommands(r){return r[3];}
   function readme$1(r){return r[2];}
   function summary$1(r){return r[1];}
   var
    subcommands$0 =
      [0,
       function(param){return 0;},
       cst_subcommands$1,
       0,
       subcommands,
       function(r, v){return [0, r[1], r[2], v];}],
    readme$2 =
      [0,
       function(param){return 0;},
       cst_readme$8,
       0,
       readme$1,
       function(r, v){return [0, r[1], v, r[3]];}],
    summary$2 =
      [0,
       function(param){return 0;},
       cst_summary$8,
       0,
       summary$1,
       function(r, v){return [0, v, r[2], r[3]];}];
   function make_creator$2
   (summary_fun, readme_fun, subcommands_fun, compile_acc){
    var
     match = caml_call2(summary_fun, summary$2, compile_acc),
     compile_acc$0 = match[2],
     summary_gen = match[1],
     match$0 = caml_call2(readme_fun, readme$2, compile_acc$0),
     compile_acc$1 = match$0[2],
     readme_gen = match$0[1],
     match$1 = caml_call2(subcommands_fun, subcommands$0, compile_acc$1),
     compile_acc$2 = match$1[2],
     subcommands_gen = match$1[1];
    return [0,
            function(acc){
             var
              summary = caml_call1(summary_gen, acc),
              readme = caml_call1(readme_gen, acc),
              subcommands = caml_call1(subcommands_gen, acc);
             return [0, summary, readme, subcommands];
            },
            compile_acc$2];
   }
   function create$2(summary, readme, subcommands){return [0, summary, readme, subcommands];
   }
   function map$7(summary_fun, readme_fun, subcommands_fun){
    var
     _cw_ = caml_call1(subcommands_fun, subcommands$0),
     _cx_ = caml_call1(readme_fun, readme$2);
    return [0, caml_call1(summary_fun, summary$2), _cx_, _cw_];
   }
   function iter$5(summary_fun, readme_fun, subcommands_fun){
    caml_call1(summary_fun, summary$2);
    caml_call1(readme_fun, readme$2);
    return caml_call1(subcommands_fun, subcommands$0);
   }
   function fold$5(init, summary_fun, readme_fun, subcommands_fun){
    return caml_call2
            (subcommands_fun,
             caml_call2
              (readme_fun, caml_call2(summary_fun, init, summary$2), readme$2),
             subcommands$0);
   }
   function map_poly$2(record){
    var
     _cu_ = [0, caml_call1(record[1], subcommands$0), 0],
     _cv_ = [0, caml_call1(record[1], readme$2), _cu_];
    return [0, caml_call1(record[1], summary$2), _cv_];
   }
   function for_all$5(summary_fun, readme_fun, subcommands_fun){
    var
     _cs_ = caml_call1(summary_fun, summary$2),
     _ct_ = _cs_ ? caml_call1(readme_fun, readme$2) : _cs_;
    return _ct_ ? caml_call1(subcommands_fun, subcommands$0) : _ct_;
   }
   function exists$5(summary_fun, readme_fun, subcommands_fun){
    var
     _cr_ = caml_call1(summary_fun, summary$2),
     _cq_ = _cr_ || caml_call1(readme_fun, readme$2);
    return _cq_ ? _cq_ : caml_call1(subcommands_fun, subcommands$0);
   }
   function to_list$5(summary_fun, readme_fun, subcommands_fun){
    var
     _co_ = [0, caml_call1(subcommands_fun, subcommands$0), 0],
     _cp_ = [0, caml_call1(readme_fun, readme$2), _co_];
    return [0, caml_call1(summary_fun, summary$2), _cp_];
   }
   function iter$6(record, summary_fun, readme_fun, subcommands_fun){
    caml_call3(summary_fun, summary$2, record, record[1]);
    caml_call3(readme_fun, readme$2, record, record[2]);
    return caml_call3(subcommands_fun, subcommands$0, record, record[3]);
   }
   function fold$6(record, init, summary_fun, readme_fun, subcommands_fun){
    var _cm_ = record[3], _cn_ = record[2];
    return caml_call4
            (subcommands_fun,
             caml_call4
              (readme_fun,
               caml_call4(summary_fun, init, summary$2, record, record[1]),
               readme$2,
               record,
               _cn_),
             subcommands$0,
             record,
             _cm_);
   }
   function for_all$6(record, summary_fun, readme_fun, subcommands_fun){
    var
     _ck_ = caml_call3(summary_fun, summary$2, record, record[1]),
     _cl_ = _ck_ ? caml_call3(readme_fun, readme$2, record, record[2]) : _ck_;
    return _cl_
            ? caml_call3(subcommands_fun, subcommands$0, record, record[3])
            : _cl_;
   }
   function exists$6(record, summary_fun, readme_fun, subcommands_fun){
    var
     _cj_ = caml_call3(summary_fun, summary$2, record, record[1]),
     _ci_ = _cj_ || caml_call3(readme_fun, readme$2, record, record[2]);
    return _ci_
            ? _ci_
            : caml_call3(subcommands_fun, subcommands$0, record, record[3]);
   }
   function to_list$6(record, summary_fun, readme_fun, subcommands_fun){
    var
     _cg_ =
       [0, caml_call3(subcommands_fun, subcommands$0, record, record[3]), 0],
     _ch_ = [0, caml_call3(readme_fun, readme$2, record, record[2]), _cg_];
    return [0, caml_call3(summary_fun, summary$2, record, record[1]), _ch_];
   }
   function map$8(record, summary_fun, readme_fun, subcommands_fun){
    var
     _ce_ = caml_call3(subcommands_fun, subcommands$0, record, record[3]),
     _cf_ = caml_call3(readme_fun, readme$2, record, record[2]);
    return [0,
            caml_call3(summary_fun, summary$2, record, record[1]),
            _cf_,
            _ce_];
   }
   function set_all_mutable_fields$2(record){
    caml_call1(Base_Field[1][1], record);
    return 0;
   }
   var
    Direct$2 =
      [0,
       iter$6,
       fold$6,
       for_all$6,
       exists$6,
       to_list$6,
       map$8,
       set_all_mutable_fields$2];
   function t_of_sexp$20(of_a_544, x_552){
    var
     _b$_ =
       caml_call1
        (Base_List[4],
         function(sexp_551){
          if(1 === sexp_551[0]){
           var _cc_ = sexp_551[1];
           if(_cc_){
            var _cd_ = _cc_[2];
            if(_cd_ && ! _cd_[2]){
             var
              arg1_548 = _cd_[1],
              arg0_547 = _cc_[1],
              res0_549 = caml_call1(Base[176], arg0_547),
              res1_550 = caml_call1(of_a_544, arg1_548);
             return [0, res0_549, res1_550];
            }
           }
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[2], error_source_546, 2, sexp_551);
         }),
     _ca_ = [0, cst_subcommands$2, 1, caml_call1(Base_Lazy[4], _b$_), 0];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_546,
             [0,
              cst_summary$9,
              1,
              Base[176],
              [0, cst_readme$9, 5, Base[176], _ca_]],
             function(param){
              return param !== cst_readme$12
                      ? param
                        !== cst_subcommands$3
                        ? param !== cst_summary$12 ? -1 : 0
                        : 2
                      : 1;
             },
             0,
             function(param){
              var
               _cb_ = param[2],
               subcommands = _cb_[2][1],
               readme = _cb_[1],
               summary = param[1];
              return [0, summary, readme, subcommands];
             },
             x_552);
   }
   function sexp_of_t$20(of_a_553, param){
    var
     subcommands_561 = param[3],
     readme_557 = param[2],
     summary_555 = param[1],
     _b__ =
       caml_call1
        (Base_List[5],
         function(param){
          var
           arg1_564 = param[2],
           arg0_563 = param[1],
           res0_565 = caml_call1(Base[177], arg0_563),
           res1_566 = caml_call1(of_a_553, arg1_564);
          return [1, [0, res0_565, [0, res1_566, 0]]];
         }),
     arg_562 = caml_call2(Base_Lazy[5], _b__, subcommands_561),
     bnds_554 = [0, [1, [0, _aS_, [0, arg_562, 0]]], 0];
    if(readme_557)
     var
      v_558 = readme_557[1],
      arg_560 = caml_call1(Base[177], v_558),
      bnd_559 = [1, [0, _aT_, [0, arg_560, 0]]],
      bnds_554$0 = [0, bnd_559, bnds_554];
    else
     var bnds_554$0 = bnds_554;
    var
     arg_556 = caml_call1(Base[177], summary_555),
     bnds_554$1 = [0, [1, [0, _aU_, [0, arg_556, 0]]], bnds_554$0];
    return [1, bnds_554$1];
   }
   function find_subcommand(t, prefix){
    if(caml_call2(Base_String[94], prefix, cst$4)){
     var
      _b0_ = [0, caml_call1(Sexplib0_Sexp_conv[7], prefix), 0],
      _b1_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Subcommands_must_not_begin),
          _b0_]];
     return [1, caml_call1(Base_Error[18], _b1_)];
    }
    var _b3_ = t[3], _b4_ = caml_obj_tag(_b3_);
    a:
    {
     var
      _b2_ =
        function(param){
         var a = param[2], key = param[1];
         return [0, key, [0, a, -481604174]];
        };
     if(250 === _b4_)
      var _b5_ = _b3_[1];
     else{
      if(246 !== _b4_ && 244 !== _b4_){var _b5_ = _b3_; break a;}
      var _b5_ = caml_call1(CamlinternalLazy[2], _b3_);
     }
    }
    var
     choices = caml_call2(Base_List[52], _b5_, _b2_),
     _b6_ = Base[214],
     _b7_ = Base_Error[12],
     _b8_ = lookup_expand(choices, prefix, 0),
     _b9_ = caml_call2(Base_Result[32], _b8_, _b7_);
    return caml_call2(Base_Or_error[43], _b9_, _b6_);
   }
   function compare$13(a_567, b_568){
    if(a_567 === b_568) return 0;
    var n = caml_call2(Base[171], a_567[1], b_568[1]);
    if(0 !== n) return n;
    var
     n$0 =
       caml_call3
        (Base[158],
         function(a_569, b_570){return caml_call2(Base[171], a_569, b_570);},
         a_567[2],
         b_568[2]);
    if(0 !== n$0) return n$0;
    var n$1 = caml_call2(Base[171], a_567[3], b_568[3]);
    if(0 !== n$1) return n$1;
    var n$2 = caml_call2(Base[171], a_567[4], b_568[4]);
    return 0 === n$2
            ? caml_call3
              (Base[143],
               function(a_571, b_572){
                return caml_call2(Base[171], a_571, b_572);
               },
               a_567[5],
               b_568[5])
            : n$2;
   }
   function child_subcommand(r){return r[5];}
   function path_to_exe(r){return r[4];}
   function working_dir(r){return r[3];}
   function readme$3(r){return r[2];}
   function summary$3(r){return r[1];}
   var
    child_subcommand$0 =
      [0,
       function(param){return 0;},
       cst_child_subcommand$0,
       0,
       child_subcommand,
       function(r, v){return [0, r[1], r[2], r[3], r[4], v];}],
    path_to_exe$0 =
      [0,
       function(param){return 0;},
       cst_path_to_exe$2,
       0,
       path_to_exe,
       function(r, v){return [0, r[1], r[2], r[3], v, r[5]];}],
    working_dir$0 =
      [0,
       function(param){return 0;},
       cst_working_dir$1,
       0,
       working_dir,
       function(r, v){return [0, r[1], r[2], v, r[4], r[5]];}],
    readme$4 =
      [0,
       function(param){return 0;},
       cst_readme$10,
       0,
       readme$3,
       function(r, v){return [0, r[1], v, r[3], r[4], r[5]];}],
    summary$4 =
      [0,
       function(param){return 0;},
       cst_summary$10,
       0,
       summary$3,
       function(r, v){return [0, v, r[2], r[3], r[4], r[5]];}];
   function make_creator$3
   (summary_fun,
    readme_fun,
    working_dir_fun,
    path_to_exe_fun,
    child_subcommand_fun,
    compile_acc){
    var
     match = caml_call2(summary_fun, summary$4, compile_acc),
     compile_acc$0 = match[2],
     summary_gen = match[1],
     match$0 = caml_call2(readme_fun, readme$4, compile_acc$0),
     compile_acc$1 = match$0[2],
     readme_gen = match$0[1],
     match$1 = caml_call2(working_dir_fun, working_dir$0, compile_acc$1),
     compile_acc$2 = match$1[2],
     working_dir_gen = match$1[1],
     match$2 = caml_call2(path_to_exe_fun, path_to_exe$0, compile_acc$2),
     compile_acc$3 = match$2[2],
     path_to_exe_gen = match$2[1],
     match$3 =
       caml_call2(child_subcommand_fun, child_subcommand$0, compile_acc$3),
     compile_acc$4 = match$3[2],
     child_subcommand_gen = match$3[1];
    return [0,
            function(acc){
             var
              summary = caml_call1(summary_gen, acc),
              readme = caml_call1(readme_gen, acc),
              working_dir = caml_call1(working_dir_gen, acc),
              path_to_exe = caml_call1(path_to_exe_gen, acc),
              child_subcommand = caml_call1(child_subcommand_gen, acc);
             return [0,
                     summary,
                     readme,
                     working_dir,
                     path_to_exe,
                     child_subcommand];
            },
            compile_acc$4];
   }
   function create$3
   (summary, readme, working_dir, path_to_exe, child_subcommand){
    return [0, summary, readme, working_dir, path_to_exe, child_subcommand];
   }
   function map$9
   (summary_fun,
    readme_fun,
    working_dir_fun,
    path_to_exe_fun,
    child_subcommand_fun){
    var
     _bW_ = caml_call1(child_subcommand_fun, child_subcommand$0),
     _bX_ = caml_call1(path_to_exe_fun, path_to_exe$0),
     _bY_ = caml_call1(working_dir_fun, working_dir$0),
     _bZ_ = caml_call1(readme_fun, readme$4);
    return [0, caml_call1(summary_fun, summary$4), _bZ_, _bY_, _bX_, _bW_];
   }
   function iter$7
   (summary_fun,
    readme_fun,
    working_dir_fun,
    path_to_exe_fun,
    child_subcommand_fun){
    caml_call1(summary_fun, summary$4);
    caml_call1(readme_fun, readme$4);
    caml_call1(working_dir_fun, working_dir$0);
    caml_call1(path_to_exe_fun, path_to_exe$0);
    return caml_call1(child_subcommand_fun, child_subcommand$0);
   }
   function fold$7
   (init,
    summary_fun,
    readme_fun,
    working_dir_fun,
    path_to_exe_fun,
    child_subcommand_fun){
    return caml_call2
            (child_subcommand_fun,
             caml_call2
              (path_to_exe_fun,
               caml_call2
                (working_dir_fun,
                 caml_call2
                  (readme_fun,
                   caml_call2(summary_fun, init, summary$4),
                   readme$4),
                 working_dir$0),
               path_to_exe$0),
             child_subcommand$0);
   }
   function map_poly$3(record){
    var
     _bS_ = [0, caml_call1(record[1], child_subcommand$0), 0],
     _bT_ = [0, caml_call1(record[1], path_to_exe$0), _bS_],
     _bU_ = [0, caml_call1(record[1], working_dir$0), _bT_],
     _bV_ = [0, caml_call1(record[1], readme$4), _bU_];
    return [0, caml_call1(record[1], summary$4), _bV_];
   }
   function for_all$7
   (summary_fun,
    readme_fun,
    working_dir_fun,
    path_to_exe_fun,
    child_subcommand_fun){
    var
     _bO_ = caml_call1(summary_fun, summary$4),
     _bP_ = _bO_ ? caml_call1(readme_fun, readme$4) : _bO_,
     _bQ_ = _bP_ ? caml_call1(working_dir_fun, working_dir$0) : _bP_,
     _bR_ = _bQ_ ? caml_call1(path_to_exe_fun, path_to_exe$0) : _bQ_;
    return _bR_ ? caml_call1(child_subcommand_fun, child_subcommand$0) : _bR_;
   }
   function exists$7
   (summary_fun,
    readme_fun,
    working_dir_fun,
    path_to_exe_fun,
    child_subcommand_fun){
    var
     _bN_ = caml_call1(summary_fun, summary$4),
     _bK_ = _bN_ || caml_call1(readme_fun, readme$4),
     _bL_ = _bK_ || caml_call1(working_dir_fun, working_dir$0),
     _bM_ = _bL_ || caml_call1(path_to_exe_fun, path_to_exe$0);
    return _bM_ ? _bM_ : caml_call1(child_subcommand_fun, child_subcommand$0);
   }
   function to_list$7
   (summary_fun,
    readme_fun,
    working_dir_fun,
    path_to_exe_fun,
    child_subcommand_fun){
    var
     _bG_ = [0, caml_call1(child_subcommand_fun, child_subcommand$0), 0],
     _bH_ = [0, caml_call1(path_to_exe_fun, path_to_exe$0), _bG_],
     _bI_ = [0, caml_call1(working_dir_fun, working_dir$0), _bH_],
     _bJ_ = [0, caml_call1(readme_fun, readme$4), _bI_];
    return [0, caml_call1(summary_fun, summary$4), _bJ_];
   }
   function iter$8
   (record,
    summary_fun,
    readme_fun,
    working_dir_fun,
    path_to_exe_fun,
    child_subcommand_fun){
    caml_call3(summary_fun, summary$4, record, record[1]);
    caml_call3(readme_fun, readme$4, record, record[2]);
    caml_call3(working_dir_fun, working_dir$0, record, record[3]);
    caml_call3(path_to_exe_fun, path_to_exe$0, record, record[4]);
    return caml_call3
            (child_subcommand_fun, child_subcommand$0, record, record[5]);
   }
   function fold$8
   (record,
    init,
    summary_fun,
    readme_fun,
    working_dir_fun,
    path_to_exe_fun,
    child_subcommand_fun){
    var
     _bC_ = record[5],
     _bD_ = record[4],
     _bE_ = record[3],
     _bF_ = record[2];
    return caml_call4
            (child_subcommand_fun,
             caml_call4
              (path_to_exe_fun,
               caml_call4
                (working_dir_fun,
                 caml_call4
                  (readme_fun,
                   caml_call4(summary_fun, init, summary$4, record, record[1]),
                   readme$4,
                   record,
                   _bF_),
                 working_dir$0,
                 record,
                 _bE_),
               path_to_exe$0,
               record,
               _bD_),
             child_subcommand$0,
             record,
             _bC_);
   }
   function for_all$8
   (record,
    summary_fun,
    readme_fun,
    working_dir_fun,
    path_to_exe_fun,
    child_subcommand_fun){
    var
     _by_ = caml_call3(summary_fun, summary$4, record, record[1]),
     _bz_ = _by_ ? caml_call3(readme_fun, readme$4, record, record[2]) : _by_,
     _bA_ =
       _bz_
        ? caml_call3(working_dir_fun, working_dir$0, record, record[3])
        : _bz_,
     _bB_ =
       _bA_
        ? caml_call3(path_to_exe_fun, path_to_exe$0, record, record[4])
        : _bA_;
    return _bB_
            ? caml_call3
              (child_subcommand_fun, child_subcommand$0, record, record[5])
            : _bB_;
   }
   function exists$8
   (record,
    summary_fun,
    readme_fun,
    working_dir_fun,
    path_to_exe_fun,
    child_subcommand_fun){
    var
     _bx_ = caml_call3(summary_fun, summary$4, record, record[1]),
     _bu_ = _bx_ || caml_call3(readme_fun, readme$4, record, record[2]),
     _bv_ =
       _bu_ || caml_call3(working_dir_fun, working_dir$0, record, record[3]),
     _bw_ =
       _bv_ || caml_call3(path_to_exe_fun, path_to_exe$0, record, record[4]);
    return _bw_
            ? _bw_
            : caml_call3
              (child_subcommand_fun, child_subcommand$0, record, record[5]);
   }
   function to_list$8
   (record,
    summary_fun,
    readme_fun,
    working_dir_fun,
    path_to_exe_fun,
    child_subcommand_fun){
    var
     _bq_ =
       [0,
        caml_call3
         (child_subcommand_fun, child_subcommand$0, record, record[5]),
        0],
     _br_ =
       [0,
        caml_call3(path_to_exe_fun, path_to_exe$0, record, record[4]),
        _bq_],
     _bs_ =
       [0,
        caml_call3(working_dir_fun, working_dir$0, record, record[3]),
        _br_],
     _bt_ = [0, caml_call3(readme_fun, readme$4, record, record[2]), _bs_];
    return [0, caml_call3(summary_fun, summary$4, record, record[1]), _bt_];
   }
   function map$10
   (record,
    summary_fun,
    readme_fun,
    working_dir_fun,
    path_to_exe_fun,
    child_subcommand_fun){
    var
     _bm_ =
       caml_call3(child_subcommand_fun, child_subcommand$0, record, record[5]),
     _bn_ = caml_call3(path_to_exe_fun, path_to_exe$0, record, record[4]),
     _bo_ = caml_call3(working_dir_fun, working_dir$0, record, record[3]),
     _bp_ = caml_call3(readme_fun, readme$4, record, record[2]);
    return [0,
            caml_call3(summary_fun, summary$4, record, record[1]),
            _bp_,
            _bo_,
            _bn_,
            _bm_];
   }
   function set_all_mutable_fields$3(record){
    caml_call1(Base_Field[1][1], record);
    return 0;
   }
   var
    Direct$3 =
      [0,
       iter$8,
       fold$8,
       for_all$8,
       exists$8,
       to_list$8,
       map$10,
       set_all_mutable_fields$3];
   function t_of_sexp$21(x_575){
    var
     _bi_ =
       [0, cst_child_subcommand$1, 1, caml_call1(Base[147], Base[176]), 0];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_574,
             [0,
              cst_summary$11,
              1,
              Base[176],
              [0,
               cst_readme$11,
               5,
               Base[176],
               [0,
                cst_working_dir$2,
                1,
                Base[176],
                [0, cst_path_to_exe$3, 1, Base[176], _bi_]]]],
             function(param){
              return param !== cst_child_subcommand$2
                      ? param
                        !== cst_path_to_exe$4
                        ? param
                          !== cst_readme$12
                          ? param
                            !== cst_summary$12
                            ? param !== cst_working_dir$3 ? -1 : 2
                            : 0
                          : 1
                        : 3
                      : 4;
             },
             0,
             function(param){
              var
               _bj_ = param[2],
               _bk_ = _bj_[2],
               _bl_ = _bk_[2],
               child_subcommand = _bl_[2][1],
               path_to_exe = _bl_[1],
               working_dir = _bk_[1],
               readme = _bj_[1],
               summary = param[1];
              return [0,
                      summary,
                      readme,
                      working_dir,
                      path_to_exe,
                      child_subcommand];
             },
             x_575);
   }
   function sexp_of_t$21(param){
    var
     child_subcommand_587 = param[5],
     path_to_exe_585 = param[4],
     working_dir_583 = param[3],
     readme_579 = param[2],
     summary_577 = param[1],
     arg_588 = caml_call2(Base[148], Base[177], child_subcommand_587),
     bnds_576 = [0, [1, [0, _aV_, [0, arg_588, 0]]], 0],
     arg_586 = caml_call1(Base[177], path_to_exe_585),
     bnds_576$0 = [0, [1, [0, _aW_, [0, arg_586, 0]]], bnds_576],
     arg_584 = caml_call1(Base[177], working_dir_583),
     bnds_576$1 = [0, [1, [0, _aX_, [0, arg_584, 0]]], bnds_576$0];
    if(readme_579)
     var
      v_580 = readme_579[1],
      arg_582 = caml_call1(Base[177], v_580),
      bnd_581 = [1, [0, _aY_, [0, arg_582, 0]]],
      bnds_576$2 = [0, bnd_581, bnds_576$1];
    else
     var bnds_576$2 = bnds_576$1;
    var
     arg_578 = caml_call1(Base[177], summary_577),
     bnds_576$3 = [0, [1, [0, _aZ_, [0, arg_578, 0]]], bnds_576$2];
    return [1, bnds_576$3];
   }
   function compare$14(a_589, b_590){
    var a_589$0 = a_589, b_590$0 = b_590;
    for(;;){
     if(a_589$0 === b_590$0) return 0;
     switch(a_589$0[0]){
       case 0:
        var a_591 = a_589$0[1];
        if(0 !== b_590$0[0]) return -1;
        var b_592 = b_590$0[1];
        return compare$11(a_591, b_592);
       case 1:
        var a_593 = a_589$0[1];
        switch(b_590$0[0]){
          case 0: break;
          case 1:
           var b_594 = b_590$0[1];
           return compare$12
                   (function(a_595, b_596){return compare$14(a_595, b_596);},
                    a_593,
                    b_594);
          default: return -1;
        }
        break;
       default:
        var a_599 = a_589$0[2], a_597 = a_589$0[1];
        switch(b_590$0[0]){
          case 0: break;
          case 1:
           return 1;
          default:
           var
            b_600 = b_590$0[2],
            b_598 = b_590$0[1],
            n = compare$13(a_597, b_598);
           if(0 !== n) return n;
           a_589$0 = a_599;
           b_590$0 = b_600;
           continue;
        }
     }
     return 1;
    }
   }
   var letrec_function_context$5 = [];
   function t_of_sexp$22(sexp_605){
    a:
    {
     if(0 === sexp_605[0]){
      var _be_ = sexp_605[1];
      b:
      if(_be_ !== cst_Basic){
       c:
       if(_be_ !== cst_Exec){
        if(_be_ !== cst_Group){
         if(_be_ === cst_basic) break b;
         if(_be_ === cst_exec) break c;
         if(_be_ !== cst_group) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5],
                 letrec_function_context$5[1],
                 sexp_605);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5],
                letrec_function_context$5[1],
                sexp_605);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5],
               letrec_function_context$5[1],
               sexp_605);
     }
     var _bf_ = sexp_605[1];
     if(! _bf_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7],
               letrec_function_context$5[1],
               sexp_605);
     var _bg_ = _bf_[1];
     if(0 !== _bg_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6],
               letrec_function_context$5[1],
               sexp_605);
     var tag_606 = _bg_[1];
     b:
     if(tag_606 !== cst_Basic){
      c:
      if(tag_606 !== cst_Exec){
       if(tag_606 !== cst_Group){
        if(tag_606 === cst_basic) break b;
        if(tag_606 === cst_exec) break c;
        if(tag_606 !== cst_group) break a;
       }
       var sexp_args_612 = _bf_[2];
       if(sexp_args_612 && ! sexp_args_612[2]){
        var
         arg0_613 = sexp_args_612[1],
         res0_614 = t_of_sexp$20(t_of_sexp$22, arg0_613);
        return [1, res0_614];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                letrec_function_context$5[1],
                tag_606,
                sexp_605);
      }
      var sexp_args_617 = _bf_[2];
      if(sexp_args_617){
       var _bh_ = sexp_args_617[2];
       if(_bh_ && ! _bh_[2]){
        var
         arg1_619 = _bh_[1],
         arg0_618 = sexp_args_617[1],
         res0_620 = t_of_sexp$21(arg0_618),
         res1_621 = t_of_sexp$22(arg1_619);
        return [2, res0_620, res1_621];
       }
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               letrec_function_context$5[1],
               tag_606,
               sexp_605);
     }
     var sexp_args_607 = _bf_[2];
     if(sexp_args_607 && ! sexp_args_607[2]){
      var arg0_608 = sexp_args_607[1], res0_609 = t_of_sexp$19(arg0_608);
      return [0, res0_609];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4],
              letrec_function_context$5[1],
              tag_606,
              sexp_605);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[8],
             letrec_function_context$5[1],
             sexp_605);
   }
   caml_update_dummy(letrec_function_context$5, [0, error_source_603]);
   function sexp_of_t$22(param){
    switch(param[0]){
      case 0:
       var arg0_622 = param[1], res0_623 = sexp_of_t$19(arg0_622);
       return [1, [0, _a0_, [0, res0_623, 0]]];
      case 1:
       var
        arg0_624 = param[1],
        res0_625 = sexp_of_t$20(sexp_of_t$22, arg0_624);
       return [1, [0, _a1_, [0, res0_625, 0]]];
      default:
       var
        arg1_627 = param[2],
        arg0_626 = param[1],
        res0_628 = sexp_of_t$21(arg0_626),
        res1_629 = sexp_of_t$22(arg1_627);
       return [1, [0, _a2_, [0, res0_628, [0, res1_629, 0]]]];
    }
   }
   function expanded_subcommands(t){
    function expand(param){
     var param$0 = param;
     for(;;)
      switch(param$0[0]){
        case 0:
         return _a3_;
        case 1:
         var subcommands = param$0[1][3], _bb_ = caml_obj_tag(subcommands);
         a:
         {
          var
           _ba_ =
             function(param){
              var t = param[2], name = param[1], _bd_ = expand(t);
              return caml_call2
                      (Base_List[52],
                       _bd_,
                       function(path){return [0, name, path];});
             };
          if(250 === _bb_)
           var _bc_ = subcommands[1];
          else{
           if(246 !== _bb_ && 244 !== _bb_){var _bc_ = subcommands; break a;}
           var _bc_ = caml_call1(CamlinternalLazy[2], subcommands);
          }
         }
         return caml_call2(Base_List[13], _bc_, _ba_);
        default: var t = param$0[2]; param$0 = t;
      }
    }
    var _a$_ = expand(t);
    return caml_call1(Base_List[61], _a$_);
   }
   function sexp_of_t$23(param){
    switch(param[0]){
      case 0:
       var arg0_630 = param[1], res0_631 = sexp_of_t$19(arg0_630);
       return [1, [0, _a4_, [0, res0_631, 0]]];
      case 1:
       var
        arg0_632 = param[1],
        res0_633 = sexp_of_t$20(sexp_of_t$23, arg0_632);
       return [1, [0, _a5_, [0, res0_633, 0]]];
      case 2:
       var arg0_634 = param[1], res0_635 = sexp_of_t$21(arg0_634);
       return [1, [0, _a6_, [0, res0_635, 0]]];
      default:
       var
        arg0_636 = param[1],
        res0_637 = caml_call2(Base_Lazy[5], sexp_of_t$23, arg0_636);
       return [1, [0, _a7_, [0, res0_637, 0]]];
    }
   }
   var extraction_var = caml_call1(Command_Env_var[4], 1);
   function f(i, supported, param){
    return caml_call2(Base_Set[10], supported, i);
   }
   var
    init = caml_call1(Base_Set[5], [0, Base_Int[22]]),
    supported_versions = f(3, f(2, f(1, init, v1$0), v2$0), v3$0);
   function to_versioned(latest, version_to_use){
    var switcher = version_to_use - 1 | 0;
    if(2 >= switcher >>> 0)
     switch(switcher){
       case 0:
        return [0, of_latest$5(latest)];
       case 1:
        return [1, of_latest$4(latest)];
       default: return [2, latest];
     }
    var
     _a__ =
       caml_call5
        (Base_Error[17],
         _ai_,
         0,
         cst_unsupported_version_to_use,
         version_to_use,
         Sexplib0_Sexp_conv[10]);
    return caml_call1(Base_Error[29], _a__);
   }
   function fully_forced(param){
    var param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        var b = param$0[1]; return [0, b];
       case 1:
        var g = param$0[1]; return [1, map(g, fully_forced)];
       case 2:
        var f = param$0[2], e = param$0[1];
        return [2, e, fully_forced(caml_call1(f, 0))];
       default:
        var thunk = param$0[1], _a9_ = caml_obj_tag(thunk);
        a:
        if(250 === _a9_)
         var param$1 = thunk[1];
        else{
         if(246 !== _a9_ && 244 !== _a9_){var param$1 = thunk; break a;}
         var param$1 = caml_call1(CamlinternalLazy[2], thunk);
        }
        param$0 = param$1;
     }
   }
   function get_summary(param){
    var param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        var b = param$0[1]; return b[1];
       case 1:
        var g = param$0[1]; return g[1];
       case 2:
        var e = param$0[1]; return e[1];
       default:
        var thunk = param$0[1], _a8_ = caml_obj_tag(thunk);
        a:
        if(250 === _a8_)
         var param$1 = thunk[1];
        else{
         if(246 !== _a8_ && 244 !== _a8_){var param$1 = thunk; break a;}
         var param$1 = caml_call1(CamlinternalLazy[2], thunk);
        }
        param$0 = param$1;
     }
   }
   caml_call1(Ppx_inline_test_lib[6], cst_command);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Command_Shape);
   var
    Command_Shape =
      [0,
       [0,
        [0, compare$7, sexp_of_t$15, invariant, usage],
        compare$8,
        sexp_of_t$16],
       [0,
        compare$9,
        all,
        at_most_once,
        at_least_once,
        [0,
         names,
         at_most_once$0,
         at_least_once$0,
         fold,
         make_creator,
         create,
         map$1,
         iter,
         for_all,
         exists,
         to_list,
         map_poly,
         Direct],
        sexp_of_t$17,
        to_help_string],
       [0,
        compare$10,
        aliases,
        doc,
        name,
        [0,
         names$0,
         aliases$0,
         doc$0,
         name$0,
         fold$1,
         make_creator$0,
         create$0,
         map$3,
         iter$1,
         for_all$1,
         exists$1,
         to_list$1,
         map_poly$0,
         Direct$0],
        sexp_of_t$18,
        flag_name$0,
        num_occurrences,
        requires_arg,
        t_of_sexp$18],
       [0, sort, to_string],
       [0,
        compare$11,
        flags,
        anons,
        readme,
        summary,
        [0,
         names$1,
         flags$0,
         anons$0,
         readme$0,
         summary$0,
         fold$3,
         make_creator$1,
         create$1,
         map$5,
         iter$3,
         for_all$3,
         exists$3,
         to_list$3,
         map_poly$1,
         Direct$1],
        sexp_of_t$19,
        find_flag,
        get_usage,
        t_of_sexp$19],
       [0,
        compare$12,
        subcommands,
        readme$1,
        summary$1,
        [0,
         names$2,
         subcommands$0,
         readme$2,
         summary$2,
         fold$5,
         make_creator$2,
         create$2,
         map$7,
         iter$5,
         for_all$5,
         exists$5,
         to_list$5,
         map_poly$2,
         Direct$2],
        sexp_of_t$20,
        find_subcommand,
        map,
        t_of_sexp$20],
       [0,
        compare$13,
        child_subcommand,
        path_to_exe,
        working_dir,
        readme$3,
        summary$3,
        [0,
         names$3,
         child_subcommand$0,
         path_to_exe$0,
         working_dir$0,
         readme$4,
         summary$4,
         fold$7,
         make_creator$3,
         create$3,
         map$9,
         iter$7,
         for_all$7,
         exists$7,
         to_list$7,
         map_poly$3,
         Direct$3],
        sexp_of_t$21,
        t_of_sexp$21],
       [0, compare$14, sexp_of_t$22, expanded_subcommands, t_of_sexp$22],
       fully_forced,
       get_summary,
       [0,
        sexp_of_t$23,
        extraction_var,
        supported_versions,
        [0, t_of_sexp$15, sexp_of_t$14],
        of_versioned,
        to_versioned],
       228660148,
       [0,
        [0,
         [0, [0, compare$0, t_of_sexp$1, sexp_of_t$0, stable_witness]],
         [0, compare$1, t_of_sexp$2, sexp_of_t$1, stable_witness$0]],
        [0, [0, compare$2, t_of_sexp$3, sexp_of_t$2, stable_witness$1]],
        [0,
         [0, compare$3, t_of_sexp$4, sexp_of_t$3, stable_witness$2],
         [0, t_of_sexp$5, sexp_of_t$4, stable_witness$3, to_latest, of_latest]],
        [0, [0, compare$4, t_of_sexp$6, sexp_of_t$5, stable_witness$4, map]],
        [0,
         [0, compare$5, t_of_sexp$8, sexp_of_t$7, stable_witness$5],
         [0,
          t_of_sexp$9,
          sexp_of_t$8,
          stable_witness$6,
          to_latest$2,
          of_latest$2],
         [0,
          t_of_sexp$10,
          sexp_of_t$9,
          stable_witness$7,
          to_latest$3,
          of_latest$3]],
        [0, [0, compare$6, t_of_sexp$11, sexp_of_t$10, stable_witness$8]]],
       [0,
        Key_type,
        abs_path,
        help_screen_compare,
        lookup_expand,
        word_wrap_and_strip]];
   runtime.caml_register_global(483, Command_Shape, cst_Command_Shape$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Command__Command_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Command_Command_intf = "Command__Command_intf",
    cst_command = "command";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Command_Command_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_command);
   caml_call1(Expect_test_collector[6][1], "command/src/command_intf.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_command, "command_intf.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_command);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Command_Command_intf);
   var Command_Command_intf = [0];
   runtime.caml_register_global
    (11, Command_Command_intf, cst_Command_Command_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Command
//# unitInfo: Requires: Base, Base__Applicative, Base__Array, Base__Bool, Base__Char, Base__Comparator, Base__Error, Base__Exn, Base__Field, Base__Float, Base__Fn, Base__Info, Base__Int, Base__Lazy, Base__List, Base__Map, Base__Nothing, Base__Option, Base__Or_error, Base__Result, Base__Set, Base__Staged, Base__String, Base__Type_equal, CamlinternalLazy, Command__Command_intf, Command__Env_var, Command__Import, Command__Shape, Expect_test_collector, Expect_test_common__File, Expect_test_config, Filename_base, Inline_test_config, Parsexp, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib__Conv, Sexplib__Sexp, Stdio, Stdio__In_channel, Stdlib, Stdlib__List, Stdlib__String, Stdlib__Sys, Univ_map
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$23 = "",
    cst$25 = "\n",
    cst$28 = "\n\n",
    cst$21 = " ",
    cst$22 = "  ",
    cst_passed_more_than_once = " passed more than once",
    cst_value = " value ",
    cst_s = "%s",
    cst$27 = ",",
    cst$26 = "-",
    cst_build_info$1 = "--build-info",
    cst_help$9 = "--help",
    cst_version$2 = "--version",
    cst_build_info$2 = "-build-info",
    cst_expand_dots$1 = "-expand-dots",
    cst_flags$1 = "-flags",
    cst_help$8 = "-help",
    cst_version$3 = "-version",
    cst$24 = ".",
    cst_438ccee7e1ef92685d7ed2fd99$1 = "438ccee7e1ef92685d7ed2fd99e531ab",
    cst_Command$0 = "Command",
    cst$29 = "_",
    cst_command$0 = "command",
    cst_command_src_command_ml$10 = "command/src/command.ml",
    cst_failed_to_parse = "failed to parse ",
    cst_flag = "flag ",
    cst_flag_s_passed_more_than_on = "flag %s passed more than once",
    cst_help$7 = "help",
    cst_invalid$1 = "invalid ",
    cst_missing_required_flag$0 = "missing required flag: ",
    cst_missing_required_flag_s = "missing required flag: %s",
    cst_multiple_flags_named = "multiple flags named ",
    cst_multiple_flags_named_s = "multiple flags named %s",
    cst_same_as = 'same as "',
    cst_same_as_s = 'same as "%s"',
    cst_stderr$0 = "stderr",
    cst_stdout$0 = "stdout",
    cst_too_many_anonymous_argumen = "too many anonymous arguments",
    cst_unknown_subcommand = "unknown subcommand ",
    caml_check_bound = runtime.caml_check_bound,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_sys_argv = runtime.caml_sys_argv,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$19 = cst$21,
    cst$20 = cst$22,
    partial = [12, 32, [2, 0, [12, 10, [10, 0]]]],
    cst$18 = cst$22,
    cst$16 = cst$21,
    cst$17 = cst$24,
    opt = [0, 0],
    version_list =
      [0, "hg://some/path_0xdeadbeef", [0, "ssh://a/path_8badf00d", 0]],
    cst$9 = cst$26,
    cst$10 = cst$26,
    cst$15 = cst$23,
    cst$14 = cst$23,
    cst$12 = cst$21,
    cst$13 = cst$23,
    cst$11 = cst$22,
    cst$8 = cst$22,
    cst$5 = cst$26,
    cst$6 = cst$26,
    cst$7 = cst$26,
    cst$4 = cst$24,
    cst$3 = cst$21,
    cst$2 = cst$21,
    cst$1 = cst$27,
    cst$0 = cst$23,
    cst = cst$23,
    enumerate_008 = [0, 0, [0, 1, 0]],
    enumerate_009 = [0, 0, [0, 1, 0]],
    any = [0, 0, 0],
    at_least_once = [0, 1, 0],
    at_most_once = [0, 0, 1],
    exactly_once = [0, 1, 1],
    Base_Lazy = global_data.Base__Lazy,
    Base = global_data.Base,
    Base_List = global_data.Base__List,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Error = global_data.Base__Error,
    Stdio = global_data.Stdio,
    Base_String = global_data.Base__String,
    Base_Option = global_data.Base__Option,
    Command_Shape = global_data.Command__Shape,
    Base_Int = global_data.Base__Int,
    Command_Import = global_data.Command__Import,
    Base_Array = global_data.Base__Array,
    Sexplib_Sexp = global_data.Sexplib__Sexp,
    Base_Set = global_data.Base__Set,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_Info = global_data.Base__Info,
    Stdio_In_channel = global_data.Stdio__In_channel,
    Base_Result = global_data.Base__Result,
    Base_Staged = global_data.Base__Staged,
    Base_Nothing = global_data.Base__Nothing,
    Command_Env_var = global_data.Command__Env_var,
    Base_Map = global_data.Base__Map,
    Expect_test_common_File = global_data.Expect_test_common__File,
    Expect_test_config = global_data.Expect_test_config,
    Expect_test_collector = global_data.Expect_test_collector,
    Inline_test_config = global_data.Inline_test_config,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Filename_base = global_data.Filename_base,
    Univ_map = global_data.Univ_map,
    Stdlib_String = global_data.Stdlib__String,
    Base_Char = global_data.Base__Char,
    Base_Fn = global_data.Base__Fn,
    Base_Type_equal = global_data.Base__Type_equal;
   global_data.Base__Field;
   var
    Stdlib_List = global_data.Stdlib__List,
    Parsexp = global_data.Parsexp,
    Base_Or_error = global_data.Base__Or_error,
    Sexplib_Conv = global_data.Sexplib__Conv,
    Base_Exn = global_data.Base__Exn,
    Stdlib = global_data.Stdlib,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Base_Applicative = global_data.Base__Applicative,
    Base_Float = global_data.Base__Float,
    Base_Bool = global_data.Base__Bool,
    Base_Comparator = global_data.Base__Comparator;
   caml_call1(Ppx_module_timer_runtime[4], cst_Command$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_command$0);
   caml_call1(Expect_test_collector[6][1], cst_command_src_command_ml$10);
   caml_call2(Ppx_inline_test_lib[5], cst_command$0, "command.ml");
   var _a_ = Ppx_inline_test_lib[3];
   a:
   {
    var
     dummy = 0,
     _aL_ = [0, "=== flags ==="],
     cst_help$5 = cst_help$7,
     _aU_ =
       [0,
        [11, "missing subcommand for command ", [2, 0, 0]],
        "missing subcommand for command %s"],
     _aV_ = [0, cst$21],
     _aS_ = [0, [2, 0, [12, 10, [10, 0]]], "%s\n%!"],
     _aT_ = [0, [2, 0, 0], cst_s],
     cst_expand_dots$0 = cst_expand_dots$1,
     cst_flags$0 = cst_flags$1,
     cst_r = "-r",
     cst_help$6 = cst_help$8,
     _aR_ = [0, cst$23, 0],
     cst_missing_executable_name = "missing executable name",
     cst_Couldn_t_choose_a_supporte =
       "Couldn't choose a supported help output version for Command.exec from the given supported versions.",
     _aQ_ = [0, [0, cst_command_src_command_ml$10, 3022, 94480, 94494]],
     _aO_ = [0, [11, "_jsautocom_", [2, 0, 0]], "_jsautocom_%s"],
     _aP_ =
       [0,
        [11,
         "function ",
         [2,
          0,
          [11,
           " {\n  export COMP_CWORD\n  COMP_WORDS[0]=",
           [2,
            0,
            [11,
             '\n  if type readarray > /dev/null\n  then readarray -t COMPREPLY < <("${COMP_WORDS[',
             [17,
              0,
              [11,
               '}")\n  else IFS="\n" read -d "" -A COMPREPLY < <("${COMP_WORDS[',
               [17, 0, [11, '}")\n  fi\n}\ncomplete -F ', [2, 0, partial]]]]]]]]]],
        'function %s {\n  export COMP_CWORD\n  COMP_WORDS[0]=%s\n  if type readarray > /dev/null\n  then readarray -t COMPREPLY < <("${COMP_WORDS[@]}")\n  else IFS="\n" read -d "" -A COMPREPLY < <("${COMP_WORDS[@]}")\n  fi\n}\ncomplete -F %s %s\n%!'],
     _aN_ = [0, cst_command_src_command_ml$10, 2948, 22],
     _aM_ =
       [0,
        [11,
         cst_unknown_subcommand,
         [2, 0, [11, " for command ", [2, 0, [11, ": ", [2, 0, 0]]]]]],
        "unknown subcommand %s for command %s: %s"],
     cst_SUBCOMMAND = "SUBCOMMAND",
     cst_expand_subcommands_in_recu = " expand subcommands in recursive help",
     cst_expand_dots = cst_expand_dots$1,
     cst_show_flags_as_well_in_recu = " show flags as well in recursive help",
     cst_flags = cst_flags$1,
     cst_show_subcommands_of_subcom = " show subcommands of subcommands, etc.",
     cst_recursive = "-recursive",
     cst_explain_a_given_subcommand =
       "explain a given subcommand (perhaps recursively)",
     cst_subcommands_and_flags = "=== subcommands and flags ===",
     cst_subcommands$0 = "=== subcommands ===",
     _aK_ = [0, " SUBCOMMAND", 0],
     cst_help$4 = "[-help]",
     cst_help$3 = cst_help$7,
     _aI_ =
       [0,
        [11, "unexpected subcommand ", [3, 0, 0]],
        "unexpected subcommand %S"],
     _aJ_ =
       [0, [11, cst_unknown_subcommand, [3, 0, 0]], "unknown subcommand %S"],
     _aG_ = [0, cst_stderr$0],
     _aH_ = [0, cst_stdout$0],
     cst_cannot_parse_command_shape = "cannot parse command shape",
     _aF_ = [0, "info"],
     cst_BUG_failed_to_read = "BUG failed to read",
     cst_stdout = cst_stdout$0,
     cst_stderr = cst_stderr$0,
     _aE_ = [0, cst_command_src_command_ml$10, 2622, 26],
     cst_some_build_info = "some build info",
     cst_command_src_command_ml$4 = cst_command_src_command_ml$10,
     cst_command_src_command_ml = cst_command_src_command_ml$10,
     cst_command_src_command_ml$0 = cst_command_src_command_ml$10,
     cst_command_src_command_ml$1 = cst_command_src_command_ml$10,
     _ay_ =
       [1,
        "\n        hg://some/path_0xdeadbeef\n        ssh://a/path_8badf00d "],
     _az_ = [0, cst$23],
     _aA_ = [0, "print version where multiple repos are used"],
     cst_command_src_command_ml$2 = cst_command_src_command_ml$10,
     cst_command_src_command_ml$3 = cst_command_src_command_ml$10,
     cst_438ccee7e1ef92685d7ed2fd99 = cst_438ccee7e1ef92685d7ed2fd99$1,
     cst_command_src_command_ml$5 = cst_command_src_command_ml$10,
     cst_command_src_command_ml$6 = cst_command_src_command_ml$10,
     _aB_ = [1, " some build info "],
     _aC_ = [0, cst$23],
     _aD_ = [0, "print build info"],
     cst_command_src_command_ml$7 = cst_command_src_command_ml$10,
     cst_command_src_command_ml$8 = cst_command_src_command_ml$10,
     cst_438ccee7e1ef92685d7ed2fd99$0 = cst_438ccee7e1ef92685d7ed2fd99$1,
     cst_version$1 = "version",
     cst_the_version_of_this_build = "the version of this build",
     _av_ = [0, cst_version$2, 0],
     cst_version$0 = cst_version$3,
     cst_info_about_this_build = "info about this build",
     _aw_ = [0, cst_build_info$1, 0],
     cst_build_info$0 = cst_build_info$2,
     _ax_ = [0, cst$25],
     cst_print_build_info_for_this_ = " print build info for this build",
     cst_build_info = cst_build_info$2,
     cst_print_the_version_of_this_ = " print the version of this build",
     cst_version = cst_version$3,
     cst_print_version_information = "print version information",
     cst_Path_passed_to_Absolute_mu =
       "Path passed to `Absolute must be absolute",
     cst_Path_passed_to_Relative_to =
       "Path passed to `Relative_to_me must be relative",
     _au_ =
       [0,
        [11, "multiple subcommands named ", [2, 0, 0]],
        "multiple subcommands named %s"],
     _ar_ = [0, [2, 0, 0], cst_s],
     cst_this_help_text = "this help text",
     _as_ = [0, cst_help$9, 0],
     _at_ = [0, "-?", 0],
     cst_help$2 = cst_help$8,
     _aq_ =
       [0,
        [11, " print ", [2, 0, [11, " and exit", 0]]],
        " print %s and exit"],
     _ap_ =
       [0,
        [11, "there is already a ", [2, 0, [11, " named ", [2, 0, 0]]]],
        "there is already a %s named %s"],
     cst_Arg_Tuple_is_not_supported =
       "Arg.Tuple is not supported by Command.Spec.flags_of_args_exn",
     _ao_ = [0, 0],
     cst_Arg_Rest_all_is_not_suppor =
       "Arg.Rest_all is not supported by Command.Spec.flags_of_args_exn",
     cst_Arg_Expand_is_not_supporte =
       "Arg.Expand is not supported by Command.Spec.flags_of_args_exn",
     cst_No_help_for_parsing = "No help for parsing",
     _am_ = [0, 1],
     _an_ = [0, [0, cst_command_src_command_ml$10, 2109, 64311, 64340]],
     cst_and_arg_name_expects_exact =
       "[and_arg_name] expects exactly one name, got",
     cst_missing_required_flag = "missing required flag",
     _al_ = [0, 0],
     cst_Cannot_pass_more_than_one_ =
       "Cannot pass more than one of these: \n  %{Choice_name.list_to_string}",
     _ag_ = [0, 0],
     cst_Cannot_pass_more_than_one_$0 =
       "Cannot pass more than one of these: \n  ",
     _aj_ =
       [0,
        [11,
         'Not all flags in group "',
         [2, 0, [11, '" are given: ', [2, 0, 0]]]],
        'Not all flags in group "%s" are given: %s'],
     _ah_ = [0, 0],
     cst_Must_pass_one_of_these_Cho =
       "Must pass one of these:\n  %{Choice_name.list_to_string}",
     _ai_ = [0, 0],
     cst_Must_pass_one_of_these = "Must pass one of these:\n  ",
     _ae_ =
       [0, [11, ' [requires: "', [2, 0, [11, '"]', 0]]], ' [requires: "%s"]'],
     _af_ = [0, [2, 0, [2, 0, 0]], "%s%s"],
     cst_Command_Spec_choose_one_ca =
       "[Command.Spec.choose_one] called with duplicate name",
     _ak_ = [0, [0, cst_command_src_command_ml$10, 1972, 59265, 59283]],
     _ad_ = [0, "\n  "],
     _ac_ = [0, cst$27],
     _aa_ = [0, cst$27],
     _ab_ = [0, cst$27],
     cst_For_simplicity_Command_Spe =
       "For simplicity, [Command.Spec.choose_one] does not support names with commas.",
     _$_ = [0, [0, cst_command_src_command_ml$10, 1890, 56389, 56409]],
     cst_choose_one_expects_choices =
       "[choose_one] expects choices to read command-line arguments.",
     cst_optional_to_required_got_a =
       "[optional_to_required] got a [None] result",
     cst_s_default_Sexp = "%s (default: %{Sexp})",
     _Z_ = [12, 41, 0],
     ___ = [0, 0],
     cst_default = " (default: ",
     cst_ARG = "ARG",
     cst_help$1 = " -help\n",
     cst_For_usage_information_run = "For usage information, run",
     cst_Error_parsing_command_line = "Error parsing command line:",
     _Y_ = [0, cst$28],
     _X_ =
       [0,
        [11, "missing argument for flag ", [2, 0, 0]],
        "missing argument for flag %s"],
     _W_ = [0, [2, 0, 0], cst_s],
     _V_ = [0, cst$25],
     cst_help = cst_help$8,
     _U_ =
       [0,
        [11, cst_multiple_flags_named, [2, 0, 0]],
        cst_multiple_flags_named_s],
     cst_invalid_Key_type_name_S = "invalid %{Key_type} name: %S",
     _Q_ = [11, " name: ", [3, 0, 0]],
     _R_ = [0, 0],
     cst_invalid = cst_invalid$1,
     cst_invalid_Key_type_name_cont =
       "invalid %{Key_type} name (contains whitespace): %S",
     _S_ = [11, " name (contains whitespace): ", [3, 0, 0]],
     _T_ = [0, 0],
     cst_invalid$0 = cst_invalid$1,
     _P_ =
       [0,
        [2,
         0,
         [12,
          32,
          [2, 0, [11, " contains an underscore. Use a dash instead.", 0]]]],
        "%s %s contains an underscore. Use a dash instead."],
     cst_WILL_NEVER_BE_PRINTED = "WILL NEVER BE PRINTED",
     cst_Empty_anonymous_argument_n = "Empty anonymous argument name provided",
     _N_ =
       [0,
        [11, "argument name ", [3, 0, [11, " has surrounding whitespace", 0]]],
        "argument name %S has surrounding whitespace"],
     _O_ =
       [0,
        60,
        [0, 62, [0, 91, [0, 93, [0, 40, [0, 41, [0, 123, [0, 125, 0]]]]]]]],
     _K_ = [0, cst_command_src_command_ml$10, 1207, 8],
     cst_BUG_asked_for_final_value_ =
       "BUG: asked for final value when doing completion",
     _L_ =
       [0,
        [11, cst_too_many_anonymous_argumen, 0],
        cst_too_many_anonymous_argumen],
     _M_ = [3, 0],
     _J_ =
       [0,
        [11, "missing anonymous argument: ", [2, 0, 0]],
        "missing anonymous argument: %s"],
     _H_ = [3, 0],
     _I_ =
       [0,
        [11,
         cst_failed_to_parse,
         [2, 0, [11, cst_value, [3, 0, [12, 10, [2, 0, 0]]]]]],
        "failed to parse %s value %S\n%s"],
     _E_ = [0, cst_command_src_command_ml$10, 956, 11],
     cst_bug_in_command_ml = "bug in command.ml",
     _G_ =
       [0,
        [11,
         "the grammar ",
         [2,
          0,
          [11,
           " for anonymous arguments is not supported because there is the possibility for arguments (",
           [2,
            0,
            [11,
             ") following a variable number of arguments (",
             [2,
              0,
              [11,
               ").  Supporting such grammars would complicate the implementation significantly.",
               0]]]]]]],
        "the grammar %s for anonymous arguments is not supported because there is the possibility for arguments (%s) following a variable number of arguments (%s).  Supporting such grammars would complicate the implementation significantly."],
     _F_ =
       [0,
        [11,
         "iteration of variable-length grammars such as ",
         [2, 0, [11, " is disallowed", 0]]],
        "iteration of variable-length grammars such as %s is disallowed"],
     _D_ = [0, cst_command_src_command_ml$10, 906, 11],
     _C_ =
       [0,
        [11, cst_missing_required_flag$0, [2, 0, 0]],
        cst_missing_required_flag_s],
     _B_ = [0, cst$29],
     _A_ = [0, cst$29],
     _z_ = [0, cst_command_src_command_ml$10, 761, 19],
     _y_ =
       [0,
        [11, cst_flag, [2, 0, [11, cst_passed_more_than_once, 0]]],
        cst_flag_s_passed_more_than_on],
     _x_ =
       [0,
        [11, cst_missing_required_flag$0, [2, 0, 0]],
        cst_missing_required_flag_s],
     _w_ = [0, cst$29],
     _v_ =
       [0,
        [11, cst_missing_required_flag$0, [2, 0, 0]],
        cst_missing_required_flag_s],
     _u_ = [0, cst$29],
     _t_ =
       [0,
        [11, cst_flag, [2, 0, [11, cst_passed_more_than_once, 0]]],
        cst_flag_s_passed_more_than_on],
     _s_ =
       [0,
        [11,
         cst_failed_to_parse,
         [2, 0, [11, cst_value, [3, 0, [11, ".\n", [2, 0, 0]]]]]],
        "failed to parse %s value %S.\n%s"],
     _q_ =
       [0,
        [11, "multiple flags or aliases named ", [2, 0, 0]],
        "multiple flags or aliases named %s"],
     _r_ =
       [0,
        [11, cst_multiple_flags_named, [2, 0, 0]],
        cst_multiple_flags_named_s],
     _p_ = [0, [11, cst_same_as, [2, 0, [12, 34, 0]]], cst_same_as_s],
     _o_ = [0, [11, cst_same_as, [2, 0, [12, 34, 0]]], cst_same_as_s],
     _n_ = [0, cst$29],
     cst_Command_Spec_Arg_type_comm =
       "Command.Spec.Arg_type.comma_separated: empty list not allowed",
     _m_ = [0, cst$27],
     cst_case_insensitive = " (case insensitive)",
     _j_ = [0, cst$27],
     _k_ =
       [0,
        [11, "valid arguments", [2, 0, [11, ": {", [2, 0, [12, 125, 0]]]]],
        "valid arguments%s: {%s}"],
     _h_ = [0, ", "],
     _i_ = [0, ")", 0],
     cst_can_be = "(can be: ",
     _g_ = [0, "duplicate_keys"],
     cst_Command_Spec_Arg_type_of_a = "Command.Spec.Arg_type.of_alist_exn",
     _f_ = [0, cst$28],
     _e_ = [0, cst$21],
     _b_ = [0, "status"],
     _c_ = [0, "command/src/command.ml.Exit_called"],
     _d_ = [0, "_none_", 0, -1],
     cst_Command_Exit_called = "Command.Exit_called",
     cst_Command_Failed_to_parse_co = "Command.Failed_to_parse_command_line",
     _l_ = [0, 0],
     cst_path = "path",
     cst_args = "args",
     cst_help$0 = cst_help$7,
     cst_subcommands = "subcommands",
     cst_command_src_command_ml$9 = cst_command_src_command_ml$10,
     cst_Version_info = "Version_info",
     cst_command = cst_command$0,
     cst_Command = cst_Command$0;
    if(typeof _a_ !== "number" && 545942154 <= _a_[2]){var raise_instead_of_exit = 1; break a;}
    var raise_instead_of_exit = 0;
   }
   var Exit_called = [248, cst_Command_Exit_called, caml_fresh_oo_id(0)];
   caml_call4
    (Sexplib0_Sexp_conv[72][1],
     0,
     0,
     Exit_called,
     function(param){
      if(param[1] !== Exit_called)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
      var
       status_002 = param[2],
       arg_003 = caml_call1(Base[125], status_002),
       bnds_001 = [0, [1, [0, _b_, [0, arg_003, 0]]], 0];
      return [1, [0, _c_, bnds_001]];
     });
   function exit(status){
    if(raise_instead_of_exit)
     throw caml_maybe_attach_backtrace([0, Exit_called, status], 1);
    return caml_call1(Stdlib[99], status);
   }
   function unparagraphs(xs){return caml_call2(Base_String[67], _f_, xs);}
   var
    Failed_to_parse_command_line =
      [248, cst_Command_Failed_to_parse_co, caml_fresh_oo_id(0)];
   function die(fmt){
    return caml_call2
            (Command_Import[9],
             function(msg, param){
              throw caml_maybe_attach_backtrace
                     ([0, Failed_to_parse_command_line, msg], 1);
             },
             fmt);
   }
   var
    help_screen_compare = Command_Shape[14][3],
    empty = Univ_map[4],
    set = Univ_map[7],
    mem = Univ_map[8],
    find = Univ_map[10],
    find_exn = Univ_map[11],
    update = Univ_map[16],
    With_default = Univ_map[27];
   function key_create(name){
    return caml_call2(Base_Type_equal[12][4], name, Sexplib_Conv[23]);
   }
   var multi_add = Univ_map[29][4], set_with_default = Univ_map[27][2];
   function apply(f, x){
    var _gl_ = f[2], _gm_ = _gl_ || x[2];
    return [0,
            caml_call4
             (Base_Result[33],
              f[1],
              x[1],
              function(f, x){return caml_call1(f, x);},
              function(_gn_, param){
               var err_1 = _gn_[2];
               return [0, 696341824, err_1];
              }),
            _gm_];
   }
   function introduce_missing_required_fla(t){
    var _gk_ = t[2];
    return [0, caml_call1(Base_Result[14], t[1]), _gk_];
   }
   function return_no_arg(v){return [0, [0, v], 0];}
   function return_with_arg(v){return [0, [0, v], 1];}
   function error(has_arg, err){return [0, [1, err], has_arg];}
   var
    map =
      [0,
       -198771759,
       function(param, f){
        var has_arg = param[2], result = param[1];
        return [0, caml_call2(Base_Result[31], result, f), has_arg];
       }],
    include = caml_call1(Base_Applicative[6], [0, return_no_arg, apply, map]),
    return$0 = include[1],
    map$0 = include[2],
    symbol = include[4],
    apply$0 = include[8],
    For_escape = [0],
    Auto_complete = [0, For_escape];
   function run_and_exit(t, env, part){
    caml_call2
     (Base_Option[35],
      t,
      function(completions){
       var
        _gi_ = Command_Import[5],
        _gj_ = caml_call2(completions, env, part);
       return caml_call2(Base_List[19], _gj_, _gi_);
      });
    return exit(0);
   }
   function extra_doc(r){return r[4];}
   function parse(t, s){
    return caml_call2
            (Base_Or_error[28],
             0,
             function(param){return caml_call1(t[1], s);});
   }
   function create(complete, key, of_string){
    var extra_doc = caml_call1(Base_Lazy[21], 0);
    return [0, of_string, complete, key, extra_doc];
   }
   function map$1(key, t, f){
    return [0,
            function(s){return caml_call1(f, caml_call1(t[1], s));},
            t[2],
            key,
            t[4]];
   }
   function of_lazy(key, t){
    function parse(str){
     var _gg_ = caml_obj_tag(t);
     a:
     if(250 === _gg_)
      var _gh_ = t[1];
     else{
      if(246 !== _gg_ && 244 !== _gg_){var _gh_ = t; break a;}
      var _gh_ = caml_call1(CamlinternalLazy[2], t);
     }
     return caml_call1(_gh_[1], str);
    }
    function complete(env, part){
     var _ge_ = caml_obj_tag(t);
     a:
     if(250 === _ge_)
      var _gf_ = t[1];
     else{
      if(246 !== _ge_ && 244 !== _ge_){var _gf_ = t; break a;}
      var _gf_ = caml_call1(CamlinternalLazy[2], t);
     }
     var match = _gf_[2];
     if(! match) return 0;
     var complete = match[1];
     return caml_call2(complete, env, part);
    }
    var extra_doc$0 = caml_call2(Base_Lazy[10], t, extra_doc);
    return [0, parse, [0, complete], key, extra_doc$0];
   }
   var
    string = create(0, 0, function(_gd_){return _gd_;}),
    int$0 = create(0, 0, Base_Int[11]),
    char$0 = create(0, 0, Base_Char[8]),
    float$0 = create(0, 0, Base_Float[9]),
    sexp = create(0, 0, Parsexp[3][10]);
   function sexp_conv(complete, of_sexp){
    return create
            (complete,
             0,
             function(s){
              return caml_call1(of_sexp, caml_call1(Parsexp[3][10], s));
             });
   }
   function of_alist_exn
   (accept_unique_prefixes$0,
    opt,
    list_values_in_help$0,
    auto_complete,
    key,
    alist){
    var
     case_sensitive = opt ? opt[1] : 1,
     accept_unique_prefixes =
       accept_unique_prefixes$0 ? accept_unique_prefixes$0[1] : 1,
     list_values_in_help =
       list_values_in_help$0 ? list_values_in_help$0[1] : 1;
    function make(cmp){
     var match = caml_call2(Base_Map[8], [0, cmp[1]], alist);
     if(17724 <= match[1])
      var map = match[2], _gc_ = map;
     else
      var
       _f8_ =
         caml_call2
          (Base_List[52],
           alist,
           function(param){var k = param[1]; return [0, k, k];}),
       _f9_ = caml_call2(Base_Map[11], [0, cmp[1]], _f8_),
       _f__ =
         caml_call2
          (Base_Map[58],
           _f9_,
           function(param){if(param && param[2]) return 1; return 0;}),
       duplicate_keys = caml_call1(Base_Map[71], _f__),
       _f$_ = caml_call1(Base[148], Base[177]),
       _ga_ =
         [0,
          [1, [0, _g_, [0, caml_call2(Base[148], _f$_, duplicate_keys), 0]]],
          0],
       _gb_ =
         [1,
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_Command_Spec_Arg_type_of_a),
           _ga_]],
       _gc_ = caml_call1(Base[217], _gb_);
     return [0, cmp, _gc_];
    }
    if(case_sensitive)
     var match = make([0, Base_String[59], Base_String[94]]);
    else
     var _f1_ = Base_String[74], match = make([0, _f1_[21], _f1_[23]]);
    var map = match[2], S = match[1];
    function complete(univ_map, prefix){
     if(auto_complete){
      var complete = auto_complete[1];
      return caml_call2(complete, univ_map, prefix);
     }
     var _f7_ = caml_call2(Base_Map[72], 0, map);
     return caml_call2
             (Base_List[12],
              _f7_,
              function(param){
               var name = param[1];
               if(! caml_call2(S[2], name, prefix)) return 0;
               var
                suffix =
                  caml_call3
                   (Base_String[5],
                    [0, caml_ml_string_length(prefix)],
                    0,
                    name),
                name$0 = caml_call2(Base[212], prefix, suffix);
               return [0, name$0];
              });
    }
    var
     extra_doc =
       [246,
        function(_f5_){
         if(! list_values_in_help) return 0;
         var
          _f6_ = caml_call1(Base_Map[70], map),
          values = caml_call2(Base_String[67], _h_, _f6_);
         return [0,
                 caml_call2
                  (Stdlib_String[7], cst, [0, cst_can_be, [0, values, _i_]])];
        }];
    function parse(arg){
     var s = caml_call2(Base_Map[40], map, arg);
     a:
     if(s)
      var match$0 = s;
     else if(accept_unique_prefixes){
      var
       _f2_ = caml_call2(Base_Map[72], 0, map),
       match =
         caml_call2
          (Base_List[11],
           _f2_,
           function(param){
            var name = param[1];
            return caml_call2(S[2], name, arg);
           });
      if(match && ! match[2]){var v = match[1][2], match$0 = [0, v]; break a;}
      var match$0 = 0;
     }
     else
      var match$0 = 0;
     if(match$0){var v$0 = match$0[1]; return v$0;}
     var
      valid_arguments_extra = case_sensitive ? cst$0 : cst_case_insensitive,
      _f3_ = caml_call1(Base_Map[70], map),
      _f4_ = caml_call2(Base_String[67], _j_, _f3_);
     return caml_call4(Command_Import[8], _k_, valid_arguments_extra, _f4_, 0);
    }
    var complete$0 = [0, complete];
    return [0, parse, complete$0, key, extra_doc];
   }
   function of_map
   (accept_unique_prefixes,
    case_sensitive,
    list_values_in_help,
    auto_complete,
    key,
    map){
    return of_alist_exn
            (accept_unique_prefixes,
             case_sensitive,
             list_values_in_help,
             auto_complete,
             key,
             caml_call2(Base_Map[72], 0, map));
   }
   function enumerated
   (accept_unique_prefixes,
    case_sensitive,
    list_values_in_help,
    auto_complete,
    key,
    E){
    return of_alist_exn
            (accept_unique_prefixes,
             case_sensitive,
             list_values_in_help,
             auto_complete,
             key,
             caml_call2
              (Base_List[57][4][3],
               E[1],
               function(t){return [0, caml_call1(E[2], t), t];}));
   }
   function enumerated_sexpable
   (accept_unique_prefixes,
    case_sensitive,
    list_values_in_help,
    auto_complete,
    key,
    E){
    var all = E[1];
    function to_string(t){
     var _f0_ = caml_call1(E[2], t);
     return caml_call1(Base[85][15], _f0_);
    }
    return enumerated
            (accept_unique_prefixes,
             case_sensitive,
             list_values_in_help,
             auto_complete,
             key,
             [0, all, to_string]);
   }
   var bool = enumerated(0, 0, _l_, 0, 0, [0, Base_Bool[1], Base_Bool[9]]);
   function comma_separated(_fQ_, key, _fP_, opt, t){
    var
     allow_empty = _fQ_ ? _fQ_[1] : 0,
     strip_whitespace = _fP_ ? _fP_[1] : 0,
     unique_values = opt ? opt[1] : 0,
     strip =
       strip_whitespace
        ? function(str){return caml_call2(Base_String[106], 0, str);}
        : function(_fZ_){return _fZ_;},
     complete =
       caml_call2
        (Base_Option[22],
         t[2],
         function(complete_elt, env, part){
          var
           _fT_ = caml_call2(Base_String[99], part, 44),
           match = caml_call1(Base_List[61], _fT_);
          if(match)
           var
            tl = match[2],
            hd = match[1],
            suffix = hd,
            prefixes = caml_call1(Base_List[61], tl);
          else
           var suffix = part, prefixes = 0;
          if(unique_values)
           var
            _fU_ = caml_call2(Base_List[52], prefixes, strip),
            seen_already =
              caml_call2(Base_Set[32], [0, Base_String[59]], _fU_),
            is_allowed =
              function(choice){
               var _fY_ = strip(choice);
               return 1 - caml_call2(Base_Set[9], seen_already, _fY_);
              };
          else
           var is_allowed = function(param){return 1;};
          var
           _fV_ = caml_call2(complete_elt, env, suffix),
           choices =
             caml_call2
              (Base_List[11],
               _fV_,
               function(choice){
                var _fX_ = 1 - caml_call2(Base_String[64], choice, 44);
                return _fX_ ? is_allowed(choice) : _fX_;
               });
          a:
          {
           if(choices && ! choices[2]){
            var
             choice = choices[1],
             choices$0 =
               [0, choice, [0, caml_call2(Base[212], choice, cst$1), 0]];
            break a;
           }
           var choices$0 = choices;
          }
          return caml_call2
                  (Base_List[52],
                   choices$0,
                   function(choice){
                    var _fW_ = caml_call2(Base[193], prefixes, [0, choice, 0]);
                    return caml_call2(Base_String[67], _m_, _fW_);
                   });
         });
    function of_string(string){
     var string$0 = strip(string);
     if(caml_call1(Base_String[14], string$0))
      return allow_empty
              ? 0
              : caml_call1(Base[215], cst_Command_Spec_Arg_type_comm);
     var _fR_ = caml_call2(Base_String[99], string$0, 44);
     return caml_call2
             (Base_List[52],
              _fR_,
              function(str){
               var _fS_ = strip(str);
               return caml_call1(t[1], _fS_);
              });
    }
    return create(complete, key, of_string);
   }
   var include$0 = [0, string, int$0, char$0, float$0, bool, sexp, sexp_conv];
   function auto_complete(t){
    var match = t[2];
    if(! match) return function(_fO_, param){return 0;};
    var f = match[1];
    return f;
   }
   var acc = 0, enumerate_012 = enumerate_008, enumerate_013 = enumerate_009;
   for(;;){
    if(! enumerate_013) break;
    if(enumerate_012){
     var
      enumerate_011 = enumerate_013[1],
      enumerate_014 = enumerate_012[2],
      enumerate_010 = enumerate_012[1],
      acc$0 = [0, [0, enumerate_010, enumerate_011], acc];
     acc = acc$0;
     enumerate_012 = enumerate_014;
    }
    else{
     var enumerate_014$0 = enumerate_013[2];
     enumerate_012 = enumerate_008;
     enumerate_013 = enumerate_014$0;
    }
   }
   caml_call1(Stdlib_List[10], acc);
   var to_help_string = Command_Shape[2][7];
   function parse$0(action, doc){
    var match = caml_call2(Base_String[97], doc, 32);
    a:
    {
     switch(action[0]){
       case 2:
        if(match && match[1][1] !== cst$23) break;
        var doc$0 = doc, arg_doc = _n_;
        break a;
       case 3:
        if(match && match[1][1] !== cst$23) break;
        var doc$0 = doc, arg_doc = 0;
        break a;
       default: var doc$0 = doc, arg_doc = 0; break a;
     }
     var
      match$0 = match[1],
      doc$1 = match$0[2],
      arg = match$0[1],
      arg_doc$0 = [0, arg],
      doc$0 = doc$1,
      arg_doc = arg_doc$0;
    }
    return [0, arg_doc, caml_call2(Base_String[106], 0, doc$0)];
   }
   function concat(name, arg_doc){
    if(! arg_doc) return name;
    var
     arg_doc$0 = arg_doc[1],
     _fN_ = caml_call2(Base[212], cst$2, arg_doc$0);
    return caml_call2(Base[212], name, _fN_);
   }
   function wrap_if_optional(t, flag_name){
    var at_least_once = t[6][1];
    return caml_call2(to_help_string, [0, at_least_once, 1], flag_name);
   }
   function help(t){
    var doc = t[5], action = t[4], aliases = t[2], name = t[1];
    if(caml_call2(Base_String[94], doc, cst$3)){
     var
      _fK_ =
        caml_call2
         (Base_List[52],
          aliases,
          function(x){
           return [0, x, caml_call2(Command_Import[7], _o_, name)];
          });
     return [0, [0, name, caml_call2(Base_String[104], 0, doc)], _fK_];
    }
    var
     match = parse$0(action, doc),
     doc$0 = match[2],
     arg_doc = match[1],
     _fL_ =
       caml_call2
        (Base_List[52],
         aliases,
         function(x){
          var _fM_ = caml_call2(Command_Import[7], _p_, name);
          return [0, wrap_if_optional(t, concat(x, arg_doc)), _fM_];
         });
    return [0, [0, wrap_if_optional(t, concat(name, arg_doc)), doc$0], _fL_];
   }
   function align(t){
    var
     doc = t[5],
     action = t[4],
     aliases = t[2],
     name$0 = t[1],
     match = parse$0(action, doc),
     doc$0 = match[2],
     arg_doc = match[1],
     flag_name = concat(name$0, arg_doc),
     name = caml_call2(to_help_string, t[6], flag_name);
    return [0, name, doc$0, aliases];
   }
   function create$0(flags){
    var
     _fH_ =
       caml_call2
        (Base_List[52], flags, function(flag){return [0, flag[1], flag];}),
     match = caml_call2(Base_Map[8], [0, Base_String[59]], _fH_);
    if(17724 <= match[1]){
     var
      map = match[2],
      _fI_ =
        caml_call2
         (Base_List[13], flags, function(flag){return [0, flag[1], flag[2]];}),
      _fJ_ =
        caml_call2
         (Base_List[125],
          _fI_,
          function(a_020, b_021){return caml_call2(Base[171], a_020, b_021);});
     caml_call2
      (Base_Option[35],
       _fJ_,
       function(x){return caml_call3(Command_Import[8], _q_, x, 0);});
     return map;
    }
    var flag = match[2];
    return caml_call3(Command_Import[8], _r_, flag, 0);
   }
   function arg_flag(name, arg_type, read, write, num_occurrences){
    function update(env, arg){
     var match = parse(arg_type, arg);
     if(0 !== match[0]){
      var error = match[1], _fG_ = caml_call1(Base_Error[9], error);
      return caml_call4(die(_s_), name, arg, _fG_, 0);
     }
     var
      arg$0 = match[1],
      env$0 = caml_call2(write, env, arg$0),
      match$0 = arg_type[3];
     if(! match$0) return env$0;
     var key = match$0[1];
     return caml_call3(multi_add, env$0, key, arg$0);
    }
    return [0, [2, update, arg_type[2]], read, num_occurrences, arg_type[4]];
   }
   function map_flag(t, f, input){
    var
     match = caml_call1(t, input),
     extra_doc = match[4],
     num_occurrences = match[3],
     read = match[2],
     action = match[1];
    return [0,
            action,
            function(env){return caml_call2(map$0, caml_call1(read, env), f);},
            num_occurrences,
            extra_doc];
   }
   function write_option(name, key, env, arg){
    return caml_call3
            (update,
             env,
             key,
             function(param){
              return param ? caml_call2(die(_t_), name, 0) : arg;
             });
   }
   function required_value(default$0, arg_type, name, num_occurrences){
    var
     key =
       caml_call2(Base_Type_equal[12][4], name, function(param){return _u_;});
    function read(env){
     var match = caml_call2(find, env, key);
     if(match){var v = match[1]; return return_with_arg(v);}
     if(default$0){var v$0 = default$0[1]; return return_no_arg(v$0);}
     var _fF_ = caml_call2(Command_Import[7], _v_, name);
     return error(0, [0, 696341824, caml_call1(Base_Error[12], _fF_)]);
    }
    function write(env, arg){return write_option(name, key, env, arg);}
    return arg_flag(name, arg_type, read, write, num_occurrences);
   }
   function required(arg_type, name){
    return required_value(0, arg_type, name, exactly_once);
   }
   function optional_with_default(default$0, arg_type, name){
    return required_value([0, default$0], arg_type, name, at_most_once);
   }
   function optional(arg_type, name){
    var
     key =
       caml_call2(Base_Type_equal[12][4], name, function(param){return _w_;});
    function read(env){
     var value = caml_call2(find, env, key);
     return value ? return_with_arg(value) : return_no_arg(0);
    }
    function write(env, arg){return write_option(name, key, env, arg);}
    return arg_flag(name, arg_type, read, write, at_most_once);
   }
   function no_arg_general(is_required, key_value, deprecated_hook, name){
    var key = caml_call2(Base_Type_equal[12][4], name, Base[191]);
    function read(env){
     if(caml_call2(mem, env, key)) return return_with_arg(1);
     if(! is_required) return return_no_arg(0);
     var _fE_ = caml_call2(Command_Import[7], _x_, name);
     return error(0, [0, 696341824, caml_call1(Base_Error[12], _fE_)]);
    }
    function action(env){
     var
      env$0 =
        caml_call3
         (Base_Option[32],
          key_value,
          env,
          function(env, param){
           var value = param[2], key = param[1];
           return caml_call3(set_with_default, env, key, value);
          });
     return caml_call2(mem, env$0, key)
             ? caml_call2(die(_y_), name, 0)
             : caml_call3(set, env$0, key, 0);
    }
    if(deprecated_hook)
     var
      f = deprecated_hook[1],
      action$0 =
        function(env){
         var env$0 = action(env);
         caml_call1(f, 0);
         return env$0;
        };
    else
     var action$0 = action;
    var
     _fC_ = caml_call1(Base_Lazy[21], 0),
     _fD_ = is_required ? exactly_once : at_most_once;
    return [0, [0, action$0], read, _fD_, _fC_];
   }
   function no_arg(name){return no_arg_general(0, 0, 0, name);}
   function no_arg_required(v, name){
    var _fy_ = 0, _fz_ = 0, _fA_ = 1;
    return map_flag
            (function(_fB_){return no_arg_general(_fA_, _fz_, _fy_, _fB_);},
             function(param){
              if(param) return v;
              throw caml_maybe_attach_backtrace([0, Assert_failure, _z_], 1);
             },
             name);
   }
   function no_arg_register(key, value, name){
    return no_arg_general(0, [0, [0, key, value]], 0, name);
   }
   function no_arg_some(value){
    function _fw_(param){return param ? [0, value] : 0;}
    return function(_fx_){return map_flag(no_arg, _fw_, _fx_);};
   }
   function listed(arg_type, name){
    var
     key =
       caml_call3
        (With_default[1][1],
         0,
         name,
         function(x_022){
          return caml_call2(Base[148], function(param){return _A_;}, x_022);
         });
    function read(env){
     var
      _fv_ = caml_call2(With_default[3], env, key),
      value_list = caml_call1(Base_List[61], _fv_);
     return value_list ? return_with_arg(value_list) : return_no_arg(0);
    }
    function write(env, arg){
     return caml_call3
             (With_default[4],
              env,
              key,
              function(list){return [0, arg, list];});
    }
    return arg_flag(name, arg_type, read, write, any);
   }
   function one_or_more_as_pair(arg_type, name){
    var
     key =
       caml_call3
        (With_default[1][1],
         0,
         name,
         function(x_023){
          return caml_call2(Base[148], function(param){return _B_;}, x_023);
         });
    function read(env){
     var
      _ft_ = caml_call2(With_default[3], env, key),
      match = caml_call1(Base_List[61], _ft_);
     if(match){
      var rest = match[2], first = match[1];
      return return_with_arg([0, first, rest]);
     }
     var _fu_ = caml_call2(Command_Import[7], _C_, name);
     return error(0, [0, 696341824, caml_call1(Base_Error[12], _fu_)]);
    }
    function write(env, arg){
     return caml_call3
             (With_default[4], env, key, function(q){return [0, arg, q];});
    }
    return arg_flag(name, arg_type, read, write, at_least_once);
   }
   function one_or_more_as_list(arg_type){
    function _fp_(param){var xs = param[2], x = param[1]; return [0, x, xs];}
    function _fq_(_fs_){return one_or_more_as_pair(arg_type, _fs_);}
    return function(_fr_){return map_flag(_fq_, _fp_, _fr_);};
   }
   function escape_general(complete, deprecated_hook, name){
    var
     key =
       caml_call2
        (Base_Type_equal[12][4],
         name,
         function(x_024){return caml_call2(Base[148], Base[177], x_024);});
    function action(env, cmd_line){
     return caml_call3(set, env, key, cmd_line);
    }
    function read(env){
     var value = caml_call2(find, env, key);
     return value ? return_with_arg(value) : return_no_arg(0);
    }
    if(deprecated_hook)
     var
      f = deprecated_hook[1],
      action$0 =
        function(env, cmd_line){
         caml_call1(f, cmd_line);
         return caml_call3(set, env, key, cmd_line);
        };
    else
     var action$0 = action;
    return [0,
            [3, action$0, complete],
            read,
            at_most_once,
            caml_call1(Base_Lazy[21], 0)];
   }
   function no_arg_abort(exit, name){
    return [0,
            [0,
             function(param){
              var _fo_ = caml_call1(exit, 0);
              return caml_call1(Base_Nothing[3], _fo_);
             }],
            function(param){return return_no_arg(0);},
            at_most_once,
            caml_call1(Base_Lazy[21], 0)];
   }
   function escape(name){return escape_general(0, 0, name);}
   function escape_with_autocomplete(complete, name){return escape_general([0, complete], 0, name);
   }
   function no_arg$0(hook, name){
    return no_arg_general(0, 0, [0, hook], name);
   }
   function escape$0(hook){
    var _fl_ = [0, hook], _fm_ = 0;
    return function(_fn_){return escape_general(_fm_, _fl_, _fn_);};
   }
   var empty$0 = 0;
   function create$1(path_to_exe){return [0, path_to_exe, 0];}
   function append(t, subcommand){return [0, subcommand, t];}
   var parts = Base_List[61];
   function parts_exe_basename(t){
    var match = caml_call1(Base_List[61], t);
    if(! match) return 0;
    var tl = match[2], hd = match[1];
    return [0, caml_call1(Filename_base[37], hd), tl];
   }
   function to_string(t){
    var xs = parts_exe_basename(t);
    return caml_call2(Base_String[67], _e_, xs);
   }
   var length = Base_List[17];
   function replace_first(t, from, to){
    var parts$2 = caml_call1(parts, t), parts$0 = parts$2, acc = 0;
    for(;;){
     if(! parts$0) return acc;
     var parts$1 = parts$0[2], hd = parts$0[1];
     if(caml_call2(Base_String[47], hd, from))
      return caml_call2(Base_List[62], parts$1, [0, to, acc]);
     var acc$0 = [0, hd, acc];
     parts$0 = parts$1;
     acc = acc$0;
    }
   }
   function to_string_dots(t){
    if(t)
     var
      init = t[2],
      last = t[1],
      _fj_ = caml_call1(Base_Fn[1], cst$4),
      _fk_ = [0, last, caml_call2(Base_List[52], init, _fj_)];
    else
     var _fk_ = 0;
    return to_string(_fk_);
   }
   var
    is_empty = Base_List[18],
    invariant = Command_Shape[1][1][3],
    usage = Command_Shape[1][1][4];
   function is_fixed_arity(param){
    var param$0 = param;
    for(;;){
     if(typeof param$0 === "number") return 1;
     switch(param$0[0]){
       case 0:
        return 1;
       case 1:
        return 0;
       case 2:
        return 0;
       case 3:
        var ts = param$0[1], match = caml_call1(Base_List[61], ts);
        if(! match) return caml_call1(Base[215], cst_bug_in_command_ml);
        var others = match[2], last = match[1];
        if(! caml_call2(Base_List[24], others, is_fixed_arity))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _E_], 1);
        param$0 = last;
        break;
       default: return 0;
     }
    }
   }
   function names(param){
    var param$0 = param;
    for(;;){
     if(typeof param$0 === "number") return 0;
     switch(param$0[0]){
       case 0:
        var s = param$0[1]; return [0, s, 0];
       case 1:
        var t = param$0[1]; param$0 = t; break;
       case 2:
        var t$0 = param$0[1]; param$0 = t$0; break;
       case 3:
        var ts = param$0[1]; return caml_call2(Base_List[13], ts, names);
       default: var s$0 = param$0[1]; return [0, s$0, 0];
     }
    }
   }
   var zero = 0;
   function concat$0(param){
    if(! param) return 0;
    var
     cdr = param[2],
     car = param[1],
     match =
       caml_call3
        (Base_List[20],
         cdr,
         [0, car, 0],
         function(param, t2){
          var acc = param[2], t1 = param[1];
          if(typeof t1 === "number")
           var t = t2;
          else{
           if(typeof t2 !== "number"){
            if(is_fixed_arity(t1)) return [0, t2, [0, t1, acc]];
            var
             _fg_ = caml_call1(usage, t1),
             _fh_ = caml_call1(usage, t2),
             _fi_ =
               caml_call1
                (usage, [3, caml_call1(Base_List[61], [0, t2, [0, t1, acc]])]);
            return caml_call5(Command_Import[8], _G_, _fi_, _fh_, _fg_, 0);
           }
           var t = t1;
          }
          return [0, t, acc];
         }),
     cdr$0 = match[2],
     car$0 = match[1];
    return cdr$0 ? [3, caml_call1(Base_List[61], [0, car$0, cdr$0])] : car$0;
   }
   function parse_more(param, f){
    var complete = param[3], parse = param[2], name = param[1];
    function parse$0(arg, for_completion){
     var
      match = caml_call2(parse, arg, for_completion),
      update_env = match[2],
      parser = match[1];
     return [0, caml_call1(f, parser), update_env];
    }
    return [1, [0, name, parse$0, complete]];
   }
   function pack_for_completion(x){
    switch(x[0]){
      case 0:
       return 0;
      case 3:
       var ps = x[1]; return ps;
      default: return [0, [0, x], 0];
    }
   }
   function symbol$0(t_left, t_right){
    a:
    {
     switch(t_left[0]){
       case 0:
        var f = t_left[1];
        switch(t_right[0]){
          case 0:
           var x = t_right[1];
           return [0,
                   function(env){
                    var
                     f_outcome = caml_call1(f, env),
                     x_outcome = caml_call1(x, env);
                    return caml_call1(f_outcome, x_outcome);
                   }];
          case 1:
           var more = t_right[1];
           return parse_more(more, function(tr){return symbol$0(t_left, tr);});
          case 2:
           var test = t_right[1];
           return [2,
                   function(more){
                    return symbol$0(t_left, caml_call1(test, more));
                   }];
          case 3:
           break a;
          default: var tr = t_right[1], tl = t_left;
        }
        break;
       case 1:
        var more$0 = t_left[1];
        return parse_more(more$0, function(tl){return symbol$0(tl, t_right);});
       case 2:
        var test$0 = t_left[1];
        return [2,
                function(more){
                 return symbol$0(caml_call1(test$0, more), t_right);
                }];
       case 4:
        var tr = t_right, tl = t_left[1]; break;
       default: break a;
     }
     return [4, symbol$0(tl, tr)];
    }
    var
     _fe_ = pack_for_completion(t_right),
     _ff_ = pack_for_completion(t_left);
    return [3, caml_call2(Base[193], _ff_, _fe_)];
   }
   function return$1(a){return [0, function(param){return a;}];}
   function symbol_map(t, f){return symbol$0(return$1(f), t);}
   function from_env(f){
    return [0, function(env){return caml_call1(f, env);}];
   }
   function symbol_map$0(t, f){
    return symbol_map(t, function(_fd_){return caml_call2(map$0, _fd_, f);});
   }
   function symbol$1(t_left, t_right){
    return symbol$0(symbol$0(return$1(symbol), t_left), t_right);
   }
   function return$2(a){return return$1(caml_call1(return$0, a));}
   function return_with_arg$0(a){
    return [0, function(param){return return_with_arg(a);}];
   }
   function one(name, arg_type){
    return [2,
            function(more){
             if(! more)
              return [0,
                      function(param){
                       var _fc_ = caml_call2(Command_Import[7], _J_, name);
                       return error
                               (0, [0, 696341824, caml_call1(Base_Error[12], _fc_)]);
                      }];
             function parse$0(anon, for_completion){
              var match = parse(arg_type, anon);
              if(0 === match[0]){
               var v = match[1];
               return [0,
                       return_with_arg$0(v),
                       function(env){
                        return caml_call3
                                (Base_Option[32],
                                 arg_type[3],
                                 env,
                                 function(env, key){
                                  return caml_call3(multi_add, env, key, v);
                                 });
                       }];
              }
              var error = match[1];
              if(for_completion)
               return [0, _H_, function(_fb_){return _fb_;}];
              var _fa_ = caml_call1(Base_Error[9], error);
              return caml_call4(die(_I_), name, anon, _fa_, 0);
             }
             return [1, [0, name, parse$0, arg_type[2]]];
            }];
   }
   function sequence(t){
    var loop = [];
    runtime.caml_update_dummy
     (loop,
      [2,
       function(more){
        return more
                ? symbol$1
                  (symbol$1
                    (return$2(function(v, acc){return [0, v, acc];}), t),
                   loop)
                : return$2(0);
       }]);
    return loop;
   }
   function consume(t, arg, for_completion){
    var t$0 = t;
    for(;;)
     switch(t$0[0]){
       case 0:
        return caml_call1(die(_L_), 0);
       case 1:
        var
         parse = t$0[1][2],
         match = caml_call2(parse, arg, for_completion),
         update_env = match[2],
         parser = match[1];
        return [0, parser, 1, update_env];
       case 2:
        var f = t$0[1], t$1 = caml_call1(f, 1); t$0 = t$1; break;
       case 3:
        var packed = t$0[1];
        if(! packed) return [0, _M_, 1, function(_e$_){return _e$_;}];
        var
         rest = packed[2],
         t$2 = packed[1][1],
         match$0 = consume(t$2, arg, for_completion),
         update_env$0 = match$0[3],
         parse_flags = match$0[2],
         parser$0 = match$0[1],
         _e9_ = pack_for_completion(parser$0);
        return [0,
                [3, caml_call2(Base[193], _e9_, rest)],
                parse_flags,
                update_env$0];
       default:
        var t$3 = t$0[1], _e__ = consume(t$3, arg, for_completion);
        return [0, _e__[1], 0, _e__[3]];
     }
   }
   function t2(t1, t2){
    var
     _e6_ = concat$0([0, t1[2], [0, t2[2], 0]]),
     _e7_ = t2[1],
     _e8_ = t1[1];
    return [0,
            symbol$1
             (symbol$1(return$2(function(a1, a2){return [0, a1, a2];}), _e8_),
              _e7_),
            _e6_];
   }
   function t3(t1, t2, t3){
    var
     _e2_ = concat$0([0, t1[2], [0, t2[2], [0, t3[2], 0]]]),
     _e3_ = t3[1],
     _e4_ = t2[1],
     _e5_ = t1[1];
    return [0,
            symbol$1
             (symbol$1
               (symbol$1
                 (return$2(function(a1, a2, a3){return [0, a1, a2, a3];}),
                  _e5_),
                _e4_),
              _e3_),
            _e2_];
   }
   function t4(t1, t2, t3, t4){
    var
     _eX_ = concat$0([0, t1[2], [0, t2[2], [0, t3[2], [0, t4[2], 0]]]]),
     _eY_ = t4[1],
     _eZ_ = t3[1],
     _e0_ = t2[1],
     _e1_ = t1[1];
    return [0,
            symbol$1
             (symbol$1
               (symbol$1
                 (symbol$1
                   (return$2
                     (function(a1, a2, a3, a4){return [0, a1, a2, a3, a4];}),
                    _e1_),
                  _e0_),
                _eZ_),
              _eY_),
            _eX_];
   }
   function normalize(str){
    var strlen = caml_ml_string_length(str);
    if(0 === strlen) caml_call1(Base[215], cst_Empty_anonymous_argument_n);
    var _eV_ = caml_call2(Base_String[106], 0, str);
    if(caml_call2(Base_String[50], _eV_, str))
     caml_call3(Command_Import[8], _N_, str, 0);
    var
     special_chars = caml_call2(Base_Set[32], [0, Base_Char[25]], _O_),
     _eW_ = caml_call1(Base_Set[9], special_chars),
     has_special_chars = caml_call2(Base_String[19], str, _eW_);
    return has_special_chars ? str : caml_call1(Base_String[70], str);
   }
   function symbol$2(name, arg_type){
    var name$0 = normalize(name);
    return [0, one(name$0, arg_type), [0, name$0]];
   }
   function map_anons(t, f){
    var _eU_ = t[2];
    return [0, symbol_map$0(t[1], f), _eU_];
   }
   function maybe(t){
    var t$0 = t[2], _eT_ = typeof t$0 === "number" ? 0 : [2, t$0], t$1 = t[1];
    return [0,
            [2,
             function(more){
              return more
                      ? symbol$1
                        (return_with_arg$0(function(a){return [0, a];}), t$1)
                      : return$2(0);
             }],
            _eT_];
   }
   function maybe_with_default(default$0, t){
    var t$0 = maybe(t), _eS_ = t$0[2];
    return [0,
            symbol_map$0
             (t$0[1],
              function(v){return caml_call2(Base_Option[28], v, default$0);}),
            _eS_];
   }
   function sequence$0(t){
    var t$0 = t[2];
    if(typeof t$0 === "number")
     var _eR_ = 0;
    else{
     if(1 - is_fixed_arity(t$0)){
      var _eQ_ = caml_call1(usage, t$0);
      caml_call3(Command_Import[8], _F_, _eQ_, 0);
     }
     var _eR_ = [1, t$0];
    }
    return [0, sequence(t[1]), _eR_];
   }
   function non_empty_sequence_as_pair(t){return t2(t, sequence$0(t));}
   function non_empty_sequence_as_list(t){
    var t$0 = non_empty_sequence_as_pair(t), _eP_ = t$0[2];
    return [0,
            symbol_map$0
             (t$0[1],
              function(param){
               var xs = param[2], x = param[1];
               return [0, x, xs];
              }),
            _eP_];
   }
   function ad_hoc(usage_arg){
    return [0,
            sequence(one(cst_WILL_NEVER_BE_PRINTED, include$0[1])),
            [4, usage_arg]];
   }
   function compare(a_025, b_026){
    var a_025$0 = a_025, b_026$0 = b_026;
    for(;;){
     if(a_025$0 === b_026$0) return 0;
     if(typeof a_025$0 === "number")
      return typeof b_026$0 === "number" ? 0 : -1;
     if(0 === a_025$0[0]){
      var a_029 = a_025$0[2], a_027 = a_025$0[1];
      if(typeof b_026$0 !== "number"){
       if(0 !== b_026$0[0]) return -1;
       var
        b_030 = b_026$0[2],
        b_028 = b_026$0[1],
        n = caml_call2(Base[171], a_027, b_028);
       if(0 !== n) return n;
       a_025$0 = a_029;
       b_026$0 = b_030;
       continue;
      }
     }
     else{
      var a_031 = a_025$0[1];
      if(typeof b_026$0 !== "number"){
       if(0 === b_026$0[0]) return 1;
       var b_032 = b_026$0[1];
       return caml_call2(Base[171], a_031, b_032);
      }
     }
     return 1;
    }
   }
   function of_list(args){
    return caml_call3
            (Base_List[103],
             args,
             function(arg, args){return [0, arg, args];},
             0);
   }
   function to_list(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){
     var xs = param[2], x = param[1];
     return [0, x, to_list(xs)];
    }
    var x$0 = param[1];
    return [0, x$0, 0];
   }
   function ends_in_complete(param){
    var param$0 = param;
    for(;;){
     if(typeof param$0 === "number") return 0;
     if(0 !== param$0[0]) return 1;
     var args = param$0[2];
     param$0 = args;
    }
   }
   function extend(t, extend, path){
    if(ends_in_complete(t)) return t;
    var
     _eL_ = caml_call1(parts, path),
     _eM_ = caml_call1(Base_List[85], _eL_),
     path_list = caml_call2(Base_Option[28], _eM_, 0),
     _eN_ = caml_call1(extend, path_list),
     _eO_ = to_list(t);
    return of_list(caml_call2(Base[193], _eO_, _eN_));
   }
   function normalize$0(key_type, flag_or_subcommand){
    if
     (caml_call2
       (Base_String[19],
        flag_or_subcommand,
        function(c){return caml_call2(Base_Char[12], c, 95);})){
     var _eK_ = caml_call1(Command_Shape[14][1][1], key_type);
     caml_call4(Command_Import[8], _P_, _eK_, flag_or_subcommand, 0);
    }
    if(! key_type) return caml_call1(Base_String[71], flag_or_subcommand);
    if(caml_call2(Base_String[131], flag_or_subcommand, cst$5))
     caml_call4
      (Command_Import[8],
       [0,
        [11,
         cst_invalid,
         [24,
          _R_,
          function(param, custom_printf_033){
           return caml_call1(Command_Shape[14][1][1], custom_printf_033);
          },
          _Q_]],
        cst_invalid_Key_type_name_S],
       key_type,
       flag_or_subcommand,
       0);
    if(caml_call2(Base_String[19], flag_or_subcommand, Base_Char[43]))
     caml_call4
      (Command_Import[8],
       [0,
        [11,
         cst_invalid$0,
         [24,
          _T_,
          function(param, custom_printf_034){
           return caml_call1(Command_Shape[14][1][1], custom_printf_034);
          },
          _S_]],
        cst_invalid_Key_type_name_cont],
       key_type,
       flag_or_subcommand,
       0);
    return caml_call2(Base_String[94], flag_or_subcommand, cst$6)
            ? flag_or_subcommand
            : caml_call2(Base[212], cst$7, flag_or_subcommand);
   }
   var lookup_expand = Command_Shape[14][4];
   function subcommand_cmp_fst(_eJ_, param){
    var c = param[1], a = _eJ_[1];
    return caml_call2(help_screen_compare, a, c);
   }
   function shape(t){
    var
     _eD_ = caml_call1(Base_Map[71], t[3]),
     _eE_ = caml_call2(Base_List[52], _eD_, align),
     _eF_ =
       caml_call2
        (Base_List[81],
         _eE_,
         function(a, b){return caml_call2(Base_String[51], a[1], b[1]);}),
     _eG_ = caml_call1(Command_Shape[4][1], _eF_),
     _eH_ = [1, t[5]],
     _eI_ =
       caml_call2
        (Base_Option[22],
         t[2],
         function(readme){return caml_call1(readme, 0);});
    return [0, t[1], _eI_, _eH_, _eG_];
   }
   var
    path_key = key_create(cst_path),
    args_key = key_create(cst_args),
    help_key = key_create(cst_help$0);
   function run_exn(exn, for_completion, path, verbose_on_parse_error){
    if(exn[1] === Failed_to_parse_command_line && for_completion)
     return exit(0);
    if(exn[1] === Exit_called){var status = exn[2]; return exit(status);}
    if(exn[1] === Failed_to_parse_command_line)
     var msg = exn[2], exn_str = msg;
    else
     var
      _eC_ = caml_call1(Base[110], exn),
      exn_str = caml_call2(Base[85][13], 0, _eC_);
    var verbose = caml_call2(Base_Option[28], verbose_on_parse_error, 1);
    if(verbose)
     var
      _ey_ = to_string(path),
      _ez_ = caml_call2(Base[212], _ey_, cst_help$1),
      _eA_ =
        [0,
         cst_For_usage_information_run,
         [0, caml_call2(Base[212], cst$11, _ez_), 0]],
      _ew_ = caml_call2(Base_String[99], exn_str, 10),
      _ex_ =
        caml_call2
         (Base_List[52],
          _ew_,
          function(line){return caml_call2(Base[212], cst$8, line);}),
      _eB_ =
        [0,
         cst_Error_parsing_command_line,
         [0, caml_call2(Base_String[67], _V_, _ex_), _eA_]],
      error_msg = caml_call2(Base_String[67], _Y_, _eB_);
    else
     var error_msg = exn_str;
    caml_call1(Command_Import[6], error_msg);
    return exit(1);
   }
   function run
   (t,
    env,
    when_parsing_succeeds,
    path,
    cmdline,
    verbose_on_parse_error,
    help_text,
    on_failure){
    var
     for_completion = ends_in_complete(cmdline),
     _el_ = to_list(cmdline),
     env$0 =
       caml_call3
        (set,
         caml_call3(set, caml_call3(set, env, path_key, path), args_key, _el_),
         help_key,
         help_text),
     match =
       caml_call1
        (Base_Result[40],
         function(param){
          var parser$1 = caml_call1(t[4], 0);
          a:
          {
           b:
           {
            var
             env$1 = env$0,
             parser = parser$1,
             cmdline$0 = cmdline,
             parse_flags = 1;
            for(;;){
             if(typeof cmdline$0 === "number") break b;
             if(0 !== cmdline$0[0]) break;
             var args = cmdline$0[2], arg$0 = cmdline$0[1];
             c:
             if(parse_flags)
              if(arg$0 !== cst$26){
               if
                (arg$0 === "-anon"
                 && typeof args !== "number" && 0 === args[0]){
                var
                 args$0 = args[2],
                 arg$1 = args[1],
                 arg_is_flag = 0,
                 cmdline$1 = args$0,
                 prefix = arg$1;
                break c;
               }
               var
                arg_is_flag = caml_call2(Base_String[94], arg$0, cst$9),
                cmdline$1 = args,
                prefix = arg$0;
              }
              else
               var arg_is_flag = 0, cmdline$1 = args, prefix = arg$0;
             else
              var arg_is_flag = 0, cmdline$1 = args, prefix = arg$0;
             if(arg_is_flag){
              var
               map = t[3],
               _em_ = caml_call1(Base_Map[71], map),
               alist =
                 caml_call2
                  (Base_List[13],
                   _em_,
                   function(flag){
                    var
                     name_matching = flag[8],
                     aliases_excluded_from_help = flag[3],
                     aliases = flag[2],
                     name = flag[1],
                     data = [0, flag, name_matching],
                     aliases$0 =
                       caml_call2(Base[193], aliases_excluded_from_help, aliases);
                    return [0,
                            [0, name, data],
                            caml_call2
                             (Base_List[52],
                              aliases$0,
                              function(alias){return [0, alias, data];})];
                   }),
               match =
                 caml_call2
                  (Base_List[125],
                   alist,
                   function(_ev_, param){
                    var s2 = param[1], s1 = _ev_[1];
                    return caml_call2(Base_String[51], s1, s2);
                   }),
               key_type = 1;
              if(match)
               var
                flag = match[1][1],
                match$0 = caml_call3(Command_Import[8], _U_, flag, 0);
              else
               var
                match$0 = caml_call3(lookup_expand, alist, prefix, key_type);
              if(0 === match$0[0])
               var
                match$1 = match$0[1],
                flag$0 = match$1[2],
                flag_name = match$1[1],
                match$2 = [0, flag_name, flag$0[4]];
              else
               var msg = match$0[1], match$2 = caml_call2(die(_W_), msg, 0);
              var action = match$2[2], flag$1 = match$2[1];
              switch(action[0]){
                case 0:
                 var
                  f$1 = action[1],
                  match$3 = [0, caml_call1(f$1, env$1), cmdline$1];
                 break;
                case 1:
                 var
                  info = action[1],
                  completing = ends_in_complete(cmdline$1);
                 if(completing)
                  var match$3 = [0, env$1, cmdline$1];
                 else{
                  var _en_ = caml_call1(info, env$1);
                  caml_call1(Command_Import[5], _en_);
                  var match$3 = exit(0);
                 }
                 break;
                case 2:
                 var comp = action[2], f$2 = action[1];
                 if(typeof cmdline$1 === "number")
                  var match$3 = caml_call2(die(_X_), flag$1, 0);
                 else if(0 === cmdline$1[0]){
                  var rest = cmdline$1[2], arg = cmdline$1[1];
                  try{var _eo_ = caml_call2(f$2, env$1, arg), env = _eo_;}
                  catch(e$0){
                   var e = caml_wrap_exception(e$0);
                   if(e[1] !== Failed_to_parse_command_line)
                    throw caml_maybe_attach_backtrace(e, 0);
                   if(! ends_in_complete(rest))
                    throw caml_maybe_attach_backtrace(e, 0);
                   var env = env$1;
                  }
                  var match$3 = [0, env, rest];
                 }
                 else
                  var
                   part = cmdline$1[1],
                   _ep_ = run_and_exit(comp, env$1, part),
                   match$3 = caml_call1(Base_Nothing[3], _ep_);
                 break;
                default:
                 var
                  comp$0 = action[2],
                  f$3 = action[1],
                  arg_list = to_list(cmdline$1);
                 if(ends_in_complete(cmdline$1)){
                  var _eq_ = run_and_exit(comp$0, env$1, arg_list);
                  caml_call1(Base_Nothing[3], _eq_);
                 }
                 var match$3 = [0, caml_call2(f$3, env$1, arg_list), 0];
              }
              var cmdline$2 = match$3[2], env$2 = match$3[1];
              env$1 = env$2;
              cmdline$0 = cmdline$2;
             }
             else{
              var
               match$4 = consume(parser, prefix, for_completion),
               update_env = match$4[3],
               parse_flags2 = match$4[2],
               parser$0 = match$4[1],
               env$3 = caml_call1(update_env, env$1),
               parse_flags$0 = parse_flags ? parse_flags2 : parse_flags;
              env$1 = env$3;
              parser = parser$0;
              cmdline$0 = cmdline$1;
              parse_flags = parse_flags$0;
             }
            }
            var part$0 = cmdline$0[1];
            if(parse_flags && caml_call2(Base_String[94], part$0, cst$10)){
             var _es_ = caml_call1(Base_Map[70], t[3]);
             caml_call2
              (Base_List[19],
               _es_,
               function(name){
                var _eu_ = caml_call2(Base_String[94], name, part$0);
                return _eu_ ? caml_call1(Command_Import[5], name) : _eu_;
               });
             var main = exit(0);
             break a;
            }
            var t$3 = parser;
            for(;;){
             switch(t$3[0]){
               case 0:
                var _et_ = exit(0); break;
               case 1:
                var
                 complete = t$3[1][3],
                 _et_ = run_and_exit(complete, env$1, part$0);
                break;
               case 2:
                var f$0 = t$3[1], t$4 = caml_call1(f$0, 1);
                t$3 = t$4;
                continue;
               case 3:
                var t$5 = t$3[1];
                if(t$5){var t$6 = t$5[1][1]; t$3 = t$6; continue;}
                var _et_ = exit(0);
                break;
               default: var t$7 = t$3[1]; t$3 = t$7; continue;
             }
             var main = caml_call1(Base_Nothing[3], _et_);
             break a;
            }
           }
           var _er_ = caml_call1(Base_Map[71], t[3]);
           caml_call2
            (Base_List[19],
             _er_,
             function(flag){return caml_call1(flag[7], env$1);});
           var t$0 = parser;
           b:
           for(;;)
            switch(t$0[0]){
              case 0:
               var a = t$0[1], main = caml_call1(a, env$1); break b;
              case 1:
               throw caml_maybe_attach_backtrace([0, Assert_failure, _K_], 1);
              case 2:
               var f = t$0[1], t$1 = caml_call1(f, 0); t$0 = t$1; break;
              case 3:
               var
                main = caml_call1(Base[215], cst_BUG_asked_for_final_value_);
               break b;
              default: var t$2 = t$0[1]; t$0 = t$2;
            }
          }
          return caml_call1(main, 15369289);
         });
    if(0 === match[0]){
     var thunk = match[1];
     caml_call1(when_parsing_succeeds, 0);
     return caml_call1(thunk, -903816947);
    }
    var exn = match[1];
    return caml_call4
            (on_failure, exn, for_completion, path, verbose_on_parse_error);
   }
   function wrap_value(v, param){return return_no_arg(v);}
   function apply$1(f, x){
    return [0,
            function(param){
             var _ej_ = caml_call1(x[1], 0), _ek_ = caml_call1(f[1], 0);
             return symbol$0
                     (symbol$0
                       (return$1
                         (function(f, x, param){
                           var
                            f_outcome = caml_call1(f, 0),
                            x_outcome = caml_call1(x, 0);
                           return caml_call2(apply$0, f_outcome, x_outcome);
                          }),
                        _ek_),
                      _ej_);
            },
            function(param){
             var _ei_ = [0, caml_call1(x[2], 0), 0];
             return concat$0([0, caml_call1(f[2], 0), _ei_]);
            },
            function(param){
             var _eg_ = caml_call1(f[3], 0), _eh_ = caml_call1(x[3], 0);
             return caml_call2(Base[193], _eh_, _eg_);
            }];
   }
   var
    empty_spec =
      [0,
       function(param){
        return return$1
                (function(param){
                  return return_no_arg(function(_ef_){return _ef_;});
                 });
       },
       function(param){return zero;},
       function(param){return 0;}];
   function map_outcome(x, f){
    return [0,
            function(param){
             return symbol_map
                     (caml_call1(x[1], 0),
                      function(x, param){
                       var x_outcome = caml_call1(x, 0);
                       return caml_call1(f, x_outcome);
                      });
            },
            x[2],
            x[3]];
   }
   function map$2(x, f){
    return map_outcome(x, function(_ee_){return caml_call2(map$0, _ee_, f);});
   }
   function lookup(key){
    return [0,
            function(param){
             return symbol_map
                     (from_env
                       (function(env){return caml_call2(find_exn, env, key);}),
                      wrap_value);
            },
            function(param){return zero;},
            function(param){return 0;}];
   }
   var
    path = lookup(path_key),
    args = lookup(args_key),
    help$0 = lookup(help_key),
    env =
      [0,
       function(param){
        return symbol_map(from_env(function(env){return env;}), wrap_value);
       },
       function(param){return zero;},
       function(param){return 0;}],
    string$0 = include$0[1],
    int$1 = include$0[2],
    char$1 = include$0[3],
    float$1 = include$0[4],
    bool$0 = include$0[5],
    sexp$0 = include$0[6],
    sexp_conv$0 = include$0[7];
   function anon(spec){
    caml_call1(invariant, spec[2]);
    return [0,
            function(param){
             return symbol_map
                     (spec[1], function(outcome, param){return outcome;});
            },
            function(param){return spec[2];},
            function(param){return 0;}];
   }
   function escape_anon(final_anon){
    var
     t$0 = t2(final_anon, sequence$0(symbol$2(cst_ARG, string$0))),
     t = t$0[1];
    return anon([0, [4, t], t$0[2]]);
   }
   function flag(opt, full_flag_required, name){
    return function(mode){
     return function(doc){
      var aliases_excluded_from_help = 0, aliases = opt ? opt[1] : 0;
      function normalize(flag){return normalize$0(1, flag);}
      var
       name$0 = normalize(name),
       aliases$0 = caml_call2(Base_List[52], aliases, normalize),
       match = caml_call1(mode, name$0),
       extra_doc = match[4],
       num_occurrences = match[3],
       read = match[2],
       action = match[1],
       check_available =
         num_occurrences[1]
          ? function(env){caml_call1(read, env); return 0;}
          : function(_ed_){return 0;},
       name_matching =
         caml_call1(Base_Option[51], full_flag_required)
          ? -461087063
          : -481604174;
      return [0,
              function(param){
               return symbol_map
                       (from_env(function(env){return caml_call1(read, env);}),
                        function(v, param){return v;});
              },
              function(param){return zero;},
              function(param){
               var _eb_ = caml_obj_tag(extra_doc);
               a:
               {
                var _ea_ = 0;
                if(250 === _eb_)
                 var match = extra_doc[1];
                else{
                 if(246 !== _eb_ && 244 !== _eb_){var match = extra_doc; break a;
                 }
                 var match = caml_call1(CamlinternalLazy[2], extra_doc);
                }
               }
               if(match)
                var
                 extra_doc$0 = match[1],
                 _ec_ =
                   caml_call2
                    (Stdlib_String[7],
                     cst$13,
                     [0, doc, [0, cst$12, [0, extra_doc$0, 0]]]);
               else
                var _ec_ = doc;
               return [0,
                       [0,
                        name$0,
                        aliases$0,
                        aliases_excluded_from_help,
                        action,
                        _ec_,
                        num_occurrences,
                        check_available,
                        name_matching],
                       _ea_];
              }];};};
   }
   function flag_optional_with_default_doc
   (aliases,
    full_flag_required,
    name,
    arg_type,
    sexp_of_default,
    default$0,
    doc){
    var default_sexp = caml_call1(sexp_of_default, default$0);
    a:
    {
     if(0 === default_sexp[0] && default_sexp[1] === cst$29){var doc$0 = doc; break a;}
     var
      doc$0 =
        caml_call3
         (Command_Import[7],
          [0,
           [2,
            0,
            [11,
             cst_default,
             [24,
              ___,
              function(param, custom_printf_035){
               return caml_call1(Base[85][15], custom_printf_035);
              },
              _Z_]]],
           cst_s_default_Sexp],
          doc,
          default_sexp);
    }
    return caml_call1
            (flag(aliases, full_flag_required, name)
              (function(_d$_){
                return optional_with_default(default$0, arg_type, _d$_);
               }),
             doc$0);
   }
   function return$3(v){
    return [0,
            function(param){
             return return$1(function(param){return return_no_arg(v);});
            },
            function(param){return zero;},
            function(param){return 0;}];
   }
   function optional_to_required(t){
    return [0,
            function(param){
             return symbol_map
                     (caml_call1(t[1], 0),
                      function(f, param){
                       var outcome = caml_call1(f, 0);
                       return introduce_missing_required_fla
                               (caml_call2
                                 (map$0,
                                  outcome,
                                  function(param){
                                   if(! param)
                                    return [1,
                                            [0,
                                             696341824,
                                             caml_call1(Base_Error[12], cst_optional_to_required_got_a)]];
                                   var v = param[1];
                                   return [0, v];
                                  }));
                      });
            },
            t[2],
            t[3]];
   }
   var
    map$3 = [0, -198771759, map$2],
    include$1 = caml_call1(Base_Applicative[6], [0, return$3, apply$1, map$3]),
    return$4 = include$1[1],
    map$4 = include$1[2],
    both = include$1[3],
    symbol$3 = include$1[4],
    symbol$4 = include$1[5],
    symbol$5 = include$1[6],
    symbol_map$1 = include$1[7],
    apply$2 = include$1[8],
    map2 = include$1[9],
    map3 = include$1[10],
    all = include$1[11],
    all_unit = include$1[12],
    Applicative_infix = include$1[13];
   function arg_names(t){
    var
     flags = create$0(caml_call1(t[3], 0)),
     flag_names = caml_call1(Base_Map[70], flags),
     anon_names = names(caml_call1(t[2], 0));
    return caml_call1(Base_List[10], [0, flag_names, [0, anon_names, 0]]);
   }
   function compare$0(a_036, b_037){
    if(a_036 === b_037) return 0;
    var
     n =
       caml_call3
        (Base[143],
         function(a_038, b_039){return caml_call2(Base[171], a_038, b_039);},
         a_036[1],
         b_037[1]);
    return 0 === n
            ? caml_call3
              (Base[143],
               function(a_040, b_041){
                return caml_call2(Base[171], a_040, b_041);
               },
               a_036[2],
               b_037[2])
            : n;
   }
   function sexp_of_t(t){
    var x_042 = t[1];
    return caml_call2(Base[148], Base[177], x_042);
   }
   var
    T = [0, compare$0, sexp_of_t],
    sexp_of_t$0 = T[2],
    include$2 = caml_call1(Base_Comparator[5], T),
    comparator = include$2[1];
   function create_exn(t){
    var
     flags = create$0(caml_call1(t[3], 0)),
     _d8_ = caml_call2(Base_Map[72], 0, flags),
     required_args =
       caml_call2
        (Base_List[12],
         _d8_,
         function(param){
          var flag = param[2], name = param[1];
          return flag[6][1] ? [0, name] : 0;
         }),
     names = arg_names(t),
     names_with_commas =
       caml_call2
        (Base_List[11],
         names,
         function(s){return caml_call4(Base_String[69], 0, 0, s, 44);});
    if(1 - caml_call1(Base_List[18], names_with_commas)){
     var
      _d9_ =
        caml_call5
         (Base_Error[17],
          _$_,
          0,
          cst_For_simplicity_Command_Spe,
          names_with_commas,
          function(x_043){return caml_call2(Base[148], Base[177], x_043);});
     caml_call1(Base_Error[29], _d9_);
    }
    if(names) return [0, names, required_args];
    var
     _d__ = caml_call1(Sexplib0_Sexp_conv[7], cst_choose_one_expects_choices);
    return caml_call1(Base[217], _d__);
   }
   function to_string$0(t){
    return t[2]
            ? caml_call2(Base_String[67], _aa_, t[2])
            : caml_call2(Base_String[67], _ab_, t[1]);
   }
   function list_to_string(ts){
    var _d7_ = caml_call2(Base_List[52], ts, to_string$0);
    return caml_call2(Base_String[67], _ad_, _d7_);
   }
   var If_nothing_chosen = [0];
   function choose_one_non_optional(opt, ts, if_nothing_chosen){
    var
     new_behavior = opt ? opt[1] : 1,
     _dM_ =
       caml_call2
        (Base_List[52],
         ts,
         function(t){
          if(new_behavior)
           var
            name_of_the_group = create_exn(t),
            _dX_ =
              [0,
               t[1],
               function(param){
                var anon = caml_call1(t[2], 0);
                if(typeof anon === "number") return 0;
                switch(anon[0]){
                  case 1:
                   var t$0 = anon[1]; return [1, t$0];
                  case 2:
                   var t$1 = anon[1]; return [2, t$1];
                  default: return [2, anon];
                }
               },
               function(param){
                var _dY_ = caml_call1(t[3], 0);
                return caml_call2
                        (Base_List[52],
                         _dY_,
                         function(flag_internal){
                          var
                           except = flag_internal[1],
                           _dZ_ = flag_internal[8],
                           _d0_ = flag_internal[7],
                           _d1_ = [0, 0, flag_internal[6][2]],
                           _d2_ = flag_internal[5],
                           _d3_ = flag_internal[4],
                           _d4_ = flag_internal[3],
                           _d5_ = flag_internal[2],
                           l =
                             caml_call2
                              (Base_List[11],
                               name_of_the_group[2],
                               function(x){
                                return 1 - caml_call2(Base_String[131], except, x);
                               }),
                           match = l ? [0, caml_call2(Base_String[67], _ac_, l)] : 0;
                          if(match)
                           var
                            group = match[1],
                            _d6_ = caml_call2(Command_Import[7], _ae_, group);
                          else
                           var _d6_ = cst$14;
                          return [0,
                                  except,
                                  _d5_,
                                  _d4_,
                                  _d3_,
                                  caml_call3(Command_Import[7], _af_, _d2_, _d6_),
                                  _d1_,
                                  _d0_,
                                  _dZ_];
                         });
               }];
          else
           var _dX_ = t;
          return [0, create_exn(t), _dX_];
         }),
     match = caml_call2(Base_Map[8], [0, comparator], _dM_);
    if(17724 <= match[1]){
     var
      ts$0 = match[2],
      _dN_ = caml_call1(return$4, 0),
      t =
        caml_call2
         (map$4,
          caml_call3
           (Base_Map[53],
            ts$0,
            _dN_,
            function(name, t, acc){
             return caml_call3
                     (map2,
                      acc,
                      [0,
                       function(param){
                        return symbol_map
                                (caml_call1(t[1], 0),
                                 function(f, param){
                                  var outcome = caml_call1(f, 0);
                                  return [0, [0, outcome], outcome[2]];
                                 });
                       },
                       t[2],
                       t[3]],
                      function(acc, param){
                       var has_arg = param[2], value = param[1];
                       return has_arg ? [0, [0, name, value], acc] : acc;
                      });
            }),
          function(value_list){
           var arg_counter = caml_call1(Base_List[17], value_list);
           function more_than_one_error(passed){
            var _dW_ = caml_call2(Base_List[52], passed, Base[213]);
            return caml_call2
                    (die
                      ([0,
                        [11,
                         cst_Cannot_pass_more_than_one_$0,
                         [24,
                          _ag_,
                          function(param, custom_printf_044){
                           return list_to_string(custom_printf_044);
                          },
                          0]],
                        cst_Cannot_pass_more_than_one_]),
                     _dW_,
                     0);
           }
           var
            match =
              caml_call2
               (Base_List[15],
                value_list,
                function(param){
                 var match = param[2], name = param[1];
                 if(0 === match[0]){
                  var value = match[1];
                  return [0, [0, name, value]];
                 }
                 var err = match[1];
                 return [1, [0, name, err]];
                }),
            error_list = match[2],
            success_list = match[1];
           if(success_list){
            var _dP_ = success_list[1];
            if(success_list[2]) return more_than_one_error(success_list);
            var value = _dP_[2];
            if(1 < arg_counter) return more_than_one_error(value_list);
            var
             _dQ_ =
               typeof if_nothing_chosen === "number"
                ? if_nothing_chosen ? [0, value] : value
                : value;
            return [0, _dQ_];
           }
           if(error_list && ! error_list[2]){
            var
             _dS_ = error_list[1],
             err = _dS_[2][2],
             name = _dS_[1],
             _dT_ = caml_call1(Base_Error[9], err),
             _dU_ = to_string$0(name),
             _dV_ = caml_call3(Command_Import[7], _aj_, _dU_, _dT_);
            return [1, [0, 696341824, caml_call1(Base_Error[12], _dV_)]];
           }
           if(typeof if_nothing_chosen !== "number"){
            var value$0 = if_nothing_chosen[1];
            return [0, value$0];
           }
           if(if_nothing_chosen) return _ah_;
           var
            fmt =
              [0,
               [11,
                cst_Must_pass_one_of_these,
                [24,
                 _ai_,
                 function(param, custom_printf_045){
                  return list_to_string(custom_printf_045);
                 },
                 0]],
               cst_Must_pass_one_of_these_Cho],
            _dR_ = caml_call1(Base_Map[70], ts$0);
           return caml_call2
                   (caml_call2
                     (Command_Import[9],
                      function(msg, param){
                       return [1, [0, 696341824, caml_call1(Base_Error[12], msg)]];
                      },
                      fmt),
                    _dR_,
                    0);
          });
     return [0,
             function(param){
              return symbol_map
                      (caml_call1(t[1], 0),
                       function(f, param){
                        var outcome = caml_call1(f, 0);
                        return introduce_missing_required_fla(outcome);
                       });
             },
             t[2],
             t[3]];
    }
    var
     name = match[2],
     _dO_ =
       caml_call5
        (Base_Error[17],
         _ak_,
         0,
         cst_Command_Spec_choose_one_ca,
         name,
         sexp_of_t$0);
    return caml_call1(Base_Error[29], _dO_);
   }
   function choose_one(ts, if_nothing_chosen){
    return choose_one_non_optional
            (_al_,
             caml_call2
              (Base_List[52],
               ts,
               function(t){
                return map_outcome
                        (t,
                         function(param){
                          var has_arg = param[2], result = param[1];
                          if(0 !== result[0]) return [0, result, has_arg];
                          var match = result[1];
                          if(! match)
                           return [0,
                                   [1,
                                    [0,
                                     696341824,
                                     caml_call1(Base_Error[12], cst_missing_required_flag)]],
                                   0];
                          var value = match[1];
                          return [0, [0, value], 1];
                         });
               }),
             if_nothing_chosen);
   }
   function choose_one_non_optional$0(lst, if_nothing_chosen){
    return choose_one_non_optional(0, lst, if_nothing_chosen);
   }
   function and_arg_names(t){
    return caml_call2
            (map$4, t, function(value){return [0, value, arg_names(t)];});
   }
   function and_arg_name(t){
    var names = arg_names(t);
    if(names && ! names[2]){
     var name = names[1];
     return caml_call2(map$4, t, function(value){return [0, value, name];});
    }
    var
     _dK_ = [0, caml_call2(Base[148], Base[177], names), 0],
     _dL_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_and_arg_name_expects_exact),
         _dK_]];
    return caml_call1(Base[217], _dL_);
   }
   function parse$1(param, args){
    var
     flags = param[3],
     f = param[1],
     cmdline = of_list(args),
     result = [0, 0],
     _dF_ = Univ_map[4];
    run
     ([0,
       cst$15,
       0,
       create$0(caml_call1(flags, 0)),
       function(param){
        return symbol_map
                (caml_call1(f, 0),
                 function(params, _dJ_, param){
                  var outcome = caml_call1(params, 0), match = outcome[1];
                  if(0 === match[0]){
                   var x = match[1];
                   result[1] = [0, [0, x]];
                   return 0;
                  }
                  var err = match[1][2];
                  result[1] = [0, [1, err]];
                  return 0;
                 });
       },
       zero],
      _dF_,
      function(_dI_){return _dI_;},
      empty$0,
      cmdline,
      _am_,
      cst_No_help_for_parsing,
      function(exn, _dH_, _dG_, param){
       result[1] = [0, [1, caml_call2(Base_Error[25], 0, exn)]];
       return 0;
      });
    return caml_call4(Base_Option[29], _an_, 0, 0, result[1]);
   }
   function symbol$6(t1, t2){
    return caml_call3
            (map2,
             t1,
             t2,
             function(f1, f2, x){return caml_call1(f2, caml_call1(f1, x));});
   }
   function symbol$7(t1, p2){
    return caml_call3
            (map2,
             t1,
             p2,
             function(f1, p2, x){return caml_call1(caml_call1(f1, x), p2);});
   }
   function symbol$8(t1, p2){
    return caml_call3
            (map2,
             p2,
             t1,
             function(p2, f1, x){return caml_call1(f1, caml_call1(x, p2));});
   }
   function step(f){return caml_call1(return$4, f);}
   function const$0(x){return caml_call1(return$4, x);}
   function wrap(f, t){
    return caml_call2
            (map$4, t, function(run, main){return caml_call2(f, run, main);});
   }
   function of_param(p){
    return caml_call2(map$4, p, function(f, k){return caml_call1(k, f);});
   }
   function to_param(t, m){
    return caml_call2(map$4, t, function(f){return caml_call1(f, m);});
   }
   var
    string$1 = include$0[1],
    int$2 = include$0[2],
    char$2 = include$0[3],
    float$2 = include$0[4],
    bool$1 = include$0[5],
    sexp$1 = include$0[6],
    sexp_conv$1 = include$0[7],
    map$5 = [0, -198771759, map$4],
    include$3 = caml_call1(Base_Applicative[6], [0, return$4, apply$2, map$5]),
    return$5 = include$3[1],
    map$6 = include$3[2],
    both$0 = include$3[3],
    symbol$9 = include$3[4],
    symbol$10 = include$3[5],
    symbol$11 = include$3[6],
    symbol_map$2 = include$3[7],
    apply$3 = include$3[8],
    map2$0 = include$3[9],
    map3$0 = include$3[10],
    all$0 = include$3[11],
    all_unit$0 = include$3[12],
    Applicative_infix$0 = include$3[13];
   function flags_of_args_exn(args){
    return caml_call3
            (Base_List[20],
             args,
             empty_spec,
             function(acc, param){
              var doc = param[3], spec = param[2], name = param[1];
              function gen(f, flag_type){
               function f$0(m, x){caml_call1(f, x); return m;}
               var _dE_ = caml_call1(flag(0, 0, name)(flag_type), doc);
               return symbol$7(caml_call1(return$4, f$0), _dE_);
              }
              function call(f, arg_type){
               return gen
                       (function(x){return caml_call2(Base_Option[35], x, f);},
                        function(_dD_){return optional(arg_type, _dD_);});
              }
              function set(r, arg_type){
               return call(function(x){r[1] = x; return 0;}, arg_type);
              }
              function set_bool(r, b){
               return gen
                       (function(passed){
                         var _dC_ = passed ? (r[1] = b, 0) : passed;
                         return _dC_;
                        },
                        no_arg);
              }
              switch(spec[0]){
                case 0:
                 var
                  f = spec[1],
                  _dz_ =
                    gen
                     (function(passed){
                       return passed ? caml_call1(f, 0) : passed;
                      },
                      no_arg);
                 break;
                case 1:
                 var f$0 = spec[1], _dz_ = call(f$0, bool$1); break;
                case 2:
                 var r = spec[1], _dz_ = set_bool(r, 1); break;
                case 3:
                 var r$0 = spec[1], _dz_ = set_bool(r$0, 0); break;
                case 4:
                 var f$1 = spec[1], _dz_ = call(f$1, string$1); break;
                case 5:
                 var r$1 = spec[1], _dz_ = set(r$1, string$1); break;
                case 6:
                 var f$2 = spec[1], _dz_ = call(f$2, int$2); break;
                case 7:
                 var r$2 = spec[1], _dz_ = set(r$2, int$2); break;
                case 8:
                 var f$3 = spec[1], _dz_ = call(f$3, float$2); break;
                case 9:
                 var r$3 = spec[1], _dz_ = set(r$3, float$2); break;
                case 10:
                 var
                  _dz_ = caml_call1(Base[215], cst_Arg_Tuple_is_not_supported);
                 break;
                case 11:
                 var
                  f$4 = spec[2],
                  syms = spec[1],
                  arg_type =
                    of_alist_exn
                     (0,
                      0,
                      _ao_,
                      0,
                      0,
                      caml_call2
                       (Base_List[52], syms, function(sym){return [0, sym, sym];})),
                  _dz_ = call(f$4, arg_type);
                 break;
                case 12:
                 var
                  f$5 = spec[1],
                  _dz_ =
                    gen
                     (function(x){
                       var _dA_ = Base_List[19];
                       return caml_call2
                               (Base_Option[35],
                                x,
                                function(_dB_){return caml_call2(_dA_, _dB_, f$5);});
                      },
                      escape);
                 break;
                case 13:
                 var
                  _dz_ = caml_call1(Base[215], cst_Arg_Rest_all_is_not_suppor);
                 break;
                default:
                 var
                  _dz_ = caml_call1(Base[215], cst_Arg_Expand_is_not_supporte);
              }
              return symbol$6(acc, _dz_);
             });
   }
   var Deprecated = [0, no_arg$0, escape$0, ad_hoc];
   function shape$0(subcommand_to_shape, t){
    var
     _dv_ = Base_List[134][9],
     _dw_ =
       caml_call2
        (Base_Lazy[12],
         t[3],
         function(_dy_){return caml_call2(_dv_, _dy_, subcommand_to_shape);}),
     _dx_ =
       caml_call2
        (Base_Option[22],
         t[2],
         function(readme){return caml_call1(readme, 0);});
    return [0, t[1], _dx_, _dw_];
   }
   var abs_path = Command_Shape[14][2], comp_cword = 2;
   function shape$1(t){
    var
     _dr_ = t[5],
     _ds_ = t[4],
     _dt_ = t[3],
     _du_ =
       caml_call2
        (Base_Option[22],
         t[2],
         function(readme){return caml_call1(readme, 0);});
    return [0, t[1], _du_, _dt_, _ds_, _dr_];
   }
   function sexpable_shape(param){
    switch(param[0]){
      case 0:
       var base = param[1]; return [0, shape(base)];
      case 1:
       var group = param[1]; return [1, shape$0(sexpable_shape, group)];
      case 2:
       var exec = param[1]; return [2, shape$1(exec)];
      default:
       var thunk = param[1];
       return [3, caml_call2(Base_Lazy[12], thunk, sexpable_shape)];
    }
   }
   function extend_exn(mem, add, map, key_type, key, data){
    if(caml_call2(mem, map, key)){
     var _dq_ = caml_call1(Command_Shape[14][1][1], key_type);
     caml_call4(Command_Import[8], _ap_, _dq_, key, 0);
    }
    return caml_call3(add, map, key, data);
   }
   function extend_alist_exn(alist, key_type, key, data){
    return extend_exn
            (function(alist, key){
              return caml_call3
                      (Base_List[134][7], alist, Base_String[131], key);
             },
             function(alist, key, data){
              return caml_call4
                      (Base_List[134][4], alist, Base_String[131], key, data);
             },
             alist,
             key_type,
             key,
             data);
   }
   function add
   (base, name, aliases, aliases_excluded_from_help, text, text_summary){
    var
     flags$0 = base[3],
     data =
       [0,
        name,
        aliases,
        aliases_excluded_from_help,
        [1, function(env){return caml_call1(text, env);}],
        caml_call2(Command_Import[7], _aq_, text_summary),
        at_most_once,
        function(_dp_){return 0;},
        -481604174],
     flags = extend_exn(Base_Map[43], Base_Map[32], flags$0, 1, name, data);
    return [0, base[1], base[2], flags, base[4], base[5]];
   }
   function basic(summary, readme, param){
    var
     flags = param[3],
     usage = param[2],
     f = param[1],
     flags$0 = caml_call1(flags, 0),
     usage$0 = caml_call1(usage, 0);
    function anons(param){
     return symbol_map
             (caml_call1(f, 0),
              function(params, param){
               var outcome = caml_call1(params, 0), match = outcome[1];
               if(0 === match[0]){
                var thunk = match[1];
                return function(param){return caml_call1(thunk, 0);};
               }
               var err = match[1][2], _do_ = caml_call1(Base_Error[9], err);
               return caml_call2(die(_ar_), _do_, 0);
              });
    }
    var
     flags$1 = create$0(flags$0),
     base = [0, summary, readme, flags$1, anons, usage$0],
     base$0 =
       add
        (base,
         cst_help$2,
         _at_,
         _as_,
         function(env){
          var
           _dm_ = caml_call2(find_exn, env, help_key),
           _dn_ = caml_obj_tag(_dm_);
          if(250 === _dn_) return _dm_[1];
          if(246 !== _dn_ && 244 !== _dn_) return _dm_;
          return caml_call1(CamlinternalLazy[2], _dm_);
         },
         cst_this_help_text);
    return [0, base$0];
   }
   function basic_spec(summary, readme, spec, main){
    return basic(summary, readme, to_param(spec, main));
   }
   var subs_key = key_create(cst_subcommands);
   function lazy_group
   (summary, readme, preserve_subcommand_order, body, alist){
    var
     subcommands =
       caml_call2
        (Base_Lazy[12],
         alist,
         function(alist){
          var
           alist$0 =
             caml_call2
              (Base_List[52],
               alist,
               function(param){
                var t = param[2], name = param[1];
                return [0, normalize$0(0, name), t];
               }),
           match = caml_call2(Base_Map[8], [0, Base_String[59]], alist$0);
          if(17724 <= match[1]){
           var map = match[2];
           return preserve_subcommand_order
                   ? alist$0
                   : caml_call2(Base_Map[72], 0, map);
          }
          var name = match[2];
          return caml_call3(Command_Import[8], _au_, name, 0);
         });
    return [1, [0, summary, readme, subcommands, body]];
   }
   function group(summary, readme, preserve_subcommand_order, body, alist){
    var
     readme$0 =
       caml_call2
        (Base_Option[22],
         readme,
         function(f, param){
          var _dl_ = caml_call1(f, 0);
          return caml_call2(Base_String[106], 0, _dl_);
         });
    return lazy_group
            (summary,
             readme$0,
             preserve_subcommand_order,
             body,
             caml_call1(Base_Lazy[21], alist));
   }
   function exec(summary, readme, opt, env, path_to_exe, param){
    var
     child_subcommand = opt ? opt[1] : 0,
     _dk_ =
       -310138871 <= path_to_exe[1]
        ? Stdlib_Sys[1]
        : caml_check_bound(caml_sys_argv(0), 0)[1],
     working_dir = caml_call1(Filename_base[38], _dk_);
    if(491227799 <= path_to_exe[1])
     var
      p = path_to_exe[2],
      p$0 =
        caml_call1(Filename_base[30], p)
         ? p
         : caml_call1(Base[215], cst_Path_passed_to_Absolute_mu),
      path_to_exe$0 = p$0;
    else
     var
      p$1 = path_to_exe[2],
      p$2 =
        caml_call1(Filename_base[29], p$1)
         ? p$1
         : caml_call1(Base[215], cst_Path_passed_to_Relative_to),
      path_to_exe$0 = p$2;
    return [2,
            [0,
             summary,
             readme,
             working_dir,
             path_to_exe$0,
             child_subcommand,
             env]];
   }
   function of_lazy$0(thunk){return [3, thunk];}
   function proxy_of_sexpable
   (sexpable, working_dir, path_to_exe, child_subcommand, path_to_subcommand){
    var
     kind =
       kind_of_sexpable
        (sexpable,
         working_dir,
         path_to_exe,
         child_subcommand,
         path_to_subcommand);
    return [0,
            working_dir,
            path_to_exe,
            path_to_subcommand,
            child_subcommand,
            kind];
   }
   function kind_of_sexpable
   (sexpable, working_dir, path_to_exe, child_subcommand, path_to_subcommand){
    switch(sexpable[0]){
      case 0:
       var b = sexpable[1]; return [0, b];
      case 1:
       var
        g = sexpable[1],
        _dg_ =
          function(param){
           var
            sexpable = param[2],
            str = param[1],
            path_to_subcommand$0 =
              caml_call2(Base[193], path_to_subcommand, [0, str, 0]),
            proxy =
              proxy_of_sexpable
               (sexpable,
                working_dir,
                path_to_exe,
                child_subcommand,
                path_to_subcommand$0);
           return [0, str, proxy];
          },
        _dh_ = Base_List[52],
        _di_ =
          caml_call2
           (Base_Lazy[12],
            g[3],
            function(_dj_){return caml_call2(_dh_, _dj_, _dg_);});
       return [1, [0, g[1], g[2], _di_]];
      case 2:
       var e = sexpable[1]; return [2, e];
      default:
       var l = sexpable[1];
       return [3,
               caml_call2
                (Base_Lazy[12],
                 l,
                 function(sexpable){
                  return kind_of_sexpable
                          (sexpable,
                           working_dir,
                           path_to_exe,
                           child_subcommand,
                           path_to_subcommand);
                 })];
    }
   }
   function Version_info(Version_util){
    function print_version(version){
     var _de_ = caml_obj_tag(version);
     a:
     if(250 === _de_)
      var _df_ = version[1];
     else{
      if(246 !== _de_ && 244 !== _de_){var _df_ = version; break a;}
      var _df_ = caml_call1(CamlinternalLazy[2], version);
     }
     return caml_call1(Command_Import[5], _df_);
    }
    function print_build_info(build_info){
     var _dc_ = caml_obj_tag(build_info);
     a:
     if(250 === _dc_)
      var _dd_ = build_info[1];
     else{
      if(246 !== _dc_ && 244 !== _dc_){var _dd_ = build_info; break a;}
      var _dd_ = caml_call1(CamlinternalLazy[2], build_info);
     }
     return caml_call1(Command_Import[5], _dd_);
    }
    function command(version, build_info){
     var
      _da_ =
        caml_call1
         (flag(0, 0, cst_build_info)(no_arg), cst_print_build_info_for_this_),
      _db_ =
        caml_call1
         (flag(0, 0, cst_version)(no_arg), cst_print_the_version_of_this_);
     return basic
             (cst_print_version_information,
              0,
              caml_call2
               (symbol$3,
                caml_call2
                 (symbol$3,
                  caml_call1
                   (return$4,
                    function(version_flag, build_info_flag){
                     if(build_info_flag)
                      print_build_info(build_info);
                     else if(version_flag)
                      print_version(version);
                     else{print_build_info(build_info); print_version(version);}
                     return exit(0);
                    }),
                  _db_),
                _da_));
    }
    function add$0(version, build_info, unversioned){
     switch(unversioned[0]){
       case 0:
        var
         base = unversioned[1],
         base$0 =
           add
            (base,
             cst_version$0,
             0,
             _av_,
             function(param){
              var _c$_ = caml_obj_tag(version);
              if(250 === _c$_) return version[1];
              if(246 !== _c$_ && 244 !== _c$_) return version;
              return caml_call1(CamlinternalLazy[2], version);
             },
             cst_the_version_of_this_build),
         base$1 =
           add
            (base$0,
             cst_build_info$0,
             0,
             _aw_,
             function(param){
              var _c__ = caml_obj_tag(build_info);
              if(250 === _c__) return build_info[1];
              if(246 !== _c__ && 244 !== _c__) return build_info;
              return caml_call1(CamlinternalLazy[2], build_info);
             },
             cst_info_about_this_build);
        return [0, base$1];
       case 1:
        var
         group = unversioned[1],
         subcommands =
           caml_call2
            (Base_Lazy[12],
             group[3],
             function(subcommands){
              return extend_alist_exn
                      (subcommands,
                       0,
                       cst_version$1,
                       command(version, build_info));
             });
        return [1, [0, group[1], group[2], subcommands, group[4]]];
       case 2:
        var exec = unversioned[1]; return [2, exec];
       default:
        var thunk = unversioned[1];
        return [3,
                [246,
                 function(_c7_){
                  var _c8_ = caml_obj_tag(thunk);
                  a:
                  if(250 === _c8_)
                   var _c9_ = thunk[1];
                  else{
                   if(246 !== _c8_ && 244 !== _c8_){var _c9_ = thunk; break a;}
                   var _c9_ = caml_call1(CamlinternalLazy[2], thunk);
                  }
                  return add$0(version, build_info, _c9_);
                 }]];
     }
    }
    function normalize_version_lines(lines){
     var _c6_ = caml_call2(Base_List[81], lines, Base_String[51]);
     return caml_call2(Base_String[67], _ax_, _c6_);
    }
    var
     default_version =
       [246, function(_c5_){return normalize_version_lines(Version_util[2]);}],
     default_build_info =
       [246,
        function(_c4_){
         return caml_call1(Version_util[3], Version_util[1][1]);
        }];
    return [0,
            print_version,
            print_build_info,
            ,
            add$0,
            normalize_version_lines,
            default_version,
            default_build_info];
   }
   caml_call8
    (Ppx_inline_test_lib[9],
     Inline_test_config,
     cst_Version_info,
     0,
     cst_command_src_command_ml$9,
     2576,
     0,
     748,
     function(param){
      function reprint_build_info(to_sexp){
       var _c3_ = caml_call1(to_sexp, 0);
       return caml_call1(Base[85][15], _c3_);
      }
      var
       sexp_of_t = Base[191],
       Time = [0, sexp_of_t],
       Version_info$0 =
         Version_info([0, Time, version_list, reprint_build_info]),
       Expect_test_collector$0 =
         caml_call1(Expect_test_collector[2], Expect_test_config),
       _cT_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_command_src_command_ml$0),
          2589,
          78793,
          78808,
          78877],
       _cU_ =
         [0,
          [0,
           _az_,
           _ay_,
           [0,
            caml_call1
             (Expect_test_common_File[1][6], cst_command_src_command_ml$1),
            2589,
            78793,
            78801,
            78807],
           _cT_],
          0],
       _cV_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_command_src_command_ml$3),
          2587,
          78653,
          78657,
          78878],
       _cW_ =
         caml_call1
          (Expect_test_common_File[4][3], cst_438ccee7e1ef92685d7ed2fd99);
      caml_call9
       (Expect_test_collector$0[3],
        _cW_,
        _cV_,
        cst_command_src_command_ml$2,
        _aA_,
        0,
        _cU_,
        0,
        Inline_test_config,
        function(param){
         Version_info$0[1].call(null, Version_info$0[6]);
         var
          _c2_ =
            [0,
             caml_call1
              (Expect_test_common_File[1][6], cst_command_src_command_ml),
             2589,
             78793,
             78801,
             78807];
         return caml_call1(Expect_test_collector$0[1], _c2_);
        });
      var
       Expect_test_collector$1 =
         caml_call1(Expect_test_collector[2], Expect_test_config),
       _cX_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_command_src_command_ml$5),
          2596,
          79002,
          79017,
          79038],
       _cY_ =
         [0,
          [0,
           _aC_,
           _aB_,
           [0,
            caml_call1
             (Expect_test_common_File[1][6], cst_command_src_command_ml$6),
            2596,
            79002,
            79010,
            79016],
           _cX_],
          0],
       _cZ_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_command_src_command_ml$8),
          2594,
          78887,
          78891,
          79039],
       _c0_ =
         caml_call1
          (Expect_test_common_File[4][3], cst_438ccee7e1ef92685d7ed2fd99$0);
      caml_call9
       (Expect_test_collector$1[3],
        _c0_,
        _cZ_,
        cst_command_src_command_ml$7,
        _aD_,
        0,
        _cY_,
        0,
        Inline_test_config,
        function(param){
         Version_info$0[2].call(null, cst_some_build_info);
         var
          _c1_ =
            [0,
             caml_call1
              (Expect_test_common_File[1][6], cst_command_src_command_ml$4),
             2596,
             79002,
             79010,
             79016];
         return caml_call1(Expect_test_collector$1[1], _c1_);
        });
      return 0;
     });
   function summary(param){
    var param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        var x = param$0[1]; return x[1];
       case 1:
        var x$0 = param$0[1]; return x$0[1];
       case 2:
        var x$1 = param$0[1]; return x$1[1];
       default:
        var thunk = param$0[1], _cS_ = caml_obj_tag(thunk);
        a:
        if(250 === _cS_)
         var param$1 = thunk[1];
        else{
         if(246 !== _cS_ && 244 !== _cS_){var param$1 = thunk; break a;}
         var param$1 = caml_call1(CamlinternalLazy[2], thunk);
        }
        param$0 = param$1;
     }
   }
   var path$0 = caml_call2(map$6, path, parts_exe_basename);
   function get_flag_names(param){
    var param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        var base = param$0[1]; return caml_call1(Base_Map[70], base[3]);
       case 3:
        var thunk = param$0[1], _cR_ = caml_obj_tag(thunk);
        a:
        if(250 === _cR_)
         var param$1 = thunk[1];
        else{
         if(246 !== _cR_ && 244 !== _cR_){var param$1 = thunk; break a;}
         var param$1 = caml_call1(CamlinternalLazy[2], thunk);
        }
        param$0 = param$1;
        break;
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _aE_], 1);
     }
   }
   function help_recursive(cmd, with_flags, expand_dots, t, s){
    function help_recursive_rec(cmd, t, s){
     var t$0 = t;
     for(;;){
      var
       cmd$0 = expand_dots ? cmd : cst$17,
       _cH_ = caml_call2(Base[212], cmd$0, cst$16),
       new_s = caml_call2(Base[212], s, _cH_);
      switch(t$0[0]){
        case 0:
         var
          base = t$0[1],
          _cI_ = summary([0, base]),
          base_help = [0, caml_call2(Base[212], s, cmd), _cI_];
         if(! with_flags) return [0, base_help, 0];
         var
          display_help_flags = opt[1],
          flags = caml_call1(Base_Map[71], base[3]),
          _cJ_ =
            function(param){
             var h = param[2], flag = param[1];
             return [0, caml_call2(Base[212], new_s, flag), h];
            },
          flags$0 =
            display_help_flags
             ? flags
             : caml_call2
               (Base_List[11],
                flags,
                function(f){
                 return caml_call2(Base_String[50], f[1], cst_help);
                }),
          _cG_ = caml_call2(Base_List[13], flags$0, help),
          _cK_ = caml_call2(Base_List[81], _cG_, subcommand_cmp_fst);
         return [0, base_help, caml_call2(Base_List[52], _cK_, _cJ_)];
        case 1:
         var
          match = t$0[1],
          subcommands = match[3],
          summary$0 = match[1],
          _cM_ = caml_obj_tag(subcommands);
         a:
         {
          var
           _cL_ =
             function(param){
              var t = param[2], cmd = param[1];
              return help_recursive_rec(cmd, t, new_s);
             };
          if(250 === _cM_)
           var _cN_ = subcommands[1];
          else{
           if(246 !== _cM_ && 244 !== _cM_){var _cN_ = subcommands; break a;}
           var _cN_ = caml_call1(CamlinternalLazy[2], subcommands);
          }
         }
         var
          _cO_ = caml_call2(Base_List[81], _cN_, subcommand_cmp_fst),
          _cP_ = caml_call2(Base_List[13], _cO_, _cL_);
         return [0, [0, caml_call2(Base[212], s, cmd), summary$0], _cP_];
        case 2:
         return 0;
        default:
         var thunk = t$0[1], _cQ_ = caml_obj_tag(thunk);
         a:
         if(250 === _cQ_)
          var t$1 = thunk[1];
         else{
          if(246 !== _cQ_ && 244 !== _cQ_){var t$1 = thunk; break a;}
          var t$1 = caml_call1(CamlinternalLazy[2], thunk);
         }
         t$0 = t$1;
      }
     }
    }
    return help_recursive_rec(cmd, t, s);
   }
   var path$1 = caml_call2(map$4, path, parts_exe_basename);
   function basic$0(summary, readme, param){
    var
     readme$0 =
       caml_call2
        (Base_Option[22],
         readme,
         function(f, param){
          var _cF_ = caml_call1(f, 0);
          return caml_call2(Base_String[106], 0, _cF_);
         });
    return basic(summary, readme$0, param);
   }
   function basic_or_error(summary, readme, param){
    return basic$0
            (summary,
             readme,
             caml_call2
              (map$4,
               param,
               function(run, param){
                var match = caml_call1(run, 0);
                if(0 === match[0]) return 0;
                var e = match[1], _cE_ = caml_call1(Base_Error[9], e);
                caml_call1(Stdio[10], _cE_);
                return exit(1);
               }));
   }
   var word_wrap = Command_Shape[14][5];
   function to_string_for_choose_one(param){return to_string$0(create_exn(param));
   }
   caml_call1(Ppx_inline_test_lib[6], cst_command);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Command);
   var
    Command =
      [0,
       Auto_complete,
       [0,
        create,
        parse,
        map$1,
        of_lazy,
        of_map,
        of_alist_exn,
        enumerated,
        enumerated_sexpable,
        comma_separated,
        include$0,
        auto_complete],
       [0,
        required,
        optional,
        optional_with_default,
        listed,
        one_or_more_as_pair,
        one_or_more_as_list,
        no_arg,
        no_arg_register,
        no_arg_some,
        no_arg_required,
        no_arg_abort,
        escape,
        escape_with_autocomplete,
        map_flag],
       [0,
        symbol$2,
        sequence$0,
        non_empty_sequence_as_pair,
        non_empty_sequence_as_list,
        maybe,
        maybe_with_default,
        t2,
        t3,
        t4,
        map_anons],
       [0,
        return$4,
        map$4,
        both,
        symbol$3,
        symbol$4,
        symbol$5,
        symbol_map$1,
        apply$2,
        map2,
        map3,
        all,
        all_unit,
        Applicative_infix,
        help$0,
        path$1,
        args,
        flag,
        flag_optional_with_default_doc,
        anon,
        escape_anon,
        If_nothing_chosen,
        choose_one,
        choose_one_non_optional$0,
        and_arg_names,
        and_arg_name,
        arg_names,
        optional_to_required,
        [0,
         create,
         parse,
         map$1,
         of_lazy,
         of_map,
         of_alist_exn,
         enumerated,
         enumerated_sexpable,
         comma_separated,
         include$0,
         auto_complete],
        string$0,
        int$1,
        char$1,
        float$1,
        bool$0,
        sexp$0,
        sexp_conv$0,
        required,
        optional,
        optional_with_default,
        listed,
        one_or_more_as_pair,
        one_or_more_as_list,
        no_arg,
        no_arg_register,
        no_arg_some,
        no_arg_required,
        no_arg_abort,
        escape,
        escape_with_autocomplete,
        map_flag,
        symbol$2,
        sequence$0,
        non_empty_sequence_as_pair,
        non_empty_sequence_as_list,
        maybe,
        maybe_with_default,
        t2,
        t3,
        t4,
        map_anons,
        parse$1],
       [0,
        return$4,
        symbol$3,
        symbol$4,
        symbol$5,
        symbol_map$1,
        [0, return$4, map$4, both]],
       [0,
        return$5,
        map$6,
        both$0,
        symbol$9,
        symbol$10,
        symbol$11,
        symbol_map$2,
        apply$3,
        map2$0,
        map3$0,
        all$0,
        all_unit$0,
        Applicative_infix$0,
        help$0,
        path$0,
        args,
        flag,
        flag_optional_with_default_doc,
        anon,
        escape_anon,
        If_nothing_chosen,
        choose_one,
        choose_one_non_optional$0,
        and_arg_names,
        and_arg_name,
        arg_names,
        const$0,
        both,
        empty_spec,
        symbol$6,
        symbol$7,
        symbol$8,
        step,
        wrap,
        [0,
         create,
         parse,
         map$1,
         of_lazy,
         of_map,
         of_alist_exn,
         enumerated,
         enumerated_sexpable,
         comma_separated,
         include$0,
         auto_complete],
        string$1,
        int$2,
        char$2,
        float$2,
        bool$1,
        sexp$1,
        sexp_conv$1,
        required,
        optional,
        optional_with_default,
        listed,
        one_or_more_as_pair,
        one_or_more_as_list,
        no_arg,
        no_arg_register,
        no_arg_some,
        no_arg_required,
        no_arg_abort,
        escape,
        escape_with_autocomplete,
        map_flag,
        flags_of_args_exn,
        symbol$2,
        sequence$0,
        non_empty_sequence_as_pair,
        non_empty_sequence_as_list,
        maybe,
        maybe_with_default,
        t2,
        t3,
        t4,
        map_anons,
        to_param,
        of_param],
       basic_spec,
       basic$0,
       basic_or_error,
       group,
       lazy_group,
       exec,
       of_lazy$0,
       summary,
       exit,
       [0, Deprecated, summary, help_recursive, get_flag_names],
       228660148,
       [0],
       228660148,
       [0,
        abs_path,
        word_wrap,
        [0, normalize],
        [0,
         empty$0,
         create$1,
         append,
         parts,
         replace_first,
         to_string,
         to_string_dots],
        [0, compare, of_list, extend],
        [0, flags_of_args_exn, to_string_for_choose_one],
        function(For_unix_with_string_env_var){
         var
          Version_info$0 = Version_info(For_unix_with_string_env_var[1]),
          Pid = For_unix_with_string_env_var[2],
          Thread = For_unix_with_string_env_var[4],
          Unix = For_unix_with_string_env_var[5],
          getpid = Unix[2],
          close = Unix[3],
          in_channel_of_descr = Unix[4],
          wait = Unix[11],
          _aX_ = Unix[6],
          _aY_ = Unix[7];
         function getenv_and_clear(var$0){
          var value = caml_call1(_aY_, caml_call1(Command_Env_var[4], var$0));
          if(caml_call1(Base_Option[51], value))
           caml_call1(_aX_, caml_call1(Command_Env_var[4], var$0));
          return value;
         }
         var
          include = Command_Shape[11],
          supported_versions = include[3],
          Versioned = include[4],
          of_versioned = include[5],
          to_versioned = include[6],
          _aW_ = Unix[5],
          _aZ_ = Unix[10];
         function of_external(working_dir, path_to_exe, child_subcommand){
          var
           _cu_ =
             caml_call2(Base_Set[68], [0, Base_Int[10]], supported_versions),
           help_sexp = caml_call1(Base[85][15], _cu_),
           env = [0, -72399366, [0, [0, 1, help_sexp], 0]],
           prog = caml_call2(abs_path, working_dir, path_to_exe);
          function convert_command_env_var_to_str(list){
           return caml_call2
                   (Base_List[52],
                    list,
                    function(param){
                     var str = param[2], env_var = param[1];
                     return [0, caml_call1(Command_Env_var[4], env_var), str];
                    });
          }
          var
           _cp_ = env[1],
           argv0 = 0,
           prog_search_path = 0,
           working_dir$0 = 0,
           _cq_ = 0;
          if(-72399366 <= _cp_)
           if(584703596 <= _cp_)
            var
             list = env[2],
             _cr_ = [0, 584703596, convert_command_env_var_to_str(list)];
           else
            var
             list$0 = env[2],
             _cr_ = [0, -72399366, convert_command_env_var_to_str(list$0)];
          else if(-126259180 <= _cp_)
           var
            list$1 = env[2],
            _cr_ = [0, -126259180, convert_command_env_var_to_str(list$1)];
          else
           var _cr_ = env;
          var
           process_info =
             caml_call7
              (_aZ_,
               working_dir$0,
               prog_search_path,
               argv0,
               prog,
               child_subcommand,
               _cr_,
               _cq_);
          caml_call2(close, 0, process_info[2]);
          function start_reading(descr, info){
           var
            output = [0, 0],
            thread =
              caml_call3
               (Thread[1],
                890699316,
                function(param){
                 var
                  result =
                    caml_call1
                     (Base_Result[40],
                      function(param){
                       var _cD_ = caml_call1(in_channel_of_descr, descr);
                       return caml_call1(Stdio_In_channel[14], _cD_);
                      });
                 output[1] = [0, result];
                 return 0;
                },
                0);
           return caml_call1
                   (Base_Staged[1],
                    function(param){
                     caml_call1(Thread[2], thread);
                     caml_call2(close, 0, descr);
                     var _cA_ = output[1];
                     if(! _cA_){
                      var
                       _cB_ =
                         [0,
                          [1, [0, _aF_, [0, caml_call1(Base_Info[6], info), 0]]],
                          0],
                       _cC_ =
                         [1,
                          [0,
                           caml_call1(Sexplib0_Sexp_conv[7], cst_BUG_failed_to_read),
                           _cB_]];
                      return caml_call1(Base[217], _cC_);
                     }
                     var match = _cA_[1];
                     if(0 === match[0]){
                      var output$0 = match[1];
                      return output$0;
                     }
                     var exn = match[1];
                     throw caml_maybe_attach_backtrace(exn, 1);
                    });
          }
          var
           _cs_ = caml_call1(Base_Info[12], cst_stdout),
           finish_stdout = start_reading(process_info[3], _cs_),
           _ct_ = caml_call1(Base_Info[12], cst_stderr),
           finish_stderr = start_reading(process_info[4], _ct_),
           stderr = caml_call2(Base_Staged[2], finish_stderr, 0),
           stdout = caml_call2(Base_Staged[2], finish_stdout, 0);
          caml_call1(wait, process_info[1]);
          try{
           var
            _cz_ = caml_call1(Sexplib_Sexp[43], stdout),
            t = caml_call1(of_versioned, caml_call1(Versioned[1], _cz_));
           return t;
          }
          catch(exn$0){
           var
            exn = caml_wrap_exception(exn$0),
            _cv_ =
              [0, [1, [0, _aG_, [0, caml_call1(Base[177], stderr), 0]]], 0],
            _cw_ =
              [0, [1, [0, _aH_, [0, caml_call1(Base[177], stdout), 0]]], _cv_],
            _cx_ = [0, caml_call1(Base[110], exn), _cw_],
            _cy_ =
              [1,
               [0,
                caml_call1
                 (Sexplib0_Sexp_conv[7], cst_cannot_parse_command_shape),
                _cx_]];
           return caml_call1(Base[217], _cy_);
          }
         }
         function shape_of_proxy(proxy){return shape_of_proxy_kind(proxy[5]);}
         function shape_of_exe
         (param, child_subcommand, path_to_exe, working_dir){
          return shape_of_proxy
                  (proxy_of_sexpable
                    (of_external(working_dir, path_to_exe, child_subcommand),
                     working_dir,
                     path_to_exe,
                     child_subcommand,
                     0));
         }
         function shape_of_proxy_kind(kind){
          switch(kind[0]){
            case 0:
             var b = kind[1]; return [0, b];
            case 1:
             var
              g = kind[1],
              _cl_ = Base_List[134][9],
              _cm_ =
                caml_call2
                 (Base_Lazy[12],
                  g[3],
                  function(_co_){
                   return caml_call2(_cl_, _co_, shape_of_proxy);
                  });
             return [1, [0, g[1], g[2], _cm_]];
            case 2:
             var
              e = kind[1],
              child_subcommand = e[5],
              path_to_exe = e[4],
              working_dir = e[3];
             return [2,
                     e,
                     function(_cn_){
                      return shape_of_exe
                              (_cn_, child_subcommand, path_to_exe, working_dir);
                     }];
            default:
             var l = kind[1];
             return [3, caml_call2(Base_Lazy[12], l, shape_of_proxy_kind)];
          }
         }
         function shape$2(t){
          var t$0 = t;
          for(;;)
           switch(t$0[0]){
             case 0:
              var b = t$0[1]; return [0, shape(b)];
             case 1:
              var g = t$0[1]; return [1, shape$0(shape$2, g)];
             case 2:
              var
               e = t$0[1],
               child_subcommand = e[5],
               path_to_exe = e[4],
               working_dir = e[3];
              return [2,
                      shape$1(e),
                      function(_ck_){
                       return shape_of_exe
                               (_ck_, child_subcommand, path_to_exe, working_dir);
                      }];
             default:
              var thunk = t$0[1], _cj_ = caml_obj_tag(thunk);
              a:
              if(250 === _cj_)
               var t$1 = thunk[1];
              else{
               if(246 !== _cj_ && 244 !== _cj_){var t$1 = thunk; break a;}
               var t$1 = caml_call1(CamlinternalLazy[2], thunk);
              }
              t$0 = t$1;
           }
         }
         function group_or_exec_help_text
         (flags, path, summary, readme, format_list){
          var
           _cf_ = [0, [0, caml_call1(Command_Shape[4][2], format_list)], 0],
           _cg_ = flags ? cst_subcommands_and_flags : cst_subcommands$0,
           _ch_ = [0, cst$18, [0, to_string(path), _aK_]],
           _ci_ =
             [0,
              [0, summary],
              [0,
               [0, caml_call2(Base_String[67], 0, _ch_)],
               [0, readme, [0, [0, _cg_], _cf_]]]];
          return unparagraphs(caml_call1(Base_List[133], _ci_));
         }
         function help_for_shape(shape, path, expand_dots, flags, recursive){
          var shape$0 = shape;
          for(;;){
           var
            loop =
              function(path, acc, shape){
               var shape$0 = shape;
               for(;;){
                var string_of_path = expand_dots ? to_string : to_string_dots;
                switch(shape$0[0]){
                  case 0:
                   var b = shape$0[1];
                   if(! flags) return acc;
                   var
                    _b8_ =
                      caml_call2
                       (Base_List[11],
                        b[4],
                        function(fmt){
                         return caml_call2(Base_String[50], fmt[1], cst_help$4);
                        });
                   return caml_call3
                           (Base_List[20],
                            _b8_,
                            acc,
                            function(acc, fmt){
                             var
                              subcommand = fmt[1],
                              path$0 = [0, subcommand, path],
                              _cd_ = fmt[3],
                              _ce_ = fmt[2],
                              fmt$0 = [0, string_of_path(path$0), _ce_, _cd_];
                             return [0, fmt$0, acc];
                            });
                  case 1:
                   var g = shape$0[1], _b9_ = g[3], _b__ = caml_obj_tag(_b9_);
                   a:
                   if(250 === _b__)
                    var subcommands = _b9_[1];
                   else{
                    if(246 !== _b__ && 244 !== _b__){
                     var subcommands = _b9_;
                     break a;
                    }
                    var subcommands = caml_call1(CamlinternalLazy[2], _b9_);
                   }
                   var
                    filtered_subcommands =
                      caml_call1(is_empty, path)
                       ? subcommands
                       : caml_call3
                         (Base_List[134][8],
                          subcommands,
                          Base_String[47],
                          cst_help$3),
                    _b7_ =
                      caml_call2
                       (Base_List[82],
                        filtered_subcommands,
                        function(a, b){
                         var _cc_ = caml_call1(Base[213], b);
                         return caml_call2
                                 (help_screen_compare, caml_call1(Base[213], a), _cc_);
                        });
                   return caml_call3
                           (Base_List[20],
                            _b7_,
                            acc,
                            function(acc, param){
                             var
                              shape = param[2],
                              subcommand = param[1],
                              path$0 = [0, subcommand, path],
                              name = string_of_path(path$0),
                              doc = caml_call1(Command_Shape[10], shape),
                              acc$0 = [0, [0, name, doc, 0], acc];
                             return recursive ? loop$0(path$0, acc$0, shape) : acc$0;
                            });
                  case 2:
                   var shape$1 = shape$0[2];
                   try{
                    var _b$_ = loop$0(path, acc, caml_call1(shape$1, 0));
                    return _b$_;
                   }
                   catch(_cb_){return acc;}
                  default:
                   var thunk = shape$0[1], _ca_ = caml_obj_tag(thunk);
                   a:
                   if(250 === _ca_)
                    var shape$2 = thunk[1];
                   else{
                    if(246 !== _ca_ && 244 !== _ca_){var shape$2 = thunk; break a;}
                    var shape$2 = caml_call1(CamlinternalLazy[2], thunk);
                   }
                   shape$0 = shape$2;
                }
               }
              };
           let loop$0 = loop;
           var
            _bZ_ = loop(empty$0, 0, shape$0),
            format_list = caml_call1(Base_List[61], _bZ_);
           switch(shape$0[0]){
             case 0:
              var
               b = shape$0[1],
               usage = caml_call1(Command_Shape[5][9], b),
               _b0_ =
                 [0, _aL_, [0, [0, caml_call1(Command_Shape[4][2], b[4])], 0]],
               _b1_ = [0, b[2], _b0_],
               _b2_ = caml_call2(Base[212], cst$19, usage),
               _b3_ = to_string(path),
               _b4_ = caml_call2(Base[212], _b3_, _b2_),
               _b5_ = [0, [0, caml_call2(Base[212], cst$20, _b4_)], _b1_];
              return unparagraphs
                      (caml_call1(Base_List[133], [0, [0, b[1]], _b5_]));
             case 1:
              var g = shape$0[1];
              return group_or_exec_help_text
                      (flags, path, g[1], g[2], format_list);
             case 2:
              var e = shape$0[1];
              return group_or_exec_help_text
                      (flags, path, e[1], e[2], format_list);
             default:
              var thunk = shape$0[1], _b6_ = caml_obj_tag(thunk);
              a:
              if(250 === _b6_)
               var shape$1 = thunk[1];
              else{
               if(246 !== _b6_ && 244 !== _b6_){var shape$1 = thunk; break a;}
               var shape$1 = caml_call1(CamlinternalLazy[2], thunk);
              }
              shape$0 = shape$1;
           }
          }
         }
         function add_help_subcommands(t){
          switch(t[0]){
            case 0:
             return t;
            case 1:
             var
              match = t[1],
              body = match[4],
              subcommands = match[3],
              readme = match[2],
              summary = match[1],
              subcommands$0 =
                caml_call2
                 (Base_Lazy[12],
                  subcommands,
                  function(subcommands){
                   var
                    _bQ_ = anon(maybe(symbol$2(cst_SUBCOMMAND, string$0))),
                    _bR_ =
                      caml_call1
                       (flag(0, 0, cst_expand_dots)(no_arg),
                        cst_expand_subcommands_in_recu),
                    _bS_ =
                      caml_call1
                       (flag(0, 0, cst_flags)(no_arg),
                        cst_show_flags_as_well_in_recu),
                    _bT_ =
                      caml_call1
                       (flag(0, 0, cst_recursive)(no_arg),
                        cst_show_subcommands_of_subcom),
                    _bU_ =
                      basic
                       (cst_explain_a_given_subcommand,
                        0,
                        caml_call2
                         (symbol$3,
                          caml_call2
                           (symbol$3,
                            caml_call2
                             (symbol$3,
                              caml_call2
                               (symbol$3,
                                caml_call2
                                 (symbol$3,
                                  caml_call2
                                   (symbol$3,
                                    caml_call1
                                     (return$4,
                                      function
                                      (recursive, flags, expand_dots, path$0, env, cmd_opt, param){
                                       var match = caml_call2(find, env, subs_key);
                                       if(! match)
                                        throw caml_maybe_attach_backtrace
                                               ([0, Assert_failure, _aN_], 1);
                                       var subs = match[1];
                                       if(path$0 && path$0[1] === cst_help$7){
                                        var
                                         path = path$0[2],
                                         path$1 =
                                           caml_call3
                                            (Base_Option[32],
                                             cmd_opt,
                                             path,
                                             function(path, subcommand){return [0, subcommand, path];});
                                        if(cmd_opt){
                                         var
                                          cmd = cmd_opt[1],
                                          match$0 =
                                            caml_call3
                                             (lookup_expand,
                                              caml_call2
                                               (Base_List[134][9],
                                                subs,
                                                function(x){return [0, x, -481604174];}),
                                              cmd,
                                              0);
                                         if(0 === match$0[0])
                                          var
                                           match$1 = match$0[1],
                                           t = match$1[2],
                                           possibly_expanded_name = match$1[1],
                                           path$2 = replace_first(path$1, cmd, possibly_expanded_name),
                                           shape = shape$2(t),
                                           path$3 = path$2;
                                         else
                                          var
                                           e = match$0[1],
                                           _bW_ = to_string(path$1),
                                           _bX_ = caml_call4(die(_aM_), cmd, _bW_, e, 0),
                                           shape = _bX_[2],
                                           path$3 = _bX_[1];
                                        }
                                        else
                                         var
                                          _bY_ = caml_call2(Base_List[134][9], subs, shape$2),
                                          subcommands = caml_call1(Base_Lazy[21], _bY_),
                                          readme$0 =
                                            caml_call2
                                             (Base_Option[22],
                                              readme,
                                              function(readme){return caml_call1(readme, 0);}),
                                          shape$0 = [1, [0, summary, readme$0, subcommands]],
                                          shape = shape$0,
                                          path$3 = path$1;
                                        var
                                         _bV_ =
                                           help_for_shape(shape, path$3, expand_dots, flags, recursive);
                                        return caml_call1(Command_Import[5], _bV_);
                                       }
                                       throw caml_maybe_attach_backtrace
                                              ([0, Assert_failure, _D_], 1);
                                      }),
                                    _bT_),
                                  _bS_),
                                _bR_),
                              path),
                            env),
                          _bQ_));
                   return extend_alist_exn
                           (caml_call2
                             (Base_List[134][9], subcommands, add_help_subcommands),
                            0,
                            cst_help$5,
                            _bU_);
                  });
             return [1, [0, summary, readme, subcommands$0, body]];
            case 2:
             return t;
            default:
             var thunk = t[1];
             return [3,
                     [246,
                      function(_bN_){
                       var _bO_ = caml_obj_tag(thunk);
                       a:
                       if(250 === _bO_)
                        var _bP_ = thunk[1];
                       else{
                        if(246 !== _bO_ && 244 !== _bO_){var _bP_ = thunk; break a;}
                        var _bP_ = caml_call1(CamlinternalLazy[2], thunk);
                       }
                       return add_help_subcommands(_bP_);
                      }]];
          }
         }
         function maybe_apply_extend(args, extend$0, path){
          return caml_call3
                  (Base_Option[30],
                   extend$0,
                   args,
                   function(f){return extend(args, f, path);});
         }
         function dispatch
         (t,
          env$0,
          extend,
          path,
          args$0,
          maybe_new_comp_cword,
          version,
          build_info,
          verbose_on_parse_error,
          when_parsing_succeeds,
          complete_subcommands){
          var t$0 = t;
          for(;;)
           switch(t$0[0]){
             case 0:
              var
               base = t$0[1],
               args$1 = maybe_apply_extend(args$0, extend, path),
               help_text =
                 [246,
                  function(param){
                   return help_for_shape(shape$2(t$0), path, 0, 1, 0);
                  }];
              return run
                      (base,
                       env$0,
                       when_parsing_succeeds,
                       path,
                       args$1,
                       verbose_on_parse_error,
                       help_text,
                       run_exn);
             case 1:
              var
               group = t$0[1],
               body = group[4],
               subs = group[3],
               readme = group[2],
               summary = group[1],
               completing = ends_in_complete(args$0),
               _bu_ = caml_obj_tag(subs);
              a:
              if(250 === _bu_)
               var _bv_ = subs[1];
              else{
               if(246 !== _bu_ && 244 !== _bu_){var _bv_ = subs; break a;}
               var _bv_ = caml_call1(CamlinternalLazy[2], subs);
              }
              var
               env$1 = caml_call3(set, env$0, subs_key, _bv_),
               die_showing_help =
                 function(msg){
                  if(completing) return exit(0);
                  var
                   _bM_ =
                     help_for_shape
                      (shape$2([1, [0, summary, readme, subs, body]]),
                       path,
                       0,
                       0,
                       0);
                  caml_call2(Command_Import[1], _aS_, _bM_);
                  return caml_call2(die(_aT_), msg, 0);
                 };
              a:
              {
               var
                args$2 = args$0,
                maybe_new_comp_cword$0 = maybe_new_comp_cword;
               for(;;){
                var
                 maybe_new_comp_cword$1 =
                   caml_call2
                    (Base_Option[22], maybe_new_comp_cword$0, Base_Int[43]);
                let maybe_new_comp_cword = maybe_new_comp_cword$1;
                var
                 resolve =
                   function(sub, rest){
                    var _bK_ = caml_obj_tag(subs);
                    a:
                    {
                     var _bJ_ = function(x){return [0, x, -481604174];};
                     if(250 === _bK_)
                      var _bL_ = subs[1];
                     else{
                      if(246 !== _bK_ && 244 !== _bK_){var _bL_ = subs; break a;}
                      var _bL_ = caml_call1(CamlinternalLazy[2], subs);
                     }
                    }
                    var
                     subs$0 = caml_call2(Base_List[134][9], _bL_, _bJ_),
                     match = caml_call3(lookup_expand, subs$0, sub, 0);
                    if(0 === match[0]){
                     var
                      match$0 = match[1],
                      t = match$0[2],
                      subcommand = match$0[1];
                     return dispatch
                             (t,
                              env$1,
                              extend,
                              [0, subcommand, path],
                              rest,
                              maybe_new_comp_cword,
                              version,
                              build_info,
                              verbose_on_parse_error,
                              when_parsing_succeeds,
                              complete_subcommands);
                    }
                    var msg = match[1];
                    return die_showing_help(msg);
                   };
                if(typeof args$2 === "number"){
                 if(body){
                  var body$0 = body[1];
                  return caml_call1(body$0, parts_exe_basename(path));
                 }
                 var _bw_ = to_string(path);
                 return die_showing_help
                         (caml_call2(Command_Import[7], _aU_, _bw_));
                }
                if(0 !== args$2[0]) break;
                var rest = args$2[2], sub = args$2[1];
                b:
                {
                 c:
                 if(sub !== cst_build_info$1){
                  d:
                  if(sub !== cst_help$9){
                   if(sub !== cst_version$2){
                    if(sub === cst_build_info$2) break c;
                    if(sub === cst_help$8) break d;
                    if(sub !== cst_version$3) break b;
                   }
                   if(1 !== caml_call1(length, path)) break b;
                   if(completing){
                    args$2 = rest;
                    maybe_new_comp_cword$0 = maybe_new_comp_cword$1;
                    continue;
                   }
                   Version_info$0[1].call(null, version);
                   return exit(0);
                  }
                  if(! completing) break a;
                  args$2 = rest;
                  maybe_new_comp_cword$0 = maybe_new_comp_cword$1;
                  continue;
                 }
                 if(1 === caml_call1(length, path)){
                  if(completing){
                   args$2 = rest;
                   maybe_new_comp_cword$0 = maybe_new_comp_cword$1;
                   continue;
                  }
                  Version_info$0[2].call(null, build_info);
                  return exit(0);
                 }
                }
                return resolve(sub, rest);
               }
               var
                part = args$2[1],
                _by_ = Base_String[51],
                _bA_ = Base[213],
                _bB_ = caml_obj_tag(subs);
               b:
               {
                var
                 _bz_ =
                   function(name){
                    return caml_call2(Base_String[94], name, part);
                   };
                if(250 === _bB_)
                 var _bC_ = subs[1];
                else{
                 if(246 !== _bB_ && 244 !== _bB_){var _bC_ = subs; break b;}
                 var _bC_ = caml_call1(CamlinternalLazy[2], subs);
                }
               }
               var
                _bD_ = caml_call2(Base_List[52], _bC_, _bA_),
                _bE_ = caml_call2(Base_List[11], _bD_, _bz_),
                subs$0 = caml_call2(Base_List[81], _bE_, _by_);
               if(! complete_subcommands){
                caml_call2(Base_List[19], subs$0, Command_Import[5]);
                return exit(0);
               }
               var
                f = complete_subcommands[1],
                _bF_ = shape$2(t$0),
                _bG_ = caml_call1(Command_Shape[9], _bF_),
                subcommands = caml_call1(Command_Shape[8][3], _bG_),
                match =
                  caml_call3(f, caml_call1(parts, path), part, subcommands);
               if(! match) return exit(1);
               var
                to_output = match[1],
                _bH_ = caml_call2(Base_String[67], _aV_, to_output);
               caml_call1(Command_Import[5], _bH_);
               return exit(0);
              }
              if(typeof rest !== "number" && 0 === rest[0]){
               var rest_of_rest = rest[2], first_of_rest = rest[1];
               return resolve(first_of_rest, [0, sub, rest_of_rest]);
              }
              var
               _bx_ =
                 help_for_shape
                  (shape$2([1, [0, group[1], group[2], subs, group[4]]]),
                   path,
                   0,
                   0,
                   0);
              caml_call1(Command_Import[5], _bx_);
              return exit(0);
             case 2:
              var
               exec = t$0[1],
               args$3 = to_list(maybe_apply_extend(args$0, extend, path)),
               prog = caml_call2(abs_path, exec[3], exec[4]),
               args = caml_call2(Base[193], exec[5], args$3),
               env = exec[6];
              caml_call2
               (Base_Option[35],
                maybe_new_comp_cword,
                function(n){
                 var
                  new_value$0 = n + caml_call1(Base_List[17], exec[5]) | 0,
                  new_value = caml_call1(Base_Int[12], new_value$0);
                 return caml_call2
                         (_aW_,
                          caml_call1(Command_Env_var[4], comp_cword),
                          new_value);
                });
              var
               _bt_ =
                 caml_call5
                  (For_unix_with_string_env_var[5][8],
                   prog,
                   [0, prog, args],
                   0,
                   env,
                   0);
              return caml_call1(Base_Nothing[3], _bt_);
             default:
              var thunk = t$0[1], _bI_ = caml_obj_tag(thunk);
              a:
              if(250 === _bI_)
               var t$1 = thunk[1];
              else{
               if(246 !== _bI_ && 244 !== _bI_){var t$1 = thunk; break a;}
               var t$1 = caml_call1(CamlinternalLazy[2], thunk);
              }
              t$0 = t$1;
           }
         }
         function run$0
         (verbose_on_parse_error,
          version,
          build_info,
          _a3_,
          extend,
          opt,
          complete_subcommands,
          t){
          if(_a3_)
           var argv = _a3_[1];
          else
           var
            _a4_ = caml_sys_argv(0),
            argv = caml_call1(Base_Array[29], _a4_);
          var
           when_parsing_succeeds = opt ? opt[1] : function(_bs_){return _bs_;};
          if(build_info)
           var v = build_info[1], build_info$0 = v;
          else
           var build_info$0 = Version_info$0[7];
          if(version)
           var
            v$0 = version[1],
            version$0 =
              [246,
               function(param){
                var
                 _bo_ = Base_String[99],
                 _bp_ = caml_call2(Base_String[99], v$0, 32),
                 _bq_ =
                   caml_call2
                    (Base_List[13],
                     _bp_,
                     function(_br_){return caml_call2(_bo_, _br_, 10);});
                return Version_info$0[5].call(null, _bq_);
               }];
          else
           var version$0 = Version_info$0[6];
          function f(param){
           var
            t$0 = Version_info$0[4].call(null, version$0, build_info$0, t),
            t$1 = add_help_subcommands(t$0);
           if(argv){
            var
             path_to_subcommand = argv[2],
             cmd = argv[1],
             _a7_ = getenv_and_clear(1);
            caml_call2
             (Base_Option[35],
              _a7_,
              function(version){
               var
                _bn_ = caml_call1(Sexplib_Sexp[43], version),
                supported_versions$0 =
                  caml_call2
                   (Base_Set[69], [0, Base_Int[9], Base_Int[22]], _bn_),
                _bg_ =
                  caml_call2
                   (Base_Set[14], supported_versions, supported_versions$0),
                param = caml_call1(Base_Set[54], _bg_);
               if(param){
                var
                 version_to_use = param[1],
                 t$4 = sexpable_shape(t$1),
                 t = t$4,
                 path_to_subcommand$0 = path_to_subcommand;
                for(;;){
                 if(path_to_subcommand$0){
                  var
                   path_to_subcommand$1 = path_to_subcommand$0[2],
                   sub = path_to_subcommand$0[1];
                  switch(t[0]){
                    case 0:
                     var _bh_ = caml_call3(Command_Import[8], _aI_, sub, 0);
                     break;
                    case 1:
                     var
                      g = t[1],
                      _bc_ = g[3],
                      _bb_ = Base_String[131],
                      _bd_ = caml_obj_tag(_bc_);
                     a:
                     if(250 === _bd_)
                      var _be_ = _bc_[1];
                     else{
                      if(246 !== _bd_ && 244 !== _bd_){var _be_ = _bc_; break a;}
                      var _be_ = caml_call1(CamlinternalLazy[2], _bc_);
                     }
                     var match = caml_call3(Base_List[134][5], _be_, _bb_, sub);
                     if(match){
                      var t$0 = match[1];
                      t = t$0;
                      path_to_subcommand$0 = path_to_subcommand$1;
                      continue;
                     }
                     var _bh_ = caml_call3(Command_Import[8], _aJ_, sub, 0);
                     break;
                    case 2:
                     var
                      match$0 = t[1],
                      child_subcommand = match$0[5],
                      path_to_exe = match$0[4],
                      working_dir = match$0[3],
                      path_to_subcommand$2 =
                        [0,
                         sub,
                         caml_call2
                          (Base[193], path_to_subcommand$1, child_subcommand)],
                      t$2 =
                        of_external(working_dir, path_to_exe, child_subcommand);
                     t = t$2;
                     path_to_subcommand$0 = path_to_subcommand$2;
                     continue;
                    default:
                     var thunk = t[1], _bf_ = caml_obj_tag(thunk);
                     a:
                     if(250 === _bf_)
                      var t$3 = thunk[1];
                     else{
                      if(246 !== _bf_ && 244 !== _bf_){var t$3 = thunk; break a;}
                      var t$3 = caml_call1(CamlinternalLazy[2], thunk);
                     }
                     t = t$3;
                     continue;
                  }
                 }
                 else
                  var _bh_ = t;
                 var
                  _bi_ = caml_call2(to_versioned, _bh_, version_to_use),
                  _bj_ = caml_call1(Versioned[2], _bi_),
                  _bk_ = caml_call1(Base[85][15], _bj_);
                 caml_call1(Command_Import[4], _bk_);
                 break;
                }
               }
               else{
                var
                 _bl_ = caml_call1(Base_Set[68], [0, Base_Int[10]]),
                 _bm_ =
                   caml_call5
                    (Base_Error[17],
                     _aQ_,
                     0,
                     cst_Couldn_t_choose_a_supporte,
                     supported_versions,
                     _bl_);
                caml_call1(Base_Error[29], _bm_);
               }
               return exit(0);
              });
            var _a8_ = getenv_and_clear(0);
            caml_call2
             (Base_Option[35],
              _a8_,
              function(param){
               var
                _a$_ = caml_call1(getpid, 0),
                _ba_ = caml_call1(Pid[1], _a$_),
                fname = caml_call2(Command_Import[7], _aO_, _ba_),
                argv_0 = caml_check_bound(caml_sys_argv(0), 0)[1];
               caml_call5
                (Command_Import[2], _aP_, fname, argv_0, fname, argv_0);
               return exit(0);
              });
            var match = [0, cmd, path_to_subcommand];
           }
           else
            var match = caml_call1(Base[215], cst_missing_executable_name);
           var
            args$1 = match[2],
            cmd$0 = match[1],
            _a5_ = Base_Int[11],
            _a6_ = getenv_and_clear(comp_cword),
            maybe_new_comp_cword = caml_call2(Base_Option[22], _a6_, _a5_);
           if(maybe_new_comp_cword)
            var
             comp_cword$0 = maybe_new_comp_cword[1],
             _a9_ = caml_call2(Base[193], args$1, _aR_),
             args = caml_call2(Base_List[136], _a9_, comp_cword$0),
             args$0 =
               caml_call3
                (Base_List[103],
                 args,
                 function(arg, args){
                  return typeof args === "number" ? [1, arg] : [0, arg, args];
                 },
                 0);
           else
            var args$0 = of_list(args$1);
           var path = create$1(cmd$0);
           try{
            var
             _a__ =
               dispatch
                (t$1,
                 empty,
                 extend,
                 path,
                 args$0,
                 maybe_new_comp_cword,
                 version$0,
                 build_info$0,
                 verbose_on_parse_error,
                 when_parsing_succeeds,
                 complete_subcommands);
            return _a__;
           }
           catch(exn$0){
            var exn = caml_wrap_exception(exn$0);
            if(exn[1] !== Failed_to_parse_command_line)
             throw caml_maybe_attach_backtrace(exn, 0);
            var msg = exn[2];
            return ends_in_complete(args$0)
                    ? exit(0)
                    : (caml_call1(Command_Import[6], msg), exit(1));
           }
          }
          if(! raise_instead_of_exit) return caml_call1(Base_Exn[15], f);
          try{var _a2_ = f(0); return _a2_;}
          catch(exn$0){
           var exn = caml_wrap_exception(exn$0);
           if(exn[1] === Exit_called && 0 === exn[2]){
            var _a1_ = caml_call1(Base[110], exn);
            return caml_call2(Command_Import[3], 0, _a1_);
           }
           throw caml_maybe_attach_backtrace(exn, 0);
          }
         }
         function deprecated_run
         (t,
          cmd,
          args,
          is_help,
          is_help_rec,
          is_help_rec_flags,
          is_expand_dots){
          var
           path_strings = caml_call2(Base_String[99], cmd, 32),
           path = caml_call1(Base_List[61], path_strings),
           args$0 = is_expand_dots ? [0, cst_expand_dots$0, args] : args,
           args$1 = is_help_rec_flags ? [0, cst_flags$0, args$0] : args$0,
           args$2 = is_help_rec ? [0, cst_r, args$1] : args$1,
           args$3 = is_help ? [0, cst_help$6, args$2] : args$2,
           args$4 = of_list(args$3),
           t$0 = add_help_subcommands(t);
          return dispatch
                  (t$0,
                   empty,
                   0,
                   path,
                   args$4,
                   0,
                   Version_info$0[6],
                   Version_info$0[7],
                   0,
                   function(_a0_){return _a0_;},
                   0);
         }
         return [0, shape$2, help_for_shape, run$0, deprecated_run];
        }]];
   runtime.caml_register_global(299, Command, cst_Command$0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
