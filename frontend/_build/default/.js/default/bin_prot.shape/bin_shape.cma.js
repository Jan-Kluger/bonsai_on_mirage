// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Bin_shape
//# unitInfo: Requires: Base, Base__Comparator, Base__Int, Base__List, Base__Map, Base__Option, Base__Printf, Base__String, Md5_lib, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Annotate = "Annotate",
    cst_Base = "Base",
    cst_Constr = "Constr",
    cst_Inherit = "Inherit",
    cst_Poly_variant = "Poly_variant",
    cst_Rec_app = "Rec_app",
    cst_Record = "Record",
    cst_Top_app = "Top_app",
    cst_Tuple = "Tuple",
    cst_Var = "Var",
    cst_Variant = "Variant",
    cst_annotate$0 = "annotate",
    cst_base$0 = "base",
    cst_gid$0 = "gid",
    cst_loc$0 = "loc",
    cst_members$0 = "members",
    cst_poly_variant$0 = "poly_variant",
    cst_rec_app$0 = "rec_app",
    cst_record$0 = "record",
    cst_shape_src_bin_shape_ml_Exp =
      "shape/src/bin_shape.ml.Expression.poly_constr",
    cst_top_app = "top_app",
    cst_tuple$0 = "tuple",
    cst_var$0 = "var",
    cst_variant$0 = "variant",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare,
    caml_update_dummy = runtime.caml_update_dummy,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    error_source_194 = "shape/src/bin_shape.ml.Canonical_full.Exp1.t0",
    error_source_263 = cst_shape_src_bin_shape_ml_Exp,
    error_source_275 = cst_shape_src_bin_shape_ml_Exp,
    error_source_317 = "shape/src/bin_shape.ml.Expression.Group.t",
    error_source_414 = "shape/src/bin_shape.ml.Expression.Stable.V1.t",
    Assert_failure = global_data.Assert_failure,
    Base_List = global_data.Base__List,
    Base = global_data.Base,
    Base_Option = global_data.Base__Option,
    Base_Map = global_data.Base__Map,
    Base_Comparator = global_data.Base__Comparator,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Base_String = global_data.Base__String,
    Base_Int = global_data.Base__Int,
    Base_Printf = global_data.Base__Printf,
    Md5_lib = global_data.Md5_lib,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    t_of_sexp = Base_String[41],
    sexp_of_t = Base_String[42],
    of_string = Base_String[43],
    to_string = Base_String[44],
    equal = Base_String[131],
    t_of_sexp$0 = Base_String[41],
    sexp_of_t$0 = Base_String[42],
    of_string$0 = Base_String[43],
    to_string$0 = Base_String[44],
    compare = Base_String[51],
    equal$0 = Base_String[131],
    cst_Location_s = "%{Location}: %s",
    _a_ = [11, ": ", [2, 0, 0]],
    _b_ = [0, 0],
    _c_ = [0, "sorted"],
    _d_ = [0, 17724, 0],
    _e_ =
      [0,
       [11,
        "Different shapes for duplicated polymorphic constructor: `",
        [2, 0, 0]],
       "Different shapes for duplicated polymorphic constructor: `%s"];
   function eval_fail(loc, fmt){
    return caml_call2
            (Base_Printf[4],
             function(s){
              var
               _ec_ =
                 caml_call3
                  (Base_Printf[2],
                   [0,
                    [24,
                     _b_,
                     function(param, custom_printf_001){
                      return caml_call1(to_string, custom_printf_001);
                     },
                     _a_],
                    cst_Location_s],
                   loc,
                   s);
              return caml_call1(Base[215], _ec_);
             },
             fmt);
   }
   function equal_option(equal, a, b){
    if(a){
     if(b){var y = b[1], x = a[1]; return caml_call2(equal, x, y);}
    }
    else if(! b) return 1;
    return 0;
   }
   function compare$0(cmp_a, a_002, b_003){
    return a_002 === b_003
            ? 0
            : caml_call3
              (Base[143],
               function(a_004, b_005){
                var
                 t_007 = a_004[2],
                 t_006 = a_004[1],
                 t_009 = b_005[2],
                 t_008 = b_005[1],
                 n = caml_call2(Base[171], t_006, t_008);
                return 0 === n ? caml_call2(cmp_a, t_007, t_009) : n;
               },
               a_002[1],
               b_003[1]);
   }
   function sexp_of_t$1(of_a_019, param){
    var
     sorted_021 = param[1],
     arg_022 =
       caml_call2
        (Base[148],
         function(param){
          var
           arg1_024 = param[2],
           arg0_023 = param[1],
           res0_025 = caml_call1(Base[177], arg0_023),
           res1_026 = caml_call1(of_a_019, arg1_024);
          return [1, [0, res0_025, [0, res1_026, 0]]];
         },
         sorted_021),
     bnds_020 = [0, [1, [0, _c_, [0, arg_022, 0]]], 0];
    return [1, bnds_020];
   }
   function create(loc, eq, xs$1){
    var
     sorted =
       caml_call2
        (Base_List[81],
         xs$1,
         function(_eb_, param){
          var s2 = param[1], s1 = _eb_[1];
          return caml_call2(Base_String[51], s1, s2);
         });
    if(sorted){
     var
      xs$0 = sorted[2],
      match$0 = sorted[1],
      last_value$1 = match$0[2],
      last_key$1 = match$0[1],
      acc$1 = [0, [0, last_key$1, last_value$1], 0],
      acc = acc$1,
      last_key = last_key$1,
      last_value = last_value$1,
      param = xs$0;
     for(;;){
      if(! param){
       var match$1 = [0, 17724, caml_call1(Base_List[61], acc)];
       break;
      }
      var
       xs = param[2],
       match = param[1],
       last_value$0 = match[2],
       last_key$0 = match[1];
      if(caml_call2(Base_String[47], last_key, last_key$0)){
       if(! caml_call2(eq, last_value, last_value$0)){
        var match$1 = [0, -1062743954, last_key$0];
        break;
       }
       param = xs;
      }
      else{
       var acc$0 = [0, [0, last_key$0, last_value$0], acc];
       acc = acc$0;
       last_key = last_key$0;
       last_value = last_value$0;
       param = xs;
      }
     }
    }
    else
     var match$1 = _d_;
    if(17724 <= match$1[1]){var sorted$0 = match$1[2]; return [0, sorted$0];}
    var s = match$1[2];
    return caml_call2(eval_fail(loc, _e_), s, 0);
   }
   function expose(t){return t[1];}
   function map(t, f){
    return [0,
            caml_call2
             (Base_List[52],
              t[1],
              function(param){
               var v = param[2], k = param[1];
               return [0, k, caml_call1(f, v)];
              })];
   }
   var
    compare$1 = Md5_lib[1],
    to_binary = Md5_lib[3],
    to_hex = Md5_lib[6],
    of_hex_exn = Md5_lib[7],
    string = Md5_lib[8],
    _f_ = [0, ""],
    cst_some = "some",
    cst_none = "none",
    _g_ = [0, cst_Annotate],
    _h_ = [0, cst_Base],
    _i_ = [0, cst_Tuple],
    _j_ = [0, cst_Record],
    _k_ = [0, cst_Variant],
    _l_ = [0, cst_Poly_variant],
    _m_ = [0, "Application"],
    _n_ = [0, cst_Rec_app],
    _o_ = [0, cst_Var],
    _p_ = [0, "..."],
    cst_annotate = cst_annotate$0,
    cst_base = cst_base$0,
    cst_tuple = cst_tuple$0,
    cst_record = cst_record$0,
    cst_variant = cst_variant$0,
    cst_poly_variant = cst_poly_variant$0,
    cst_application = "application",
    cst_rec_app = cst_rec_app$0,
    cst_var = cst_var$0;
   function to_md5(t){return t;}
   function of_md5(t){return t;}
   function sexp_of_t$2(t){
    var _ea_ = caml_call1(to_hex, t);
    return caml_call1(Base[177], _ea_);
   }
   function t_of_sexp$1(s){
    return caml_call1(of_hex_exn, caml_call1(Base[176], s));
   }
   function uuid(u){return caml_call1(string, caml_call1(to_string$0, u));}
   function int$0(x){return caml_call1(string, caml_call1(Base_Int[12], x));}
   function pair(x, y){
    var _d__ = caml_call1(to_binary, y), _d$_ = caml_call1(to_binary, x);
    return caml_call1(string, caml_call2(Base[212], _d$_, _d__));
   }
   function list(l){
    var _d9_ = caml_call2(Base_List[52], l, to_binary);
    return caml_call1(string, caml_call2(Base_String[67], _f_, _d9_));
   }
   function constructor(s, l){
    var _d8_ = caml_call1(to_binary, list(l));
    return caml_call1(string, caml_call2(Base[212], s, _d8_));
   }
   function sexp_of_t$3(of_a_096, param){
    switch(param[0]){
      case 0:
       var
        arg1_098 = param[2],
        arg0_097 = param[1],
        res0_099 = caml_call1(sexp_of_t$0, arg0_097),
        res1_100 = caml_call1(of_a_096, arg1_098);
       return [1, [0, _g_, [0, res0_099, [0, res1_100, 0]]]];
      case 1:
       var
        arg1_102 = param[2],
        arg0_101 = param[1],
        res0_103 = caml_call1(sexp_of_t$0, arg0_101),
        res1_104 = caml_call2(Base[148], of_a_096, arg1_102);
       return [1, [0, _h_, [0, res0_103, [0, res1_104, 0]]]];
      case 2:
       var
        arg0_105 = param[1],
        res0_106 = caml_call2(Base[148], of_a_096, arg0_105);
       return [1, [0, _i_, [0, res0_106, 0]]];
      case 3:
       var
        arg0_111 = param[1],
        res0_112 =
          caml_call2
           (Base[148],
            function(param){
             var
              arg1_108 = param[2],
              arg0_107 = param[1],
              res0_109 = caml_call1(Base[177], arg0_107),
              res1_110 = caml_call1(of_a_096, arg1_108);
             return [1, [0, res0_109, [0, res1_110, 0]]];
            },
            arg0_111);
       return [1, [0, _j_, [0, res0_112, 0]]];
      case 4:
       var
        arg0_117 = param[1],
        res0_118 =
          caml_call2
           (Base[148],
            function(param){
             var
              arg1_114 = param[2],
              arg0_113 = param[1],
              res0_115 = caml_call1(Base[177], arg0_113),
              res1_116 = caml_call2(Base[148], of_a_096, arg1_114);
             return [1, [0, res0_115, [0, res1_116, 0]]];
            },
            arg0_117);
       return [1, [0, _k_, [0, res0_118, 0]]];
      case 5:
       var
        arg0_119 = param[1],
        res0_120 = sexp_of_t$1(caml_call1(Base[163], of_a_096), arg0_119);
       return [1, [0, _l_, [0, res0_120, 0]]];
      case 6:
       var
        arg1_122 = param[2],
        arg0_121 = param[1],
        res0_123 = caml_call1(of_a_096, arg0_121),
        res1_124 = caml_call2(Base[148], of_a_096, arg1_122);
       return [1, [0, _m_, [0, res0_123, [0, res1_124, 0]]]];
      case 7:
       var
        arg1_126 = param[2],
        arg0_125 = param[1],
        res0_127 = caml_call1(Base[125], arg0_125),
        res1_128 = caml_call2(Base[148], of_a_096, arg1_126);
       return [1, [0, _n_, [0, res0_127, [0, res1_128, 0]]]];
      default:
       var arg0_129 = param[1], res0_130 = caml_call1(Base[125], arg0_129);
       return [1, [0, _o_, [0, res0_130, 0]]];
    }
   }
   function compare$2(cmp_a, a_132, b_133){
    if(a_132 === b_133) return 0;
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          switch(a_132[0]){
            case 0:
             var a_134 = a_132[1];
             if(0 !== b_133[0]) return -1;
             var
              b_137 = b_133[2],
              b_135 = b_133[1],
              a_136 = a_132[2],
              n = caml_call2(compare, a_134, b_135);
             return 0 === n ? caml_call2(cmp_a, a_136, b_137) : n;
            case 1:
             var a_140 = a_132[2], a_138 = a_132[1];
             switch(b_133[0]){
               case 0:
                break a;
               case 1:
                var
                 b_141 = b_133[2],
                 b_139 = b_133[1],
                 n$0 = caml_call2(compare, a_138, b_139);
                return 0 === n$0
                        ? caml_call3
                          (Base[143],
                           function(a_142, b_143){
                            return caml_call2(cmp_a, a_142, b_143);
                           },
                           a_140,
                           b_141)
                        : n$0;
               default: return -1;
             }
            case 2:
             var a_144 = a_132[1];
             switch(b_133[0]){
               case 0:
                break a;
               case 1:
                break b;
               case 2:
                var b_145 = b_133[1];
                return caml_call3
                        (Base[143],
                         function(a_146, b_147){
                          return caml_call2(cmp_a, a_146, b_147);
                         },
                         a_144,
                         b_145);
               default: return -1;
             }
            case 3:
             var a_148 = a_132[1];
             switch(b_133[0]){
               case 0:
                break a;
               case 1:
                break b;
               case 2:
                break c;
               case 3:
                var b_149 = b_133[1];
                return caml_call3
                        (Base[143],
                         function(a_150, b_151){
                          var
                           t_153 = a_150[2],
                           t_152 = a_150[1],
                           t_155 = b_151[2],
                           t_154 = b_151[1],
                           n = caml_call2(Base[171], t_152, t_154);
                          return 0 === n ? caml_call2(cmp_a, t_153, t_155) : n;
                         },
                         a_148,
                         b_149);
               default: return -1;
             }
            case 4:
             var a_156 = a_132[1];
             switch(b_133[0]){
               case 0:
                break a;
               case 1:
                break b;
               case 2:
                break c;
               case 3:
                break d;
               case 4:
                var b_157 = b_133[1];
                return caml_call3
                        (Base[143],
                         function(a_158, b_159){
                          var
                           t_161 = a_158[2],
                           t_160 = a_158[1],
                           t_163 = b_159[2],
                           t_162 = b_159[1],
                           n = caml_call2(Base[171], t_160, t_162);
                          return 0 === n
                                  ? caml_call3
                                    (Base[143],
                                     function(a_164, b_165){
                                      return caml_call2(cmp_a, a_164, b_165);
                                     },
                                     t_161,
                                     t_163)
                                  : n;
                         },
                         a_156,
                         b_157);
               default: return -1;
             }
            case 5:
             var a_166 = a_132[1];
             switch(b_133[0]){
               case 0:
                break a;
               case 1:
                break b;
               case 2:
                break c;
               case 3:
                break d;
               case 4:
                break e;
               case 5:
                var b_167 = b_133[1];
                return compare$0
                        (function(a_168, b_169){
                          return caml_call3
                                  (Base[158],
                                   function(a_170, b_171){
                                    return caml_call2(cmp_a, a_170, b_171);
                                   },
                                   a_168,
                                   b_169);
                         },
                         a_166,
                         b_167);
               default: return -1;
             }
            case 6:
             var a_174 = a_132[2], a_172 = a_132[1];
             switch(b_133[0]){
               case 0:
                break a;
               case 1:
                break b;
               case 2:
                break c;
               case 3:
                break d;
               case 4:
                break e;
               case 5:
                break f;
               case 6:
                var
                 b_175 = b_133[2],
                 b_173 = b_133[1],
                 n$1 = caml_call2(cmp_a, a_172, b_173);
                return 0 === n$1
                        ? caml_call3
                          (Base[143],
                           function(a_176, b_177){
                            return caml_call2(cmp_a, a_176, b_177);
                           },
                           a_174,
                           b_175)
                        : n$1;
               default: return -1;
             }
            case 7:
             var a_180 = a_132[2], a_178 = a_132[1];
             switch(b_133[0]){
               case 0:
                break a;
               case 1:
                break b;
               case 2:
                break c;
               case 3:
                break d;
               case 4:
                break e;
               case 5:
                break f;
               case 6: break;
               case 7:
                var
                 b_181 = b_133[2],
                 b_179 = b_133[1],
                 n$2 = caml_call2(Base[119], a_178, b_179);
                return 0 === n$2
                        ? caml_call3
                          (Base[143],
                           function(a_182, b_183){
                            return caml_call2(cmp_a, a_182, b_183);
                           },
                           a_180,
                           b_181)
                        : n$2;
               default: return -1;
             }
             break;
            default:
             var a_184 = a_132[1];
             switch(b_133[0]){
               case 0:
                break a;
               case 1:
                break b;
               case 2:
                break c;
               case 3:
                break d;
               case 4:
                break e;
               case 5:
                break f;
               case 6: break;
               case 7:
                return 1;
               default:
                var b_185 = b_133[1];
                return caml_call2(Base[119], a_184, b_185);
             }
          }
          return 1;
         }
         return 1;
        }
        return 1;
       }
       return 1;
      }
      return 1;
     }
     return 1;
    }
    return 1;
   }
   function map$0(x, f){
    switch(x[0]){
      case 0:
       var x$0 = x[2], u = x[1]; return [0, u, caml_call1(f, x$0)];
      case 1:
       var xs = x[2], s = x[1];
       return [1, s, caml_call2(Base_List[52], xs, f)];
      case 2:
       var xs$0 = x[1]; return [2, caml_call2(Base_List[52], xs$0, f)];
      case 3:
       var l = x[1];
       return [3,
               caml_call2
                (Base_List[52],
                 l,
                 function(param){
                  var x = param[2], s = param[1];
                  return [0, s, caml_call1(f, x)];
                 })];
      case 4:
       var l$0 = x[1];
       return [4,
               caml_call2
                (Base_List[52],
                 l$0,
                 function(param){
                  var xs = param[2], s = param[1];
                  return [0, s, caml_call2(Base_List[52], xs, f)];
                 })];
      case 5:
       var t = x[1], _d5_ = Base_Option[22];
       return [5, map(t, function(_d7_){return caml_call2(_d5_, _d7_, f);})];
      case 6:
       var l$1 = x[2], x$1 = x[1], _d6_ = caml_call2(Base_List[52], l$1, f);
       return [6, caml_call1(f, x$1), _d6_];
      case 7:
       var l$2 = x[2], t$0 = x[1];
       return [7, t$0, caml_call2(Base_List[52], l$2, f)];
      default: var v = x[1]; return [8, v];
    }
   }
   function to_string$1(t){
    var _d4_ = sexp_of_t$3(function(param){return _p_;}, t);
    return caml_call1(Base[85][15], _d4_);
   }
   function digest_layer(param){
    switch(param[0]){
      case 0:
       var x = param[2], u = param[1];
       return constructor(cst_annotate, [0, uuid(u), [0, x, 0]]);
      case 1:
       var l = param[2], u$0 = param[1], _d0_ = [0, list(l), 0];
       return constructor(cst_base, [0, uuid(u$0), _d0_]);
      case 2:
       var l$0 = param[1]; return constructor(cst_tuple, [0, list(l$0), 0]);
      case 3:
       var l$1 = param[1];
       return constructor
               (cst_record,
                [0,
                 list
                  (caml_call2
                    (Base_List[52],
                     l$1,
                     function(param){
                      var t = param[2], s = param[1];
                      return pair(caml_call1(string, s), t);
                     })),
                 0]);
      case 4:
       var l$2 = param[1];
       return constructor
               (cst_variant,
                [0,
                 list
                  (caml_call2
                    (Base_List[52],
                     l$2,
                     function(param){
                      var l = param[2], s = param[1], _d3_ = list(l);
                      return pair(caml_call1(string, s), _d3_);
                     })),
                 0]);
      case 5:
       var table = param[1];
       return constructor
               (cst_poly_variant,
                [0,
                 list
                  (caml_call2
                    (Base_List[52],
                     table[1],
                     function(param){
                      var y = param[2], x$0 = param[1];
                      if(y)
                       var x = y[1], _d2_ = constructor(cst_some, [0, x, 0]);
                      else
                       var _d2_ = constructor(cst_none, 0);
                      return pair(caml_call1(string, x$0), _d2_);
                     })),
                 0]);
      case 6:
       var l$3 = param[2], x$0 = param[1];
       return constructor(cst_application, [0, x$0, [0, list(l$3), 0]]);
      case 7:
       var l$4 = param[2], n = param[1], _d1_ = [0, list(l$4), 0];
       return constructor(cst_rec_app, [0, int$0(n), _d1_]);
      default:
       var n$0 = param[1]; return constructor(cst_var, [0, int$0(n$0), 0]);
    }
   }
   function to_digest(param){var x = param[1]; return x;}
   function to_digest$0(x){
    switch(x[0]){
      case 0:
       var x$0 = x[1]; return digest_layer([5, x$0]);
      case 1:
       var x$1 = x[1][2]; return x$1;
      default: var x$2 = x[1]; return x$2;
    }
   }
   function equal$1(x, y){
    var _dZ_ = to_digest$0(y);
    return 0 === caml_call2(compare$1, to_digest$0(x), _dZ_) ? 1 : 0;
   }
   function opaque(x){return [2, to_digest$0(x)];}
   function create$0(x){
    var x$0 = map$0(x, to_digest$0), desc = to_string$1(x$0);
    switch(x$0[0]){
      case 0:
       return [1, [0, desc, digest_layer(x$0)]];
      case 1:
       return [1, [0, desc, digest_layer(x$0)]];
      case 5:
       var l = x$0[1]; return [0, l];
      case 6:
       return [1, [0, desc, digest_layer(x$0)]];
      case 7:
       return [1, [0, desc, digest_layer(x$0)]];
      default: return [1, [0, desc, digest_layer(x$0)]];
    }
   }
   function var$0(x){return create$0([8, x]);}
   function apply(def, l){return create$0([6, def, l]);}
   function recurse(tid, l){return create$0([7, tid, l]);}
   function get_poly_variant(x){
    if(1 === x[0]){var desc = x[1][1]; return [1, desc];}
    var l = x[1];
    function _dW_(x){return [2, x];}
    var _dX_ = Base_Option[22];
    return [0, map(l, function(_dY_){return caml_call2(_dX_, _dY_, _dW_);})];
   }
   var Def = [0];
   function annotate(u, x){return create$0([0, u, x]);}
   function basetype(u, l){return create$0([1, u, l]);}
   function tuple(l){return create$0([2, l]);}
   function poly_variant(loc, l){
    return create$0
            ([5,
              create
               (loc,
                function(_dU_, _dV_){
                 return equal_option(equal$1, _dU_, _dV_);
                },
                l)]);
   }
   function var$1(x){return create$0([8, x]);}
   function apply$0(x, l){return create$0([6, x, l]);}
   function recurse$0(t, l){return create$0([7, t, l]);}
   function define(x){return x;}
   function record(l){return create$0([3, l]);}
   function variant(l){return create$0([4, l]);}
   function create$1(e){return [0, to_digest$0(e)];}
   var
    Canonical_digest =
      [0,
       to_digest,
       [0, var$0, recurse, apply, opaque, get_poly_variant],
       Def,
       [0,
        annotate,
        basetype,
        tuple,
        poly_variant,
        var$1,
        recurse$0,
        apply$0,
        define,
        record,
        variant,
        create$1]];
   function compare_t0(a_186, b_187){
    if(a_186 === b_187) return 0;
    var b_189 = b_187[1], a_188 = a_186[1];
    return compare$2
            (function(a_190, b_191){return compare_t0(a_190, b_191);},
             a_188,
             b_189);
   }
   var letrec_function_context = [];
   caml_update_dummy(letrec_function_context, [0, error_source_194]);
   var _q_ = [0, "Exp"];
   function sexp_of_t0(param){
    var arg0_201 = param[1], res0_202 = sexp_of_t$3(sexp_of_t0, arg0_201);
    return [1, [0, _q_, [0, res0_202, 0]]];
   }
   function equal_t0(x, y){return 0 === compare_t0(x, y) ? 1 : 0;}
   function var$2(x){return [0, [8, x]];}
   function apply$1(d, xs){return [0, [6, d, xs]];}
   function recurse$1(r, xs){return [0, [7, r, xs]];}
   function get_poly_variant$0(param){
    var cc = param[1];
    if(5 !== cc[0]) return [1, to_string$1(cc)];
    var tab = cc[1];
    return [0, tab];
   }
   function opaque$0(t){return t;}
   function to_digest$1(param){
    var e = param[1];
    return digest_layer(map$0(e, to_digest$1));
   }
   function to_digest$2(e){return to_digest$1(e);}
   function annotate$0(u, x){return [0, [0, u, x]];}
   function basetype$0(u, xs){return [0, [1, u, xs]];}
   function tuple$0(xs){return [0, [2, xs]];}
   function poly_variant$0(loc, xs){
    return [0,
            [5,
             create
              (loc,
               function(_dS_, _dT_){
                return equal_option(equal_t0, _dS_, _dT_);
               },
               xs)]];
   }
   function var$3(n){return [0, [8, n]];}
   function recurse$2(r, xs){return recurse$1(r, xs);}
   function apply$2(d, xs){return apply$1(d, xs);}
   function define$0(x){return x;}
   function record$0(xs){return [0, [3, xs]];}
   function variant$0(xs){return [0, [4, xs]];}
   function create$2(exp){return exp;}
   var
    Create =
      [0,
       annotate$0,
       basetype$0,
       tuple$0,
       poly_variant$0,
       var$3,
       recurse$2,
       apply$2,
       define$0,
       record$0,
       variant$0,
       create$2];
   function to_string_hum(t){
    var _dR_ = sexp_of_t0(t);
    return caml_call2(Base[85][13], 0, _dR_);
   }
   var
    t_of_sexp$2 = Base_String[41],
    sexp_of_t$4 = Base_String[42],
    of_string$1 = Base_String[43],
    to_string$2 = Base_String[44],
    symbol = Base_String[47],
    compare$3 = Base_String[51],
    equal$2 = Base_String[131],
    t_of_sexp$3 = Base_String[41],
    sexp_of_t$5 = Base_String[42],
    of_string$2 = Base_String[43],
    to_string$3 = Base_String[44],
    comparator = Base_String[59],
    equal$3 = Base_String[131],
    compare$4 = Base[119],
    equal$4 = Base[120],
    t_of_sexp$4 = Base[124],
    sexp_of_t$6 = Base[125],
    r = [0, 0],
    cst_impossible_lookup_group_un =
      "impossible: lookup_group, unbound type-identifier: %{Tid}",
    _w_ = [0, 0],
    cst_impossible_lookup_group_un$0 =
      "impossible: lookup_group, unbound type-identifier: ";
   function create$3(loc, trips){
    var gid = r[1];
    r[1] = 1 + gid | 0;
    var
     members =
       caml_call2
        (Base_List[52],
         trips,
         function(param){
          var t = param[3], vs = param[2], x = param[1];
          return [0, x, [0, vs, t]];
         });
    return [0, gid, loc, members];
   }
   function lookup(g, tid){
    var match = caml_call3(Base_List[134][5], g[3], symbol, tid);
    if(! match)
     return caml_call2
             (eval_fail
               (g[2],
                [0,
                 [11,
                  cst_impossible_lookup_group_un$0,
                  [24,
                   _w_,
                   function(param, custom_printf_345){
                    return caml_call1(to_string$2, custom_printf_345);
                   },
                   0]],
                 cst_impossible_lookup_group_un]),
              tid,
              0);
    var scheme = match[1];
    return scheme;
   }
   function equal$5(a_346, b_347){
    var a_346$0 = a_346, b_347$0 = b_347;
    for(;;){
     if(a_346$0 === b_347$0) return 1;
     a:
     {
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           switch(a_346$0[0]){
             case 0:
              var a_348 = a_346$0[1];
              if(0 !== b_347$0[0]) return 0;
              var
               b_351 = b_347$0[2],
               b_349 = b_347$0[1],
               a_350 = a_346$0[2],
               _dC_ = caml_call2(equal$0, a_348, b_349);
              if(! _dC_) return _dC_;
              a_346$0 = a_350;
              b_347$0 = b_351;
              continue;
             case 1:
              var a_354 = a_346$0[2], a_352 = a_346$0[1];
              switch(b_347$0[0]){
                case 0:
                 break a;
                case 1:
                 var
                  b_355 = b_347$0[2],
                  b_353 = b_347$0[1],
                  _dD_ = caml_call2(equal$0, a_352, b_353);
                 return _dD_
                         ? caml_call3
                           (Base[144],
                            function(a_356, b_357){return equal$5(a_356, b_357);},
                            a_354,
                            b_355)
                         : _dD_;
                default: return 0;
              }
             case 2:
              var a_358 = a_346$0[1];
              switch(b_347$0[0]){
                case 0:
                 break a;
                case 1:
                 break b;
                case 2:
                 var b_359 = b_347$0[1];
                 return caml_call3
                         (Base[144],
                          function(a_360, b_361){
                           var
                            t_363 = a_360[2],
                            t_362 = a_360[1],
                            t_365 = b_361[2],
                            t_364 = b_361[1],
                            _dQ_ = caml_call2(Base[172], t_362, t_364);
                           return _dQ_ ? equal$5(t_363, t_365) : _dQ_;
                          },
                          a_358,
                          b_359);
                default: return 0;
              }
             case 3:
              var a_366 = a_346$0[1];
              switch(b_347$0[0]){
                case 0:
                 break a;
                case 1:
                 break b;
                case 2:
                 break c;
                case 3:
                 var b_367 = b_347$0[1];
                 return caml_call3
                         (Base[144],
                          function(a_368, b_369){
                           var
                            t_371 = a_368[2],
                            t_370 = a_368[1],
                            t_373 = b_369[2],
                            t_372 = b_369[1],
                            _dP_ = caml_call2(Base[172], t_370, t_372);
                           return _dP_
                                   ? caml_call3
                                     (Base[144],
                                      function(a_374, b_375){return equal$5(a_374, b_375);},
                                      t_371,
                                      t_373)
                                   : _dP_;
                          },
                          a_366,
                          b_367);
                default: return 0;
              }
             case 4:
              var a_376 = a_346$0[1];
              switch(b_347$0[0]){
                case 0:
                 break a;
                case 1:
                 break b;
                case 2:
                 break c;
                case 3:
                 break d;
                case 4:
                 var b_377 = b_347$0[1];
                 return caml_call3
                         (Base[144],
                          function(a_378, b_379){return equal$5(a_378, b_379);},
                          a_376,
                          b_377);
                default: return 0;
              }
             case 5:
              var a_380 = a_346$0[1];
              switch(b_347$0[0]){
                case 0:
                 break a;
                case 1:
                 break b;
                case 2:
                 break c;
                case 3:
                 break d;
                case 4:
                 break e;
                case 5:
                 var
                  b_381 = b_347$0[1],
                  t_383 = a_380[2],
                  t_382 = a_380[1],
                  t_385 = b_381[2],
                  t_384 = b_381[1],
                  _dE_ = caml_call2(equal, t_382, t_384);
                 return _dE_
                         ? caml_call3
                           (Base[144],
                            function(a_386, b_387){
                             if(a_386 === b_387) return 1;
                             if(-59723313 <= a_386[1]){
                              if(typeof b_387 !== "number" && -59723313 === b_387[1]){
                               var
                                right_238 = b_387[2],
                                left_237 = a_386[2],
                                t_240 = left_237[2],
                                t_239 = left_237[1],
                                t_242 = right_238[2],
                                t_241 = right_238[1],
                                _dN_ = caml_call2(Base[172], t_239, t_241);
                               return _dN_
                                       ? equal_option
                                         (function(a_243, b_244){return equal$5(a_243, b_244);},
                                          t_240,
                                          t_242)
                                       : _dN_;
                              }
                             }
                             else if(typeof b_387 !== "number" && -72987685 === b_387[1]){
                              var
                               right_246 = b_387[2],
                               left_245 = a_386[2],
                               t_248 = left_245[2],
                               t_247 = left_245[1],
                               t_250 = right_246[2],
                               t_249 = right_246[1],
                               _dO_ = caml_call2(equal, t_247, t_249);
                              return _dO_ ? equal$5(t_248, t_250) : _dO_;
                             }
                             return runtime.caml_equal(a_386, b_387);
                            },
                            t_383,
                            t_385)
                         : _dE_;
                default: return 0;
              }
             case 6:
              var a_390 = a_346$0[1];
              switch(b_347$0[0]){
                case 0:
                 break a;
                case 1:
                 break b;
                case 2:
                 break c;
                case 3:
                 break d;
                case 4:
                 break e;
                case 5:
                 break f;
                case 6:
                 var
                  b_391 = b_347$0[1],
                  t_393 = a_390[2],
                  t_392 = a_390[1],
                  t_395 = b_391[2],
                  t_394 = b_391[1],
                  _dF_ = caml_call2(equal, t_392, t_394);
                 return _dF_ ? caml_call2(equal$3, t_393, t_395) : _dF_;
                default: return 0;
              }
             case 7:
              var a_398 = a_346$0[2], a_396 = a_346$0[1];
              switch(b_347$0[0]){
                case 0:
                 break a;
                case 1:
                 break b;
                case 2:
                 break c;
                case 3:
                 break d;
                case 4:
                 break e;
                case 5:
                 break f;
                case 6: break;
                case 7:
                 var
                  b_399 = b_347$0[2],
                  b_397 = b_347$0[1],
                  _dG_ = caml_call2(equal$2, a_396, b_397);
                 return _dG_
                         ? caml_call3
                           (Base[144],
                            function(a_400, b_401){return equal$5(a_400, b_401);},
                            a_398,
                            b_399)
                         : _dG_;
                default: return 0;
              }
              break;
             default:
              var a_406 = a_346$0[3], a_404 = a_346$0[2], a_301 = a_346$0[1];
              switch(b_347$0[0]){
                case 0:
                 break a;
                case 1:
                 break b;
                case 2:
                 break c;
                case 3:
                 break d;
                case 4:
                 break e;
                case 5:
                 break f;
                case 6: break;
                case 7:
                 return 0;
                default:
                 var
                  b_407 = b_347$0[3],
                  b_405 = b_347$0[2],
                  b_403 = b_347$0[1];
                 g:
                 if(a_301 === b_403)
                  var _dH_ = 1;
                 else{
                  var _dz_ = caml_call2(equal$4, a_301[1], b_403[1]);
                  if(_dz_){
                   var _dA_ = caml_call2(equal, a_301[2], b_403[2]);
                   if(_dA_){
                    var
                     _dH_ =
                       caml_call3
                        (Base[144],
                         function(a_303, b_304){
                          var
                           t_306 = a_303[2],
                           t_305 = a_303[1],
                           t_308 = b_304[2],
                           t_307 = b_304[1],
                           _dK_ = caml_call2(equal$2, t_305, t_307);
                          if(_dK_){
                           var
                            t_310 = t_306[2],
                            t_309 = t_306[1],
                            t_312 = t_308[2],
                            t_311 = t_308[1],
                            _dL_ =
                              caml_call3
                               (Base[144],
                                function(a_313, b_314){
                                 return caml_call2(equal$3, a_313, b_314);
                                },
                                t_309,
                                t_311);
                           if(_dL_) return equal$5(t_310, t_312);
                           var _dM_ = _dL_;
                          }
                          else
                           var _dM_ = _dK_;
                          return _dM_;
                         },
                         a_301[3],
                         b_403[3]);
                    break g;
                   }
                   var _dB_ = _dA_;
                  }
                  else
                   var _dB_ = _dz_;
                  var _dH_ = _dB_;
                 }
                 if(_dH_){
                  var _dI_ = caml_call2(equal$2, a_404, b_405);
                  if(_dI_)
                   return caml_call3
                           (Base[144],
                            function(a_410, b_411){return equal$5(a_410, b_411);},
                            a_406,
                            b_407);
                  var _dJ_ = _dI_;
                 }
                 else
                  var _dJ_ = _dH_;
                 return _dJ_;
              }
           }
           return 0;
          }
          return 0;
         }
         return 0;
        }
        return 0;
       }
       return 0;
      }
      return 0;
     }
     return 0;
    }
   }
   var
    letrec_function_context$0 = [],
    cst_members = cst_members$0,
    cst_loc = cst_loc$0,
    cst_gid = cst_gid$0;
   function t_of_sexp$5(sexp_416){
    a:
    {
     if(0 === sexp_416[0]){
      var
       _c6_ = sexp_416[1],
       _c7_ = caml_string_compare(_c6_, cst_annotate$0);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              if(0 <= _c7_){
               if(0 < _c7_){
                if(_c6_ === cst_base$0) break i;
                if(_c6_ === cst_poly_variant$0) break h;
                if(_c6_ === cst_rec_app$0) break g;
                if(_c6_ === cst_record$0) break f;
                if(_c6_ === cst_top_app) break e;
                if(_c6_ === cst_tuple$0) break d;
                if(_c6_ === cst_var$0) break c;
                if(_c6_ !== cst_variant$0) break a;
                break b;
               }
              }
              else if(_c6_ !== cst_Annotate){
               if(_c6_ === cst_Base) break i;
               if(_c6_ === cst_Poly_variant) break h;
               if(_c6_ === cst_Rec_app) break g;
               if(_c6_ === cst_Record) break f;
               if(_c6_ === cst_Top_app) break e;
               if(_c6_ === cst_Tuple) break d;
               if(_c6_ === cst_Var) break c;
               if(_c6_ !== cst_Variant) break a;
               break b;
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[5],
                       letrec_function_context$0[1],
                       sexp_416);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5],
                      letrec_function_context$0[1],
                      sexp_416);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[5],
                     letrec_function_context$0[1],
                     sexp_416);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],
                    letrec_function_context$0[1],
                    sexp_416);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[5],
                   letrec_function_context$0[1],
                   sexp_416);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5],
                  letrec_function_context$0[1],
                  sexp_416);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5],
                 letrec_function_context$0[1],
                 sexp_416);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5],
                letrec_function_context$0[1],
                sexp_416);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5],
               letrec_function_context$0[1],
               sexp_416);
     }
     var _c8_ = sexp_416[1];
     if(! _c8_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7],
               letrec_function_context$0[1],
               sexp_416);
     var _c9_ = _c8_[1];
     if(0 !== _c9_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6],
               letrec_function_context$0[1],
               sexp_416);
     var
      tag_417 = _c9_[1],
      _c__ = caml_string_compare(tag_417, cst_annotate$0);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             if(0 <= _c__){
              if(0 < _c__){
               if(tag_417 === cst_base$0) break i;
               if(tag_417 === cst_poly_variant$0) break h;
               if(tag_417 === cst_rec_app$0) break g;
               if(tag_417 === cst_record$0) break f;
               if(tag_417 === cst_top_app) break e;
               if(tag_417 === cst_tuple$0) break d;
               if(tag_417 === cst_var$0) break c;
               if(tag_417 !== cst_variant$0) break a;
               break b;
              }
             }
             else if(tag_417 !== cst_Annotate){
              if(tag_417 === cst_Base) break i;
              if(tag_417 === cst_Poly_variant) break h;
              if(tag_417 === cst_Rec_app) break g;
              if(tag_417 === cst_Record) break f;
              if(tag_417 === cst_Top_app) break e;
              if(tag_417 === cst_Tuple) break d;
              if(tag_417 === cst_Var) break c;
              if(tag_417 !== cst_Variant) break a;
              break b;
             }
             var sexp_args_418 = _c8_[2];
             if(sexp_args_418){
              var _dh_ = sexp_args_418[2];
              if(_dh_ && ! _dh_[2]){
               var
                arg1_420 = _dh_[1],
                arg0_419 = sexp_args_418[1],
                res0_421 = caml_call1(t_of_sexp$0, arg0_419),
                res1_422 = t_of_sexp$5(arg1_420);
               return [0, res0_421, res1_422];
              }
             }
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],
                      letrec_function_context$0[1],
                      tag_417,
                      sexp_416);
            }
            var sexp_args_425 = _c8_[2];
            if(sexp_args_425){
             var _dg_ = sexp_args_425[2];
             if(_dg_ && ! _dg_[2]){
              var
               arg1_427 = _dg_[1],
               arg0_426 = sexp_args_425[1],
               res0_428 = caml_call1(t_of_sexp$0, arg0_426),
               res1_429 = caml_call2(Base[147], t_of_sexp$5, arg1_427);
              return [1, res0_428, res1_429];
             }
            }
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],
                     letrec_function_context$0[1],
                     tag_417,
                     sexp_416);
           }
           var sexp_args_457 = _c8_[2];
           if(sexp_args_457 && ! sexp_args_457[2]){
            var arg0_463 = sexp_args_457[1];
            h:
            {
             if(1 === arg0_463[0]){
              var _de_ = arg0_463[1];
              if(_de_){
               var _df_ = _de_[2];
               if(_df_ && ! _df_[2]){
                var
                 arg1_459 = _df_[1],
                 arg0_458 = _de_[1],
                 res0_460 = caml_call1(t_of_sexp, arg0_458),
                 res1_461 =
                   caml_call2
                    (Base[147],
                     function(sexp_255){
                      try{
                       a:
                       if(0 === sexp_255[0])
                        var
                         atom_253 = sexp_255[1],
                         _dx_ =
                           atom_253 !== cst_Constr
                            ? atom_253
                              !== cst_Inherit
                              ? caml_call1(Sexplib0_Sexp_conv_error[19], 0)
                              : caml_call2
                                (Sexplib0_Sexp_conv_error[23], error_source_263, sexp_255)
                            : caml_call2
                              (Sexplib0_Sexp_conv_error[23], error_source_263, sexp_255);
                       else{
                        var _dr_ = sexp_255[1];
                        if(_dr_){
                         var match = _dr_[1];
                         if(0 === match[0]){
                          var sexp_args_256 = _dr_[2], atom_253$0 = match[1];
                          if(atom_253$0 !== cst_Constr)
                           if(atom_253$0 !== cst_Inherit)
                            var _dx_ = caml_call1(Sexplib0_Sexp_conv_error[19], 0);
                           else{
                            if(sexp_args_256 && ! sexp_args_256[2]){
                             var arg0_264 = sexp_args_256[1];
                             b:
                             {
                              if(1 === arg0_264[0]){
                               var _ds_ = arg0_264[1];
                               if(_ds_){
                                var _dt_ = _ds_[2];
                                if(_dt_ && ! _dt_[2]){
                                 var
                                  arg1_259 = _dt_[1],
                                  arg0_258 = _ds_[1],
                                  res0_260 = caml_call1(t_of_sexp, arg0_258),
                                  res1_261 = t_of_sexp$5(arg1_259),
                                  res0_265 = [0, res0_260, res1_261];
                                 break b;
                                }
                               }
                              }
                              var
                               res0_265 =
                                 caml_call3
                                  (Sexplib0_Sexp_conv_error[2], error_source_263, 2, arg0_264);
                             }
                             var _dx_ = [0, -72987685, res0_265];
                             break a;
                            }
                            var
                             _dx_ =
                               caml_call3
                                (Sexplib0_Sexp_conv_error[22],
                                 error_source_263,
                                 atom_253$0,
                                 sexp_255);
                           }
                          else{
                           if(sexp_args_256 && ! sexp_args_256[2]){
                            var arg0_272 = sexp_args_256[1];
                            b:
                            {
                             if(1 === arg0_272[0]){
                              var _du_ = arg0_272[1];
                              if(_du_){
                               var _dv_ = _du_[2];
                               if(_dv_ && ! _dv_[2]){
                                var
                                 arg1_268 = _dv_[1],
                                 arg0_267 = _du_[1],
                                 res0_269 = caml_call1(Base[176], arg0_267),
                                 res1_270 = caml_call2(Base[162], t_of_sexp$5, arg1_268),
                                 res0_273 = [0, res0_269, res1_270];
                                break b;
                               }
                              }
                             }
                             var
                              res0_273 =
                                caml_call3
                                 (Sexplib0_Sexp_conv_error[2], error_source_263, 2, arg0_272);
                            }
                            var _dx_ = [0, -59723313, res0_273];
                            break a;
                           }
                           var
                            _dx_ =
                              caml_call3
                               (Sexplib0_Sexp_conv_error[22],
                                error_source_263,
                                atom_253$0,
                                sexp_255);
                          }
                         }
                         else
                          var
                           _dx_ =
                             caml_call2
                              (Sexplib0_Sexp_conv_error[24], error_source_263, sexp_255);
                        }
                        else
                         var
                          _dx_ =
                            caml_call2
                             (Sexplib0_Sexp_conv_error[25], error_source_263, sexp_255);
                       }
                       return _dx_;
                      }
                      catch(_dy_){
                       var _dw_ = caml_wrap_exception(_dy_);
                       if(_dw_ === Sexplib0_Sexp_conv_error[18])
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[20], error_source_275, sexp_255);
                       throw caml_maybe_attach_backtrace(_dw_, 0);
                      }
                     },
                     arg1_459),
                 res0_464 = [0, res0_460, res1_461];
                break h;
               }
              }
             }
             var
              res0_464 =
                caml_call3
                 (Sexplib0_Sexp_conv_error[2],
                  letrec_function_context$0[1],
                  2,
                  arg0_463);
            }
            return [5, res0_464];
           }
           return caml_call3
                   (Sexplib0_Sexp_conv_error[4],
                    letrec_function_context$0[1],
                    tag_417,
                    sexp_416);
          }
          var sexp_args_477 = _c8_[2];
          if(sexp_args_477){
           var _dd_ = sexp_args_477[2];
           if(_dd_ && ! _dd_[2]){
            var
             arg1_479 = _dd_[1],
             arg0_478 = sexp_args_477[1],
             res0_480 = caml_call1(t_of_sexp$2, arg0_478),
             res1_481 = caml_call2(Base[147], t_of_sexp$5, arg1_479);
            return [7, res0_480, res1_481];
           }
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4],
                   letrec_function_context$0[1],
                   tag_417,
                   sexp_416);
         }
         var sexp_args_432 = _c8_[2];
         if(sexp_args_432 && ! sexp_args_432[2]){
          var
           arg0_438 = sexp_args_432[1],
           res0_439 =
             caml_call2
              (Base[147],
               function(sexp_437){
                if(1 === sexp_437[0]){
                 var _dp_ = sexp_437[1];
                 if(_dp_){
                  var _dq_ = _dp_[2];
                  if(_dq_ && ! _dq_[2]){
                   var
                    arg1_434 = _dq_[1],
                    arg0_433 = _dp_[1],
                    res0_435 = caml_call1(Base[176], arg0_433),
                    res1_436 = t_of_sexp$5(arg1_434);
                   return [0, res0_435, res1_436];
                  }
                 }
                }
                return caml_call3
                        (Sexplib0_Sexp_conv_error[2],
                         letrec_function_context$0[1],
                         2,
                         sexp_437);
               },
               arg0_438);
          return [2, res0_439];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[4],
                  letrec_function_context$0[1],
                  tag_417,
                  sexp_416);
        }
        var sexp_args_484 = _c8_[2];
        if(sexp_args_484){
         var _db_ = sexp_args_484[2];
         if(_db_){
          var _dc_ = _db_[2];
          if(_dc_ && ! _dc_[2]){
           var
            arg2_487 = _dc_[1],
            arg1_486 = _db_[1],
            arg0_485 = sexp_args_484[1],
            _c5_ =
              [0,
               cst_gid,
               1,
               t_of_sexp$4,
               [0,
                cst_loc,
                1,
                t_of_sexp,
                [0,
                 cst_members,
                 1,
                 caml_call1
                  (Base[147],
                   function(sexp_327){
                    if(1 === sexp_327[0]){
                     var _dl_ = sexp_327[1];
                     if(_dl_){
                      var _dm_ = _dl_[2];
                      if(_dm_ && ! _dm_[2]){
                       var
                        arg1_324 = _dm_[1],
                        arg0_323 = _dl_[1],
                        res0_325 = caml_call1(t_of_sexp$2, arg0_323);
                       a:
                       {
                        if(1 === arg1_324[0]){
                         var _dn_ = arg1_324[1];
                         if(_dn_){
                          var _do_ = _dn_[2];
                          if(_do_ && ! _do_[2]){
                           var
                            arg1_319 = _do_[1],
                            arg0_318 = _dn_[1],
                            res0_320 = caml_call2(Base[147], t_of_sexp$3, arg0_318),
                            res1_321 = t_of_sexp$5(arg1_319),
                            res1_326 = [0, res0_320, res1_321];
                           break a;
                          }
                         }
                        }
                        var
                         res1_326 =
                           caml_call3
                            (Sexplib0_Sexp_conv_error[2], error_source_317, 2, arg1_324);
                       }
                       return [0, res0_325, res1_326];
                      }
                     }
                    }
                    return caml_call3
                            (Sexplib0_Sexp_conv_error[2], error_source_317, 2, sexp_327);
                   }),
                 0]]],
            res0_488 =
              caml_call6
               (Sexplib0_Sexp_conv_record[3],
                error_source_317,
                _c5_,
                function(param){
                 return param !== cst_gid$0
                         ? param !== cst_loc$0 ? param !== cst_members$0 ? -1 : 2 : 1
                         : 0;
                },
                0,
                function(param){
                 var
                  _dk_ = param[2],
                  members = _dk_[2][1],
                  loc = _dk_[1],
                  gid = param[1];
                 return [0, gid, loc, members];
                },
                arg0_485),
            res1_489 = caml_call1(t_of_sexp$2, arg1_486),
            res2_490 = caml_call2(Base[147], t_of_sexp$5, arg2_487);
           return [8, res0_488, res1_489, res2_490];
          }
         }
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[4],
                 letrec_function_context$0[1],
                 tag_417,
                 sexp_416);
       }
       var sexp_args_452 = _c8_[2];
       if(sexp_args_452 && ! sexp_args_452[2]){
        var
         arg0_453 = sexp_args_452[1],
         res0_454 = caml_call2(Base[147], t_of_sexp$5, arg0_453);
        return [4, res0_454];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                letrec_function_context$0[1],
                tag_417,
                sexp_416);
      }
      var sexp_args_467 = _c8_[2];
      if(sexp_args_467 && ! sexp_args_467[2]){
       var arg0_473 = sexp_args_467[1];
       c:
       {
        if(1 === arg0_473[0]){
         var _c$_ = arg0_473[1];
         if(_c$_){
          var _da_ = _c$_[2];
          if(_da_ && ! _da_[2]){
           var
            arg1_469 = _da_[1],
            arg0_468 = _c$_[1],
            res0_470 = caml_call1(t_of_sexp, arg0_468),
            res1_471 = caml_call1(t_of_sexp$3, arg1_469),
            res0_474 = [0, res0_470, res1_471];
           break c;
          }
         }
        }
        var
         res0_474 =
           caml_call3
            (Sexplib0_Sexp_conv_error[2],
             letrec_function_context$0[1],
             2,
             arg0_473);
       }
       return [6, res0_474];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               letrec_function_context$0[1],
               tag_417,
               sexp_416);
     }
     var sexp_args_442 = _c8_[2];
     if(sexp_args_442 && ! sexp_args_442[2]){
      var
       arg0_448 = sexp_args_442[1],
       res0_449 =
         caml_call2
          (Base[147],
           function(sexp_447){
            if(1 === sexp_447[0]){
             var _di_ = sexp_447[1];
             if(_di_){
              var _dj_ = _di_[2];
              if(_dj_ && ! _dj_[2]){
               var
                arg1_444 = _dj_[1],
                arg0_443 = _di_[1],
                res0_445 = caml_call1(Base[176], arg0_443),
                res1_446 = caml_call2(Base[147], t_of_sexp$5, arg1_444);
               return [0, res0_445, res1_446];
              }
             }
            }
            return caml_call3
                    (Sexplib0_Sexp_conv_error[2],
                     letrec_function_context$0[1],
                     2,
                     sexp_447);
           },
           arg0_448);
      return [3, res0_449];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4],
              letrec_function_context$0[1],
              tag_417,
              sexp_416);
    }
    return caml_call2
            (Sexplib0_Sexp_conv_error[8],
             letrec_function_context$0[1],
             sexp_416);
   }
   caml_update_dummy(letrec_function_context$0, [0, error_source_414]);
   var
    _r_ = [0, cst_Constr],
    _s_ = [0, cst_Inherit],
    _t_ = [0, cst_members$0],
    _u_ = [0, cst_loc$0],
    _v_ = [0, cst_gid$0],
    _x_ = [0, cst_Annotate],
    _y_ = [0, cst_Base],
    _z_ = [0, cst_Record],
    _A_ = [0, cst_Variant],
    _B_ = [0, cst_Tuple],
    _C_ = [0, cst_Poly_variant],
    _D_ = [0, cst_Var],
    _E_ = [0, cst_Rec_app],
    _F_ = [0, cst_Top_app];
   function sexp_of_t$7(param){
    switch(param[0]){
      case 0:
       var
        arg1_492 = param[2],
        arg0_491 = param[1],
        res0_493 = caml_call1(sexp_of_t$0, arg0_491),
        res1_494 = sexp_of_t$7(arg1_492);
       return [1, [0, _x_, [0, res0_493, [0, res1_494, 0]]]];
      case 1:
       var
        arg1_496 = param[2],
        arg0_495 = param[1],
        res0_497 = caml_call1(sexp_of_t$0, arg0_495),
        res1_498 = caml_call2(Base[148], sexp_of_t$7, arg1_496);
       return [1, [0, _y_, [0, res0_497, [0, res1_498, 0]]]];
      case 2:
       var
        arg0_503 = param[1],
        res0_504 =
          caml_call2
           (Base[148],
            function(param){
             var
              arg1_500 = param[2],
              arg0_499 = param[1],
              res0_501 = caml_call1(Base[177], arg0_499),
              res1_502 = sexp_of_t$7(arg1_500);
             return [1, [0, res0_501, [0, res1_502, 0]]];
            },
            arg0_503);
       return [1, [0, _z_, [0, res0_504, 0]]];
      case 3:
       var
        arg0_509 = param[1],
        res0_510 =
          caml_call2
           (Base[148],
            function(param){
             var
              arg1_506 = param[2],
              arg0_505 = param[1],
              res0_507 = caml_call1(Base[177], arg0_505),
              res1_508 = caml_call2(Base[148], sexp_of_t$7, arg1_506);
             return [1, [0, res0_507, [0, res1_508, 0]]];
            },
            arg0_509);
       return [1, [0, _A_, [0, res0_510, 0]]];
      case 4:
       var
        arg0_511 = param[1],
        res0_512 = caml_call2(Base[148], sexp_of_t$7, arg0_511);
       return [1, [0, _B_, [0, res0_512, 0]]];
      case 5:
       var
        arg0_517 = param[1],
        arg1_514 = arg0_517[2],
        arg0_513 = arg0_517[1],
        res0_515 = caml_call1(sexp_of_t, arg0_513),
        res1_516 =
          caml_call2
           (Base[148],
            function(param){
             if(-59723313 <= param[1]){
              var
               v_277 = param[2],
               arg1_279 = v_277[2],
               arg0_278 = v_277[1],
               res0_280 = caml_call1(Base[177], arg0_278),
               res1_281 = caml_call2(Base[163], sexp_of_t$7, arg1_279);
              return [1,
                      [0, _r_, [0, [1, [0, res0_280, [0, res1_281, 0]]], 0]]];
             }
             var
              v_282 = param[2],
              arg1_284 = v_282[2],
              arg0_283 = v_282[1],
              res0_285 = caml_call1(sexp_of_t, arg0_283),
              res1_286 = sexp_of_t$7(arg1_284);
             return [1,
                     [0, _s_, [0, [1, [0, res0_285, [0, res1_286, 0]]], 0]]];
            },
            arg1_514),
        res0_518 = [1, [0, res0_515, [0, res1_516, 0]]];
       return [1, [0, _C_, [0, res0_518, 0]]];
      case 6:
       var
        arg0_523 = param[1],
        arg1_520 = arg0_523[2],
        arg0_519 = arg0_523[1],
        res0_521 = caml_call1(sexp_of_t, arg0_519),
        res1_522 = caml_call1(sexp_of_t$5, arg1_520),
        res0_524 = [1, [0, res0_521, [0, res1_522, 0]]];
       return [1, [0, _D_, [0, res0_524, 0]]];
      case 7:
       var
        arg1_526 = param[2],
        arg0_525 = param[1],
        res0_527 = caml_call1(sexp_of_t$4, arg0_525),
        res1_528 = caml_call2(Base[148], sexp_of_t$7, arg1_526);
       return [1, [0, _E_, [0, res0_527, [0, res1_528, 0]]]];
      default:
       var
        arg2_531 = param[3],
        arg1_530 = param[2],
        arg0_529 = param[1],
        members_335 = arg0_529[3],
        loc_333 = arg0_529[2],
        gid_331 = arg0_529[1],
        arg_336 =
          caml_call2
           (Base[148],
            function(param){
             var
              arg1_342 = param[2],
              arg0_341 = param[1],
              res0_343 = caml_call1(sexp_of_t$4, arg0_341),
              arg1_338 = arg1_342[2],
              arg0_337 = arg1_342[1],
              res0_339 = caml_call2(Base[148], sexp_of_t$5, arg0_337),
              res1_340 = sexp_of_t$7(arg1_338),
              res1_344 = [1, [0, res0_339, [0, res1_340, 0]]];
             return [1, [0, res0_343, [0, res1_344, 0]]];
            },
            members_335),
        bnds_330 = [0, [1, [0, _t_, [0, arg_336, 0]]], 0],
        arg_334 = caml_call1(sexp_of_t, loc_333),
        bnds_330$0 = [0, [1, [0, _u_, [0, arg_334, 0]]], bnds_330],
        arg_332 = caml_call1(sexp_of_t$6, gid_331),
        bnds_330$1 = [0, [1, [0, _v_, [0, arg_332, 0]]], bnds_330$0],
        res0_532 = [1, bnds_330$1],
        res1_533 = caml_call1(sexp_of_t$4, arg1_530),
        res2_534 = caml_call2(Base[148], sexp_of_t$7, arg2_531);
       return [1, [0, _F_, [0, res0_532, [0, res1_533, [0, res2_534, 0]]]]];
    }
   }
   function annotate$1(v0, v1){return [0, v0, v1];}
   function basetype$1(v0, v1){return [1, v0, v1];}
   function record$1(v0){return [2, v0];}
   function variant$1(v0){return [3, v0];}
   function tuple$1(v0){return [4, v0];}
   function rec_app(v0, v1){return [7, v0, v1];}
   function top_app(v0, v1, v2){return [8, v0, v1, v2];}
   function constr(s, t){return [0, -59723313, [0, s, t]];}
   function inherit(loc, t){return [0, -72987685, [0, loc, t]];}
   function var$4(loc, t){return [6, [0, loc, t]];}
   function poly_variant$1(loc, xs){return [5, [0, loc, xs]];}
   function is_cyclic_0(via_VR){
    return function(group, tid){
     var set = [0, 0];
     function visited(tid){
      return caml_call3(Base_List[16], set[1], tid, equal$2);
     }
     function trav(param){
      var param$0 = param;
      for(;;){
       switch(param$0[0]){
         case 0:
          var t = param$0[2]; param$0 = t; continue;
         case 1:
          var ts = param$0[2]; break;
         case 2:
          var xs = param$0[1];
          return via_VR
                  ? caml_call2
                    (Base_List[19],
                     xs,
                     function(param){var t = param[2]; return trav(t);})
                  : 0;
         case 3:
          var xs$0 = param$0[1];
          return via_VR
                  ? caml_call2
                    (Base_List[19],
                     xs$0,
                     function(param){
                      var ts = param[2];
                      return caml_call2(Base_List[19], ts, trav);
                     })
                  : 0;
         case 4:
          var ts = param$0[1]; break;
         case 5:
          var cs = param$0[1][2];
          return caml_call2
                  (Base_List[19],
                   cs,
                   function(param){
                    if(-59723313 > param[1]){
                     var t$0 = param[2][2];
                     return trav(t$0);
                    }
                    var match = param[2][2];
                    if(! match) return 0;
                    var t = match[1];
                    return trav(t);
                   });
         case 6:
          return 0;
         case 7:
          var ts$0 = param$0[2], tid = param$0[1];
          if(! visited(tid)){set[1] = [0, tid, set[1]]; trav_tid(tid);}
          return caml_call2(Base_List[19], ts$0, trav);
         default: var ts = param$0[3];
       }
       return caml_call2(Base_List[19], ts, trav);
      }
     }
     function trav_tid(tid){
      var body = lookup(group, tid)[2];
      return trav(body);
     }
     trav_tid(tid);
     var res = visited(tid);
     return res;};
   }
   var
    is_cyclic = is_cyclic_0(1),
    is_cyclic_with_no_intervening_ = is_cyclic_0(0),
    cst_Free_type_variable_Vid = "Free type variable: '%{Vid}",
    _G_ = [0, 0],
    cst_Free_type_variable = "Free type variable: '",
    _H_ =
      [0,
       [11,
        "The shape for an inherited type is not described as a polymorphic-variant: ",
        [2, 0, 0]],
       "The shape for an inherited type is not described as a polymorphic-variant: %s"],
    cst_apply_incorrect_type_appli = "apply, incorrect type application arity",
    cst_top_level = "top-level";
   function Evaluation(Canonical){
    function arg(t, param){
     var v = param[2], k = param[1];
     return caml_call3(Base_Map[32], t, k, v);
    }
    var _L_ = caml_call1(Base_Map[6], [0, comparator]), _M_ = Base_List[20];
    function create(_c4_){return caml_call3(_M_, _c4_, _L_, arg);}
    function lookup$0(t, k){return caml_call2(Base_Map[40], t, k);}
    var Venv = [0, lookup$0, create];
    function compare(a_535, b_536){
     var
      t_538 = a_535[2],
      t_537 = a_535[1],
      t_540 = b_536[2],
      t_539 = b_536[1],
      n = caml_call2(compare$4, t_537, t_539);
     return 0 === n ? caml_call2(compare$3, t_538, t_540) : n;
    }
    function sexp_of_t(param){
     var
      arg1_542 = param[2],
      arg0_541 = param[1],
      res0_543 = caml_call1(sexp_of_t$6, arg0_541),
      res1_544 = caml_call1(sexp_of_t$4, arg1_542);
     return [1, [0, res0_543, [0, res1_544, 0]]];
    }
    var
     T = [0, compare, sexp_of_t],
     include = caml_call1(Base_Comparator[5], T),
     comparator$0 = include[1];
    function find(t, k){return caml_call2(Base_Map[40], t, k);}
    var empty = caml_call1(Base_Map[6], [0, comparator$0]);
    function extend(t, k, v){return caml_call3(Base_Map[32], t, k, v);}
    var Tenv = [0, find, empty, extend];
    function return$0(x, param, tenv){return x;}
    function bind(t, f, depth, tenv){
     var x = caml_call2(t, depth, tenv);
     return caml_call2(caml_call1(f, x), depth, tenv);
    }
    function look_env(key, param, tenv){
     var result = Tenv[1].call(null, tenv, key);
     return caml_call2
             (Base_Option[22],
              result,
              function(param){var x = param[2]; return [0, x];});
    }
    function extend_new_tid(key, def_t, depth, tenv){
     var
      value = [0, -271630457, depth],
      tenv$0 = Tenv[3].call(null, tenv, key, value);
     return [1, caml_call2(def_t, depth + 1 | 0, tenv$0)];
    }
    function exec(t){return caml_call2(t, 0, Tenv[2]);}
    var
     Defining = [0, return$0, bind, look_env, extend_new_tid, exec],
     symbol_bind = Defining[2],
     return$1 = Defining[1];
    function sequence_defining(xs, f){
     function loop(acc_ys, param){
      if(param){
       var
        xs = param[2],
        x = param[1],
        _cT_ = function(y){return loop([0, y, acc_ys], xs);},
        _cU_ = caml_call1(f, x);
       return function(_c0_, _c1_){
        var _c3_ = _c1_, _c2_ = _c0_;
        return symbol_bind(_cU_, _cT_, _c2_, _c3_);};
      }
      var _cV_ = caml_call1(Base_List[61], acc_ys);
      return function(_cW_, _cX_){
       var _cZ_ = _cX_, _cY_ = _cW_;
       return return$1(_cV_, _cY_, _cZ_);};
     }
     return loop(0, xs);
    }
    function _N_(group, venv, t){
     switch(t[0]){
       case 0:
        var
         t$0 = t[2],
         s = t[1],
         _bd_ =
           function(v){
            var _cO_ = caml_call2(Canonical[4][1], s, v);
            return function(_cP_, _cQ_){
             var _cS_ = _cQ_, _cR_ = _cP_;
             return return$1(_cO_, _cR_, _cS_);};
           },
         _be_ = _N_(group, venv, t$0);
        return function(_cK_, _cL_){
         var _cN_ = _cL_, _cM_ = _cK_;
         return symbol_bind(_be_, _bd_, _cM_, _cN_);};
       case 1:
        var
         ts = t[2],
         s$0 = t[1],
         _bf_ =
           function(vs){
            var _cF_ = caml_call2(Canonical[4][2], s$0, vs);
            return function(_cG_, _cH_){
             var _cJ_ = _cH_, _cI_ = _cG_;
             return return$1(_cF_, _cI_, _cJ_);};
           },
         _bg_ = eval_list(group, venv, ts);
        return function(_cB_, _cC_){
         var _cE_ = _cC_, _cD_ = _cB_;
         return symbol_bind(_bg_, _bf_, _cD_, _cE_);};
       case 2:
        var
         binds = t[1],
         _bh_ =
           function(binds){
            var _cw_ = caml_call1(Canonical[4][9], binds);
            return function(_cx_, _cy_){
             var _cA_ = _cy_, _cz_ = _cx_;
             return return$1(_cw_, _cz_, _cA_);};
           },
         _bi_ =
           sequence_defining
            (binds,
             function(param){
              var x = param[2], s = param[1];
              function _cl_(y){
               var _cr_ = [0, s, y];
               return function(_cs_, _ct_){
                var _cv_ = _ct_, _cu_ = _cs_;
                return return$1(_cr_, _cu_, _cv_);};
              }
              var _cm_ = _N_(group, venv, x);
              return function(_cn_, _co_){
               var _cq_ = _co_, _cp_ = _cn_;
               return symbol_bind(_cm_, _cl_, _cp_, _cq_);};
             });
        return function(_ch_, _ci_){
         var _ck_ = _ci_, _cj_ = _ch_;
         return symbol_bind(_bi_, _bh_, _cj_, _ck_);};
       case 3:
        var
         alts = t[1],
         _bj_ =
           function(alts){
            var _cc_ = caml_call1(Canonical[4][10], alts);
            return function(_cd_, _ce_){
             var _cg_ = _ce_, _cf_ = _cd_;
             return return$1(_cc_, _cf_, _cg_);};
           },
         _bk_ =
           sequence_defining
            (alts,
             function(param){
              var xs = param[2], s = param[1];
              function _b3_(ys){
               var _b9_ = [0, s, ys];
               return function(_b__, _b$_){
                var _cb_ = _b$_, _ca_ = _b__;
                return return$1(_b9_, _ca_, _cb_);};
              }
              var _b4_ = eval_list(group, venv, xs);
              return function(_b5_, _b6_){
               var _b8_ = _b6_, _b7_ = _b5_;
               return symbol_bind(_b4_, _b3_, _b7_, _b8_);};
             });
        return function(_bZ_, _b0_){
         var _b2_ = _b0_, _b1_ = _bZ_;
         return symbol_bind(_bk_, _bj_, _b1_, _b2_);};
       case 4:
        var
         ts$0 = t[1],
         _bl_ =
           function(vs){
            var _bU_ = caml_call1(Canonical[4][3], vs);
            return function(_bV_, _bW_){
             var _bY_ = _bW_, _bX_ = _bV_;
             return return$1(_bU_, _bX_, _bY_);};
           },
         _bm_ = eval_list(group, venv, ts$0);
        return function(_bQ_, _bR_){
         var _bT_ = _bR_, _bS_ = _bQ_;
         return symbol_bind(_bm_, _bl_, _bS_, _bT_);};
       case 5:
        var
         match = t[1],
         cs = match[2],
         loc = match[1],
         _bn_ =
           function(xss){
            var
             _bK_ = caml_call1(Base_List[10], xss),
             _bL_ = caml_call2(Canonical[4][4], loc, _bK_);
            return function(_bM_, _bN_){
             var _bP_ = _bN_, _bO_ = _bM_;
             return return$1(_bL_, _bO_, _bP_);};
           },
         _bo_ =
           sequence_defining
            (cs, function(_bJ_){return eval_poly_constr(group, venv, _bJ_);});
        return function(_bF_, _bG_){
         var _bI_ = _bG_, _bH_ = _bF_;
         return symbol_bind(_bo_, _bn_, _bH_, _bI_);};
       case 6:
        var
         match$0 = t[1],
         vid = match$0[2],
         loc$0 = match$0[1],
         match$1 = Venv[1].call(null, venv, vid);
        if(! match$1)
         return caml_call2
                 (eval_fail
                   (loc$0,
                    [0,
                     [11,
                      cst_Free_type_variable,
                      [24,
                       _G_,
                       function(param, custom_printf_545){
                        return caml_call1(to_string$3, custom_printf_545);
                       },
                       0]],
                     cst_Free_type_variable_Vid]),
                  vid,
                  0);
        var x = match$1[1];
        return function(_bB_, _bC_){
         var _bE_ = _bC_, _bD_ = _bB_;
         return return$1(x, _bD_, _bE_);};
       case 7:
        var
         args = t[2],
         tid = t[1],
         _bp_ = function(args){return eval_app(group, tid, args);},
         _bq_ = eval_list(group, venv, args);
        return function(_bx_, _by_){
         var _bA_ = _by_, _bz_ = _bx_;
         return symbol_bind(_bq_, _bp_, _bz_, _bA_);};
       default:
        var
         args$0 = t[3],
         tid$0 = t[2],
         in_group = t[1],
         _br_ = function(args){return eval_app(in_group, tid$0, args);},
         _bs_ = eval_list(group, venv, args$0);
        return function(_bt_, _bu_){
         var _bw_ = _bu_, _bv_ = _bt_;
         return symbol_bind(_bs_, _br_, _bv_, _bw_);};
     }
    }
    function eval_list(group, venv, ts){
     return sequence_defining
             (ts, function(_bc_){return _N_(group, venv, _bc_);});
    }
    function eval_poly_constr(group, venv, c){
     if(-59723313 > c[1]){
      var
       match$0 = c[2],
       t$0 = match$0[2],
       loc = match$0[1],
       _aQ_ =
         function(v){
          var match = caml_call1(Canonical[2][5], v);
          if(0 === match[0]){
           var tab = match[1], _a9_ = tab[1];
           return function(_a__, _a$_){
            var _bb_ = _a$_, _ba_ = _a__;
            return return$1(_a9_, _ba_, _bb_);};
          }
          var desc = match[1];
          return caml_call2(eval_fail(loc, _H_), desc, 0);
         },
       _aR_ = _N_(group, venv, t$0);
      return function(_a5_, _a6_){
       var _a8_ = _a6_, _a7_ = _a5_;
       return symbol_bind(_aR_, _aQ_, _a7_, _a8_);};
     }
     var _aM_ = c[2], match = _aM_[2], s = _aM_[1];
     if(match){
      var
       t = match[1],
       _aN_ =
         function(v){
          var _a0_ = [0, [0, s, [0, caml_call1(Canonical[2][4], v)]], 0];
          return function(_a1_, _a2_){
           var _a4_ = _a2_, _a3_ = _a1_;
           return return$1(_a0_, _a3_, _a4_);};
         },
       _aO_ = _N_(group, venv, t);
      return function(_aW_, _aX_){
       var _aZ_ = _aX_, _aY_ = _aW_;
       return symbol_bind(_aO_, _aN_, _aY_, _aZ_);};
     }
     var _aP_ = [0, [0, s, 0], 0];
     return function(_aS_, _aT_){
      var _aV_ = _aT_, _aU_ = _aS_;
      return return$1(_aP_, _aU_, _aV_);};
    }
    function eval_definition(group, formals, body){
     var
      _aA_ =
        caml_call2
         (Base_List[41],
          formals,
          function(i, x){return [0, x, caml_call1(Canonical[2][1], i)];}),
      venv = Venv[2].call(null, _aA_);
     function _aB_(v){
      var _aH_ = caml_call1(Canonical[4][8], v);
      return function(_aI_, _aJ_){
       var _aL_ = _aJ_, _aK_ = _aI_;
       return return$1(_aH_, _aK_, _aL_);};
     }
     var _aC_ = _N_(group, venv, body);
     return function(_aD_, _aE_){
      var _aG_ = _aE_, _aF_ = _aD_;
      return symbol_bind(_aC_, _aB_, _aF_, _aG_);};
    }
    function eval_app(group, tid, args){
     var
      gid = group[1],
      match = lookup(group, tid),
      body = match[2],
      formals = match[1];
     switch(body[0]){
       case 2:
       case 3:
        var record_or_normal_variant = 1; break;
       default: var record_or_normal_variant = 0;
     }
     var
      cyclic = is_cyclic(group, tid),
      cyclic_no_VR = is_cyclic_with_no_intervening_(group, tid);
     a:
     {
      if(record_or_normal_variant && cyclic) break a;
      if(! cyclic_no_VR){
       var match$0 = caml_call2(Base_List[107], formals, args);
       if(match$0)
        var x = match$0[1], venv = Venv[2].call(null, x);
       else
        var venv = caml_call1(Base[215], cst_apply_incorrect_type_appli);
       return _N_(group, venv, body);
      }
     }
     function _P_(param){
      if(0 === param[0]){
       var r = param[1], _aq_ = caml_call2(Canonical[2][2], r, args);
       return function(_aw_, _ax_){
        var _az_ = _ax_, _ay_ = _aw_;
        return return$1(_aq_, _ay_, _az_);};
      }
      var def = param[1], _ar_ = caml_call2(Canonical[2][3], def, args);
      return function(_as_, _at_){
       var _av_ = _at_, _au_ = _as_;
       return return$1(_ar_, _au_, _av_);};
     }
     function _Q_(param){
      if(param){
       var recurse = param[1];
       return function(_am_, _an_){
        var _ap_ = _an_, _ao_ = _am_;
        return return$1(recurse, _ao_, _ap_);};
      }
      var
       _af_ = eval_definition(group, formals, body),
       _ag_ = [0, gid, tid],
       _ah_ = Defining[4];
      return function(_ai_, _aj_){
       var _al_ = _aj_, _ak_ = _ai_;
       return _ah_(_ag_, _af_, _ak_, _al_);};
     }
     var _R_ = [0, gid, tid], _S_ = Defining[3];
     function _T_(_ab_, _ac_){
      var _ae_ = _ac_, _ad_ = _ab_;
      return _S_(_R_, _ad_, _ae_);
     }
     function _U_(_Z_, ___){
      var _aa_ = ___, _$_ = _Z_;
      return symbol_bind(_T_, _Q_, _$_, _aa_);
     }
     return function(_V_, _W_){
      var _Y_ = _W_, _X_ = _V_;
      return symbol_bind(_U_, _P_, _X_, _Y_);};
    }
    function eval$0(t){
     var
      group = create$3(caml_call1(of_string, cst_top_level), 0),
      venv = Venv[2].call(null, 0),
      _O_ = _N_(group, venv, t),
      v = Defining[5].call(null, _O_);
     return caml_call1(Canonical[4][11], v);
    }
    return [0, , , , , , , , , , , , eval$0];
   }
   var
    Exp = [0],
    include =
      Evaluation
       ([0,
         to_digest$2,
         [0, var$2, recurse$1, apply$1, opaque$0, get_poly_variant$0],
         [0],
         Create]),
    eval$0 = include[12],
    Evaluation_to_digest = Evaluation(Canonical_digest);
   function eval_to_digest(exp){
    var _K_ = Evaluation_to_digest[12].call(null, exp);
    return caml_call1(Canonical_digest[1], _K_);
   }
   function eval_to_digest_string(exp){
    return caml_call1(to_hex, eval_to_digest(exp));
   }
   var
    Not_a_tuple =
      [248, "Bin_shape.For_typerep.Not_a_tuple", runtime.caml_fresh_oo_id(0)],
    _I_ = [0, "shape/src/bin_shape.ml.For_typerep.Not_a_tuple"],
    _J_ = [0, "_none_", 0, -1];
   caml_call4
    (Sexplib0_Sexp_conv[72][1],
     0,
     0,
     Not_a_tuple,
     function(param){
      if(param[1] !== Not_a_tuple)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _J_], 1);
      var arg0_546 = param[2], res0_547 = sexp_of_t$7(arg0_546);
      return [1, [0, _I_, [0, res0_547, 0]]];
     });
   function deconstruct_tuple_exn(t){
    if(4 !== t[0]) throw caml_maybe_attach_backtrace([0, Not_a_tuple, t], 1);
    var ts = t[1];
    return ts;
   }
   var
    Bin_shape =
      [0,
       sexp_of_t$7,
       [0, of_string$1],
       [0, of_string$2],
       [0, of_string],
       [0, of_string$0, to_string$0],
       create$3,
       tuple$1,
       record$1,
       variant$1,
       constr,
       inherit,
       poly_variant$1,
       rec_app,
       top_app,
       var$4,
       basetype$1,
       annotate$1,
       [0, [0, equal$5, t_of_sexp$5, sexp_of_t$7]],
       [0, compare$1, t_of_sexp$1, sexp_of_t$2, to_hex, to_md5, of_md5],
       [0,
        [0, compare$0, sexp_of_t$1, expose],
        [0, compare$2, sexp_of_t$3],
        [0, [0, compare_t0, sexp_of_t0], compare_t0, sexp_of_t0]],
       [0,
        compare_t0,
        sexp_of_t0,
        to_string_hum,
        to_digest$2,
        Exp,
        [0],
        [0,
         Create[1],
         Create[2],
         Create[3],
         Create[4],
         Create[5],
         Create[7],
         Create[6],
         Create[8],
         Create[9],
         Create[10],
         Create[11]]],
       eval$0,
       eval_to_digest,
       eval_to_digest_string,
       [0, deconstruct_tuple_exn]];
   runtime.caml_register_global(182, Bin_shape, "Bin_shape");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
