// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Bonsai_web__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Bonsai_web = [0];
   runtime.caml_register_global(0, Bonsai_web, "Bonsai_web__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai_web__Util
//# unitInfo: Requires: Core, Core__Array, Core__Core_sys, Core__Option, Core__String, Expect_test_collector, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_web_Util$0 = "Bonsai_web__Util",
    cst_bonsai_web$0 = "bonsai_web";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Core_Option = global_data.Core__Option,
    Core_String = global_data.Core__String,
    Core_Array = global_data.Core__Array,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Core_Core_sys = global_data.Core__Core_sys,
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_web_Util$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_web$0);
   caml_call1(Expect_test_collector[6][1], "web/util.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai_web$0, "util.ml");
   var
    is_in_browser = caml_call1(Js_of_ocaml_Js[6][5], Js_of_ocaml_Dom_html[2]),
    match = caml_call1(Core_Core_sys[19], "BENCHMARKS_RUNNER");
   a:
   {
    var
     cst_FIELDSET = "FIELDSET",
     cst_cannot_run_tests_in_a_brow = "cannot run tests in a browser",
     cst_bonsai_web = cst_bonsai_web$0,
     cst_Bonsai_web_Util = cst_Bonsai_web_Util$0;
    if(match && match[1] === "TRUE"){var is_benchmark = 1; break a;}
    var is_benchmark = 0;
   }
   var _a_ = Core[542];
   if(is_in_browser)
    if(is_benchmark)
     var am_running_how = 25748998;
    else if(_a_)
     var
      _b_ = caml_call1(Sexplib0_Sexp_conv[7], cst_cannot_run_tests_in_a_brow),
      am_running_how = caml_call1(Core[255], _b_);
    else
     var am_running_how = 95560584;
   else
    var
     am_running_how = is_benchmark ? -531563232 : _a_ ? 853947087 : 870528546;
   function am_within_disabled_fieldset(event){
    if(25748998 <= am_running_how && 853947087 > am_running_how){
     var _c_ = runtime.caml_js_to_array(event.composedPath());
     return caml_call2
             (Core_Array[36],
              _c_,
              function(element){
               var
                tag_name = caml_call1(Js_of_ocaml_Js[6][10], element.tagName),
                disabled = caml_call1(Js_of_ocaml_Js[6][10], element.disabled),
                match = caml_call2(Core_Option[19], tag_name, disabled);
               if(! match) return 0;
               var
                match$0 = match[1],
                disabled$0 = match$0[2],
                tag_name$0 = match$0[1],
                _d_ =
                  caml_call2
                   (Core_String[138],
                    runtime.caml_string_of_jsstring(tag_name$0),
                    cst_FIELDSET),
                _e_ = _d_ ? disabled$0 | 0 : _d_;
               return _e_;
              });
    }
    return 0;
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai_web);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_web_Util);
   var Bonsai_web_Util = [0, am_running_how, am_within_disabled_fieldset];
   runtime.caml_register_global(26, Bonsai_web_Util, cst_Bonsai_web_Util$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai_web__Import
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Virtual_dom__Effect
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_web_Import = "Bonsai_web__Import",
    cst_bonsai_web = "bonsai_web";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Virtual_dom_Effect = global_data.Virtual_dom__Effect,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_web_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_web);
   caml_call1(Expect_test_collector[6][1], "web/import.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai_web, "import.ml");
   function sequence(e){return [0, Virtual_dom_Effect[2], e];}
   var no_op = Virtual_dom_Effect[1], Event = [0, sequence, no_op];
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai_web);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_web_Import);
   var Bonsai_web_Import = [0, Event];
   runtime.caml_register_global(12, Bonsai_web_Import, cst_Bonsai_web_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai_web__To_incr_dom_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_web_To_incr_dom_int = "Bonsai_web__To_incr_dom_intf",
    cst_bonsai_web = "bonsai_web";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_web_To_incr_dom_int);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_web);
   caml_call1(Expect_test_collector[6][1], "web/to_incr_dom_intf.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai_web, "to_incr_dom_intf.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai_web);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_web_To_incr_dom_int);
   var Bonsai_web_To_incr_dom_intf = [0];
   runtime.caml_register_global
    (11, Bonsai_web_To_incr_dom_intf, cst_Bonsai_web_To_incr_dom_int);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai_web__To_incr_dom
//# unitInfo: Requires: Bonsai, Bonsai__Environment, Bonsai__Input, Bonsai__Lifecycle, Bonsai__Meta, Bonsai__Path, Bonsai__Snapshot, Bonsai__Value, Bonsai_web__To_incr_dom_intf, Core, Core__Type_equal, Expect_test_collector, Incr_dom__Component, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_incr, Virtual_dom__Effect
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_web_To_incr_dom = "Bonsai_web__To_incr_dom",
    cst_bonsai_web = "bonsai_web";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Bonsai = global_data.Bonsai,
    Core = global_data.Core,
    Core_Type_equal = global_data.Core__Type_equal,
    Bonsai_Value = global_data.Bonsai__Value,
    Bonsai_Meta = global_data.Bonsai__Meta,
    Bonsai_Lifecycle = global_data.Bonsai__Lifecycle,
    Virtual_dom_Effect = global_data.Virtual_dom__Effect,
    Incr_dom_Component = global_data.Incr_dom__Component,
    Bonsai_Environment = global_data.Bonsai__Environment,
    Ui_incr = global_data.Ui_incr,
    Bonsai_Path = global_data.Bonsai__Path,
    Bonsai_Snapshot = global_data.Bonsai__Snapshot,
    Bonsai_Input = global_data.Bonsai__Input,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_web_To_incr_dom);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_web);
   caml_call1(Expect_test_collector[6][1], "web/to_incr_dom.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai_web, "to_incr_dom.ml");
   function create(param){return [0, Bonsai_Lifecycle[1][2]];}
   var State = [0, create], _a_ = [0, "Dynamic"], _b_ = [0, "Static"];
   function convert_with_extra(opt, component){
    var
     optimize = opt ? opt[1] : 0,
     fresh = caml_call2(Core_Type_equal[8][3], cst, Core[148]),
     _c_ = caml_call2(Bonsai_Value[21], 4, fresh),
     var$0 = caml_call1(Bonsai[45][2], _c_),
     maybe_optimize = optimize ? Bonsai[45][7] : function(_l_){return _l_;},
     _d_ = caml_call1(component, var$0),
     _e_ = caml_call1(maybe_optimize, caml_call1(Bonsai[45][3], _d_)),
     match = caml_call1(Bonsai[45][6], _e_)[1],
     run = match[7],
     apply_dynamic = match[6],
     apply_static = match[5],
     static_action_type_id = match[4],
     dynamic_action_type_id = match[3],
     model = match[1],
     model_of_sexp = model[5],
     sexp_of_model = model[4],
     equal_model = model[2],
     default_model = model[1],
     Input = [0],
     Model = [0, equal_model, model_of_sexp, sexp_of_model, default_model],
     sexp_of_dynamic_action =
       caml_call1(Bonsai_Meta[2][1][5], dynamic_action_type_id),
     sexp_of_static_action =
       caml_call1(Bonsai_Meta[2][1][5], static_action_type_id);
    function sexp_of_t(x_017){
     if(0 === x_017[0]){
      var
       arg0_003 = x_017[1],
       res0_004 = caml_call1(sexp_of_dynamic_action, arg0_003);
      return [1, [0, _a_, [0, res0_004, 0]]];
     }
     var
      arg0_005 = x_017[1],
      res0_006 = caml_call1(sexp_of_static_action, arg0_005);
     return [1, [0, _b_, [0, res0_006, 0]]];
    }
    var Extra = [0];
    function create(input, param, model, inject){
     function inject_dynamic(a){return caml_call1(inject, [0, a]);}
     function inject_static(a){return caml_call1(inject, [1, a]);}
     var
      environment =
        caml_call3(Bonsai_Environment[2], Bonsai_Environment[1], fresh, input),
      snapshot =
        caml_call6
         (run,
          environment,
          Bonsai_Path[25],
          Ui_incr[2],
          model,
          inject_dynamic,
          inject_static),
      let_syntax_009 = caml_call1(Bonsai_Snapshot[2], snapshot),
      _f_ = caml_call1(Bonsai_Snapshot[1], snapshot),
      let_syntax_010 = caml_call1(Bonsai_Input[3], _f_),
      let_syntax_011 = caml_call1(Bonsai_Snapshot[4], snapshot),
      _g_ = caml_call2(Ui_incr[78][4][21], let_syntax_011, model),
      _h_ = caml_call2(Ui_incr[78][4][21], let_syntax_010, _g_),
      _i_ = caml_call2(Ui_incr[78][4][21], let_syntax_009, _h_);
     return caml_call2
             (Ui_incr[78][4][6],
              _i_,
              function(param){
               var
                _j_ = param[2],
                _k_ = _j_[2],
                model = _k_[2],
                lifecycle = _k_[1],
                input = _j_[1],
                match = param[1],
                extra = match[2],
                view = match[1],
                schedule_event = Virtual_dom_Effect[22][2];
               function apply_action(action, state, param){
                if(0 === action[0]){
                 var action$0 = action[1];
                 return caml_call6
                         (apply_dynamic,
                          inject_dynamic,
                          inject_static,
                          schedule_event,
                          [0, input],
                          model,
                          action$0);
                }
                var action$1 = action[1];
                return caml_call5
                        (apply_static,
                         inject_dynamic,
                         inject_static,
                         schedule_event,
                         model,
                         action$1);
               }
               function on_display(state, param){
                var
                 diff =
                   caml_call2(Bonsai_Lifecycle[1][3], state[1], lifecycle);
                state[1] = lifecycle;
                return caml_call1(Virtual_dom_Effect[22][2], diff);
               }
               return caml_call6
                       (Incr_dom_Component[7],
                        [0, apply_action],
                        0,
                        [0, on_display],
                        extra,
                        model,
                        view);
              });
    }
    return [0, Input, Model, Extra, [0, sexp_of_t], State, create];
   }
   function convert(optimize, component){
    return convert_with_extra
            (optimize,
             caml_call2
              (Bonsai[48][5], component, function(r){return [0, r, 0];}));
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai_web);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_web_To_incr_dom);
   var Bonsai_web_To_incr_dom = [0, convert, convert_with_extra];
   runtime.caml_register_global
    (27, Bonsai_web_To_incr_dom, cst_Bonsai_web_To_incr_dom);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai_web__Effect
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Bonsai, Bonsai_web__Util, Expect_test_collector, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib__String, Ui_effect, Virtual_dom__Effect, Virtual_dom__Vdom
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_web_Effect = "Bonsai_web__Effect",
    cst_bonsai_web = "bonsai_web",
    cst_web_effect_ml = "web/effect.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Bonsai = global_data.Bonsai,
    Virtual_dom_Vdom = global_data.Virtual_dom__Vdom,
    Bonsai_web_Util = global_data.Bonsai_web__Util,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Stdlib_String = global_data.Stdlib__String,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel = global_data.Async_kernel,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Virtual_dom_Effect = global_data.Virtual_dom__Effect,
    Ui_effect = global_data.Ui_effect;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_web_Effect);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_web);
   caml_call1(Expect_test_collector[6][1], cst_web_effect_ml);
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai_web, "effect.ml");
   var
    Ignore = Virtual_dom_Effect[1],
    Many = Virtual_dom_Effect[2],
    symbol_bind = Virtual_dom_Effect[3],
    symbol_map = Virtual_dom_Effect[4],
    bind = Virtual_dom_Effect[5],
    return$0 = Virtual_dom_Effect[6],
    map = Virtual_dom_Effect[7],
    join = Virtual_dom_Effect[8],
    ignore_m = Virtual_dom_Effect[9],
    all = Virtual_dom_Effect[10],
    all_unit = Virtual_dom_Effect[11],
    never = Virtual_dom_Effect[12],
    lazy = Virtual_dom_Effect[13],
    print_s = Virtual_dom_Effect[14],
    of_sync_fun = Virtual_dom_Effect[15],
    Viewport_changed = Virtual_dom_Effect[16],
    Stop_propagation = Virtual_dom_Effect[17],
    Stop_immediate_propagation = Virtual_dom_Effect[18],
    Prevent_default = Virtual_dom_Effect[19],
    sequence_as_sibling = Virtual_dom_Effect[20],
    Define_visibility = Virtual_dom_Effect[21],
    Expert = Virtual_dom_Effect[22],
    Action = [0];
   function handle(param, on_response){
    var
     f = param[2],
     a = param[1],
     _v_ = caml_call1(f, a),
     _w_ =
       caml_call2
        (Async_kernel_Deferred[16][4][3],
         _v_,
         function(result){return caml_call1(on_response, result);});
    return caml_call1(Async_kernel[6], _w_);
   }
   var
    Deferred_fun_arg = [0, Action, handle],
    Deferred_fun = caml_call1(Ui_effect[19], Deferred_fun_arg),
    _a_ = [0, "]", 0],
    cst_data_focus_handle = "[data-focus-handle=";
   function of_deferred_fun(f, a){
    return caml_call1(Deferred_fun[1], [0, a, f]);
   }
   function focus_fun(path){
    var
     t0 =
       runtime.caml_jsstring_of_string
        (caml_call2
          (Stdlib_String[7], cst, [0, cst_data_focus_handle, [0, path, _a_]])),
     t1 = Js_of_ocaml_Dom_html[2],
     element = t1.querySelector(t0),
     match = caml_call1(Js_of_ocaml_Js[5][10], element);
    if(! match) return 0;
    var element$0 = match[1];
    return element$0.focus();
   }
   var
    focus_effect = caml_call1(of_sync_fun, focus_fun),
    cst_focus_effect_for = "focus effect for",
    cst_data_focus_handle$0 = "data-focus-handle",
    _b_ = [0, [0, cst_web_effect_ml, 43, 1210, 1218]],
    _c_ = [0, [0, cst_web_effect_ml, 42, 1169, 1177]],
    cst_element = "element",
    _d_ = [0, [0, cst_web_effect_ml, 51, 1479, 1483]],
    _e_ = [0, [0, cst_web_effect_ml, 51, 1479, 1483]],
    _f_ = [0, [0, cst_web_effect_ml, 51, 1479, 1483]],
    _g_ = [0, [0, cst_web_effect_ml, 50, 1418, 1422]],
    _h_ = [0, [0, cst_web_effect_ml, 50, 1418, 1422]],
    _i_ = [0, [0, cst_web_effect_ml, 50, 1418, 1422]],
    _j_ = [0, [0, cst_web_effect_ml, 50, 1418, 1422]],
    _k_ = [0, [0, cst_web_effect_ml, 50, 1418, 1422]];
   function on_effect(opt, param){
    var
     name_for_testing = opt ? opt[1] : cst_element,
     _t_ = Bonsai_web_Util[1];
    if(25748998 <= _t_ && 853947087 > _t_)
     return caml_call3
             (Bonsai[43][5][1],
              _c_,
              Bonsai[7],
              function(path){
               return caml_call3
                       (Bonsai[43][5][7],
                        _b_,
                        path,
                        function(path){
                         var
                          attr =
                            caml_call2
                             (Virtual_dom_Vdom[1][1], cst_data_focus_handle$0, path);
                         return [0, attr, caml_call1(focus_effect, path)];
                        });
              });
    var
     _u_ = [0, caml_call1(Sexplib0_Sexp_conv[7], name_for_testing), 0],
     print_effect =
       caml_call1
        (print_s,
         [1,
          [0, caml_call1(Sexplib0_Sexp_conv[7], cst_focus_effect_for), _u_]]);
    return caml_call1(Bonsai[6], [0, Virtual_dom_Vdom[1][10], print_effect]);
   }
   function on_activate(name_for_testing, param){
    var _l_ = on_effect(name_for_testing, 0);
    return caml_call3
            (Bonsai[43][5][1],
             _k_,
             _l_,
             function(pattern_syntax_004){
              var
               _m_ =
                 caml_call3
                  (Bonsai[43][5][4],
                   _i_,
                   pattern_syntax_004,
                   function(param){
                    var pattern_syntax_006 = param[2];
                    return pattern_syntax_006;
                   }),
               _n_ = caml_call1(Bonsai[43][5][5], _m_);
              return caml_call3
                      (Bonsai[43][5][1],
                       _j_,
                       _n_,
                       function(effect){
                        var
                         _o_ =
                           caml_call3
                            (Bonsai[43][5][4],
                             _g_,
                             pattern_syntax_004,
                             function(param){
                              var pattern_syntax_005 = param[1];
                              return pattern_syntax_005;
                             }),
                         _p_ = caml_call1(Bonsai[43][5][5], _o_);
                        return caml_call3
                                (Bonsai[43][5][1],
                                 _h_,
                                 _p_,
                                 function(attr){
                                  var _q_ = caml_call4(Bonsai[38][3], [0, effect], 0, 0, 0);
                                  return caml_call3
                                          (Bonsai[43][5][1],
                                           _f_,
                                           _q_,
                                           function(pattern_syntax_007){
                                            var
                                             _r_ =
                                               caml_call3
                                                (Bonsai[43][5][4],
                                                 _d_,
                                                 pattern_syntax_007,
                                                 function(param){return 0;}),
                                             _s_ = caml_call1(Bonsai[43][5][5], _r_);
                                            return caml_call3
                                                    (Bonsai[43][5][1],
                                                     _e_,
                                                     _s_,
                                                     function(param){return caml_call1(Bonsai[43][1], attr);});
                                           });
                                 });
                       });
             });
   }
   var Focus = [0, on_effect, on_activate];
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai_web);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_web_Effect);
   var
    Bonsai_web_Effect =
      [0,
       Ignore,
       Many,
       symbol_bind,
       symbol_map,
       bind,
       return$0,
       map,
       join,
       ignore_m,
       all,
       all_unit,
       never,
       lazy,
       print_s,
       of_sync_fun,
       Viewport_changed,
       Stop_propagation,
       Stop_immediate_propagation,
       Prevent_default,
       sequence_as_sibling,
       Define_visibility,
       Expert,
       of_deferred_fun,
       Focus];
   runtime.caml_register_global(40, Bonsai_web_Effect, cst_Bonsai_web_Effect);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai_web__Forward_performance_entries
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_kernel__Ivar, Base__Random, Bonsai__Graph_info, Bonsai__Instrumentation, Bonsai_protocol, Core, Core__Array, Core__Core_bin_prot, Core__Error, Core__Int, Core__Option, Core__Or_error, Core__Time_ns, Expect_test_collector, Javascript_profiling, Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__File, Js_of_ocaml__Firebug, Js_of_ocaml__Js, Js_of_ocaml__Worker, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Reversed_list, Stdlib__Array, Stdlib__List, Stdlib__String, Uuid
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$8 = "",
    cst$6 = "/",
    cst$7 = ":",
    cst_Bonsai_web_Forward_perform = "Bonsai_web__Forward_performance_entries",
    cst_before$1 = "before",
    cst_bonsai_bug_session_uuid = "bonsai-bug-session-uuid",
    cst_bonsai_web = "bonsai_web",
    cst_https$1 = "https://",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    entry_types = [0, "measure", 0],
    cst$3 = cst$6,
    cst$4 = cst$7,
    cst$5 = cst$8,
    cst$0 = cst$6,
    cst$1 = cst$7,
    cst$2 = cst$8,
    cst = cst$8,
    Js_of_ocaml_Firebug = global_data.Js_of_ocaml__Firebug,
    Core_Or_error = global_data.Core__Or_error,
    Core_Error = global_data.Core__Error,
    Core = global_data.Core,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Javascript_profiling = global_data.Javascript_profiling,
    Core_Time_ns = global_data.Core__Time_ns,
    Async_kernel = global_data.Async_kernel,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Uuid = global_data.Uuid,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Core_Option = global_data.Core__Option,
    Bonsai_Graph_info = global_data.Bonsai__Graph_info,
    Core_Int = global_data.Core__Int,
    Stdlib_String = global_data.Stdlib__String,
    Bonsai_Instrumentation = global_data.Bonsai__Instrumentation,
    Base_Random = global_data.Base__Random,
    Core_Array = global_data.Core__Array,
    Reversed_list = global_data.Reversed_list,
    Bonsai_protocol = global_data.Bonsai_protocol,
    Core_Core_bin_prot = global_data.Core__Core_bin_prot,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Js_of_ocaml_File = global_data.Js_of_ocaml__File,
    Js_of_ocaml_Worker = global_data.Js_of_ocaml__Worker,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Array = global_data.Stdlib__Array,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_web_Forward_perform);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_web);
   caml_call1
    (Expect_test_collector[6][1], "web/forward_performance_entries.ml");
   caml_call2
    (Ppx_inline_test_lib[5], cst_bonsai_web, "forward_performance_entries.ml");
   var
    t0 = Js_of_ocaml_Js[52][1],
    performanceObserver = t0.PerformanceObserver,
    _a_ = [0, "')", 0],
    cst_importScripts = "importScripts('",
    _b_ = [0, "application/javascript"],
    cst_https = cst_https$1,
    cst_Re_using_existing_session_ =
      "Re-using existing session uuid. If you no longer have the debugger window open, you can use the following link:",
    cst_https$0 = cst_https$1,
    cst_before = cst_before$1,
    cst_after = "after",
    cst_before$0 = cst_before$1,
    cst_Found_existing_session_uui =
      "Found existing session uuid, but could not parse it; generating a new one.",
    cst_No_prior_session_uuid_foun =
      "No prior session uuid found; generating a new one.",
    cst_No_session_storage_generat =
      "No session storage; generating new session uuid";
   function send_message(t, message){t[2] = [0, message, t[2]]; return 0;}
   function uuid_to_url(host, port, uuid){
    var
     _l_ = [0, cst$0, [0, caml_call1(Uuid[11], uuid), 0]],
     _m_ =
       [0,
        cst_https,
        [0, host, [0, cst$1, [0, caml_call1(Core_Int[84], port), _l_]]]];
    return caml_call2(Stdlib_String[7], cst$2, _m_);
   }
   function generate_uuid(param){
    var random_state = Base_Random[18][1];
    return caml_call1(Uuid[46], random_state);
   }
   function instrument(host, port, worker_name, component){
    var
     t23 = Js_of_ocaml_Dom_html[8],
     match = caml_call1(Js_of_ocaml_Js[6][10], t23.sessionStorage);
    if(match){
     var
      storage = match[1],
      _d_ = storage.getItem(cst_bonsai_bug_session_uuid),
      match$0 = caml_call1(Js_of_ocaml_Js[5][10], _d_);
     if(match$0){
      var
       uuid_string = match$0[1],
       match$1 =
         caml_call1
          (Core_Option[52],
           function(param){
            return caml_call1(Uuid[10], caml_string_of_jsstring(uuid_string));
           });
      if(match$1){
       var uuid = match$1[1];
       caml_call1(Core[31], cst_Re_using_existing_session_);
       var _e_ = uuid_to_url(host, port, uuid);
       caml_call1(Core[31], _e_);
       var reused_uuid = 1, uuid$0 = uuid;
      }
      else{
       caml_call1(Core[31], cst_Found_existing_session_uui);
       var
        uuid$1 = generate_uuid(0),
        t30 = caml_jsstring_of_string(caml_call1(Uuid[11], uuid$1));
       storage.setItem(cst_bonsai_bug_session_uuid, t30);
       var reused_uuid = 0, uuid$0 = uuid$1;
      }
     }
     else{
      caml_call1(Core[31], cst_No_prior_session_uuid_foun);
      var
       uuid$2 = generate_uuid(0),
       t27 = caml_jsstring_of_string(caml_call1(Uuid[11], uuid$2));
      storage.setItem(cst_bonsai_bug_session_uuid, t27);
      var reused_uuid = 0, uuid$0 = uuid$2;
     }
    }
    else{
     caml_call1(Core[31], cst_No_session_storage_generat);
     var uuid$3 = generate_uuid(0), reused_uuid = 0, uuid$0 = uuid$3;
    }
    if(1 - reused_uuid){
     var
      url = uuid_to_url(host, port, uuid$0),
      t34 = caml_call1(Js_of_ocaml_Js[5][2], "noopener"),
      t32 = caml_jsstring_of_string(url),
      t35 = Js_of_ocaml_Dom_html[8];
     t35.open(t32, "bonsai-bug", t34);
    }
    var
     graph_info_dirty = [0, 0],
     graph_info = [0, Bonsai_Graph_info[12]],
     stop_ivar = caml_call1(Async_kernel_Ivar[12], 0),
     got_first_message = [0, 0],
     _f_ =
       [0,
        cst_https$0,
        [0,
         host,
         [0,
          cst$4,
          [0, caml_call1(Core_Int[84], port), [0, cst$3, [0, worker_name, 0]]]]]],
     url$0 = caml_call2(Stdlib_String[7], cst$5, _f_),
     _c_ =
       caml_call2
        (Stdlib_String[7], cst, [0, cst_importScripts, [0, url$0, _a_]]),
     blob = caml_call3(Js_of_ocaml_File[1], _b_, 0, _c_),
     t7 = Js_of_ocaml_Dom_html[8],
     t9 = t7.URL,
     blob_url = t9.createObjectURL(blob),
     worker =
       caml_call1(Js_of_ocaml_Worker[1], caml_string_of_jsstring(blob_url)),
     result = [0, 0, 0, worker],
     t11 =
       caml_call1
        (Js_of_ocaml_Dom[10],
         function(message){
          result[1] = 1;
          message.data;
          if(1 - got_first_message[1]) got_first_message[1] = 1;
          send_message(result, [0, uuid$0]);
          graph_info_dirty[1] = 1;
          var
           stop = caml_call1(Async_kernel_Ivar[18], stop_ivar),
           _j_ = caml_call1(Core_Time_ns[1][81], 0.2);
          caml_call5
           (Async_kernel[7],
            0,
            [0, stop],
            0,
            _j_,
            function(param){
             if(graph_info_dirty[1]){
              graph_info_dirty[1] = 0;
              send_message(result, [1, [0, graph_info[1]]]);
             }
             if(result[1]){
              var
               message = [3, caml_call1(Reversed_list[3], result[2])],
               js_string =
                 runtime.caml_jsbytes_of_string
                  (caml_call2
                    (Core_Core_bin_prot[1][1], Bonsai_protocol[5][8], message)),
               t16 = result[3];
              t16.postMessage(js_string);
              result[2] = 0;
             }
             caml_call1(Javascript_profiling[2], 0);
             return caml_call1(Javascript_profiling[3], 0);
            });
          function f(performance_observer_entry_lis, observer){
           observer.takeRecords();
           var
            _k_ =
              runtime.caml_js_to_array
               (performance_observer_entry_lis.getEntries());
           return caml_call2
                   (Core_Array[32],
                    _k_,
                    function(entry){
                     var
                      label = caml_string_of_jsstring(entry.name),
                      match = caml_call1(Bonsai_Instrumentation[2], label);
                     if(match)
                      var node_id = match[1], label$0 = [0, 370492634, node_id];
                     else
                      var label$0 = [0, -912009552, label];
                     var
                      entry_type = runtime.caml_string_of_jsbytes(entry.entryType),
                      start_time = entry.startTime,
                      duration = entry.duration,
                      entry$0 = [0, label$0, entry_type, start_time, duration];
                     return send_message(result, [1, [1, entry$0]]);
                    });
          }
          var
           _i_ =
             caml_call2(Stdlib_List[20], caml_jsstring_of_string, entry_types),
           entry_types$0 =
             runtime.caml_js_from_array(caml_call1(Stdlib_Array[11], _i_)),
           performance_observer_init = {};
          performance_observer_init.entryTypes = entry_types$0;
          var
           t3 = runtime.caml_js_wrap_callback(f),
           performance_observer = new performanceObserver(t3);
          performance_observer.observe(performance_observer_init);
          caml_call2
           (Async_kernel_Deferred[4],
            stop,
            function(param){
             performance_observer.disconnect();
             caml_call1(Javascript_profiling[2], 0);
             caml_call1(Javascript_profiling[3], 0);
             result[2] = 0;
             var t17 = result[3];
             return t17.terminate();
            });
          return Js_of_ocaml_Js[8];
         });
    worker.onmessage = t11;
    var
     component$0 =
       caml_call2
        (Bonsai_Graph_info[13],
         component,
         function(gi){graph_info[1] = gi; graph_info_dirty[1] = 1; return 0;}),
     instrumented_computation =
       caml_call3
        (Bonsai_Instrumentation[1],
         component$0,
         function(s){
          var _h_ = caml_call2(Core[17], s, cst_before$0);
          return caml_call1(Javascript_profiling[4][1], _h_);
         },
         function(s){
          var
           before = caml_call2(Core[17], s, cst_before),
           after = caml_call2(Core[17], s, cst_after);
          caml_call1(Javascript_profiling[4][1], after);
          return caml_call3(Javascript_profiling[4][2], s, before, after);
         });
    function shutdown(param){
     return caml_call2(Async_kernel_Ivar[15], stop_ivar, 0);
    }
    function shutdown$0(param){
     var match = caml_call2(Core_Or_error[33], 0, shutdown);
     if(0 === match[0]) return 0;
     var e = match[1], _g_ = caml_call1(Core_Error[6], e);
     return caml_call2(Core[251], 0, _g_);
    }
    var
     t13 =
       caml_call1
        (Js_of_ocaml_Dom[10],
         function(error_message){
          var t39 = Js_of_ocaml_Firebug[1];
          t39.warn(error_message);
          shutdown$0(0);
          return Js_of_ocaml_Js[8];
         }),
     t14 = result[3];
    t14.onerror = t13;
    return [0, instrumented_computation, shutdown$0];
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai_web);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_web_Forward_perform);
   var Bonsai_web_Forward_performance = [0, instrument];
   runtime.caml_register_global
    (85, Bonsai_web_Forward_performance, cst_Bonsai_web_Forward_perform);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai_web__Rpc_effect
//# unitInfo: Requires: Async_durable, Async_js__Rpc, Async_kernel, Async_kernel__Bvar, Async_kernel__Deferred, Async_kernel__Deferred_or_error, Async_kernel__Monitor, Async_kernel__Pipe, Async_rpc_kernel__Persistent_connection, Async_rpc_kernel__Pipe_transport, Async_rpc_kernel__Rpc, Async_rpc_kernel__Versioned_rpc, Babel__Caller, Bonsai, Bonsai_web__Effect, Bus, CamlinternalLazy, Core, Core__Error, Core__Map, Core__Memo, Core__Option, Core__Or_error, Core__Result, Core__String, Core__Time_ns, Core__Unique_id, Core__Unit, Expect_test_collector, Polling_state_rpc, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record, Ui_effect, Ui_incr, Uri
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_web_Rpc_effect = "Bonsai_web__Rpc_effect",
    cst_Connected = "Connected",
    cst_Connecting = "Connecting",
    cst_Disconnected = "Disconnected",
    cst_Failed_to_connect = "Failed_to_connect",
    cst_Initial = "Initial",
    cst_RPC_not_handled_because_no$1 =
      "RPC not handled because no connector has been provided.",
    cst_State = "State",
    cst_bonsai_web = "bonsai_web",
    cst_clock$0 = "clock",
    cst_connected = "connected",
    cst_connecting = "connecting",
    cst_connecting_since$0 = "connecting_since",
    cst_disconnected = "disconnected",
    cst_failed_to_connect = "failed_to_connect",
    cst_inflight_queries$0 = "inflight_queries",
    cst_inflight_query_key = "inflight_query_key",
    cst_initial = "initial",
    cst_last_error$0 = "last_error",
    cst_last_ok_response$0 = "last_ok_response",
    cst_query = "query",
    cst_self_ws_server$1 = "self-ws-server",
    cst_state$0 = "state",
    cst_web_rpc_effect_ml = "web/rpc_effect.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_033 = "web/rpc_effect.ml.t",
    error_source_147 = "web/rpc_effect.ml.Status.State.t",
    error_source_171 = "web/rpc_effect.ml.Status.Model.state",
    error_source_185 = "web/rpc_effect.ml.Status.Model.t",
    Ui_incr = global_data.Ui_incr,
    Core_Option = global_data.Core__Option,
    Bonsai = global_data.Bonsai,
    Core_Time_ns = global_data.Core__Time_ns,
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Core_Error = global_data.Core__Error,
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Async_kernel = global_data.Async_kernel,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Ui_effect = global_data.Ui_effect,
    Polling_state_rpc = global_data.Polling_state_rpc,
    Bonsai_web_Effect = global_data.Bonsai_web__Effect,
    Babel_Caller = global_data.Babel__Caller,
    Core_Map = global_data.Core__Map,
    Assert_failure = global_data.Assert_failure,
    Core_Or_error = global_data.Core__Or_error,
    Uri = global_data.Uri,
    Async_js_Rpc = global_data.Async_js__Rpc,
    Core_String = global_data.Core__String,
    Async_rpc_kernel_Persistent_co =
      global_data.Async_rpc_kernel__Persistent_connection,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Core_Unit = global_data.Core__Unit,
    Async_rpc_kernel_Versioned_rpc =
      global_data.Async_rpc_kernel__Versioned_rpc,
    Async_durable = global_data.Async_durable,
    Core_Result = global_data.Core__Result,
    Async_rpc_kernel_Pipe_transpor =
      global_data.Async_rpc_kernel__Pipe_transport,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Bus = global_data.Bus,
    Async_kernel_Bvar = global_data.Async_kernel__Bvar,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Memo = global_data.Core__Memo,
    Core_Unique_id = global_data.Core__Unique_id;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_web_Rpc_effect);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_web);
   caml_call1(Expect_test_collector[6][1], cst_web_rpc_effect_ml);
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai_web, "rpc_effect.ml");
   var
    Custom = [0],
    Where_to_connect = [0, Custom],
    cst_BUG_Skipped_computing_Rvar =
      "BUG: Skipped computing Rvar result because it has already been computed.";
   function create(f){return [0, 0, f, caml_call1(Async_kernel_Bvar[3], 0)];}
   function invalidate(t){t[1] = 0; return 0;}
   function return_result(t, result){
    if(0 === result[0]){
     var value = result[1];
     t[1] = [0, value];
     caml_call2(Async_kernel_Bvar[5], t[3], [0, value]);
     var _c$_ = [0, value];
    }
    else{
     var e = result[1];
     t[1] = 0;
     caml_call2(Async_kernel_Bvar[5], t[3], [1, e]);
     var _c$_ = [1, e];
    }
    return caml_call1(Async_kernel_Deferred[12], _c$_);
   }
   function contents(t){
    var match = t[1];
    if(typeof match !== "number"){
     var value = match[1];
     return caml_call1(Async_kernel_Deferred_or_error[13], value);
    }
    if(match) return caml_call1(Async_kernel_Bvar[4], t[3]);
    t[1] = 1;
    var _c9_ = caml_call6(Async_kernel_Monitor[18], 0, 0, 0, 0, 0, t[2]);
    return caml_call2
            (Async_kernel[22][2],
             _c9_,
             function(param){
              if(0 !== param[0]){
               var e = param[1];
               return return_result(t, [1, e]);
              }
              var value = param[1], match = t[1];
              if(typeof match === "number")
               return match ? return_result(t, [0, value]) : contents(t);
              var
               value$0 = match[1],
               _c__ =
                 caml_call1
                  (Sexplib0_Sexp_conv[7], cst_BUG_Skipped_computing_Rvar);
              caml_call2(Core[251], 0, _c__);
              return return_result(t, [0, value$0]);
             });
   }
   var
    Rvar = [0, create, invalidate, contents],
    _a_ = [0, cst_web_rpc_effect_ml, 128, 3840, 3885],
    _b_ = [0, cst_web_rpc_effect_ml, 138, 4240, 4298];
   function persistent_connection(Conn, connection){
    var
     menu =
       caml_call1
        (Rvar[1],
         function(param){
          var _c8_ = caml_call1(Conn[4], connection);
          return caml_call2
                  (Async_kernel[22][2],
                   _c8_,
                   function(connection){
                    return caml_call1
                            (Async_rpc_kernel_Versioned_rpc[1][3], connection);
                   });
         }),
     _c7_ = caml_call1(Conn[5], connection);
    caml_call4
     (Bus[20],
      0,
      _c7_,
      _a_,
      function(param){
       if(typeof param === "number" && param)
        return caml_call1(Rvar[2], menu);
       return 0;
      });
    return [1, Conn, connection, menu];
   }
   function async_durable(connection){
    var
     menu =
       caml_call1
        (Rvar[1],
         function(param){
          return caml_call2
                  (Async_durable[3],
                   connection,
                   Async_rpc_kernel_Versioned_rpc[1][3]);
         }),
     _c5_ = caml_call1(Async_durable[4], connection);
    caml_call4
     (Bus[20],
      0,
      _c5_,
      _b_,
      function(is_intact){
       var _c6_ = 1 - is_intact;
       return _c6_ ? caml_call1(Rvar[2], menu) : _c6_;
      });
    return [0, connection, menu];
   }
   function for_test(implementations, connection_state){
    var
     to_server = caml_call3(Async_kernel_Pipe[7], 0, 0, 0),
     to_client = caml_call3(Async_kernel_Pipe[7], 0, 0, 0);
    function one_connection(implementations, pipe_to, pipe_from){
     var
      transport =
        caml_call3
         (Async_rpc_kernel_Pipe_transpor[2],
          Async_rpc_kernel_Pipe_transpor[1][1],
          pipe_to[1],
          pipe_from[2]),
      _c3_ =
        caml_call8
         (Async_rpc_kernel_Rpc[5][4],
          implementations,
          connection_state,
          0,
          0,
          0,
          0,
          0,
          transport);
     return caml_call2
             (Async_kernel[22][2],
              _c3_,
              function(conn){
               var _c4_ = caml_call1(Core_Result[33], conn);
               return caml_call1(Async_kernel[19], _c4_);
              });
    }
    var
     _c1_ = one_connection([0, implementations], to_server, to_client),
     _c2_ =
       caml_call2
        (Async_kernel[22][2],
         _c1_,
         function(server_conn){
          return caml_call1(Async_rpc_kernel_Rpc[5][11], server_conn);
         });
    caml_call1(Async_kernel[6], _c2_);
    var connection = one_connection(0, to_client, to_server);
    return [2,
            connection,
            caml_call1
             (Rvar[1],
              function(param){
               return caml_call2
                       (Async_kernel[22][2],
                        connection,
                        function(connection){
                         return caml_call1
                                 (Async_rpc_kernel_Versioned_rpc[1][3], connection);
                        });
              })];
   }
   var cst_RPC_not_handled_because_no = cst_RPC_not_handled_because_no$1;
   function with_connection(f, where_to_connect, callback){
    try{var val = caml_call1(f, where_to_connect);}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     return caml_call2(Async_kernel_Deferred_or_error[22], 0, e);
    }
    if(typeof val === "number")
     return caml_call1
             (Async_kernel_Deferred_or_error[26],
              cst_RPC_not_handled_because_no);
    switch(val[0]){
      case 0:
       var connection = val[1];
       return caml_call2(Async_durable[3], connection, callback);
      case 1:
       var
        connection$0 = val[2],
        Conn = val[1],
        _c0_ = caml_call1(Conn[4], connection$0);
       return caml_call2
               (Async_kernel[22][2],
                _c0_,
                function(connection){return caml_call1(callback, connection);});
      default:
       var connection$1 = val[1];
       return caml_call2
               (Async_kernel[22][2],
                connection$1,
                function(connection){return caml_call1(callback, connection);});
    }
   }
   var
    cst_BUG_no_bonsai_rpc_handler_ = "BUG: no bonsai-rpc handler installed",
    connector_var =
      caml_call4
       (Bonsai[41][1],
        0,
        "Bonsai_web.Rpc_effect.connector_var",
        function(param){
         return caml_call1(Core[5], cst_BUG_no_bonsai_rpc_handler_);
        },
        0),
    cst_self_ws_server = cst_self_ws_server$1;
   function with_connector(connector, computation){
    var _cZ_ = caml_call1(Bonsai[1][1], connector);
    return caml_call3(Bonsai[41][3], connector_var, _cZ_, computation);
   }
   var
    _c_ =
      [246,
       function(param){
        var
         _cY_ =
           caml_call8
            (Async_rpc_kernel_Persistent_co[1][3],
             cst_self_ws_server,
             0,
             0,
             0,
             0,
             function(param){
              return caml_call5(Async_js_Rpc[1][18], 0, 0, 0, 0, 0);
             },
             [0, Core_Unit[26], Core_Unit[16]],
             Async_kernel_Deferred_or_error[13]);
        return persistent_connection(Async_rpc_kernel_Persistent_co[1], _cY_);
       }],
    cst_self_ws_server$0 = cst_self_ws_server$1;
   function self_connector(param){
    var _cX_ = runtime.caml_obj_tag(_c_);
    if(250 === _cX_) return _c_[1];
    if(246 !== _cX_ && 244 !== _cX_) return _c_;
    return caml_call1(CamlinternalLazy[2], _c_);
   }
   var
    _d_ = Core_String[153],
    _e_ = _d_[1],
    _f_ = Core_String[152],
    _g_ = _f_[1],
    url_connector =
      caml_call2
       (Core_Memo[4],
        [0,
         Core_String[132],
         Core_String[133],
         Core_String[134],
         Core_String[135],
         Core_String[136],
         Core_String[137],
         Core_String[138],
         Core_String[139],
         Core_String[140],
         Core_String[141],
         Core_String[142],
         Core_String[143],
         Core_String[144],
         Core_String[145],
         Core_String[146],
         Core_String[151],
         Core_String[147],
         Core_String[148],
         Core_String[149],
         Core_String[150],
         [0,
          [0, _g_[10], _g_[11]],
          _f_[2],
          _f_[3],
          _f_[42],
          _f_[4],
          _f_[5],
          _f_[6],
          _f_[7],
          _f_[8],
          _f_[9],
          _f_[10],
          _f_[11],
          _f_[12],
          _f_[13],
          _f_[14],
          _f_[15],
          _f_[16],
          _f_[17],
          _f_[18],
          _f_[19],
          _f_[20],
          _f_[21],
          _f_[22],
          _f_[23],
          _f_[24],
          _f_[25],
          _f_[26],
          _f_[27],
          _f_[28],
          _f_[29],
          _f_[30],
          _f_[31],
          _f_[32],
          _f_[33],
          _f_[34],
          _f_[35],
          _f_[36],
          _f_[37],
          _f_[38],
          _f_[39],
          _f_[40]],
         [0,
          [0, _e_[2], _e_[11]],
          _d_[2],
          _d_[3],
          _d_[27],
          _d_[4],
          _d_[5],
          _d_[6],
          _d_[7],
          _d_[8],
          _d_[9],
          _d_[10],
          _d_[11],
          _d_[12],
          _d_[13],
          _d_[14],
          _d_[15],
          _d_[16],
          _d_[17],
          _d_[18],
          _d_[19],
          _d_[20],
          _d_[21],
          _d_[22],
          _d_[23],
          _d_[24],
          _d_[25]]],
        function(url){
         var
          _cV_ =
            caml_call8
             (Async_rpc_kernel_Persistent_co[1][3],
              cst_self_ws_server$0,
              0,
              0,
              0,
              0,
              function(url){
               var _cW_ = [0, caml_call1(Uri[7], url)];
               return caml_call5(Async_js_Rpc[1][18], _cW_, 0, 0, 0, 0);
              },
              [0, Core_String[138], Core_String[128]],
              function(param){
               return caml_call1(Async_kernel_Deferred_or_error[13], url);
              });
         return persistent_connection(Async_rpc_kernel_Persistent_co[1], _cV_);
        }),
    _h_ = [0, "refresh"],
    _i_ = [0, "inflight_query"],
    _j_ = [0, cst_last_error$0],
    _k_ = [0, cst_last_ok_response$0];
   function is_test_fallback(connector){
    return typeof connector === "number" ? 1 : 0;
   }
   function sexp_of_t(of_query_012, of_response_013, param){
    var
     refresh_029 = param[4],
     inflight_query_027 = param[3],
     last_error_021 = param[2],
     last_ok_response_015 = param[1],
     arg_030 = caml_call1(Sexplib0_Sexp_conv[23], refresh_029),
     bnds_014 = [0, [1, [0, _h_, [0, arg_030, 0]]], 0],
     arg_028 = caml_call2(Core[466], of_query_012, inflight_query_027),
     bnds_014$0 = [0, [1, [0, _i_, [0, arg_028, 0]]], bnds_014],
     arg_022 =
       caml_call2
        (Core[466],
         function(param){
          var
           arg1_024 = param[2],
           arg0_023 = param[1],
           res0_025 = caml_call1(of_query_012, arg0_023),
           res1_026 = caml_call1(Core_Error[6], arg1_024);
          return [1, [0, res0_025, [0, res1_026, 0]]];
         },
         last_error_021),
     bnds_014$1 = [0, [1, [0, _j_, [0, arg_022, 0]]], bnds_014$0],
     arg_016 =
       caml_call2
        (Core[466],
         function(param){
          var
           arg1_018 = param[2],
           arg0_017 = param[1],
           res0_019 = caml_call1(of_query_012, arg0_017),
           res1_020 = caml_call1(of_response_013, arg1_018);
          return [1, [0, res0_019, [0, res1_020, 0]]];
         },
         last_ok_response_015),
     bnds_014$2 = [0, [1, [0, _k_, [0, arg_016, 0]]], bnds_014$1];
    return [1, bnds_014$2];
   }
   var
    Poll_result = [0, sexp_of_t],
    create$0 = Bonsai[39][1],
    _l_ = [0, [0, cst_web_rpc_effect_ml, 281, 9149, 9153]],
    _m_ = [0, [0, cst_web_rpc_effect_ml, 280, 9092, 9096]];
   function lookup(q_mod, memo, query){
    var _cU_ = caml_call3(Bonsai[39][2], q_mod, memo, query);
    return caml_call3
            (Bonsai[43][5][1],
             _m_,
             _cU_,
             function(res){
              return caml_call3
                      (Bonsai[43][5][7],
                       _l_,
                       res,
                       function(param){
                        if(! param) return [0, 0, 0, 0, Bonsai_web_Effect[1]];
                        var x = param[1];
                        return x;
                       });
             });
   }
   var
    Inflight_query_key = caml_call1(Core_Unique_id[1], 0),
    cst_RPC_not_handled_because_no$0 = cst_RPC_not_handled_because_no$1,
    cst_inflight_queries = cst_inflight_queries$0,
    cst_last_error = cst_last_error$0,
    cst_last_ok_response = cst_last_ok_response$0,
    _n_ = [0, cst_inflight_queries$0],
    _o_ = [0, cst_last_error$0],
    _p_ = [0, cst_last_ok_response$0],
    _q_ = [0, cst_inflight_query_key],
    _r_ = [0, "response"],
    _s_ = [0, cst_query],
    _t_ = [0, "Finish"],
    _u_ = [0, cst_inflight_query_key],
    _v_ = [0, cst_query],
    _w_ = [0, "Start"],
    _x_ = [0, [0, cst_web_rpc_effect_ml, 411, 13332, 13334]],
    _y_ = [0, [0, cst_web_rpc_effect_ml, 410, 13260, 13262]],
    _z_ = [0, [0, cst_web_rpc_effect_ml, 410, 13260, 13262]],
    _A_ = [0, [0, cst_web_rpc_effect_ml, 410, 13260, 13262]],
    _B_ = [0, [0, cst_web_rpc_effect_ml, 391, 12686, 12688]],
    _C_ = [0, [0, cst_web_rpc_effect_ml, 391, 12686, 12688]],
    _D_ = [0, 0],
    _E_ = [0, cst_web_rpc_effect_ml, 406, 7],
    _F_ = [0, cst_web_rpc_effect_ml, 407, 13197, 13206],
    _G_ = [0, [0, cst_web_rpc_effect_ml, 406, 13163, 13170]],
    _H_ = [0, [0, cst_web_rpc_effect_ml, 403, 13019, 13027]],
    _I_ = [0, [0, cst_web_rpc_effect_ml, 402, 12991, 12997]],
    _J_ = [0, [0, cst_web_rpc_effect_ml, 391, 12686, 12688]],
    _K_ = [0, [0, cst_web_rpc_effect_ml, 387, 12611, 12615]],
    _L_ = [0, [0, cst_web_rpc_effect_ml, 386, 12583, 12585]],
    _M_ = [0, [0, cst_web_rpc_effect_ml, 385, 12511, 12513]],
    _N_ = [0, [0, cst_web_rpc_effect_ml, 385, 12511, 12513]],
    _O_ = [0, [0, cst_web_rpc_effect_ml, 385, 12511, 12513]],
    _P_ = [0, [0, cst_web_rpc_effect_ml, 379, 12370, 12374]],
    _Q_ = [0, [0, cst_web_rpc_effect_ml, 378, 12349, 12351]],
    _R_ = [0, [0, cst_web_rpc_effect_ml, 363, 11602, 11606]],
    _S_ = [0, [0, cst_web_rpc_effect_ml, 362, 11583, 11585]],
    _T_ = [0, [0, cst_web_rpc_effect_ml, 335, 10530, 10532]],
    _U_ = [0, [0, cst_web_rpc_effect_ml, 335, 10530, 10532]],
    _V_ = [0, [0, cst_web_rpc_effect_ml, 335, 10530, 10532]],
    _W_ = [0, [0, cst_web_rpc_effect_ml, 335, 10530, 10532]],
    _X_ = [0, [0, cst_web_rpc_effect_ml, 335, 10530, 10532]],
    _Y_ = [0, [0, cst_web_rpc_effect_ml, 436, 14311, 14315]],
    _Z_ = [0, [0, cst_web_rpc_effect_ml, 436, 14311, 14315]],
    ___ = [0, [0, cst_web_rpc_effect_ml, 436, 14311, 14315]],
    _$_ = [0, [0, cst_web_rpc_effect_ml, 435, 14251, 14255]],
    _aa_ = [0, [0, cst_web_rpc_effect_ml, 435, 14251, 14255]],
    _ab_ = [0, [0, cst_web_rpc_effect_ml, 435, 14251, 14255]],
    _ac_ = [0, [0, cst_web_rpc_effect_ml, 435, 14251, 14255]],
    _ad_ = [0, [0, cst_web_rpc_effect_ml, 435, 14251, 14255]],
    _ae_ = [0, [0, cst_web_rpc_effect_ml, 447, 14660, 14664]],
    _af_ = [0, [0, cst_web_rpc_effect_ml, 446, 14591, 14595]],
    _ag_ = [0, [0, cst_web_rpc_effect_ml, 468, 15433, 15437]],
    _ah_ = [0, [0, cst_web_rpc_effect_ml, 467, 15372, 15376]],
    _ai_ = [0, [0, cst_web_rpc_effect_ml, 482, 15833, 15837]],
    _aj_ = [0, [0, cst_web_rpc_effect_ml, 481, 15766, 15770]],
    _ak_ = [0, [0, cst_web_rpc_effect_ml, 525, 16796, 16800]],
    _al_ = [0, [0, cst_web_rpc_effect_ml, 524, 16735, 16739]],
    _am_ = [0, [0, cst_web_rpc_effect_ml, 547, 17291, 17295]],
    _an_ = [0, [0, cst_web_rpc_effect_ml, 546, 17224, 17228]],
    _ao_ = [0, [0, cst_web_rpc_effect_ml, 591, 19027, 19031]],
    _ap_ = [0, [0, cst_web_rpc_effect_ml, 586, 18730, 18734]],
    _aq_ = [0, [0, cst_web_rpc_effect_ml, 586, 18730, 18734]],
    _ar_ = [0, [0, cst_web_rpc_effect_ml, 586, 18730, 18734]],
    _as_ = [0, 0],
    _at_ = [0, 0],
    _au_ = [0, [0, cst_web_rpc_effect_ml, 580, 18486, 18492]],
    _av_ = [0, [0, cst_web_rpc_effect_ml, 566, 17860, 17864]],
    _aw_ = [0, [0, cst_web_rpc_effect_ml, 563, 17758, 17762]],
    _ax_ = [0, [0, cst_web_rpc_effect_ml, 562, 17689, 17693]],
    _ay_ = [0, [0, cst_web_rpc_effect_ml, 600, 19353, 19359]],
    _az_ = [0, [0, cst_web_rpc_effect_ml, 599, 19328, 19332]],
    _aA_ = [0, [0, cst_web_rpc_effect_ml, 598, 19267, 19271]];
   function generic_poll_or_error
   (Query, Response, opt, dispatcher, every, poll_behavior, query){
    var clear_when_deactivated = opt ? opt[1] : 1;
    function t_of_sexp(x_044){
     var
      _cM_ =
        [0,
         cst_inflight_queries,
         1,
         caml_call1(Inflight_query_key[33][41], Query[1]),
         0],
      _cN_ =
        [0,
         cst_last_error,
         1,
         caml_call1
          (Core[467],
           function(sexp_038){
            if(1 === sexp_038[0]){
             var _cS_ = sexp_038[1];
             if(_cS_){
              var _cT_ = _cS_[2];
              if(_cT_ && ! _cT_[2]){
               var
                arg1_035 = _cT_[1],
                arg0_034 = _cS_[1],
                res0_036 = caml_call1(Query[1], arg0_034),
                res1_037 = caml_call1(Core_Error[5], arg1_035);
               return [0, res0_036, res1_037];
              }
             }
            }
            return caml_call3
                    (Sexplib0_Sexp_conv_error[2], error_source_033, 2, sexp_038);
           }),
         _cM_],
      _cO_ =
        [0,
         cst_last_ok_response,
         1,
         caml_call1
          (Core[467],
           function(sexp_043){
            if(1 === sexp_043[0]){
             var _cQ_ = sexp_043[1];
             if(_cQ_){
              var _cR_ = _cQ_[2];
              if(_cR_ && ! _cR_[2]){
               var
                arg1_040 = _cR_[1],
                arg0_039 = _cQ_[1],
                res0_041 = caml_call1(Query[1], arg0_039),
                res1_042 = caml_call1(Response[1], arg1_040);
               return [0, res0_041, res1_042];
              }
             }
            }
            return caml_call3
                    (Sexplib0_Sexp_conv_error[2], error_source_033, 2, sexp_043);
           }),
         _cN_];
     return caml_call6
             (Sexplib0_Sexp_conv_record[3],
              error_source_033,
              _cO_,
              function(param){
               return param !== cst_inflight_queries$0
                       ? param
                         !== cst_last_error$0
                         ? param !== cst_last_ok_response$0 ? -1 : 0
                         : 1
                       : 2;
              },
              0,
              function(param){
               var
                _cP_ = param[2],
                inflight_queries = _cP_[2][1],
                last_error = _cP_[1],
                last_ok_response = param[1];
               return [0, last_ok_response, last_error, inflight_queries];
              },
              x_044);
    }
    function sexp_of_t(param){
     var
      inflight_queries_058 = param[3],
      last_error_052 = param[2],
      last_ok_response_046 = param[1],
      arg_059 =
        caml_call2(Inflight_query_key[33][42], Query[2], inflight_queries_058),
      bnds_045 = [0, [1, [0, _n_, [0, arg_059, 0]]], 0],
      arg_053 =
        caml_call2
         (Core[466],
          function(param){
           var
            arg1_055 = param[2],
            arg0_054 = param[1],
            res0_056 = caml_call1(Query[2], arg0_054),
            res1_057 = caml_call1(Core_Error[6], arg1_055);
           return [1, [0, res0_056, [0, res1_057, 0]]];
          },
          last_error_052),
      bnds_045$0 = [0, [1, [0, _o_, [0, arg_053, 0]]], bnds_045],
      arg_047 =
        caml_call2
         (Core[466],
          function(param){
           var
            arg1_049 = param[2],
            arg0_048 = param[1],
            res0_050 = caml_call1(Query[2], arg0_048),
            res1_051 = caml_call1(Response[2], arg1_049);
           return [1, [0, res0_050, [0, res1_051, 0]]];
          },
          last_ok_response_046),
      bnds_045$1 = [0, [1, [0, _p_, [0, arg_047, 0]]], bnds_045$0];
     return [1, bnds_045$1];
    }
    function equal(a_060, b_061){
     if(a_060 === b_061) return 1;
     var
      _cH_ =
        caml_call3
         (Core[463],
          function(a_062, b_063){
           var
            t_065 = a_062[2],
            t_064 = a_062[1],
            t_067 = b_063[2],
            t_066 = b_063[1],
            _cL_ = caml_call2(Query[3], t_064, t_066);
           return _cL_ ? caml_call2(Response[3], t_065, t_067) : _cL_;
          },
          a_060[1],
          b_061[1]);
     if(_cH_){
      var
       _cI_ =
         caml_call3
          (Core[463],
           function(a_068, b_069){
            var
             t_071 = a_068[2],
             t_070 = a_068[1],
             t_073 = b_069[2],
             t_072 = b_069[1],
             _cK_ = caml_call2(Query[3], t_070, t_072);
            return _cK_ ? caml_call2(Core_Error[2], t_071, t_073) : _cK_;
           },
           a_060[2],
           b_061[2]);
      if(_cI_)
       return caml_call3
               (Inflight_query_key[33][3],
                function(a_074, b_075){
                 return caml_call2(Query[3], a_074, b_075);
                },
                a_060[3],
                b_061[3]);
      var _cJ_ = _cI_;
     }
     else
      var _cJ_ = _cH_;
     return _cJ_;
    }
    var Model = [0, t_of_sexp, sexp_of_t, equal];
    function sexp_of_t$0(param){
     if(0 === param[0]){
      var
       inflight_query_key_081 = param[3],
       response_079 = param[2],
       query_077 = param[1],
       arg_082 = caml_call1(Inflight_query_key[10], inflight_query_key_081),
       bnds_076 = [0, [1, [0, _q_, [0, arg_082, 0]]], 0],
       _cG_ = caml_call1(Core_Or_error[13], Response[2]),
       arg_080 = caml_call2(Bonsai[40][1][2], _cG_, response_079),
       bnds_076$0 = [0, [1, [0, _r_, [0, arg_080, 0]]], bnds_076],
       arg_078 = caml_call1(Query[2], query_077),
       bnds_076$1 = [0, [1, [0, _s_, [0, arg_078, 0]]], bnds_076$0];
      return [1, [0, _t_, bnds_076$1]];
     }
     var
      inflight_query_key_086 = param[2],
      query_084 = param[1],
      arg_087 = caml_call1(Inflight_query_key[10], inflight_query_key_086),
      bnds_083 = [0, [1, [0, _u_, [0, arg_087, 0]]], 0],
      arg_085 = caml_call1(Query[2], query_084),
      bnds_083$0 = [0, [1, [0, _v_, [0, arg_085, 0]]], bnds_083];
     return [1, [0, _w_, bnds_083$0]];
    }
    var
     Action = [0, sexp_of_t$0],
     _bZ_ =
       caml_call5
        (Bonsai[15],
         0,
         Model,
         Action,
         [0, 0, 0, Inflight_query_key[33][4]],
         function(_cE_, _cD_, model, param){
          if(0 !== param[0]){
           var
            inflight_query_key$0 = param[2],
            query$0 = param[1],
            _cF_ =
              caml_call3
               (Core_Map[35], model[3], inflight_query_key$0, query$0);
           return [0, model[1], model[2], _cF_];
          }
          var
           inflight_query_key = param[3],
           response = param[2],
           query = param[1];
          if(response){
           var match = response[1];
           if(0 === match[0])
            var
             response$0 = match[1],
             last_error = 0,
             last_ok_response = [0, [0, query, response$0]];
           else
            var
             error = match[1],
             last_error = [0, [0, query, error]],
             last_ok_response = model[1];
          }
          else
           var
            last_error$0 = model[2],
            last_ok_response$0 = model[1],
            last_error = last_error$0,
            last_ok_response = last_ok_response$0;
          return [0,
                  last_ok_response,
                  last_error,
                  caml_call2(Core_Map[45], model[3], inflight_query_key)];
         }),
     c =
       caml_call3
        (Bonsai[43][5][1],
         _X_,
         _bZ_,
         function(pattern_syntax_088){
          var
           _b8_ =
             caml_call3
              (Bonsai[43][5][4],
               _V_,
               pattern_syntax_088,
               function(param){
                var pattern_syntax_090 = param[1];
                return pattern_syntax_090;
               }),
           _b9_ = caml_call1(Bonsai[43][5][5], _b8_);
          return caml_call3
                  (Bonsai[43][5][1],
                   _W_,
                   _b9_,
                   function(response){
                    var
                     _b__ =
                       caml_call3
                        (Bonsai[43][5][4],
                         _T_,
                         pattern_syntax_088,
                         function(param){
                          var pattern_syntax_089 = param[2];
                          return pattern_syntax_089;
                         }),
                     _b$_ = caml_call1(Bonsai[43][5][5], _b__);
                    return caml_call3
                            (Bonsai[43][5][1],
                             _U_,
                             _b$_,
                             function(inject_response){
                              var
                               _ca_ =
                                 caml_call2(Bonsai[43][5][6], dispatcher, inject_response),
                               _cb_ =
                                 caml_call3
                                  (Bonsai[43][5][7],
                                   _R_,
                                   _ca_,
                                   function(param, query){
                                    var
                                     inject_response = param[2],
                                     dispatcher = param[1],
                                     _cA_ =
                                       caml_call2(Bonsai_web_Effect[15], Inflight_query_key[45], 0);
                                    return caml_call2
                                            (Ui_effect[13][4][2],
                                             _cA_,
                                             function(inflight_query_key){
                                              var
                                               _cB_ =
                                                 caml_call1(inject_response, [1, query, inflight_query_key]);
                                              return caml_call2
                                                      (Ui_effect[13][4][2],
                                                       _cB_,
                                                       function(param){
                                                        var _cC_ = caml_call1(dispatcher, query);
                                                        return caml_call2
                                                                (Ui_effect[13][4][2],
                                                                 _cC_,
                                                                 function(response){
                                                                  return caml_call1
                                                                          (inject_response, [0, query, response, inflight_query_key]);
                                                                 });
                                                       });
                                             });
                                   });
                              return caml_call3
                                      (Bonsai[43][5][1],
                                       _S_,
                                       _cb_,
                                       function(effect){
                                        var
                                         _cc_ =
                                           caml_call3
                                            (Bonsai[43][5][7],
                                             _P_,
                                             effect,
                                             function(effect, prev, query){
                                              return prev
                                                      ? caml_call1(effect, query)
                                                      : Bonsai_web_Effect[1];
                                             });
                                        return caml_call3
                                                (Bonsai[43][5][1],
                                                 _Q_,
                                                 _cc_,
                                                 function(callback){
                                                  var
                                                   _cd_ = caml_call3(Bonsai[38][2], Query, query, callback);
                                                  return caml_call3
                                                          (Bonsai[43][5][1],
                                                           _O_,
                                                           _cd_,
                                                           function(pattern_syntax_100){
                                                            var
                                                             _ce_ =
                                                               caml_call3
                                                                (Bonsai[43][5][4],
                                                                 _M_,
                                                                 pattern_syntax_100,
                                                                 function(param){return 0;}),
                                                             _cf_ = caml_call1(Bonsai[43][5][5], _ce_);
                                                            return caml_call3
                                                                    (Bonsai[43][5][1],
                                                                     _N_,
                                                                     _cf_,
                                                                     function(param){
                                                                      var
                                                                       _cg_ = caml_call2(Bonsai[43][5][6], effect, query),
                                                                       _ch_ =
                                                                         caml_call3
                                                                          (Bonsai[43][5][7],
                                                                           _K_,
                                                                           _cg_,
                                                                           function(param){
                                                                            var query = param[2], effect = param[1];
                                                                            return caml_call1(effect, query);
                                                                           });
                                                                      return caml_call3
                                                                              (Bonsai[43][5][1],
                                                                               _L_,
                                                                               _ch_,
                                                                               function(send_rpc_effect){
                                                                                var
                                                                                 clock =
                                                                                   caml_call4
                                                                                    (Bonsai[37][5], 584040262, _D_, every, send_rpc_effect);
                                                                                function _ci_(pattern_syntax_105){
                                                                                 var
                                                                                  _cs_ =
                                                                                    caml_call3
                                                                                     (Bonsai[43][5][4],
                                                                                      _B_,
                                                                                      pattern_syntax_105,
                                                                                      function(param){return 0;}),
                                                                                  _ct_ = caml_call1(Bonsai[43][5][5], _cs_);
                                                                                 return caml_call3
                                                                                         (Bonsai[43][5][1],
                                                                                          _C_,
                                                                                          _ct_,
                                                                                          function(param){
                                                                                           var
                                                                                            _cu_ =
                                                                                              caml_call4(Bonsai[38][3], [0, send_rpc_effect], 0, 0, 0);
                                                                                           return caml_call3
                                                                                                   (Bonsai[43][5][1],
                                                                                                    _A_,
                                                                                                    _cu_,
                                                                                                    function(pattern_syntax_113){
                                                                                                     var
                                                                                                      _cv_ =
                                                                                                        caml_call3
                                                                                                         (Bonsai[43][5][4],
                                                                                                          _y_,
                                                                                                          pattern_syntax_113,
                                                                                                          function(param){return 0;}),
                                                                                                      _cw_ = caml_call1(Bonsai[43][5][5], _cv_);
                                                                                                     return caml_call3
                                                                                                             (Bonsai[43][5][1],
                                                                                                              _z_,
                                                                                                              _cw_,
                                                                                                              function(param){
                                                                                                               var
                                                                                                                _cx_ =
                                                                                                                  caml_call2(Bonsai[43][5][6], response, send_rpc_effect);
                                                                                                               return caml_call3
                                                                                                                       (Bonsai[43][5][7],
                                                                                                                        _x_,
                                                                                                                        _cx_,
                                                                                                                        function(param){
                                                                                                                         var
                                                                                                                          send_rpc_effect = param[2],
                                                                                                                          match = param[1],
                                                                                                                          inflight_queries = match[3],
                                                                                                                          last_error = match[2],
                                                                                                                          last_ok_response = match[1],
                                                                                                                          _cy_ = caml_call1(Core_Map[88], inflight_queries),
                                                                                                                          inflight_query =
                                                                                                                            caml_call2
                                                                                                                             (Core_Option[30], _cy_, function(_cz_){return _cz_[2];});
                                                                                                                         return [0,
                                                                                                                                 last_ok_response,
                                                                                                                                 last_error,
                                                                                                                                 inflight_query,
                                                                                                                                 send_rpc_effect];
                                                                                                                        });
                                                                                                              });
                                                                                                    });
                                                                                          });
                                                                                }
                                                                                if(poll_behavior)
                                                                                 var
                                                                                  _cj_ =
                                                                                    caml_call2
                                                                                     (Bonsai[43][5][2],
                                                                                      response,
                                                                                      function(_cp_, param){
                                                                                       var
                                                                                        new_for_cutoff_107 = param[2],
                                                                                        new_for_cutoff_109 = param[1],
                                                                                        old_for_cutoff_108 = _cp_[2],
                                                                                        old_for_cutoff_110 = _cp_[1],
                                                                                        _cq_ = old_for_cutoff_110 === new_for_cutoff_109 ? 1 : 0,
                                                                                        _cr_ =
                                                                                          _cq_
                                                                                           ? old_for_cutoff_108 === new_for_cutoff_107 ? 1 : 0
                                                                                           : _cq_;
                                                                                       return _cr_;
                                                                                      }),
                                                                                  _ck_ =
                                                                                    caml_call3
                                                                                     (Bonsai[43][5][7],
                                                                                      _H_,
                                                                                      _cj_,
                                                                                      function(param){
                                                                                       var
                                                                                        last_error = param[2],
                                                                                        last_ok_response = param[1],
                                                                                        _co_ = caml_call1(Core_Option[57], last_ok_response);
                                                                                       return _co_ ? _co_ : caml_call1(Core_Option[58], last_error);
                                                                                      }),
                                                                                  _cl_ =
                                                                                    caml_call3
                                                                                     (Bonsai[43][5][1],
                                                                                      _I_,
                                                                                      _ck_,
                                                                                      function(should_poll){
                                                                                       var _cm_ = caml_call1(Bonsai[43][5][5], should_poll);
                                                                                       return caml_call3
                                                                                               (Bonsai[43][5][1],
                                                                                                _G_,
                                                                                                _cm_,
                                                                                                function(pattern_syntax_112){
                                                                                                 var
                                                                                                  _cn_ =
                                                                                                    caml_call3
                                                                                                     (Bonsai[43][5][4],
                                                                                                      0,
                                                                                                      pattern_syntax_112,
                                                                                                      function(param){return param ? 0 : 1;});
                                                                                                 return caml_call4
                                                                                                         (Bonsai[43][5][3],
                                                                                                          _F_,
                                                                                                          _cn_,
                                                                                                          2,
                                                                                                          function(param){
                                                                                                           if(0 === param) return clock;
                                                                                                           if(1 === param) return caml_call1(Bonsai[6], 0);
                                                                                                           throw caml_maybe_attach_backtrace
                                                                                                                  ([0, Assert_failure, _E_], 1);
                                                                                                          });
                                                                                                });
                                                                                      });
                                                                                else
                                                                                 var _cl_ = clock;
                                                                                return caml_call3(Bonsai[43][5][1], _J_, _cl_, _ci_);
                                                                               });
                                                                     });
                                                           });
                                                 });
                                       });
                             });
                   });
         });
    if(! clear_when_deactivated) return c;
    var _b0_ = caml_call1(Bonsai[33], c);
    return caml_call3
            (Bonsai[43][5][1],
             _ad_,
             _b0_,
             function(pattern_syntax_117){
              var
               _b1_ =
                 caml_call3
                  (Bonsai[43][5][4],
                   _ab_,
                   pattern_syntax_117,
                   function(param){
                    var pattern_syntax_119 = param[1];
                    return pattern_syntax_119;
                   }),
               _b2_ = caml_call1(Bonsai[43][5][5], _b1_);
              return caml_call3
                      (Bonsai[43][5][1],
                       _ac_,
                       _b2_,
                       function(result){
                        var
                         _b3_ =
                           caml_call3
                            (Bonsai[43][5][4],
                             _$_,
                             pattern_syntax_117,
                             function(param){
                              var pattern_syntax_118 = param[2];
                              return pattern_syntax_118;
                             }),
                         _b4_ = caml_call1(Bonsai[43][5][5], _b3_);
                        return caml_call3
                                (Bonsai[43][5][1],
                                 _aa_,
                                 _b4_,
                                 function(reset){
                                  var _b5_ = caml_call4(Bonsai[38][3], 0, [0, reset], 0, 0);
                                  return caml_call3
                                          (Bonsai[43][5][1],
                                           ___,
                                           _b5_,
                                           function(pattern_syntax_120){
                                            var
                                             _b6_ =
                                               caml_call3
                                                (Bonsai[43][5][4],
                                                 _Y_,
                                                 pattern_syntax_120,
                                                 function(param){return 0;}),
                                             _b7_ = caml_call1(Bonsai[43][5][5], _b6_);
                                            return caml_call3
                                                    (Bonsai[43][5][1],
                                                     _Z_,
                                                     _b7_,
                                                     function(param){return caml_call1(Bonsai[43][1], result);});
                                           });
                                 });
                       });
             });
   }
   function generic_dispatcher(dispatcher){
    var _bX_ = caml_call1(Bonsai[41][5], connector_var);
    return caml_call3
            (Bonsai[43][5][1],
             _af_,
             _bX_,
             function(connector){
              return caml_call3
                      (Bonsai[43][5][7],
                       _ae_,
                       connector,
                       function(connector){
                        var _bY_ = caml_call1(dispatcher, connector);
                        return caml_call1(Bonsai_web_Effect[23], _bY_);
                       });
             });
   }
   function dispatcher(rpc, where_to_connect){
    return generic_dispatcher
            (function(connector, query){
              return with_connection
                      (connector,
                       where_to_connect,
                       function(connection){
                        return caml_call4
                                (Async_rpc_kernel_Rpc[6][13], 0, rpc, connection, query);
                       });
             });
   }
   function babel_dispatcher(rpc, where_to_connect){
    return generic_dispatcher
            (function(connector, query){
              function callback(connection){
               return caml_call4
                       (Babel_Caller[6][1], 0, rpc, connection, query);
              }
              try{var val = caml_call1(connector, where_to_connect);}
              catch(e$0){
               var e = caml_wrap_exception(e$0);
               return caml_call2(Async_kernel_Deferred_or_error[22], 0, e);
              }
              if(typeof val === "number")
               return caml_call1
                       (Async_kernel_Deferred_or_error[26],
                        cst_RPC_not_handled_because_no$0);
              switch(val[0]){
                case 0:
                 var menu = val[2], connection = val[1];
                 return caml_call2
                         (Async_durable[3],
                          connection,
                          function(connection){
                           var _bW_ = caml_call1(Rvar[3], menu);
                           return caml_call2
                                   (Async_kernel_Deferred_or_error[19][4][2],
                                    _bW_,
                                    function(menu){
                                     return callback
                                             (caml_call2
                                               (Async_rpc_kernel_Versioned_rpc[2][2], connection, menu));
                                    });
                          });
                case 1:
                 var
                  menu$0 = val[3],
                  connection$0 = val[2],
                  Conn = val[1],
                  _bT_ = caml_call1(Conn[4], connection$0);
                 return caml_call2
                         (Async_kernel[22][2],
                          _bT_,
                          function(connection){
                           var _bV_ = caml_call1(Rvar[3], menu$0);
                           return caml_call2
                                   (Async_kernel_Deferred_or_error[19][4][2],
                                    _bV_,
                                    function(menu){
                                     return callback
                                             (caml_call2
                                               (Async_rpc_kernel_Versioned_rpc[2][2], connection, menu));
                                    });
                          });
                default:
                 var menu$1 = val[2], connection$1 = val[1];
                 return caml_call2
                         (Async_kernel[22][2],
                          connection$1,
                          function(connection){
                           var _bU_ = caml_call1(Rvar[3], menu$1);
                           return caml_call2
                                   (Async_kernel_Deferred_or_error[19][4][2],
                                    _bU_,
                                    function(menu){
                                     return callback
                                             (caml_call2
                                               (Async_rpc_kernel_Versioned_rpc[2][2], connection, menu));
                                    });
                          });
              }
             });
   }
   function poll
   (q, r, clear_when_deactivated, rpc, where_to_connect, every, query){
    var _bR_ = dispatcher(rpc, where_to_connect);
    return caml_call3
            (Bonsai[43][5][1],
             _ah_,
             _bR_,
             function(dispatcher){
              var _bS_ = caml_call1(Bonsai[40][2], dispatcher);
              return caml_call3
                      (Bonsai[43][5][1],
                       _ag_,
                       _bS_,
                       function(dispatcher){
                        return generic_poll_or_error
                                (q, r, clear_when_deactivated, dispatcher, every, 0, query);
                       });
             });
   }
   function babel_poll
   (q, r, clear_when_deactivated, rpc, where_to_connect, every, query){
    var _bP_ = babel_dispatcher(rpc, where_to_connect);
    return caml_call3
            (Bonsai[43][5][1],
             _aj_,
             _bP_,
             function(dispatcher){
              var _bQ_ = caml_call1(Bonsai[40][2], dispatcher);
              return caml_call3
                      (Bonsai[43][5][1],
                       _ai_,
                       _bQ_,
                       function(dispatcher){
                        return generic_poll_or_error
                                (q, r, clear_when_deactivated, dispatcher, every, 0, query);
                       });
             });
   }
   function shared_poller
   (Q, r, clear_when_deactivated, rpc, where_to_connect, every){
    var t_of_sexp = Q[1], sexp_of_t = Q[2];
    function equal(a, b){
     var _bO_ = caml_call2(Q[3][1], a, b);
     return caml_call2(Core[89], _bO_, 0);
    }
    return caml_call2
            (create$0,
             Q,
             function(query){
              return poll
                      ([0, t_of_sexp, sexp_of_t, equal],
                       r,
                       clear_when_deactivated,
                       rpc,
                       where_to_connect,
                       every,
                       query);
             });
   }
   function poll_until_ok
   (q,
    r,
    clear_when_deactivated,
    rpc,
    where_to_connect,
    retry_interval,
    query){
    var _bM_ = dispatcher(rpc, where_to_connect);
    return caml_call3
            (Bonsai[43][5][1],
             _al_,
             _bM_,
             function(dispatcher){
              var _bN_ = caml_call1(Bonsai[40][2], dispatcher);
              return caml_call3
                      (Bonsai[43][5][1],
                       _ak_,
                       _bN_,
                       function(dispatcher){
                        return generic_poll_or_error
                                (q,
                                 r,
                                 clear_when_deactivated,
                                 dispatcher,
                                 retry_interval,
                                 1,
                                 query);
                       });
             });
   }
   function babel_poll_until_ok
   (q,
    r,
    clear_when_deactivated,
    rpc,
    where_to_connect,
    retry_interval,
    query){
    var _bK_ = babel_dispatcher(rpc, where_to_connect);
    return caml_call3
            (Bonsai[43][5][1],
             _an_,
             _bK_,
             function(dispatcher){
              var _bL_ = caml_call1(Bonsai[40][2], dispatcher);
              return caml_call3
                      (Bonsai[43][5][1],
                       _am_,
                       _bL_,
                       function(dispatcher){
                        return generic_poll_or_error
                                (q,
                                 r,
                                 clear_when_deactivated,
                                 dispatcher,
                                 retry_interval,
                                 1,
                                 query);
                       });
             });
   }
   function dispatcher$0(opt, rpc, where_to_connect){
    var
     on_forget_client_error =
       opt ? opt[1] : function(param){return Bonsai_web_Effect[1];},
     _bA_ = caml_call1(Bonsai[41][5], connector_var);
    return caml_call3
            (Bonsai[43][5][1],
             _ax_,
             _bA_,
             function(connector){
              var
               _bB_ =
                 caml_call1
                  (Bonsai[46][2],
                   function(param){
                    return caml_call2(Polling_state_rpc[6][1], 0, rpc);
                   });
              return caml_call3
                      (Bonsai[43][5][1],
                       _aw_,
                       _bB_,
                       function(client){
                        function perform_dispatch(param){
                         var client = param[2], connector = param[1];
                         return with_connection
                                 (connector,
                                  where_to_connect,
                                  function(connection){
                                   var
                                    _bJ_ =
                                      caml_call2(Polling_state_rpc[6][4], client, connection);
                                   return caml_call2
                                           (Async_kernel_Deferred[16][4][3],
                                            _bJ_,
                                            function(param){
                                             if(0 === param[0]) return _as_;
                                             var error = param[1];
                                             return caml_call1(Async_rpc_kernel_Rpc[5][13], connection)
                                                     ? _at_
                                                     : [1, error];
                                            });
                                  });
                        }
                        var
                         _bC_ = caml_call2(Bonsai[43][5][6], connector, client),
                         _bD_ =
                           caml_call3
                            (Bonsai[43][5][7],
                             _au_,
                             _bC_,
                             function(param){
                              var
                               client = param[2],
                               connector = param[1],
                               _bI_ =
                                 caml_call2
                                  (Bonsai_web_Effect[23],
                                   perform_dispatch,
                                   [0, connector, client]);
                              return caml_call2
                                      (Ui_effect[13][4][2],
                                       _bI_,
                                       function(param){
                                        if(0 === param[0]) return Bonsai_web_Effect[1];
                                        var error = param[1];
                                        return caml_call1(on_forget_client_error, error);
                                       });
                             });
                        return caml_call3
                                (Bonsai[43][5][1],
                                 _av_,
                                 _bD_,
                                 function(forget_client_on_server){
                                  var
                                   _bE_ =
                                     caml_call4
                                      (Bonsai[38][3], 0, [0, forget_client_on_server], 0, 0);
                                  return caml_call3
                                          (Bonsai[43][5][1],
                                           _ar_,
                                           _bE_,
                                           function(pattern_syntax_137){
                                            var
                                             _bF_ =
                                               caml_call3
                                                (Bonsai[43][5][4],
                                                 _ap_,
                                                 pattern_syntax_137,
                                                 function(param){return 0;}),
                                             _bG_ = caml_call1(Bonsai[43][5][5], _bF_);
                                            return caml_call3
                                                    (Bonsai[43][5][1],
                                                     _aq_,
                                                     _bG_,
                                                     function(param){
                                                      var _bH_ = caml_call2(Bonsai[43][5][6], connector, client);
                                                      return caml_call3
                                                              (Bonsai[43][5][7],
                                                               _ao_,
                                                               _bH_,
                                                               function(param){
                                                                var client = param[2], connector = param[1];
                                                                return caml_call1
                                                                        (Bonsai_web_Effect[23],
                                                                         function(query){
                                                                          return with_connection
                                                                                  (connector,
                                                                                   where_to_connect,
                                                                                   function(connection){
                                                                                    return caml_call3
                                                                                            (Polling_state_rpc[6][2], client, connection, query);
                                                                                   });
                                                                         });
                                                               });
                                                     });
                                           });
                                 });
                       });
             });
   }
   function poll$0
   (q, r, clear_when_deactivated, rpc, where_to_connect, every, query){
    var _bx_ = dispatcher$0(0, rpc, where_to_connect);
    return caml_call3
            (Bonsai[43][5][1],
             _aA_,
             _bx_,
             function(dispatcher){
              var
               _by_ =
                 caml_call3
                  (Bonsai[43][5][7],
                   _ay_,
                   dispatcher,
                   function(dispatcher, query){
                    var _bz_ = caml_call1(dispatcher, query);
                    return caml_call2
                            (Ui_effect[13][4][3],
                             _bz_,
                             function(result){return [0, result];});
                   });
              return caml_call3
                      (Bonsai[43][5][1],
                       _az_,
                       _by_,
                       function(dispatcher){
                        return generic_poll_or_error
                                (q, r, clear_when_deactivated, dispatcher, every, 0, query);
                       });
             });
   }
   function shared_poller$0
   (Q, r, clear_when_deactivated, rpc, where_to_connect, every){
    var t_of_sexp = Q[1], sexp_of_t = Q[2];
    function equal(a, b){
     var _bw_ = caml_call2(Q[3][1], a, b);
     return caml_call2(Core[89], _bw_, 0);
    }
    return caml_call2
            (create$0,
             Q,
             function(query){
              return poll$0
                      ([0, t_of_sexp, sexp_of_t, equal],
                       r,
                       clear_when_deactivated,
                       rpc,
                       where_to_connect,
                       every,
                       query);
             });
   }
   var
    Polling_state_rpc$0 = [0, dispatcher$0, poll$0, shared_poller$0],
    _aB_ = [0, cst_Connecting],
    _aC_ = [0, cst_Connected],
    _aD_ = [0, cst_Disconnected],
    _aE_ = [0, cst_Failed_to_connect],
    _aF_ = [0, cst_State],
    _aG_ = [0, cst_Initial],
    cst_connecting_since = cst_connecting_since$0,
    cst_clock = cst_clock$0,
    cst_state = cst_state$0,
    _aH_ = [0, cst_connecting_since$0],
    _aI_ = [0, cst_clock$0],
    _aJ_ = [0, cst_state$0],
    _aK_ = [0, "Set"],
    _aL_ = [0, "Activate"];
   function t_of_sexp(sexp_149){
    a:
    {
     if(0 === sexp_149[0]){
      var _bt_ = sexp_149[1];
      b:
      if(_bt_ !== cst_Connected){
       c:
       if(_bt_ !== cst_Connecting){
        d:
        if(_bt_ !== cst_Disconnected){
         if(_bt_ !== cst_Failed_to_connect){
          if(_bt_ === cst_connected) break b;
          if(_bt_ === cst_connecting) break c;
          if(_bt_ === cst_disconnected) break d;
          if(_bt_ !== cst_failed_to_connect) break a;
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5], error_source_147, sexp_149);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_147, sexp_149);
       }
       return 0;
      }
      return 1;
     }
     var _bu_ = sexp_149[1];
     if(! _bu_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_147, sexp_149);
     var _bv_ = _bu_[1];
     if(0 !== _bv_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_147, sexp_149);
     var tag_150 = _bv_[1];
     b:
     if(tag_150 !== cst_Connected){
      c:
      if(tag_150 !== cst_Connecting){
       d:
       if(tag_150 !== cst_Disconnected){
        if(tag_150 !== cst_Failed_to_connect){
         if(tag_150 === cst_connected) break b;
         if(tag_150 === cst_connecting) break c;
         if(tag_150 === cst_disconnected) break d;
         if(tag_150 !== cst_failed_to_connect) break a;
        }
        var sexp_args_156 = _bu_[2];
        if(sexp_args_156 && ! sexp_args_156[2]){
         var
          arg0_157 = sexp_args_156[1],
          res0_158 = caml_call1(Core_Error[5], arg0_157);
         return [1, res0_158];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[4],
                 error_source_147,
                 tag_150,
                 sexp_149);
       }
       var sexp_args_151 = _bu_[2];
       if(sexp_args_151 && ! sexp_args_151[2]){
        var
         arg0_152 = sexp_args_151[1],
         res0_153 = caml_call1(Core_Error[5], arg0_152);
        return [0, res0_153];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_147,
                tag_150,
                sexp_149);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[3], error_source_147, sexp_149);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_147, sexp_149);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_147, sexp_149);
   }
   function sexp_of_t$0(param){
    if(typeof param === "number") return 0 === param ? _aB_ : _aC_;
    if(0 === param[0]){
     var arg0_159 = param[1], res0_160 = caml_call1(Core_Error[6], arg0_159);
     return [1, [0, _aD_, [0, res0_160, 0]]];
    }
    var arg0_161 = param[1], res0_162 = caml_call1(Core_Error[6], arg0_161);
    return [1, [0, _aE_, [0, res0_162, 0]]];
   }
   function equal(a_163, b_164){
    if(a_163 === b_164) return 1;
    a:
    {
     if(typeof a_163 !== "number"){
      if(0 === a_163[0]){
       var a_165 = a_163[1];
       if(typeof b_164 !== "number"){
        if(0 !== b_164[0]) return 0;
        var b_166 = b_164[1];
        return caml_call2(Core_Error[2], a_165, b_166);
       }
       if(0 === b_164) break a;
      }
      else{
       var a_167 = a_163[1];
       if(typeof b_164 !== "number"){
        if(0 === b_164[0]) return 0;
        var b_168 = b_164[1];
        return caml_call2(Core_Error[2], a_167, b_168);
       }
       if(0 === b_164) break a;
      }
      return 0;
     }
     if(0 === a_163){
      if(typeof b_164 === "number" && ! b_164) return 1;
      return 0;
     }
     if(typeof b_164 !== "number") return 0;
     if(b_164) return 1;
    }
    return 0;
   }
   function state_of_sexp(sexp_173){
    a:
    {
     if(0 === sexp_173[0]){
      var _bq_ = sexp_173[1];
      b:
      if(_bq_ !== cst_Initial){
       if(_bq_ !== cst_State){
        if(_bq_ === cst_initial) break b;
        if(_bq_ !== cst_state$0) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_171, sexp_173);
      }
      return 0;
     }
     var _br_ = sexp_173[1];
     if(! _br_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_171, sexp_173);
     var _bs_ = _br_[1];
     if(0 !== _bs_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_171, sexp_173);
     var tag_174 = _bs_[1];
     b:
     if(tag_174 !== cst_Initial){
      if(tag_174 !== cst_State){
       if(tag_174 === cst_initial) break b;
       if(tag_174 !== cst_state$0) break a;
      }
      var sexp_args_175 = _br_[2];
      if(sexp_args_175 && ! sexp_args_175[2]){
       var arg0_176 = sexp_args_175[1], res0_177 = t_of_sexp(arg0_176);
       return [0, res0_177];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_171,
               tag_174,
               sexp_173);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_171, sexp_173);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_171, sexp_173);
   }
   function t_of_sexp$0(x_186){
    var
     _bo_ =
       [0,
        cst_connecting_since,
        1,
        caml_call1(Core[467], Core_Time_ns[25][3]),
        0];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_185,
             [0,
              cst_state,
              1,
              state_of_sexp,
              [0, cst_clock, 1, Sexplib0_Sexp_conv[47], _bo_]],
             function(param){
              return param !== cst_clock$0
                      ? param
                        !== cst_connecting_since$0
                        ? param !== cst_state$0 ? -1 : 0
                        : 2
                      : 1;
             },
             0,
             function(param){
              var
               _bp_ = param[2],
               connecting_since = _bp_[2][1],
               clock = _bp_[1],
               state = param[1];
              return [0, state, clock, connecting_since];
             },
             x_186);
   }
   function sexp_of_t$1(param){
    var
     connecting_since_192 = param[3],
     clock_190 = param[2],
     state_188 = param[1],
     arg_193 =
       caml_call2(Core[466], Core_Time_ns[25][4], connecting_since_192),
     bnds_187 = [0, [1, [0, _aH_, [0, arg_193, 0]]], 0],
     arg_191 = caml_call1(Sexplib0_Sexp_conv[23], clock_190),
     bnds_187$0 = [0, [1, [0, _aI_, [0, arg_191, 0]]], bnds_187];
    if(state_188)
     var
      arg0_178 = state_188[1],
      res0_179 = sexp_of_t$0(arg0_178),
      arg_189 = [1, [0, _aF_, [0, res0_179, 0]]];
    else
     var arg_189 = _aG_;
    var bnds_187$1 = [0, [1, [0, _aJ_, [0, arg_189, 0]]], bnds_187$0];
    return [1, bnds_187$1];
   }
   function equal$0(a_194, b_195){
    if(a_194 === b_195) return 1;
    var b_181 = b_195[1], a_180 = a_194[1];
    if(a_180 === b_181)
     var _bn_ = 1;
    else if(a_180)
     if(b_181)
      var b_183 = b_181[1], a_182 = a_180[1], _bn_ = equal(a_182, b_183);
     else
      var _bn_ = 0;
    else
     var _bn_ = b_181 ? 0 : 1;
    return _bn_
            ? caml_call3
              (Core[463],
               function(a_196, b_197){
                return caml_call2(Core_Time_ns[25][12], a_196, b_197);
               },
               a_194[3],
               b_195[3])
            : _bn_;
   }
   function sexp_of_t$2(param){
    if(0 === param[0]){
     var arg0_198 = param[1], res0_199 = sexp_of_t$0(arg0_198);
     return [1, [0, _aK_, [0, res0_199, 0]]];
    }
    var arg0_200 = param[1], res0_201 = caml_call1(Ui_incr[80][1], arg0_200);
    return [1, [0, _aL_, [0, res0_201, 0]]];
   }
   var
    Action = [0, sexp_of_t$2],
    _aM_ = [0, cst_connecting_since$0],
    _aN_ = [0, cst_state$0],
    _aO_ = [0, [0, cst_web_rpc_effect_ml, 757, 24374, 24378]],
    _aP_ = [0, [0, cst_web_rpc_effect_ml, 748, 24113, 24117]],
    _aQ_ = [0, [0, cst_web_rpc_effect_ml, 748, 24113, 24117]],
    _aR_ = [0, [0, cst_web_rpc_effect_ml, 751, 24221, 24229]],
    _aS_ = [0, [0, cst_web_rpc_effect_ml, 750, 24193, 24199]],
    _aT_ = [0, [0, cst_web_rpc_effect_ml, 749, 24130, 24136]],
    _aU_ = [0, [0, cst_web_rpc_effect_ml, 748, 24113, 24117]],
    _aV_ = [0, [0, cst_web_rpc_effect_ml, 699, 22015, 22019]],
    _aW_ = [0, [0, cst_web_rpc_effect_ml, 699, 22015, 22019]],
    _aX_ = [0, [0, cst_web_rpc_effect_ml, 699, 22015, 22019]],
    _aY_ = [0, [0, cst_web_rpc_effect_ml, 699, 22015, 22019]],
    _aZ_ = [0, 0],
    _a0_ = [0, 0, 0, 0],
    _a1_ = [0, [0, cst_web_rpc_effect_ml, 699, 22015, 22019]],
    _a2_ = [0, [0, cst_web_rpc_effect_ml, 698, 21958, 21962]];
   function sexp_of_t$3(param){
    var
     connecting_since_205 = param[2],
     state_203 = param[1],
     arg_206 =
       caml_call2(Core[466], Core_Time_ns[25][4], connecting_since_205),
     bnds_202 = [0, [1, [0, _aM_, [0, arg_206, 0]]], 0],
     arg_204 = sexp_of_t$0(state_203),
     bnds_202$0 = [0, [1, [0, _aN_, [0, arg_204, 0]]], bnds_202];
    return [1, bnds_202$0];
   }
   function state(where_to_connect){
    var
     _a3_ =
       generic_dispatcher
        (function(connector, writeback){
          var
           _bl_ =
             with_connection
              (connector,
               where_to_connect,
               function(connection){
                caml_call1(writeback, 1);
                var
                 _bm_ =
                   caml_call2
                    (Async_rpc_kernel_Rpc[5][12], connection, 890972481);
                caml_call2
                 (Async_kernel[12],
                  _bm_,
                  function(reason){
                   return caml_call1
                           (writeback, [0, caml_call1(Core_Error[31], reason)]);
                  });
                return caml_call1(Async_kernel_Deferred_or_error[13], 0);
               });
          return caml_call2
                  (Async_kernel_Deferred[16][4][3],
                   _bl_,
                   function(param){
                    if(0 === param[0]) return 0;
                    var error = param[1];
                    return caml_call1(writeback, [1, error]);
                   });
         });
    return caml_call3
            (Bonsai[43][5][1],
             _a2_,
             _a3_,
             function(dispatcher){
              var
               _a4_ =
                 caml_call6
                  (Bonsai[16],
                   [0, t_of_sexp$0, sexp_of_t$1, equal$0],
                   Action,
                   0,
                   _a0_,
                   function(inject, schedule_event, dispatcher, model, action){
                    function writeback(a){
                     return caml_call1
                             (schedule_event, caml_call1(inject, [0, a]));
                    }
                    var state = model[1];
                    if(0 === action[0]){
                     var new_state = action[1];
                     if(dispatcher){
                      var dispatch = dispatcher[1];
                      if(typeof new_state !== "number")
                       caml_call1(schedule_event, caml_call1(dispatch, writeback));
                      var _bh_ = [0, new_state];
                     }
                     else
                      var _bh_ = [0, new_state];
                     var new_state$0 = _bh_;
                    }
                    else if(dispatcher){
                     var dispatch$0 = dispatcher[1];
                     a:
                     {
                      if(state && typeof state[1] === "number"){var state$0 = state; break a;}
                      caml_call1
                       (schedule_event, caml_call1(dispatch$0, writeback));
                      var state$0 = _aZ_;
                     }
                     var new_state$0 = state$0;
                    }
                    else
                     var new_state$0 = state;
                    if(0 === action[0])
                     var clock = model[2];
                    else
                     var clock$0 = action[1], clock = [0, clock$0];
                    function now(param){
                     return caml_call2(Core_Option[30], clock, Ui_incr[80][6]);
                    }
                    if(state){
                     var _bi_ = state[1];
                     a:
                     {
                      if(typeof _bi_ === "number" && _bi_){
                       if(new_state$0){
                        var _bj_ = new_state$0[1];
                        if(typeof _bj_ === "number" && _bj_){var _bk_ = model[3]; break a;}
                       }
                       var _bk_ = now(0);
                       break a;
                      }
                      var _bk_ = model[3];
                     }
                     var connecting_since = _bk_;
                    }
                    else
                     var connecting_since = now(0);
                    return [0, new_state$0, clock, connecting_since];
                   },
                   dispatcher);
              return caml_call3
                      (Bonsai[43][5][1],
                       _a1_,
                       _a4_,
                       function(pattern_syntax_208){
                        var
                         _a5_ =
                           caml_call3
                            (Bonsai[43][5][4],
                             _aX_,
                             pattern_syntax_208,
                             function(param){
                              var pattern_syntax_210 = param[1];
                              return pattern_syntax_210;
                             }),
                         _a6_ = caml_call1(Bonsai[43][5][5], _a5_);
                        return caml_call3
                                (Bonsai[43][5][1],
                                 _aY_,
                                 _a6_,
                                 function(model){
                                  var
                                   _a7_ =
                                     caml_call3
                                      (Bonsai[43][5][4],
                                       _aV_,
                                       pattern_syntax_208,
                                       function(param){
                                        var pattern_syntax_209 = param[2];
                                        return pattern_syntax_209;
                                       }),
                                   _a8_ = caml_call1(Bonsai[43][5][5], _a7_);
                                  return caml_call3
                                          (Bonsai[43][5][1],
                                           _aW_,
                                           _a8_,
                                           function(inject){
                                            var
                                             _a9_ = caml_call1(Bonsai[42][4], Ui_incr[11]),
                                             _a__ =
                                               caml_call3
                                                (Bonsai[43][5][1],
                                                 _aT_,
                                                 _a9_,
                                                 function(clock){
                                                  var
                                                   _bf_ = caml_call2(Bonsai[43][5][6], inject, clock),
                                                   _bg_ =
                                                     caml_call3
                                                      (Bonsai[43][5][7],
                                                       _aR_,
                                                       _bf_,
                                                       function(param){
                                                        var clock = param[2], inject = param[1];
                                                        return caml_call1(inject, [1, clock]);
                                                       });
                                                  return caml_call3
                                                          (Bonsai[43][5][1],
                                                           _aS_,
                                                           _bg_,
                                                           function(on_activate){
                                                            return caml_call4(Bonsai[38][3], [0, on_activate], 0, 0, 0);
                                                           });
                                                 });
                                            return caml_call3
                                                    (Bonsai[43][5][1],
                                                     _aU_,
                                                     _a__,
                                                     function(pattern_syntax_211){
                                                      var
                                                       _a$_ =
                                                         caml_call3
                                                          (Bonsai[43][5][4],
                                                           _aP_,
                                                           pattern_syntax_211,
                                                           function(param){return 0;}),
                                                       _ba_ = caml_call1(Bonsai[43][5][5], _a$_);
                                                      return caml_call3
                                                              (Bonsai[43][5][1],
                                                               _aQ_,
                                                               _ba_,
                                                               function(param){
                                                                var
                                                                 _bb_ =
                                                                   caml_call2
                                                                    (Bonsai[43][5][2],
                                                                     model,
                                                                     function(_bc_, param){
                                                                      var
                                                                       new_for_cutoff_217 = param[3],
                                                                       new_for_cutoff_219 = param[1],
                                                                       old_for_cutoff_218 = _bc_[3],
                                                                       old_for_cutoff_220 = _bc_[1],
                                                                       _bd_ = old_for_cutoff_220 === new_for_cutoff_219 ? 1 : 0,
                                                                       _be_ =
                                                                         _bd_
                                                                          ? old_for_cutoff_218 === new_for_cutoff_217 ? 1 : 0
                                                                          : _bd_;
                                                                      return _be_;
                                                                     });
                                                                return caml_call3
                                                                        (Bonsai[43][5][7],
                                                                         _aO_,
                                                                         _bb_,
                                                                         function(param){
                                                                          var connecting_since = param[3], state = param[1];
                                                                          if(state)
                                                                           var status = state[1], state$0 = status;
                                                                          else
                                                                           var state$0 = 0;
                                                                          a:
                                                                          {
                                                                           if(typeof state$0 === "number" && state$0){var connecting_since$0 = 0; break a;}
                                                                           var connecting_since$0 = connecting_since;
                                                                          }
                                                                          return [0, state$0, connecting_since$0];
                                                                         });
                                                               });
                                                     });
                                           });
                                 });
                       });
             });
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai_web);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_web_Rpc_effect);
   var
    Bonsai_web_Rpc_effect =
      [0,
       Where_to_connect,
       Poll_result,
       [0, lookup, create$0],
       [0,
        dispatcher,
        babel_dispatcher,
        poll,
        babel_poll,
        shared_poller,
        poll_until_ok,
        babel_poll_until_ok],
       Polling_state_rpc$0,
       [0, [0, equal, t_of_sexp, sexp_of_t$0], sexp_of_t$3, state],
       [0, persistent_connection, async_durable, for_test, 0],
       [0,
        with_connector,
        self_connector,
        url_connector,
        is_test_fallback,
        [0, Rvar]]];
   runtime.caml_register_global
    (198, Bonsai_web_Rpc_effect, cst_Bonsai_web_Rpc_effect);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai_web__Start
//# unitInfo: Requires: Async_kernel, Async_kernel__Ivar, Async_kernel__Pipe, Base__Field, Base__Option, Bonsai, Bonsai__Environment, Bonsai__Input, Bonsai__Lifecycle, Bonsai__Meta, Bonsai__Path, Bonsai__Snapshot, Bonsai__Value, Bonsai_web__Forward_performance_entries, Bonsai_web__Rpc_effect, Bus, Core, Core__Error, Core__Fn, Core__Nothing, Core__Option, Core__Queue, Core__Type_equal, Expect_test_collector, Incr_dom__Start_app, Js_of_ocaml__Js, Moption, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Ui_effect, Ui_incr, Virtual_dom__Effect
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_web_Start = "Bonsai_web__Start",
    cst_bonsai_web = "bonsai_web",
    cst_web_start_ml = "web/start.ml",
    caml_js_wrap_callback_unsafe = runtime.caml_js_wrap_callback_unsafe,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Bonsai_web_Rpc_effect = global_data.Bonsai_web__Rpc_effect,
    Assert_failure = global_data.Assert_failure,
    Core_Fn = global_data.Core__Fn,
    Bonsai = global_data.Bonsai,
    Core_Nothing = global_data.Core__Nothing,
    Core = global_data.Core,
    Core_Type_equal = global_data.Core__Type_equal,
    Bonsai_Value = global_data.Bonsai__Value,
    Core_Option = global_data.Core__Option,
    Ui_incr = global_data.Ui_incr,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Bonsai_Meta = global_data.Bonsai__Meta,
    Bonsai_Lifecycle = global_data.Bonsai__Lifecycle,
    Bus = global_data.Bus,
    Bonsai_Environment = global_data.Bonsai__Environment,
    Bonsai_Path = global_data.Bonsai__Path,
    Bonsai_Snapshot = global_data.Bonsai__Snapshot,
    Bonsai_Input = global_data.Bonsai__Input,
    Async_kernel = global_data.Async_kernel,
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Ui_effect = global_data.Ui_effect,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Incr_dom_Start_app = global_data.Incr_dom__Start_app,
    Base_Option = global_data.Base__Option,
    Bonsai_web_Forward_performance =
      global_data.Bonsai_web__Forward_performance_entries;
   global_data.Base__Field;
   var
    Moption = global_data.Moption,
    Core_Queue = global_data.Core__Queue,
    Virtual_dom_Effect = global_data.Virtual_dom__Effect,
    Core_Error = global_data.Core__Error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_web_Start);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_web);
   caml_call1(Expect_test_collector[6][1], cst_web_start_ml);
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai_web, "start.ml");
   var
    _a_ = [0, cst_web_start_ml, 37, 869, 879],
    _b_ = [0, cst_web_start_ml, 43, 1107, 1132],
    cst_debugger_host_and_port_not = "debugger host and port not be specified",
    cst_Already_debugging = "Already debugging.",
    cst_Starting_the_debugger = "Starting the debugger.",
    _c_ = [0, "Dynamic"],
    _d_ = [0, "Static"],
    cst_Not_starting_debugger_An_e =
      "Not starting debugger. An error occurred while attempting to instrument the computation; the resulting computation does not typecheck. Reusing previously gathered run information to execute",
    cst_Not_starting_debugger_Be_a =
      'Not starting debugger. Be aware that running the debugger will send performance data to the debugger server, which may be unacceptable if the data you work with is sensitive. Consider running a local server and calling this function again with the local host and port. If you wish to proceed, run this function again, passing "true" as the first parameter';
   function stop(t){return caml_call2(Async_kernel_Ivar[15], t[2], 0);}
   function started(t){return caml_call1(Async_kernel_Ivar[18], t[3]);}
   function schedule(t, a){
    var match = t[1];
    if(0 === match[0]){
     var queue = match[1];
     return caml_call2(Core_Queue[41], queue, a);
    }
    var f = match[1], _S_ = caml_call1(f, a);
    return caml_call1(Virtual_dom_Effect[22][2], _S_);
   }
   function input(t){return caml_call1(Ui_incr[53][5], t[4]);}
   function set_input(t, input){
    return caml_call2(Ui_incr[53][3], t[4], input);
   }
   function update_input(t, f){return set_input(t, caml_call1(f, input(t)));}
   function outgoing(param){
    var outgoing_pipe = param[5];
    return outgoing_pipe;
   }
   function extra(t){return caml_call1(Bus[6], t[6]);}
   function last_extra(t){return caml_call1(Moption[7], t[7]);}
   function inject_outgoing(r){return r[2];}
   function input$0(r){return r[1];}
   function create(input, inject_outgoing){return [0, input, inject_outgoing];
   }
   function create$0(view, extra, inject_incoming){return [0, view, extra, inject_incoming];
   }
   function start_generic
   (optimize,
    get_app_result,
    initial_input,
    bind_to_element_with_id,
    component){
    var
     fresh = caml_call2(Core_Type_equal[8][3], cst, Core[148]),
     _l_ = caml_call2(Bonsai_Value[21], 4, fresh),
     var$0 = caml_call1(Bonsai[45][2], _l_),
     _m_ = caml_call1(component, var$0),
     _n_ = caml_call1(Bonsai[45][3], _m_),
     _o_ = optimize ? Bonsai[45][7] : function(_R_){return _R_;},
     computation = caml_call1(_o_, _n_),
     info = caml_call1(Bonsai[45][6], computation)[1];
    return function(get_app_input){
     var
      run = info[7],
      apply_dynamic = info[6],
      apply_static = info[5],
      static_action = info[4],
      dynamic_action = info[3],
      model = info[1],
      match = caml_call3(Async_kernel_Pipe[7], 0, 0, 0),
      pipe_write = match[2],
      outgoing_pipe = match[1],
      Action = [0],
      handle$0 = caml_call1(Async_kernel_Pipe[33], pipe_write),
      Out_event = caml_call1(Ui_effect[18], [0, Action, handle$0]),
      input_var = caml_call2(Ui_incr[53][2], 0, initial_input),
      extra =
        caml_call5
         (Bus[7],
          0,
          _a_,
          0,
          1,
          function(error){
           var _Q_ = caml_call1(Core_Error[6], error);
           return caml_call2(Core[251], 0, _Q_);
          }),
      last_extra = caml_call1(Moption[4], 0);
     caml_call4
      (Bus[20],
       0,
       extra,
       _b_,
       function(extra){return caml_call2(Moption[12], last_extra, extra);});
     var
      _p_ = caml_call1(Async_kernel_Ivar[12], 0),
      _q_ = caml_call1(Async_kernel_Ivar[12], 0),
      handle =
        [0,
         [0, caml_call2(Core_Queue[62], 0, 0)],
         _q_,
         _p_,
         input_var,
         outgoing_pipe,
         extra,
         last_extra],
      _r_ = caml_call1(Ui_incr[53][4], input_var),
      input =
        caml_call2
         (Ui_incr[78][4][6],
          _r_,
          function(input){
           return caml_call2(get_app_input, input, Out_event[1]);
          }),
      prev_lifecycle = [0, Bonsai_Lifecycle[1][2]],
      is_debugging_var = caml_call2(Ui_incr[53][2], 0, 0),
      debugger_shutdown = [0, 0];
     function cutoff(_P_, _O_){return _P_ === _O_ ? 1 : 0;}
     var
      Model = [0, cutoff],
      State = [0],
      sexp_of_dynamic_action =
        caml_call1(Bonsai_Meta[2][1][5], dynamic_action),
      sexp_of_static_action = caml_call1(Bonsai_Meta[2][1][5], static_action);
     function sexp_of_t(param){
      if(0 === param[0]){
       var
        arg0_006 = param[1],
        res0_007 = caml_call1(sexp_of_dynamic_action, arg0_006);
       return [1, [0, _c_, [0, res0_007, 0]]];
      }
      var
       arg0_008 = param[1],
       res0_009 = caml_call1(sexp_of_static_action, arg0_008);
      return [1, [0, _d_, [0, res0_009, 0]]];
     }
     function action_requires_stabilization(param){return 0 === param[0] ? 1 : 0;
     }
     function on_startup(_N_, param){return caml_call1(Async_kernel[19], 0);}
     function _s_(model, param, inject, run){
      var
       environment =
         caml_call3
          (Bonsai_Environment[2], Bonsai_Environment[1], fresh, input);
      function inject_dynamic(a){return caml_call1(inject, [0, a]);}
      function inject_static(a){return caml_call1(inject, [1, a]);}
      var
       snapshot =
         caml_call6
          (run,
           environment,
           Bonsai_Path[25],
           Ui_incr[2],
           model,
           inject_dynamic,
           inject_static),
       _F_ = caml_call1(Bonsai_Snapshot[2], snapshot),
       _G_ = caml_call2(Ui_incr[78][2], _F_, get_app_result),
       let_syntax_010 =
         caml_call2
          (Ui_incr[78][4][6],
           _G_,
           function(param){
            var
             inject_incoming = param[3],
             extra = param[2],
             view = param[1],
             prev = handle[1];
            handle[1] = [1, inject_incoming];
            if(0 === prev[0]){
             var queue = prev[1];
             caml_call2
              (Core_Queue[16],
               queue,
               function(_M_){return schedule(handle, _M_);});
            }
            caml_call2(Bus[12], handle[6], extra);
            return view;
           }),
       _H_ = caml_call1(Bonsai_Snapshot[1], snapshot),
       _I_ = caml_call1(Bonsai_Input[3], _H_),
       let_syntax_011 =
         caml_call2
          (Ui_incr[78][4][6],
           _I_,
           function(input, param, schedule_event, model, action){
            if(0 === action[0]){
             var action$0 = action[1];
             return caml_call6
                     (apply_dynamic,
                      inject_dynamic,
                      inject_static,
                      schedule_event,
                      [0, input],
                      model,
                      action$0);
            }
            var action$1 = action[1];
            return caml_call5
                    (apply_static,
                     inject_dynamic,
                     inject_static,
                     schedule_event,
                     model,
                     action$1);
           }),
       _J_ = caml_call1(Bonsai_Snapshot[4], snapshot),
       let_syntax_012 =
         caml_call2
          (Ui_incr[78][4][6],
           _J_,
           function(lifecycle, param, schedule_event){
            caml_call2(Async_kernel_Ivar[15], handle[3], 0);
            caml_call1
             (schedule_event,
              caml_call2(Bonsai_Lifecycle[1][3], prev_lifecycle[1], lifecycle));
            prev_lifecycle[1] = lifecycle;
            return 0;
           }),
       _K_ = caml_call2(Ui_incr[78][4][21], let_syntax_011, let_syntax_012),
       _L_ = caml_call2(Ui_incr[78][4][21], let_syntax_010, _K_);
      return caml_call2
              (Ui_incr[78][4][6],
               _L_,
               function(param){
                var
                 match = param[2],
                 on_display = match[2],
                 apply_action = match[1],
                 view = param[1];
                function update_visibility(model, param){return model;}
                return [0, view, apply_action, update_visibility, on_display];
               });
     }
     function create(model, old_model, inject){
      function safe_start(computation){
       var
        info$0 = caml_call1(Bonsai[45][6], computation)[1],
        match = caml_call2(Bonsai_Meta[4][1], info[2], info$0[2]),
        _D_ = caml_call2(Bonsai_Meta[2][1][2], info[4], info$0[4]),
        _E_ = caml_call2(Bonsai_Meta[2][1][2], info[3], info$0[3]);
       if
        (caml_call2(Bonsai_Meta[1][1][2], info[1][3], info$0[1][3])
         && _E_ && _D_ && match)
        return _s_(model, old_model, inject, info$0[7]);
       caml_call1(Core[31], cst_Not_starting_debugger_An_e);
       return _s_(model, old_model, inject, run);
      }
      var _A_ = caml_call1(Ui_incr[53][4], is_debugging_var);
      return caml_call2
              (Ui_incr[78][4][1],
               _A_,
               function(param){
                if(! param) return safe_start(computation);
                var
                 worker_name$0 = param[3],
                 port$0 = param[2],
                 host$0 = param[1],
                 _B_ =
                   caml_call2(Base_Option[27][4][4], port$0, worker_name$0),
                 _C_ = caml_call2(Base_Option[27][4][4], host$0, _B_),
                 match =
                   caml_call2
                    (Base_Option[27][4][3],
                     _C_,
                     function(param){
                      var
                       match = param[2],
                       worker_name = match[2],
                       port = match[1],
                       host = param[1];
                      return [0, host, port, worker_name];
                     });
                if(match)
                 var
                  match$0 = match[1],
                  worker_name = match$0[3],
                  port = match$0[2],
                  host = match$0[1],
                  match$1 =
                    caml_call4
                     (Bonsai_web_Forward_performance[1],
                      host,
                      port,
                      worker_name,
                      computation);
                else{
                 caml_call1(Core[31], cst_debugger_host_and_port_not);
                 var match$1 = [0, computation, function(param){return 0;}];
                }
                var
                 shutdown = match$1[2],
                 instrumented_computation = match$1[1];
                debugger_shutdown[1] = [0, shutdown];
                return safe_start(instrumented_computation);
               });
     }
     var
      _t_ = model[1],
      _u_ = [0, caml_call1(Async_kernel_Ivar[18], handle[2])];
     caml_call6
      (Incr_dom_Start_app[2][1],
       0,
       _u_,
       0,
       bind_to_element_with_id,
       _t_,
       [0,
        Model,
        [0, sexp_of_t],
        State,
        action_requires_stabilization,
        on_startup,
        create]);
     function start_bonsai_debugger(dry_run, host, port, worker_name){
      function print_message(param){
       return caml_call1(Core[31], cst_Not_starting_debugger_Be_a);
      }
      return caml_call3
              (Js_of_ocaml_Js[6][7],
               dry_run,
               print_message,
               function(dry_run){
                if(! (dry_run | 0)) return print_message(0);
                if(caml_call1(Ui_incr[53][5], is_debugging_var))
                 caml_call1(Core[31], cst_Already_debugging);
                else{
                 caml_call1(Core[31], cst_Starting_the_debugger);
                 var
                  _v_ = caml_call1(Js_of_ocaml_Js[6][10], worker_name),
                  _w_ =
                    caml_call2(Core_Option[30], _v_, caml_string_of_jsstring),
                  _x_ = caml_call1(Js_of_ocaml_Js[6][10], port),
                  _y_ = caml_call1(Js_of_ocaml_Js[6][10], host),
                  _z_ =
                    [0,
                     caml_call2(Core_Option[30], _y_, caml_string_of_jsstring),
                     _x_,
                     _w_];
                 caml_call2(Ui_incr[53][3], is_debugging_var, _z_);
                }
                return caml_call1(Ui_incr[58], 0);
               });
     }
     function stop_bonsai_debugger(param){
      caml_call2
       (Core_Option[42],
        debugger_shutdown[1],
        function(f){return caml_call1(f, 0);});
      debugger_shutdown[1] = 0;
      caml_call2(Ui_incr[53][3], is_debugging_var, 0);
      return caml_call1(Ui_incr[58], 0);
     }
     var
      t0 = caml_js_wrap_callback_unsafe(start_bonsai_debugger),
      t1 = Js_of_ocaml_Js[52][1];
     t1.startBonsaiDebugger = t0;
     var
      t2 = caml_js_wrap_callback_unsafe(stop_bonsai_debugger),
      t3 = Js_of_ocaml_Js[52][1];
     t3.stopBonsaiDebugger = t2;
     return handle;};
   }
   function start_standalone
   (opt, initial_input, bind_to_element_with_id, component){
    var optimize = opt ? opt[1] : 1;
    return start_generic
             (optimize,
              function(view){return [0, view, 0, Core_Nothing[3]];},
              initial_input,
              bind_to_element_with_id,
              component)
            (function(input, param){return input;});
   }
   function start(opt, initial_input, bind_to_element_with_id, component){
    var optimize = opt ? opt[1] : 1;
    return start_generic
             (optimize,
              function(_k_){return _k_;},
              initial_input,
              bind_to_element_with_id,
              component)
            (create);
   }
   function extra$0(param){return 0;}
   var No_extra = [0, extra$0];
   function incoming(param){return Core_Nothing[3];}
   var No_incoming = [0, incoming];
   function view(_j_){return _j_;}
   var
    extra$1 = No_extra[1],
    incoming$0 = No_incoming[1],
    just_the_view = [0, view, extra$1, incoming$0],
    Result_spec = [0, No_extra, No_incoming, just_the_view],
    _e_ = [0, cst_web_start_ml, 466, 38],
    cst_app = "app";
   function start_and_get_handle
   (result_spec, _f_, opt, bind_to_element_with_id, computation){
    var
     optimize = _f_ ? _f_[1] : 1,
     custom_connector =
       opt
        ? opt[1]
        : function
         (param){
          throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
         },
     computation$0 =
       caml_call2
        (Bonsai_web_Rpc_effect[8][1],
         function(param){
          if(typeof param === "number")
           return caml_call1(Bonsai_web_Rpc_effect[8][2], 0);
          if(0 === param[0]){
           var url = param[1];
           return caml_call1(Bonsai_web_Rpc_effect[8][3], url);
          }
          var custom = param[1];
          return caml_call1(custom_connector, custom);
         },
         computation),
     _g_ = caml_call1(Core_Fn[1], computation$0),
     bonsai =
       caml_call2
        (Bonsai[48][5],
         _g_,
         function(r){
          var
           _h_ = caml_call1(result_spec[3], r),
           _i_ = caml_call1(result_spec[2], r);
          return [0, caml_call1(result_spec[1], r), _i_, _h_];
         });
    return start([0, optimize], 0, bind_to_element_with_id, bonsai);
   }
   function start$0(custom_connector, opt, component){
    var bind_to_element_with_id = opt ? opt[1] : cst_app;
    start_and_get_handle
     (Result_spec[3], 0, custom_connector, bind_to_element_with_id, component);
    return 0;
   }
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai_web);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_web_Start);
   var
    Bonsai_web_Start =
      [0,
       [0,
        [0,
         stop,
         started,
         schedule,
         outgoing,
         input,
         set_input,
         update_input,
         extra,
         last_extra],
        [0, input$0, inject_outgoing],
        [0, create$0],
        start_standalone,
        start],
       [0,
        [0, stop, started, schedule, extra, last_extra],
        Result_spec,
        start$0,
        start_and_get_handle]];
   runtime.caml_register_global(62, Bonsai_web_Start, cst_Bonsai_web_Start);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai_web__Persistent_var
//# unitInfo: Requires: Base__Option, Bonsai, Bonsai_web__Effect, Core, Core__Error, Core__Option, Core__Or_error, Core__Sexp, Expect_test_collector, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_web_Persistent_var = "Bonsai_web__Persistent_var",
    cst_bonsai_web = "bonsai_web",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bonsai = global_data.Bonsai,
    Core_Sexp = global_data.Core__Sexp,
    Core_Or_error = global_data.Core__Or_error,
    Core_Error = global_data.Core__Error,
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Bonsai_web_Effect = global_data.Bonsai_web__Effect,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Core_Option = global_data.Core__Option,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Base_Option = global_data.Base__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_web_Persistent_var);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_web);
   caml_call1(Expect_test_collector[6][1], "web/persistent_var.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai_web, "persistent_var.ml");
   var
    _a_ = [0, "e"],
    _b_ = [0, "unique_id"],
    cst_WARNING_Could_not_deserial =
      "WARNING: Could not deserialize persistent-var";
   function create(M, kind, unique_id, default$0){
    function _c_(storage){
     function set(key, value){
      var
       t3 = caml_jsstring_of_string(value),
       t2 = caml_jsstring_of_string(key);
      return storage.setItem(t2, t3);
     }
     function get(key){
      var
       t5 = caml_jsstring_of_string(key),
       _j_ = storage.getItem(t5),
       _k_ = caml_call1(Js_of_ocaml_Js[5][10], _j_);
      return caml_call2(Core_Option[30], _k_, runtime.caml_string_of_jsstring);
     }
     function delete$0(key){
      var t7 = caml_jsstring_of_string(key);
      return storage.removeItem(t7);
     }
     return [0, get, set, delete$0];
    }
    if(-442878713 <= kind)
     var
      t0 = Js_of_ocaml_Dom_html[8],
      _d_ = caml_call1(Js_of_ocaml_Js[6][10], t0.localStorage);
    else
     var
      t1 = Js_of_ocaml_Dom_html[8],
      _d_ = caml_call1(Js_of_ocaml_Js[6][10], t1.sessionStorage);
    var match = caml_call2(Base_Option[27][4][3], _d_, _c_);
    if(match)
     var
      match$0 = match[1],
      delete$0 = match$0[3],
      setter = match$0[2],
      getter = match$0[1],
      deleter = delete$0,
      setter$0 = setter,
      getter$0 = getter;
    else
     var
      deleter$0 = function(key){return 0;},
      setter$2 = function(key, value){return 0;},
      getter$1 = function(key){return 0;},
      deleter = deleter$0,
      setter$0 = setter$2,
      getter$0 = getter$1;
    var match$1 = caml_call1(getter$0, unique_id);
    if(match$1){
     var
      sexp = match$1[1],
      match$2 =
        caml_call2
         (Core_Or_error[33],
          0,
          function(param){
           var _i_ = caml_call1(Core_Sexp[73], sexp);
           return caml_call1(M[1], _i_);
          });
     if(0 === match$2[0])
      var a = match$2[1], a$0 = a;
     else{
      var
       e = match$2[1],
       _e_ = [0, [1, [0, _a_, [0, caml_call1(Core_Error[6], e), 0]]], 0],
       _f_ = [0, [1, [0, _b_, [0, caml_call1(Core[484], unique_id), 0]]], _e_],
       _g_ =
         [1,
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_WARNING_Could_not_deserial),
           _f_]];
      caml_call2(Core[251], 0, _g_);
      var a$0 = default$0;
     }
     var value = a$0;
    }
    else
     var value = default$0;
    var var$0 = caml_call1(Bonsai[4][1], value);
    function setter$1(t){
     var _h_ = caml_call1(M[2], t);
     return caml_call2(setter$0, unique_id, caml_call1(Core_Sexp[82], _h_));
    }
    function clear(param){return caml_call1(deleter, unique_id);}
    var
     effect =
       caml_call1
        (Bonsai_web_Effect[15],
         function(a){setter$1(a); return caml_call2(Bonsai[4][3], var$0, a);});
    return [0, var$0, setter$1, clear, effect];
   }
   function set(param, a){
    var setter = param[2], var$0 = param[1];
    caml_call1(setter, a);
    return caml_call2(Bonsai[4][3], var$0, a);
   }
   function value(param){
    var var$0 = param[1];
    return caml_call1(Bonsai[4][5], var$0);
   }
   function update(param, f){
    var setter = param[2], var$0 = param[1];
    return caml_call2
            (Bonsai[4][2],
             var$0,
             function(old){
              var new$0 = caml_call1(f, old);
              caml_call1(setter, new$0);
              return new$0;
             });
   }
   function get(param){
    var var$0 = param[1];
    return caml_call1(Bonsai[4][4], var$0);
   }
   function clear_persistence(param){
    var clear = param[3];
    return caml_call1(clear, 0);
   }
   function effect(param){var effect = param[4]; return effect;}
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai_web);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_web_Persistent_var);
   var
    Bonsai_web_Persistent_var =
      [0, create, update, set, get, value, clear_persistence, effect];
   runtime.caml_register_global
    (30, Bonsai_web_Persistent_var, cst_Bonsai_web_Persistent_var);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai_web__Import_stable
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Bonsai_web_Import_stable = [0];
   runtime.caml_register_global
    (0, Bonsai_web_Import_stable, "Bonsai_web__Import_stable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bonsai_web
//# unitInfo: Requires: Bonsai, Bonsai_web__Effect, Bonsai_web__Util, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bonsai_web = "Bonsai_web",
    cst_bonsai_web = "bonsai_web";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Bonsai_web_Util = global_data.Bonsai_web__Util,
    Bonsai_web_Effect = global_data.Bonsai_web__Effect;
   caml_call1(Ppx_module_timer_runtime[4], cst_Bonsai_web);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_bonsai_web);
   caml_call1(Expect_test_collector[6][1], "web/bonsai_web.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_bonsai_web, "bonsai_web.ml");
   var
    Arrow_deprecated = [0],
    am_running_how = Bonsai_web_Util[1],
    am_within_disabled_fieldset = Bonsai_web_Util[2];
   caml_call1(Ppx_inline_test_lib[6], cst_bonsai_web);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Bonsai_web);
   var
    Bonsai_web =
      [0,
       Arrow_deprecated,
       am_running_how,
       am_within_disabled_fieldset,
       Bonsai_web_Effect];
   runtime.caml_register_global(13, Bonsai_web, cst_Bonsai_web);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
