// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Weak_hashtbl
//# unitInfo: Requires: Base__Error, Base__Exn, Base__Hashable, Base__Hashtbl, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib, Stdlib__Gc, Thread_safe_queue, Weak_pointer
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Weak_hashtbl = "Weak_hashtbl",
    cst = "_",
    cst_weak_hashtbl = "weak_hashtbl",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Weak_pointer = global_data.Weak_pointer,
    Base_Hashtbl = global_data.Base__Hashtbl,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_Error = global_data.Base__Error,
    Thread_safe_queue = global_data.Thread_safe_queue,
    Base_Exn = global_data.Base__Exn,
    Stdlib_Gc = global_data.Stdlib__Gc,
    Stdlib = global_data.Stdlib,
    Base_Hashable = global_data.Base__Hashable,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Weak_hashtbl);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_weak_hashtbl);
   caml_call1(Expect_test_collector[6][1], "weak_hashtbl/src/weak_hashtbl.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_weak_hashtbl, "weak_hashtbl.ml");
   var
    _a_ = [0, "thread_safe_run_when_unused_data"],
    _b_ = [0, "keys_with_unused_data"],
    _c_ = [0, "entry_by_key"];
   function sexp_of_t(of_a_001, of_b_002, param){
    var
     keys_with_unused_data_006 = param[2],
     entry_by_key_004 = param[1],
     arg_009 = caml_call1(Sexplib0_Sexp_conv[24], function(_q_){return 0;}),
     bnds_003 = [0, [1, [0, _a_, [0, arg_009, 0]]], 0],
     arg_007 =
       caml_call2(Thread_safe_queue[1], of_a_001, keys_with_unused_data_006),
     bnds_003$0 = [0, [1, [0, _b_, [0, arg_007, 0]]], bnds_003],
     _p_ = caml_call1(Weak_pointer[1], of_b_002),
     arg_005 = caml_call3(Base_Hashtbl[3], of_a_001, _p_, entry_by_key_004),
     bnds_003$1 = [0, [1, [0, _c_, [0, arg_005, 0]]], bnds_003$0];
    return [1, bnds_003$1];
   }
   function create(growth_allowed, size, hashable){
    var
     _m_ = caml_call1(Thread_safe_queue[3], 0),
     _n_ = caml_call1(Base_Hashable[4], hashable);
    return [0,
            caml_call3(Base_Hashtbl[4], growth_allowed, size, _n_),
            _m_,
            function(_o_){return 0;}];
   }
   var
    Using_hashable = [0, create],
    cst_weak_hashtbl_src_weak_hash = "weak_hashtbl/src/weak_hashtbl.ml:79:71",
    _d_ = [0, cst],
    _e_ = [0, cst],
    cst_Weak_hashtbl_add_exn_of_ke = "Weak_hashtbl.add_exn of key in use";
   function create$0(growth_allowed, size, m){
    var _l_ = caml_call1(Base_Hashable[3], m);
    return caml_call3(Using_hashable[1], growth_allowed, size, _l_);
   }
   function set_run_when_unused_data(t, thread_safe_f){t[3] = thread_safe_f; return 0;
   }
   function remove(t, key){return caml_call2(Base_Hashtbl[31], t[1], key);}
   function reclaim_space_for_keys_with_un(t){
    for(;;){
     if(0 >= caml_call1(Thread_safe_queue[4], t[2])) return 0;
     var
      key = caml_call1(Thread_safe_queue[6], t[2]),
      match = caml_call2(Base_Hashtbl[55], t[1], key);
     if(match){
      var entry = match[1];
      if(caml_call1(Weak_pointer[5], entry)) remove(t, key);
     }
    }
   }
   function get_entry(t, key){
    return caml_call3
            (Base_Hashtbl[53],
             t[1],
             key,
             function(param){return caml_call1(Weak_pointer[2], 0);});
   }
   function mem(t, key){
    var match = caml_call2(Base_Hashtbl[55], t[1], key);
    if(! match) return 0;
    var entry = match[1];
    return caml_call1(Weak_pointer[4], entry);
   }
   function key_is_using_space(t, key){
    return caml_call2(Base_Hashtbl[30], t[1], key);
   }
   function set_data(t, key, entry, data){
    caml_call2(Weak_pointer[6], entry, data);
    function cleanup(param){
     return caml_call1
             (Base_Exn[15],
              function(param){
               caml_call2(Thread_safe_queue[5], t[2], key);
               return caml_call1(t[3], 0);
              });
    }
    try{var _j_ = caml_call2(Stdlib_Gc[4], cleanup, data); return _j_;}
    catch(_k_){
     var _i_ = caml_wrap_exception(_k_);
     if(_i_[1] === Stdlib[6]) return 0;
     throw caml_maybe_attach_backtrace(_i_, 0);
    }
   }
   function replace(t, key, data){
    return set_data(t, key, get_entry(t, key), data);
   }
   function add_exn(x_010, key, data){
    var entry = get_entry(x_010, key);
    if(caml_call1(Weak_pointer[4], entry)){
     var
      _f_ =
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_weak_hashtbl_src_weak_hash),
         0],
      _g_ =
        [0,
         sexp_of_t
          (function(param){return _e_;}, function(param){return _d_;}, x_010),
         _f_],
      _h_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Weak_hashtbl_add_exn_of_ke),
          _g_]];
     caml_call1(Base_Error[30], _h_);
    }
    return set_data(x_010, key, entry, data);
   }
   function find(t, key){
    var match = caml_call2(Base_Hashtbl[55], t[1], key);
    if(! match) return 0;
    var entry = match[1];
    return caml_call1(Weak_pointer[3], entry);
   }
   function find_or_add(t, key, default$0){
    var entry = get_entry(t, key), match = caml_call1(Weak_pointer[3], entry);
    if(match){var v = match[1]; return v;}
    var data = caml_call1(default$0, 0);
    set_data(t, key, entry, data);
    return data;
   }
   caml_call1(Ppx_inline_test_lib[6], cst_weak_hashtbl);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Weak_hashtbl);
   var
    Weak_hashtbl =
      [0,
       sexp_of_t,
       create$0,
       Using_hashable,
       mem,
       find,
       find_or_add,
       remove,
       add_exn,
       replace,
       key_is_using_space,
       reclaim_space_for_keys_with_un,
       set_run_when_unused_data];
   runtime.caml_register_global(27, Weak_hashtbl, cst_Weak_hashtbl);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
