// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Splittable_random
//# unitInfo: Requires: Base, Base__Error, Base__Float, Base__Int, Base__Int32, Base__Int63, Base__Int64, Base__Nativeint, Base__Random, Ppx_bench_lib__Benchmark_accumulator, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_hi = "hi",
    cst_lo = "lo",
    cst_src_splittable_random_ml$1 = "src/splittable_random.ml",
    caml_div = runtime.caml_div,
    caml_equal = runtime.caml_equal,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_greaterthan = runtime.caml_greaterthan,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_and = runtime.caml_int64_and,
    caml_int64_div = runtime.caml_int64_div,
    caml_int64_mul = runtime.caml_int64_mul,
    caml_int64_neg = runtime.caml_int64_neg,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_or = runtime.caml_int64_or,
    caml_int64_shift_left = runtime.caml_int64_shift_left,
    caml_int64_shift_right = runtime.caml_int64_shift_right,
    caml_int64_shift_right_unsigne = runtime.caml_int64_shift_right_unsigned,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_int64_xor = runtime.caml_int64_xor,
    caml_lessequal = runtime.caml_lessequal,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mul = runtime.caml_mul,
    caml_notequal = runtime.caml_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    int64$0 = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    golden_gamma = runtime.caml_int64_create_lo_mi_hi(4881429, 7977343, 40503),
    Base_Int = global_data.Base__Int,
    Assert_failure = global_data.Assert_failure,
    Base = global_data.Base,
    Base_Float = global_data.Base__Float,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_Int64 = global_data.Base__Int64,
    Base_Int63 = global_data.Base__Int63,
    Base_Error = global_data.Base__Error,
    Base_Random = global_data.Base__Random,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Base_Int32 = global_data.Base__Int32,
    Base_Nativeint = global_data.Base__Nativeint;
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], "splittable_random");
   var
    popcount = Base_Int64[49],
    _a_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _b_ = runtime.caml_int64_create_lo_mi_hi(5606605, 11524077, 65361),
    _c_ = runtime.caml_int64_create_lo_mi_hi(8776787, 12189210, 50382),
    _d_ = runtime.caml_int64_create_lo_mi_hi(15001017, 4680988, 48984),
    _e_ = runtime.caml_int64_create_lo_mi_hi(3215851, 4832019, 38096),
    _f_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _g_ = runtime.caml_int64_create_lo_mi_hi(11184810, 11184810, 43690),
    _h_ = [0, cst_hi],
    _i_ = [0, cst_lo],
    cst_int64_crossed_bounds = "int64: crossed bounds",
    _j_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0);
   function of_int(seed){return [0, caml_int64_of_int32(seed), golden_gamma];}
   function copy(param){
    var seed = param[1], odd_gamma = param[2];
    return [0, seed, odd_gamma];
   }
   function mix_bits(z, n){
    return caml_int64_xor(z, caml_int64_shift_right_unsigne(z, n));
   }
   function mix64(z){
    var
     z$0 = caml_int64_mul(mix_bits(z, 33), _b_),
     z$1 = caml_int64_mul(mix_bits(z$0, 33), _c_);
    return mix_bits(z$1, 33);
   }
   function next_seed(t){
    var next = caml_int64_add(t[1], t[2]);
    t[1] = next;
    return next;
   }
   function of_seed_and_gamma(seed, gamma){
    var
     seed$0 = mix64(seed),
     z = caml_int64_mul(mix_bits(gamma, 30), _d_),
     z$0 = caml_int64_mul(mix_bits(z, 27), _e_),
     z$1 = caml_int64_or(mix_bits(z$0, 31), _f_),
     n =
       caml_call1
        (popcount,
         caml_int64_xor(z$1, caml_int64_shift_right_unsigne(z$1, 1))),
     odd_gamma = 24 <= n ? z$1 : caml_int64_xor(z$1, _g_);
    return [0, seed$0, odd_gamma];
   }
   function random_int64(random_state){
    return caml_call3
            (Base_Random[18][14],
             random_state,
             Base_Int64[63],
             Base_Int64[62]);
   }
   function create(random_state){
    var seed = random_int64(random_state), gamma = random_int64(random_state);
    return of_seed_and_gamma(seed, gamma);
   }
   function split(t){
    var seed = next_seed(t), gamma = next_seed(t);
    return of_seed_and_gamma(seed, gamma);
   }
   function next_int64(t){return mix64(next_seed(t));}
   function perturb(t, salt){
    var
     _aU_ = mix64(caml_int64_of_int32(salt)),
     next = caml_int64_add(t[1], _aU_);
    t[1] = next;
    return 0;
   }
   function bool(state){
    var x = next_int64(state);
    return caml_equal(caml_int64_or(x, _a_), x);
   }
   function int64(state, lo, hi){
    if(caml_greaterthan(lo, hi)){
     var
      _aQ_ = [0, [1, [0, _h_, [0, caml_call1(Base[141], hi), 0]]], 0],
      _aR_ = [0, [1, [0, _i_, [0, caml_call1(Base[141], lo), 0]]], _aQ_],
      _aS_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_int64_crossed_bounds),
          _aR_]];
     caml_call1(Base_Error[30], _aS_);
    }
    var remainder_maximum = caml_int64_sub(hi, lo);
    if(caml_equal(remainder_maximum, Base_Int64[62])){
     var _aT_ = Base_Int64[62];
     return caml_int64_add(caml_int64_and(next_int64(state), _aT_), lo);
    }
    if(caml_greaterequal(remainder_maximum, _j_))
     for(;;){
      var
       _aO_ = Base_Int64[62],
       draw$0 = caml_int64_and(next_int64(state), _aO_),
       _aP_ = caml_call1(Base_Int64[42], remainder_maximum),
       remainder = caml_call2(Base_Int64[36], draw$0, _aP_),
       draw_maximum = Base_Int64[62];
      if
       (caml_lessequal
         (caml_int64_sub(draw$0, remainder),
          caml_int64_sub(draw_maximum, remainder_maximum)))
       return caml_int64_add(remainder, lo);
     }
    else
     for(;;){
      var draw = next_int64(state);
      if(caml_lessequal(lo, draw) && caml_lessequal(draw, hi)) return draw;
     }
   }
   function int$0(state, lo, hi){
    var lo$0 = caml_int64_of_int32(lo), hi$0 = caml_int64_of_int32(hi);
    return caml_int64_to_int32(int64(state, lo$0, hi$0));
   }
   function int32(state, lo, hi){
    var lo$0 = caml_int64_of_int32(lo), hi$0 = caml_int64_of_int32(hi);
    return caml_int64_to_int32(int64(state, lo$0, hi$0));
   }
   function nativeint(state, lo, hi){
    var
     lo$0 = caml_call1(Base_Int64[82], lo),
     hi$0 = caml_call1(Base_Int64[82], hi);
    return caml_int64_to_int32(int64(state, lo$0, hi$0));
   }
   function int63(state, lo, hi){
    var
     lo$0 = caml_call1(Base_Int63[80], lo),
     hi$0 = caml_call1(Base_Int63[80], hi),
     _aN_ = int64(state, lo$0, hi$0);
    return caml_call1(Base_Int63[106], _aN_);
   }
   var
    double_ulp = caml_call2(Base[210], 2., -53.),
    _k_ = [0, cst_hi],
    _l_ = [0, cst_lo],
    cst_float_bounds_are_not_finit = "float: bounds are not finite numbers",
    _m_ = [0, cst_hi],
    _n_ = [0, cst_lo],
    cst_float_bounds_are_crossed = "float: bounds are crossed";
   function unit_float_from_int64(int64){
    var
     _aM_ =
       caml_call1(Base_Int64[4], caml_int64_shift_right_unsigne(int64, 11));
    return caml_call2(Base[207], _aM_, double_ulp);
   }
   function unit_float(state){
    return unit_float_from_int64(next_int64(state));
   }
   function float$0(state, lo$0, hi$0){
    var
     _aE_ = caml_call1(Base_Float[86], lo$0),
     _aF_ = _aE_ ? caml_call1(Base_Float[86], hi$0) : _aE_;
    if(1 - _aF_){
     var
      _aG_ = [0, [1, [0, _k_, [0, caml_call1(Base[117], hi$0), 0]]], 0],
      _aH_ = [0, [1, [0, _l_, [0, caml_call1(Base[117], lo$0), 0]]], _aG_],
      _aI_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_float_bounds_are_not_finit),
          _aH_]];
     caml_call1(Base[217], _aI_);
    }
    if(caml_call2(Base_Float[13], lo$0, hi$0)){
     var
      _aJ_ = [0, [1, [0, _m_, [0, caml_call1(Base[117], hi$0), 0]]], 0],
      _aK_ = [0, [1, [0, _n_, [0, caml_call1(Base[117], lo$0), 0]]], _aJ_],
      _aL_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_float_bounds_are_crossed),
          _aK_]];
     caml_call1(Base[217], _aL_);
    }
    var lo = lo$0, hi = hi$0;
    for(;;){
     var range = caml_call2(Base[206], hi, lo);
     if(caml_call1(Base_Float[86], range)){
      var _aB_ = unit_float(state), _aC_ = caml_call2(Base[207], _aB_, range);
      return caml_call2(Base[205], lo, _aC_);
     }
     var
      _aD_ = caml_call2(Base[205], hi, lo),
      mid = caml_call2(Base[208], _aD_, 2.);
     if(bool(state)) hi = mid; else lo = mid;
    }
   }
   var
    _o_ = [0, cst_src_splittable_random_ml$1, 289, 6],
    cst_src_splittable_random_ml = cst_src_splittable_random_ml$1,
    cst_src_splittable_random_ml$0 = cst_src_splittable_random_ml$1,
    cst_let_int64_1L_in_fun_unit_f =
      "let int64 = 1L in fun () -> unit_float_from_int64 int64",
    cst_unit_float_from_int64 = "unit_float_from_int64";
   if(Ppx_bench_lib_Benchmark_accumu[3]){
    var
     f =
       function(param){
        return function(param){return unit_float_from_int64(int64$0);};
       };
    caml_call8
     (Ppx_bench_lib_Benchmark_accumu[5],
      cst_unit_float_from_int64,
      cst_let_int64_1L_in_fun_unit_f,
      cst_src_splittable_random_ml$0,
      cst_src_splittable_random_ml,
      278,
      0,
      99,
      [0, f]);
   }
   function Make(M){
    function bits_to_represent(t){
     if(! caml_call2(M[12], t, M[39]))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _o_], 1);
     var t$0 = [0, t], n = [0, 0];
     for(;;){
      if(! caml_call2(M[15], t$0[1], M[39])) return n[1];
      t$0[1] = caml_call2(M[74], t$0[1], 1);
      caml_call1(Base_Int[53], n);
     }
    }
    function log_uniform(state, lo, hi){
     var
      min_bits = bits_to_represent(lo),
      max_bits = bits_to_represent(hi),
      bits = int$0(state, min_bits, max_bits),
      _aw_ = caml_call2(M[73], M[40], bits),
      _ax_ = caml_call1(M[66], _aw_),
      _ay_ = caml_call1(caml_call1(M[20], hi), _ax_);
     if(caml_call2(Base_Int[13], bits, 0))
      var _az_ = M[39];
     else
      var
       _av_ = caml_call1(Base_Int[43], bits),
       _az_ = caml_call2(M[73], M[40], _av_);
     var _aA_ = caml_call1(caml_call1(M[21], lo), _az_);
     return caml_call3(M[97], state, _aA_, _ay_);
    }
    return [0, log_uniform];
   }
   var
    t_sexp_grammar = Base_Int[2],
    of_float = Base_Int[3],
    to_float = Base_Int[4],
    of_int_exn = Base_Int[5],
    to_int_exn = Base_Int[6],
    hash_fold_t = Base_Int[7],
    hash = Base_Int[8],
    t_of_sexp = Base_Int[9],
    sexp_of_t = Base_Int[10],
    of_string = Base_Int[11],
    to_string = Base_Int[12],
    equal = Base_Int[13],
    compare = Base_Int[14],
    min = Base_Int[15],
    max = Base_Int[16],
    ascending = Base_Int[17],
    descending = Base_Int[18],
    between = Base_Int[19],
    clamp_exn = Base_Int[20],
    clamp = Base_Int[21],
    comparator = Base_Int[22],
    pp = Base_Int[23],
    hashable = Base_Int[24],
    is_positive = Base_Int[25],
    is_non_negative = Base_Int[26],
    is_negative = Base_Int[27],
    is_non_positive = Base_Int[28],
    sign = Base_Int[29],
    invariant = Base_Int[30],
    Hex = Base_Int[31],
    of_string_opt = Base_Int[32],
    to_string_hum = Base_Int[33],
    one = Base_Int[34],
    minus_one = Base_Int[35],
    rem = Base_Int[36],
    round = Base_Int[37],
    round_towards_zero = Base_Int[38],
    round_down = Base_Int[39],
    round_up = Base_Int[40],
    round_nearest = Base_Int[41],
    succ = Base_Int[42],
    pred = Base_Int[43],
    pow = Base_Int[44],
    bit_and = Base_Int[45],
    bit_or = Base_Int[46],
    bit_xor = Base_Int[47],
    bit_not = Base_Int[48],
    popcount$0 = Base_Int[49],
    shift_left = Base_Int[50],
    shift_right = Base_Int[51],
    decr = Base_Int[52],
    incr = Base_Int[53],
    of_int32_exn = Base_Int[54],
    to_int32_exn = Base_Int[55],
    of_int64_exn = Base_Int[56],
    to_int64 = Base_Int[57],
    of_nativeint_exn = Base_Int[58],
    to_nativeint_exn = Base_Int[59],
    of_float_unchecked = Base_Int[60],
    num_bits = Base_Int[61],
    max_value = Base_Int[62],
    min_value = Base_Int[63],
    shift_right_logical = Base_Int[64],
    ceil_pow2 = Base_Int[65],
    floor_pow2 = Base_Int[66],
    ceil_log2 = Base_Int[67],
    floor_log2 = Base_Int[68],
    is_pow2 = Base_Int[69],
    clz = Base_Int[70],
    ctz = Base_Int[71],
    O = Base_Int[72],
    symbol = Base_Int[73],
    lnot = Base_Int[74],
    abs = Base_Int[75],
    zero = Base_Int[76],
    symbol$0 = Base_Int[77],
    symbol$1 = Base_Int[78],
    symbol$2 = Base_Int[79],
    For_int =
      Make
       ([0,
         t_sexp_grammar,
         of_float,
         to_float,
         of_int_exn,
         to_int_exn,
         hash_fold_t,
         hash,
         t_of_sexp,
         sexp_of_t,
         of_string,
         to_string,
         function(_au_, _at_){return _at_ <= _au_ ? 1 : 0;},
         function(_as_, _ar_){return _as_ <= _ar_ ? 1 : 0;},
         function(_aq_, _ap_){return _aq_ === _ap_ ? 1 : 0;},
         function(_ao_, _an_){return _an_ < _ao_ ? 1 : 0;},
         function(_am_, _al_){return _am_ < _al_ ? 1 : 0;},
         function(_ak_, _aj_){return _ak_ !== _aj_ ? 1 : 0;},
         equal,
         compare,
         min,
         max,
         ascending,
         descending,
         between,
         clamp_exn,
         clamp,
         comparator,
         pp,
         hashable,
         is_positive,
         is_non_negative,
         is_negative,
         is_non_positive,
         sign,
         invariant,
         Hex,
         of_string_opt,
         to_string_hum,
         zero,
         one,
         minus_one,
         function(_ai_, _ah_){return _ai_ + _ah_ | 0;},
         function(_ag_, _af_){return _ag_ - _af_ | 0;},
         caml_mul,
         symbol,
         function(_ae_){return - _ae_ | 0;},
         function(_ad_){return - _ad_ | 0;},
         symbol$1,
         symbol$0,
         caml_div,
         rem,
         symbol$2,
         function(_ac_, _ab_){return _ac_ & _ab_;},
         function(_aa_, _$_){return _aa_ | _$_;},
         function(___, _Z_){return ___ ^ _Z_;},
         lnot,
         function(_Y_, _X_){return _Y_ << _X_;},
         function(_W_, _V_){return _W_ >> _V_;},
         round,
         round_towards_zero,
         round_down,
         round_up,
         round_nearest,
         abs,
         succ,
         pred,
         pow,
         bit_and,
         bit_or,
         bit_xor,
         bit_not,
         popcount$0,
         shift_left,
         shift_right,
         decr,
         incr,
         of_int32_exn,
         to_int32_exn,
         of_int64_exn,
         to_int64,
         of_nativeint_exn,
         to_nativeint_exn,
         of_float_unchecked,
         num_bits,
         max_value,
         min_value,
         function(_U_, _T_){return _U_ >>> _T_ | 0;},
         shift_right_logical,
         ceil_pow2,
         floor_pow2,
         ceil_log2,
         floor_log2,
         is_pow2,
         clz,
         ctz,
         [0,
          function(_S_, _R_){return _S_ + _R_ | 0;},
          function(_Q_, _P_){return _Q_ - _P_ | 0;},
          caml_mul,
          caml_div,
          function(_O_){return - _O_ | 0;},
          O[1],
          function(_N_, _M_){return _M_ <= _N_ ? 1 : 0;},
          function(_L_, _K_){return _L_ <= _K_ ? 1 : 0;},
          function(_J_, _I_){return _J_ === _I_ ? 1 : 0;},
          function(_H_, _G_){return _G_ < _H_ ? 1 : 0;},
          function(_F_, _E_){return _F_ < _E_ ? 1 : 0;},
          function(_D_, _C_){return _D_ !== _C_ ? 1 : 0;},
          O[3],
          function(_B_){return - _B_ | 0;},
          O[4],
          O[5],
          O[6],
          O[7],
          function(_A_, _z_){return _A_ & _z_;},
          function(_y_, _x_){return _y_ | _x_;},
          function(_w_, _v_){return _w_ ^ _v_;},
          O[2],
          function(_u_, _t_){return _u_ << _t_;},
          function(_s_, _r_){return _s_ >> _r_;},
          function(_q_, _p_){return _q_ >>> _p_ | 0;}],
         int$0]),
    t_sexp_grammar$0 = Base_Int32[2],
    of_float$0 = Base_Int32[3],
    to_float$0 = Base_Int32[4],
    of_int_exn$0 = Base_Int32[5],
    to_int_exn$0 = Base_Int32[6],
    hash_fold_t$0 = Base_Int32[7],
    hash$0 = Base_Int32[8],
    t_of_sexp$0 = Base_Int32[9],
    sexp_of_t$0 = Base_Int32[10],
    of_string$0 = Base_Int32[11],
    to_string$0 = Base_Int32[12],
    symbol$3 = Base_Int32[13],
    symbol$4 = Base_Int32[14],
    symbol$5 = Base_Int32[15],
    symbol$6 = Base_Int32[16],
    symbol$7 = Base_Int32[17],
    symbol$8 = Base_Int32[18],
    equal$0 = Base_Int32[19],
    compare$0 = Base_Int32[20],
    min$0 = Base_Int32[21],
    max$0 = Base_Int32[22],
    ascending$0 = Base_Int32[23],
    descending$0 = Base_Int32[24],
    between$0 = Base_Int32[25],
    clamp_exn$0 = Base_Int32[26],
    clamp$0 = Base_Int32[27],
    comparator$0 = Base_Int32[28],
    pp$0 = Base_Int32[29],
    hashable$0 = Base_Int32[30],
    is_positive$0 = Base_Int32[31],
    is_non_negative$0 = Base_Int32[32],
    is_negative$0 = Base_Int32[33],
    is_non_positive$0 = Base_Int32[34],
    sign$0 = Base_Int32[35],
    invariant$0 = Base_Int32[36],
    Hex$0 = Base_Int32[37],
    of_string_opt$0 = Base_Int32[38],
    to_string_hum$0 = Base_Int32[39],
    zero$0 = Base_Int32[40],
    one$0 = Base_Int32[41],
    minus_one$0 = Base_Int32[42],
    symbol$9 = Base_Int32[43],
    symbol$10 = Base_Int32[44],
    symbol$11 = Base_Int32[45],
    symbol$12 = Base_Int32[46],
    neg = Base_Int32[47],
    symbol$13 = Base_Int32[48],
    symbol$14 = Base_Int32[49],
    symbol$15 = Base_Int32[50],
    symbol$16 = Base_Int32[51],
    rem$0 = Base_Int32[52],
    symbol$17 = Base_Int32[53],
    land = Base_Int32[54],
    lor = Base_Int32[55],
    lxor = Base_Int32[56],
    lnot$0 = Base_Int32[57],
    lsl = Base_Int32[58],
    asr = Base_Int32[59],
    round$0 = Base_Int32[60],
    round_towards_zero$0 = Base_Int32[61],
    round_down$0 = Base_Int32[62],
    round_up$0 = Base_Int32[63],
    round_nearest$0 = Base_Int32[64],
    abs$0 = Base_Int32[65],
    succ$0 = Base_Int32[66],
    pred$0 = Base_Int32[67],
    pow$0 = Base_Int32[68],
    bit_and$0 = Base_Int32[69],
    bit_or$0 = Base_Int32[70],
    bit_xor$0 = Base_Int32[71],
    bit_not$0 = Base_Int32[72],
    popcount$1 = Base_Int32[73],
    shift_left$0 = Base_Int32[74],
    shift_right$0 = Base_Int32[75],
    decr$0 = Base_Int32[76],
    incr$0 = Base_Int32[77],
    of_int32_exn$0 = Base_Int32[78],
    to_int32_exn$0 = Base_Int32[79],
    of_int64_exn$0 = Base_Int32[80],
    to_int64$0 = Base_Int32[81],
    of_nativeint_exn$0 = Base_Int32[82],
    to_nativeint_exn$0 = Base_Int32[83],
    of_float_unchecked$0 = Base_Int32[84],
    num_bits$0 = Base_Int32[85],
    max_value$0 = Base_Int32[86],
    min_value$0 = Base_Int32[87],
    lsr = Base_Int32[88],
    shift_right_logical$0 = Base_Int32[89],
    ceil_pow2$0 = Base_Int32[90],
    floor_pow2$0 = Base_Int32[91],
    ceil_log2$0 = Base_Int32[92],
    floor_log2$0 = Base_Int32[93],
    is_pow2$0 = Base_Int32[94],
    clz$0 = Base_Int32[95],
    ctz$0 = Base_Int32[96],
    O$0 = Base_Int32[97],
    For_int32 =
      Make
       ([0,
         t_sexp_grammar$0,
         of_float$0,
         to_float$0,
         of_int_exn$0,
         to_int_exn$0,
         hash_fold_t$0,
         hash$0,
         t_of_sexp$0,
         sexp_of_t$0,
         of_string$0,
         to_string$0,
         symbol$3,
         symbol$4,
         symbol$5,
         symbol$6,
         symbol$7,
         symbol$8,
         equal$0,
         compare$0,
         min$0,
         max$0,
         ascending$0,
         descending$0,
         between$0,
         clamp_exn$0,
         clamp$0,
         comparator$0,
         pp$0,
         hashable$0,
         is_positive$0,
         is_non_negative$0,
         is_negative$0,
         is_non_positive$0,
         sign$0,
         invariant$0,
         Hex$0,
         of_string_opt$0,
         to_string_hum$0,
         zero$0,
         one$0,
         minus_one$0,
         symbol$9,
         symbol$10,
         symbol$11,
         symbol$12,
         neg,
         symbol$13,
         symbol$14,
         symbol$15,
         symbol$16,
         rem$0,
         symbol$17,
         land,
         lor,
         lxor,
         lnot$0,
         lsl,
         asr,
         round$0,
         round_towards_zero$0,
         round_down$0,
         round_up$0,
         round_nearest$0,
         abs$0,
         succ$0,
         pred$0,
         pow$0,
         bit_and$0,
         bit_or$0,
         bit_xor$0,
         bit_not$0,
         popcount$1,
         shift_left$0,
         shift_right$0,
         decr$0,
         incr$0,
         of_int32_exn$0,
         to_int32_exn$0,
         of_int64_exn$0,
         to_int64$0,
         of_nativeint_exn$0,
         to_nativeint_exn$0,
         of_float_unchecked$0,
         num_bits$0,
         max_value$0,
         min_value$0,
         lsr,
         shift_right_logical$0,
         ceil_pow2$0,
         floor_pow2$0,
         ceil_log2$0,
         floor_log2$0,
         is_pow2$0,
         clz$0,
         ctz$0,
         O$0,
         int32]),
    t_sexp_grammar$1 = Base_Int63[1],
    of_float$1 = Base_Int63[2],
    to_float$1 = Base_Int63[3],
    of_int_exn$1 = Base_Int63[4],
    to_int_exn$1 = Base_Int63[5],
    hash_fold_t$1 = Base_Int63[6],
    hash$1 = Base_Int63[7],
    t_of_sexp$1 = Base_Int63[8],
    sexp_of_t$1 = Base_Int63[9],
    of_string$1 = Base_Int63[10],
    to_string$1 = Base_Int63[11],
    symbol$18 = Base_Int63[12],
    symbol$19 = Base_Int63[13],
    symbol$20 = Base_Int63[14],
    symbol$21 = Base_Int63[15],
    symbol$22 = Base_Int63[16],
    symbol$23 = Base_Int63[17],
    equal$1 = Base_Int63[18],
    compare$1 = Base_Int63[19],
    min$1 = Base_Int63[20],
    max$1 = Base_Int63[21],
    ascending$1 = Base_Int63[22],
    descending$1 = Base_Int63[23],
    between$1 = Base_Int63[24],
    clamp_exn$1 = Base_Int63[25],
    clamp$1 = Base_Int63[26],
    comparator$1 = Base_Int63[27],
    pp$1 = Base_Int63[28],
    hashable$1 = Base_Int63[29],
    is_positive$1 = Base_Int63[30],
    is_non_negative$1 = Base_Int63[31],
    is_negative$1 = Base_Int63[32],
    is_non_positive$1 = Base_Int63[33],
    sign$1 = Base_Int63[34],
    invariant$1 = Base_Int63[35],
    Hex$1 = Base_Int63[36],
    of_string_opt$1 = Base_Int63[37],
    to_string_hum$1 = Base_Int63[38],
    zero$1 = Base_Int63[39],
    one$1 = Base_Int63[40],
    minus_one$1 = Base_Int63[41],
    symbol$24 = Base_Int63[42],
    symbol$25 = Base_Int63[43],
    symbol$26 = Base_Int63[44],
    symbol$27 = Base_Int63[45],
    neg$0 = Base_Int63[46],
    symbol$28 = Base_Int63[47],
    symbol$29 = Base_Int63[48],
    symbol$30 = Base_Int63[49],
    symbol$31 = Base_Int63[50],
    rem$1 = Base_Int63[51],
    symbol$32 = Base_Int63[52],
    land$0 = Base_Int63[53],
    lor$0 = Base_Int63[54],
    lxor$0 = Base_Int63[55],
    lnot$1 = Base_Int63[56],
    lsl$0 = Base_Int63[57],
    asr$0 = Base_Int63[58],
    round$1 = Base_Int63[59],
    round_towards_zero$1 = Base_Int63[60],
    round_down$1 = Base_Int63[61],
    round_up$1 = Base_Int63[62],
    round_nearest$1 = Base_Int63[63],
    abs$1 = Base_Int63[64],
    succ$1 = Base_Int63[65],
    pred$1 = Base_Int63[66],
    pow$1 = Base_Int63[67],
    bit_and$1 = Base_Int63[68],
    bit_or$1 = Base_Int63[69],
    bit_xor$1 = Base_Int63[70],
    bit_not$1 = Base_Int63[71],
    popcount$2 = Base_Int63[72],
    shift_left$1 = Base_Int63[73],
    shift_right$1 = Base_Int63[74],
    decr$1 = Base_Int63[75],
    incr$1 = Base_Int63[76],
    of_int32_exn$1 = Base_Int63[77],
    to_int32_exn$1 = Base_Int63[78],
    of_int64_exn$1 = Base_Int63[79],
    to_int64$1 = Base_Int63[80],
    of_nativeint_exn$1 = Base_Int63[81],
    to_nativeint_exn$1 = Base_Int63[82],
    of_float_unchecked$1 = Base_Int63[83],
    num_bits$1 = Base_Int63[84],
    max_value$1 = Base_Int63[85],
    min_value$1 = Base_Int63[86],
    lsr$0 = Base_Int63[87],
    shift_right_logical$1 = Base_Int63[88],
    ceil_pow2$1 = Base_Int63[89],
    floor_pow2$1 = Base_Int63[90],
    ceil_log2$1 = Base_Int63[91],
    is_pow2$1 = Base_Int63[92],
    clz$1 = Base_Int63[93],
    ctz$1 = Base_Int63[94],
    O$1 = Base_Int63[95],
    floor_log2$1 = Base_Int63[114],
    For_int63 =
      Make
       ([0,
         t_sexp_grammar$1,
         of_float$1,
         to_float$1,
         of_int_exn$1,
         to_int_exn$1,
         hash_fold_t$1,
         hash$1,
         t_of_sexp$1,
         sexp_of_t$1,
         of_string$1,
         to_string$1,
         symbol$18,
         symbol$19,
         symbol$20,
         symbol$21,
         symbol$22,
         symbol$23,
         equal$1,
         compare$1,
         min$1,
         max$1,
         ascending$1,
         descending$1,
         between$1,
         clamp_exn$1,
         clamp$1,
         comparator$1,
         pp$1,
         hashable$1,
         is_positive$1,
         is_non_negative$1,
         is_negative$1,
         is_non_positive$1,
         sign$1,
         invariant$1,
         Hex$1,
         of_string_opt$1,
         to_string_hum$1,
         zero$1,
         one$1,
         minus_one$1,
         symbol$24,
         symbol$25,
         symbol$26,
         symbol$27,
         neg$0,
         symbol$28,
         symbol$29,
         symbol$30,
         symbol$31,
         rem$1,
         symbol$32,
         land$0,
         lor$0,
         lxor$0,
         lnot$1,
         lsl$0,
         asr$0,
         round$1,
         round_towards_zero$1,
         round_down$1,
         round_up$1,
         round_nearest$1,
         abs$1,
         succ$1,
         pred$1,
         pow$1,
         bit_and$1,
         bit_or$1,
         bit_xor$1,
         bit_not$1,
         popcount$2,
         shift_left$1,
         shift_right$1,
         decr$1,
         incr$1,
         of_int32_exn$1,
         to_int32_exn$1,
         of_int64_exn$1,
         to_int64$1,
         of_nativeint_exn$1,
         to_nativeint_exn$1,
         of_float_unchecked$1,
         num_bits$1,
         max_value$1,
         min_value$1,
         lsr$0,
         shift_right_logical$1,
         ceil_pow2$1,
         floor_pow2$1,
         ceil_log2$1,
         floor_log2$1,
         is_pow2$1,
         clz$1,
         ctz$1,
         O$1,
         int63]),
    t_sexp_grammar$2 = Base_Int64[2],
    of_float$2 = Base_Int64[3],
    to_float$2 = Base_Int64[4],
    of_int_exn$2 = Base_Int64[5],
    to_int_exn$2 = Base_Int64[6],
    hash_fold_t$2 = Base_Int64[7],
    hash$2 = Base_Int64[8],
    t_of_sexp$2 = Base_Int64[9],
    sexp_of_t$2 = Base_Int64[10],
    of_string$2 = Base_Int64[11],
    to_string$2 = Base_Int64[12],
    equal$2 = Base_Int64[13],
    compare$2 = Base_Int64[14],
    min$2 = Base_Int64[15],
    max$2 = Base_Int64[16],
    ascending$2 = Base_Int64[17],
    descending$2 = Base_Int64[18],
    between$2 = Base_Int64[19],
    clamp_exn$2 = Base_Int64[20],
    clamp$2 = Base_Int64[21],
    comparator$2 = Base_Int64[22],
    pp$2 = Base_Int64[23],
    hashable$2 = Base_Int64[24],
    is_positive$2 = Base_Int64[25],
    is_non_negative$2 = Base_Int64[26],
    is_negative$2 = Base_Int64[27],
    is_non_positive$2 = Base_Int64[28],
    sign$2 = Base_Int64[29],
    invariant$2 = Base_Int64[30],
    Hex$2 = Base_Int64[31],
    of_string_opt$2 = Base_Int64[32],
    to_string_hum$2 = Base_Int64[33],
    one$2 = Base_Int64[34],
    minus_one$2 = Base_Int64[35],
    rem$2 = Base_Int64[36],
    round$2 = Base_Int64[37],
    round_towards_zero$2 = Base_Int64[38],
    round_down$2 = Base_Int64[39],
    round_up$2 = Base_Int64[40],
    round_nearest$2 = Base_Int64[41],
    succ$2 = Base_Int64[42],
    pred$2 = Base_Int64[43],
    pow$2 = Base_Int64[44],
    bit_and$2 = Base_Int64[45],
    bit_or$2 = Base_Int64[46],
    bit_xor$2 = Base_Int64[47],
    bit_not$2 = Base_Int64[48],
    popcount$3 = Base_Int64[49],
    shift_left$2 = Base_Int64[50],
    shift_right$2 = Base_Int64[51],
    decr$2 = Base_Int64[52],
    incr$2 = Base_Int64[53],
    of_int32_exn$2 = Base_Int64[54],
    to_int32_exn$2 = Base_Int64[55],
    of_int64_exn$2 = Base_Int64[56],
    to_int64$2 = Base_Int64[57],
    of_nativeint_exn$2 = Base_Int64[58],
    to_nativeint_exn$2 = Base_Int64[59],
    of_float_unchecked$2 = Base_Int64[60],
    num_bits$2 = Base_Int64[61],
    max_value$2 = Base_Int64[62],
    min_value$2 = Base_Int64[63],
    shift_right_logical$2 = Base_Int64[64],
    ceil_pow2$2 = Base_Int64[65],
    floor_pow2$2 = Base_Int64[66],
    ceil_log2$2 = Base_Int64[67],
    floor_log2$2 = Base_Int64[68],
    is_pow2$2 = Base_Int64[69],
    clz$2 = Base_Int64[70],
    ctz$2 = Base_Int64[71],
    O$2 = Base_Int64[72],
    symbol$33 = Base_Int64[73],
    lnot$2 = Base_Int64[74],
    abs$2 = Base_Int64[75],
    zero$2 = Base_Int64[76],
    symbol$34 = Base_Int64[77],
    symbol$35 = Base_Int64[78],
    symbol$36 = Base_Int64[79],
    For_int64 =
      Make
       ([0,
         t_sexp_grammar$2,
         of_float$2,
         to_float$2,
         of_int_exn$2,
         to_int_exn$2,
         hash_fold_t$2,
         hash$2,
         t_of_sexp$2,
         sexp_of_t$2,
         of_string$2,
         to_string$2,
         caml_greaterequal,
         caml_lessequal,
         caml_equal,
         caml_greaterthan,
         caml_lessthan,
         caml_notequal,
         equal$2,
         compare$2,
         min$2,
         max$2,
         ascending$2,
         descending$2,
         between$2,
         clamp_exn$2,
         clamp$2,
         comparator$2,
         pp$2,
         hashable$2,
         is_positive$2,
         is_non_negative$2,
         is_negative$2,
         is_non_positive$2,
         sign$2,
         invariant$2,
         Hex$2,
         of_string_opt$2,
         to_string_hum$2,
         zero$2,
         one$2,
         minus_one$2,
         caml_int64_add,
         caml_int64_sub,
         caml_int64_mul,
         symbol$33,
         caml_int64_neg,
         caml_int64_neg,
         symbol$35,
         symbol$34,
         caml_int64_div,
         rem$2,
         symbol$36,
         caml_int64_and,
         caml_int64_or,
         caml_int64_xor,
         lnot$2,
         caml_int64_shift_left,
         caml_int64_shift_right,
         round$2,
         round_towards_zero$2,
         round_down$2,
         round_up$2,
         round_nearest$2,
         abs$2,
         succ$2,
         pred$2,
         pow$2,
         bit_and$2,
         bit_or$2,
         bit_xor$2,
         bit_not$2,
         popcount$3,
         shift_left$2,
         shift_right$2,
         decr$2,
         incr$2,
         of_int32_exn$2,
         to_int32_exn$2,
         of_int64_exn$2,
         to_int64$2,
         of_nativeint_exn$2,
         to_nativeint_exn$2,
         of_float_unchecked$2,
         num_bits$2,
         max_value$2,
         min_value$2,
         caml_int64_shift_right_unsigne,
         shift_right_logical$2,
         ceil_pow2$2,
         floor_pow2$2,
         ceil_log2$2,
         floor_log2$2,
         is_pow2$2,
         clz$2,
         ctz$2,
         [0,
          caml_int64_add,
          caml_int64_sub,
          caml_int64_mul,
          caml_int64_div,
          caml_int64_neg,
          O$2[1],
          caml_greaterequal,
          caml_lessequal,
          caml_equal,
          caml_greaterthan,
          caml_lessthan,
          caml_notequal,
          O$2[3],
          caml_int64_neg,
          O$2[4],
          O$2[5],
          O$2[6],
          O$2[7],
          caml_int64_and,
          caml_int64_or,
          caml_int64_xor,
          O$2[2],
          caml_int64_shift_left,
          caml_int64_shift_right,
          caml_int64_shift_right_unsigne],
         int64]),
    t_sexp_grammar$3 = Base_Nativeint[2],
    of_float$3 = Base_Nativeint[3],
    to_float$3 = Base_Nativeint[4],
    of_int_exn$3 = Base_Nativeint[5],
    to_int_exn$3 = Base_Nativeint[6],
    hash_fold_t$3 = Base_Nativeint[7],
    hash$3 = Base_Nativeint[8],
    t_of_sexp$3 = Base_Nativeint[9],
    sexp_of_t$3 = Base_Nativeint[10],
    of_string$3 = Base_Nativeint[11],
    to_string$3 = Base_Nativeint[12],
    symbol$37 = Base_Nativeint[13],
    symbol$38 = Base_Nativeint[14],
    symbol$39 = Base_Nativeint[15],
    symbol$40 = Base_Nativeint[16],
    symbol$41 = Base_Nativeint[17],
    symbol$42 = Base_Nativeint[18],
    equal$3 = Base_Nativeint[19],
    compare$3 = Base_Nativeint[20],
    min$3 = Base_Nativeint[21],
    max$3 = Base_Nativeint[22],
    ascending$3 = Base_Nativeint[23],
    descending$3 = Base_Nativeint[24],
    between$3 = Base_Nativeint[25],
    clamp_exn$3 = Base_Nativeint[26],
    clamp$3 = Base_Nativeint[27],
    comparator$3 = Base_Nativeint[28],
    pp$3 = Base_Nativeint[29],
    hashable$3 = Base_Nativeint[30],
    is_positive$3 = Base_Nativeint[31],
    is_non_negative$3 = Base_Nativeint[32],
    is_negative$3 = Base_Nativeint[33],
    is_non_positive$3 = Base_Nativeint[34],
    sign$3 = Base_Nativeint[35],
    invariant$3 = Base_Nativeint[36],
    Hex$3 = Base_Nativeint[37],
    of_string_opt$3 = Base_Nativeint[38],
    to_string_hum$3 = Base_Nativeint[39],
    zero$3 = Base_Nativeint[40],
    one$3 = Base_Nativeint[41],
    minus_one$3 = Base_Nativeint[42],
    symbol$43 = Base_Nativeint[43],
    symbol$44 = Base_Nativeint[44],
    symbol$45 = Base_Nativeint[45],
    symbol$46 = Base_Nativeint[46],
    neg$1 = Base_Nativeint[47],
    symbol$47 = Base_Nativeint[48],
    symbol$48 = Base_Nativeint[49],
    symbol$49 = Base_Nativeint[50],
    symbol$50 = Base_Nativeint[51],
    rem$3 = Base_Nativeint[52],
    symbol$51 = Base_Nativeint[53],
    land$1 = Base_Nativeint[54],
    lor$1 = Base_Nativeint[55],
    lxor$1 = Base_Nativeint[56],
    lnot$3 = Base_Nativeint[57],
    lsl$1 = Base_Nativeint[58],
    asr$1 = Base_Nativeint[59],
    round$3 = Base_Nativeint[60],
    round_towards_zero$3 = Base_Nativeint[61],
    round_down$3 = Base_Nativeint[62],
    round_up$3 = Base_Nativeint[63],
    round_nearest$3 = Base_Nativeint[64],
    abs$3 = Base_Nativeint[65],
    succ$3 = Base_Nativeint[66],
    pred$3 = Base_Nativeint[67],
    pow$3 = Base_Nativeint[68],
    bit_and$3 = Base_Nativeint[69],
    bit_or$3 = Base_Nativeint[70],
    bit_xor$3 = Base_Nativeint[71],
    bit_not$3 = Base_Nativeint[72],
    popcount$4 = Base_Nativeint[73],
    shift_left$3 = Base_Nativeint[74],
    shift_right$3 = Base_Nativeint[75],
    decr$3 = Base_Nativeint[76],
    incr$3 = Base_Nativeint[77],
    of_int32_exn$3 = Base_Nativeint[78],
    to_int32_exn$3 = Base_Nativeint[79],
    of_int64_exn$3 = Base_Nativeint[80],
    to_int64$3 = Base_Nativeint[81],
    of_nativeint_exn$3 = Base_Nativeint[82],
    to_nativeint_exn$3 = Base_Nativeint[83],
    of_float_unchecked$3 = Base_Nativeint[84],
    num_bits$3 = Base_Nativeint[85],
    max_value$3 = Base_Nativeint[86],
    min_value$3 = Base_Nativeint[87],
    lsr$1 = Base_Nativeint[88],
    shift_right_logical$3 = Base_Nativeint[89],
    ceil_pow2$3 = Base_Nativeint[90],
    floor_pow2$3 = Base_Nativeint[91],
    ceil_log2$3 = Base_Nativeint[92],
    floor_log2$3 = Base_Nativeint[93],
    is_pow2$3 = Base_Nativeint[94],
    clz$3 = Base_Nativeint[95],
    ctz$3 = Base_Nativeint[96],
    O$3 = Base_Nativeint[97],
    For_nativeint =
      Make
       ([0,
         t_sexp_grammar$3,
         of_float$3,
         to_float$3,
         of_int_exn$3,
         to_int_exn$3,
         hash_fold_t$3,
         hash$3,
         t_of_sexp$3,
         sexp_of_t$3,
         of_string$3,
         to_string$3,
         symbol$37,
         symbol$38,
         symbol$39,
         symbol$40,
         symbol$41,
         symbol$42,
         equal$3,
         compare$3,
         min$3,
         max$3,
         ascending$3,
         descending$3,
         between$3,
         clamp_exn$3,
         clamp$3,
         comparator$3,
         pp$3,
         hashable$3,
         is_positive$3,
         is_non_negative$3,
         is_negative$3,
         is_non_positive$3,
         sign$3,
         invariant$3,
         Hex$3,
         of_string_opt$3,
         to_string_hum$3,
         zero$3,
         one$3,
         minus_one$3,
         symbol$43,
         symbol$44,
         symbol$45,
         symbol$46,
         neg$1,
         symbol$47,
         symbol$48,
         symbol$49,
         symbol$50,
         rem$3,
         symbol$51,
         land$1,
         lor$1,
         lxor$1,
         lnot$3,
         lsl$1,
         asr$1,
         round$3,
         round_towards_zero$3,
         round_down$3,
         round_up$3,
         round_nearest$3,
         abs$3,
         succ$3,
         pred$3,
         pow$3,
         bit_and$3,
         bit_or$3,
         bit_xor$3,
         bit_not$3,
         popcount$4,
         shift_left$3,
         shift_right$3,
         decr$3,
         incr$3,
         of_int32_exn$3,
         to_int32_exn$3,
         of_int64_exn$3,
         to_int64$3,
         of_nativeint_exn$3,
         to_nativeint_exn$3,
         of_float_unchecked$3,
         num_bits$3,
         max_value$3,
         min_value$3,
         lsr$1,
         shift_right_logical$3,
         ceil_pow2$3,
         floor_pow2$3,
         ceil_log2$3,
         floor_log2$3,
         is_pow2$3,
         clz$3,
         ctz$3,
         O$3,
         nativeint]),
    int$1 = For_int[1],
    int32$0 = For_int32[1],
    int63$0 = For_int63[1],
    int64$1 = For_int64[1],
    nativeint$0 = For_nativeint[1];
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   var
    Splittable_random =
      [0,
       [0, create, of_int, perturb, copy, split],
       bool,
       int$0,
       int32,
       int63,
       int64,
       nativeint,
       float$0,
       unit_float,
       [0, int$1, int32$0, int63$0, int64$1, nativeint$0]];
   runtime.caml_register_global(40, Splittable_random, "Splittable_random");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
