// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Virtual_dom__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Virtual_dom = [0];
   runtime.caml_register_global(0, Virtual_dom, "Virtual_dom__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Dom_float
//# unitInfo: Requires: Core, Core__Float, Expect_test_collector, Expect_test_common__File, Expect_test_config, Inline_test_config, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_Virtual_dom_Dom_float = "Virtual_dom__Dom_float",
    cst_src_dom_float_ml$6 = "src/dom_float.ml",
    cst_virtual_dom = "virtual_dom",
    caml_string_of_jsstring = runtime.caml_string_of_jsstring;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Expect_test_common_File = global_data.Expect_test_common__File,
    Core_Float = global_data.Core__Float,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Expect_test_config = global_data.Expect_test_config,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Dom_float);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[6][1], cst_src_dom_float_ml$6);
   caml_call2(Ppx_inline_test_lib[5], cst_virtual_dom, "dom_float.ml");
   function to_js_string(value){return value.toString();}
   function to_js_string_fixed(digits, value){return value.toFixed(digits);}
   function to_js_string_precision(digits, value){return value.toPrecision(digits);
   }
   function to_js_string_exponential(value){return value.toExponential();}
   function to_string(value){
    return caml_string_of_jsstring(value.toString());
   }
   function to_string_fixed(digits, value){
    return caml_string_of_jsstring(value.toFixed(digits));
   }
   function to_string_precision(digits, value){
    return caml_string_of_jsstring(value.toPrecision(digits));
   }
   function to_string_exponential(value){
    return caml_string_of_jsstring(value.toExponential());
   }
   var
    Expect_test_collector$0 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    _a_ = [0, [2, 0, 0], "%s"],
    cst_src_dom_float_ml = cst_src_dom_float_ml$6,
    cst_src_dom_float_ml$0 = cst_src_dom_float_ml$6,
    cst_src_dom_float_ml$1 = cst_src_dom_float_ml$6,
    cst_src_dom_float_ml$2 = cst_src_dom_float_ml$6,
    cst_src_dom_float_ml$3 = cst_src_dom_float_ml$6,
    cst_src_dom_float_ml$4 = cst_src_dom_float_ml$6,
    cst_src_dom_float_ml$5 = cst_src_dom_float_ml$6,
    _b_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
       16,
       738,
       749,
       756],
    _c_ =
      [0,
       [0,
        [0, cst],
        [1, " 1 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
         16,
         738,
         742,
         748],
        _b_],
       0],
    _d_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
       18,
       778,
       789,
       798],
    _e_ =
      [0,
       [0,
        [0, cst],
        [1, " NaN "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
         18,
         778,
         782,
         788],
        _d_],
       _c_],
    _f_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
       20,
       825,
       836,
       850],
    _g_ =
      [0,
       [0,
        [0, cst],
        [1, " Infinity "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
         20,
         825,
         829,
         835],
        _f_],
       _e_],
    _h_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
       22,
       881,
       892,
       907],
    _i_ =
      [0,
       [0,
        [0, cst],
        [1, " -Infinity "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
         22,
         881,
         885,
         891],
        _h_],
       _g_],
    _j_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
       24,
       930,
       941,
       951],
    _k_ =
      [0,
       [0,
        [0, cst],
        [1, " 1e-8 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
         24,
         930,
         934,
         940],
        _j_],
       _i_],
    _l_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
       26,
       969,
       980,
       988],
    _m_ =
      [0,
       [0,
        [0, cst],
        [1, " -1 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
         26,
         969,
         973,
         979],
        _l_],
       _k_],
    _n_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
       28,
       1010,
       1021,
       1036],
    _o_ =
      [0,
       [0,
        [0, cst],
        [1, " 1.0000001 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
         28,
         1010,
         1014,
         1020],
        _n_],
       _m_],
    _p_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
       12,
       642,
       642,
       1037],
    _q_ =
      caml_call1
       (Expect_test_common_File[4][3], "e40141a8c595182b4ac2018c0f4b5904");
   caml_call9
    (Expect_test_collector$0[3],
     _q_,
     _p_,
     cst_src_dom_float_ml$6,
     0,
     0,
     _o_,
     0,
     Inline_test_config,
     function(param){
      function print(f){
       var _y_ = to_string(f);
       return caml_call2(Core[252], _a_, _y_);
      }
      print(1.);
      var
       _r_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml),
          16,
          738,
          742,
          748];
      caml_call1(Expect_test_collector$0[1], _r_);
      print(Core_Float[11]);
      var
       _s_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$0),
          18,
          778,
          782,
          788];
      caml_call1(Expect_test_collector$0[1], _s_);
      print(Core_Float[12]);
      var
       _t_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$1),
          20,
          825,
          829,
          835];
      caml_call1(Expect_test_collector$0[1], _t_);
      print(Core_Float[13]);
      var
       _u_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$2),
          22,
          881,
          885,
          891];
      caml_call1(Expect_test_collector$0[1], _u_);
      print(1e-8);
      var
       _v_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$3),
          24,
          930,
          934,
          940];
      caml_call1(Expect_test_collector$0[1], _v_);
      print(-1.);
      var
       _w_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$4),
          26,
          969,
          973,
          979];
      caml_call1(Expect_test_collector$0[1], _w_);
      print(1.0000001);
      var
       _x_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$5),
          28,
          1010,
          1014,
          1020];
      return caml_call1(Expect_test_collector$0[1], _x_);
     });
   caml_call1(Ppx_inline_test_lib[6], cst_virtual_dom);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Dom_float);
   var
    Virtual_dom_Dom_float =
      [0,
       to_js_string,
       to_js_string_fixed,
       to_js_string_precision,
       to_js_string_exponential,
       to_string,
       to_string_fixed,
       to_string_precision,
       to_string_exponential];
   runtime.caml_register_global
    (63, Virtual_dom_Dom_float, cst_Virtual_dom_Dom_float);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Effect
//# unitInfo: Requires: Base__Hashtbl, Base__List, Base__Option, Expect_test_collector, Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Stdlib__Obj, Ui_effect
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Effect = "Virtual_dom__Effect",
    cst_virtual_dom = "virtual_dom",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Base_Option = global_data.Base__Option,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Base_List = global_data.Base__List,
    Ui_effect = global_data.Ui_effect,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Base_Hashtbl = global_data.Base__Hashtbl;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Effect);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[6][1], "src/effect.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_virtual_dom, "effect.ml");
   var
    Ignore = Ui_effect[1],
    Many = Ui_effect[2],
    symbol_bind = Ui_effect[3],
    symbol_map = Ui_effect[4],
    bind = Ui_effect[6],
    return$0 = Ui_effect[7],
    map = Ui_effect[8],
    join = Ui_effect[9],
    ignore_m = Ui_effect[10],
    all = Ui_effect[11],
    all_unit = Ui_effect[12],
    never = Ui_effect[14],
    lazy = Ui_effect[15],
    print_s = Ui_effect[16],
    of_sync_fun = Ui_effect[17],
    Expert = Ui_effect[20],
    visibility_handlers = [0, 0];
   function Define_visibility(VH){
    visibility_handlers[1] = [0, VH[1], visibility_handlers[1]];
    return [0];
   }
   var
    Viewport_changed =
      [248, "Virtual_dom__Effect.Viewport_changed", caml_fresh_oo_id(0)],
    Stop_propagation =
      [248, "Virtual_dom__Effect.Stop_propagation", caml_fresh_oo_id(0)],
    Stop_immediate_propagation =
      [248,
       "Virtual_dom__Effect.Stop_immediate_propagation",
       caml_fresh_oo_id(0)],
    Prevent_default =
      [248, "Virtual_dom__Effect.Prevent_default", caml_fresh_oo_id(0)];
   function sequence_as_sibling(left, unless_stopped){
    function contains_stop(param){
     if(param[1] !== Many)
      return param === Stop_immediate_propagation ? 1 : 0;
     var es = param[2];
     return caml_call2(Base_List[23], es, contains_stop);
    }
    if(contains_stop(left)) return left;
    var _g_ = [0, left, [0, caml_call1(unless_stopped, 0), 0]];
    return [0, Ui_effect[2], _g_];
   }
   var
    current_dom_event = [0, 0],
    _a_ = caml_call1(Stdlib_Obj[22][1], Viewport_changed),
    _b_ = caml_call1(Stdlib_Obj[22][3], _a_);
   caml_call3
    (Base_Hashtbl[38],
     Expert[2],
     _b_,
     function(param){
      return caml_call2
              (Base_List[19],
               visibility_handlers[1],
               function(f){return caml_call1(f, 0);});
     });
   var
    _c_ = caml_call1(Stdlib_Obj[22][1], Stop_propagation),
    _d_ = caml_call1(Stdlib_Obj[22][3], _c_);
   caml_call3
    (Base_Hashtbl[38],
     Expert[2],
     _d_,
     function(param){
      return caml_call2
              (Base_Option[35],
               current_dom_event[1],
               Js_of_ocaml_Dom_html[117]);
     });
   var
    _e_ = caml_call1(Stdlib_Obj[22][1], Prevent_default),
    _f_ = caml_call1(Stdlib_Obj[22][3], _e_);
   caml_call3
    (Base_Hashtbl[38],
     Expert[2],
     _f_,
     function(param){
      return caml_call2
              (Base_Option[35], current_dom_event[1], Js_of_ocaml_Dom[18]);
     });
   var handle_non_dom_event_exn = Expert[1];
   function handle(dom_event, event){
    var old = current_dom_event[1];
    current_dom_event[1] = [0, dom_event];
    caml_call1(Expert[1], event);
    current_dom_event[1] = old;
    return 0;
   }
   caml_call1(Ppx_inline_test_lib[6], cst_virtual_dom);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Effect);
   var
    Virtual_dom_Effect =
      [0,
       Ignore,
       Many,
       symbol_bind,
       symbol_map,
       bind,
       return$0,
       map,
       join,
       ignore_m,
       all,
       all_unit,
       never,
       lazy,
       print_s,
       of_sync_fun,
       Viewport_changed,
       Stop_propagation,
       Stop_immediate_propagation,
       Prevent_default,
       sequence_as_sibling,
       Define_visibility,
       [0, handle, handle_non_dom_event_exn]];
   runtime.caml_register_global
    (22, Virtual_dom_Effect, cst_Virtual_dom_Effect);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Hooks_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Hooks_intf = "Virtual_dom__Hooks_intf",
    cst_virtual_dom = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Hooks_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[6][1], "src/hooks_intf.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_virtual_dom, "hooks_intf.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_virtual_dom);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Hooks_intf);
   var Virtual_dom_Hooks_intf = [0];
   runtime.caml_register_global
    (11, Virtual_dom_Hooks_intf, cst_Virtual_dom_Hooks_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Hooks
//# unitInfo: Requires: CamlinternalLazy, Core, Core__Type_equal, Expect_test_collector, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_Virtual_dom_Hooks = "Virtual_dom__Hooks",
    cst_virtual_dom = "virtual_dom",
    caml_js_wrap_callback = runtime.caml_js_wrap_callback;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$1,
    cst$0 = cst$1,
    Core = global_data.Core,
    Core_Type_equal = global_data.Core__Type_equal,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Hooks);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[6][1], "src/hooks.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_virtual_dom, "hooks.ml");
   function sexp_of_t(param){
    var value = param[2], type_id = param[1];
    return caml_call2(Core_Type_equal[8][6], type_id, value);
   }
   var
    Extra = [0, sexp_of_t],
    generic_hook =
      [246, function(param){return Js_of_ocaml_Js[52][1].GenericHook;}],
    cst_hooks_do_not_have_the_same =
      "hooks do not have the same type, so they cannot be combined; taking the second of the two";
   function pack(param){
    var
     id = param[7],
     destroy = param[6],
     update = param[5],
     init = param[4],
     input_id = param[2],
     input = param[1],
     a = caml_call1(init, input),
     init$0 = caml_js_wrap_callback(a),
     a$0 = caml_call1(update, input),
     update$0 = caml_js_wrap_callback(a$0),
     destroy$0 = caml_js_wrap_callback(destroy),
     _h_ = runtime.caml_obj_tag(generic_hook);
    a:
    if(250 === _h_)
     var generic_hook$0 = generic_hook[1];
    else{
     if(246 !== _h_ && 244 !== _h_){
      var generic_hook$0 = generic_hook;
      break a;
     }
     var generic_hook$0 = caml_call1(CamlinternalLazy[2], generic_hook);
    }
    var extra = [0, input_id, input];
    return generic_hook$0(init$0, update$0, destroy$0, id, extra);
   }
   function combine(left, right){
    if(caml_call2(Core_Type_equal[8][9], left[2], right[2])){
     var
      _a_ = right[7],
      _b_ = right[6],
      _c_ = right[5],
      _d_ = right[4],
      _e_ = right[3],
      _f_ = right[2];
     return [0,
             caml_call2(right[3], left[1], right[1]),
             _f_,
             _e_,
             _d_,
             _c_,
             _b_,
             _a_];
    }
    var
     _g_ = caml_call1(Sexplib0_Sexp_conv[7], cst_hooks_do_not_have_the_same);
    caml_call2(Core[251], 0, _g_);
    return right;
   }
   caml_call1(Ppx_inline_test_lib[6], cst_virtual_dom);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Hooks);
   var
    Virtual_dom_Hooks =
      [0,
       combine,
       pack,
       function(S){
        var
         input_and_state_id =
           caml_call2
            (Core_Type_equal[8][3],
             cst,
             function(param){
              var
               arg1_002 = param[3],
               arg0_001 = param[1],
               res0_003 = caml_call1(S[2][1], arg0_001),
               res1_004 = caml_call1(Core[148], arg1_002);
              return [1, [0, res0_003, [0, res1_004, 0]]];
             }),
         input_id = caml_call2(Core_Type_equal[8][3], cst$0, S[2][1]);
        function init(input, element){
         var state = caml_call2(S[3], input, element);
         function f(param){return caml_call3(S[4], input, state, element);}
         var
          t2 = caml_js_wrap_callback(f),
          t3 = Js_of_ocaml_Dom_html[8],
          animation_id = t3.requestAnimationFrame(t2);
         return [0, input, animation_id, state];
        }
        function update(input, param, element){
         var state = param[3], animation_id = param[2], old_input = param[1];
         caml_call4(S[5], old_input, input, state, element);
         return [0, input, animation_id, state];
        }
        function destroy(param, element){
         var
          state = param[3],
          animation_id = param[2],
          old_input = param[1],
          t1 = Js_of_ocaml_Dom_html[8];
         t1.cancelAnimationFrame(animation_id);
         return caml_call3(S[6], old_input, state, element);
        }
        function create(input){
         var combine_inputs = S[2][2];
         return [0,
                 input,
                 input_id,
                 combine_inputs,
                 init,
                 update,
                 destroy,
                 input_and_state_id];
        }
        var For_testing = [0, input_id];
        return [0, create, For_testing];
       },
       [0, Extra]];
   runtime.caml_register_global(23, Virtual_dom_Hooks, cst_Virtual_dom_Hooks);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Js_map
//# unitInfo: Requires: Expect_test_collector, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Js_map = "Virtual_dom__Js_map",
    cst_virtual_dom = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Js_map);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[6][1], "src/js_map.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_virtual_dom, "js_map.ml");
   function create(param){
    var t0 = Js_of_ocaml_Js[52][1], map = t0.Map;
    return new map;
   }
   function set(t4, t2, t3){return t4.set(t2, t3);}
   function get(t6, t5){
    var _a_ = t6.get(t5);
    return caml_call1(Js_of_ocaml_Js[6][10], _a_);
   }
   function delete$0(t8, t7){return t8.delete(t7);}
   caml_call1(Ppx_inline_test_lib[6], cst_virtual_dom);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Js_map);
   var Virtual_dom_Js_map = [0, create, set, get, delete$0];
   runtime.caml_register_global
    (16, Virtual_dom_Js_map, cst_Virtual_dom_Js_map);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Raw
//# unitInfo: Requires: Base, Base__Type_equal, Expect_test_collector, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Virtual_dom__Js_map
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Raw = "Virtual_dom__Raw",
    cst_attributes$4 = "attributes",
    cst_virtual_dom = "virtual_dom",
    caml_js_wrap_callback = runtime.caml_js_wrap_callback,
    caml_jsstring_of_string = runtime.caml_jsstring_of_string;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Base_Type_equal = global_data.Base__Type_equal,
    Virtual_dom_Js_map = global_data.Virtual_dom__Js_map,
    Base = global_data.Base,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Raw);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[6][1], "src/raw.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_virtual_dom, "raw.ml");
   var
    cst_attributes = cst_attributes$4,
    cst_attributes$0 = cst_attributes$4,
    cst_attributes$1 = cst_attributes$4,
    cst_attributes$2 = cst_attributes$4,
    cst_attributes$3 = cst_attributes$4;
   function set_prop_ascii(t, name, value){
    return t[caml_jsstring_of_string(name)] = value;
   }
   function get_prop_ascii(t, name){return t[caml_jsstring_of_string(name)];}
   function has_property(t, name){
    var _h_ = t[caml_jsstring_of_string(name)];
    return caml_call1(Js_of_ocaml_Js[6][5], _h_);
   }
   function create(param){return {};}
   function set_property(t, name, value){
    return set_prop_ascii(t, name, value);
   }
   function has_attribute(t, name){
    var _g_ = has_property(t, cst_attributes);
    return _g_ ? has_property(get_prop_ascii(t, cst_attributes$0), name) : _g_;
   }
   function set_attribute(t, name, value){
    var a = get_prop_ascii(t, cst_attributes$1);
    if(1 - caml_call1(Js_of_ocaml_Js[6][5], a))
     set_prop_ascii(t, cst_attributes$2, {});
    return set_prop_ascii(get_prop_ascii(t, cst_attributes$3), name, value);
   }
   var t0 = Js_of_ocaml_Js[52][1], virtual_dom = t0.VirtualDom;
   function to_dom(vnode){return virtual_dom.createElement(vnode);}
   function node(tag, attrs, children, key){
    var tag$0 = caml_jsstring_of_string(tag);
    if(key)
     var
      key$0 = key[1],
      key$1 = caml_call1(Js_of_ocaml_Js[6][2], caml_jsstring_of_string(key$0));
    else
     var key$1 = Js_of_ocaml_Js[6][1];
    var vnode = virtual_dom.VNode;
    return new vnode(tag$0, attrs, children, key$1);
   }
   function svg(tag, attrs, children, key){
    var tag$0 = caml_jsstring_of_string(tag);
    if(key)
     var
      key$0 = key[1],
      key$1 = caml_call1(Js_of_ocaml_Js[6][2], caml_jsstring_of_string(key$0));
    else
     var key$1 = Js_of_ocaml_Js[6][1];
    var vsvg = virtual_dom.svg;
    return new vsvg(tag$0, attrs, children, key$1);
   }
   function text(s){
    var vtext = virtual_dom.VText, t16 = caml_jsstring_of_string(s);
    return new vtext(t16);
   }
   function patch(element, vnode){return virtual_dom.patch(element, vnode);}
   function create$0(previous, current){
    return virtual_dom.diff(previous, current);
   }
   function f(patch){
    for(var key in patch) if(key !== "a") return false;
    return true;
   }
   function is_empty(t){return f(t) | 0;}
   var
    t = caml_call1(Virtual_dom_Js_map[1], 0),
    _a_ = [0, "<opaque>"],
    _b_ = [0, "id_sexp"],
    cst_BUG_element_state_not_foun = "BUG: element state not found",
    dummy = 0;
   function set(id, element, state){
    return caml_call3(Virtual_dom_Js_map[2], t, element, [0, id, state]);
   }
   function get(id, element){
    var match = caml_call2(Virtual_dom_Js_map[3], t, element);
    if(match){
     var match$0 = match[1], state = match$0[2], f_id = match$0[1];
     caml_call2(Base_Type_equal[12][11], id, f_id);
     return state;
    }
    var
     id_sexp =
       caml_call2(Base_Type_equal[12][1], function(param){return _a_;}, id),
     _e_ = [0, [1, [0, _b_, [0, caml_call1(Base[85][4], id_sexp), 0]]], 0],
     _f_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_BUG_element_state_not_foun),
         _e_]];
    return caml_call1(Base[217], _f_);
   }
   function delete$0(element){
    return caml_call2(Virtual_dom_Js_map[4], t, element);
   }
   function create$1(vdom_for_testing, _c_, opt, t28, init, param){
    var
     destroy = _c_ ? _c_[1] : function(_d_, param){},
     update = opt ? opt[1] : function(s, elt){return [0, s, elt];},
     obj = {};
    obj.type = "Widget";
    obj.name = 0;
    obj.id = t28;
    obj.vdomForTesting = vdom_for_testing;
    var
     t32 =
       caml_js_wrap_callback
        (function(param){
          var match = caml_call1(init, 0), dom_node = match[2], s0 = match[1];
          set(t28, dom_node, s0);
          return dom_node;
         });
    obj.init = t32;
    var
     t35 =
       caml_js_wrap_callback
        (function(prev, dom_node){
          caml_call2(Base_Type_equal[12][11], prev.id, t28);
          var
           prev_state = get(t28, dom_node),
           match = caml_call2(update, prev_state, dom_node),
           dom_node$0 = match[2],
           state = match[1];
          delete$0(dom_node);
          set(t28, dom_node$0, state);
          return dom_node$0;
         });
    obj.update = t35;
    var
     t37 =
       caml_js_wrap_callback
        (function(dom_node){
          var prev_state = get(t28, dom_node);
          caml_call2(destroy, prev_state, dom_node);
          return delete$0(dom_node);
         });
    obj.destroy = t37;
    return obj;
   }
   caml_call1(Ppx_inline_test_lib[6], cst_virtual_dom);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Raw);
   var
    Virtual_dom_Raw =
      [0,
       [0, create, has_property, has_attribute, set_property, set_attribute],
       [0, node, text, svg, to_dom],
       [0, create$0, patch, is_empty],
       [0, create$1]];
   runtime.caml_register_global(41, Virtual_dom_Raw, cst_Virtual_dom_Raw);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Attr
//# unitInfo: Requires: Core, Core__Bool, Core__Date, Core__Int, Core__List, Core__Map, Core__Option, Core__Set, Core__String, Core__Type_equal, Core__Unit, Css_gen, Expect_test_collector, Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Ui_effect, Virtual_dom__Dom_float, Virtual_dom__Effect, Virtual_dom__Hooks, Virtual_dom__Raw
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$7 = "",
    cst_Virtual_dom_Attr = "Virtual_dom__Attr",
    cst$8 = "_",
    cst_class$1 = "class",
    cst_first = "first",
    cst_focus$0 = "focus",
    cst_input$1 = "input",
    cst_max$2 = "max",
    cst_min$2 = "min",
    cst_name$0 = "name",
    cst_on$1 = "on",
    cst_second = "second",
    cst_style$1 = "style",
    cst_target$0 = "target",
    cst_value$2 = "value",
    cst_virtual_dom = "virtual_dom",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst$6 = "--",
    name$2 = "custom-css-vars",
    name$1 = "single-focus-hook",
    name$0 = "always-focus-hook",
    cst$4 = cst$7,
    empty = [6, 0],
    cst = cst$7,
    cst$0 = cst$7,
    cst$1 = cst$7,
    cst$2 = cst$7,
    cst$3 = cst$7,
    cst$5 = cst$7,
    Core_List = global_data.Core__List,
    Core = global_data.Core,
    Core_String = global_data.Core__String,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Css_gen = global_data.Css_gen,
    Virtual_dom_Hooks = global_data.Virtual_dom__Hooks,
    Virtual_dom_Effect = global_data.Virtual_dom__Effect,
    Ui_effect = global_data.Ui_effect,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Core_Option = global_data.Core__Option,
    Core_Type_equal = global_data.Core__Type_equal,
    Core_Bool = global_data.Core__Bool,
    Core_Int = global_data.Core__Int,
    Core_Date = global_data.Core__Date,
    Core_Set = global_data.Core__Set,
    Virtual_dom_Raw = global_data.Virtual_dom__Raw,
    Core_Map = global_data.Core__Map,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Virtual_dom_Dom_float = global_data.Virtual_dom__Dom_float,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Unit = global_data.Core__Unit;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Attr);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[6][1], "src/attr.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_virtual_dom, "attr.ml");
   Css_gen[97][1][1] = Virtual_dom_Dom_float[6];
   var
    _a_ = [0, cst$8],
    _b_ = [0, "rtid"],
    _c_ = [0, cst$8],
    _d_ = [0, "ltid"],
    cst_BUG_Type_ids_for_event_han =
      "BUG!  Type-ids for event handlers differ";
   function combine(param, right){
    var
     rhandler = right[2],
     x_002 = right[1],
     lhandler = param[2],
     x_001 = param[1];
    if(caml_call2(Core_Type_equal[8][9], x_001, x_002))
     return [0,
             x_001,
             function(value){
              var _bw_ = caml_call1(lhandler, value);
              return caml_call2
                      (Virtual_dom_Effect[20],
                       _bw_,
                       function(param){return caml_call1(rhandler, value);});
             }];
    var
     _bt_ =
       [0,
        [1,
         [0,
          _b_,
          [0,
           caml_call2
            (Core_Type_equal[8][1], function(param){return _a_;}, x_002),
           0]]],
        0],
     _bu_ =
       [0,
        [1,
         [0,
          _d_,
          [0,
           caml_call2
            (Core_Type_equal[8][1], function(param){return _c_;}, x_001),
           0]]],
        _bt_],
     _bv_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_BUG_Type_ids_for_event_han),
         _bu_]];
    caml_call2(Core[251], 0, _bv_);
    return right;
   }
   function create(name, value){
    return [1, 0, name, caml_jsstring_of_string(value)];
   }
   function create_float(name, value){
    return [1, 0, name, caml_call1(Virtual_dom_Dom_float[1], value)];
   }
   function property(name, value){return [0, 0, name, value];}
   function string_property(name, value){
    return [0, 0, name, caml_jsstring_of_string(value)];
   }
   function bool_property(name, value){return [0, 0, name, ! ! value];}
   function suppress_merge_warnings(t){
    switch(t[0]){
      case 0:
       return [0, 1, t[2], t[3]];
      case 1:
       return [1, 1, t[2], t[3]];
      default: return t;
    }
   }
   function create_hook(name, hook){return [3, name, hook];}
   function many(attrs){return [6, attrs];}
   function many_without_merge(attrs){return [8, attrs];}
   function combine$0(left, right){return [6, [0, left, [0, right, 0]]];}
   var
    warning_count = [0, 0],
    current = [0, [0, 100]],
    _e_ = [0, "quota"],
    cst_WARNING_reached_warning_me =
      "WARNING: reached warning message quota; no more messages will be printed";
   function warn_s(s){
    warning_count[1]++;
    var match = current[1];
    if(typeof match === "number"){
     if(match) return caml_call2(Core[251], 0, s);
     return;
    }
    var quota = match[1], warning_count$0 = warning_count[1];
    if(caml_call2(Core[88], warning_count$0, quota)){
     caml_call2(Core[251], 0, s);
     if(caml_call2(Core[89], warning_count$0, quota)){
      var
       _br_ = [0, [1, [0, _e_, [0, caml_call1(Core[363], quota), 0]]], 0],
       _bs_ =
         [1,
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_WARNING_reached_warning_me),
           _br_]];
      return caml_call2(Core[251], 0, _bs_);
     }
    }
   }
   function reset_warning_count(param){warning_count[1] = 0; return 0;}
   var For_testing = [0, reset_warning_count];
   function combining_map_add(map, key, value, combine){
    return caml_call3
            (Core_Map[41],
             map,
             key,
             function(param){
              if(! param) return value;
              var existing_value = param[1];
              return caml_call3(combine, key, existing_value, value);
             });
   }
   var
    _f_ = caml_call1(Core_Map[4], [0, Core_String[151]]),
    _g_ = caml_call1(Core_Map[4], [0, Core_String[151]]),
    empty_merge = [0, Css_gen[20], 0, _g_, _f_],
    cst_id = "id",
    cst_name = cst_name$0,
    cst_href = "href",
    cst_label = "label",
    cst_target = cst_target$0;
   function style(css){return [4, css];}
   function class$0(classname){return [5, [0, classname, 0]];}
   function classes(classes){return [5, caml_call1(Core_Set[39], classes)];}
   function classes$0(classnames){return [5, classnames];}
   function id(s){return create(cst_id, s);}
   function name(s){return create(cst_name, s);}
   function href(r){return create(cst_href, r);}
   function label(r){return create(cst_label, r);}
   function target(s){return create(cst_target, s);}
   var
    checked = create("checked", cst),
    selected = create("selected", cst$0),
    hidden = create("hidden", cst$1),
    readonly = create("readonly", cst$2),
    disabled = create("disabled", cst$3),
    cst_placeholder = "placeholder",
    cst_autofocus = "autofocus",
    cst_for = "for",
    cst_type = "type",
    cst_value$0 = cst_value$2,
    cst_value$1 = cst_value$2,
    cst_tabindex = "tabindex",
    cst_title = "title",
    cst_alt = "alt",
    cst_src = "src";
   function placeholder(x){return create(cst_placeholder, x);}
   function autofocus(param){
    return param ? create(cst_autofocus, cst$4) : empty;
   }
   function for$0(x){return create(cst_for, x);}
   function type(x){return create(cst_type, x);}
   function value(x){return create(cst_value$0, x);}
   function value_prop(x){return string_property(cst_value$1, x);}
   function tabindex(x){
    return create(cst_tabindex, caml_call1(Core_Int[84], x));
   }
   function title(x){return create(cst_title, x);}
   function alt(x){return create(cst_alt, x);}
   function src(x){return create(cst_src, x);}
   var
    open = create("open", cst$5),
    cst_start = "start",
    cst_min = cst_min$2,
    cst_max = cst_max$2,
    cst_min$0 = cst_min$2,
    cst_max$0 = cst_max$2,
    cst_T00_00 = "T00:00",
    cst_min$1 = cst_min$2,
    cst_T23_59 = "T23:59",
    cst_max$1 = cst_max$2,
    cst_colspan = "colspan",
    cst_rowspan = "rowspan",
    cst_draggable = "draggable",
    _q_ = [1, 0];
   function start(x){return create(cst_start, caml_call1(Core_Int[84], x));}
   function min(x){return create_float(cst_min, x);}
   function max(x){return create_float(cst_max, x);}
   function min_date(x){
    return create(cst_min$0, caml_call1(Core_Date[21], x));
   }
   function max_date(x){
    return create(cst_max$0, caml_call1(Core_Date[21], x));
   }
   function min_date_time(x){
    var _bq_ = caml_call1(Core_Date[21], x);
    return create(cst_min$1, caml_call2(Core[17], _bq_, cst_T00_00));
   }
   function max_date_time(x){
    var _bp_ = caml_call1(Core_Date[21], x);
    return create(cst_max$1, caml_call2(Core[17], _bp_, cst_T23_59));
   }
   function colspan(x){
    return create(cst_colspan, caml_call1(Core_Int[84], x));
   }
   function rowspan(x){
    return create(cst_rowspan, caml_call1(Core_Int[84], x));
   }
   function draggable(b){
    return create(cst_draggable, caml_call1(Core_Bool[20], b));
   }
   function create$0(name){
    return caml_call2
            (Core_Type_equal[8][3], name, function(param){return _q_;});
   }
   var
    event = create$0("event"),
    focus = create$0("focusEvent"),
    mouse = create$0("mouseEvent"),
    keyboard = create$0("keyboardEvent"),
    submit = create$0("submitEvent"),
    mousewheel = create$0("mousewheelEvent"),
    wheel = create$0("wheelwheelEvent"),
    clipboard = create$0("clipboardEvent"),
    drag = create$0("dragEvent"),
    pointer = create$0("pointerEvent"),
    animation = create$0("animationEvent"),
    _h_ = [0, cst_second],
    _i_ = [0, cst_first],
    cst_WARNING_not_combining_styl = "WARNING: not combining styles",
    _j_ = [0, cst_second],
    _k_ = [0, cst_first],
    cst_WARNING_not_combining_clas = "WARNING: not combining classes",
    _l_ = [0, cst_name$0],
    cst_WARNING_not_combining_hand = "WARNING: not combining handlers",
    _m_ = [0, cst_name$0],
    cst_WARNING_not_combining_hook = "WARNING: not combining hooks",
    _n_ = [0, cst_name$0],
    cst_WARNING_not_combining_prop = "WARNING: not combining properties",
    cst_value = cst_value$2,
    _o_ = [0, cst_name$0],
    cst_WARNING_not_combining_attr = "WARNING: not combining attributes",
    cst_on = cst_on$1,
    cst_style = cst_style$1,
    _p_ = [0, " "],
    cst_class = cst_class$1,
    cst_focus = cst_focus$0,
    cst_blur = "blur",
    cst_click = "click",
    cst_contextmenu = "contextmenu",
    cst_dblclick = "dblclick",
    cst_drag = "drag",
    cst_dragstart = "dragstart",
    cst_dragend = "dragend",
    cst_dragenter = "dragenter",
    cst_dragleave = "dragleave",
    cst_dragover = "dragover",
    cst_drop = "drop",
    cst_mousemove = "mousemove",
    cst_mouseup = "mouseup",
    cst_mousedown = "mousedown",
    cst_mouseenter = "mouseenter",
    cst_mouseleave = "mouseleave",
    cst_mouseover = "mouseover",
    cst_mouseout = "mouseout",
    cst_keyup = "keyup",
    cst_keypress = "keypress",
    cst_keydown = "keydown",
    cst_scroll = "scroll",
    cst_load = "load",
    cst_submit = "submit",
    cst_pointerdown = "pointerdown",
    cst_pointerup = "pointerup",
    cst_mousewheel = "mousewheel",
    cst_wheel = "wheel",
    cst_copy = "copy",
    cst_cut = "cut",
    cst_paste = "paste",
    cst_reset = "reset",
    cst_animationend = "animationend",
    cst_change = "change",
    cst_input = cst_input$1,
    cst_input$0 = cst_input$1;
   function on(type_id, name, handler){
    return [2, name, [0, type_id, handler]];
   }
   function on_focus(_bo_){return on(focus, cst_focus, _bo_);}
   function on_blur(_bn_){return on(focus, cst_blur, _bn_);}
   function on_click(_bm_){return on(mouse, cst_click, _bm_);}
   function on_contextmenu(_bl_){return on(mouse, cst_contextmenu, _bl_);}
   function on_double_click(_bk_){return on(mouse, cst_dblclick, _bk_);}
   function on_drag(_bj_){return on(drag, cst_drag, _bj_);}
   function on_dragstart(_bi_){return on(drag, cst_dragstart, _bi_);}
   function on_dragend(_bh_){return on(drag, cst_dragend, _bh_);}
   function on_dragenter(_bg_){return on(drag, cst_dragenter, _bg_);}
   function on_dragleave(_bf_){return on(drag, cst_dragleave, _bf_);}
   function on_dragover(_be_){return on(drag, cst_dragover, _be_);}
   function on_drop(_bd_){return on(drag, cst_drop, _bd_);}
   function on_mousemove(_bc_){return on(mouse, cst_mousemove, _bc_);}
   function on_mouseup(_bb_){return on(mouse, cst_mouseup, _bb_);}
   function on_mousedown(_ba_){return on(mouse, cst_mousedown, _ba_);}
   function on_mouseenter(_a$_){return on(mouse, cst_mouseenter, _a$_);}
   function on_mouseleave(_a__){return on(mouse, cst_mouseleave, _a__);}
   function on_mouseover(_a9_){return on(mouse, cst_mouseover, _a9_);}
   function on_mouseout(_a8_){return on(mouse, cst_mouseout, _a8_);}
   function on_keyup(_a7_){return on(keyboard, cst_keyup, _a7_);}
   function on_keypress(_a6_){return on(keyboard, cst_keypress, _a6_);}
   function on_keydown(_a5_){return on(keyboard, cst_keydown, _a5_);}
   function on_scroll(_a4_){return on(event, cst_scroll, _a4_);}
   function on_load(_a3_){return on(event, cst_load, _a3_);}
   function on_submit(_a2_){return on(submit, cst_submit, _a2_);}
   function on_pointerdown(_a1_){return on(pointer, cst_pointerdown, _a1_);}
   function on_pointerup(_a0_){return on(pointer, cst_pointerup, _a0_);}
   function on_mousewheel(_aZ_){return on(mousewheel, cst_mousewheel, _aZ_);}
   function on_wheel(_aY_){return on(wheel, cst_wheel, _aY_);}
   function on_copy(_aX_){return on(clipboard, cst_copy, _aX_);}
   function on_cut(_aW_){return on(clipboard, cst_cut, _aW_);}
   function on_paste(_aV_){return on(clipboard, cst_paste, _aV_);}
   function on_reset(_aU_){return on(event, cst_reset, _aU_);}
   function on_animationend(_aT_){
    return on(animation, cst_animationend, _aT_);
   }
   function const_ignore(param){return Virtual_dom_Effect[1];}
   function run_coercion(coercion, target, prev){
    if(prev) return prev;
    var _aS_ = caml_call1(coercion, target);
    return caml_call1(Js_of_ocaml_Js[5][10], _aS_);
   }
   function on_input_event(type_id, event, handler){
    return on
            (type_id,
             event,
             function(ev){
              return caml_call3
                      (Js_of_ocaml_Js[5][7],
                       ev.target,
                       const_ignore,
                       function(target){
                        var
                         _aR_ = Virtual_dom_Effect[1],
                         _aO_ =
                           run_coercion(Js_of_ocaml_Dom_html[118][34], target, 0),
                         _aP_ =
                           run_coercion(Js_of_ocaml_Dom_html[118][51], target, _aO_),
                         _aQ_ =
                           run_coercion(Js_of_ocaml_Dom_html[118][56], target, _aP_);
                        return caml_call3
                                (Core_Option[37],
                                 _aQ_,
                                 _aR_,
                                 function(target){
                                  var text = runtime.caml_string_of_jsstring(target.value);
                                  return caml_call2(handler, ev, text);
                                 });
                       });
             });
   }
   function on_change(_aN_){return on_input_event(event, cst_change, _aN_);}
   function on_input(_aM_){return on_input_event(event, cst_input, _aM_);}
   function to_raw(attr){
    switch(attr[0]){
      case 6:
      case 8:
       if(! attr[1]) return caml_call1(Virtual_dom_Raw[1][1], 0); break;
    }
    var
     attrs = [0, attr, 0],
     attrs_obj = caml_call1(Virtual_dom_Raw[1][1], 0);
    function take_second_styles(first, second){
     if(1 - caml_call1(Css_gen[21], first)){
      var
       _aK_ = [0, [1, [0, _h_, [0, caml_call1(Css_gen[9], second), 0]]], 0],
       _aL_ = [0, [1, [0, _i_, [0, caml_call1(Css_gen[9], first), 0]]], _aK_];
      warn_s
       ([1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_WARNING_not_combining_styl),
          _aL_]]);
     }
     return second;
    }
    function take_second_classes(first, second){
     if(1 - caml_call1(Core_List[18], first)){
      var
       first$0 =
         caml_call2
          (Core_List[77],
           first,
           function(a_003, b_004){return caml_call2(Core[479], a_003, b_004);}),
       second$0 =
         caml_call2
          (Core_List[77],
           second,
           function(a_005, b_006){return caml_call2(Core[479], a_005, b_006);}),
       _aI_ =
         [0,
          [1, [0, _j_, [0, caml_call2(Core[431], Core[484], second$0), 0]]],
          0],
       _aJ_ =
         [0,
          [1, [0, _k_, [0, caml_call2(Core[431], Core[484], first$0), 0]]],
          _aI_];
      warn_s
       ([1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_WARNING_not_combining_clas),
          _aJ_]]);
     }
     return second;
    }
    function take_second_handler(name, first, second){
     var _aH_ = [0, [1, [0, _l_, [0, caml_call1(Core[484], name), 0]]], 0];
     warn_s
      ([1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_WARNING_not_combining_hand),
         _aH_]]);
     return second;
    }
    function take_second_hook(name, first, second){
     var _aG_ = [0, [1, [0, _m_, [0, caml_call1(Core[484], name), 0]]], 0];
     warn_s
      ([1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_WARNING_not_combining_hook),
         _aG_]]);
     return second;
    }
    function merge
    (combine_hook, combine_handler, combine_styles, combine_classes, acc){
     function _af_(acc, attr){
      switch(attr[0]){
        case 0:
         var
          value = attr[3],
          name = attr[2],
          suppress_merge_warnings = attr[1],
          _ai_ = caml_call2(Virtual_dom_Raw[1][2], attrs_obj, name),
          _aj_ = _ai_ ? 1 - suppress_merge_warnings : _ai_;
         if(_aj_){
          var
           _ak_ = [0, [1, [0, _n_, [0, caml_call1(Core[484], name), 0]]], 0];
          warn_s
           ([1,
             [0,
              caml_call1
               (Sexplib0_Sexp_conv[7], cst_WARNING_not_combining_prop),
              _ak_]]);
         }
         if(name !== cst_value$2)
          caml_call3(Virtual_dom_Raw[1][4], attrs_obj, name, value);
         else{
          var t1 = Js_of_ocaml_Js[52][1], value$0 = t1.SoftSetHook(value);
          caml_call3(Virtual_dom_Raw[1][4], attrs_obj, cst_value, value$0);
         }
         return acc;
        case 1:
         var
          value$1 = attr[3],
          name$0 = attr[2],
          suppress_merge_warnings$0 = attr[1],
          _al_ = caml_call2(Virtual_dom_Raw[1][3], attrs_obj, name$0),
          _am_ = _al_ ? 1 - suppress_merge_warnings$0 : _al_;
         if(_am_){
          var
           _an_ = [0, [1, [0, _o_, [0, caml_call1(Core[484], name$0), 0]]], 0];
          warn_s
           ([1,
             [0,
              caml_call1
               (Sexplib0_Sexp_conv[7], cst_WARNING_not_combining_attr),
              _an_]]);
         }
         caml_call3(Virtual_dom_Raw[1][5], attrs_obj, name$0, value$1);
         return acc;
        case 2:
         var
          handler = attr[2],
          name$1 = attr[1],
          _ao_ = acc[4],
          _ap_ = combining_map_add(acc[3], name$1, handler, combine_handler);
         return [0, acc[1], acc[2], _ap_, _ao_];
        case 3:
         var
          hook = attr[2],
          name$2 = attr[1],
          _aq_ = combining_map_add(acc[4], name$2, hook, combine_hook);
         return [0, acc[1], acc[2], acc[3], _aq_];
        case 4:
         var
          new_styles = attr[1],
          _ar_ = acc[4],
          _as_ = acc[3],
          _at_ = acc[2];
         return [0,
                 caml_call2(combine_styles, acc[1], new_styles),
                 _at_,
                 _as_,
                 _ar_];
        case 5:
         var
          new_classes = attr[1],
          _au_ = acc[4],
          _av_ = acc[3],
          _aw_ = caml_call2(combine_classes, acc[2], new_classes);
         return [0, acc[1], _aw_, _av_, _au_];
        case 6:
         var
          attrs = attr[1],
          sub_merge =
            merge
              (function(param){return Virtual_dom_Hooks[1];},
               function(param){return combine;},
               Css_gen[27],
               Core[155],
               empty_merge)
             (attrs),
          _ax_ = caml_call3(Core_Map[82], acc[4], sub_merge[4], combine_hook),
          _ay_ =
            caml_call3(Core_Map[82], acc[3], sub_merge[3], combine_handler),
          _az_ = caml_call2(combine_classes, acc[2], sub_merge[2]);
         return [0,
                 caml_call2(combine_styles, acc[1], sub_merge[1]),
                 _az_,
                 _ay_,
                 _ax_];
        case 7:
         var
          map_classes = attr[3],
          map_styles = attr[2],
          attrs$0 = attr[1],
          sub_merge$0 =
            merge
              (take_second_hook,
               take_second_handler,
               Css_gen[27],
               Core[155],
               empty_merge)
             (attrs$0),
          _aA_ =
            caml_call3(Core_Map[82], acc[4], sub_merge$0[4], combine_hook),
          _aB_ =
            caml_call3(Core_Map[82], acc[3], sub_merge$0[3], combine_handler),
          _aC_ =
            caml_call1
             (map_classes,
              caml_call2(combine_classes, acc[2], sub_merge$0[2]));
         return [0,
                 caml_call1
                  (map_styles,
                   caml_call2(combine_styles, acc[1], sub_merge$0[1])),
                 _aC_,
                 _aB_,
                 _aA_];
        default:
         var
          attrs$1 = attr[1],
          sub_merge$1 =
            merge
              (take_second_hook,
               take_second_handler,
               take_second_styles,
               take_second_classes,
               empty_merge)
             (attrs$1),
          _aD_ =
            caml_call3(Core_Map[82], acc[4], sub_merge$1[4], combine_hook),
          _aE_ =
            caml_call3(Core_Map[82], acc[3], sub_merge$1[3], combine_handler),
          _aF_ = caml_call2(combine_classes, acc[2], sub_merge$1[2]);
         return [0,
                 caml_call2(combine_styles, acc[1], sub_merge$1[1]),
                 _aF_,
                 _aE_,
                 _aD_];
      }
     }
     var _ag_ = Core_List[20];
     return function(_ah_){return caml_call3(_ag_, _ah_, acc, _af_);};
    }
    var
     merge$0 =
       merge
         (take_second_hook,
          take_second_handler,
          take_second_styles,
          take_second_classes,
          empty_merge)
        (attrs);
    caml_call2
     (Core_Map[49],
      merge$0[4],
      function(name, hook){
       var _ae_ = caml_call1(Virtual_dom_Hooks[2], hook);
       return caml_call3(Virtual_dom_Raw[1][4], attrs_obj, name, _ae_);
      });
    caml_call2
     (Core_Map[49],
      merge$0[3],
      function(name, param){
       var handler = param[2];
       function f(e){
        var _ad_ = caml_call1(handler, e);
        caml_call2(Virtual_dom_Effect[22][1], e, _ad_);
        return Js_of_ocaml_Js[7];
       }
       var
        _ab_ = caml_call1(Js_of_ocaml_Dom[10], f),
        _ac_ = caml_call2(Core[17], cst_on, name);
       return caml_call3(Virtual_dom_Raw[1][4], attrs_obj, _ac_, _ab_);
      });
    if(1 - caml_call1(Css_gen[21], merge$0[1])){
     var
      props = caml_call1(Css_gen[30], merge$0[1]),
      obj = caml_call1(Virtual_dom_Raw[1][1], 0);
     caml_call2
      (Core_List[19],
       props,
       function(param){
        var v = param[2], k = param[1];
        return caml_call3
                (Virtual_dom_Raw[1][4], obj, k, caml_jsstring_of_string(v));
       });
     caml_call3(Virtual_dom_Raw[1][4], attrs_obj, cst_style, obj);
    }
    if(! caml_call1(Core_List[18], merge$0[2])){
     var
      _aa_ =
        caml_jsstring_of_string(caml_call2(Core_String[45], _p_, merge$0[2]));
     caml_call3(Virtual_dom_Raw[1][5], attrs_obj, cst_class, _aa_);
    }
    return attrs_obj;
   }
   function on_file_input(handler){
    return on
            (event,
             cst_input$0,
             function(ev){
              return caml_call3
                      (Js_of_ocaml_Js[5][7],
                       ev.target,
                       const_ignore,
                       function(target){
                        var _$_ = caml_call1(Js_of_ocaml_Dom_html[118][34], target);
                        return caml_call3
                                (Js_of_ocaml_Js[5][7],
                                 _$_,
                                 const_ignore,
                                 function(target){
                                  return caml_call3
                                          (Js_of_ocaml_Js[6][7],
                                           target.files,
                                           const_ignore,
                                           function(files){return caml_call2(handler, ev, files);});
                                 });
                       });
             });
   }
   var sexp_of_t = Core_Unit[16];
   function combine$1(___, param){return 0;}
   function init(_Z_, param){return 0;}
   function on_mount(_Y_, param, element){return element.focus();}
   function update(_X_, _W_, _V_, param){return 0;}
   function destroy(_U_, _T_, param){return 0;}
   var
    Hook =
      caml_call1
       (Virtual_dom_Hooks[3],
        [0, [0], [0, sexp_of_t, combine$1], init, on_mount, update, destroy]);
   function attr(param){
    var hook = caml_call1(Hook[1], 0);
    return [3, name$0, hook];
   }
   function map_style(t, f){
    return [0, [7, t, f, function(_S_){return _S_;}], 0];
   }
   function add_class(t, c){
    return [0,
            [7,
             t,
             function(_R_){return _R_;},
             function(cs){return [0, c, cs];}],
            0];
   }
   function add_style(t, s){
    return map_style(t, function(ss){return caml_call2(Css_gen[27], ss, s);});
   }
   function merge_classes_and_styles(t){
    return [0,
            [7, t, function(_Q_){return _Q_;}, function(_P_){return _P_;}],
            0];
   }
   function sexp_of_t$0(x_013){
    return caml_call2
            (Core[431],
             function(param){
              var
               arg1_010 = param[2],
               arg0_009 = param[1],
               res0_011 = caml_call1(Core[484], arg0_009),
               res1_012 = caml_call1(Core[484], arg1_010);
              return [1, [0, res0_011, [0, res1_012, 0]]];
             },
             x_013);
   }
   var combine$2 = Core_List[9], Input = [0, sexp_of_t$0, combine$2];
   function init$0(input, element){
    return caml_call2
            (Core_List[19],
             input,
             function(param){
              var
               v = param[2],
               k = param[1],
               t11 = Js_of_ocaml_Js[3],
               t10 = caml_jsstring_of_string(v),
               t9 = caml_jsstring_of_string(k),
               t12 = element.style;
              t12.setProperty(t9, t10, t11);
              return 0;
             });
   }
   function on_mount$0(_O_, _N_, param){return 0;}
   function destroy$0(input, param, element){
    return caml_call2
            (Core_List[19],
             input,
             function(param){
              var
               k = param[1],
               t14 = caml_jsstring_of_string(k),
               t15 = element.style;
              t15.removeProperty(t14);
              return 0;
             });
   }
   function update$0(old_input, new_input, param, element){
    if
     (old_input !== new_input
      &&
       !
       caml_call3
        (Core[428],
         function(a_016, b_017){
          var
           t_019 = a_016[2],
           t_018 = a_016[1],
           t_021 = b_017[2],
           t_020 = b_017[1],
           _M_ = caml_call2(Core[480], t_018, t_020);
          return _M_ ? caml_call2(Core[480], t_019, t_021) : _M_;
         },
         old_input,
         new_input)){
     destroy$0(old_input, 0, element);
     return init$0(new_input, element);
    }
    return 0;
   }
   var
    Css_var_hook =
      caml_call1
       (Virtual_dom_Hooks[3],
        [0, [0], Input, init$0, on_mount$0, update$0, destroy$0]),
    cst_on$0 = cst_on$1,
    cst_style$0 = cst_style$1,
    cst_class$0 = cst_class$1;
   function css_vars_no_kebabs(alist){
    var hook = caml_call1(Css_var_hook[1], alist);
    return [3, name$2, hook];
   }
   function css_var(name, v){
    return css_vars_no_kebabs
            ([0, [0, caml_call2(Core[17], cst$6, name), v], 0]);
   }
   function filter_by_kind(t, f){
    switch(t[0]){
      case 0:
       return caml_call1(f, 99222645) ? t : empty;
      case 1:
       return caml_call1(f, 482562044) ? t : empty;
      case 2:
       return caml_call1(f, 321312682) ? t : empty;
      case 3:
       return caml_call1(f, 803993603) ? t : empty;
      case 4:
       return caml_call1(f, 390796561) ? t : empty;
      case 5:
       return caml_call1(f, -611981288) ? t : empty;
      case 6:
       var attrs = t[1];
       return [6,
               caml_call2
                (Core_List[50],
                 attrs,
                 function(_L_){return filter_by_kind(_L_, f);})];
      case 7:
       var b = t[3], a = t[2], attrs$0 = t[1];
       return [7,
               caml_call2
                (Core_List[50],
                 attrs$0,
                 function(_K_){return filter_by_kind(_K_, f);}),
               a,
               b];
      default:
       var attrs$1 = t[1];
       return [8,
               caml_call2
                (Core_List[50],
                 attrs$1,
                 function(_J_){return filter_by_kind(_J_, f);})];
    }
   }
   function contains_name(looking_for, param){
    switch(param[0]){
      case 2:
       var name$0 = param[1], _H_ = caml_call2(Core[17], cst_on$0, name$0);
       return caml_call2(Core_String[138], _H_, looking_for);
      case 3:
       var name = param[1]; break;
      case 4:
       return caml_call2(Core_String[138], looking_for, cst_style$0);
      case 5:
       return caml_call2(Core_String[138], looking_for, cst_class$0);
      case 0:
      case 1:
       var name = param[2]; break;
      default:
       var attrs = param[1];
       return caml_call2
               (Core_List[23],
                attrs,
                function(_I_){return contains_name(looking_for, _I_);});
    }
    return caml_call2(Core_String[138], looking_for, name);
   }
   caml_call1(Ppx_inline_test_lib[6], cst_virtual_dom);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Attr);
   var
    Virtual_dom_Attr =
      [0,
       create,
       create_float,
       string_property,
       bool_property,
       property,
       suppress_merge_warnings,
       create_hook,
       many,
       many_without_merge,
       empty,
       combine$0,
       combine$0,
       autofocus,
       checked,
       class$0,
       classes$0,
       classes,
       disabled,
       for$0,
       label,
       href,
       target,
       id,
       name,
       placeholder,
       selected,
       hidden,
       readonly,
       style,
       min,
       max,
       min_date,
       max_date,
       min_date_time,
       max_date_time,
       colspan,
       rowspan,
       draggable,
       tabindex,
       type,
       value,
       value_prop,
       title,
       alt,
       src,
       open,
       start,
       on_focus,
       on_blur,
       [0, current, For_testing],
       to_raw,
       on_input,
       on_change,
       on_file_input,
       on_click,
       on_contextmenu,
       on_double_click,
       on_drag,
       on_dragstart,
       on_dragend,
       on_dragenter,
       on_dragleave,
       on_dragover,
       on_drop,
       on_mousemove,
       on_mouseup,
       on_mousedown,
       on_mouseenter,
       on_mouseleave,
       on_mouseover,
       on_mouseout,
       on_keyup,
       on_keypress,
       on_keydown,
       on_scroll,
       on_load,
       on_submit,
       on_pointerdown,
       on_pointerup,
       on_mousewheel,
       on_wheel,
       on_copy,
       on_cut,
       on_paste,
       on_reset,
       on_animationend,
       css_var,
       css_vars_no_kebabs,
       [0, merge_classes_and_styles, map_style, add_style, add_class],
       [0, attr],
       function(_z_){
        var has_been_used = [0, 0], sexp_of_t = Sexplib0_Sexp_conv[23];
        function combine(left, right){
         return [0, Ui_effect[2], [0, left, [0, right, 0]]];
        }
        var Input = [0, sexp_of_t, combine];
        function init(_G_, param){return 0;}
        function on_mount(event, param, element){
         var _F_ = 1 - has_been_used[1];
         return _F_
                 ? (has_been_used
                    [1]
                   = 1,
                   element.focus(),
                   caml_call1(Virtual_dom_Effect[22][2], event))
                 : _F_;
        }
        function update(_E_, _D_, _C_, param){return 0;}
        function destroy(_B_, _A_, param){return 0;}
        var
         Hook =
           caml_call1
            (Virtual_dom_Hooks[3],
             [0, [0], Input, init, on_mount, update, destroy]);
        function attr(param, after){
         var hook = caml_call1(Hook[1], after);
         return [3, name$1, hook];
        }
        return [0, attr];
       },
       function(M){
        var Input = M[1];
        function init(_y_, param){return 0;}
        function on_mount(_x_, _w_, param){return 0;}
        function update(_v_, _u_, _t_, param){return 0;}
        function destroy(_s_, _r_, param){return 0;}
        var
         Hook =
           caml_call1
            (Virtual_dom_Hooks[3],
             [0, [0], Input, init, on_mount, update, destroy]);
        function attr(input){
         var hook = caml_call1(Hook[1], input), name = M[2];
         return [3, name, hook];
        }
        var type_id = Hook[2][1];
        return [0, attr, type_id];
       },
       [0, contains_name, filter_by_kind]];
   runtime.caml_register_global(168, Virtual_dom_Attr, cst_Virtual_dom_Attr);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Global_listeners
//# unitInfo: Requires: Expect_test_collector, Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Ui_effect, Virtual_dom__Attr, Virtual_dom__Effect, Virtual_dom__Hooks
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Global_listene = "Virtual_dom__Global_listeners",
    cst_virtual_dom = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Virtual_dom_Attr = global_data.Virtual_dom__Attr,
    Virtual_dom_Effect = global_data.Virtual_dom__Effect,
    Ui_effect = global_data.Ui_effect,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Virtual_dom_Hooks = global_data.Virtual_dom__Hooks,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Global_listene);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[6][1], "src/global_listeners.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_virtual_dom, "global_listeners.ml");
   function Make(X){
    function sexp_of_t(param){
     return caml_call1(Sexplib0_Sexp_conv[24], function(_l_){return 0;});
    }
    function combine(f, g, event){
     var
      _j_ = [0, caml_call1(g, event), 0],
      _k_ = [0, caml_call1(f, event), _j_];
     return [0, Ui_effect[2], _k_];
    }
    var Input = [0, sexp_of_t, combine];
    function init(f, element){
     var
      handler =
        caml_call1
         (Js_of_ocaml_Dom[10],
          function(ev){
           var _i_ = caml_call1(f, ev);
           caml_call2(Virtual_dom_Effect[22][1], ev, _i_);
           return Js_of_ocaml_Js[7];
          });
     return [0,
             caml_call4
              (Js_of_ocaml_Dom_html[17],
               Js_of_ocaml_Dom_html[8],
               X[1],
               handler,
               Js_of_ocaml_Js[7])];
    }
    function destroy(input, state, element){
     return caml_call1(Js_of_ocaml_Dom_html[18], state[1]);
    }
    function update(old_input, f, state, element){
     destroy(old_input, state, element);
     var new_state = init(f, element);
     state[1] = new_state[1];
     return 0;
    }
    function on_mount(input, state, element){return 0;}
    var
     include =
       caml_call1
        (Virtual_dom_Hooks[3],
         [0, [0], Input, init, on_mount, update, destroy]),
     create = include[1],
     For_testing = include[2];
    return [0, create, For_testing];
   }
   var
    event_kind = Js_of_ocaml_Dom_html[15][9],
    Mouseup = Make([0, event_kind]),
    event_kind$0 = Js_of_ocaml_Dom_html[15][11],
    Mousemove = Make([0, event_kind$0]),
    event_kind$1 = Js_of_ocaml_Dom_html[15][2],
    Click = Make([0, event_kind$1]),
    event_kind$2 = caml_call1(Js_of_ocaml_Dom_html[15][95], "contextmenu"),
    Contextmenu = Make([0, event_kind$2]),
    event_kind$3 = Js_of_ocaml_Dom_html[15][14],
    Keydown = Make([0, event_kind$3]),
    event_kind$4 =
      caml_call1(Js_of_ocaml_Dom_html[15][95], "visibilitychange"),
    Visibilitychange = Make([0, event_kind$4]),
    event_kind$5 = caml_call1(Js_of_ocaml_Dom_html[15][95], "beforeunload"),
    Beforeunload = Make([0, event_kind$5]),
    cst_global_mouseup_listener = "global-mouseup-listener",
    cst_global_mousemove_listener = "global-mousemove-listener",
    cst_global_click_listener = "global-click-listener",
    cst_global_contextmenu_listene = "global-contextmenu-listener",
    cst_global_keydown_listener = "global-keydown-listener",
    cst_global_beforeunload_listen = "global-beforeunload-listener",
    cst_global_visibilitychange_li = "global-visibilitychange-listener";
   function mouseup(f){
    var _h_ = caml_call1(Mouseup[1], f);
    return caml_call2(Virtual_dom_Attr[7], cst_global_mouseup_listener, _h_);
   }
   function mousemove(f){
    var _g_ = caml_call1(Mousemove[1], f);
    return caml_call2(Virtual_dom_Attr[7], cst_global_mousemove_listener, _g_);
   }
   function click(f){
    var _f_ = caml_call1(Click[1], f);
    return caml_call2(Virtual_dom_Attr[7], cst_global_click_listener, _f_);
   }
   function contextmenu(f){
    var _e_ = caml_call1(Contextmenu[1], f);
    return caml_call2
            (Virtual_dom_Attr[7], cst_global_contextmenu_listene, _e_);
   }
   function keydown(f){
    var _d_ = caml_call1(Keydown[1], f);
    return caml_call2(Virtual_dom_Attr[7], cst_global_keydown_listener, _d_);
   }
   function beforeunload(f){
    function f$0(event){
     var _c_ = caml_call1(f, event);
     return caml_call2
             (Ui_effect[13][4][2],
              _c_,
              function(param){
               return 327963705 <= param
                       ? Virtual_dom_Effect[1]
                       : (event.returnValue
                         = "this string can be anything",
                         Virtual_dom_Effect[1]);
              });
    }
    var _b_ = caml_call1(Beforeunload[1], f$0);
    return caml_call2
            (Virtual_dom_Attr[7], cst_global_beforeunload_listen, _b_);
   }
   function visibilitychange(f){
    var _a_ = caml_call1(Visibilitychange[1], f);
    return caml_call2
            (Virtual_dom_Attr[7], cst_global_visibilitychange_li, _a_);
   }
   var
    mouseup_type_id = Mouseup[2][1],
    mousemove_type_id = Mousemove[2][1],
    keydown_type_id = Keydown[2][1],
    click_type_id = Click[2][1],
    contextmenu_type_id = Contextmenu[2][1],
    visibilitychange_type_id = Visibilitychange[2][1],
    beforeunload_type_id = Beforeunload[2][1];
   caml_call1(Ppx_inline_test_lib[6], cst_virtual_dom);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Global_listene);
   var
    Virtual_dom_Global_listeners =
      [0,
       mouseup,
       mousemove,
       click,
       contextmenu,
       keydown,
       visibilitychange,
       beforeunload,
       [0,
        mouseup_type_id,
        mousemove_type_id,
        click_type_id,
        contextmenu_type_id,
        keydown_type_id,
        visibilitychange_type_id,
        beforeunload_type_id]];
   runtime.caml_register_global
    (32, Virtual_dom_Global_listeners, cst_Virtual_dom_Global_listene);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Thunk
//# unitInfo: Requires: CamlinternalLazy, Expect_test_collector, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Thunk = "Virtual_dom__Thunk",
    cst_virtual_dom = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Thunk);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[6][1], "src/thunk.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_virtual_dom, "thunk.ml");
   var
    vdom_thunk =
      [246, function(param){return Js_of_ocaml_Js[52][1].VdomThunk;}];
   function create(key, arg, f){
    if(key)
     var
      key$0 = key[1],
      key$1 =
        caml_call1
         (Js_of_ocaml_Js[6][2], runtime.caml_jsstring_of_string(key$0));
    else
     var key$1 = Js_of_ocaml_Js[6][1];
    var
     f$0 =
       runtime.caml_js_wrap_callback(function(a){return caml_call1(f, a);}),
     _a_ = runtime.caml_obj_tag(vdom_thunk);
    a:
    if(250 === _a_)
     var _b_ = vdom_thunk[1];
    else{
     if(246 !== _a_ && 244 !== _a_){var _b_ = vdom_thunk; break a;}
     var _b_ = caml_call1(CamlinternalLazy[2], vdom_thunk);
    }
    return _b_(f$0, arg, key$1);
   }
   caml_call1(Ppx_inline_test_lib[6], cst_virtual_dom);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Thunk);
   var Virtual_dom_Thunk = [0, create];
   runtime.caml_register_global(14, Virtual_dom_Thunk, cst_Virtual_dom_Thunk);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Node
//# unitInfo: Requires: Base, Base__List, Base__Printf, Base__Staged, Base__String, Base__Type_equal, CamlinternalLazy, Expect_test_collector, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Virtual_dom__Attr, Virtual_dom__Raw, Virtual_dom__Thunk
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_widget$1 = "-widget",
    cst_opaque = "<opaque>",
    cst_Virtual_dom_Node = "Virtual_dom__Node",
    cst_input$1 = "input",
    cst_virtual_dom = "virtual_dom",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    res1_009 = [0, cst_opaque],
    cst_pre = "pre",
    Virtual_dom_Raw = global_data.Virtual_dom__Raw,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Virtual_dom_Thunk = global_data.Virtual_dom__Thunk,
    Base = global_data.Base,
    Base_List = global_data.Base__List,
    Base_String = global_data.Base__String,
    Base_Type_equal = global_data.Base__Type_equal,
    Base_Staged = global_data.Base__Staged,
    Base_Printf = global_data.Base__Printf,
    Virtual_dom_Attr = global_data.Virtual_dom__Attr,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Node);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[6][1], "src/node.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_virtual_dom, "node.ml");
   var Aliases = [0];
   function tag(t){return t[1];}
   function attrs(t){return t[3];}
   function key(t){return t[2];}
   function with_key(t, key){
    return [0, t[1], [0, key], t[3], t[4], t[5], t[6]];
   }
   function map_attrs(t, f){
    var
     attrs = caml_call1(f, t[3]),
     raw_attrs =
       [246, function(_cd_){return caml_call1(Virtual_dom_Attr[51], attrs);}];
    return [0, t[1], t[2], attrs, raw_attrs, t[5], t[6]];
   }
   function add_class(t, c){
    return map_attrs
            (t,
             function(a){
              var _cc_ = caml_call1(Virtual_dom_Attr[15], c);
              return caml_call2(Virtual_dom_Attr[11], a, _cc_);
             });
   }
   function add_classes(t, c){
    return map_attrs
            (t,
             function(a){
              var _cb_ = caml_call1(Virtual_dom_Attr[16], c);
              return caml_call2(Virtual_dom_Attr[11], a, _cb_);
             });
   }
   function add_style(t, s){
    return map_attrs
            (t,
             function(a){
              var _ca_ = caml_call1(Virtual_dom_Attr[29], s);
              return caml_call2(Virtual_dom_Attr[11], a, _ca_);
             });
   }
   function t_to_js(param){
    if(typeof param === "number")
     return caml_call1(Virtual_dom_Raw[2][2], cst);
    switch(param[0]){
      case 0:
       var s = param[1]; return caml_call1(Virtual_dom_Raw[2][2], s);
      case 1:
       var
        _b9_ = param[1],
        _b__ = _b9_[4],
        key = _b9_[2],
        tag = _b9_[1],
        _b$_ = caml_obj_tag(_b__);
       a:
       if(250 === _b$_)
        var raw_attrs = _b__[1];
       else{
        if(246 !== _b$_ && 244 !== _b$_){var raw_attrs = _b__; break a;}
        var raw_attrs = caml_call1(CamlinternalLazy[2], _b__);
       }
       var children = _b9_[5];
       return 4153924 <= _b9_[6]
               ? caml_call4
                 (Virtual_dom_Raw[2][3], tag, raw_attrs, children, key)
               : caml_call4
                 (Virtual_dom_Raw[2][1], tag, raw_attrs, children, key);
      case 2:
       var w = param[1]; return w;
      default:
       var t = param[2], key$0 = param[1];
       return caml_call3(Virtual_dom_Thunk[1], key$0, t, t_to_js_lazy);
    }
   }
   function t_to_js_lazy(param){
    var _b8_ = caml_obj_tag(param);
    a:
    if(250 === _b8_)
     var t = param[1];
    else{
     if(246 !== _b8_ && 244 !== _b8_){var t = param; break a;}
     var t = caml_call1(CamlinternalLazy[2], param);
    }
    return t_to_js(t);
   }
   function text(s){return [0, s];}
   function element(kind, tag, key, attrs, children){
    var t0 = Js_of_ocaml_Js[18], children_raw = new t0;
    caml_call2
     (Base_List[19],
      children,
      function(other){
       if(typeof other === "number") return 0;
       var t1 = t_to_js(other);
       children_raw.push(t1);
       return 0;
      });
    var
     raw_attrs =
       [246, function(_b7_){return caml_call1(Virtual_dom_Attr[51], attrs);}];
    return [0, tag, key, attrs, raw_attrs, children_raw, kind];
   }
   function create(tag, key, opt, children){
    var attrs = opt ? opt[1] : 0;
    return [1,
            element
             (-847254184,
              tag,
              key,
              caml_call1(Virtual_dom_Attr[8], attrs),
              children)];
   }
   var
    include = Virtual_dom_Raw[4],
    create$0 = include[1],
    cst_widget$0 = cst_widget$1;
   function lazy(key, t){return [3, key, t];}
   function element_expert(kind, tag, key, attrs, children){
    var
     raw_attrs =
       [246, function(_b6_){return caml_call1(Virtual_dom_Attr[51], attrs);}];
    return [0, tag, key, attrs, raw_attrs, children, kind];
   }
   function widget(vdom_for_testing, destroy, update, id, init, param){
    var
     vdom_for_testing$0 =
       [246,
        function(_b2_){
         if(! vdom_for_testing){
          var _b5_ = caml_call1(Base_Type_equal[12][6], id);
          return t_to_js
                  (create(caml_call2(Base[212], _b5_, cst_widget$0), 0, 0, 0));
         }
         var t = vdom_for_testing[1], _b3_ = caml_obj_tag(t);
         a:
         if(250 === _b3_)
          var _b4_ = t[1];
         else{
          if(246 !== _b3_ && 244 !== _b3_){var _b4_ = t; break a;}
          var _b4_ = caml_call1(CamlinternalLazy[2], t);
         }
         return t_to_js(_b4_);
        }];
    return [2,
            caml_call6
             (create$0, [0, vdom_for_testing$0], destroy, update, id, init, 0)];
   }
   function create_childless(tag, key, attrs, param){return create(tag, key, attrs, 0);
   }
   function create_svg(tag, key, opt, children){
    var attrs = opt ? opt[1] : 0;
    return [1,
            element
             (4153924,
              tag,
              key,
              caml_call1(Virtual_dom_Attr[8], attrs),
              children)];
   }
   var _a_ = [0, "state"], _b_ = [0, cst_input$1], cst_widget = cst_widget$1;
   function textf(format){return caml_call2(Base_Printf[4], text, format);}
   function widget_of_module(m){
    var
     id =
       caml_call2
        (Base_Type_equal[12][4],
         m[3],
         function(param){
          var
           arg0_006 = param[1],
           state_004 = arg0_006[2],
           input_002 = arg0_006[1],
           arg_005 = caml_call1(m[2][1], state_004),
           bnds_001 = [0, [1, [0, _a_, [0, arg_005, 0]]], 0],
           arg_003 = caml_call1(m[1][1], input_002),
           bnds_001$0 = [0, [1, [0, _b_, [0, arg_003, 0]]], bnds_001],
           res0_008 = [1, bnds_001$0];
          return [1, [0, res0_008, [0, res1_009, 0]]];
         }),
     _bZ_ =
       caml_call1
        (Base_Staged[1],
         function(input){
          var
           vdom_for_testing =
             [246,
              function(_b0_){
               var match = m[7];
               if(typeof match === "number"){
                var other = caml_call1(m[1][1], input);
                a:
                {
                 if(0 === other[0] && other[1] === cst_opaque){var children = 0; break a;}
                 var
                  s = caml_call2(Base[85][13], 0, other),
                  children = [0, [0, s], 0];
                }
                var
                 _b1_ =
                   create
                    (caml_call2(Base[212], m[3], cst_widget), 0, 0, children);
               }
               else
                var f = match[2], _b1_ = caml_call1(f, input);
               return t_to_js(_b1_);
              }];
          return caml_call6
                  (create$0,
                   [0, vdom_for_testing],
                   [0,
                    function(param, element){
                     var state = param[2], prev_input = param[1];
                     return caml_call3(m[6], prev_input, state, element);
                    }],
                   [0,
                    function(param, element){
                     var
                      state = param[2],
                      prev_input = param[1],
                      match = caml_call4(m[5], prev_input, input, state, element),
                      element$0 = match[2],
                      state$0 = match[1];
                     return [0, [0, input, state$0], element$0];
                    }],
                   id,
                   function(param){
                    var
                     match = caml_call1(m[4], input),
                     element = match[2],
                     state = match[1];
                    return [0, [0, input, state], element];
                   },
                   0);
         }),
     f = caml_call1(Base_Staged[2], _bZ_);
    return caml_call1
            (Base_Staged[1], function(i){return [2, caml_call1(f, i)];});
   }
   function to_dom(t){
    var _bY_ = t_to_js(t);
    return caml_call1(Virtual_dom_Raw[2][4], _bY_);
   }
   function widget$0(name, create){
    var
     id =
       caml_call2
        (Base_Type_equal[12][4],
         name,
         function(param){var content = param[1][1]; return [0, content];});
    return caml_call1
            (Base_Staged[1],
             function(override_vdom_for_testing, tag, attrs, content, param){
              var element = caml_call3(create, tag, attrs, 0);
              function init(param){
               var
                element$0 = to_dom(element),
                t3 = caml_jsstring_of_string(content);
               element$0.innerHTML = t3;
               return [0, [0, content, tag, attrs], element$0];
              }
              function update(param, element){
               var
                prev_attr = param[3],
                prev_tag = param[2],
                prev_content = param[1];
               a:
               {
                if
                 (caml_call2(Base_String[131], prev_tag, tag)
                  && prev_attr === attrs){
                 var element$0 = element;
                 break a;
                }
                var
                 _bV_ = t_to_js(caml_call3(create, tag, attrs, 0)),
                 _bW_ = t_to_js(caml_call3(create, prev_tag, prev_attr, 0)),
                 _bX_ = caml_call2(Virtual_dom_Raw[3][1], _bW_, _bV_),
                 element$0 = caml_call2(Virtual_dom_Raw[3][2], element, _bX_);
               }
               var
                _bT_ = 1 - caml_call2(Base_String[131], prev_tag, tag),
                _bU_ =
                  _bT_
                  || 1 - caml_call2(Base_String[131], prev_content, content);
               if(_bU_){
                var t5 = caml_jsstring_of_string(content);
                element$0.innerHTML = t5;
               }
               return [0, [0, content, tag, attrs], element$0];
              }
              if(override_vdom_for_testing)
               var v = override_vdom_for_testing[1], vdom_for_testing = v;
              else
               var
                vdom_for_testing =
                  [246,
                   function(param){
                    return caml_call3(create, tag, attrs, [0, [0, content], 0]);
                   }];
              return widget
                      ([0, vdom_for_testing], 0, [0, update], id, init, 0);
             });
   }
   var
    _c_ =
      widget$0
       ("inner-html-svg-node",
        function(tag, attrs){
         var key = 0;
         return function(children){
          return [1,
                  element
                   (4153924,
                    tag,
                    key,
                    caml_call1(Virtual_dom_Attr[8], attrs),
                    children)];};
        }),
    inner_html_svg = caml_call1(Base_Staged[2], _c_),
    _d_ =
      widget$0
       ("inner-html-node",
        function(tag, attrs){
         var _bQ_ = [0, attrs], _bR_ = 0;
         return function(_bS_){return create(tag, _bR_, _bQ_, _bS_);};
        }),
    inner_html = caml_call1(Base_Staged[2], _d_),
    cst_a = "a",
    cst_abbr = "abbr",
    cst_body = "body",
    cst_button = "button",
    cst_code = "code",
    cst_datalist = "datalist",
    cst_details = "details",
    cst_div = "div",
    cst_main = "main",
    cst_fieldset = "fieldset",
    cst_legend = "legend",
    cst_footer = "footer",
    cst_h1 = "h1",
    cst_h2 = "h2",
    cst_h3 = "h3",
    cst_h4 = "h4",
    cst_h5 = "h5",
    cst_h6 = "h6",
    cst_header = "header",
    cst_html = "html",
    cst_input = cst_input$1,
    cst_img = "img",
    cst_input$0 = cst_input$1,
    cst_textarea = "textarea",
    cst_select = "select",
    cst_optgroup = "optgroup",
    cst_option = "option",
    cst_label = "label",
    cst_li = "li",
    cst_p = "p",
    cst_section = "section",
    cst_span = "span",
    cst_strong = "strong",
    cst_em = "em",
    cst_blockquote = "blockquote",
    cst_summary = "summary",
    cst_iframe = "iframe",
    cst_table = "table",
    cst_tbody = "tbody",
    cst_td = "td",
    cst_th = "th",
    cst_thead = "thead",
    cst_tr = "tr",
    cst_ul = "ul",
    cst_ol = "ol",
    cst_br = "br",
    cst_hr = "hr",
    cst_dl = "dl",
    cst_dt = "dt",
    cst_dd = "dd",
    _e_ = [0, 0];
   function a(_bN_, _bO_, _bP_){return create(cst_a, _bN_, _bO_, _bP_);}
   function abbr(_bK_, _bL_, _bM_){return create(cst_abbr, _bK_, _bL_, _bM_);}
   function body(_bH_, _bI_, _bJ_){return create(cst_body, _bH_, _bI_, _bJ_);}
   function button(_bE_, _bF_, _bG_){
    return create(cst_button, _bE_, _bF_, _bG_);
   }
   function code(_bB_, _bC_, _bD_){return create(cst_code, _bB_, _bC_, _bD_);}
   function datalist(_by_, _bz_, _bA_){
    return create(cst_datalist, _by_, _bz_, _bA_);
   }
   function details(_bv_, _bw_, _bx_){
    return create(cst_details, _bv_, _bw_, _bx_);
   }
   function div(_bs_, _bt_, _bu_){return create(cst_div, _bs_, _bt_, _bu_);}
   function main(_bp_, _bq_, _br_){return create(cst_main, _bp_, _bq_, _br_);}
   function fieldset(_bm_, _bn_, _bo_){
    return create(cst_fieldset, _bm_, _bn_, _bo_);
   }
   function legend(_bj_, _bk_, _bl_){
    return create(cst_legend, _bj_, _bk_, _bl_);
   }
   function footer(_bg_, _bh_, _bi_){
    return create(cst_footer, _bg_, _bh_, _bi_);
   }
   function h1(_bd_, _be_, _bf_){return create(cst_h1, _bd_, _be_, _bf_);}
   function h2(_ba_, _bb_, _bc_){return create(cst_h2, _ba_, _bb_, _bc_);}
   function h3(_a9_, _a__, _a$_){return create(cst_h3, _a9_, _a__, _a$_);}
   function h4(_a6_, _a7_, _a8_){return create(cst_h4, _a6_, _a7_, _a8_);}
   function h5(_a3_, _a4_, _a5_){return create(cst_h5, _a3_, _a4_, _a5_);}
   function h6(_a0_, _a1_, _a2_){return create(cst_h6, _a0_, _a1_, _a2_);}
   function header(_aX_, _aY_, _aZ_){
    return create(cst_header, _aX_, _aY_, _aZ_);
   }
   function html(_aU_, _aV_, _aW_){return create(cst_html, _aU_, _aV_, _aW_);}
   function input(_aR_, _aS_, _aT_){
    return create_childless(cst_input, _aR_, _aS_, _aT_);
   }
   function img(_aO_, _aP_, _aQ_){
    return create_childless(cst_img, _aO_, _aP_, _aQ_);
   }
   function input_deprecated(_aL_, _aM_, _aN_){
    return create(cst_input$0, _aL_, _aM_, _aN_);
   }
   function textarea(_aI_, _aJ_, _aK_){
    return create(cst_textarea, _aI_, _aJ_, _aK_);
   }
   function select(_aF_, _aG_, _aH_){
    return create(cst_select, _aF_, _aG_, _aH_);
   }
   function optgroup(_aC_, _aD_, _aE_){
    return create(cst_optgroup, _aC_, _aD_, _aE_);
   }
   function option(_az_, _aA_, _aB_){
    return create(cst_option, _az_, _aA_, _aB_);
   }
   function label(_aw_, _ax_, _ay_){
    return create(cst_label, _aw_, _ax_, _ay_);
   }
   function li(_at_, _au_, _av_){return create(cst_li, _at_, _au_, _av_);}
   function p(_aq_, _ar_, _as_){return create(cst_p, _aq_, _ar_, _as_);}
   function pre(_an_, _ao_, _ap_){return create(cst_pre, _an_, _ao_, _ap_);}
   function section(_ak_, _al_, _am_){
    return create(cst_section, _ak_, _al_, _am_);
   }
   function span(_ah_, _ai_, _aj_){return create(cst_span, _ah_, _ai_, _aj_);}
   function strong(_ae_, _af_, _ag_){
    return create(cst_strong, _ae_, _af_, _ag_);
   }
   function em(_ab_, _ac_, _ad_){return create(cst_em, _ab_, _ac_, _ad_);}
   function blockquote(___, _$_, _aa_){
    return create(cst_blockquote, ___, _$_, _aa_);
   }
   function summary(_X_, _Y_, _Z_){return create(cst_summary, _X_, _Y_, _Z_);}
   function iframe(_U_, _V_, _W_){return create(cst_iframe, _U_, _V_, _W_);}
   function table(_R_, _S_, _T_){return create(cst_table, _R_, _S_, _T_);}
   function tbody(_O_, _P_, _Q_){return create(cst_tbody, _O_, _P_, _Q_);}
   function td(_L_, _M_, _N_){return create(cst_td, _L_, _M_, _N_);}
   function th(_I_, _J_, _K_){return create(cst_th, _I_, _J_, _K_);}
   function thead(_F_, _G_, _H_){return create(cst_thead, _F_, _G_, _H_);}
   function tr(_C_, _D_, _E_){return create(cst_tr, _C_, _D_, _E_);}
   function ul(_z_, _A_, _B_){return create(cst_ul, _z_, _A_, _B_);}
   function ol(_w_, _x_, _y_){return create(cst_ol, _w_, _x_, _y_);}
   function br(_t_, _u_, _v_){return create_childless(cst_br, _t_, _u_, _v_);}
   function hr(_q_, _r_, _s_){return create_childless(cst_hr, _q_, _r_, _s_);}
   function dl(_n_, _o_, _p_){return create(cst_dl, _n_, _o_, _p_);}
   function dt(_k_, _l_, _m_){return create(cst_dt, _k_, _l_, _m_);}
   function dd(_h_, _i_, _j_){return create(cst_dd, _h_, _i_, _j_);}
   function sexp_for_debugging(indent, sexp){
    var s = caml_call2(Base[85][13], indent, sexp);
    return create(cst_pre, 0, _e_, caml_call1(Base_List[51], [0, s]));
   }
   function create$1(previous, current){
    var _f_ = t_to_js(current), _g_ = t_to_js(previous);
    return caml_call2(Virtual_dom_Raw[3][1], _g_, _f_);
   }
   function apply(t, elt){return caml_call2(Virtual_dom_Raw[3][2], elt, t);}
   function is_empty(t){return caml_call1(Virtual_dom_Raw[3][3], t);}
   var Patch = [0, create$1, apply, is_empty];
   function create$2(key, tag, attrs, children){
    return [1, element_expert(-847254184, tag, key, attrs, children)];
   }
   function create_svg$0(key, tag, attrs, children){
    return [1, element_expert(4153924, tag, key, attrs, children)];
   }
   var Expert = [0, create$2, create_svg$0];
   caml_call1(Ppx_inline_test_lib[6], cst_virtual_dom);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Node);
   var
    Virtual_dom_Node =
      [0,
       [0,
        tag,
        attrs,
        key,
        with_key,
        map_attrs,
        add_style,
        add_class,
        add_classes],
       [0],
       Aliases,
       0,
       text,
       textf,
       a,
       abbr,
       body,
       button,
       code,
       datalist,
       details,
       div,
       main,
       footer,
       fieldset,
       legend,
       h1,
       h2,
       h3,
       h4,
       h5,
       h6,
       header,
       html,
       input,
       img,
       textarea,
       select,
       optgroup,
       option,
       label,
       li,
       p,
       pre,
       section,
       span,
       strong,
       em,
       blockquote,
       summary,
       iframe,
       table,
       tbody,
       td,
       th,
       thead,
       tr,
       ul,
       ol,
       br,
       hr,
       dl,
       dt,
       dd,
       sexp_for_debugging,
       lazy,
       inner_html,
       inner_html_svg,
       input_deprecated,
       create,
       create_svg,
       to_dom,
       t_to_js,
       widget,
       widget_of_module,
       Patch,
       Expert];
   runtime.caml_register_global(86, Virtual_dom_Node, cst_Virtual_dom_Node);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Vdom
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Virtual_dom__Attr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Vdom = "Virtual_dom__Vdom",
    cst_virtual_dom = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Virtual_dom_Attr = global_data.Virtual_dom__Attr;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Vdom);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[6][1], "src/vdom.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_virtual_dom, "vdom.ml");
   var
    create = Virtual_dom_Attr[1],
    create_float = Virtual_dom_Attr[2],
    string_property = Virtual_dom_Attr[3],
    bool_property = Virtual_dom_Attr[4],
    property = Virtual_dom_Attr[5],
    suppress_merge_warnings = Virtual_dom_Attr[6],
    create_hook = Virtual_dom_Attr[7],
    many = Virtual_dom_Attr[8],
    many_without_merge = Virtual_dom_Attr[9],
    empty = Virtual_dom_Attr[10],
    symbol = Virtual_dom_Attr[11],
    combine = Virtual_dom_Attr[12],
    autofocus = Virtual_dom_Attr[13],
    checked = Virtual_dom_Attr[14],
    class$0 = Virtual_dom_Attr[15],
    classes = Virtual_dom_Attr[16],
    classes$0 = Virtual_dom_Attr[17],
    disabled = Virtual_dom_Attr[18],
    for$0 = Virtual_dom_Attr[19],
    label = Virtual_dom_Attr[20],
    href = Virtual_dom_Attr[21],
    target = Virtual_dom_Attr[22],
    id = Virtual_dom_Attr[23],
    name = Virtual_dom_Attr[24],
    placeholder = Virtual_dom_Attr[25],
    selected = Virtual_dom_Attr[26],
    hidden = Virtual_dom_Attr[27],
    readonly = Virtual_dom_Attr[28],
    style = Virtual_dom_Attr[29],
    min = Virtual_dom_Attr[30],
    max = Virtual_dom_Attr[31],
    min_date = Virtual_dom_Attr[32],
    max_date = Virtual_dom_Attr[33],
    min_date_time = Virtual_dom_Attr[34],
    max_date_time = Virtual_dom_Attr[35],
    colspan = Virtual_dom_Attr[36],
    rowspan = Virtual_dom_Attr[37],
    draggable = Virtual_dom_Attr[38],
    tabindex = Virtual_dom_Attr[39],
    type = Virtual_dom_Attr[40],
    value = Virtual_dom_Attr[41],
    value_prop = Virtual_dom_Attr[42],
    title = Virtual_dom_Attr[43],
    alt = Virtual_dom_Attr[44],
    src = Virtual_dom_Attr[45],
    open = Virtual_dom_Attr[46],
    start = Virtual_dom_Attr[47],
    on_focus = Virtual_dom_Attr[48],
    on_blur = Virtual_dom_Attr[49],
    Unmerged_warning_mode = Virtual_dom_Attr[50],
    to_raw = Virtual_dom_Attr[51],
    on_input = Virtual_dom_Attr[52],
    on_change = Virtual_dom_Attr[53],
    on_file_input = Virtual_dom_Attr[54],
    on_click = Virtual_dom_Attr[55],
    on_contextmenu = Virtual_dom_Attr[56],
    on_double_click = Virtual_dom_Attr[57],
    on_drag = Virtual_dom_Attr[58],
    on_dragstart = Virtual_dom_Attr[59],
    on_dragend = Virtual_dom_Attr[60],
    on_dragenter = Virtual_dom_Attr[61],
    on_dragleave = Virtual_dom_Attr[62],
    on_dragover = Virtual_dom_Attr[63],
    on_drop = Virtual_dom_Attr[64],
    on_mousemove = Virtual_dom_Attr[65],
    on_mouseup = Virtual_dom_Attr[66],
    on_mousedown = Virtual_dom_Attr[67],
    on_mouseenter = Virtual_dom_Attr[68],
    on_mouseleave = Virtual_dom_Attr[69],
    on_mouseover = Virtual_dom_Attr[70],
    on_mouseout = Virtual_dom_Attr[71],
    on_keyup = Virtual_dom_Attr[72],
    on_keypress = Virtual_dom_Attr[73],
    on_keydown = Virtual_dom_Attr[74],
    on_scroll = Virtual_dom_Attr[75],
    on_load = Virtual_dom_Attr[76],
    on_submit = Virtual_dom_Attr[77],
    on_pointerdown = Virtual_dom_Attr[78],
    on_pointerup = Virtual_dom_Attr[79],
    on_mousewheel = Virtual_dom_Attr[80],
    on_wheel = Virtual_dom_Attr[81],
    on_copy = Virtual_dom_Attr[82],
    on_cut = Virtual_dom_Attr[83],
    on_paste = Virtual_dom_Attr[84],
    on_reset = Virtual_dom_Attr[85],
    on_animationend = Virtual_dom_Attr[86],
    css_var = Virtual_dom_Attr[87],
    css_vars_no_kebabs = Virtual_dom_Attr[88],
    Multi = Virtual_dom_Attr[89],
    Always_focus_hook = Virtual_dom_Attr[90],
    Single_focus_hook = Virtual_dom_Attr[91],
    No_op_hook = Virtual_dom_Attr[92],
    Expert = Virtual_dom_Attr[93],
    Attr =
      [0,
       create,
       create_float,
       string_property,
       bool_property,
       property,
       suppress_merge_warnings,
       create_hook,
       many,
       many_without_merge,
       empty,
       symbol,
       combine,
       autofocus,
       checked,
       class$0,
       classes,
       classes$0,
       disabled,
       for$0,
       label,
       href,
       target,
       id,
       name,
       placeholder,
       selected,
       hidden,
       readonly,
       style,
       min,
       max,
       min_date,
       max_date,
       min_date_time,
       max_date_time,
       colspan,
       rowspan,
       draggable,
       tabindex,
       type,
       value,
       value_prop,
       title,
       alt,
       src,
       open,
       start,
       on_focus,
       on_blur,
       Unmerged_warning_mode,
       to_raw,
       on_input,
       on_change,
       on_file_input,
       on_click,
       on_contextmenu,
       on_double_click,
       on_drag,
       on_dragstart,
       on_dragend,
       on_dragenter,
       on_dragleave,
       on_dragover,
       on_drop,
       on_mousemove,
       on_mouseup,
       on_mousedown,
       on_mouseenter,
       on_mouseleave,
       on_mouseover,
       on_mouseout,
       on_keyup,
       on_keypress,
       on_keydown,
       on_scroll,
       on_load,
       on_submit,
       on_pointerdown,
       on_pointerup,
       on_mousewheel,
       on_wheel,
       on_copy,
       on_cut,
       on_paste,
       on_reset,
       on_animationend,
       css_var,
       css_vars_no_kebabs,
       Multi,
       Always_focus_hook,
       Single_focus_hook,
       No_op_hook,
       Expert];
   caml_call1(Ppx_inline_test_lib[6], cst_virtual_dom);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Vdom);
   var Virtual_dom_Vdom = [0, Attr];
   runtime.caml_register_global(12, Virtual_dom_Vdom, cst_Virtual_dom_Vdom);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom
//# unitInfo: Requires: Css_gen, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Virtual_dom__Dom_float
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom = "Virtual_dom",
    cst_virtual_dom = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Virtual_dom_Dom_float = global_data.Virtual_dom__Dom_float,
    Css_gen = global_data.Css_gen;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[6][1], "src/virtual_dom.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_virtual_dom, "virtual_dom.ml");
   Css_gen[97][1][1] = Virtual_dom_Dom_float[6];
   var Top_level_effects = [0];
   caml_call1(Ppx_inline_test_lib[6], cst_virtual_dom);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom);
   var Virtual_dom = [0, Top_level_effects];
   runtime.caml_register_global(13, Virtual_dom, cst_Virtual_dom);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
