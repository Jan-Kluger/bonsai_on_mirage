// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Persistent_connection_kernel__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Persistent_connection_kernel = [0];
   runtime.caml_register_global
    (0, Persistent_connection_kernel, "Persistent_connection_kernel__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Persistent_connection_kernel__Persistent_connection_kernel_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Persistent_connection_kern =
      "Persistent_connection_kernel__Persistent_connection_kernel_intf",
    cst_persistent_connection_kern = "persistent_connection_kernel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Persistent_connection_kern);
   caml_call1
    (Ppx_bench_lib_Benchmark_accumu[1][1], cst_persistent_connection_kern);
   caml_call1
    (Expect_test_collector[6][1],
     "persistent_connection_kernel/src/persistent_connection_kernel_intf.ml");
   caml_call2
    (Ppx_inline_test_lib[5],
     cst_persistent_connection_kern,
     "persistent_connection_kernel_intf.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_persistent_connection_kern);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Persistent_connection_kern);
   var Persistent_connection_kernel_P = [0];
   runtime.caml_register_global
    (11, Persistent_connection_kernel_P, cst_Persistent_connection_kern);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Persistent_connection_kernel
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_kernel__Deferred_or_error, Async_kernel__Ivar, Async_kernel__Monitor, Async_kernel__Time_source, Base__Exn, Base__Field, Base__Random, Bus, Core, Core__Error, Core__Fn, Core__Option, Core__Or_error, Core__Sexp, Core__Time_ns, Expect_test_collector, Persistent_connection_kernel__Persistent_connection_kernel_intf, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Persistent_connection_kern = "Persistent_connection_kernel",
    cst_persistent_connection_kern$0 = "persistent_connection_kernel",
    cst_persistent_connection_kern =
      "persistent_connection_kernel/src/persistent_connection_kernel.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    _a_ = [0, "<Conn.t>"],
    dummy_src_pos_that_shows_up_in =
      [0, cst_persistent_connection_kern, 8, 272, 315],
    Bus = global_data.Bus,
    Async_kernel_Ivar = global_data.Async_kernel__Ivar,
    Async_kernel = global_data.Async_kernel,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel_Time_source = global_data.Async_kernel__Time_source,
    Core_Time_ns = global_data.Core__Time_ns,
    Base_Random = global_data.Base__Random,
    Core = global_data.Core,
    Core_Fn = global_data.Core__Fn,
    Core_Option = global_data.Core__Option,
    Async_kernel_Deferred_or_error =
      global_data.Async_kernel__Deferred_or_error,
    Core_Error = global_data.Core__Error,
    Async_kernel_Monitor = global_data.Async_kernel__Monitor,
    Base_Exn = global_data.Base__Exn,
    Core_Sexp = global_data.Core__Sexp,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Or_error = global_data.Core__Or_error;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Persistent_connection_kern);
   caml_call1
    (Ppx_bench_lib_Benchmark_accumu[1][1], cst_persistent_connection_kern$0);
   caml_call1(Expect_test_collector[6][1], cst_persistent_connection_kern);
   caml_call2
    (Ppx_inline_test_lib[5],
     cst_persistent_connection_kern$0,
     "persistent_connection_kernel.ml");
   caml_call1(Ppx_inline_test_lib[6], cst_persistent_connection_kern$0);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Persistent_connection_kern);
   var
    _b_ = [0, "Attempting_to_connect"],
    _c_ = [0, "Disconnected"],
    _d_ = [0, "Obtained_address"],
    _e_ = [0, "Failed_to_connect"],
    _f_ = [0, "Connected"],
    _g_ = [0, "on_event"],
    _h_ = [0, "server_name"],
    _i_ = [0, "sexp_of_address"],
    _j_ = [0, "address_equal"],
    _k_ = [0, "don't_reconnect"],
    _l_ = [0, "close_finished"],
    _m_ = [0, "close_started"],
    _n_ = [0, "event_bus"],
    _o_ = [0, "event_handler"],
    _p_ = [0, "next_connect_result"],
    _q_ = [0, "Close_started"],
    _r_ = [0, "Ok"],
    _s_ = [0, "conn"],
    _t_ = [0, "retry_delay"],
    _u_ = [0, "connect"],
    _v_ = [0, "get_address"],
    _w_ = [0, 0],
    _x_ = [0, -289386606, 0],
    _y_ = [0, -289386606, 0],
    _z_ = [0, -289386606, 0],
    _A_ = [0, -289386606, 0],
    _B_ = [0, 990972795, 0],
    _C_ = [0, cst_persistent_connection_kern, 196, 7038, 7119],
    cst_Persistent_connection_clos = "Persistent connection closed",
    Persistent_connection_kernel =
      [0,
       function(Conn){
        var close = Conn[1], is_closed = Conn[2], close_finished = Conn[3];
        function sexp_of_t(param){return _a_;}
        function sexp_of_t$0(of_address_001, param){
         if(typeof param === "number") return 0 === param ? _b_ : _c_;
         switch(param[0]){
           case 0:
            var
             arg0_002 = param[1],
             res0_003 = caml_call1(of_address_001, arg0_002);
            return [1, [0, _d_, [0, res0_003, 0]]];
           case 1:
            var
             arg0_004 = param[1],
             res0_005 = caml_call1(Core_Error[6], arg0_004);
            return [1, [0, _e_, [0, res0_005, 0]]];
           default:
            var
             arg0_006 = param[1],
             res0_007 = caml_call1(Sexplib0_Sexp_conv[23], arg0_006);
            return [1, [0, _f_, [0, res0_007, 0]]];
         }
        }
        function log_level(param){
         if(typeof param !== "number" && 1 === param[0]) return 106380200;
         return 815031438;
        }
        function handle_event(t, event){
         if(typeof event === "number")
          var _aF_ = 0 === event ? 0 : 1;
         else
          switch(event[0]){
            case 0:
             var _aF_ = _w_; break;
            case 1:
             var e = event[1], _aF_ = [1, e]; break;
            default: var conn = event[1], _aF_ = [2, conn];
          }
         caml_call2(Bus[12], t[7], _aF_);
         var on_event = t[6][2];
         return caml_call1(on_event, event);
        }
        function abort_reconnecting_with_no_act(t){
         caml_call2(Async_kernel_Ivar[14], t[8], 0);
         caml_call2(Async_kernel_Ivar[14], t[9], 0);
         return caml_call2(Async_kernel_Ivar[14], t[4], -400989606);
        }
        function current_connection(t){
         var
          _aE_ = caml_call1(Async_kernel_Ivar[18], t[4]),
          match = caml_call1(Async_kernel_Deferred[5], _aE_);
         if(match){
          var match$0 = match[1];
          if(typeof match$0 !== "number"){
           var conn = match$0[2];
           return [0, conn];
          }
         }
         return 0;
        }
        function close_finished$0(t){
         return caml_call1(Async_kernel_Ivar[18], t[9]);
        }
        function is_closed$0(t){
         return caml_call1(Async_kernel_Ivar[17], t[8]);
        }
        var
         _D_ =
           caml_call1(Sexplib0_Sexp_conv[7], cst_Persistent_connection_clos),
         connected_or_failed_to_connect = caml_call1(Core_Or_error[40], _D_);
        function sexp_of_t$1(param){
         var
          conn_023 = param[4],
          next_connect_result_026 = param[5],
          don_t_reconnect_036 = param[10],
          close_finished_034 = param[9],
          close_started_032 = param[8],
          event_bus_030 = param[7],
          event_handler_028 = param[6],
          arg_041 =
            caml_call1(Sexplib0_Sexp_conv[24], function(_aD_){return 0;}),
          bnds_016 = [0, [1, [0, _i_, [0, arg_041, 0]]], 0],
          arg_039 =
            caml_call1(Sexplib0_Sexp_conv[24], function(_aC_){return 0;}),
          bnds_016$0 = [0, [1, [0, _j_, [0, arg_039, 0]]], bnds_016],
          arg_037 =
            caml_call2(Async_kernel_Ivar[9], Core[534], don_t_reconnect_036),
          bnds_016$1 = [0, [1, [0, _k_, [0, arg_037, 0]]], bnds_016$0],
          arg_035 =
            caml_call2(Async_kernel_Ivar[9], Core[534], close_finished_034),
          bnds_016$2 = [0, [1, [0, _l_, [0, arg_035, 0]]], bnds_016$1],
          arg_033 =
            caml_call2(Async_kernel_Ivar[9], Core[534], close_started_032),
          bnds_016$3 = [0, [1, [0, _m_, [0, arg_033, 0]]], bnds_016$2],
          arg_031 =
            caml_call3
             (Bus[2],
              function(param){
               return caml_call1
                       (Sexplib0_Sexp_conv[24], function(_aB_){return 0;});
              },
              Core[207],
              event_bus_030),
          bnds_016$4 = [0, [1, [0, _n_, [0, arg_031, 0]]], bnds_016$3],
          server_name_011 = event_handler_028[1],
          arg_014 =
            caml_call1(Sexplib0_Sexp_conv[24], function(_aA_){return 0;}),
          bnds_010 = [0, [1, [0, _g_, [0, arg_014, 0]]], 0],
          arg_012 = caml_call1(Core[484], server_name_011),
          bnds_010$0 = [0, [1, [0, _h_, [0, arg_012, 0]]], bnds_010],
          arg_029 = [1, bnds_010$0],
          bnds_016$5 = [0, [1, [0, _o_, [0, arg_029, 0]]], bnds_016$4],
          _aw_ = caml_call1(Core_Or_error[13], sexp_of_t),
          arg_027 =
            caml_call2(Async_kernel_Ivar[9], _aw_, next_connect_result_026),
          bnds_016$6 = [0, [1, [0, _p_, [0, arg_027, 0]]], bnds_016$5],
          arg_024 =
            caml_call2
             (Async_kernel_Ivar[9],
              function(param){
               return typeof param === "number"
                       ? _q_
                       : [1, [0, _r_, [0, _a_, 0]]];
              },
              conn_023),
          bnds_016$7 = [0, [1, [0, _s_, [0, arg_024, 0]]], bnds_016$6],
          arg_022 =
            caml_call1(Sexplib0_Sexp_conv[24], function(_az_){return 0;}),
          bnds_016$8 = [0, [1, [0, _t_, [0, arg_022, 0]]], bnds_016$7],
          arg_020 =
            caml_call1(Sexplib0_Sexp_conv[24], function(_ay_){return 0;}),
          bnds_016$9 = [0, [1, [0, _u_, [0, arg_020, 0]]], bnds_016$8],
          arg_018 =
            caml_call1(Sexplib0_Sexp_conv[24], function(_ax_){return 0;}),
          bnds_016$10 = [0, [1, [0, _v_, [0, arg_018, 0]]], bnds_016$9];
         return [1, bnds_016$10];
        }
        function close_when_current_connection_(t){
         return caml_call2(Async_kernel_Ivar[15], t[10], 0);
        }
        function close_finished$1(param){return close_finished$0(param);}
        function is_closed$1(param){return is_closed$0(param);}
        function event_bus(param){return caml_call1(Bus[6], param[7]);}
        function close$0(t){
         if(caml_call1(Async_kernel_Ivar[17], t[8]))
          return close_finished$0(t);
         caml_call2(Async_kernel_Ivar[14], t[8], 0);
         var _at_ = caml_call1(Async_kernel_Ivar[18], t[4]);
         return caml_call2
                 (Async_kernel[20],
                  _at_,
                  function(conn_opt){
                   function _au_(param){
                    return caml_call2(Async_kernel_Ivar[14], t[9], 0);
                   }
                   if(typeof conn_opt === "number")
                    var _av_ = Async_kernel_Deferred[18];
                   else
                    var conn = conn_opt[2], _av_ = caml_call1(close, conn);
                   return caml_call2(Async_kernel[21], _av_, _au_);
                  });
        }
        function server_name(t){return t[6][1];}
        function current_connection$0(param){return current_connection(param);
        }
        function connected_or_failed_to_connect$0(t){
         if(is_closed$0(t))
          return caml_call1(Async_kernel[19], connected_or_failed_to_connect);
         var match = current_connection(t);
         if(match){
          var x = match[1];
          if(! caml_call1(is_closed, x))
           return caml_call1(Async_kernel[19], [0, x]);
         }
         var
          _ao_ = caml_call1(Async_kernel_Ivar[18], t[5]),
          _ap_ =
            [0,
             caml_call2(Async_kernel[4], _ao_, function(_as_){return _as_;}),
             0],
          _aq_ = caml_call1(Async_kernel_Ivar[18], t[8]),
          _ar_ =
            [0,
             caml_call2
              (Async_kernel[4],
               _aq_,
               function(param){return connected_or_failed_to_connect;}),
             _ap_];
         return caml_call1(Async_kernel_Deferred[29], _ar_);
        }
        function connected(t){
         function loop(param){
          var
           d = caml_call1(Async_kernel_Ivar[18], t[4]),
           match = caml_call1(Async_kernel_Deferred[5], d);
          if(! match)
           return caml_call2
                   (Async_kernel[20],
                    d,
                    function(param){
                     if(typeof param === "number")
                      return caml_call1(Async_kernel_Deferred[19], 0);
                     var conn = param[2];
                     return caml_call1(Async_kernel[19], conn);
                    });
          var match$0 = match[1];
          if(typeof match$0 === "number")
           return caml_call1(Async_kernel_Deferred[19], 0);
          var conn = match$0[2];
          if(! caml_call1(is_closed, conn))
           return caml_call1(Async_kernel[19], conn);
          var _an_ = caml_call1(close_finished, conn);
          return caml_call2(Async_kernel[20], _an_, loop);
         }
         return loop(0);
        }
        function create
        (server_name,
         on_event$0,
         retry_delay$0,
         random_state$1,
         time_source$0,
         connect,
         address,
         get_address){
         var
          on_event =
            on_event$0
             ? on_event$0[1]
             : function(param){return Async_kernel_Deferred[18];},
          random_state =
            random_state$1
             ? random_state$1[1]
             : [0, 389604849, Base_Random[18][1]],
          time_source =
            time_source$0
             ? time_source$0[1]
             : caml_call1(Async_kernel_Time_source[10], 0),
          event_handler = [0, server_name, on_event],
          _E_ = Core[542] ? 0.1 : 10.,
          _F_ = caml_call1(Core_Time_ns[1][81], _E_),
          default_retry_delay = caml_call1(Core_Fn[1], _F_),
          non_randomized_delay =
            caml_call2(Core_Option[35], retry_delay$0, default_retry_delay);
         if(typeof random_state === "number")
          var retry_delay_span = non_randomized_delay;
         else
          var
           random_state$0 = random_state[2],
           retry_delay_span =
             function(param){
              var
               span = caml_call1(non_randomized_delay, 0),
               span$0 = caml_call1(Core_Time_ns[1][88], span),
               distance =
                 caml_call2(Base_Random[18][10], random_state$0, span$0 * 0.3),
               wait =
                 caml_call1(Base_Random[18][16], random_state$0)
                  ? span$0 + distance
                  : span$0 - distance;
              return caml_call1(Core_Time_ns[1][81], wait);
             };
         function retry_delay(param){
          var _am_ = caml_call1(retry_delay_span, 0);
          return caml_call2(Async_kernel_Time_source[29], time_source, _am_);
         }
         var
          _G_ = address[2],
          _H_ = address[1],
          _I_ = caml_call1(Async_kernel_Ivar[12], 0),
          _J_ = caml_call1(Async_kernel_Ivar[12], 0),
          _K_ = caml_call1(Async_kernel_Ivar[12], 0);
         function _L_(_al_){return 0;}
         var
          _M_ = 1,
          _N_ = 0,
          _O_ = Core[542] ? dummy_src_pos_that_shows_up_in : _C_,
          _P_ = caml_call5(Bus[7], 0, _O_, _N_, _M_, _L_),
          _Q_ = caml_call1(Async_kernel_Ivar[12], 0),
          t =
            [0,
             get_address,
             connect,
             retry_delay,
             caml_call1(Async_kernel_Ivar[12], 0),
             _Q_,
             event_handler,
             _P_,
             _K_,
             _J_,
             _I_,
             _H_,
             _G_],
          _R_ =
            caml_call2
             (Async_kernel_Deferred[31],
              0,
              function(param){
               var _S_ = handle_event(t, 0);
               return caml_call2
                       (Async_kernel[22][2],
                        _S_,
                        function(param){
                         var previous_address = [0, 0], previous_error = [0, 0];
                         function connect(param){
                          var _ai_ = caml_call1(t[1], 0);
                          return caml_call2
                                  (Async_kernel[20],
                                   _ai_,
                                   function(param){
                                    if(0 !== param[0]){
                                     var e = param[1];
                                     return caml_call1(Async_kernel[19], [1, e]);
                                    }
                                    var addr = param[1], match = previous_address[1];
                                    if(match)
                                     var
                                      previous_address$0 = match[1],
                                      same_as_previous_address =
                                        caml_call2(t[11], addr, previous_address$0);
                                    else
                                     var same_as_previous_address = 0;
                                    previous_address[1] = [0, addr];
                                    function _aj_(param){return caml_call1(t[2], addr);}
                                    var
                                     _ak_ =
                                       same_as_previous_address
                                        ? Async_kernel_Deferred[18]
                                        : handle_event(t, [0, addr]);
                                    return caml_call2(Async_kernel[20], _ak_, _aj_);
                                   });
                         }
                         function loop(param){
                          if(caml_call1(Async_kernel_Ivar[17], t[8])){
                           caml_call2(Async_kernel_Ivar[14], t[4], -400989606);
                           return caml_call1(Async_kernel[19], -400989606);
                          }
                          if(caml_call1(Async_kernel_Ivar[17], t[10]))
                           return caml_call1(Async_kernel[19], -818917400);
                          var
                           ready_to_retry_connecting = caml_call1(t[3], 0),
                           ___ =
                             caml_call6
                              (Async_kernel_Deferred_or_error[39],
                               [0, Core[542]],
                               0,
                               0,
                               0,
                               0,
                               connect);
                          return caml_call2
                                  (Async_kernel[22][2],
                                   ___,
                                   function(connect_result){
                                    caml_call2(Async_kernel_Ivar[14], t[5], connect_result);
                                    t[5] = caml_call1(Async_kernel_Ivar[12], 0);
                                    if(0 === connect_result[0]){
                                     var conn = connect_result[1];
                                     caml_call2(Async_kernel_Ivar[14], t[4], [0, 17724, conn]);
                                     return caml_call1
                                             (Async_kernel[19],
                                              [0, 17724, [0, conn, ready_to_retry_connecting]]);
                                    }
                                    var err = connect_result[1], match = previous_error[1];
                                    if(match)
                                     var
                                      previous_err = match[1],
                                      to_sexp =
                                        function(e){
                                         var
                                          _ag_ = caml_call1(Core_Error[26], e),
                                          _ah_ = caml_call1(Async_kernel_Monitor[13], _ag_);
                                         return caml_call1(Base_Exn[1], _ah_);
                                        },
                                      _$_ = to_sexp(previous_err),
                                      _aa_ = to_sexp(err),
                                      same_as_previous_error =
                                        caml_call2(Core_Sexp[36], _aa_, _$_);
                                    else
                                     var same_as_previous_error = 0;
                                    previous_error[1] = [0, err];
                                    function _ab_(param){
                                     var
                                      _ad_ = [0, caml_call1(Async_kernel_Ivar[18], t[10]), 0],
                                      _ae_ =
                                        [0,
                                         ready_to_retry_connecting,
                                         [0, caml_call1(Async_kernel_Ivar[18], t[8]), _ad_]],
                                      _af_ = caml_call1(Async_kernel_Deferred[23], _ae_);
                                     return caml_call2
                                             (Async_kernel[20], _af_, function(param){return loop(0);});
                                    }
                                    var
                                     _ac_ =
                                       same_as_previous_error
                                        ? Async_kernel_Deferred[18]
                                        : handle_event(t, [1, err]);
                                    return caml_call2(Async_kernel[20], _ac_, _ab_);
                                   });
                         }
                         var _T_ = loop(0);
                         return caml_call2
                                 (Async_kernel[22][2],
                                  _T_,
                                  function(param){
                                   if(typeof param === "number")
                                    return -400989606 <= param
                                            ? caml_call1(Async_kernel[19], _x_)
                                            : (abort_reconnecting_with_no_act
                                               (t),
                                              caml_call1(Async_kernel[19], _y_));
                                   var
                                    match = param[2],
                                    ready_to_retry_connecting = match[2],
                                    conn = match[1],
                                    _U_ = handle_event(t, [2, conn]);
                                   return caml_call2
                                           (Async_kernel[22][2],
                                            _U_,
                                            function(param){
                                             var _V_ = caml_call1(close_finished, conn);
                                             return caml_call2
                                                     (Async_kernel[22][2],
                                                      _V_,
                                                      function(param){
                                                       t[4] = caml_call1(Async_kernel_Ivar[12], 0);
                                                       var _W_ = handle_event(t, 1);
                                                       return caml_call2
                                                               (Async_kernel[22][2],
                                                                _W_,
                                                                function(param){
                                                                 var
                                                                  _X_ = [0, caml_call1(Async_kernel_Ivar[18], t[10]), 0],
                                                                  _Y_ =
                                                                    [0,
                                                                     ready_to_retry_connecting,
                                                                     [0, caml_call1(Async_kernel_Ivar[18], t[8]), _X_]],
                                                                  _Z_ = caml_call1(Async_kernel_Deferred[23], _Y_);
                                                                 return caml_call2
                                                                         (Async_kernel[22][3],
                                                                          _Z_,
                                                                          function(param){
                                                                           return caml_call1(Async_kernel_Ivar[17], t[8])
                                                                                   ? (caml_call2(Async_kernel_Ivar[14], t[4], -400989606), _z_)
                                                                                   : caml_call1
                                                                                      (Async_kernel_Ivar[17], t[10])
                                                                                     ? (abort_reconnecting_with_no_act(t), _A_)
                                                                                     : _B_;
                                                                          });
                                                                });
                                                      });
                                            });
                                  });
                        });
              });
         caml_call1(Async_kernel[6], _R_);
         return t;
        }
        return [0,
                sexp_of_t$1,
                [0, sexp_of_t$0, log_level],
                create,
                connected,
                event_bus,
                connected_or_failed_to_connect$0,
                current_connection$0,
                server_name,
                close$0,
                is_closed$1,
                close_finished$1,
                close_when_current_connection_];
       }];
   runtime.caml_register_global
    (76, Persistent_connection_kernel, cst_Persistent_connection_kern);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
