// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Babel__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Babel = [0];
   runtime.caml_register_global(0, Babel, "Babel__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Babel__Shape
//# unitInfo: Requires: Async_rpc_kernel__Rpc, Bin_prot__Shape, Bin_shape, Core__Comparable, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Streamable__Pipe_rpc, Streamable__Plain_rpc, Streamable__State_rpc
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Babel_Shape = "Babel__Shape",
    cst_babel = "babel",
    cst_error = "error",
    cst_query = "query",
    cst_response = "response",
    cst_state = "state",
    cst_update = "update";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Streamable_State_rpc = global_data.Streamable__State_rpc,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Streamable_Pipe_rpc = global_data.Streamable__Pipe_rpc,
    Streamable_Plain_rpc = global_data.Streamable__Plain_rpc,
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Bin_shape = global_data.Bin_shape,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Comparable = global_data.Core__Comparable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Babel_Shape);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_babel);
   caml_call1(Expect_test_collector[6][1], "src/shape.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_babel, "shape.ml");
   var
    _a_ = [0, cst_response],
    _b_ = [0, cst_query],
    _c_ = [0, "Rpc"],
    _d_ = [0, cst_error],
    _e_ = [0, cst_response],
    _f_ = [0, cst_query],
    _g_ = [0, "Pipe_rpc"],
    _h_ = [0, cst_error],
    _i_ = [0, cst_update],
    _j_ = [0, cst_state],
    _k_ = [0, cst_query],
    _l_ = [0, "State_rpc"],
    _m_ = [0, "msg"],
    _n_ = [0, "One_way"],
    _o_ = [0, cst_response],
    _p_ = [0, cst_query],
    _q_ = [0, "Streamable_plain_rpc"],
    _r_ = [0, cst_response],
    _s_ = [0, cst_query],
    _t_ = [0, "Streamable_pipe_rpc"],
    _u_ = [0, cst_update],
    _v_ = [0, cst_state],
    _w_ = [0, cst_query],
    _x_ = [0, "Streamable_state_rpc"];
   function compare(a_001, b_002){
    if(a_001 === b_002) return 0;
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        switch(a_001[0]){
          case 0:
           if(0 !== b_002[0]) return -1;
           var n = caml_call2(Bin_shape[19][1], a_001[1], b_002[1]);
           return 0 === n
                   ? caml_call2(Bin_shape[19][1], a_001[2], b_002[2])
                   : n;
          case 1:
           switch(b_002[0]){
             case 1:
              var n$0 = caml_call2(Bin_shape[19][1], a_001[1], b_002[1]);
              if(0 !== n$0) return n$0;
              var n$1 = caml_call2(Bin_shape[19][1], a_001[2], b_002[2]);
              return 0 === n$1
                      ? caml_call2(Bin_shape[19][1], a_001[3], b_002[3])
                      : n$1;
             case 0:
              break a;
             default: return -1;
           }
          case 2:
           switch(b_002[0]){
             case 2:
              var n$2 = caml_call2(Bin_shape[19][1], a_001[1], b_002[1]);
              if(0 !== n$2) return n$2;
              var n$3 = caml_call2(Bin_shape[19][1], a_001[2], b_002[2]);
              if(0 !== n$3) return n$3;
              var n$4 = caml_call2(Bin_shape[19][1], a_001[3], b_002[3]);
              return 0 === n$4
                      ? caml_call2(Bin_shape[19][1], a_001[4], b_002[4])
                      : n$4;
             case 0:
              break a;
             case 1:
              break b;
             default: return -1;
           }
          case 3:
           switch(b_002[0]){
             case 3:
              return caml_call2(Bin_shape[19][1], a_001[1], b_002[1]);
             case 0:
              break a;
             case 1:
              break b;
             case 2:
              break c;
             default: return -1;
           }
          case 4:
           switch(b_002[0]){
             case 4:
              var n$5 = caml_call2(Bin_shape[19][1], a_001[1], b_002[1]);
              return 0 === n$5
                      ? caml_call2(Bin_shape[19][1], a_001[2], b_002[2])
                      : n$5;
             case 0:
              break a;
             case 1:
              break b;
             case 2:
              break c;
             case 3:
              break d;
             default: return -1;
           }
          case 5:
           switch(b_002[0]){
             case 5:
              var n$6 = caml_call2(Bin_shape[19][1], a_001[1], b_002[1]);
              return 0 === n$6
                      ? caml_call2(Bin_shape[19][1], a_001[2], b_002[2])
                      : n$6;
             case 6:
              return -1;
             case 0:
              break a;
             case 1:
              break b;
             case 2:
              break c;
             case 3:
              break d;
           }
           break;
          default:
           switch(b_002[0]){
             case 5:
              return 1;
             case 6:
              var n$7 = caml_call2(Bin_shape[19][1], a_001[1], b_002[1]);
              if(0 !== n$7) return n$7;
              var n$8 = caml_call2(Bin_shape[19][1], a_001[2], b_002[2]);
              return 0 === n$8
                      ? caml_call2(Bin_shape[19][1], a_001[3], b_002[3])
                      : n$8;
             case 0:
              break a;
             case 1:
              break b;
             case 2:
              break c;
             case 3:
              break d;
           }
        }
        return 1;
       }
       return 1;
      }
      return 1;
     }
     return 1;
    }
    return 1;
   }
   function sexp_of_t(param){
    switch(param[0]){
      case 0:
       var
        response_020 = param[2],
        query_018 = param[1],
        arg_021 = caml_call1(Bin_shape[19][3], response_020),
        bnds_017 = [0, [1, [0, _a_, [0, arg_021, 0]]], 0],
        arg_019 = caml_call1(Bin_shape[19][3], query_018),
        bnds_017$0 = [0, [1, [0, _b_, [0, arg_019, 0]]], bnds_017];
       return [1, [0, _c_, bnds_017$0]];
      case 1:
       var
        error_027 = param[3],
        response_025 = param[2],
        query_023 = param[1],
        arg_028 = caml_call1(Bin_shape[19][3], error_027),
        bnds_022 = [0, [1, [0, _d_, [0, arg_028, 0]]], 0],
        arg_026 = caml_call1(Bin_shape[19][3], response_025),
        bnds_022$0 = [0, [1, [0, _e_, [0, arg_026, 0]]], bnds_022],
        arg_024 = caml_call1(Bin_shape[19][3], query_023),
        bnds_022$1 = [0, [1, [0, _f_, [0, arg_024, 0]]], bnds_022$0];
       return [1, [0, _g_, bnds_022$1]];
      case 2:
       var
        error_036 = param[4],
        update_034 = param[3],
        state_032 = param[2],
        query_030 = param[1],
        arg_037 = caml_call1(Bin_shape[19][3], error_036),
        bnds_029 = [0, [1, [0, _h_, [0, arg_037, 0]]], 0],
        arg_035 = caml_call1(Bin_shape[19][3], update_034),
        bnds_029$0 = [0, [1, [0, _i_, [0, arg_035, 0]]], bnds_029],
        arg_033 = caml_call1(Bin_shape[19][3], state_032),
        bnds_029$1 = [0, [1, [0, _j_, [0, arg_033, 0]]], bnds_029$0],
        arg_031 = caml_call1(Bin_shape[19][3], query_030),
        bnds_029$2 = [0, [1, [0, _k_, [0, arg_031, 0]]], bnds_029$1];
       return [1, [0, _l_, bnds_029$2]];
      case 3:
       var
        msg_039 = param[1],
        arg_040 = caml_call1(Bin_shape[19][3], msg_039),
        bnds_038 = [0, [1, [0, _m_, [0, arg_040, 0]]], 0];
       return [1, [0, _n_, bnds_038]];
      case 4:
       var
        response_044 = param[2],
        query_042 = param[1],
        arg_045 = caml_call1(Bin_shape[19][3], response_044),
        bnds_041 = [0, [1, [0, _o_, [0, arg_045, 0]]], 0],
        arg_043 = caml_call1(Bin_shape[19][3], query_042),
        bnds_041$0 = [0, [1, [0, _p_, [0, arg_043, 0]]], bnds_041];
       return [1, [0, _q_, bnds_041$0]];
      case 5:
       var
        response_049 = param[2],
        query_047 = param[1],
        arg_050 = caml_call1(Bin_shape[19][3], response_049),
        bnds_046 = [0, [1, [0, _r_, [0, arg_050, 0]]], 0],
        arg_048 = caml_call1(Bin_shape[19][3], query_047),
        bnds_046$0 = [0, [1, [0, _s_, [0, arg_048, 0]]], bnds_046];
       return [1, [0, _t_, bnds_046$0]];
      default:
       var
        update_056 = param[3],
        state_054 = param[2],
        query_052 = param[1],
        arg_057 = caml_call1(Bin_shape[19][3], update_056),
        bnds_051 = [0, [1, [0, _u_, [0, arg_057, 0]]], 0],
        arg_055 = caml_call1(Bin_shape[19][3], state_054),
        bnds_051$0 = [0, [1, [0, _v_, [0, arg_055, 0]]], bnds_051],
        arg_053 = caml_call1(Bin_shape[19][3], query_052),
        bnds_051$1 = [0, [1, [0, _w_, [0, arg_053, 0]]], bnds_051$0];
       return [1, [0, _x_, bnds_051$1]];
    }
   }
   var
    T = [0, compare, sexp_of_t],
    sexp_of_t$0 = T[2],
    include = caml_call1(Core_Comparable[11], T),
    symbol = include[1],
    symbol$0 = include[2],
    symbol$1 = include[3],
    symbol$2 = include[4],
    symbol$3 = include[5],
    symbol$4 = include[6],
    equal = include[7],
    compare$0 = include[8],
    min = include[9],
    max = include[10],
    ascending = include[11],
    descending = include[12],
    between = include[13],
    clamp_exn = include[14],
    clamp = include[15],
    comparator = include[16],
    validate_lbound = include[17],
    validate_ubound = include[18],
    validate_bound = include[19],
    Replace_polymorphic_compare = include[20],
    Map = include[21],
    Set = include[22];
   function rpc(rpc){
    var
     _W_ = caml_call1(Async_rpc_kernel_Rpc[6][8], rpc)[1],
     _X_ = caml_call1(Bin_prot_Shape[15], _W_),
     _Y_ = caml_call1(Async_rpc_kernel_Rpc[6][7], rpc)[1];
    return [0, caml_call1(Bin_prot_Shape[15], _Y_), _X_];
   }
   function pipe_rpc(rpc){
    var
     _R_ = caml_call1(Async_rpc_kernel_Rpc[8][6], rpc)[1],
     _S_ = caml_call1(Bin_prot_Shape[15], _R_),
     _T_ = caml_call1(Async_rpc_kernel_Rpc[8][5], rpc)[1],
     _U_ = caml_call1(Bin_prot_Shape[15], _T_),
     _V_ = caml_call1(Async_rpc_kernel_Rpc[8][4], rpc)[1];
    return [1, caml_call1(Bin_prot_Shape[15], _V_), _U_, _S_];
   }
   function state_rpc(rpc){
    var
     _K_ = caml_call1(Async_rpc_kernel_Rpc[9][7], rpc)[1],
     _L_ = caml_call1(Bin_prot_Shape[15], _K_),
     _M_ = caml_call1(Async_rpc_kernel_Rpc[9][6], rpc)[1],
     _N_ = caml_call1(Bin_prot_Shape[15], _M_),
     _O_ = caml_call1(Async_rpc_kernel_Rpc[9][5], rpc)[1],
     _P_ = caml_call1(Bin_prot_Shape[15], _O_),
     _Q_ = caml_call1(Async_rpc_kernel_Rpc[9][4], rpc)[1];
    return [2, caml_call1(Bin_prot_Shape[15], _Q_), _P_, _N_, _L_];
   }
   function one_way(rpc){
    var _J_ = caml_call1(Async_rpc_kernel_Rpc[10][6], rpc)[1];
    return [3, caml_call1(Bin_prot_Shape[15], _J_)];
   }
   function streamable_plain_rpc(rpc){
    var
     _G_ = caml_call1(Streamable_Plain_rpc[5], rpc),
     _H_ = caml_call1(Bin_prot_Shape[15], _G_),
     _I_ = caml_call1(Streamable_Plain_rpc[4], rpc);
    return [4, caml_call1(Bin_prot_Shape[15], _I_), _H_];
   }
   function streamable_pipe_rpc(rpc){
    var
     _D_ = caml_call1(Streamable_Pipe_rpc[5], rpc),
     _E_ = caml_call1(Bin_prot_Shape[15], _D_),
     _F_ = caml_call1(Streamable_Pipe_rpc[4], rpc);
    return [5, caml_call1(Bin_prot_Shape[15], _F_), _E_];
   }
   function streamable_state_rpc(rpc){
    var
     _y_ = caml_call1(Streamable_State_rpc[6], rpc),
     _z_ = caml_call1(Bin_prot_Shape[15], _y_),
     _A_ = caml_call1(Streamable_State_rpc[5], rpc),
     _B_ = caml_call1(Bin_prot_Shape[15], _A_),
     _C_ = caml_call1(Streamable_State_rpc[4], rpc);
    return [6, caml_call1(Bin_prot_Shape[15], _C_), _B_, _z_];
   }
   caml_call1(Ppx_inline_test_lib[6], cst_babel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Babel_Shape);
   var
    Babel_Shape =
      [0,
       sexp_of_t$0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare$0,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       Map,
       Set,
       rpc,
       pipe_rpc,
       state_rpc,
       one_way,
       streamable_plain_rpc,
       streamable_pipe_rpc,
       streamable_state_rpc];
   runtime.caml_register_global(42, Babel_Shape, cst_Babel_Shape);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Babel__Generic_rpc
//# unitInfo: Requires: Async_rpc_kernel__Rpc, Babel__Shape, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Streamable__Pipe_rpc, Streamable__Plain_rpc, Streamable__State_rpc
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Babel_Generic_rpc = "Babel__Generic_rpc",
    cst_babel = "babel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Babel_Shape = global_data.Babel__Shape,
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Streamable_Plain_rpc = global_data.Streamable__Plain_rpc,
    Streamable_Pipe_rpc = global_data.Streamable__Pipe_rpc,
    Streamable_State_rpc = global_data.Streamable__State_rpc,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Babel_Generic_rpc);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_babel);
   caml_call1(Expect_test_collector[6][1], "src/generic_rpc.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_babel, "generic_rpc.ml");
   function description(param){
    switch(param[0]){
      case 0:
       var rpc = param[1]; return caml_call1(Async_rpc_kernel_Rpc[6][4], rpc);
      case 1:
       var pipe = param[1];
       return caml_call1(Async_rpc_kernel_Rpc[8][20], pipe);
      case 2:
       var state = param[1];
       return caml_call1(Async_rpc_kernel_Rpc[9][16], state);
      case 3:
       var one_way = param[1];
       return caml_call1(Async_rpc_kernel_Rpc[10][4], one_way);
      case 4:
       var streamable_plain = param[1];
       return caml_call1(Streamable_Plain_rpc[1], streamable_plain);
      case 5:
       var streamable_pipe = param[1];
       return caml_call1(Streamable_Pipe_rpc[1], streamable_pipe);
      default:
       var streamable_state = param[1];
       return caml_call1(Streamable_State_rpc[1], streamable_state);
    }
   }
   function shape(param){
    switch(param[0]){
      case 0:
       var rpc = param[1]; return caml_call1(Babel_Shape[24], rpc);
      case 1:
       var pipe = param[1]; return caml_call1(Babel_Shape[25], pipe);
      case 2:
       var state = param[1]; return caml_call1(Babel_Shape[26], state);
      case 3:
       var one_way = param[1]; return caml_call1(Babel_Shape[27], one_way);
      case 4:
       var streamable_plain = param[1];
       return caml_call1(Babel_Shape[28], streamable_plain);
      case 5:
       var streamable_pipe = param[1];
       return caml_call1(Babel_Shape[29], streamable_pipe);
      default:
       var streamable_state = param[1];
       return caml_call1(Babel_Shape[30], streamable_state);
    }
   }
   caml_call1(Ppx_inline_test_lib[6], cst_babel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Babel_Generic_rpc);
   var Babel_Generic_rpc = [0, description, shape];
   runtime.caml_register_global(16, Babel_Generic_rpc, cst_Babel_Generic_rpc);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Babel__Direct_stream_writer
//# unitInfo: Requires: Async_kernel, Async_kernel__Deferred, Async_rpc_kernel__Rpc, Core, Core__Bag, Core__Fn, Core__Int, Core__List, Core__Option, Core__Type_equal, Core__Unique_id, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Babel_Direct_stream_writer$0 = "Babel__Direct_stream_writer",
    cst_babel = "babel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Core_Int = global_data.Core__Int,
    Core_Bag = global_data.Core__Bag,
    Core_Fn = global_data.Core__Fn,
    Core_List = global_data.Core__List,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Async_kernel = global_data.Async_kernel,
    Core_Type_equal = global_data.Core__Type_equal,
    Core = global_data.Core,
    Core_Option = global_data.Core__Option,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Unique_id = global_data.Core__Unique_id;
   caml_call1(Ppx_module_timer_runtime[4], cst_Babel_Direct_stream_writer$0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_babel);
   caml_call1(Expect_test_collector[6][1], "src/direct_stream_writer.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_babel, "direct_stream_writer.ml");
   var
    Transformation_id = caml_call1(Core_Unique_id[2], 0),
    _a_ = [0, "_"],
    cst_Babel_Direct_stream_writer =
      "[Babel.Direct_stream_writer] unique type witness";
   function create_witnessed(writer, witness){
    return [0, writer, Core_Option[54], witness, 0];
   }
   function create(writer){
    return create_witnessed
            (writer,
             caml_call2
              (Core_Type_equal[8][3],
               cst_Babel_Direct_stream_writer,
               function(param){return _a_;}));
   }
   function map_input_with_id(param, f, id){
    var
     transformation_ids = param[4],
     output_witness = param[3],
     transform = param[2],
     writer = param[1];
    return [0,
            writer,
            function(a){return caml_call1(transform, caml_call1(f, a));},
            output_witness,
            [0, id, transformation_ids]];
   }
   function filter_map_input_with_id(param, f, id){
    var
     transformation_ids = param[4],
     output_witness = param[3],
     transform = param[2],
     writer = param[1];
    return [0,
            writer,
            function(a){
             var _k_ = caml_call1(f, a);
             return caml_call2(Core_Option[28], _k_, transform);
            },
            output_witness,
            [0, id, transformation_ids]];
   }
   function map_input(t, f){
    return map_input_with_id(t, f, caml_call1(Transformation_id[45], 0));
   }
   function filter_map_input(t, f){
    return filter_map_input_with_id
            (t, f, caml_call1(Transformation_id[45], 0));
   }
   function close(param){
    var writer = param[1];
    return caml_call1(Async_rpc_kernel_Rpc[8][8][3], writer);
   }
   function closed(param){
    var writer = param[1];
    return caml_call1(Async_rpc_kernel_Rpc[8][8][4], writer);
   }
   function flushed(param){
    var writer = param[1];
    return caml_call1(Async_rpc_kernel_Rpc[8][8][5], writer);
   }
   function is_closed(param){
    var writer = param[1];
    return caml_call1(Async_rpc_kernel_Rpc[8][8][6], writer);
   }
   function write(t, a$0){
    if(is_closed(t)) return -1025106484;
    var transform = t[2], writer = t[1], match = caml_call1(transform, a$0);
    if(! match) return [0, 933108739, Async_kernel_Deferred[18]];
    var a = match[1];
    return caml_call2(Async_rpc_kernel_Rpc[8][8][1], writer, a);
   }
   function write_without_pushback(t, a$0){
    if(is_closed(t)) return -1025106484;
    var transform = t[2], writer = t[1], match = caml_call1(transform, a$0);
    if(! match) return 17724;
    var a = match[1];
    return caml_call2(Async_rpc_kernel_Rpc[8][8][2], writer, a);
   }
   function compatible(_i_, param){
    var
     writer_transformation_ids = param[4],
     writer_output_witness = param[3],
     transformation_ids = _i_[4],
     output_witness = _i_[3],
     _j_ =
       caml_call2
        (Core_Type_equal[8][8], output_witness, writer_output_witness);
    return _j_
            ? 0
              ===
               caml_call3
                (Core[427],
                 function(a_005, b_006){
                  return caml_call2(Transformation_id[20], a_005, b_006);
                 },
                 transformation_ids,
                 writer_transformation_ids)
              ? 1
              : 0
            : _j_;
   }
   function write_without_pushback$0(param, a){
    var
     transform = param[2],
     group = param[1],
     match = caml_call1(transform, a);
    if(! match) return 0;
    var a$0 = match[1];
    return caml_call2(Async_rpc_kernel_Rpc[8][8][8][8], group, a$0);
   }
   function write$0(param, a){
    var
     transform = param[2],
     group = param[1],
     match = caml_call1(transform, a);
    if(! match) return caml_call1(Async_kernel[19], 0);
    var a$0 = match[1];
    return caml_call2(Async_rpc_kernel_Rpc[8][8][8][7], group, a$0);
   }
   function create$0(param){return caml_call1(Core_Bag[22], 0);}
   function add_exn(t, writer$1){
    var
     _h_ = caml_call2(Core_Fn[6], compatible, writer$1),
     match = caml_call2(Core_Bag[15], t, _h_);
    if(match){
     var
      subgroup$0 = match[1],
      writer_output_witness = writer$1[3],
      writer$0 = writer$1[1],
      output_witness$0 = subgroup$0[3],
      group$0 = subgroup$0[1];
     caml_call2
      (Core_Type_equal[8][10], output_witness$0, writer_output_witness);
     return caml_call2(Async_rpc_kernel_Rpc[8][8][8][5], group$0, writer$0);
    }
    var
     transformation_ids = writer$1[4],
     output_witness = writer$1[3],
     transform = writer$1[2],
     writer = writer$1[1],
     group = caml_call2(Async_rpc_kernel_Rpc[8][8][8][2], 0, 0);
    caml_call2(Async_rpc_kernel_Rpc[8][8][8][5], group, writer);
    var subgroup = [0, group, transform, output_witness, transformation_ids];
    return caml_call2(Core_Bag[24], t, subgroup);
   }
   function write_without_pushback$1(t, a){
    var _g_ = caml_call2(Core_Fn[6], write_without_pushback$0, a);
    return caml_call2(Core_Bag[7], t, _g_);
   }
   function write$1(t, a){
    var
     _d_ = caml_call2(Core_Fn[6], write$0, a),
     _e_ = caml_call1(Core_Bag[17], t),
     _f_ = caml_call2(Core_List[50], _e_, _d_);
    return caml_call1(Async_kernel_Deferred[22], _f_);
   }
   function length(t){
    return caml_call3
            (Core_Bag[14],
             [0, Core_Int[57], function(_c_, _b_){return _c_ + _b_ | 0;}],
             t,
             function(param){
              var group = param[1];
              return caml_call1(Async_rpc_kernel_Rpc[8][8][8][10], group);
             });
   }
   var num_subgroups = Core_Bag[5], For_testing = [0, num_subgroups];
   caml_call1(Ppx_inline_test_lib[6], cst_babel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Babel_Direct_stream_writer$0);
   var
    Babel_Direct_stream_writer =
      [0,
       create,
       map_input,
       filter_map_input,
       write,
       write_without_pushback,
       close,
       closed,
       flushed,
       is_closed,
       [0,
        Transformation_id,
        create_witnessed,
        map_input_with_id,
        filter_map_input_with_id],
       [0,
        create$0,
        add_exn,
        write$1,
        write_without_pushback$1,
        length,
        For_testing]];
   runtime.caml_register_global
    (24, Babel_Direct_stream_writer, cst_Babel_Direct_stream_writer$0);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Babel__Babel_fn
//# unitInfo: Requires: Base__Applicative, Core__Fn, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Babel_Babel_fn = "Babel__Babel_fn",
    cst_babel = "babel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Fn = global_data.Core__Fn,
    Base_Applicative = global_data.Base__Applicative;
   caml_call1(Ppx_module_timer_runtime[4], cst_Babel_Babel_fn);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_babel);
   caml_call1(Expect_test_collector[6][1], "src/babel_fn.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_babel, "babel_fn.ml");
   var
    const$0 = Core_Fn[1],
    non = Core_Fn[2],
    forever = Core_Fn[3],
    apply_n_times = Core_Fn[4],
    compose = Core_Fn[5],
    flip = Core_Fn[6];
   function map2(t1, t2, f, a){
    var _a_ = caml_call1(t2, a);
    return caml_call2(f, caml_call1(t1, a), _a_);
   }
   var
    map =
      [0,
       -198771759,
       function(t, f, a){return caml_call1(f, caml_call1(t, a));}],
    include = caml_call1(Base_Applicative[13], [0, const$0, map2, map]),
    return$0 = include[1],
    map$0 = include[2],
    both = include[3],
    symbol = include[4],
    symbol$0 = include[5],
    symbol$1 = include[6],
    symbol_map = include[7],
    apply = include[8],
    map2$0 = include[9],
    map3 = include[10],
    all = include[11],
    all_unit = include[12],
    Applicative_infix = include[13];
   function map_input(t, f, x){return caml_call1(t, caml_call1(f, x));}
   caml_call1(Ppx_inline_test_lib[6], cst_babel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Babel_Babel_fn);
   var
    Babel_Babel_fn =
      [0,
       const$0,
       non,
       forever,
       apply_n_times,
       compose,
       flip,
       return$0,
       map$0,
       both,
       symbol,
       symbol$0,
       symbol$1,
       symbol_map,
       apply,
       map2$0,
       map3,
       all,
       all_unit,
       Applicative_infix,
       map_input];
   runtime.caml_register_global(13, Babel_Babel_fn, cst_Babel_Babel_fn);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Babel__Caller
//# unitInfo: Requires: Async_kernel__Deferred, Async_kernel__Pipe, Async_rpc_kernel__Rpc, Async_rpc_kernel__Versioned_rpc, Babel__Babel_fn, Babel__Generic_rpc, Babel__Shape, Base__Field, Core, Core__List, Core__Or_error, Core__Result, Core__Set, Core__Tuple, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Streamable__Pipe_rpc, Streamable__Plain_rpc, Streamable__State_rpc, Tilde_f
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Babel_Caller = "Babel__Caller",
    cst_babel = "babel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Core_Tuple = global_data.Core__Tuple,
    Core_Or_error = global_data.Core__Or_error,
    Tilde_f = global_data.Tilde_f,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Streamable_State_rpc = global_data.Streamable__State_rpc,
    Streamable_Pipe_rpc = global_data.Streamable__Pipe_rpc,
    Streamable_Plain_rpc = global_data.Streamable__Plain_rpc,
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Core_Result = global_data.Core__Result,
    Async_rpc_kernel_Versioned_rpc =
      global_data.Async_rpc_kernel__Versioned_rpc,
    Core = global_data.Core,
    Babel_Babel_fn = global_data.Babel__Babel_fn,
    Core_List = global_data.Core__List,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Babel_Shape = global_data.Babel__Shape,
    Core_Set = global_data.Core__Set,
    Babel_Generic_rpc = global_data.Babel__Generic_rpc;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Babel_Caller);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_babel);
   caml_call1(Expect_test_collector[6][1], "src/caller.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_babel, "caller.ml");
   var
    _a_ = [0, "caller_rpcs"],
    _b_ = [0, "callee_rpcs"],
    cst_Could_not_find_any_support =
      "Could not find any supported rpc in callee";
   function rpc(r){return r[2];}
   function dispatch(r){return r[1];}
   function description(t){return caml_call1(Babel_Generic_rpc[1], t[2]);}
   function shape(t){
    var _b6_ = caml_call1(Babel_Generic_rpc[2], t[2]);
    return [0, description(t), _b6_];
   }
   function map(t, f){
    return caml_call2
            (Core_List[50],
             t,
             function(s){
              var rpc = s[2], dispatch = s[1];
              function dispatch$0(metadata, conn){
               return caml_call1(f, caml_call2(dispatch, metadata, conn));
              }
              return [0, dispatch$0, rpc];
             });
   }
   function shapes(t){return caml_call2(Core_List[50], t, shape);}
   function supported_rpcs(t){return caml_call2(Core_List[50], t, rpc);}
   function descriptions(t){
    var _b4_ = shapes(t);
    return caml_call2(Core_List[50], _b4_, function(_b5_){return _b5_[1];});
   }
   function print_shapes(t){
    var
     x_005 = shapes(t),
     _b3_ =
       caml_call2
        (Core[431],
         function(param){
          var
           arg1_002 = param[2],
           arg0_001 = param[1],
           res0_003 = caml_call1(Async_rpc_kernel_Rpc[1][1], arg0_001),
           res1_004 = caml_call1(Babel_Shape[1], arg1_002);
          return [1, [0, res0_003, [0, res1_004, 0]]];
         },
         x_005);
    return caml_call2(Core[250], 0, _b3_);
   }
   function find_strategy(t, menu){
    var
     match =
       caml_call2
        (Core_List[27],
         t,
         function(strategy){
          var
           match = description(strategy),
           version = match[2],
           name = match[1],
           _b2_ = caml_call2(Async_rpc_kernel_Versioned_rpc[1][7], menu, name);
          return caml_call3(Babel_Babel_fn[6], Core_Set[11], version, _b2_);
         });
    if(match){var strategy = match[1]; return [0, strategy];}
    var
     callee_rpcs = caml_call1(Async_rpc_kernel_Versioned_rpc[1][6], menu),
     caller_rpcs = descriptions(t),
     _bZ_ =
       [0,
        [1,
         [0,
          _a_,
          [0,
           caml_call2(Core[431], Async_rpc_kernel_Rpc[1][1], caller_rpcs),
           0]]],
        0],
     _b0_ =
       [0,
        [1,
         [0,
          _b_,
          [0,
           caml_call2(Core[431], Async_rpc_kernel_Rpc[1][1], callee_rpcs),
           0]]],
        _bZ_],
     _b1_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Could_not_find_any_support),
         _b0_]];
    return caml_call1(Core_Or_error[40], _b1_);
   }
   function to_dispatch_fun(t, menu){
    var _bY_ = find_strategy(t, menu);
    return caml_call2(Core_Or_error[48], _bY_, dispatch);
   }
   function description$0(t, menu){
    var _bX_ = find_strategy(t, menu);
    return caml_call2(Core_Or_error[48], _bX_, description);
   }
   var of_list_decreasing_preference = Core_List[10];
   function map_query(t){
    return caml_call2
            (Tilde_f[3][2],
             function(_bW_){return map(t, _bW_);},
             Babel_Babel_fn[20]);
   }
   function map_response(t){
    return caml_call2
            (Tilde_f[3][2],
             function(_bV_){return map(t, _bV_);},
             Babel_Babel_fn[8]);
   }
   function can_dispatch(t, connection_with_menu){
    var
     menu =
       caml_call1(Async_rpc_kernel_Versioned_rpc[2][4], connection_with_menu),
     _bU_ = find_strategy(t, menu);
    return caml_call1(Core_Or_error[31], _bU_);
   }
   function dispatch_multi(metadata, t, connection_with_menu, query, on_error){
    var
     menu =
       caml_call1(Async_rpc_kernel_Versioned_rpc[2][4], connection_with_menu),
     error = to_dispatch_fun(t, menu);
    if(0 !== error[0]) return caml_call1(on_error, error);
    var f = error[1];
    return caml_call3
            (f,
             metadata,
             caml_call1
              (Async_rpc_kernel_Versioned_rpc[2][3], connection_with_menu),
             query);
   }
   function dispatch_multi_or_error_deferr
   (metadata, t, connection_with_menu, query){
    return dispatch_multi
            (metadata,
             t,
             connection_with_menu,
             query,
             Async_kernel_Deferred[12]);
   }
   function dispatch_multi_or_error(metadata, t, connection_with_menu, query){
    return dispatch_multi
            (metadata,
             t,
             connection_with_menu,
             query,
             function(_bT_){return _bT_;});
   }
   function dispatch_multi_exn(metadata, t, connection_with_menu, query){
    return dispatch_multi(metadata, t, connection_with_menu, query, Core[249]);
   }
   function adder(t, rpc, f){
    return caml_call1
            (of_list_decreasing_preference,
             [0, caml_call1(f, rpc), [0, t, 0]]);
   }
   function singleton(rpc){
    return [0,
            [0,
             function(metadata){
              return caml_call2(Async_rpc_kernel_Rpc[6][13], metadata, rpc);
             },
             [0, rpc]],
            0];
   }
   function add(_bR_){
    return function(_bS_){return adder(_bR_, _bS_, singleton);};
   }
   function map_response$0(t){
    var
     _bN_ = caml_call1(Tilde_f[16], Core_Or_error[48]),
     _bO_ = Async_kernel_Deferred[13],
     _bP_ = map_response(t),
     _bQ_ = caml_call2(Tilde_f[3][2], _bP_, _bO_);
    return caml_call2(Tilde_f[3][2], _bQ_, _bN_);
   }
   var
    Rpc =
      [0,
       dispatch_multi_or_error_deferr,
       singleton,
       add,
       map_query,
       map_response$0];
   function singleton$0(rpc){
    return [0,
            [0,
             function(metadata){
              return caml_call2(Async_rpc_kernel_Rpc[6][11], metadata, rpc);
             },
             [0, rpc]],
            0];
   }
   function add$0(_bL_){
    return function(_bM_){return adder(_bL_, _bM_, singleton$0);};
   }
   function map_response$1(t){
    var
     _bH_ = caml_call1(Tilde_f[16], Core_Result[39]),
     _bI_ = Async_kernel_Deferred[13],
     _bJ_ = map_response(t),
     _bK_ = caml_call2(Tilde_f[3][2], _bJ_, _bI_);
    return caml_call2(Tilde_f[3][2], _bK_, _bH_);
   }
   var Rpc$0 = [0, singleton$0, add$0, map_query, map_response$1];
   function singleton$1(rpc){
    return [0,
            [0,
             function(metadata){
              return caml_call2(Async_rpc_kernel_Rpc[6][14], metadata, rpc);
             },
             [0, rpc]],
            0];
   }
   function add$1(_bF_){
    return function(_bG_){return adder(_bF_, _bG_, singleton$1);};
   }
   function map_response$2(t){
    var _bD_ = Async_kernel_Deferred[13], _bE_ = map_response(t);
    return caml_call2(Tilde_f[3][2], _bE_, _bD_);
   }
   var
    Rpc_exn =
      [0, dispatch_multi_exn, singleton$1, add$1, map_query, map_response$2];
   function singleton$2(rpc){
    return [0,
            [0,
             function(metadata){
              return caml_call2(Async_rpc_kernel_Rpc[8][10], metadata, rpc);
             },
             [1, rpc]],
            0];
   }
   function add$2(_bB_){
    return function(_bC_){return adder(_bB_, _bC_, singleton$2);};
   }
   function map_error(t){
    var
     _bv_ = caml_call1(Tilde_f[16], Core_Result[40]),
     _bw_ = caml_call1(Tilde_f[16], Core_Or_error[48]),
     _bx_ = Async_kernel_Deferred[13],
     _by_ = map_response(t),
     _bz_ = caml_call2(Tilde_f[3][2], _by_, _bx_),
     _bA_ = caml_call2(Tilde_f[3][2], _bz_, _bw_);
    return caml_call2(Tilde_f[3][2], _bA_, _bv_);
   }
   function filter_map_response(t){
    var
     _bl_ = caml_call1(Async_kernel_Pipe[61], 0),
     _bm_ = Core_Tuple[1][12],
     _bn_ = caml_call1(Tilde_f[16], Core_Result[39]),
     _bo_ = caml_call1(Tilde_f[16], Core_Or_error[48]),
     _bp_ = Async_kernel_Deferred[13],
     _bq_ = map_response(t),
     _br_ = caml_call2(Tilde_f[3][2], _bq_, _bp_),
     _bs_ = caml_call2(Tilde_f[3][2], _br_, _bo_),
     _bt_ = caml_call2(Tilde_f[3][2], _bs_, _bn_),
     _bu_ = caml_call2(Tilde_f[3][2], _bt_, _bm_);
    return caml_call2(Tilde_f[3][2], _bu_, _bl_);
   }
   function map_response$3(t){
    var
     _bb_ = Async_kernel_Pipe[57],
     _bc_ = Core_Tuple[1][12],
     _bd_ = caml_call1(Tilde_f[16], Core_Result[39]),
     _be_ = caml_call1(Tilde_f[16], Core_Or_error[48]),
     _bf_ = Async_kernel_Deferred[13],
     _bg_ = map_response(t),
     _bh_ = caml_call2(Tilde_f[3][2], _bg_, _bf_),
     _bi_ = caml_call2(Tilde_f[3][2], _bh_, _be_),
     _bj_ = caml_call2(Tilde_f[3][2], _bi_, _bd_),
     _bk_ = caml_call2(Tilde_f[3][2], _bj_, _bc_);
    return caml_call2(Tilde_f[3][2], _bk_, _bb_);
   }
   function singleton$3(rpc){
    return [0,
            [0,
             function(metadata){
              return caml_call2(Async_rpc_kernel_Rpc[8][11], metadata, rpc);
             },
             [1, rpc]],
            0];
   }
   function add$3(_a$_){
    return function(_ba_){return adder(_a$_, _ba_, singleton$3);};
   }
   function filter_map_response$0(t){
    var
     _a5_ = caml_call1(Async_kernel_Pipe[61], 0),
     _a6_ = Core_Tuple[1][12],
     _a7_ = Async_kernel_Deferred[13],
     _a8_ = map_response(t),
     _a9_ = caml_call2(Tilde_f[3][2], _a8_, _a7_),
     _a__ = caml_call2(Tilde_f[3][2], _a9_, _a6_);
    return caml_call2(Tilde_f[3][2], _a__, _a5_);
   }
   function map_response$4(t){
    var
     _aZ_ = Async_kernel_Pipe[57],
     _a0_ = Core_Tuple[1][12],
     _a1_ = Async_kernel_Deferred[13],
     _a2_ = map_response(t),
     _a3_ = caml_call2(Tilde_f[3][2], _a2_, _a1_),
     _a4_ = caml_call2(Tilde_f[3][2], _a3_, _a0_);
    return caml_call2(Tilde_f[3][2], _a4_, _aZ_);
   }
   var Id = [0];
   function map$0(t, f){
    if(0 !== t[0]) return t;
    var a = t[1];
    return [0, caml_call1(f, a)];
   }
   function map$1(t, f, k){return caml_call1(f, caml_call1(t, k));}
   function dispatch_multi$0(t, connection_with_menu, query, f){
    var
     menu =
       caml_call1(Async_rpc_kernel_Versioned_rpc[2][4], connection_with_menu),
     error = to_dispatch_fun(t, menu);
    if(0 !== error[0]) return caml_call1(Async_kernel_Deferred[12], error);
    var dispatch = error[1];
    return caml_call4
            (dispatch,
             0,
             caml_call1
              (Async_rpc_kernel_Versioned_rpc[2][3], connection_with_menu),
             query,
             f);
   }
   function singleton$4(rpc){
    function dispatch(metadata, connection, query, f){
     var
      _aU_ = caml_call1(Tilde_f[16], Core_Result[39]),
      _aV_ = caml_call1(Tilde_f[16], Core_Or_error[48]),
      _aW_ =
        caml_call5
         (Async_rpc_kernel_Rpc[8][14], metadata, rpc, connection, query, f),
      _aX_ = caml_call1(Async_kernel_Deferred[13], _aW_),
      _aY_ = caml_call2(Tilde_f[3][2], _aX_, _aV_);
     return caml_call1
             (caml_call2(Tilde_f[3][2], _aY_, _aU_),
              function(id){return [0, rpc, connection, id];});
    }
    return [0, [0, dispatch, [1, rpc]], 0];
   }
   function add$4(_aS_){
    return function(_aT_){return adder(_aS_, _aT_, singleton$4);};
   }
   function map_error$0(t){
    var
     _aL_ = caml_call1(Tilde_f[16], Core_Result[40]),
     _aM_ = caml_call1(Tilde_f[16], Core_Or_error[48]),
     _aN_ = Async_kernel_Deferred[13],
     _aO_ = map_response(t),
     _aP_ = caml_call2(Tilde_f[3][2], _aO_, map$1),
     _aQ_ = caml_call2(Tilde_f[3][2], _aP_, _aN_),
     _aR_ = caml_call2(Tilde_f[3][2], _aQ_, _aM_);
    return caml_call2(Tilde_f[3][2], _aR_, _aL_);
   }
   function map_response$5(t){
    var
     _aI_ = Tilde_f[7],
     _aJ_ = map_response(t),
     _aK_ = caml_call2(Tilde_f[3][2], _aJ_, _aI_);
    return caml_call2(Tilde_f[3][2], _aK_, map$0);
   }
   function abort(param){
    var id = param[3], connection = param[2], rpc = param[1];
    return caml_call3(Async_rpc_kernel_Rpc[8][15], rpc, connection, id);
   }
   function singleton$5(rpc){
    return [0,
            [0,
             function(metadata){
              return caml_call2(Async_rpc_kernel_Rpc[9][10], metadata, rpc);
             },
             [2, rpc]],
            0];
   }
   function add$5(_aG_){
    return function(_aH_){return adder(_aG_, _aH_, singleton$5);};
   }
   function map_state(t){
    var
     _ay_ = Core_Tuple[2][12],
     _az_ = caml_call1(Tilde_f[16], Core_Result[39]),
     _aA_ = caml_call1(Tilde_f[16], Core_Or_error[48]),
     _aB_ = Async_kernel_Deferred[13],
     _aC_ = map_response(t),
     _aD_ = caml_call2(Tilde_f[3][2], _aC_, _aB_),
     _aE_ = caml_call2(Tilde_f[3][2], _aD_, _aA_),
     _aF_ = caml_call2(Tilde_f[3][2], _aE_, _az_);
    return caml_call2(Tilde_f[3][2], _aF_, _ay_);
   }
   function filter_map_update(t){
    var
     _ao_ = caml_call1(Async_kernel_Pipe[61], 0),
     _ap_ = Core_Tuple[2][13],
     _aq_ = caml_call1(Tilde_f[16], Core_Result[39]),
     _ar_ = caml_call1(Tilde_f[16], Core_Or_error[48]),
     _as_ = Async_kernel_Deferred[13],
     _at_ = map_response(t),
     _au_ = caml_call2(Tilde_f[3][2], _at_, _as_),
     _av_ = caml_call2(Tilde_f[3][2], _au_, _ar_),
     _aw_ = caml_call2(Tilde_f[3][2], _av_, _aq_),
     _ax_ = caml_call2(Tilde_f[3][2], _aw_, _ap_);
    return caml_call2(Tilde_f[3][2], _ax_, _ao_);
   }
   function map_update(t){
    var
     _ae_ = Async_kernel_Pipe[57],
     _af_ = Core_Tuple[2][13],
     _ag_ = caml_call1(Tilde_f[16], Core_Result[39]),
     _ah_ = caml_call1(Tilde_f[16], Core_Or_error[48]),
     _ai_ = Async_kernel_Deferred[13],
     _aj_ = map_response(t),
     _ak_ = caml_call2(Tilde_f[3][2], _aj_, _ai_),
     _al_ = caml_call2(Tilde_f[3][2], _ak_, _ah_),
     _am_ = caml_call2(Tilde_f[3][2], _al_, _ag_),
     _an_ = caml_call2(Tilde_f[3][2], _am_, _af_);
    return caml_call2(Tilde_f[3][2], _an_, _ae_);
   }
   function map_error$1(t){
    var
     ___ = caml_call1(Tilde_f[16], Core_Result[40]),
     _$_ = caml_call1(Tilde_f[16], Core_Or_error[48]),
     _aa_ = Async_kernel_Deferred[13],
     _ab_ = map_response(t),
     _ac_ = caml_call2(Tilde_f[3][2], _ab_, _aa_),
     _ad_ = caml_call2(Tilde_f[3][2], _ac_, _$_);
    return caml_call2(Tilde_f[3][2], _ad_, ___);
   }
   function singleton$6(rpc){
    return [0,
            [0,
             function(metadata){
              return caml_call2(Async_rpc_kernel_Rpc[10][10], metadata, rpc);
             },
             [3, rpc]],
            0];
   }
   function add$6(_Y_){
    return function(_Z_){return adder(_Y_, _Z_, singleton$6);};
   }
   var One_way = [0, dispatch_multi_or_error, singleton$6, add$6, map_query];
   function singleton$7(rpc){
    return [0,
            [0,
             function(metadata){
              return caml_call2(Async_rpc_kernel_Rpc[10][11], metadata, rpc);
             },
             [3, rpc]],
            0];
   }
   function add$7(_W_){
    return function(_X_){return adder(_W_, _X_, singleton$7);};
   }
   var One_way_exn = [0, dispatch_multi_exn, singleton$7, add$7, map_query];
   function singleton$8(rpc){
    return [0,
            [0,
             function(metadata){
              return caml_call2(Async_rpc_kernel_Rpc[10][8], metadata, rpc);
             },
             [3, rpc]],
            0];
   }
   function add$8(_U_){
    return function(_V_){return adder(_U_, _V_, singleton$8);};
   }
   var One_way$0 = [0, singleton$8, add$8, map_query];
   function singleton$9(rpc){
    return [0,
            [0,
             function(metadata){
              return caml_call2(Streamable_Plain_rpc[2], metadata, rpc);
             },
             [4, rpc]],
            0];
   }
   function add$9(_S_){
    return function(_T_){return adder(_S_, _T_, singleton$9);};
   }
   function map_response$6(t){
    var
     _O_ = caml_call1(Tilde_f[16], Core_Or_error[48]),
     _P_ = Async_kernel_Deferred[13],
     _Q_ = map_response(t),
     _R_ = caml_call2(Tilde_f[3][2], _Q_, _P_);
    return caml_call2(Tilde_f[3][2], _R_, _O_);
   }
   var
    Streamable_plain_rpc =
      [0,
       dispatch_multi_or_error_deferr,
       singleton$9,
       add$9,
       map_query,
       map_response$6];
   function singleton$10(rpc){
    return [0,
            [0,
             function(metadata){
              return caml_call2(Streamable_Pipe_rpc[2], metadata, rpc);
             },
             [5, rpc]],
            0];
   }
   function add$10(_M_){
    return function(_N_){return adder(_M_, _N_, singleton$10);};
   }
   function filter_map_response$1(t){
    var
     _G_ = caml_call1(Async_kernel_Pipe[61], 0),
     _H_ = caml_call1(Tilde_f[16], Core_Or_error[48]),
     _I_ = Async_kernel_Deferred[13],
     _J_ = map_response(t),
     _K_ = caml_call2(Tilde_f[3][2], _J_, _I_),
     _L_ = caml_call2(Tilde_f[3][2], _K_, _H_);
    return caml_call2(Tilde_f[3][2], _L_, _G_);
   }
   function map_response$7(t){
    var
     _A_ = Async_kernel_Pipe[57],
     _B_ = caml_call1(Tilde_f[16], Core_Or_error[48]),
     _C_ = Async_kernel_Deferred[13],
     _D_ = map_response(t),
     _E_ = caml_call2(Tilde_f[3][2], _D_, _C_),
     _F_ = caml_call2(Tilde_f[3][2], _E_, _B_);
    return caml_call2(Tilde_f[3][2], _F_, _A_);
   }
   function singleton$11(rpc){
    return [0,
            [0,
             function(metadata){
              return caml_call2(Streamable_State_rpc[2], metadata, rpc);
             },
             [6, rpc]],
            0];
   }
   function add$11(_y_){
    return function(_z_){return adder(_y_, _z_, singleton$11);};
   }
   function map_state$0(t){
    var
     _s_ = Core_Tuple[1][12],
     _t_ = caml_call1(Tilde_f[16], Core_Or_error[48]),
     _u_ = Async_kernel_Deferred[13],
     _v_ = map_response(t),
     _w_ = caml_call2(Tilde_f[3][2], _v_, _u_),
     _x_ = caml_call2(Tilde_f[3][2], _w_, _t_);
    return caml_call2(Tilde_f[3][2], _x_, _s_);
   }
   function filter_map_update$0(t){
    var
     _k_ = caml_call1(Async_kernel_Pipe[61], 0),
     _l_ = Core_Tuple[1][13],
     _m_ = caml_call1(Tilde_f[16], Core_Or_error[48]),
     _n_ = Async_kernel_Deferred[13],
     _o_ = map_response(t),
     _p_ = caml_call2(Tilde_f[3][2], _o_, _n_),
     _q_ = caml_call2(Tilde_f[3][2], _p_, _m_),
     _r_ = caml_call2(Tilde_f[3][2], _q_, _l_);
    return caml_call2(Tilde_f[3][2], _r_, _k_);
   }
   function map_update$0(t){
    var
     _c_ = Async_kernel_Pipe[57],
     _d_ = Core_Tuple[1][13],
     _e_ = caml_call1(Tilde_f[16], Core_Or_error[48]),
     _f_ = Async_kernel_Deferred[13],
     _g_ = map_response(t),
     _h_ = caml_call2(Tilde_f[3][2], _g_, _f_),
     _i_ = caml_call2(Tilde_f[3][2], _h_, _e_),
     _j_ = caml_call2(Tilde_f[3][2], _i_, _d_);
    return caml_call2(Tilde_f[3][2], _j_, _c_);
   }
   caml_call1(Ppx_inline_test_lib[6], cst_babel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Babel_Caller);
   var
    Babel_Caller =
      [0,
       shapes,
       descriptions,
       supported_rpcs,
       print_shapes,
       of_list_decreasing_preference,
       Rpc,
       Rpc_exn,
       Rpc$0,
       [0,
        dispatch_multi_or_error_deferr,
        singleton$2,
        add$2,
        map_query,
        map_response$3,
        filter_map_response,
        map_error],
       [0,
        dispatch_multi_exn,
        singleton$3,
        add$3,
        map_query,
        map_response$4,
        filter_map_response$0],
       [0,
        Id,
        dispatch_multi$0,
        singleton$4,
        add$4,
        map_query,
        map_response$5,
        map_error$0,
        abort],
       [0,
        dispatch_multi_or_error_deferr,
        singleton$5,
        add$5,
        map_query,
        map_state,
        map_update,
        filter_map_update,
        map_error$1],
       One_way,
       One_way_exn,
       One_way$0,
       Streamable_plain_rpc,
       [0,
        dispatch_multi_or_error_deferr,
        singleton$10,
        add$10,
        map_query,
        map_response$7,
        filter_map_response$1],
       [0,
        dispatch_multi_or_error_deferr,
        singleton$11,
        add$11,
        map_query,
        map_state$0,
        map_update$0,
        filter_map_update$0],
       to_dispatch_fun,
       description$0,
       map,
       map_query,
       map_response,
       can_dispatch];
   runtime.caml_register_global(36, Babel_Caller, cst_Babel_Caller);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Babel__Callee
//# unitInfo: Requires: Async_kernel__Deferred, Async_kernel__Pipe, Async_rpc_kernel__Rpc, Babel__Babel_fn, Babel__Direct_stream_writer, Babel__Generic_rpc, Babel__Shape, Base__Or_error, Core, Core__Comparable, Core__Lazy, Core__List, Core__Map, Core__Option, Core__Or_error, Core__Result, Core__Set, Core__Sexp, Core__String, Core__Tuple, Core__Type_equal, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib__String, Streamable__Pipe_rpc, Streamable__Plain_rpc, Streamable__State_rpc, Tilde_f
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Babel_Callee = "Babel__Callee",
    cst_babel = "babel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Async_kernel_Pipe = global_data.Async_kernel__Pipe,
    Core_Tuple = global_data.Core__Tuple,
    Core_Result = global_data.Core__Result,
    Tilde_f = global_data.Tilde_f,
    Async_kernel_Deferred = global_data.Async_kernel__Deferred,
    Streamable_State_rpc = global_data.Streamable__State_rpc,
    Streamable_Pipe_rpc = global_data.Streamable__Pipe_rpc,
    Core_Or_error = global_data.Core__Or_error,
    Streamable_Plain_rpc = global_data.Streamable__Plain_rpc,
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Babel_Direct_stream_writer = global_data.Babel__Direct_stream_writer,
    Babel_Babel_fn = global_data.Babel__Babel_fn,
    Core_Sexp = global_data.Core__Sexp,
    Stdlib_String = global_data.Stdlib__String,
    Core_Type_equal = global_data.Core__Type_equal,
    Core_Set = global_data.Core__Set,
    Core_Lazy = global_data.Core__Lazy,
    Core_Map = global_data.Core__Map,
    Babel_Generic_rpc = global_data.Babel__Generic_rpc,
    Babel_Shape = global_data.Babel__Shape,
    Core_List = global_data.Core__List,
    Core_Option = global_data.Core__Option,
    Core = global_data.Core,
    Core_String = global_data.Core__String,
    Base_Or_error = global_data.Base__Or_error,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib,
    Core_Comparable = global_data.Core__Comparable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Babel_Callee);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_babel);
   caml_call1(Expect_test_collector[6][1], "src/callee.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_babel, "callee.ml");
   var
    _a_ = Async_rpc_kernel_Rpc[1],
    include = caml_call1(Core_Comparable[11], [0, _a_[23], _a_[1]]),
    Map = include[21],
    _b_ = [0, "shapes"],
    _c_ = [0, "description"],
    cst_Duplicate_rpcs = "Duplicate rpcs";
   function map(param, f){
    var rpc = param[2], implement = param[1];
    function implement$0(on_exception, implementation){
     return caml_call2
             (implement,
              on_exception,
              function(s){
               return caml_call1(f, caml_call1(implementation, s));
              });
    }
    return [0, implement$0, rpc];
   }
   function validate(t){
    var
     _bS_ = caml_call2(Core_Map[78], 0, t),
     _bT_ =
       caml_call2
        (Core_List[50],
         _bS_,
         function(param){
          var implementer = param[2], description = param[1];
          if(0 === implementer[0]){
           var implementer$0 = implementer[1];
           return [0, [0, description, implementer$0]];
          }
          var
           shapes = implementer[1],
           _bU_ =
             [0,
              [1,
               [0,
                _b_,
                [0, caml_call2(Core_Lazy[18], Babel_Shape[23][4], shapes), 0]]],
              0],
           _bV_ =
             [0,
              [1,
               [0,
                _c_,
                [0, caml_call1(Async_rpc_kernel_Rpc[1][1], description), 0]]],
              _bU_],
           _bW_ =
             [1,
              [0, caml_call1(Sexplib0_Sexp_conv[7], cst_Duplicate_rpcs), _bV_]];
          return caml_call1(Core_Or_error[40], _bW_);
         });
    return caml_call1(Core_Or_error[51], _bT_);
   }
   function implement_multi(on_exception, t, f){
    var _bR_ = validate(t);
    return caml_call2
            (Base_Or_error[25][4][3],
             _bR_,
             function(validated){
              return caml_call2
                      (Core_List[50],
                       validated,
                       function(param){
                        var implementer = param[2], description = param[1];
                        return caml_call2
                                (implementer[1],
                                 on_exception,
                                 function(s){return caml_call2(f, s, description);});
                       });
             });
   }
   function implement_multi_exn(on_exception, t, f){
    var _bQ_ = implement_multi(on_exception, t, f);
    return caml_call1(Core[249], _bQ_);
   }
   function shapes(t){
    function _bM_(param){
     var implementer = param[2], description = param[1];
     return [0, description, caml_call1(Babel_Generic_rpc[2], implementer[2])];
    }
    var _bN_ = Core_List[50], _bO_ = validate(t);
    return caml_call2
            (Base_Or_error[25][3],
             _bO_,
             function(_bP_){return caml_call2(_bN_, _bP_, _bM_);});
   }
   function supported_rpcs(t){
    function _bI_(param){var implementer = param[2]; return implementer[2];}
    var _bJ_ = Core_List[50], _bK_ = validate(t);
    return caml_call2
            (Core_Or_error[48],
             _bK_,
             function(_bL_){return caml_call2(_bJ_, _bL_, _bI_);});
   }
   function supported_rpcs_exn(t){
    var _bH_ = supported_rpcs(t);
    return caml_call1(Core[249], _bH_);
   }
   function shapes_exn(t){
    var _bG_ = shapes(t);
    return caml_call1(Core[249], _bG_);
   }
   function descriptions(t){
    function _bB_(_bF_){return _bF_[1];}
    var _bC_ = Core_List[50], _bD_ = validate(t);
    return caml_call2
            (Core_Or_error[48],
             _bD_,
             function(_bE_){return caml_call2(_bC_, _bE_, _bB_);});
   }
   function descriptions_exn(t){
    var _bz_ = shapes_exn(t);
    return caml_call2(Core_List[50], _bz_, function(_bA_){return _bA_[1];});
   }
   function print_shapes(t){
    var
     _bu_ = shapes(t),
     x_007 =
       caml_call2
        (Core_Or_error[48],
         _bu_,
         function(shapes){
          var
           _by_ =
             caml_call2
              (Core_List[50],
               shapes,
               function(param){
                var shape = param[2], description = param[1];
                return [0, description[1], [0, description[2], shape]];
               });
          return caml_call1(Core_String[152][15], _by_);
         }),
     _bv_ =
       caml_call1
        (Core[431],
         function(param){
          var
           arg1_004 = param[2],
           arg0_003 = param[1],
           res0_005 = caml_call1(Core[363], arg0_003),
           res1_006 = caml_call1(Babel_Shape[1], arg1_004);
          return [1, [0, res0_005, [0, res1_006, 0]]];
         }),
     _bw_ = caml_call1(Core_String[152][42], _bv_),
     _bx_ = caml_call2(Core_Or_error[13], _bw_, x_007);
    return caml_call2(Core[250], 0, _bx_);
   }
   function map$0(t){
    var
     _bq_ = caml_call1(Tilde_f[16], Core_Result[39]),
     _br_ = caml_call1(Core_Map[55], t),
     _bs_ = caml_call1(Tilde_f[15], _br_),
     _bt_ = caml_call2(Tilde_f[3][2], _bs_, _bq_);
    return caml_call2(Tilde_f[3][2], _bt_, map);
   }
   function of_list(ts){
    function shape_set(param){
     if(0 === param[0]){
      var rpc = param[1][2];
      return [246,
              function(param){
               var _bp_ = caml_call1(Babel_Generic_rpc[2], rpc);
               return caml_call1(Babel_Shape[23][6], _bp_);
              }];
     }
     var shapes = param[1];
     return shapes;
    }
    var
     _bm_ = Map[5],
     _bn_ =
       caml_call2
        (Core_List[107],
         ts,
         function(t1, t2){
          return caml_call3
                  (Core_Map[82],
                   t1,
                   t2,
                   function(param, a, b){
                    var
                     let_syntax_008 = shape_set(a),
                     let_syntax_009 = shape_set(b),
                     _bo_ =
                       caml_call2
                        (Core_Lazy[30][4][4], let_syntax_008, let_syntax_009);
                    return [1,
                            caml_call2
                             (Core_Lazy[30][4][3],
                              _bo_,
                              function(param){
                               var b = param[2], a = param[1];
                               return caml_call2(Core_Set[14], a, b);
                              })];
                   });
         });
    return caml_call2(Core_Option[35], _bn_, _bm_);
   }
   function map_query(t){
    var _bk_ = Babel_Babel_fn[20], _bl_ = map$0(t);
    return caml_call2(Tilde_f[3][2], _bl_, _bk_);
   }
   function map_response(t){
    var _bi_ = Babel_Babel_fn[8], _bj_ = map$0(t);
    return caml_call2(Tilde_f[3][2], _bj_, _bi_);
   }
   function adder(t, rpc, f){
    return of_list([0, t, [0, caml_call1(f, rpc), 0]]);
   }
   function singleton(description, implementer){
    return caml_call2(Map[6], description, [0, implementer]);
   }
   function singleton$0(rpc){
    return singleton
            (caml_call1(Async_rpc_kernel_Rpc[6][4], rpc),
             [0,
              function(on_exception, f){
               return caml_call3
                       (Async_rpc_kernel_Rpc[6][9], on_exception, rpc, f);
              },
              [0, rpc]]);
   }
   function add(_bg_){
    return function(_bh_){return adder(_bg_, _bh_, singleton$0);};
   }
   function map_response$0(t){
    var _be_ = Async_kernel_Deferred[13], _bf_ = map_response(t);
    return caml_call2(Tilde_f[3][2], _bf_, _be_);
   }
   var Rpc = [0, singleton$0, add, map_query, map_response$0];
   function singleton$1(rpc){
    return singleton
            (caml_call1(Async_rpc_kernel_Rpc[6][4], rpc),
             [0,
              function(on_exception, f){
               return caml_call3
                       (Async_rpc_kernel_Rpc[6][10], on_exception, rpc, f);
              },
              [0, rpc]]);
   }
   function add$0(_bc_){
    return function(_bd_){return adder(_bc_, _bd_, singleton$1);};
   }
   var
    Rpc$0 = [0, singleton$1, add$0, map_query, map_response],
    _d_ = [0, "_"],
    cst_Babel_Callee_Pipe_rpc_dire =
      "[Babel.Callee.Pipe_rpc_direct] type id for ";
   function singleton$2(rpc){
    return singleton
            (caml_call1(Async_rpc_kernel_Rpc[8][20], rpc),
             [0,
              function(on_exception, f){
               return caml_call3
                       (Async_rpc_kernel_Rpc[8][7], on_exception, rpc, f);
              },
              [1, rpc]]);
   }
   function add$1(_ba_){
    return function(_bb_){return adder(_ba_, _bb_, singleton$2);};
   }
   function map_error(t){
    var
     _a8_ = caml_call1(Tilde_f[16], Core_Result[40]),
     _a9_ = Async_kernel_Deferred[13],
     _a__ = map_response(t),
     _a$_ = caml_call2(Tilde_f[3][2], _a__, _a9_);
    return caml_call2(Tilde_f[3][2], _a$_, _a8_);
   }
   function filter_map_response(t){
    var
     _a2_ = caml_call1(Async_kernel_Pipe[61], 0),
     _a3_ = caml_call1(Tilde_f[16], Core_Result[39]),
     _a4_ = Async_kernel_Deferred[13],
     _a5_ = map_response(t),
     _a6_ = caml_call2(Tilde_f[3][2], _a5_, _a4_),
     _a7_ = caml_call2(Tilde_f[3][2], _a6_, _a3_);
    return caml_call2(Tilde_f[3][2], _a7_, _a2_);
   }
   function map_response$1(t){
    var
     _aW_ = Async_kernel_Pipe[57],
     _aX_ = caml_call1(Tilde_f[16], Core_Result[39]),
     _aY_ = Async_kernel_Deferred[13],
     _aZ_ = map_response(t),
     _a0_ = caml_call2(Tilde_f[3][2], _aZ_, _aY_),
     _a1_ = caml_call2(Tilde_f[3][2], _a0_, _aX_);
    return caml_call2(Tilde_f[3][2], _a1_, _aW_);
   }
   function singleton$3(rpc){
    var
     description = caml_call1(Async_rpc_kernel_Rpc[8][20], rpc),
     description_sexp = caml_call1(Async_rpc_kernel_Rpc[1][1], description),
     _aU_ =
       [0,
        cst_Babel_Callee_Pipe_rpc_dire,
        [0, caml_call1(Core_Sexp[83], description_sexp), 0]],
     _aV_ = caml_call2(Stdlib_String[7], cst, _aU_),
     witness =
       caml_call2(Core_Type_equal[8][3], _aV_, function(param){return _d_;});
    return singleton
            (description,
             [0,
              function(on_exception, f){
               return caml_call3
                       (Async_rpc_kernel_Rpc[8][9],
                        on_exception,
                        rpc,
                        function(connection_state, query, writer){
                         return caml_call3
                                 (f,
                                  connection_state,
                                  query,
                                  caml_call2
                                   (Babel_Direct_stream_writer[10][2], writer, witness));
                        });
              },
              [1, rpc]]);
   }
   function add$2(_aS_){
    return function(_aT_){return adder(_aS_, _aT_, singleton$3);};
   }
   function map_error$0(t){
    var
     _aM_ = caml_call1(Tilde_f[16], Core_Result[40]),
     _aN_ = Async_kernel_Deferred[13],
     _aO_ = Babel_Babel_fn[8],
     _aP_ = map_response(t),
     _aQ_ = caml_call2(Tilde_f[3][2], _aP_, _aO_),
     _aR_ = caml_call2(Tilde_f[3][2], _aQ_, _aN_);
    return caml_call2(Tilde_f[3][2], _aR_, _aM_);
   }
   function filter_map_response$0(t, f){
    var
     id = caml_call1(Babel_Direct_stream_writer[10][1][45], 0),
     _aF_ = Babel_Direct_stream_writer[10][4],
     _aG_ = Babel_Babel_fn[20],
     _aH_ = map_response(t),
     _aI_ = caml_call2(Tilde_f[3][2], _aH_, _aG_);
    return caml_call1
            (caml_call2
              (Tilde_f[3][2],
               _aI_,
               function(_aJ_){
                var _aK_ = caml_call1(_aF_, _aJ_);
                return function(_aL_){return caml_call2(_aK_, _aL_, id);};
               }),
             f);
   }
   function map_response$2(t, f){
    var
     id = caml_call1(Babel_Direct_stream_writer[10][1][45], 0),
     _ay_ = Babel_Direct_stream_writer[10][3],
     _az_ = Babel_Babel_fn[20],
     _aA_ = map_response(t),
     _aB_ = caml_call2(Tilde_f[3][2], _aA_, _az_);
    return caml_call1
            (caml_call2
              (Tilde_f[3][2],
               _aB_,
               function(_aC_){
                var _aD_ = caml_call1(_ay_, _aC_);
                return function(_aE_){return caml_call2(_aD_, _aE_, id);};
               }),
             f);
   }
   function singleton$4(rpc){
    return singleton
            (caml_call1(Async_rpc_kernel_Rpc[9][16], rpc),
             [0,
              function(on_exception, f){
               return caml_call3
                       (Async_rpc_kernel_Rpc[9][8], on_exception, rpc, f);
              },
              [2, rpc]]);
   }
   function add$3(_aw_){
    return function(_ax_){return adder(_aw_, _ax_, singleton$4);};
   }
   function map_state(t){
    var
     _aq_ = Core_Tuple[1][12],
     _ar_ = caml_call1(Tilde_f[16], Core_Result[39]),
     _as_ = Async_kernel_Deferred[13],
     _at_ = map_response(t),
     _au_ = caml_call2(Tilde_f[3][2], _at_, _as_),
     _av_ = caml_call2(Tilde_f[3][2], _au_, _ar_);
    return caml_call2(Tilde_f[3][2], _av_, _aq_);
   }
   function map_update(t){
    var
     _ai_ = Async_kernel_Pipe[57],
     _aj_ = Core_Tuple[1][13],
     _ak_ = caml_call1(Tilde_f[16], Core_Result[39]),
     _al_ = Async_kernel_Deferred[13],
     _am_ = map_response(t),
     _an_ = caml_call2(Tilde_f[3][2], _am_, _al_),
     _ao_ = caml_call2(Tilde_f[3][2], _an_, _ak_),
     _ap_ = caml_call2(Tilde_f[3][2], _ao_, _aj_);
    return caml_call2(Tilde_f[3][2], _ap_, _ai_);
   }
   function filter_map_update(t){
    var
     _aa_ = caml_call1(Async_kernel_Pipe[61], 0),
     _ab_ = Core_Tuple[1][13],
     _ac_ = caml_call1(Tilde_f[16], Core_Result[39]),
     _ad_ = Async_kernel_Deferred[13],
     _ae_ = map_response(t),
     _af_ = caml_call2(Tilde_f[3][2], _ae_, _ad_),
     _ag_ = caml_call2(Tilde_f[3][2], _af_, _ac_),
     _ah_ = caml_call2(Tilde_f[3][2], _ag_, _ab_);
    return caml_call2(Tilde_f[3][2], _ah_, _aa_);
   }
   function map_error$1(t){
    var
     _Y_ = caml_call1(Tilde_f[16], Core_Result[40]),
     _Z_ = Async_kernel_Deferred[13],
     ___ = map_response(t),
     _$_ = caml_call2(Tilde_f[3][2], ___, _Z_);
    return caml_call2(Tilde_f[3][2], _$_, _Y_);
   }
   var
    State_rpc =
      [0,
       singleton$4,
       add$3,
       map_query,
       map_state,
       map_update,
       filter_map_update,
       map_error$1];
   function singleton$5(rpc){
    return singleton
            (caml_call1(Async_rpc_kernel_Rpc[10][4], rpc),
             [0,
              function(on_exception, f){
               return caml_call3
                       (Async_rpc_kernel_Rpc[10][7], on_exception, rpc, f);
              },
              [3, rpc]]);
   }
   function add$4(_W_){
    return function(_X_){return adder(_W_, _X_, singleton$5);};
   }
   var One_way = [0, singleton$5, add$4, map_query];
   function singleton$6(rpc){
    return singleton
            (caml_call1(Streamable_Plain_rpc[1], rpc),
             [0,
              function(on_exception, f){
               return caml_call3
                       (Streamable_Plain_rpc[3], on_exception, rpc, f);
              },
              [4, rpc]]);
   }
   function add$5(_U_){
    return function(_V_){return adder(_U_, _V_, singleton$6);};
   }
   function map_response$3(t){
    var
     _Q_ = caml_call1(Tilde_f[16], Core_Or_error[48]),
     _R_ = Async_kernel_Deferred[13],
     _S_ = map_response(t),
     _T_ = caml_call2(Tilde_f[3][2], _S_, _R_);
    return caml_call2(Tilde_f[3][2], _T_, _Q_);
   }
   var
    Streamable_plain_rpc = [0, singleton$6, add$5, map_query, map_response$3];
   function singleton$7(rpc){
    return singleton
            (caml_call1(Streamable_Pipe_rpc[1], rpc),
             [0,
              function(on_exception, f){
               return caml_call3(Streamable_Pipe_rpc[3], on_exception, rpc, f);
              },
              [5, rpc]]);
   }
   function add$6(_O_){
    return function(_P_){return adder(_O_, _P_, singleton$7);};
   }
   function filter_map_response$1(t){
    var
     _I_ = caml_call1(Async_kernel_Pipe[61], 0),
     _J_ = caml_call1(Tilde_f[16], Core_Result[39]),
     _K_ = Async_kernel_Deferred[13],
     _L_ = map_response(t),
     _M_ = caml_call2(Tilde_f[3][2], _L_, _K_),
     _N_ = caml_call2(Tilde_f[3][2], _M_, _J_);
    return caml_call2(Tilde_f[3][2], _N_, _I_);
   }
   function map_response$4(t){
    var
     _C_ = Async_kernel_Pipe[57],
     _D_ = caml_call1(Tilde_f[16], Core_Result[39]),
     _E_ = Async_kernel_Deferred[13],
     _F_ = map_response(t),
     _G_ = caml_call2(Tilde_f[3][2], _F_, _E_),
     _H_ = caml_call2(Tilde_f[3][2], _G_, _D_);
    return caml_call2(Tilde_f[3][2], _H_, _C_);
   }
   function singleton$8(rpc){
    return singleton
            (caml_call1(Streamable_State_rpc[1], rpc),
             [0,
              function(on_exception, f){
               return caml_call3
                       (Streamable_State_rpc[3], on_exception, rpc, f);
              },
              [6, rpc]]);
   }
   function add$7(_A_){
    return function(_B_){return adder(_A_, _B_, singleton$8);};
   }
   function map_state$0(t){
    var
     _u_ = Core_Tuple[1][12],
     _v_ = caml_call1(Tilde_f[16], Core_Result[39]),
     _w_ = Async_kernel_Deferred[13],
     _x_ = map_response(t),
     _y_ = caml_call2(Tilde_f[3][2], _x_, _w_),
     _z_ = caml_call2(Tilde_f[3][2], _y_, _v_);
    return caml_call2(Tilde_f[3][2], _z_, _u_);
   }
   function map_update$0(t){
    var
     _m_ = Async_kernel_Pipe[57],
     _n_ = Core_Tuple[1][13],
     _o_ = caml_call1(Tilde_f[16], Core_Result[39]),
     _p_ = Async_kernel_Deferred[13],
     _q_ = map_response(t),
     _r_ = caml_call2(Tilde_f[3][2], _q_, _p_),
     _s_ = caml_call2(Tilde_f[3][2], _r_, _o_),
     _t_ = caml_call2(Tilde_f[3][2], _s_, _n_);
    return caml_call2(Tilde_f[3][2], _t_, _m_);
   }
   function filter_map_update$0(t){
    var
     _e_ = caml_call1(Async_kernel_Pipe[61], 0),
     _f_ = Core_Tuple[1][13],
     _g_ = caml_call1(Tilde_f[16], Core_Result[39]),
     _h_ = Async_kernel_Deferred[13],
     _i_ = map_response(t),
     _j_ = caml_call2(Tilde_f[3][2], _i_, _h_),
     _k_ = caml_call2(Tilde_f[3][2], _j_, _g_),
     _l_ = caml_call2(Tilde_f[3][2], _k_, _f_);
    return caml_call2(Tilde_f[3][2], _l_, _e_);
   }
   var
    Streamable_state_rpc =
      [0,
       singleton$8,
       add$7,
       map_query,
       map_state$0,
       map_update$0,
       filter_map_update$0];
   caml_call1(Ppx_inline_test_lib[6], cst_babel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Babel_Callee);
   var
    Babel_Callee =
      [0,
       implement_multi,
       implement_multi_exn,
       shapes,
       shapes_exn,
       supported_rpcs,
       supported_rpcs_exn,
       descriptions,
       descriptions_exn,
       print_shapes,
       of_list,
       Rpc,
       Rpc$0,
       [0,
        singleton$2,
        add$1,
        map_query,
        map_response$1,
        filter_map_response,
        map_error],
       [0,
        singleton$3,
        add$2,
        map_query,
        map_response$2,
        filter_map_response$0,
        map_error$0],
       State_rpc,
       One_way,
       Streamable_plain_rpc,
       [0,
        singleton$7,
        add$6,
        map_query,
        map_response$4,
        filter_map_response$1],
       Streamable_state_rpc,
       map$0,
       map_query,
       map_response];
   runtime.caml_register_global(44, Babel_Callee, cst_Babel_Callee);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Babel
//# unitInfo: Requires: Async_rpc_kernel__Rpc, Babel__Callee, Babel__Caller, Babel__Shape, Base__Or_error, Core, Core__List, Core__Or_error, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Babel = "Babel",
    cst_babel = "babel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Core = global_data.Core,
    Async_rpc_kernel_Rpc = global_data.Async_rpc_kernel__Rpc,
    Core_List = global_data.Core__List,
    Babel_Shape = global_data.Babel__Shape,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core_Or_error = global_data.Core__Or_error,
    Babel_Caller = global_data.Babel__Caller,
    Babel_Callee = global_data.Babel__Callee,
    Base_Or_error = global_data.Base__Or_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib = global_data.Ppx_inline_test_lib;
   caml_call1(Ppx_module_timer_runtime[4], cst_Babel);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_babel);
   caml_call1(Expect_test_collector[6][1], "src/babel.ml");
   caml_call2(Ppx_inline_test_lib[5], cst_babel, "babel.ml");
   var
    _a_ = [0, "callee_description"],
    _b_ = [0, "caller_description"],
    cst_Corresponding_rpcs_have_mi =
      "Corresponding rpcs have mismatching shapes",
    cst_Could_not_match_any_rpcs = "Could not match any rpcs",
    cst_Caller_knows_no_rpcs_at_al = "Caller knows no rpcs at all";
   function check_compatibility(caller, callee){
    var
     caller_shapes = caml_call1(Babel_Caller[1], caller),
     _d_ = caml_call1(Babel_Callee[3], callee);
    return caml_call2
            (Base_Or_error[25][4][2],
             _d_,
             function(callee_shapes){
              var
               match =
                 caml_call2
                  (Core_List[28],
                   caller_shapes,
                   function(caller){
                    var caller_description = caller[1];
                    return caml_call2
                            (Core_List[28],
                             callee_shapes,
                             function(callee){
                              var
                               callee_description = callee[1],
                               _j_ =
                                 0
                                  ===
                                   caml_call2
                                    (Async_rpc_kernel_Rpc[1][23],
                                     caller_description,
                                     callee_description)
                                  ? 1
                                  : 0;
                              return _j_ ? [0, [0, caller, callee]] : 0;
                             });
                   });
              if(! match)
               return caller_shapes
                       ? caml_call1
                         (Core_Or_error[41], cst_Could_not_match_any_rpcs)
                       : caml_call1
                         (Core_Or_error[41], cst_Caller_knows_no_rpcs_at_al);
              var
               _e_ = match[1],
               _f_ = _e_[2],
               callee_shape = _f_[2],
               callee_description = _f_[1],
               match$0 = _e_[1],
               caller_shape = match$0[2],
               caller_description = match$0[1];
              if(caml_call2(Babel_Shape[8], caller_shape, callee_shape))
               return [0, caller_description];
              var
               _g_ =
                 [0,
                  [1,
                   [0,
                    _a_,
                    [0,
                     caml_call1(Async_rpc_kernel_Rpc[1][1], callee_description),
                     0]]],
                  0],
               _h_ =
                 [0,
                  [1,
                   [0,
                    _b_,
                    [0,
                     caml_call1(Async_rpc_kernel_Rpc[1][1], caller_description),
                     0]]],
                  _g_],
               _i_ =
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7], cst_Corresponding_rpcs_have_mi),
                   _h_]];
              return caml_call1(Core_Or_error[40], _i_);
             });
   }
   function check_compatibility_exn(caller, callee){
    var _c_ = check_compatibility(caller, callee);
    return caml_call1(Core[249], _c_);
   }
   caml_call1(Ppx_inline_test_lib[6], cst_babel);
   caml_call1(Expect_test_collector[6][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Babel);
   var Babel = [0, check_compatibility, check_compatibility_exn];
   runtime.caml_register_global(25, Babel, cst_Babel);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
